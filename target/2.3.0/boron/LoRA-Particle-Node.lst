
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/2.3.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006730  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000008  2003f400  000da750  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003ddb8  000da758  0001ddb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009c0  2003de30  2003de30  0002de30  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000da7d0  000da7d0  0002a7d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da7f8  000da7f8  0002a7f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0025af0f  00000000  00000000  0002a7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00023565  00000000  00000000  0028570b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00041e34  00000000  00000000  002a8c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000036b8  00000000  00000000  002eaaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a510  00000000  00000000  002ee15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000484dc  00000000  00000000  002f866c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005bc77  00000000  00000000  00340b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012a9da  00000000  00000000  0039c7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009d04  00000000  00000000  004c719c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fcd5 	bl	d99e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fcf7 	bl	d9a30 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ddb8 	.word	0x2003ddb8
   d404c:	000da758 	.word	0x000da758
   d4050:	2003de30 	.word	0x2003de30
   d4054:	2003de30 	.word	0x2003de30
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 ffc1 	bl	d8fe8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da720 	.word	0x000da720
   d4080:	000da74c 	.word	0x000da74c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb3a 	b.w	d46fc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa09 	bl	d44a0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bf61 	b.w	d8f58 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bcbf 	b.w	d6a18 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bcbd 	b.w	d6a18 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bcc3 	b.w	d6a28 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fbae 	bl	d680c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d64fd 	.word	0x000d64fd

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z9sensorISRv>:

	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
}

void sensorISR() {
	sensorDetect = true;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z9sensorISRv+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
}
   d40da:	4770      	bx	lr
   d40dc:	2003e310 	.word	0x2003e310

000d40e0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e0:	4b0a      	ldr	r3, [pc, #40]	; (d410c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40e2:	b510      	push	{r4, lr}
   d40e4:	4604      	mov	r4, r0
   d40e6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40e8:	f003 fc60 	bl	d79ac <_ZN5spark10LogManager8instanceEv>
   d40ec:	4621      	mov	r1, r4
   d40ee:	f003 fe22 	bl	d7d36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40f2:	f004 fee9 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d40f6:	f004 fed9 	bl	d8eac <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40fa:	4620      	mov	r0, r4
   d40fc:	4b04      	ldr	r3, [pc, #16]	; (d4110 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40fe:	f840 3b04 	str.w	r3, [r0], #4
   d4102:	f003 fd05 	bl	d7b10 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4106:	4620      	mov	r0, r4
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	000da030 	.word	0x000da030
   d4110:	000da018 	.word	0x000da018

000d4114 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4114:	b510      	push	{r4, lr}
   d4116:	4604      	mov	r4, r0
    }
   d4118:	f7ff ffe2 	bl	d40e0 <_ZN5spark16SerialLogHandlerD1Ev>
   d411c:	4620      	mov	r0, r4
   d411e:	2124      	movs	r1, #36	; 0x24
   d4120:	f005 f83a 	bl	d9198 <_ZdlPvj>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}

000d4128 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4128:	b40e      	push	{r1, r2, r3}
   d412a:	b510      	push	{r4, lr}
   d412c:	b08d      	sub	sp, #52	; 0x34
   d412e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4130:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4132:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4136:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4138:	2300      	movs	r3, #0
   d413a:	2020      	movs	r0, #32
   d413c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4140:	e9cd 4200 	strd	r4, r2, [sp]
   d4144:	201e      	movs	r0, #30
   d4146:	aa04      	add	r2, sp, #16
   d4148:	f002 fb68 	bl	d681c <log_message_v>
}
   d414c:	b00d      	add	sp, #52	; 0x34
   d414e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4152:	b003      	add	sp, #12
   d4154:	4770      	bx	lr
	...

000d4158 <_Z11recordCountv>:

void recordCount() {
   d4158:	b538      	push	{r3, r4, r5, lr}
	static time_t lastCount = Time.now();
   d415a:	4d17      	ldr	r5, [pc, #92]	; (d41b8 <_Z11recordCountv+0x60>)
   d415c:	4c17      	ldr	r4, [pc, #92]	; (d41bc <_Z11recordCountv+0x64>)
   d415e:	782b      	ldrb	r3, [r5, #0]
   d4160:	f3bf 8f5b 	dmb	ish
   d4164:	f013 0f01 	tst.w	r3, #1
   d4168:	d10b      	bne.n	d4182 <_Z11recordCountv+0x2a>
   d416a:	4628      	mov	r0, r5
   d416c:	f7ff ffa4 	bl	d40b8 <__cxa_guard_acquire>
   d4170:	b138      	cbz	r0, d4182 <_Z11recordCountv+0x2a>
   d4172:	f004 fda6 	bl	d8cc2 <_ZN9TimeClass3nowEv>
   d4176:	17c1      	asrs	r1, r0, #31
   d4178:	e9c4 0100 	strd	r0, r1, [r4]
   d417c:	4628      	mov	r0, r5
   d417e:	f7ff ffa0 	bl	d40c2 <__cxa_guard_release>
	if (Time.now() - lastCount) {
   d4182:	f004 fd9e 	bl	d8cc2 <_ZN9TimeClass3nowEv>
   d4186:	e9d4 2300 	ldrd	r2, r3, [r4]
   d418a:	17c1      	asrs	r1, r0, #31
   d418c:	4299      	cmp	r1, r3
   d418e:	bf08      	it	eq
   d4190:	4290      	cmpeq	r0, r2
   d4192:	d00f      	beq.n	d41b4 <_Z11recordCountv+0x5c>
		lastCount = Time.now();
   d4194:	f004 fd95 	bl	d8cc2 <_ZN9TimeClass3nowEv>
		hourly++;
   d4198:	4a09      	ldr	r2, [pc, #36]	; (d41c0 <_Z11recordCountv+0x68>)
   d419a:	8813      	ldrh	r3, [r2, #0]
   d419c:	3301      	adds	r3, #1
   d419e:	8013      	strh	r3, [r2, #0]
		daily++;
   d41a0:	4a08      	ldr	r2, [pc, #32]	; (d41c4 <_Z11recordCountv+0x6c>)
   d41a2:	8813      	ldrh	r3, [r2, #0]
		lastCount = Time.now();
   d41a4:	17c1      	asrs	r1, r0, #31
		daily++;
   d41a6:	3301      	adds	r3, #1
   d41a8:	8013      	strh	r3, [r2, #0]
		lastCount = Time.now();
   d41aa:	e9c4 0100 	strd	r0, r1, [r4]
		sensorDetect = false;
   d41ae:	4b06      	ldr	r3, [pc, #24]	; (d41c8 <_Z11recordCountv+0x70>)
   d41b0:	2200      	movs	r2, #0
   d41b2:	701a      	strb	r2, [r3, #0]
	}
}
   d41b4:	bd38      	pop	{r3, r4, r5, pc}
   d41b6:	bf00      	nop
   d41b8:	2003de3c 	.word	0x2003de3c
   d41bc:	2003de48 	.word	0x2003de48
   d41c0:	2003e174 	.word	0x2003e174
   d41c4:	2003e040 	.word	0x2003e040
   d41c8:	2003e310 	.word	0x2003e310

000d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d41cc:	b530      	push	{r4, r5, lr}
   d41ce:	b085      	sub	sp, #20
   d41d0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d41d2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d41d4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d41d6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d41d8:	f002 fb38 	bl	d684c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41dc:	b9b0      	cbnz	r0, d420c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d41de:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d41e0:	b10c      	cbz	r4, d41e6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d41e2:	6923      	ldr	r3, [r4, #16]
   d41e4:	b923      	cbnz	r3, d41f0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d41e6:	4a0a      	ldr	r2, [pc, #40]	; (d4210 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d41e8:	2100      	movs	r1, #0
   d41ea:	200a      	movs	r0, #10
   d41ec:	f002 fb0e 	bl	d680c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d41f0:	2300      	movs	r3, #0
   d41f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   d41f6:	230c      	movs	r3, #12
   d41f8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d41fc:	2304      	movs	r3, #4
   d41fe:	9303      	str	r3, [sp, #12]
   d4200:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4202:	6923      	ldr	r3, [r4, #16]
   d4204:	aa01      	add	r2, sp, #4
   d4206:	2101      	movs	r1, #1
   d4208:	4620      	mov	r0, r4
   d420a:	4798      	blx	r3
}
   d420c:	b005      	add	sp, #20
   d420e:	bd30      	pop	{r4, r5, pc}
   d4210:	000d64fd 	.word	0x000d64fd

000d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   d4214:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4216:	2003      	movs	r0, #3
   d4218:	a901      	add	r1, sp, #4
   d421a:	f7ff ffd7 	bl	d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d421e:	b940      	cbnz	r0, d4232 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4220:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4224:	ee00 3a10 	vmov	s0, r3
   d4228:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d422c:	b003      	add	sp, #12
   d422e:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d4232:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4236:	e7f9      	b.n	d422c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4238:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d423a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d423c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d423e:	b17c      	cbz	r4, d4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4240:	6863      	ldr	r3, [r4, #4]
   d4242:	3b01      	subs	r3, #1
   d4244:	6063      	str	r3, [r4, #4]
   d4246:	b95b      	cbnz	r3, d4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4248:	6823      	ldr	r3, [r4, #0]
   d424a:	4620      	mov	r0, r4
   d424c:	689b      	ldr	r3, [r3, #8]
   d424e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4250:	68a3      	ldr	r3, [r4, #8]
   d4252:	3b01      	subs	r3, #1
   d4254:	60a3      	str	r3, [r4, #8]
   d4256:	b91b      	cbnz	r3, d4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4258:	6823      	ldr	r3, [r4, #0]
   d425a:	4620      	mov	r0, r4
   d425c:	68db      	ldr	r3, [r3, #12]
   d425e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4260:	4628      	mov	r0, r5
   d4262:	bd38      	pop	{r3, r4, r5, pc}

000d4264 <_Z11sendMessagev>:

void sendMessage() {
   d4264:	b5f0      	push	{r4, r5, r6, r7, lr}
	Log.info("Sending to manager_mesh_server1");
   d4266:	4973      	ldr	r1, [pc, #460]	; (d4434 <_Z11sendMessagev+0x1d0>)
   d4268:	4873      	ldr	r0, [pc, #460]	; (d4438 <_Z11sendMessagev+0x1d4>)
void sendMessage() {
   d426a:	b0a3      	sub	sp, #140	; 0x8c
	Log.info("Sending to manager_mesh_server1");
   d426c:	f7ff ff5c 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(blueLED,HIGH);
   d4270:	2101      	movs	r1, #1
   d4272:	2007      	movs	r0, #7
   d4274:	f004 ff39 	bl	d90ea <digitalWrite>

	const uint8_t temp = 85;
	uint8_t battChg = System.batteryCharge();
   d4278:	f7ff ffcc 	bl	d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d427c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4280:	a912      	add	r1, sp, #72	; 0x48
   d4282:	edcd 7a07 	vstr	s15, [sp, #28]
   d4286:	2007      	movs	r0, #7
   d4288:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d428c:	f7ff ff9e 	bl	d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d4290:	1e04      	subs	r4, r0, #0
	uint8_t battState = System.batteryState();
    int16_t rssi = driver.lastRssi();
   d4292:	486a      	ldr	r0, [pc, #424]	; (d443c <_Z11sendMessagev+0x1d8>)
        return val;
   d4294:	bfa8      	it	ge
   d4296:	9c12      	ldrge	r4, [sp, #72]	; 0x48
   d4298:	f000 ff35 	bl	d5106 <_ZN15RHGenericDriver8lastRssiEv>
	static uint8_t msgCnt = 0;
	uint8_t payload[17];

	payload[0] = 0; 								// to be replaced/updated
   d429c:	4b68      	ldr	r3, [pc, #416]	; (d4440 <_Z11sendMessagev+0x1dc>)
   d429e:	930d      	str	r3, [sp, #52]	; 0x34
	payload[1] = 0; 								// to be replaced/updated
	payload[2] = highByte(devID);					// Set for device
	payload[3] = lowByte(devID);
	payload[4] = firmVersion;						// Set for code release
   d42a0:	2301      	movs	r3, #1
   d42a2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	payload[5] = highByte(hourly);
   d42a6:	4b67      	ldr	r3, [pc, #412]	; (d4444 <_Z11sendMessagev+0x1e0>)
	payload[6] = lowByte(hourly); 
	payload[7] = highByte(daily);
	payload[8] = lowByte(daily); 
	payload[9] = temp;
	payload[10] = battChg;
   d42a8:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
	payload[5] = highByte(hourly);
   d42ac:	881b      	ldrh	r3, [r3, #0]
	payload[6] = lowByte(hourly); 
   d42ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
	payload[5] = highByte(hourly);
   d42b2:	121a      	asrs	r2, r3, #8
	payload[7] = highByte(daily);
   d42b4:	4b64      	ldr	r3, [pc, #400]	; (d4448 <_Z11sendMessagev+0x1e4>)
	payload[5] = highByte(hourly);
   d42b6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	payload[7] = highByte(daily);
   d42ba:	881b      	ldrh	r3, [r3, #0]
	payload[8] = lowByte(daily); 
   d42bc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	payload[7] = highByte(daily);
   d42c0:	121a      	asrs	r2, r3, #8
	payload[9] = temp;
   d42c2:	2355      	movs	r3, #85	; 0x55
   d42c4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	payload[11] = battState;	
	payload[12] = resetCount;
   d42c8:	4b60      	ldr	r3, [pc, #384]	; (d444c <_Z11sendMessagev+0x1e8>)
	payload[7] = highByte(daily);
   d42ca:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	payload[12] = resetCount;
   d42ce:	781b      	ldrb	r3, [r3, #0]
   d42d0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	payload[13] = alerts;
   d42d4:	4b5e      	ldr	r3, [pc, #376]	; (d4450 <_Z11sendMessagev+0x1ec>)
	uint8_t battState = System.batteryState();
   d42d6:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
	payload[13] = alerts;
   d42da:	781b      	ldrb	r3, [r3, #0]
   d42dc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
	payload[14] = highByte(rssi);
	payload[15] = lowByte(rssi); 
	payload[16] = msgCnt++;
   d42e0:	4b5c      	ldr	r3, [pc, #368]	; (d4454 <_Z11sendMessagev+0x1f0>)
   d42e2:	781a      	ldrb	r2, [r3, #0]
   d42e4:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
   d42e8:	1c51      	adds	r1, r2, #1
	payload[14] = highByte(rssi);
   d42ea:	ba40      	rev16	r0, r0
	payload[16] = msgCnt++;
   d42ec:	7019      	strb	r1, [r3, #0]
	payload[14] = highByte(rssi);
   d42ee:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message %d", payload[16]);
   d42f2:	4959      	ldr	r1, [pc, #356]	; (d4458 <_Z11sendMessagev+0x1f4>)
   d42f4:	4850      	ldr	r0, [pc, #320]	; (d4438 <_Z11sendMessagev+0x1d4>)
   d42f6:	f7ff ff17 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42fa:	f002 fb0d 	bl	d6918 <spark_cloud_flag_connected>
	if (Particle.connected()) Particle.publish("sending","payload to server1",PRIVATE);
   d42fe:	b160      	cbz	r0, d431a <_Z11sendMessagev+0xb6>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4300:	4b56      	ldr	r3, [pc, #344]	; (d445c <_Z11sendMessagev+0x1f8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4302:	4a57      	ldr	r2, [pc, #348]	; (d4460 <_Z11sendMessagev+0x1fc>)
   d4304:	781b      	ldrb	r3, [r3, #0]
   d4306:	f88d 3000 	strb.w	r3, [sp]
   d430a:	a812      	add	r0, sp, #72	; 0x48
   d430c:	4955      	ldr	r1, [pc, #340]	; (d4464 <_Z11sendMessagev+0x200>)
   d430e:	233c      	movs	r3, #60	; 0x3c
   d4310:	f002 fd96 	bl	d6e40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4314:	a813      	add	r0, sp, #76	; 0x4c
   d4316:	f7ff ff8f 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	if (manager.sendtoWait(payload, sizeof(payload), GATEWAY_ADDRESS) == RH_ROUTER_ERROR_NONE) {
   d431a:	2300      	movs	r3, #0
   d431c:	9300      	str	r3, [sp, #0]
   d431e:	4852      	ldr	r0, [pc, #328]	; (d4468 <_Z11sendMessagev+0x204>)
   d4320:	2301      	movs	r3, #1
   d4322:	2211      	movs	r2, #17
   d4324:	a90d      	add	r1, sp, #52	; 0x34
   d4326:	f001 f90b 	bl	d5540 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d432a:	4604      	mov	r4, r0
   d432c:	2800      	cmp	r0, #0
   d432e:	d17f      	bne.n	d4430 <_Z11sendMessagev+0x1cc>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server
		uint8_t len = sizeof(buf);
   d4330:	23f9      	movs	r3, #249	; 0xf9
		uint8_t from;     
		Log.info("Message sent");
   d4332:	494e      	ldr	r1, [pc, #312]	; (d446c <_Z11sendMessagev+0x208>)
   d4334:	4840      	ldr	r0, [pc, #256]	; (d4438 <_Z11sendMessagev+0x1d4>)
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d4336:	4d4e      	ldr	r5, [pc, #312]	; (d4470 <_Z11sendMessagev+0x20c>)
		uint8_t len = sizeof(buf);
   d4338:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		Log.info("Message sent");
   d433c:	f7ff fef4 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d4340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d4344:	9300      	str	r3, [sp, #0]
   d4346:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d434a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d434e:	4846      	ldr	r0, [pc, #280]	; (d4468 <_Z11sendMessagev+0x204>)
   d4350:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4354:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d4358:	4629      	mov	r1, r5
   d435a:	f001 f9f7 	bl	d574c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d435e:	2800      	cmp	r0, #0
   d4360:	d061      	beq.n	d4426 <_Z11sendMessagev+0x1c2>
			buf[len] = 0;
   d4362:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
			char data[64];
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[2] == payload[16]) ? "successful":"unsuccessful");
   d4366:	4835      	ldr	r0, [pc, #212]	; (d443c <_Z11sendMessagev+0x1d8>)
			buf[len] = 0;
   d4368:	54ec      	strb	r4, [r5, r3]
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[2] == payload[16]) ? "successful":"unsuccessful");
   d436a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d436e:	9307      	str	r3, [sp, #28]
   d4370:	f000 fec9 	bl	d5106 <_ZN15RHGenericDriver8lastRssiEv>
   d4374:	78af      	ldrb	r7, [r5, #2]
   d4376:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
   d437a:	493e      	ldr	r1, [pc, #248]	; (d4474 <_Z11sendMessagev+0x210>)
   d437c:	4a3e      	ldr	r2, [pc, #248]	; (d4478 <_Z11sendMessagev+0x214>)
   d437e:	9b07      	ldr	r3, [sp, #28]
   d4380:	42b7      	cmp	r7, r6
   d4382:	bf18      	it	ne
   d4384:	460a      	movne	r2, r1
   d4386:	e9cd 0200 	strd	r0, r2, [sp]
   d438a:	2140      	movs	r1, #64	; 0x40
   d438c:	4a3b      	ldr	r2, [pc, #236]	; (d447c <_Z11sendMessagev+0x218>)
   d438e:	a812      	add	r0, sp, #72	; 0x48
   d4390:	f002 fb6a 	bl	d6a68 <snprintf>
			Log.info(data);
   d4394:	4828      	ldr	r0, [pc, #160]	; (d4438 <_Z11sendMessagev+0x1d4>)
   d4396:	a912      	add	r1, sp, #72	; 0x48
   d4398:	f7ff fec6 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
			uint32_t newTime = ((buf[3] << 24) | (buf[4] << 16) | (buf[5] << 8) | buf[6]);
   d439c:	f8d5 2003 	ldr.w	r2, [r5, #3]
			Log.info("Time is: %lu",newTime);
   d43a0:	4937      	ldr	r1, [pc, #220]	; (d4480 <_Z11sendMessagev+0x21c>)
   d43a2:	4825      	ldr	r0, [pc, #148]	; (d4438 <_Z11sendMessagev+0x1d4>)
   d43a4:	ba12      	rev	r2, r2
   d43a6:	9207      	str	r2, [sp, #28]
   d43a8:	f7ff febe 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
			Time.setTime(newTime);  // Set time based on response from gateway
   d43ac:	9a07      	ldr	r2, [sp, #28]
   d43ae:	4621      	mov	r1, r4
   d43b0:	4610      	mov	r0, r2
   d43b2:	f004 fc1e 	bl	d8bf2 <_ZN9TimeClass7setTimeEx>
			Log.info("Time set to %lu local time is %s", newTime, Time.timeStr(newTime).c_str());
   d43b6:	9a07      	ldr	r2, [sp, #28]
   d43b8:	4623      	mov	r3, r4
   d43ba:	a809      	add	r0, sp, #36	; 0x24
   d43bc:	f004 fc2c 	bl	d8c18 <_ZN9TimeClass7timeStrEx>
   d43c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d43c2:	9a07      	ldr	r2, [sp, #28]
   d43c4:	492f      	ldr	r1, [pc, #188]	; (d4484 <_Z11sendMessagev+0x220>)
   d43c6:	481c      	ldr	r0, [pc, #112]	; (d4438 <_Z11sendMessagev+0x1d4>)
   d43c8:	f7ff feae 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
   d43cc:	a809      	add	r0, sp, #36	; 0x24
   d43ce:	f004 fb3d 	bl	d8a4c <_ZN6StringD1Ev>
			Log.info("Next report in %u seconds",((buf[7] << 8) | buf[8]));
   d43d2:	f8b5 2007 	ldrh.w	r2, [r5, #7]
   d43d6:	492c      	ldr	r1, [pc, #176]	; (d4488 <_Z11sendMessagev+0x224>)
   d43d8:	4817      	ldr	r0, [pc, #92]	; (d4438 <_Z11sendMessagev+0x1d4>)
   d43da:	ba52      	rev16	r2, r2
   d43dc:	b292      	uxth	r2, r2
   d43de:	f7ff fea3 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
			nextReportSeconds = ((buf[7] << 8) | buf[8]);
   d43e2:	79ea      	ldrb	r2, [r5, #7]
   d43e4:	7a2b      	ldrb	r3, [r5, #8]
   d43e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43ea:	4a28      	ldr	r2, [pc, #160]	; (d448c <_Z11sendMessagev+0x228>)
   d43ec:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43ee:	f002 fa93 	bl	d6918 <spark_cloud_flag_connected>
			if (Particle.connected()) Particle.publish("Update",data,PRIVATE);
   d43f2:	b160      	cbz	r0, d440e <_Z11sendMessagev+0x1aa>
   d43f4:	4b19      	ldr	r3, [pc, #100]	; (d445c <_Z11sendMessagev+0x1f8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43f6:	4926      	ldr	r1, [pc, #152]	; (d4490 <_Z11sendMessagev+0x22c>)
   d43f8:	781b      	ldrb	r3, [r3, #0]
   d43fa:	f88d 3000 	strb.w	r3, [sp]
   d43fe:	a809      	add	r0, sp, #36	; 0x24
   d4400:	233c      	movs	r3, #60	; 0x3c
   d4402:	aa12      	add	r2, sp, #72	; 0x48
   d4404:	f002 fd1c 	bl	d6e40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4408:	a80a      	add	r0, sp, #40	; 0x28
   d440a:	f7ff ff15 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		else {
			Log.info("No reply, is rf95_mesh_server1, rf95_mesh_server2 and rf95_mesh_server3 running?");
		}
	}
	else Log.info("sendtoWait failed. Are the intermediate mesh servers running?");
	lastReportSeconds = Time.now();
   d440e:	f004 fc58 	bl	d8cc2 <_ZN9TimeClass3nowEv>
   d4412:	4b20      	ldr	r3, [pc, #128]	; (d4494 <_Z11sendMessagev+0x230>)
   d4414:	17c1      	asrs	r1, r0, #31
   d4416:	e9c3 0100 	strd	r0, r1, [r3]
	digitalWrite(blueLED,LOW);
   d441a:	2100      	movs	r1, #0
   d441c:	2007      	movs	r0, #7
   d441e:	f004 fe64 	bl	d90ea <digitalWrite>
}
   d4422:	b023      	add	sp, #140	; 0x8c
   d4424:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Log.info("No reply, is rf95_mesh_server1, rf95_mesh_server2 and rf95_mesh_server3 running?");
   d4426:	491c      	ldr	r1, [pc, #112]	; (d4498 <_Z11sendMessagev+0x234>)
	else Log.info("sendtoWait failed. Are the intermediate mesh servers running?");
   d4428:	4803      	ldr	r0, [pc, #12]	; (d4438 <_Z11sendMessagev+0x1d4>)
   d442a:	f7ff fe7d 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
   d442e:	e7ee      	b.n	d440e <_Z11sendMessagev+0x1aa>
   d4430:	491a      	ldr	r1, [pc, #104]	; (d449c <_Z11sendMessagev+0x238>)
   d4432:	e7f9      	b.n	d4428 <_Z11sendMessagev+0x1c4>
   d4434:	000d9e25 	.word	0x000d9e25
   d4438:	2003e590 	.word	0x2003e590
   d443c:	2003e044 	.word	0x2003e044
   d4440:	feff0000 	.word	0xfeff0000
   d4444:	2003e174 	.word	0x2003e174
   d4448:	2003e040 	.word	0x2003e040
   d444c:	2003f400 	.word	0x2003f400
   d4450:	2003de51 	.word	0x2003de51
   d4454:	2003de50 	.word	0x2003de50
   d4458:	000d9e45 	.word	0x000d9e45
   d445c:	2003de40 	.word	0x2003de40
   d4460:	000d9e58 	.word	0x000d9e58
   d4464:	000d9e6b 	.word	0x000d9e6b
   d4468:	2003e1a4 	.word	0x2003e1a4
   d446c:	000d9e73 	.word	0x000d9e73
   d4470:	2003de52 	.word	0x2003de52
   d4474:	000d9e18 	.word	0x000d9e18
   d4478:	000d9e1a 	.word	0x000d9e1a
   d447c:	000d9e80 	.word	0x000d9e80
   d4480:	000d9ea7 	.word	0x000d9ea7
   d4484:	000d9eb4 	.word	0x000d9eb4
   d4488:	000d9ed5 	.word	0x000d9ed5
   d448c:	2003ddb8 	.word	0x2003ddb8
   d4490:	000d9eef 	.word	0x000d9eef
   d4494:	2003e178 	.word	0x2003e178
   d4498:	000d9ef6 	.word	0x000d9ef6
   d449c:	000d9f47 	.word	0x000d9f47

000d44a0 <loop>:
{
   d44a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (state) {
   d44a2:	4c13      	ldr	r4, [pc, #76]	; (d44f0 <loop+0x50>)
   d44a4:	4d13      	ldr	r5, [pc, #76]	; (d44f4 <loop+0x54>)
   d44a6:	7823      	ldrb	r3, [r4, #0]
   d44a8:	2b02      	cmp	r3, #2
   d44aa:	d007      	beq.n	d44bc <loop+0x1c>
   d44ac:	2b06      	cmp	r3, #6
   d44ae:	d01a      	beq.n	d44e6 <loop+0x46>
	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d44b0:	782b      	ldrb	r3, [r5, #0]
   d44b2:	b1e3      	cbz	r3, d44ee <loop+0x4e>
}
   d44b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d44b8:	f7ff be4e 	b.w	d4158 <_Z11recordCountv>
			if (Time.now() - lastReportSeconds > nextReportSeconds) {	// Using the sendFrequency set above, we go to the reporing state
   d44bc:	f004 fc01 	bl	d8cc2 <_ZN9TimeClass3nowEv>
   d44c0:	4a0d      	ldr	r2, [pc, #52]	; (d44f8 <loop+0x58>)
   d44c2:	e9d2 3200 	ldrd	r3, r2, [r2]
   d44c6:	1ac6      	subs	r6, r0, r3
   d44c8:	4b0c      	ldr	r3, [pc, #48]	; (d44fc <loop+0x5c>)
   d44ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d44ce:	eb61 0702 	sbc.w	r7, r1, r2
   d44d2:	881a      	ldrh	r2, [r3, #0]
   d44d4:	2300      	movs	r3, #0
   d44d6:	42b2      	cmp	r2, r6
   d44d8:	41bb      	sbcs	r3, r7
   d44da:	dae9      	bge.n	d44b0 <loop+0x10>
				sensorDetect = true;
   d44dc:	2301      	movs	r3, #1
   d44de:	702b      	strb	r3, [r5, #0]
				state = REPORTING_STATE;
   d44e0:	2306      	movs	r3, #6
			state = IDLE_STATE;
   d44e2:	7023      	strb	r3, [r4, #0]
		break;
   d44e4:	e7e4      	b.n	d44b0 <loop+0x10>
			sendMessage();
   d44e6:	f7ff febd 	bl	d4264 <_Z11sendMessagev>
			state = IDLE_STATE;
   d44ea:	2302      	movs	r3, #2
   d44ec:	e7f9      	b.n	d44e2 <loop+0x42>
}
   d44ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f0:	2003e311 	.word	0x2003e311
   d44f4:	2003e310 	.word	0x2003e310
   d44f8:	2003e178 	.word	0x2003e178
   d44fc:	2003ddb8 	.word	0x2003ddb8

000d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4500:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4502:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4506:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4508:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d450a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d450e:	42ae      	cmp	r6, r5
   d4510:	d004      	beq.n	d451c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4512:	4628      	mov	r0, r5
   d4514:	f004 fa9a 	bl	d8a4c <_ZN6StringD1Ev>
   d4518:	3514      	adds	r5, #20
   d451a:	e7f8      	b.n	d450e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d451c:	6820      	ldr	r0, [r4, #0]
   d451e:	f002 fa83 	bl	d6a28 <free>
    AllocatorT::free(data_);
}
   d4522:	4620      	mov	r0, r4
   d4524:	bd70      	pop	{r4, r5, r6, pc}

000d4526 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4526:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d452a:	4604      	mov	r4, r0
   d452c:	460d      	mov	r5, r1
   d452e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4530:	d916      	bls.n	d4560 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4532:	4290      	cmp	r0, r2
   d4534:	d215      	bcs.n	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4536:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d453a:	1a75      	subs	r5, r6, r1
   d453c:	f1a1 0714 	sub.w	r7, r1, #20
   d4540:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4542:	42b7      	cmp	r7, r6
   d4544:	d01c      	beq.n	d4580 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4546:	b12c      	cbz	r4, d4554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4548:	4631      	mov	r1, r6
   d454a:	4620      	mov	r0, r4
   d454c:	f004 fafa 	bl	d8b44 <_ZN6StringC1EOS_>
   d4550:	7c33      	ldrb	r3, [r6, #16]
   d4552:	7423      	strb	r3, [r4, #16]
   d4554:	4630      	mov	r0, r6
   d4556:	f004 fa79 	bl	d8a4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d455a:	3e14      	subs	r6, #20
   d455c:	3c14      	subs	r4, #20
   d455e:	e7f0      	b.n	d4542 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4560:	d00e      	beq.n	d4580 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4562:	42b5      	cmp	r5, r6
   d4564:	d00c      	beq.n	d4580 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4566:	b12c      	cbz	r4, d4574 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4568:	4629      	mov	r1, r5
   d456a:	4620      	mov	r0, r4
   d456c:	f004 faea 	bl	d8b44 <_ZN6StringC1EOS_>
   d4570:	7c2b      	ldrb	r3, [r5, #16]
   d4572:	7423      	strb	r3, [r4, #16]
   d4574:	4628      	mov	r0, r5
   d4576:	f004 fa69 	bl	d8a4c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d457a:	3514      	adds	r5, #20
   d457c:	3414      	adds	r4, #20
   d457e:	e7f0      	b.n	d4562 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4586:	2300      	movs	r3, #0
   d4588:	e9c0 3300 	strd	r3, r3, [r0]
   d458c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d458e:	684f      	ldr	r7, [r1, #4]
   d4590:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4592:	4604      	mov	r4, r0
   d4594:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4596:	dd23      	ble.n	d45e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4598:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d459c:	fb08 f007 	mul.w	r0, r8, r7
   d45a0:	f002 fa3a 	bl	d6a18 <malloc>
            if (!d) {
   d45a4:	4605      	mov	r5, r0
   d45a6:	b1d8      	cbz	r0, d45e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d45a8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d45ac:	fb08 1202 	mla	r2, r8, r2, r1
   d45b0:	f7ff ffb9 	bl	d4526 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d45b4:	6820      	ldr	r0, [r4, #0]
   d45b6:	f002 fa37 	bl	d6a28 <free>
        data_ = d;
   d45ba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d45bc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d45be:	e9d6 7300 	ldrd	r7, r3, [r6]
   d45c2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d45c6:	45b8      	cmp	r8, r7
   d45c8:	d008      	beq.n	d45dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d45ca:	4639      	mov	r1, r7
   d45cc:	4628      	mov	r0, r5
   d45ce:	f004 fad3 	bl	d8b78 <_ZN6StringC1ERKS_>
   d45d2:	7c3b      	ldrb	r3, [r7, #16]
   d45d4:	742b      	strb	r3, [r5, #16]
   d45d6:	3714      	adds	r7, #20
   d45d8:	3514      	adds	r5, #20
   d45da:	e7f4      	b.n	d45c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d45dc:	6873      	ldr	r3, [r6, #4]
   d45de:	6063      	str	r3, [r4, #4]
}
   d45e0:	4620      	mov	r0, r4
   d45e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d45e8 <_GLOBAL__sub_I_SystemMode>:
}
   d45e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d45ea:	4b37      	ldr	r3, [pc, #220]	; (d46c8 <_GLOBAL__sub_I_SystemMode+0xe0>)
    SleepResult() {}
   d45ec:	4a37      	ldr	r2, [pc, #220]	; (d46cc <_GLOBAL__sub_I_SystemMode+0xe4>)
   d45ee:	2501      	movs	r5, #1
   d45f0:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d45f2:	4b37      	ldr	r3, [pc, #220]	; (d46d0 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d45f4:	2400      	movs	r4, #0
   d45f6:	b08d      	sub	sp, #52	; 0x34
    SleepResult() {}
   d45f8:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d45fa:	601c      	str	r4, [r3, #0]
   d45fc:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d45fe:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d4600:	2003      	movs	r0, #3
   d4602:	f002 f935 	bl	d6870 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4606:	4621      	mov	r1, r4
   d4608:	4628      	mov	r0, r5
   d460a:	f002 f941 	bl	d6890 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d460e:	4629      	mov	r1, r5
   d4610:	2004      	movs	r0, #4
   d4612:	f001 ff5b 	bl	d64cc <HAL_Feature_Set>
        capacity_(0) {
   d4616:	e9cd 4400 	strd	r4, r4, [sp]
   d461a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d461c:	f004 fc54 	bl	d8ec8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4620:	4d2c      	ldr	r5, [pc, #176]	; (d46d4 <_GLOBAL__sub_I_SystemMode+0xec>)
   d4622:	4606      	mov	r6, r0
   d4624:	4669      	mov	r1, sp
   d4626:	a803      	add	r0, sp, #12
   d4628:	f7ff ffab 	bl	d4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d462c:	462f      	mov	r7, r5
        stream_(&stream) {
   d462e:	a903      	add	r1, sp, #12
   d4630:	a806      	add	r0, sp, #24
   d4632:	f7ff ffa6 	bl	d4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4636:	4b28      	ldr	r3, [pc, #160]	; (d46d8 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d4638:	f847 3b04 	str.w	r3, [r7], #4
   d463c:	a906      	add	r1, sp, #24
   d463e:	a809      	add	r0, sp, #36	; 0x24
   d4640:	f7ff ff9f 	bl	d4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4644:	aa09      	add	r2, sp, #36	; 0x24
   d4646:	211e      	movs	r1, #30
   d4648:	4638      	mov	r0, r7
   d464a:	f003 fcce 	bl	d7fea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d464e:	a809      	add	r0, sp, #36	; 0x24
   d4650:	f7ff ff56 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4654:	a806      	add	r0, sp, #24
   d4656:	f7ff ff53 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d465a:	4b20      	ldr	r3, [pc, #128]	; (d46dc <_GLOBAL__sub_I_SystemMode+0xf4>)
   d465c:	602b      	str	r3, [r5, #0]
   d465e:	622e      	str	r6, [r5, #32]
   d4660:	a803      	add	r0, sp, #12
   d4662:	f7ff ff4d 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4666:	4b1e      	ldr	r3, [pc, #120]	; (d46e0 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d4668:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d466a:	f004 fc2d 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d466e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4672:	f004 fc17 	bl	d8ea4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4676:	f003 f999 	bl	d79ac <_ZN5spark10LogManager8instanceEv>
   d467a:	4629      	mov	r1, r5
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d467c:	4d19      	ldr	r5, [pc, #100]	; (d46e4 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d467e:	f003 fc46 	bl	d7f0e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);		// For monitoring / debugging, you have some options on the next few lines
   d4682:	4668      	mov	r0, sp
   d4684:	f7ff ff3c 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4688:	4917      	ldr	r1, [pc, #92]	; (d46e8 <_GLOBAL__sub_I_SystemMode+0x100>)
   d468a:	4628      	mov	r0, r5
   d468c:	f004 fa29 	bl	d8ae2 <_ZN6StringC1EPKc>
   d4690:	2200      	movs	r2, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d4692:	4816      	ldr	r0, [pc, #88]	; (d46ec <_GLOBAL__sub_I_SystemMode+0x104>)
    LocalTimeSchedule() {
   d4694:	612c      	str	r4, [r5, #16]
   d4696:	2300      	movs	r3, #0
   d4698:	e9c5 2306 	strd	r2, r3, [r5, #24]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d469c:	e9c5 4408 	strd	r4, r4, [r5, #32]
   d46a0:	62ac      	str	r4, [r5, #40]	; 0x28
class LocalTimeConvert {
   d46a2:	2306      	movs	r3, #6
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d46a4:	4c12      	ldr	r4, [pc, #72]	; (d46f0 <_GLOBAL__sub_I_SystemMode+0x108>)
   d46a6:	f840 3b04 	str.w	r3, [r0], #4
   d46aa:	f000 fa7f 	bl	d4bac <_ZN22LocalTimePosixTimezoneC1Ev>
   d46ae:	4b11      	ldr	r3, [pc, #68]	; (d46f4 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d46b0:	2202      	movs	r2, #2
   d46b2:	210e      	movs	r1, #14
   d46b4:	4620      	mov	r0, r4
   d46b6:	f001 fc43 	bl	d5f40 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, NODE2_ADDRESS);
   d46ba:	2202      	movs	r2, #2
   d46bc:	4621      	mov	r1, r4
   d46be:	480e      	ldr	r0, [pc, #56]	; (d46f8 <_GLOBAL__sub_I_SystemMode+0x110>)
   d46c0:	f000 ff34 	bl	d552c <_ZN6RHMeshC1ER15RHGenericDriverh>
}
   d46c4:	b00d      	add	sp, #52	; 0x34
   d46c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46c8:	2003de40 	.word	0x2003de40
   d46cc:	ffff0000 	.word	0xffff0000
   d46d0:	2003de30 	.word	0x2003de30
   d46d4:	2003e180 	.word	0x2003e180
   d46d8:	000da018 	.word	0x000da018
   d46dc:	000da4ac 	.word	0x000da4ac
   d46e0:	000da030 	.word	0x000da030
   d46e4:	2003e2e0 	.word	0x2003e2e0
   d46e8:	000da473 	.word	0x000da473
   d46ec:	2003df50 	.word	0x2003df50
   d46f0:	2003e044 	.word	0x2003e044
   d46f4:	2003e328 	.word	0x2003e328
   d46f8:	2003e1a4 	.word	0x2003e1a4

000d46fc <setup>:
{
   d46fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return hal_timer_millis(nullptr);
   d4700:	2000      	movs	r0, #0
   d4702:	b09b      	sub	sp, #108	; 0x6c
   d4704:	f001 ff12 	bl	d652c <hal_timer_millis>
   d4708:	f04f 0900 	mov.w	r9, #0
   d470c:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d470e:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4712:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d4714:	2000      	movs	r0, #0
   d4716:	f001 ff09 	bl	d652c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d471a:	ebb0 0408 	subs.w	r4, r0, r8
   d471e:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4722:	42af      	cmp	r7, r5
   d4724:	bf08      	it	eq
   d4726:	42a6      	cmpeq	r6, r4
   d4728:	d307      	bcc.n	d473a <setup+0x3e>
	waitFor(Serial.isConnected, 15000);
   d472a:	f004 fbcd 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d472e:	f004 fbc0 	bl	d8eb2 <_ZN9USBSerial11isConnectedEv>
   d4732:	b910      	cbnz	r0, d473a <setup+0x3e>
            spark_process();
   d4734:	f002 f8e8 	bl	d6908 <spark_process>
        while (_while() && !_condition()) {
   d4738:	e7ec      	b.n	d4714 <setup+0x18>
   d473a:	f004 fbc5 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d473e:	f004 fbb8 	bl	d8eb2 <_ZN9USBSerial11isConnectedEv>
	pinMode(blueLED,OUTPUT);						// Blue led signals sends
   d4742:	2101      	movs	r1, #1
   d4744:	2007      	movs	r0, #7
   d4746:	f004 fcbf 	bl	d90c8 <pinMode>
	pinMode(intPin, INPUT_PULLDOWN);				// Initialize sensor interrupt pin
   d474a:	2103      	movs	r1, #3
   d474c:	2013      	movs	r0, #19
   d474e:	f004 fcbb 	bl	d90c8 <pinMode>
        int reason = RESET_REASON_NONE;
   d4752:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4754:	4611      	mov	r1, r2
   d4756:	a804      	add	r0, sp, #16
        int reason = RESET_REASON_NONE;
   d4758:	9204      	str	r2, [sp, #16]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d475a:	f001 febf 	bl	d64dc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d475e:	9b04      	ldr	r3, [sp, #16]
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d4760:	2b14      	cmp	r3, #20
   d4762:	f04f 0200 	mov.w	r2, #0
   d4766:	d173      	bne.n	d4850 <setup+0x154>
    	resetCount++;
   d4768:	4a40      	ldr	r2, [pc, #256]	; (d486c <setup+0x170>)
   d476a:	7813      	ldrb	r3, [r2, #0]
   d476c:	3301      	adds	r3, #1
   d476e:	b2db      	uxtb	r3, r3
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d4770:	2b06      	cmp	r3, #6
    	resetCount++;
   d4772:	7013      	strb	r3, [r2, #0]
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d4774:	d875      	bhi.n	d4862 <setup+0x166>
	if (!manager.init()) Log.info("init failed"); // Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d4776:	483e      	ldr	r0, [pc, #248]	; (d4870 <setup+0x174>)
   d4778:	f001 f94a 	bl	d5a10 <_ZN8RHRouter4initEv>
   d477c:	b918      	cbnz	r0, d4786 <setup+0x8a>
   d477e:	493d      	ldr	r1, [pc, #244]	; (d4874 <setup+0x178>)
   d4780:	483d      	ldr	r0, [pc, #244]	; (d4878 <setup+0x17c>)
   d4782:	f7ff fcd1 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					// Setup ISM frequency - typically 868.0 or 915.0 in the Americas, or 433.0 in the EU
   d4786:	ed9f 0a3d 	vldr	s0, [pc, #244]	; d487c <setup+0x180>
   d478a:	483d      	ldr	r0, [pc, #244]	; (d4880 <setup+0x184>)
	Log.info("Startup complete - battery %4.2f%%, reporting every %u seconds clock is %s", System.batteryCharge(), nextReportSeconds, (Time.isValid()) ? "valid" : "not valid");
   d478c:	4d3d      	ldr	r5, [pc, #244]	; (d4884 <setup+0x188>)
	driver.setFrequency(RF95_FREQ);					// Setup ISM frequency - typically 868.0 or 915.0 in the Americas, or 433.0 in the EU
   d478e:	f001 fc17 	bl	d5fc0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                     // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default):
   d4792:	483b      	ldr	r0, [pc, #236]	; (d4880 <setup+0x184>)
   d4794:	2200      	movs	r2, #0
   d4796:	2117      	movs	r1, #23
   d4798:	f001 fd8c 	bl	d62b4 <_ZN7RH_RF9510setTxPowerEab>
	attachInterrupt(intPin, sensorISR, RISING);     // Pressure Sensor interrupt from low to high
   d479c:	2300      	movs	r3, #0
   d479e:	2201      	movs	r2, #1
   d47a0:	4939      	ldr	r1, [pc, #228]	; (d4888 <setup+0x18c>)
   d47a2:	9300      	str	r3, [sp, #0]
   d47a4:	2013      	movs	r0, #19
   d47a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d47aa:	f002 fd3d 	bl	d7228 <_Z15attachInterrupttPFvvE13InterruptModeah>
	Log.info("Startup complete - battery %4.2f%%, reporting every %u seconds clock is %s", System.batteryCharge(), nextReportSeconds, (Time.isValid()) ? "valid" : "not valid");
   d47ae:	f7ff fd31 	bl	d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d47b2:	ee10 0a10 	vmov	r0, s0
   d47b6:	f004 fe5d 	bl	d9474 <__aeabi_f2d>
   d47ba:	460b      	mov	r3, r1
   d47bc:	4933      	ldr	r1, [pc, #204]	; (d488c <setup+0x190>)
   d47be:	4602      	mov	r2, r0
   d47c0:	880c      	ldrh	r4, [r1, #0]
   d47c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d47c6:	f004 fa5f 	bl	d8c88 <_ZN9TimeClass7isValidEv>
   d47ca:	4931      	ldr	r1, [pc, #196]	; (d4890 <setup+0x194>)
   d47cc:	2800      	cmp	r0, #0
   d47ce:	bf14      	ite	ne
   d47d0:	4608      	movne	r0, r1
   d47d2:	4628      	moveq	r0, r5
   d47d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d47d8:	e9cd 4000 	strd	r4, r0, [sp]
   d47dc:	492d      	ldr	r1, [pc, #180]	; (d4894 <setup+0x198>)
   d47de:	4826      	ldr	r0, [pc, #152]	; (d4878 <setup+0x17c>)
   d47e0:	f7ff fca2 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d47e4:	f000 fac0 	bl	d4d68 <_ZN9LocalTime8instanceEv>
   d47e8:	492b      	ldr	r1, [pc, #172]	; (d4898 <setup+0x19c>)
   d47ea:	4604      	mov	r4, r0
   d47ec:	a804      	add	r0, sp, #16
   d47ee:	f000 fa8f 	bl	d4d10 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d47f2:	a905      	add	r1, sp, #20
   d47f4:	f104 0008 	add.w	r0, r4, #8
   d47f8:	f004 f9af 	bl	d8b5a <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d47fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d47fe:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d4800:	a90b      	add	r1, sp, #44	; 0x2c
   d4802:	f104 0020 	add.w	r0, r4, #32
   d4806:	f004 f9a8 	bl	d8b5a <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d480a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d480c:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d480e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d4810:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d4812:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d4814:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d4816:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d4818:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d481a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d481c:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d481e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   d4822:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d4826:	a804      	add	r0, sp, #16
   d4828:	f000 f856 	bl	d48d8 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d482c:	f004 fa49 	bl	d8cc2 <_ZN9TimeClass3nowEv>
   d4830:	491a      	ldr	r1, [pc, #104]	; (d489c <setup+0x1a0>)
   d4832:	4602      	mov	r2, r0
   d4834:	17c3      	asrs	r3, r0, #31
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   d4836:	4608      	mov	r0, r1
   d4838:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
   d483c:	f000 fb0c 	bl	d4e58 <_ZN16LocalTimeConvert7convertEv>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;	// We got through setup without error
   d4840:	4b17      	ldr	r3, [pc, #92]	; (d48a0 <setup+0x1a4>)
   d4842:	781a      	ldrb	r2, [r3, #0]
   d4844:	b90a      	cbnz	r2, d484a <setup+0x14e>
   d4846:	2202      	movs	r2, #2
   d4848:	701a      	strb	r2, [r3, #0]
}
   d484a:	b01b      	add	sp, #108	; 0x6c
   d484c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4850:	4611      	mov	r1, r2
   d4852:	a804      	add	r0, sp, #16
        int reason = RESET_REASON_NONE;
   d4854:	9204      	str	r2, [sp, #16]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4856:	f001 fe41 	bl	d64dc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d485a:	9b04      	ldr	r3, [sp, #16]
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d485c:	2b8c      	cmp	r3, #140	; 0x8c
   d485e:	d18a      	bne.n	d4776 <setup+0x7a>
   d4860:	e782      	b.n	d4768 <setup+0x6c>
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d4862:	4b10      	ldr	r3, [pc, #64]	; (d48a4 <setup+0x1a8>)
   d4864:	220d      	movs	r2, #13
   d4866:	701a      	strb	r2, [r3, #0]
   d4868:	e785      	b.n	d4776 <setup+0x7a>
   d486a:	bf00      	nop
   d486c:	2003f400 	.word	0x2003f400
   d4870:	2003e1a4 	.word	0x2003e1a4
   d4874:	000d9f8f 	.word	0x000d9f8f
   d4878:	2003e590 	.word	0x2003e590
   d487c:	4464c000 	.word	0x4464c000
   d4880:	2003e044 	.word	0x2003e044
   d4884:	000d9f85 	.word	0x000d9f85
   d4888:	000d40d5 	.word	0x000d40d5
   d488c:	2003ddb8 	.word	0x2003ddb8
   d4890:	000d9f89 	.word	0x000d9f89
   d4894:	000d9f9b 	.word	0x000d9f9b
   d4898:	000d9fe6 	.word	0x000d9fe6
   d489c:	2003df50 	.word	0x2003df50
   d48a0:	2003e311 	.word	0x2003e311
   d48a4:	2003de51 	.word	0x2003de51

000d48a8 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d48a8:	4b01      	ldr	r3, [pc, #4]	; (d48b0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d48aa:	4a02      	ldr	r2, [pc, #8]	; (d48b4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d48ac:	601a      	str	r2, [r3, #0]
// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
        instance->systemEvent(event, param);
    }
}
   d48ae:	4770      	bx	lr
   d48b0:	2003e314 	.word	0x2003e314
   d48b4:	000da040 	.word	0x000da040

000d48b8 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d48b8:	4770      	bx	lr

000d48ba <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d48ba:	4770      	bx	lr

000d48bc <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d48bc:	b510      	push	{r4, lr}
}
   d48be:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d48c0:	4604      	mov	r4, r0
}
   d48c2:	f004 fc69 	bl	d9198 <_ZdlPvj>
   d48c6:	4620      	mov	r0, r4
   d48c8:	bd10      	pop	{r4, pc}

000d48ca <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d48ca:	b510      	push	{r4, lr}
}
   d48cc:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d48ce:	4604      	mov	r4, r0
}
   d48d0:	f004 fc62 	bl	d9198 <_ZdlPvj>
   d48d4:	4620      	mov	r0, r4
   d48d6:	bd10      	pop	{r4, pc}

000d48d8 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d48d8:	b510      	push	{r4, lr}
   d48da:	4b05      	ldr	r3, [pc, #20]	; (d48f0 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d48dc:	4604      	mov	r4, r0
   d48de:	f840 3b1c 	str.w	r3, [r0], #28
   d48e2:	f004 f8b3 	bl	d8a4c <_ZN6StringD1Ev>
   d48e6:	1d20      	adds	r0, r4, #4
   d48e8:	f004 f8b0 	bl	d8a4c <_ZN6StringD1Ev>
}
   d48ec:	4620      	mov	r0, r4
   d48ee:	bd10      	pop	{r4, pc}
   d48f0:	000da0ac 	.word	0x000da0ac

000d48f4 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d48f4:	b510      	push	{r4, lr}
   d48f6:	4604      	mov	r4, r0
}
   d48f8:	f7ff ffee 	bl	d48d8 <_ZN22LocalTimePosixTimezoneD1Ev>
   d48fc:	4620      	mov	r0, r4
   d48fe:	2158      	movs	r1, #88	; 0x58
   d4900:	f004 fc4a 	bl	d9198 <_ZdlPvj>
   d4904:	4620      	mov	r0, r4
   d4906:	bd10      	pop	{r4, pc}

000d4908 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d4908:	b510      	push	{r4, lr}
   d490a:	4b04      	ldr	r3, [pc, #16]	; (d491c <_ZN9LocalTimeD1Ev+0x14>)
   d490c:	4604      	mov	r4, r0
   d490e:	f840 3b04 	str.w	r3, [r0], #4
   d4912:	f7ff ffe1 	bl	d48d8 <_ZN22LocalTimePosixTimezoneD1Ev>
   d4916:	4620      	mov	r0, r4
   d4918:	bd10      	pop	{r4, pc}
   d491a:	bf00      	nop
   d491c:	000da07c 	.word	0x000da07c

000d4920 <_ZN9LocalTimeD0Ev>:
   d4920:	b510      	push	{r4, lr}
   d4922:	4604      	mov	r4, r0
   d4924:	f7ff fff0 	bl	d4908 <_ZN9LocalTimeD1Ev>
   d4928:	4620      	mov	r0, r4
   d492a:	2160      	movs	r1, #96	; 0x60
   d492c:	f004 fc34 	bl	d9198 <_ZdlPvj>
   d4930:	4620      	mov	r0, r4
   d4932:	bd10      	pop	{r4, pc}

000d4934 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d4934:	f020 0302 	bic.w	r3, r0, #2
   d4938:	2b01      	cmp	r3, #1
   d493a:	d003      	beq.n	d4944 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d493c:	1f43      	subs	r3, r0, #5
   d493e:	4258      	negs	r0, r3
   d4940:	4158      	adcs	r0, r3
   d4942:	4770      	bx	lr
   d4944:	4618      	mov	r0, r3
   d4946:	4770      	bx	lr

000d4948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4948:	680b      	ldr	r3, [r1, #0]
   d494a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d494c:	684b      	ldr	r3, [r1, #4]
   d494e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d4950:	b113      	cbz	r3, d4958 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d4952:	685a      	ldr	r2, [r3, #4]
   d4954:	3201      	adds	r2, #1
   d4956:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4958:	4770      	bx	lr
	...

000d495c <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d495c:	4a02      	ldr	r2, [pc, #8]	; (d4968 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d495e:	6002      	str	r2, [r0, #0]
   d4960:	684a      	ldr	r2, [r1, #4]
   d4962:	6042      	str	r2, [r0, #4]
   d4964:	4770      	bx	lr
   d4966:	bf00      	nop
   d4968:	000da08c 	.word	0x000da08c

000d496c <_ZN12LocalTimeHMSaSERKS_>:
   d496c:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d4970:	7102      	strb	r2, [r0, #4]
   d4972:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d4976:	7142      	strb	r2, [r0, #5]
   d4978:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d497c:	7182      	strb	r2, [r0, #6]
   d497e:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d4982:	71c2      	strb	r2, [r0, #7]
   d4984:	4770      	bx	lr

000d4986 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d4986:	b538      	push	{r3, r4, r5, lr}
   d4988:	4604      	mov	r4, r0
   d498a:	460d      	mov	r5, r1
   d498c:	3004      	adds	r0, #4
   d498e:	3104      	adds	r1, #4
   d4990:	f004 f8e3 	bl	d8b5a <_ZN6StringaSERKS_>
   d4994:	f105 0114 	add.w	r1, r5, #20
   d4998:	f104 0014 	add.w	r0, r4, #20
   d499c:	f7ff ffe6 	bl	d496c <_ZN12LocalTimeHMSaSERKS_>
   d49a0:	f105 011c 	add.w	r1, r5, #28
   d49a4:	f104 001c 	add.w	r0, r4, #28
   d49a8:	f004 f8d7 	bl	d8b5a <_ZN6StringaSERKS_>
   d49ac:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d49b0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d49b4:	f7ff ffda 	bl	d496c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d49b8:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d49bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d49c0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d49c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d49c8:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d49cc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d49d0:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d49d4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d49d8:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d49dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d49e0:	f7ff ffc4 	bl	d496c <_ZN12LocalTimeHMSaSERKS_>
   d49e4:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d49e8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d49ec:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d49f0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d49f4:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d49f8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d49fc:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d4a00:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d4a04:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d4a08:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d4a0c:	f7ff ffae 	bl	d496c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d4a10:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d4a14:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d4a18:	4620      	mov	r0, r4
   d4a1a:	bd38      	pop	{r3, r4, r5, pc}

000d4a1c <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d4a1c:	4a02      	ldr	r2, [pc, #8]	; (d4a28 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d4a1e:	6002      	str	r2, [r0, #0]
   d4a20:	2200      	movs	r2, #0
   d4a22:	6042      	str	r2, [r0, #4]
}
   d4a24:	4770      	bx	lr
   d4a26:	bf00      	nop
   d4a28:	000da08c 	.word	0x000da08c

000d4a2c <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d4a2c:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d4a2e:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d4a30:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d4a32:	8083      	strh	r3, [r0, #4]
   d4a34:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d4a36:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d4a38:	ab05      	add	r3, sp, #20
   d4a3a:	9300      	str	r3, [sp, #0]
   d4a3c:	4913      	ldr	r1, [pc, #76]	; (d4a8c <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d4a3e:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d4a40:	ab04      	add	r3, sp, #16
   d4a42:	aa03      	add	r2, sp, #12
   d4a44:	4628      	mov	r0, r5
   d4a46:	f002 f807 	bl	d6a58 <sscanf>
   d4a4a:	2803      	cmp	r0, #3
   d4a4c:	d107      	bne.n	d4a5e <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d4a4e:	9b03      	ldr	r3, [sp, #12]
   d4a50:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d4a52:	9b04      	ldr	r3, [sp, #16]
   d4a54:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d4a56:	9b05      	ldr	r3, [sp, #20]
   d4a58:	71a3      	strb	r3, [r4, #6]
}
   d4a5a:	b007      	add	sp, #28
   d4a5c:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d4a5e:	490c      	ldr	r1, [pc, #48]	; (d4a90 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d4a60:	ab04      	add	r3, sp, #16
   d4a62:	aa03      	add	r2, sp, #12
   d4a64:	4628      	mov	r0, r5
   d4a66:	f001 fff7 	bl	d6a58 <sscanf>
   d4a6a:	2802      	cmp	r0, #2
   d4a6c:	d104      	bne.n	d4a78 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d4a6e:	9b03      	ldr	r3, [sp, #12]
   d4a70:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d4a72:	9b04      	ldr	r3, [sp, #16]
   d4a74:	7163      	strb	r3, [r4, #5]
   d4a76:	e7f0      	b.n	d4a5a <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d4a78:	4906      	ldr	r1, [pc, #24]	; (d4a94 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d4a7a:	aa03      	add	r2, sp, #12
   d4a7c:	4628      	mov	r0, r5
   d4a7e:	f001 ffeb 	bl	d6a58 <sscanf>
   d4a82:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d4a84:	bf04      	itt	eq
   d4a86:	9b03      	ldreq	r3, [sp, #12]
   d4a88:	7123      	strbeq	r3, [r4, #4]
}
   d4a8a:	e7e6      	b.n	d4a5a <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d4a8c:	000da04b 	.word	0x000da04b
   d4a90:	000da04e 	.word	0x000da04e
   d4a94:	000d9e55 	.word	0x000d9e55

000d4a98 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d4a98:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d4a9c:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d4aa0:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d4aa4:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d4aa6:	bfb8      	it	lt
   d4aa8:	4808      	ldrlt	r0, [pc, #32]	; (d4acc <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d4aaa:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d4aae:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d4ab2:	bfbd      	ittte	lt
   d4ab4:	fb00 2003 	mlalt	r0, r0, r3, r2
   d4ab8:	1840      	addlt	r0, r0, r1
   d4aba:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d4abc:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d4ac0:	bfa4      	itt	ge
   d4ac2:	fb00 2303 	mlage	r3, r0, r3, r2
   d4ac6:	1858      	addge	r0, r3, r1
}
   d4ac8:	4770      	bx	lr
   d4aca:	bf00      	nop
   d4acc:	fffff1f0 	.word	0xfffff1f0

000d4ad0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d4ad0:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d4ad4:	b943      	cbnz	r3, d4ae8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d4ad6:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d4ada:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d4adc:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d4ae0:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d4ae2:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d4ae6:	600b      	str	r3, [r1, #0]
}
   d4ae8:	4770      	bx	lr

000d4aea <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d4aea:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d4aee:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d4af0:	b9b3      	cbnz	r3, d4b20 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d4af2:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d4af6:	688c      	ldr	r4, [r1, #8]
   d4af8:	442c      	add	r4, r5
   d4afa:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d4afe:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d4b00:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d4b04:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d4b06:	bfb5      	itete	lt
   d4b08:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d4b0a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d4b0c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d4b0e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d4b10:	bfb5      	itete	lt
   d4b12:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d4b16:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d4b1a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d4b1c:	189b      	addge	r3, r3, r2
   d4b1e:	600b      	str	r3, [r1, #0]
}
   d4b20:	bd30      	pop	{r4, r5, pc}
	...

000d4b24 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d4b24:	4a05      	ldr	r2, [pc, #20]	; (d4b3c <_ZN15LocalTimeChangeC1Ev+0x18>)
   d4b26:	b508      	push	{r3, lr}
   d4b28:	6002      	str	r2, [r0, #0]
   d4b2a:	2200      	movs	r2, #0
   d4b2c:	4603      	mov	r3, r0
   d4b2e:	6042      	str	r2, [r0, #4]
   d4b30:	3008      	adds	r0, #8
   d4b32:	f7ff ff73 	bl	d4a1c <_ZN12LocalTimeHMSC1Ev>
}
   d4b36:	4618      	mov	r0, r3
   d4b38:	bd08      	pop	{r3, pc}
   d4b3a:	bf00      	nop
   d4b3c:	000da09c 	.word	0x000da09c

000d4b40 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d4b40:	2300      	movs	r3, #0
   d4b42:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d4b44:	8183      	strh	r3, [r0, #12]
   d4b46:	7383      	strb	r3, [r0, #14]
}
   d4b48:	4770      	bx	lr
	...

000d4b4c <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d4b4c:	b530      	push	{r4, r5, lr}
   d4b4e:	4604      	mov	r4, r0
   d4b50:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d4b52:	460d      	mov	r5, r1
   d4b54:	b111      	cbz	r1, d4b5c <_ZN15LocalTimeChange5parseEPKc+0x10>
   d4b56:	780b      	ldrb	r3, [r1, #0]
   d4b58:	2b4d      	cmp	r3, #77	; 0x4d
   d4b5a:	d003      	beq.n	d4b64 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	f7ff ffef 	bl	d4b40 <_ZN15LocalTimeChange5clearEv>
   d4b62:	e01b      	b.n	d4b9c <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d4b64:	ab05      	add	r3, sp, #20
   d4b66:	9300      	str	r3, [sp, #0]
   d4b68:	490f      	ldr	r1, [pc, #60]	; (d4ba8 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d4b6a:	ab04      	add	r3, sp, #16
   d4b6c:	aa03      	add	r2, sp, #12
   d4b6e:	4628      	mov	r0, r5
   d4b70:	f001 ff72 	bl	d6a58 <sscanf>
   d4b74:	2803      	cmp	r0, #3
   d4b76:	d1f1      	bne.n	d4b5c <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d4b78:	9b03      	ldr	r3, [sp, #12]
   d4b7a:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d4b7c:	9b04      	ldr	r3, [sp, #16]
   d4b7e:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d4b80:	9b05      	ldr	r3, [sp, #20]
   d4b82:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d4b84:	212f      	movs	r1, #47	; 0x2f
   d4b86:	4628      	mov	r0, r5
   d4b88:	f004 ffb2 	bl	d9af0 <strchr>
        if (cp) {
   d4b8c:	b140      	cbz	r0, d4ba0 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d4b8e:	1c41      	adds	r1, r0, #1
   d4b90:	f104 0008 	add.w	r0, r4, #8
   d4b94:	f7ff ff4a 	bl	d4a2c <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d4b98:	2301      	movs	r3, #1
   d4b9a:	71e3      	strb	r3, [r4, #7]
}
   d4b9c:	b007      	add	sp, #28
   d4b9e:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d4ba0:	81a0      	strh	r0, [r4, #12]
   d4ba2:	73a0      	strb	r0, [r4, #14]
}
   d4ba4:	e7f8      	b.n	d4b98 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d4ba6:	bf00      	nop
   d4ba8:	000da066 	.word	0x000da066

000d4bac <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d4bac:	4b10      	ldr	r3, [pc, #64]	; (d4bf0 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d4bae:	4911      	ldr	r1, [pc, #68]	; (d4bf4 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	4604      	mov	r4, r0
   d4bb4:	f840 3b04 	str.w	r3, [r0], #4
   d4bb8:	f003 ff93 	bl	d8ae2 <_ZN6StringC1EPKc>
   d4bbc:	f104 0014 	add.w	r0, r4, #20
   d4bc0:	f7ff ff2c 	bl	d4a1c <_ZN12LocalTimeHMSC1Ev>
   d4bc4:	490b      	ldr	r1, [pc, #44]	; (d4bf4 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d4bc6:	f104 001c 	add.w	r0, r4, #28
   d4bca:	f003 ff8a 	bl	d8ae2 <_ZN6StringC1EPKc>
   d4bce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4bd2:	f7ff ff23 	bl	d4a1c <_ZN12LocalTimeHMSC1Ev>
   d4bd6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d4bda:	f7ff ffa3 	bl	d4b24 <_ZN15LocalTimeChangeC1Ev>
   d4bde:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4be2:	f7ff ff9f 	bl	d4b24 <_ZN15LocalTimeChangeC1Ev>
   d4be6:	2300      	movs	r3, #0
   d4be8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d4bec:	4620      	mov	r0, r4
   d4bee:	bd10      	pop	{r4, pc}
   d4bf0:	000da0ac 	.word	0x000da0ac
   d4bf4:	000da473 	.word	0x000da473

000d4bf8 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   d4bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bfc:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d4bfe:	4608      	mov	r0, r1
   d4c00:	f004 ffa0 	bl	d9b44 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   d4c04:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d4c06:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d4c08:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   d4c0a:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d4c0e:	493f      	ldr	r1, [pc, #252]	; (d4d0c <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d4c10:	9801      	ldr	r0, [sp, #4]
   d4c12:	aa01      	add	r2, sp, #4
   d4c14:	f005 f809 	bl	d9c2a <strtok_r>
   d4c18:	4601      	mov	r1, r0
   d4c1a:	2800      	cmp	r0, #0
   d4c1c:	d062      	beq.n	d4ce4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d4c1e:	2d01      	cmp	r5, #1
   d4c20:	f105 0301 	add.w	r3, r5, #1
   d4c24:	d053      	beq.n	d4cce <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d4c26:	2d02      	cmp	r5, #2
   d4c28:	d056      	beq.n	d4cd8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d4c2a:	2d00      	cmp	r5, #0
   d4c2c:	d146      	bne.n	d4cbc <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d4c2e:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d4c30:	f892 9000 	ldrb.w	r9, [r2]
   d4c34:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d4c38:	4615      	mov	r5, r2
   d4c3a:	4617      	mov	r7, r2
   d4c3c:	f102 0201 	add.w	r2, r2, #1
   d4c40:	d8f6      	bhi.n	d4c30 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d4c42:	2200      	movs	r2, #0
   d4c44:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d4c46:	f104 001c 	add.w	r0, r4, #28
   d4c4a:	f003 ffa0 	bl	d8b8e <_ZN6StringaSEPKc>
                valid = true;
   d4c4e:	2201      	movs	r2, #1
                *cp = save2;
   d4c50:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d4c54:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d4c58:	782a      	ldrb	r2, [r5, #0]
   d4c5a:	b36a      	cbz	r2, d4cb8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d4c5c:	f897 a000 	ldrb.w	sl, [r7]
   d4c60:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d4c64:	2a3f      	cmp	r2, #63	; 0x3f
   d4c66:	46b9      	mov	r9, r7
   d4c68:	46bb      	mov	fp, r7
   d4c6a:	f107 0701 	add.w	r7, r7, #1
   d4c6e:	d9f5      	bls.n	d4c5c <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d4c70:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d4c72:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d4c76:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d4c7a:	4629      	mov	r1, r5
   d4c7c:	4638      	mov	r0, r7
   d4c7e:	f7ff fed5 	bl	d4a2c <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d4c82:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d4c86:	f1ba 0f00 	cmp.w	sl, #0
   d4c8a:	d015      	beq.n	d4cb8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d4c8c:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d4c8e:	f81b ab01 	ldrb.w	sl, [fp], #1
   d4c92:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d4c96:	d8f9      	bhi.n	d4c8c <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d4c98:	2200      	movs	r2, #0
   d4c9a:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d4c9c:	4649      	mov	r1, r9
   d4c9e:	1d20      	adds	r0, r4, #4
   d4ca0:	f003 ff75 	bl	d8b8e <_ZN6StringaSEPKc>
                        *cp = save2;
   d4ca4:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d4ca8:	f104 0014 	add.w	r0, r4, #20
   d4cac:	f1ba 0f00 	cmp.w	sl, #0
   d4cb0:	d006      	beq.n	d4cc0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d4cb2:	4629      	mov	r1, r5
   d4cb4:	f7ff feba 	bl	d4a2c <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d4cb8:	2501      	movs	r5, #1
   d4cba:	e7a8      	b.n	d4c0e <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d4cbc:	461d      	mov	r5, r3
   d4cbe:	e7a6      	b.n	d4c0e <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d4cc0:	4639      	mov	r1, r7
   d4cc2:	f7ff fe53 	bl	d496c <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d4cc6:	7e23      	ldrb	r3, [r4, #24]
   d4cc8:	3b01      	subs	r3, #1
   d4cca:	7623      	strb	r3, [r4, #24]
   d4ccc:	e7f4      	b.n	d4cb8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d4cce:	4640      	mov	r0, r8
   d4cd0:	f7ff ff3c 	bl	d4b4c <_ZN15LocalTimeChange5parseEPKc>
                break;
   d4cd4:	2502      	movs	r5, #2
   d4cd6:	e79a      	b.n	d4c0e <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   d4cd8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4cdc:	f7ff ff36 	bl	d4b4c <_ZN15LocalTimeChange5parseEPKc>
                break;
   d4ce0:	2503      	movs	r5, #3
   d4ce2:	e794      	b.n	d4c0e <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   d4ce4:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d4ce8:	b143      	cbz	r3, d4cfc <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d4cea:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d4cee:	b92a      	cbnz	r2, d4cfc <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   d4cf0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d4cf4:	f7ff ff24 	bl	d4b40 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d4cf8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   d4cfc:	4630      	mov	r0, r6
   d4cfe:	f001 fe93 	bl	d6a28 <free>

    return valid;
}
   d4d02:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d4d06:	b003      	add	sp, #12
   d4d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d0c:	000da070 	.word	0x000da070

000d4d10 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d4d10:	b538      	push	{r3, r4, r5, lr}
   d4d12:	4b13      	ldr	r3, [pc, #76]	; (d4d60 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d4d14:	4604      	mov	r4, r0
   d4d16:	460d      	mov	r5, r1
   d4d18:	f840 3b04 	str.w	r3, [r0], #4
   d4d1c:	4911      	ldr	r1, [pc, #68]	; (d4d64 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d4d1e:	f003 fee0 	bl	d8ae2 <_ZN6StringC1EPKc>
   d4d22:	f104 0014 	add.w	r0, r4, #20
   d4d26:	f7ff fe79 	bl	d4a1c <_ZN12LocalTimeHMSC1Ev>
   d4d2a:	490e      	ldr	r1, [pc, #56]	; (d4d64 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d4d2c:	f104 001c 	add.w	r0, r4, #28
   d4d30:	f003 fed7 	bl	d8ae2 <_ZN6StringC1EPKc>
   d4d34:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4d38:	f7ff fe70 	bl	d4a1c <_ZN12LocalTimeHMSC1Ev>
   d4d3c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d4d40:	f7ff fef0 	bl	d4b24 <_ZN15LocalTimeChangeC1Ev>
   d4d44:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4d48:	f7ff feec 	bl	d4b24 <_ZN15LocalTimeChangeC1Ev>
   d4d4c:	2300      	movs	r3, #0
   d4d4e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d4d52:	4629      	mov	r1, r5
   d4d54:	4620      	mov	r0, r4
   d4d56:	f7ff ff4f 	bl	d4bf8 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	bd38      	pop	{r3, r4, r5, pc}
   d4d5e:	bf00      	nop
   d4d60:	000da0ac 	.word	0x000da0ac
   d4d64:	000da473 	.word	0x000da473

000d4d68 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   d4d68:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d4d6a:	4d09      	ldr	r5, [pc, #36]	; (d4d90 <_ZN9LocalTime8instanceEv+0x28>)
   d4d6c:	682b      	ldr	r3, [r5, #0]
   d4d6e:	b963      	cbnz	r3, d4d8a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d4d70:	2060      	movs	r0, #96	; 0x60
   d4d72:	f7ff f990 	bl	d4096 <_Znwj>
   d4d76:	4604      	mov	r4, r0
   d4d78:	b130      	cbz	r0, d4d88 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d4d7a:	4b06      	ldr	r3, [pc, #24]	; (d4d94 <_ZN9LocalTime8instanceEv+0x2c>)
   d4d7c:	f840 3b04 	str.w	r3, [r0], #4
   d4d80:	f7ff ff14 	bl	d4bac <_ZN22LocalTimePosixTimezoneC1Ev>
   d4d84:	2364      	movs	r3, #100	; 0x64
   d4d86:	65e3      	str	r3, [r4, #92]	; 0x5c
   d4d88:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   d4d8a:	6828      	ldr	r0, [r5, #0]
   d4d8c:	bd38      	pop	{r3, r4, r5, pc}
   d4d8e:	bf00      	nop
   d4d90:	2003e318 	.word	0x2003e318
   d4d94:	000da07c 	.word	0x000da07c

000d4d98 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d4d98:	f001 be96 	b.w	d6ac8 <mktime>

000d4d9c <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d4d9c:	3901      	subs	r1, #1
   d4d9e:	290b      	cmp	r1, #11
   d4da0:	d815      	bhi.n	d4dce <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d4da2:	e8df f001 	tbb	[pc, r1]
   d4da6:	0816      	.short	0x0816
   d4da8:	06160616 	.word	0x06160616
   d4dac:	16061616 	.word	0x16061616
   d4db0:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d4db2:	201e      	movs	r0, #30
   d4db4:	4770      	bx	lr
            if ((year % 4) == 0) {
   d4db6:	0783      	lsls	r3, r0, #30
   d4db8:	d10d      	bne.n	d4dd6 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d4dba:	2264      	movs	r2, #100	; 0x64
   d4dbc:	fb90 f3f2 	sdiv	r3, r0, r2
   d4dc0:	fb02 0013 	mls	r0, r2, r3, r0
   d4dc4:	2800      	cmp	r0, #0
                    return 29;
   d4dc6:	bf0c      	ite	eq
   d4dc8:	201c      	moveq	r0, #28
   d4dca:	201d      	movne	r0, #29
   d4dcc:	4770      	bx	lr
    return 0;
   d4dce:	2000      	movs	r0, #0
   d4dd0:	4770      	bx	lr
            return 31;
   d4dd2:	201f      	movs	r0, #31
   d4dd4:	4770      	bx	lr
                return 28;
   d4dd6:	201c      	movs	r0, #28
}
   d4dd8:	4770      	bx	lr

000d4dda <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d4dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d4ddc:	2301      	movs	r3, #1
   d4dde:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d4de0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d4de4:	3b01      	subs	r3, #1
   d4de6:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d4de8:	2300      	movs	r3, #0
   d4dea:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d4dee:	4606      	mov	r6, r0
   d4df0:	460c      	mov	r4, r1
   d4df2:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d4df4:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d4df6:	4620      	mov	r0, r4
   d4df8:	f7ff ffce 	bl	d4d98 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d4dfc:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d4e00:	69a2      	ldr	r2, [r4, #24]
   d4e02:	429a      	cmp	r2, r3
   d4e04:	d003      	beq.n	d4e0e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d4e06:	68e3      	ldr	r3, [r4, #12]
   d4e08:	3301      	adds	r3, #1
   d4e0a:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d4e0c:	e7f3      	b.n	d4df6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d4e0e:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d4e12:	2d01      	cmp	r5, #1
   d4e14:	d013      	beq.n	d4e3e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d4e16:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d4e18:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d4e1a:	3d01      	subs	r5, #1
   d4e1c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d4e20:	441d      	add	r5, r3
   d4e22:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d4e24:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d4e28:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d4e2c:	f7ff ffb6 	bl	d4d9c <_ZN9LocalTime14lastDayOfMonthEii>
   d4e30:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d4e32:	bfc4      	itt	gt
   d4e34:	3d07      	subgt	r5, #7
   d4e36:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f7ff ffad 	bl	d4d98 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d4e3e:	4621      	mov	r1, r4
   d4e40:	f106 0008 	add.w	r0, r6, #8
   d4e44:	f7ff fe44 	bl	d4ad0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d4e48:	4638      	mov	r0, r7
   d4e4a:	f7ff fe4e 	bl	d4aea <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d4e4e:	4620      	mov	r0, r4
}
   d4e50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d4e54:	f001 be38 	b.w	d6ac8 <mktime>

000d4e58 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d4e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d4e5a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d4e5e:	b085      	sub	sp, #20
   d4e60:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d4e62:	b92b      	cbnz	r3, d4e70 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d4e64:	f7ff ff80 	bl	d4d68 <_ZN9LocalTime8instanceEv>
   d4e68:	1d01      	adds	r1, r0, #4
   d4e6a:	1d20      	adds	r0, r4, #4
   d4e6c:	f7ff fd8b 	bl	d4986 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d4e70:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d4e74:	2b00      	cmp	r3, #0
   d4e76:	d069      	beq.n	d4f4c <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d4e78:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d4e7c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d4e80:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d4e82:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d4e84:	a802      	add	r0, sp, #8
   d4e86:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4e8a:	f001 fe15 	bl	d6ab8 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d4e8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4e90:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d4e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4e96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4e9a:	6833      	ldr	r3, [r6, #0]
   d4e9c:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d4e9e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d4ea2:	a802      	add	r0, sp, #8
   d4ea4:	f7ff fd5a 	bl	d495c <_ZN12LocalTimeHMSC1ERKS_>
   d4ea8:	aa02      	add	r2, sp, #8
   d4eaa:	4639      	mov	r1, r7
   d4eac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4eb0:	f7ff ff93 	bl	d4dda <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d4eb4:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d4eb8:	f104 0118 	add.w	r1, r4, #24
   d4ebc:	a802      	add	r0, sp, #8
   d4ebe:	f7ff fd4d 	bl	d495c <_ZN12LocalTimeHMSC1ERKS_>
   d4ec2:	aa02      	add	r2, sp, #8
   d4ec4:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d4ec8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4ecc:	f7ff ff85 	bl	d4dda <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d4ed0:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d4ed4:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d4ed6:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d4ed8:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d4eda:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d4ede:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d4ee2:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d4ee6:	da24      	bge.n	d4f32 <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d4ee8:	42b0      	cmp	r0, r6
   d4eea:	eb71 0507 	sbcs.w	r5, r1, r7
   d4eee:	da19      	bge.n	d4f24 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d4ef0:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d4ef2:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d4ef4:	6820      	ldr	r0, [r4, #0]
   d4ef6:	f7ff fd1d 	bl	d4934 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d4efa:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d4efe:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d4f02:	9101      	str	r1, [sp, #4]
   d4f04:	bb20      	cbnz	r0, d4f50 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d4f06:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d4f0a:	f7ff fdc5 	bl	d4a98 <_ZNK12LocalTimeHMS9toSecondsEv>
   d4f0e:	1a36      	subs	r6, r6, r0
   d4f10:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d4f14:	9901      	ldr	r1, [sp, #4]
   d4f16:	a802      	add	r0, sp, #8
   d4f18:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d4f1c:	f001 fdcc 	bl	d6ab8 <localtime_r>
}
   d4f20:	b005      	add	sp, #20
   d4f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d4f24:	4290      	cmp	r0, r2
   d4f26:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d4f2a:	bfb4      	ite	lt
   d4f2c:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d4f2e:	2302      	movge	r3, #2
   d4f30:	e7df      	b.n	d4ef2 <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d4f32:	4290      	cmp	r0, r2
   d4f34:	eb71 0303 	sbcs.w	r3, r1, r3
   d4f38:	da01      	bge.n	d4f3e <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d4f3a:	2303      	movs	r3, #3
   d4f3c:	e7d9      	b.n	d4ef2 <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d4f3e:	42b0      	cmp	r0, r6
   d4f40:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d4f44:	bfb4      	ite	lt
   d4f46:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d4f48:	2305      	movge	r3, #5
   d4f4a:	e7d2      	b.n	d4ef2 <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d4f4c:	2306      	movs	r3, #6
   d4f4e:	e7d0      	b.n	d4ef2 <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d4f50:	f104 0018 	add.w	r0, r4, #24
   d4f54:	e7d9      	b.n	d4f0a <_ZN16LocalTimeConvert7convertEv+0xb2>

000d4f56 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4f56:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d4f58:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4f5a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4f5c:	4668      	mov	r0, sp
   d4f5e:	f7ff fcf3 	bl	d4948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d4f62:	466a      	mov	r2, sp
   d4f64:	4629      	mov	r1, r5
   d4f66:	4620      	mov	r0, r4
   d4f68:	f002 faf6 	bl	d7558 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4f6c:	a801      	add	r0, sp, #4
   d4f6e:	f7ff f963 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4f72:	4620      	mov	r0, r4
   d4f74:	b003      	add	sp, #12
   d4f76:	bd30      	pop	{r4, r5, pc}

000d4f78 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4f7a:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4f7c:	4604      	mov	r4, r0
   d4f7e:	4668      	mov	r0, sp
   d4f80:	f7ff fce2 	bl	d4948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d4f84:	466a      	mov	r2, sp
   d4f86:	4629      	mov	r1, r5
   d4f88:	4620      	mov	r0, r4
   d4f8a:	f002 fac1 	bl	d7510 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d4f8e:	a801      	add	r0, sp, #4
   d4f90:	f7ff f952 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4f94:	4620      	mov	r0, r4
   d4f96:	b003      	add	sp, #12
   d4f98:	bd30      	pop	{r4, r5, pc}

000d4f9a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4f9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4f9c:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4f9e:	4604      	mov	r4, r0
   d4fa0:	4668      	mov	r0, sp
   d4fa2:	f7ff fcd1 	bl	d4948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d4fa6:	466a      	mov	r2, sp
   d4fa8:	4629      	mov	r1, r5
   d4faa:	4620      	mov	r0, r4
   d4fac:	f002 fa59 	bl	d7462 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d4fb0:	a801      	add	r0, sp, #4
   d4fb2:	f7ff f941 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	b003      	add	sp, #12
   d4fba:	bd30      	pop	{r4, r5, pc}

000d4fbc <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d4fbc:	6001      	str	r1, [r0, #0]
   d4fbe:	7102      	strb	r2, [r0, #4]
{
}
   d4fc0:	4770      	bx	lr

000d4fc2 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d4fc2:	6800      	ldr	r0, [r0, #0]
   d4fc4:	6803      	ldr	r3, [r0, #0]
   d4fc6:	68db      	ldr	r3, [r3, #12]
   d4fc8:	4718      	bx	r3

000d4fca <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d4fca:	6800      	ldr	r0, [r0, #0]
   d4fcc:	6803      	ldr	r3, [r0, #0]
   d4fce:	6a1b      	ldr	r3, [r3, #32]
   d4fd0:	4718      	bx	r3

000d4fd2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d4fd2:	6800      	ldr	r0, [r0, #0]
   d4fd4:	6803      	ldr	r3, [r0, #0]
   d4fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fd8:	4718      	bx	r3

000d4fda <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d4fda:	6800      	ldr	r0, [r0, #0]
   d4fdc:	6803      	ldr	r3, [r0, #0]
   d4fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4fe0:	4718      	bx	r3

000d4fe2 <_ZN10RHDatagram6sendtoEPhhh>:
{
   d4fe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4fe4:	4605      	mov	r5, r0
   d4fe6:	460c      	mov	r4, r1
    setHeaderTo(address);
   d4fe8:	4619      	mov	r1, r3
{
   d4fea:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d4fec:	f7ff fff5 	bl	d4fda <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d4ff0:	6828      	ldr	r0, [r5, #0]
   d4ff2:	9a01      	ldr	r2, [sp, #4]
   d4ff4:	6803      	ldr	r3, [r0, #0]
   d4ff6:	695b      	ldr	r3, [r3, #20]
   d4ff8:	4621      	mov	r1, r4
}
   d4ffa:	b003      	add	sp, #12
   d4ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d5000:	4718      	bx	r3

000d5002 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d5002:	6800      	ldr	r0, [r0, #0]
   d5004:	6803      	ldr	r3, [r0, #0]
   d5006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5008:	4718      	bx	r3

000d500a <_ZN10RHDatagram14setThisAddressEh>:
{
   d500a:	b538      	push	{r3, r4, r5, lr}
   d500c:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d500e:	6800      	ldr	r0, [r0, #0]
   d5010:	6803      	ldr	r3, [r0, #0]
{
   d5012:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d5014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5016:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d5018:	4629      	mov	r1, r5
   d501a:	4620      	mov	r0, r4
   d501c:	f7ff fff1 	bl	d5002 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d5020:	7125      	strb	r5, [r4, #4]
}
   d5022:	bd38      	pop	{r3, r4, r5, pc}

000d5024 <_ZN10RHDatagram4initEv>:
{
   d5024:	b538      	push	{r3, r4, r5, lr}
   d5026:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d5028:	6800      	ldr	r0, [r0, #0]
   d502a:	6803      	ldr	r3, [r0, #0]
   d502c:	689b      	ldr	r3, [r3, #8]
   d502e:	4798      	blx	r3
    if (ret)
   d5030:	4605      	mov	r5, r0
   d5032:	b118      	cbz	r0, d503c <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d5034:	7921      	ldrb	r1, [r4, #4]
   d5036:	4620      	mov	r0, r4
   d5038:	f7ff ffe7 	bl	d500a <_ZN10RHDatagram14setThisAddressEh>
}
   d503c:	4628      	mov	r0, r5
   d503e:	bd38      	pop	{r3, r4, r5, pc}

000d5040 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d5040:	6800      	ldr	r0, [r0, #0]
   d5042:	6803      	ldr	r3, [r0, #0]
   d5044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5046:	4718      	bx	r3

000d5048 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d5048:	6800      	ldr	r0, [r0, #0]
   d504a:	6803      	ldr	r3, [r0, #0]
   d504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d504e:	4718      	bx	r3

000d5050 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d5050:	6800      	ldr	r0, [r0, #0]
   d5052:	6803      	ldr	r3, [r0, #0]
   d5054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5056:	4718      	bx	r3

000d5058 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d5058:	6800      	ldr	r0, [r0, #0]
   d505a:	6803      	ldr	r3, [r0, #0]
   d505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d505e:	4718      	bx	r3

000d5060 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d5060:	6800      	ldr	r0, [r0, #0]
   d5062:	6803      	ldr	r3, [r0, #0]
   d5064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5066:	4718      	bx	r3

000d5068 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d5068:	6800      	ldr	r0, [r0, #0]
   d506a:	6803      	ldr	r3, [r0, #0]
   d506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d506e:	4718      	bx	r3

000d5070 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d5070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5074:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d5076:	6800      	ldr	r0, [r0, #0]
{
   d5078:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d507a:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d507c:	6803      	ldr	r3, [r0, #0]
   d507e:	691b      	ldr	r3, [r3, #16]
{
   d5080:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d5084:	4798      	blx	r3
   d5086:	4605      	mov	r5, r0
   d5088:	b1c8      	cbz	r0, d50be <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d508a:	b11e      	cbz	r6, d5094 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d508c:	4620      	mov	r0, r4
   d508e:	f7ff ffe3 	bl	d5058 <_ZN10RHDatagram10headerFromEv>
   d5092:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d5094:	f1b9 0f00 	cmp.w	r9, #0
   d5098:	d004      	beq.n	d50a4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d509a:	4620      	mov	r0, r4
   d509c:	f7ff ffd8 	bl	d5050 <_ZN10RHDatagram8headerToEv>
   d50a0:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d50a4:	f1b8 0f00 	cmp.w	r8, #0
   d50a8:	d004      	beq.n	d50b4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d50aa:	4620      	mov	r0, r4
   d50ac:	f7ff ffd8 	bl	d5060 <_ZN10RHDatagram8headerIdEv>
   d50b0:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d50b4:	b11f      	cbz	r7, d50be <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d50b6:	4620      	mov	r0, r4
   d50b8:	f7ff ffd6 	bl	d5068 <_ZN10RHDatagram11headerFlagsEv>
   d50bc:	7038      	strb	r0, [r7, #0]
}
   d50be:	4628      	mov	r0, r5
   d50c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d50c4 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d50c4:	2001      	movs	r0, #1
   d50c6:	4770      	bx	lr

000d50c8 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d50c8:	7903      	ldrb	r3, [r0, #4]
   d50ca:	2b03      	cmp	r3, #3
   d50cc:	d0fc      	beq.n	d50c8 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d50ce:	2001      	movs	r0, #1
   d50d0:	4770      	bx	lr

000d50d2 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d50d2:	2000      	movs	r0, #0
   d50d4:	4770      	bx	lr

000d50d6 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d50d6:	7181      	strb	r1, [r0, #6]
}
   d50d8:	4770      	bx	lr

000d50da <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d50da:	7141      	strb	r1, [r0, #5]
}
   d50dc:	4770      	bx	lr

000d50de <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d50de:	72c1      	strb	r1, [r0, #11]
}
   d50e0:	4770      	bx	lr

000d50e2 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d50e2:	7301      	strb	r1, [r0, #12]
}
   d50e4:	4770      	bx	lr

000d50e6 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d50e6:	7341      	strb	r1, [r0, #13]
}
   d50e8:	4770      	bx	lr

000d50ea <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d50ea:	7b83      	ldrb	r3, [r0, #14]
   d50ec:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d50f0:	4311      	orrs	r1, r2
   d50f2:	7381      	strb	r1, [r0, #14]
}
   d50f4:	4770      	bx	lr

000d50f6 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d50f6:	79c0      	ldrb	r0, [r0, #7]
}
   d50f8:	4770      	bx	lr

000d50fa <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d50fa:	7a00      	ldrb	r0, [r0, #8]
}
   d50fc:	4770      	bx	lr

000d50fe <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d50fe:	7a40      	ldrb	r0, [r0, #9]
}
   d5100:	4770      	bx	lr

000d5102 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d5102:	7a80      	ldrb	r0, [r0, #10]
}
   d5104:	4770      	bx	lr

000d5106 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d5106:	8a00      	ldrh	r0, [r0, #16]
}
   d5108:	b200      	sxth	r0, r0
   d510a:	4770      	bx	lr

000d510c <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d510c:	7900      	ldrb	r0, [r0, #4]
}
   d510e:	4770      	bx	lr

000d5110 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d5110:	7101      	strb	r1, [r0, #4]
}
   d5112:	4770      	bx	lr

000d5114 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d5114:	8a40      	ldrh	r0, [r0, #18]
}
   d5116:	b280      	uxth	r0, r0
   d5118:	4770      	bx	lr

000d511a <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d511a:	8a80      	ldrh	r0, [r0, #20]
}
   d511c:	b280      	uxth	r0, r0
   d511e:	4770      	bx	lr

000d5120 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d5120:	8ac0      	ldrh	r0, [r0, #22]
}
   d5122:	b280      	uxth	r0, r0
   d5124:	4770      	bx	lr

000d5126 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d5126:	b538      	push	{r3, r4, r5, lr}
   d5128:	4605      	mov	r5, r0
   d512a:	460c      	mov	r4, r1
    while (!available())
   d512c:	682b      	ldr	r3, [r5, #0]
   d512e:	4628      	mov	r0, r5
   d5130:	68db      	ldr	r3, [r3, #12]
   d5132:	4798      	blx	r3
   d5134:	b928      	cbnz	r0, d5142 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d5136:	2c00      	cmp	r4, #0
   d5138:	d0f8      	beq.n	d512c <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d513a:	4620      	mov	r0, r4
   d513c:	f001 fccc 	bl	d6ad8 <delay>
   d5140:	e7f4      	b.n	d512c <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d5142:	bd38      	pop	{r3, r4, r5, pc}

000d5144 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d5144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5146:	4605      	mov	r5, r0
   d5148:	460f      	mov	r7, r1
   d514a:	4614      	mov	r4, r2

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d514c:	f001 f9de 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
   d5150:	4606      	mov	r6, r0
   d5152:	f001 f9db 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d5156:	1b80      	subs	r0, r0, r6
   d5158:	42b8      	cmp	r0, r7
   d515a:	d20a      	bcs.n	d5172 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d515c:	682b      	ldr	r3, [r5, #0]
   d515e:	4628      	mov	r0, r5
   d5160:	68db      	ldr	r3, [r3, #12]
   d5162:	4798      	blx	r3
   d5164:	b930      	cbnz	r0, d5174 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d5166:	2c00      	cmp	r4, #0
   d5168:	d0f3      	beq.n	d5152 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d516a:	4620      	mov	r0, r4
   d516c:	f001 fcb4 	bl	d6ad8 <delay>
   d5170:	e7ef      	b.n	d5152 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d5172:	2000      	movs	r0, #0
}
   d5174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5176 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d5176:	b570      	push	{r4, r5, r6, lr}
   d5178:	4604      	mov	r4, r0
   d517a:	460e      	mov	r6, r1
   d517c:	f001 f9c6 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
   d5180:	4605      	mov	r5, r0
   d5182:	f001 f9c3 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d5186:	1b40      	subs	r0, r0, r5
   d5188:	42b0      	cmp	r0, r6
   d518a:	d204      	bcs.n	d5196 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d518c:	7923      	ldrb	r3, [r4, #4]
   d518e:	2b03      	cmp	r3, #3
   d5190:	d0f7      	beq.n	d5182 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d5192:	2001      	movs	r0, #1
}
   d5194:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d5196:	2000      	movs	r0, #0
   d5198:	e7fc      	b.n	d5194 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d519a <_ZN15RHGenericDriver7waitCADEv>:
{
   d519a:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d519c:	69c3      	ldr	r3, [r0, #28]
{
   d519e:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d51a0:	b1b3      	cbz	r3, d51d0 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d51a2:	f001 f9b3 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d51a6:	2664      	movs	r6, #100	; 0x64
   d51a8:	4605      	mov	r5, r0
    while (isChannelActive())
   d51aa:	6823      	ldr	r3, [r4, #0]
   d51ac:	4620      	mov	r0, r4
   d51ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51b0:	4798      	blx	r3
   d51b2:	b168      	cbz	r0, d51d0 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d51b4:	f001 f9aa 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d51b8:	69e3      	ldr	r3, [r4, #28]
   d51ba:	1b40      	subs	r0, r0, r5
   d51bc:	4298      	cmp	r0, r3
   d51be:	d809      	bhi.n	d51d4 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d51c0:	210a      	movs	r1, #10
   d51c2:	2001      	movs	r0, #1
   d51c4:	f003 fb71 	bl	d88aa <_Z6randomii>
   d51c8:	4370      	muls	r0, r6
   d51ca:	f001 fc85 	bl	d6ad8 <delay>
    while (isChannelActive())
   d51ce:	e7ec      	b.n	d51aa <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d51d0:	2001      	movs	r0, #1
}
   d51d2:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d51d4:	2000      	movs	r0, #0
   d51d6:	e7fc      	b.n	d51d2 <_ZN15RHGenericDriver7waitCADEv+0x38>

000d51d8 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d51d8:	4a06      	ldr	r2, [pc, #24]	; (d51f4 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d51da:	6002      	str	r2, [r0, #0]
   d51dc:	21ff      	movs	r1, #255	; 0xff
   d51de:	2200      	movs	r2, #0
   d51e0:	7102      	strb	r2, [r0, #4]
   d51e2:	7141      	strb	r1, [r0, #5]
   d51e4:	8242      	strh	r2, [r0, #18]
   d51e6:	72c1      	strb	r1, [r0, #11]
   d51e8:	8282      	strh	r2, [r0, #20]
   d51ea:	8181      	strh	r1, [r0, #12]
   d51ec:	7382      	strb	r2, [r0, #14]
   d51ee:	82c2      	strh	r2, [r0, #22]
   d51f0:	61c2      	str	r2, [r0, #28]
}
   d51f2:	4770      	bx	lr
   d51f4:	000da0bc 	.word	0x000da0bc

000d51f8 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d51f8:	4770      	bx	lr

000d51fa <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d51fa:	4770      	bx	lr

000d51fc <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d51fc:	4770      	bx	lr

000d51fe <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d51fe:	4770      	bx	lr

000d5200 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d5200:	4770      	bx	lr

000d5202 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d5202:	7141      	strb	r1, [r0, #5]
}
   d5204:	4770      	bx	lr

000d5206 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d5206:	7181      	strb	r1, [r0, #6]
}
   d5208:	4770      	bx	lr

000d520a <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d520a:	7101      	strb	r1, [r0, #4]
}
   d520c:	4770      	bx	lr
	...

000d5210 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d5210:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d5212:	4d03      	ldr	r5, [pc, #12]	; (d5220 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d5214:	6005      	str	r5, [r0, #0]
   d5216:	7101      	strb	r1, [r0, #4]
   d5218:	7142      	strb	r2, [r0, #5]
   d521a:	7183      	strb	r3, [r0, #6]
}
   d521c:	bd30      	pop	{r4, r5, pc}
   d521e:	bf00      	nop
   d5220:	000da13c 	.word	0x000da13c

000d5224 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5224:	4770      	bx	lr

000d5226 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5226:	b510      	push	{r4, lr}
  }
   d5228:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d522a:	4604      	mov	r4, r0
  }
   d522c:	f003 ffb4 	bl	d9198 <_ZdlPvj>
   d5230:	4620      	mov	r0, r4
   d5232:	bd10      	pop	{r4, pc}

000d5234 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5234:	b40e      	push	{r1, r2, r3}
   d5236:	b503      	push	{r0, r1, lr}
   d5238:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d523a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d523c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5240:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d5242:	f003 faf6 	bl	d8832 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d5246:	b002      	add	sp, #8
   d5248:	f85d eb04 	ldr.w	lr, [sp], #4
   d524c:	b003      	add	sp, #12
   d524e:	4770      	bx	lr

000d5250 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5250:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5252:	4604      	mov	r4, r0
   d5254:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5256:	7922      	ldrb	r2, [r4, #4]
   d5258:	68a3      	ldr	r3, [r4, #8]
   d525a:	b132      	cbz	r2, d526a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d525c:	b9a3      	cbnz	r3, d5288 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d525e:	490b      	ldr	r1, [pc, #44]	; (d528c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5260:	b002      	add	sp, #8
   d5262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5266:	f003 bab3 	b.w	d87d0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d526a:	4a09      	ldr	r2, [pc, #36]	; (d5290 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d526c:	7b26      	ldrb	r6, [r4, #12]
   d526e:	4d09      	ldr	r5, [pc, #36]	; (d5294 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5270:	4909      	ldr	r1, [pc, #36]	; (d5298 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5272:	7b64      	ldrb	r4, [r4, #13]
   d5274:	2e01      	cmp	r6, #1
   d5276:	bf18      	it	ne
   d5278:	4629      	movne	r1, r5
   d527a:	e9cd 1400 	strd	r1, r4, [sp]
   d527e:	4907      	ldr	r1, [pc, #28]	; (d529c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5280:	f7ff ffd8 	bl	d5234 <_ZN5Print6printfEPKcz>
  }
   d5284:	b002      	add	sp, #8
   d5286:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5288:	4a05      	ldr	r2, [pc, #20]	; (d52a0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d528a:	e7ef      	b.n	d526c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d528c:	000da179 	.word	0x000da179
   d5290:	000da473 	.word	0x000da473
   d5294:	000da175 	.word	0x000da175
   d5298:	000da171 	.word	0x000da171
   d529c:	000da18f 	.word	0x000da18f
   d52a0:	000da168 	.word	0x000da168

000d52a4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d52a4:	b510      	push	{r4, lr}
   d52a6:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d52a8:	f7ff ffb2 	bl	d5210 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d52ac:	4b05      	ldr	r3, [pc, #20]	; (d52c4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d52ae:	6023      	str	r3, [r4, #0]
  {
   d52b0:	4b05      	ldr	r3, [pc, #20]	; (d52c8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d52b2:	60a3      	str	r3, [r4, #8]
   d52b4:	2301      	movs	r3, #1
   d52b6:	7323      	strb	r3, [r4, #12]
   d52b8:	2300      	movs	r3, #0
   d52ba:	6123      	str	r3, [r4, #16]
   d52bc:	82a3      	strh	r3, [r4, #20]
{
}
   d52be:	4620      	mov	r0, r4
   d52c0:	bd10      	pop	{r4, pc}
   d52c2:	bf00      	nop
   d52c4:	000da1c8 	.word	0x000da1c8
   d52c8:	000da1b4 	.word	0x000da1b4

000d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d52cc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d52ce:	4c0b      	ldr	r4, [pc, #44]	; (d52fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d52d0:	7821      	ldrb	r1, [r4, #0]
   d52d2:	f3bf 8f5b 	dmb	ish
   d52d6:	f011 0101 	ands.w	r1, r1, #1
   d52da:	d10b      	bne.n	d52f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d52dc:	4620      	mov	r0, r4
   d52de:	9101      	str	r1, [sp, #4]
   d52e0:	f7fe feea 	bl	d40b8 <__cxa_guard_acquire>
   d52e4:	9901      	ldr	r1, [sp, #4]
   d52e6:	b128      	cbz	r0, d52f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d52e8:	4805      	ldr	r0, [pc, #20]	; (d5300 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d52ea:	f003 faf5 	bl	d88d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d52ee:	4620      	mov	r0, r4
   d52f0:	f7fe fee7 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d52f4:	4802      	ldr	r0, [pc, #8]	; (d5300 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d52f6:	b002      	add	sp, #8
   d52f8:	bd10      	pop	{r4, pc}
   d52fa:	bf00      	nop
   d52fc:	2003e31c 	.word	0x2003e31c
   d5300:	2003e320 	.word	0x2003e320

000d5304 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d5304:	b507      	push	{r0, r1, r2, lr}
   d5306:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5308:	f7ff ffe0 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d530c:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d530e:	b003      	add	sp, #12
   d5310:	f85d eb04 	ldr.w	lr, [sp], #4
   d5314:	f003 bb92 	b.w	d8a3c <_ZN8SPIClass8transferEh>

000d5318 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d5318:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d531a:	f7ff ffd7 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d531e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5322:	f003 bb91 	b.w	d8a48 <_ZN8SPIClass15attachInterruptEv>

000d5326 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d5326:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d5328:	f7ff ffd0 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d532c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5330:	f003 bb8b 	b.w	d8a4a <_ZN8SPIClass15detachInterruptEv>

000d5334 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d5334:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d5336:	7903      	ldrb	r3, [r0, #4]
   d5338:	2b04      	cmp	r3, #4
   d533a:	d020      	beq.n	d537e <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d533c:	2b03      	cmp	r3, #3
   d533e:	d020      	beq.n	d5382 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d5340:	2b02      	cmp	r3, #2
   d5342:	d020      	beq.n	d5386 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d5344:	4a11      	ldr	r2, [pc, #68]	; (d538c <_ZN13RHHardwareSPI5beginEv+0x58>)
   d5346:	4912      	ldr	r1, [pc, #72]	; (d5390 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d5348:	2b01      	cmp	r3, #1
   d534a:	bf18      	it	ne
   d534c:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d534e:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d5350:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d5352:	3901      	subs	r1, #1
   d5354:	bf18      	it	ne
   d5356:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d5358:	b133      	cbz	r3, d5368 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d535a:	2b01      	cmp	r3, #1
   d535c:	d004      	beq.n	d5368 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d535e:	2b02      	cmp	r3, #2
   d5360:	d002      	beq.n	d5368 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d5362:	2b03      	cmp	r3, #3
   d5364:	bf18      	it	ne
   d5366:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d5368:	2400      	movs	r4, #0
   d536a:	7304      	strb	r4, [r0, #12]
   d536c:	6102      	str	r2, [r0, #16]
   d536e:	7501      	strb	r1, [r0, #20]
   d5370:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d5372:	f7ff ffab 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d5376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d537a:	f003 bab7 	b.w	d88ec <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d537e:	4a05      	ldr	r2, [pc, #20]	; (d5394 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d5380:	e7e5      	b.n	d534e <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d5382:	4a05      	ldr	r2, [pc, #20]	; (d5398 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d5384:	e7e3      	b.n	d534e <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d5386:	4a05      	ldr	r2, [pc, #20]	; (d539c <_ZN13RHHardwareSPI5beginEv+0x68>)
   d5388:	e7e1      	b.n	d534e <_ZN13RHHardwareSPI5beginEv+0x1a>
   d538a:	bf00      	nop
   d538c:	001e8480 	.word	0x001e8480
   d5390:	000f4240 	.word	0x000f4240
   d5394:	00f42400 	.word	0x00f42400
   d5398:	007a1200 	.word	0x007a1200
   d539c:	003d0900 	.word	0x003d0900

000d53a0 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d53a0:	b508      	push	{r3, lr}
        instance().end();
   d53a2:	f7ff ff93 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d53a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d53aa:	f003 bab0 	b.w	d890e <_ZN8SPIClass3endEv>

000d53ae <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d53ae:	b510      	push	{r4, lr}
   d53b0:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d53b2:	f7ff ff8b 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d53b6:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d53ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d53be:	f003 bacf 	b.w	d8960 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d53c2 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d53c2:	b508      	push	{r3, lr}
        instance().endTransaction();
   d53c4:	f7ff ff82 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d53c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d53cc:	f003 baae 	b.w	d892c <_ZN8SPIClass14endTransactionEv>

000d53d0 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d53d0:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d53d2:	f7ff ff7b 	bl	d52cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d53d6:	bd08      	pop	{r3, pc}

000d53d8 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d53d8:	2300      	movs	r3, #0
   d53da:	4802      	ldr	r0, [pc, #8]	; (d53e4 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d53dc:	461a      	mov	r2, r3
   d53de:	4619      	mov	r1, r3
   d53e0:	f7ff bf60 	b.w	d52a4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d53e4:	2003e328 	.word	0x2003e328

000d53e8 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d53e8:	2a01      	cmp	r2, #1
   d53ea:	d105      	bne.n	d53f8 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d53ec:	7a00      	ldrb	r0, [r0, #8]
   d53ee:	780b      	ldrb	r3, [r1, #0]
   d53f0:	1a1b      	subs	r3, r3, r0
   d53f2:	4258      	negs	r0, r3
   d53f4:	4158      	adcs	r0, r3
   d53f6:	4770      	bx	lr
   d53f8:	2000      	movs	r0, #0
}
   d53fa:	4770      	bx	lr

000d53fc <_ZN6RHMesh5doArpEh>:
{
   d53fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d5400:	4d26      	ldr	r5, [pc, #152]	; (d549c <_ZN6RHMesh5doArpEh+0xa0>)
   d5402:	2301      	movs	r3, #1
{
   d5404:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d5406:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d5408:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d540a:	2300      	movs	r3, #0
{
   d540c:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d540e:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d5410:	9300      	str	r3, [sp, #0]
   d5412:	2203      	movs	r2, #3
   d5414:	23ff      	movs	r3, #255	; 0xff
   d5416:	4629      	mov	r1, r5
{
   d5418:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d541a:	f000 fbe7 	bl	d5bec <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d541e:	b120      	cbz	r0, d542a <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d5420:	2400      	movs	r4, #0
}
   d5422:	4620      	mov	r0, r4
   d5424:	b007      	add	sp, #28
   d5426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d542a:	23fa      	movs	r3, #250	; 0xfa
   d542c:	f88d 3017 	strb.w	r3, [sp, #23]
   d5430:	f001 f86c 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d5434:	f106 0904 	add.w	r9, r6, #4
   d5438:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d543a:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d543c:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d5440:	f001 f864 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
   d5444:	1a20      	subs	r0, r4, r0
   d5446:	2800      	cmp	r0, #0
   d5448:	ddea      	ble.n	d5420 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d544a:	b281      	uxth	r1, r0
   d544c:	2200      	movs	r2, #0
   d544e:	4648      	mov	r0, r9
   d5450:	f7ff fdbf 	bl	d4fd2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d5454:	2800      	cmp	r0, #0
   d5456:	d0f3      	beq.n	d5440 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d5458:	2300      	movs	r3, #0
   d545a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d545e:	e9cd 3300 	strd	r3, r3, [sp]
   d5462:	f10d 0217 	add.w	r2, sp, #23
   d5466:	4651      	mov	r1, sl
   d5468:	4630      	mov	r0, r6
   d546a:	f000 fbc9 	bl	d5c00 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d546e:	4604      	mov	r4, r0
   d5470:	2800      	cmp	r0, #0
   d5472:	d0e3      	beq.n	d543c <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d5474:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d5478:	2b01      	cmp	r3, #1
   d547a:	d9df      	bls.n	d543c <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d547c:	f895 b000 	ldrb.w	fp, [r5]
   d5480:	f1bb 0f02 	cmp.w	fp, #2
   d5484:	d1da      	bne.n	d543c <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d5486:	4648      	mov	r0, r9
   d5488:	f7ff fde6 	bl	d5058 <_ZN10RHDatagram10headerFromEv>
   d548c:	465b      	mov	r3, fp
   d548e:	4602      	mov	r2, r0
   d5490:	4639      	mov	r1, r7
   d5492:	4630      	mov	r0, r6
   d5494:	f000 fb21 	bl	d5ada <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d5498:	e7c3      	b.n	d5422 <_ZN6RHMesh5doArpEh+0x26>
   d549a:	bf00      	nop
   d549c:	2003e340 	.word	0x2003e340

000d54a0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d54a0:	2a01      	cmp	r2, #1
{
   d54a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d54a6:	4607      	mov	r7, r0
   d54a8:	460e      	mov	r6, r1
   d54aa:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d54ac:	d93b      	bls.n	d5526 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d54ae:	794d      	ldrb	r5, [r1, #5]
   d54b0:	2d02      	cmp	r5, #2
   d54b2:	d130      	bne.n	d5516 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d54b4:	f100 0804 	add.w	r8, r0, #4
   d54b8:	79c9      	ldrb	r1, [r1, #7]
   d54ba:	9101      	str	r1, [sp, #4]
   d54bc:	4640      	mov	r0, r8
   d54be:	f7ff fdcb 	bl	d5058 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d54c2:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d54c4:	462b      	mov	r3, r5
   d54c6:	4602      	mov	r2, r0
   d54c8:	9901      	ldr	r1, [sp, #4]
   d54ca:	4638      	mov	r0, r7
   d54cc:	f000 fb05 	bl	d5ada <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d54d0:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d54d2:	f106 0308 	add.w	r3, r6, #8
   d54d6:	2400      	movs	r4, #0
   d54d8:	4622      	mov	r2, r4
   d54da:	4295      	cmp	r5, r2
   d54dc:	f104 0401 	add.w	r4, r4, #1
   d54e0:	b2e4      	uxtb	r4, r4
   d54e2:	d904      	bls.n	d54ee <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d54e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d54e8:	7a39      	ldrb	r1, [r7, #8]
   d54ea:	4291      	cmp	r1, r2
   d54ec:	d1f4      	bne.n	d54d8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d54ee:	f104 0108 	add.w	r1, r4, #8
   d54f2:	440e      	add	r6, r1
	while (i < numRoutes)
   d54f4:	42a5      	cmp	r5, r4
   d54f6:	d916      	bls.n	d5526 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d54f8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d54fc:	9101      	str	r1, [sp, #4]
   d54fe:	4640      	mov	r0, r8
   d5500:	f7ff fdaa 	bl	d5058 <_ZN10RHDatagram10headerFromEv>
   d5504:	3401      	adds	r4, #1
   d5506:	4602      	mov	r2, r0
   d5508:	9901      	ldr	r1, [sp, #4]
   d550a:	2302      	movs	r3, #2
   d550c:	4638      	mov	r0, r7
   d550e:	b2e4      	uxtb	r4, r4
   d5510:	f000 fae3 	bl	d5ada <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d5514:	e7ee      	b.n	d54f4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d5516:	2d03      	cmp	r5, #3
   d5518:	d105      	bne.n	d5526 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d551a:	7989      	ldrb	r1, [r1, #6]
}
   d551c:	b002      	add	sp, #8
   d551e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d5522:	f000 bac3 	b.w	d5aac <_ZN8RHRouter13deleteRouteToEh>
}
   d5526:	b002      	add	sp, #8
   d5528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d552c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d552c:	b510      	push	{r4, lr}
   d552e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d5530:	f000 fb14 	bl	d5b5c <_ZN8RHRouterC1ER15RHGenericDriverh>
   d5534:	4b01      	ldr	r3, [pc, #4]	; (d553c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d5536:	6023      	str	r3, [r4, #0]
}
   d5538:	4620      	mov	r0, r4
   d553a:	bd10      	pop	{r4, pc}
   d553c:	000da1fc 	.word	0x000da1fc

000d5540 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d5540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d5544:	2af9      	cmp	r2, #249	; 0xf9
{
   d5546:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d554a:	4606      	mov	r6, r0
   d554c:	460f      	mov	r7, r1
   d554e:	4614      	mov	r4, r2
   d5550:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d5552:	d825      	bhi.n	d55a0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d5554:	2bff      	cmp	r3, #255	; 0xff
   d5556:	d114      	bne.n	d5582 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d5558:	f8df 8048 	ldr.w	r8, [pc, #72]	; d55a4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d555c:	4640      	mov	r0, r8
   d555e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d5560:	4622      	mov	r2, r4
   d5562:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d5564:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d5568:	f004 fa3a 	bl	d99e0 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d556c:	1c62      	adds	r2, r4, #1
   d556e:	f8cd 9020 	str.w	r9, [sp, #32]
   d5572:	462b      	mov	r3, r5
   d5574:	4641      	mov	r1, r8
   d5576:	4630      	mov	r0, r6
   d5578:	b2d2      	uxtb	r2, r2
}
   d557a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d557e:	f000 bb35 	b.w	d5bec <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d5582:	4619      	mov	r1, r3
   d5584:	f000 fa4e 	bl	d5a24 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d5588:	2800      	cmp	r0, #0
   d558a:	d1e5      	bne.n	d5558 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d558c:	6833      	ldr	r3, [r6, #0]
   d558e:	4629      	mov	r1, r5
   d5590:	689b      	ldr	r3, [r3, #8]
   d5592:	4630      	mov	r0, r6
   d5594:	4798      	blx	r3
   d5596:	2800      	cmp	r0, #0
   d5598:	d1de      	bne.n	d5558 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d559a:	2002      	movs	r0, #2
}
   d559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d55a0:	2001      	movs	r0, #1
   d55a2:	e7fb      	b.n	d559c <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d55a4:	2003e340 	.word	0x2003e340

000d55a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d55a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55ac:	b089      	sub	sp, #36	; 0x24
   d55ae:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d55b0:	23fa      	movs	r3, #250	; 0xfa
   d55b2:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d55b6:	f10d 031f 	add.w	r3, sp, #31
   d55ba:	9303      	str	r3, [sp, #12]
   d55bc:	f10d 031e 	add.w	r3, sp, #30
   d55c0:	f8df a180 	ldr.w	sl, [pc, #384]	; d5744 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d55c4:	9302      	str	r3, [sp, #8]
   d55c6:	f10d 031d 	add.w	r3, sp, #29
   d55ca:	9301      	str	r3, [sp, #4]
   d55cc:	ab07      	add	r3, sp, #28
   d55ce:	9300      	str	r3, [sp, #0]
{     
   d55d0:	4689      	mov	r9, r1
   d55d2:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d55d4:	f10d 031b 	add.w	r3, sp, #27
   d55d8:	f10d 021a 	add.w	r2, sp, #26
   d55dc:	4651      	mov	r1, sl
{     
   d55de:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d55e2:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d55e4:	f000 fb0c 	bl	d5c00 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d55e8:	4656      	mov	r6, sl
   d55ea:	4604      	mov	r4, r0
   d55ec:	b920      	cbnz	r0, d55f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d55ee:	2400      	movs	r4, #0
}
   d55f0:	4620      	mov	r0, r4
   d55f2:	b009      	add	sp, #36	; 0x24
   d55f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d55f8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d55fc:	b373      	cbz	r3, d565c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d55fe:	f89a 2000 	ldrb.w	r2, [sl]
   d5602:	bb5a      	cbnz	r2, d565c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d5604:	f1b8 0f00 	cmp.w	r8, #0
   d5608:	d003      	beq.n	d5612 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d560a:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d560e:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d5612:	f1bb 0f00 	cmp.w	fp, #0
   d5616:	d003      	beq.n	d5620 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d5618:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d561c:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d5620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d5622:	b11a      	cbz	r2, d562c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d5624:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d5626:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d562a:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d562c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d562e:	b11a      	cbz	r2, d5638 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d5630:	9914      	ldr	r1, [sp, #80]	; 0x50
   d5632:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d5636:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d5638:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d563a:	b11a      	cbz	r2, d5644 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d563c:	9915      	ldr	r1, [sp, #84]	; 0x54
   d563e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d5642:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d5644:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d5646:	493d      	ldr	r1, [pc, #244]	; (d573c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d5648:	3b01      	subs	r3, #1
   d564a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d564c:	429a      	cmp	r2, r3
		*len = msgLen;
   d564e:	bf88      	it	hi
   d5650:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d5652:	783a      	ldrb	r2, [r7, #0]
   d5654:	4648      	mov	r0, r9
   d5656:	f004 f9c3 	bl	d99e0 <memcpy>
	    return true;
   d565a:	e7c9      	b.n	d55f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d565c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d5660:	2aff      	cmp	r2, #255	; 0xff
   d5662:	d1c4      	bne.n	d55ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d5664:	2b01      	cmp	r3, #1
   d5666:	d9c2      	bls.n	d55ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d5668:	7832      	ldrb	r2, [r6, #0]
   d566a:	2a01      	cmp	r2, #1
   d566c:	d1bf      	bne.n	d55ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d566e:	7a2a      	ldrb	r2, [r5, #8]
   d5670:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d5674:	42a2      	cmp	r2, r4
   d5676:	d0ba      	beq.n	d55ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d5678:	1edf      	subs	r7, r3, #3
   d567a:	4931      	ldr	r1, [pc, #196]	; (d5740 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d567c:	b2ff      	uxtb	r7, r7
   d567e:	2300      	movs	r3, #0
   d5680:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d5684:	4547      	cmp	r7, r8
   d5686:	d906      	bls.n	d5696 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d5688:	f811 0b01 	ldrb.w	r0, [r1], #1
   d568c:	4282      	cmp	r2, r0
   d568e:	f103 0301 	add.w	r3, r3, #1
   d5692:	d1f5      	bne.n	d5680 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d5694:	e7ab      	b.n	d55ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d5696:	f105 0904 	add.w	r9, r5, #4
   d569a:	4648      	mov	r0, r9
   d569c:	f7ff fcdc 	bl	d5058 <_ZN10RHDatagram10headerFromEv>
   d56a0:	2302      	movs	r3, #2
   d56a2:	4602      	mov	r2, r0
   d56a4:	4621      	mov	r1, r4
   d56a6:	4628      	mov	r0, r5
   d56a8:	f000 fa17 	bl	d5ada <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d56ac:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d56b0:	b193      	cbz	r3, d56d8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d56b2:	4c24      	ldr	r4, [pc, #144]	; (d5744 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d56b4:	1ba3      	subs	r3, r4, r6
   d56b6:	b2db      	uxtb	r3, r3
   d56b8:	429f      	cmp	r7, r3
   d56ba:	d90c      	bls.n	d56d6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d56bc:	78e1      	ldrb	r1, [r4, #3]
   d56be:	9105      	str	r1, [sp, #20]
   d56c0:	4648      	mov	r0, r9
   d56c2:	f7ff fcc9 	bl	d5058 <_ZN10RHDatagram10headerFromEv>
   d56c6:	9905      	ldr	r1, [sp, #20]
   d56c8:	4602      	mov	r2, r0
   d56ca:	2302      	movs	r3, #2
   d56cc:	4628      	mov	r0, r5
   d56ce:	f000 fa04 	bl	d5ada <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d56d2:	3401      	adds	r4, #1
   d56d4:	e7ee      	b.n	d56b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d56d6:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d56d8:	682b      	ldr	r3, [r5, #0]
   d56da:	7872      	ldrb	r2, [r6, #1]
   d56dc:	68db      	ldr	r3, [r3, #12]
   d56de:	491a      	ldr	r1, [pc, #104]	; (d5748 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d56e0:	4628      	mov	r0, r5
   d56e2:	4798      	blx	r3
   d56e4:	4604      	mov	r4, r0
   d56e6:	b160      	cbz	r0, d5702 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d56e8:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d56ea:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d56ec:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d56ee:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d56f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d56f6:	4913      	ldr	r1, [pc, #76]	; (d5744 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d56f8:	9400      	str	r4, [sp, #0]
   d56fa:	4628      	mov	r0, r5
   d56fc:	f000 fa76 	bl	d5bec <_ZN8RHRouter10sendtoWaitEPhhhh>
   d5700:	e776      	b.n	d55f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d5702:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d5706:	4543      	cmp	r3, r8
   d5708:	f67f af71 	bls.w	d55ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d570c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d5710:	2b00      	cmp	r3, #0
   d5712:	f43f af6c 	beq.w	d55ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d5716:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d571a:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d571c:	4909      	ldr	r1, [pc, #36]	; (d5744 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d571e:	443e      	add	r6, r7
		tmpMessageLen++;
   d5720:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d5722:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d5724:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d5728:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d572a:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d572c:	9300      	str	r3, [sp, #0]
   d572e:	4628      	mov	r0, r5
   d5730:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d5732:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d5736:	f000 fa23 	bl	d5b80 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d573a:	e759      	b.n	d55f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d573c:	2003e341 	.word	0x2003e341
   d5740:	2003e343 	.word	0x2003e343
   d5744:	2003e340 	.word	0x2003e340
   d5748:	2003e342 	.word	0x2003e342

000d574c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5750:	b085      	sub	sp, #20
   d5752:	4680      	mov	r8, r0
   d5754:	461c      	mov	r4, r3
   d5756:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d575a:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d575c:	4689      	mov	r9, r1
   d575e:	4692      	mov	sl, r2
   d5760:	f000 fed4 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d5764:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d5768:	4404      	add	r4, r0
   d576a:	f000 fecf 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
   d576e:	1a20      	subs	r0, r4, r0
   d5770:	2800      	cmp	r0, #0
   d5772:	dd16      	ble.n	d57a2 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d5774:	b281      	uxth	r1, r0
   d5776:	2200      	movs	r2, #0
   d5778:	4658      	mov	r0, fp
   d577a:	f7ff fc2a 	bl	d4fd2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d577e:	2800      	cmp	r0, #0
   d5780:	d0f3      	beq.n	d576a <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d5782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5784:	9300      	str	r3, [sp, #0]
   d5786:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d578a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d578c:	9501      	str	r5, [sp, #4]
   d578e:	4652      	mov	r2, sl
   d5790:	4649      	mov	r1, r9
   d5792:	4640      	mov	r0, r8
   d5794:	f7ff ff08 	bl	d55a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d5798:	2800      	cmp	r0, #0
   d579a:	d0e6      	beq.n	d576a <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d579c:	b005      	add	sp, #20
   d579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d57a2:	2000      	movs	r0, #0
   d57a4:	e7fa      	b.n	d579c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d57a8 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d57a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57aa:	b085      	sub	sp, #20
   d57ac:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d57ae:	3004      	adds	r0, #4
{
   d57b0:	460e      	mov	r6, r1
   d57b2:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d57b4:	f7ff fc50 	bl	d5058 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d57b8:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d57ba:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d57bc:	4631      	mov	r1, r6
   d57be:	4628      	mov	r0, r5
   d57c0:	f000 f947 	bl	d5a52 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d57c4:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d57c6:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d57c8:	d001      	beq.n	d57ce <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d57ca:	2805      	cmp	r0, #5
   d57cc:	d11b      	bne.n	d5806 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d57ce:	7831      	ldrb	r1, [r6, #0]
   d57d0:	4628      	mov	r0, r5
   d57d2:	f000 f96b 	bl	d5aac <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d57d6:	7872      	ldrb	r2, [r6, #1]
   d57d8:	7a2b      	ldrb	r3, [r5, #8]
   d57da:	429a      	cmp	r2, r3
   d57dc:	d013      	beq.n	d5806 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d57de:	4c0b      	ldr	r4, [pc, #44]	; (d580c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d57e0:	2303      	movs	r3, #3
   d57e2:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d57e4:	7833      	ldrb	r3, [r6, #0]
   d57e6:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d57e8:	7871      	ldrb	r1, [r6, #1]
   d57ea:	2302      	movs	r3, #2
   d57ec:	463a      	mov	r2, r7
   d57ee:	4628      	mov	r0, r5
   d57f0:	f000 f973 	bl	d5ada <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d57f4:	2300      	movs	r3, #0
   d57f6:	9300      	str	r3, [sp, #0]
   d57f8:	4621      	mov	r1, r4
   d57fa:	7873      	ldrb	r3, [r6, #1]
   d57fc:	2202      	movs	r2, #2
   d57fe:	4628      	mov	r0, r5
   d5800:	f000 f9f4 	bl	d5bec <_ZN8RHRouter10sendtoWaitEPhhhh>
   d5804:	4604      	mov	r4, r0
}
   d5806:	4620      	mov	r0, r4
   d5808:	b005      	add	sp, #20
   d580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d580c:	2003e340 	.word	0x2003e340

000d5810 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d5810:	b510      	push	{r4, lr}
   d5812:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d5814:	f7ff fbd2 	bl	d4fbc <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d5818:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d581a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d581c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d581e:	2303      	movs	r3, #3
    _retransmissions = 0;
   d5820:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d5822:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d5824:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d5826:	f44f 7280 	mov.w	r2, #256	; 0x100
   d582a:	f104 0011 	add.w	r0, r4, #17
   d582e:	f004 f8ff 	bl	d9a30 <memset>
}
   d5832:	4620      	mov	r0, r4
   d5834:	bd10      	pop	{r4, pc}

000d5836 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d5836:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5838:	4604      	mov	r4, r0
   d583a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d583c:	f7ff fc00 	bl	d5040 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d5840:	4620      	mov	r0, r4
   d5842:	2200      	movs	r2, #0
   d5844:	2180      	movs	r1, #128	; 0x80
   d5846:	f7ff fbff 	bl	d5048 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d584a:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d584c:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d584e:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d5852:	f10d 010f 	add.w	r1, sp, #15
   d5856:	2201      	movs	r2, #1
   d5858:	4620      	mov	r0, r4
   d585a:	f7ff fbc2 	bl	d4fe2 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d585e:	4620      	mov	r0, r4
   d5860:	f7ff fbb3 	bl	d4fca <_ZN10RHDatagram14waitPacketSentEv>
}
   d5864:	b004      	add	sp, #16
   d5866:	bd10      	pop	{r4, pc}

000d5868 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d5868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d586c:	7b05      	ldrb	r5, [r0, #12]
   d586e:	3501      	adds	r5, #1
   d5870:	b2ed      	uxtb	r5, r5
{
   d5872:	b087      	sub	sp, #28
   d5874:	4604      	mov	r4, r0
   d5876:	4689      	mov	r9, r1
   d5878:	4692      	mov	sl, r2
   d587a:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d587c:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d587e:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d5880:	7c22      	ldrb	r2, [r4, #16]
   d5882:	463b      	mov	r3, r7
   d5884:	429a      	cmp	r2, r3
   d5886:	f107 0701 	add.w	r7, r7, #1
   d588a:	b2ff      	uxtb	r7, r7
   d588c:	d36b      	bcc.n	d5966 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d588e:	4629      	mov	r1, r5
   d5890:	4620      	mov	r0, r4
   d5892:	f7ff fbd5 	bl	d5040 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d5896:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d5898:	bf0d      	iteet	eq
   d589a:	22c0      	moveq	r2, #192	; 0xc0
   d589c:	2280      	movne	r2, #128	; 0x80
   d589e:	2140      	movne	r1, #64	; 0x40
   d58a0:	2100      	moveq	r1, #0
   d58a2:	4620      	mov	r0, r4
   d58a4:	f7ff fbd0 	bl	d5048 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d58a8:	4643      	mov	r3, r8
   d58aa:	4652      	mov	r2, sl
   d58ac:	4649      	mov	r1, r9
   d58ae:	4620      	mov	r0, r4
   d58b0:	f7ff fb97 	bl	d4fe2 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d58b4:	4620      	mov	r0, r4
   d58b6:	f7ff fb88 	bl	d4fca <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d58ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d58be:	d054      	beq.n	d596a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d58c0:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d58c2:	bf82      	ittt	hi
   d58c4:	68a3      	ldrhi	r3, [r4, #8]
   d58c6:	3301      	addhi	r3, #1
   d58c8:	60a3      	strhi	r3, [r4, #8]
   d58ca:	f000 fe1f 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d58ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   d58d2:	4683      	mov	fp, r0
   d58d4:	2000      	movs	r0, #0
   d58d6:	89e6      	ldrh	r6, [r4, #14]
   d58d8:	f002 ffe7 	bl	d88aa <_Z6randomii>
   d58dc:	4370      	muls	r0, r6
   d58de:	bf48      	it	mi
   d58e0:	30ff      	addmi	r0, #255	; 0xff
   d58e2:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d58e6:	fa1b f686 	uxtah	r6, fp, r6
   d58ea:	f000 fe0f 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
   d58ee:	1a30      	subs	r0, r6, r0
   d58f0:	2800      	cmp	r0, #0
   d58f2:	ddc5      	ble.n	d5880 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d58f4:	b281      	uxth	r1, r0
   d58f6:	2200      	movs	r2, #0
   d58f8:	4620      	mov	r0, r4
   d58fa:	f7ff fb6a 	bl	d4fd2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d58fe:	2800      	cmp	r0, #0
   d5900:	d0f3      	beq.n	d58ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d5902:	f10d 0317 	add.w	r3, sp, #23
   d5906:	9302      	str	r3, [sp, #8]
   d5908:	f10d 0316 	add.w	r3, sp, #22
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	2200      	movs	r2, #0
   d5910:	f10d 0315 	add.w	r3, sp, #21
   d5914:	9300      	str	r3, [sp, #0]
   d5916:	4611      	mov	r1, r2
   d5918:	ab05      	add	r3, sp, #20
   d591a:	4620      	mov	r0, r4
   d591c:	f7ff fba8 	bl	d5070 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d5920:	2800      	cmp	r0, #0
   d5922:	d0e2      	beq.n	d58ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d5924:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d5928:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d592c:	4542      	cmp	r2, r8
   d592e:	d10e      	bne.n	d594e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d5930:	f894 c004 	ldrb.w	ip, [r4, #4]
   d5934:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d5938:	458c      	cmp	ip, r1
   d593a:	d108      	bne.n	d594e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d593c:	2b00      	cmp	r3, #0
   d593e:	da08      	bge.n	d5952 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d5940:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d5944:	42ab      	cmp	r3, r5
   d5946:	d1d0      	bne.n	d58ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d5948:	b007      	add	sp, #28
   d594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d594e:	2b00      	cmp	r3, #0
   d5950:	dbcb      	blt.n	d58ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d5952:	18a1      	adds	r1, r4, r2
   d5954:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d5958:	7c49      	ldrb	r1, [r1, #17]
   d595a:	4299      	cmp	r1, r3
   d595c:	d1c5      	bne.n	d58ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d595e:	4620      	mov	r0, r4
   d5960:	f7ff ff69 	bl	d5836 <_ZN18RHReliableDatagram11acknowledgeEhh>
   d5964:	e7c1      	b.n	d58ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d5966:	2000      	movs	r0, #0
   d5968:	e7ee      	b.n	d5948 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d596a:	2001      	movs	r0, #1
   d596c:	e7ec      	b.n	d5948 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d596e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d596e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5972:	b089      	sub	sp, #36	; 0x24
   d5974:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d5978:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d597c:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d597e:	4604      	mov	r4, r0
   d5980:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d5982:	f7ff fb1e 	bl	d4fc2 <_ZN10RHDatagram9availableEv>
   d5986:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d598a:	b920      	cbnz	r0, d5996 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d598c:	2500      	movs	r5, #0
}
   d598e:	4628      	mov	r0, r5
   d5990:	b009      	add	sp, #36	; 0x24
   d5992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d5996:	f10d 031f 	add.w	r3, sp, #31
   d599a:	9302      	str	r3, [sp, #8]
   d599c:	f10d 031e 	add.w	r3, sp, #30
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	f10d 031d 	add.w	r3, sp, #29
   d59a6:	9300      	str	r3, [sp, #0]
   d59a8:	4620      	mov	r0, r4
   d59aa:	ab07      	add	r3, sp, #28
   d59ac:	f7ff fb60 	bl	d5070 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d59b0:	4605      	mov	r5, r0
   d59b2:	2800      	cmp	r0, #0
   d59b4:	d0ea      	beq.n	d598c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d59b6:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d59ba:	2b00      	cmp	r3, #0
   d59bc:	dbe6      	blt.n	d598c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d59be:	7922      	ldrb	r2, [r4, #4]
   d59c0:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d59c4:	429a      	cmp	r2, r3
   d59c6:	d106      	bne.n	d59d6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d59c8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d59cc:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d59d0:	4620      	mov	r0, r4
   d59d2:	f7ff ff30 	bl	d5836 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d59d6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d59da:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d59de:	4414      	add	r4, r2
   d59e0:	7c61      	ldrb	r1, [r4, #17]
   d59e2:	4299      	cmp	r1, r3
   d59e4:	d0d2      	beq.n	d598c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d59e6:	b106      	cbz	r6, d59ea <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d59e8:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d59ea:	f1b9 0f00 	cmp.w	r9, #0
   d59ee:	d003      	beq.n	d59f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d59f0:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d59f4:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d59f8:	f1b8 0f00 	cmp.w	r8, #0
   d59fc:	d001      	beq.n	d5a02 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d59fe:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d5a02:	b117      	cbz	r7, d5a0a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d5a04:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d5a08:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d5a0a:	7463      	strb	r3, [r4, #17]
		return true;
   d5a0c:	e7bf      	b.n	d598e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d5a0e <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d5a0e:	4770      	bx	lr

000d5a10 <_ZN8RHRouter4initEv>:
{
   d5a10:	b510      	push	{r4, lr}
   d5a12:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d5a14:	3004      	adds	r0, #4
   d5a16:	f7ff fb05 	bl	d5024 <_ZN10RHDatagram4initEv>
    if (ret)
   d5a1a:	b110      	cbz	r0, d5a22 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d5a1c:	231e      	movs	r3, #30
   d5a1e:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d5a22:	bd10      	pop	{r4, pc}

000d5a24 <_ZN8RHRouter10getRouteToEh>:
{
   d5a24:	b510      	push	{r4, lr}
   d5a26:	4602      	mov	r2, r0
   d5a28:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d5a2a:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d5a2e:	428c      	cmp	r4, r1
   d5a30:	d108      	bne.n	d5a44 <_ZN8RHRouter10getRouteToEh+0x20>
   d5a32:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d5a36:	b12c      	cbz	r4, d5a44 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d5a38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5a3c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d5a40:	4418      	add	r0, r3
}
   d5a42:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5a44:	3301      	adds	r3, #1
   d5a46:	2b0a      	cmp	r3, #10
   d5a48:	f102 0203 	add.w	r2, r2, #3
   d5a4c:	d1ed      	bne.n	d5a2a <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d5a4e:	2000      	movs	r0, #0
   d5a50:	e7f7      	b.n	d5a42 <_ZN8RHRouter10getRouteToEh+0x1e>

000d5a52 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d5a52:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d5a54:	780b      	ldrb	r3, [r1, #0]
   d5a56:	2bff      	cmp	r3, #255	; 0xff
{
   d5a58:	4605      	mov	r5, r0
   d5a5a:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d5a5c:	d006      	beq.n	d5a6c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d5a5e:	4619      	mov	r1, r3
   d5a60:	9201      	str	r2, [sp, #4]
   d5a62:	f7ff ffdf 	bl	d5a24 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d5a66:	b158      	cbz	r0, d5a80 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d5a68:	7843      	ldrb	r3, [r0, #1]
   d5a6a:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d5a6c:	4621      	mov	r1, r4
   d5a6e:	1d28      	adds	r0, r5, #4
   d5a70:	f7ff fefa 	bl	d5868 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d5a74:	2800      	cmp	r0, #0
   d5a76:	bf14      	ite	ne
   d5a78:	2000      	movne	r0, #0
   d5a7a:	2005      	moveq	r0, #5
}
   d5a7c:	b003      	add	sp, #12
   d5a7e:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d5a80:	2002      	movs	r0, #2
   d5a82:	e7fb      	b.n	d5a7c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d5a84 <_ZN8RHRouter11deleteRouteEh>:
{
   d5a84:	b510      	push	{r4, lr}
   d5a86:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d5a8a:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d5a8c:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d5a90:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d5a94:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d5a98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d5a9c:	4421      	add	r1, r4
   d5a9e:	4420      	add	r0, r4
   d5aa0:	f003 ff9e 	bl	d99e0 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d5aa4:	2300      	movs	r3, #0
   d5aa6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <_ZN8RHRouter13deleteRouteToEh>:
{
   d5aac:	b538      	push	{r3, r4, r5, lr}
   d5aae:	460a      	mov	r2, r1
   d5ab0:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d5ab2:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d5ab6:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d5aba:	b2d9      	uxtb	r1, r3
   d5abc:	5d65      	ldrb	r5, [r4, r5]
   d5abe:	4295      	cmp	r5, r2
   d5ac0:	d103      	bne.n	d5aca <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d5ac2:	f7ff ffdf 	bl	d5a84 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d5ac6:	2001      	movs	r0, #1
}
   d5ac8:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5aca:	3301      	adds	r3, #1
   d5acc:	2b0a      	cmp	r3, #10
   d5ace:	d1f2      	bne.n	d5ab6 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d5ad0:	2000      	movs	r0, #0
   d5ad2:	e7f9      	b.n	d5ac8 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d5ad4 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d5ad4:	2100      	movs	r1, #0
   d5ad6:	f7ff bfd5 	b.w	d5a84 <_ZN8RHRouter11deleteRouteEh>

000d5ada <_ZN8RHRouter10addRouteToEhhh>:
{
   d5ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5adc:	4616      	mov	r6, r2
   d5ade:	461f      	mov	r7, r3
   d5ae0:	4604      	mov	r4, r0
   d5ae2:	460d      	mov	r5, r1
   d5ae4:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d5ae6:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d5aea:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d5aee:	5c11      	ldrb	r1, [r2, r0]
   d5af0:	42a9      	cmp	r1, r5
   d5af2:	d105      	bne.n	d5b00 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d5af4:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d5af6:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d5afa:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d5afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5b00:	3301      	adds	r3, #1
   d5b02:	2b0a      	cmp	r3, #10
   d5b04:	d1f1      	bne.n	d5aea <_ZN8RHRouter10addRouteToEhhh+0x10>
   d5b06:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d5b08:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d5b0c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d5b10:	5c11      	ldrb	r1, [r2, r0]
   d5b12:	b919      	cbnz	r1, d5b1c <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d5b14:	4420      	add	r0, r4
   d5b16:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d5b1a:	e7ec      	b.n	d5af6 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5b1c:	3301      	adds	r3, #1
   d5b1e:	2b0a      	cmp	r3, #10
   d5b20:	d1f4      	bne.n	d5b0c <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d5b22:	4620      	mov	r0, r4
   d5b24:	f7ff ffd6 	bl	d5ad4 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5b28:	4620      	mov	r0, r4
   d5b2a:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d5b2e:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d5b32:	b92a      	cbnz	r2, d5b40 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d5b34:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d5b38:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d5b3c:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5b40:	3003      	adds	r0, #3
   d5b42:	4298      	cmp	r0, r3
   d5b44:	d1f3      	bne.n	d5b2e <_ZN8RHRouter10addRouteToEhhh+0x54>
   d5b46:	e7da      	b.n	d5afe <_ZN8RHRouter10addRouteToEhhh+0x24>

000d5b48 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5b48:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d5b4c:	2200      	movs	r2, #0
   d5b4e:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5b52:	3003      	adds	r0, #3
   d5b54:	4298      	cmp	r0, r3
   d5b56:	d1fa      	bne.n	d5b4e <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d5b58:	4770      	bx	lr
	...

000d5b5c <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d5b5c:	b510      	push	{r4, lr}
   d5b5e:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d5b60:	3004      	adds	r0, #4
   d5b62:	f7ff fe55 	bl	d5810 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d5b66:	4b05      	ldr	r3, [pc, #20]	; (d5b7c <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d5b68:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d5b6a:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d5b6e:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d5b70:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d5b74:	f7ff ffe8 	bl	d5b48 <_ZN8RHRouter17clearRoutingTableEv>
}
   d5b78:	4620      	mov	r0, r4
   d5b7a:	bd10      	pop	{r4, pc}
   d5b7c:	000da214 	.word	0x000da214

000d5b80 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d5b80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5b84:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d5b86:	6840      	ldr	r0, [r0, #4]
{
   d5b88:	9101      	str	r1, [sp, #4]
   d5b8a:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d5b8c:	6803      	ldr	r3, [r0, #0]
{
   d5b8e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d5b92:	699b      	ldr	r3, [r3, #24]
{
   d5b94:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d5b98:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d5b9a:	4798      	blx	r3
   d5b9c:	f106 0805 	add.w	r8, r6, #5
   d5ba0:	4580      	cmp	r8, r0
   d5ba2:	d81c      	bhi.n	d5bde <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d5ba4:	4d10      	ldr	r5, [pc, #64]	; (d5be8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d5ba6:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d5ba8:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d5bac:	2300      	movs	r3, #0
   d5bae:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d5bb0:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d5bb4:	70eb      	strb	r3, [r5, #3]
   d5bb6:	1c5a      	adds	r2, r3, #1
   d5bb8:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d5bbc:	1d68      	adds	r0, r5, #5
   d5bbe:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d5bc0:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d5bc2:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d5bc6:	f003 ff0b 	bl	d99e0 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d5bca:	6823      	ldr	r3, [r4, #0]
   d5bcc:	685b      	ldr	r3, [r3, #4]
   d5bce:	fa5f f288 	uxtb.w	r2, r8
   d5bd2:	4629      	mov	r1, r5
   d5bd4:	4620      	mov	r0, r4
}
   d5bd6:	b002      	add	sp, #8
   d5bd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d5bdc:	4718      	bx	r3
}
   d5bde:	2001      	movs	r0, #1
   d5be0:	b002      	add	sp, #8
   d5be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5be6:	bf00      	nop
   d5be8:	2003e43a 	.word	0x2003e43a

000d5bec <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d5bec:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d5bee:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d5bf2:	9401      	str	r4, [sp, #4]
   d5bf4:	7a04      	ldrb	r4, [r0, #8]
   d5bf6:	9400      	str	r4, [sp, #0]
   d5bf8:	f7ff ffc2 	bl	d5b80 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d5bfc:	b002      	add	sp, #8
   d5bfe:	bd10      	pop	{r4, pc}

000d5c00 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d5c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c04:	b087      	sub	sp, #28
   d5c06:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d5c08:	23ff      	movs	r3, #255	; 0xff
   d5c0a:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d5c0e:	f10d 0317 	add.w	r3, sp, #23
   d5c12:	9302      	str	r3, [sp, #8]
   d5c14:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d5ce8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d5c18:	f10d 0316 	add.w	r3, sp, #22
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	f10d 0315 	add.w	r3, sp, #21
   d5c22:	9300      	str	r3, [sp, #0]
{  
   d5c24:	4604      	mov	r4, r0
   d5c26:	4688      	mov	r8, r1
   d5c28:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d5c2a:	ab05      	add	r3, sp, #20
   d5c2c:	f10d 0213 	add.w	r2, sp, #19
   d5c30:	4649      	mov	r1, r9
   d5c32:	3004      	adds	r0, #4
{  
   d5c34:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d5c38:	f7ff fe99 	bl	d596e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d5c3c:	4605      	mov	r5, r0
   d5c3e:	b908      	cbnz	r0, d5c44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d5c40:	2500      	movs	r5, #0
   d5c42:	e038      	b.n	d5cb6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d5c44:	6823      	ldr	r3, [r4, #0]
   d5c46:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d5c4a:	681b      	ldr	r3, [r3, #0]
   d5c4c:	4649      	mov	r1, r9
   d5c4e:	4620      	mov	r0, r4
   d5c50:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d5c52:	f899 3000 	ldrb.w	r3, [r9]
   d5c56:	7a22      	ldrb	r2, [r4, #8]
   d5c58:	429a      	cmp	r2, r3
   d5c5a:	d001      	beq.n	d5c60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d5c5c:	2bff      	cmp	r3, #255	; 0xff
   d5c5e:	d12e      	bne.n	d5cbe <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d5c60:	b117      	cbz	r7, d5c68 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d5c62:	4b21      	ldr	r3, [pc, #132]	; (d5ce8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d5c64:	785b      	ldrb	r3, [r3, #1]
   d5c66:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d5c68:	f1bb 0f00 	cmp.w	fp, #0
   d5c6c:	d003      	beq.n	d5c76 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d5c6e:	4b1e      	ldr	r3, [pc, #120]	; (d5ce8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d5c70:	781b      	ldrb	r3, [r3, #0]
   d5c72:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d5c76:	f1ba 0f00 	cmp.w	sl, #0
   d5c7a:	d003      	beq.n	d5c84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d5c7c:	4b1a      	ldr	r3, [pc, #104]	; (d5ce8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d5c7e:	78db      	ldrb	r3, [r3, #3]
   d5c80:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d5c84:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d5c86:	b11b      	cbz	r3, d5c90 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d5c88:	4b17      	ldr	r3, [pc, #92]	; (d5ce8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d5c8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d5c8c:	791b      	ldrb	r3, [r3, #4]
   d5c8e:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d5c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5c92:	b11b      	cbz	r3, d5c9c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d5c94:	4b14      	ldr	r3, [pc, #80]	; (d5ce8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d5c96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d5c98:	789b      	ldrb	r3, [r3, #2]
   d5c9a:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d5c9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d5ca0:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d5ca2:	4912      	ldr	r1, [pc, #72]	; (d5cec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d5ca4:	3b05      	subs	r3, #5
   d5ca6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d5ca8:	429a      	cmp	r2, r3
		*len = msgLen;
   d5caa:	bf88      	it	hi
   d5cac:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d5cae:	7832      	ldrb	r2, [r6, #0]
   d5cb0:	4640      	mov	r0, r8
   d5cb2:	f003 fe95 	bl	d99e0 <memcpy>
}
   d5cb6:	4628      	mov	r0, r5
   d5cb8:	b007      	add	sp, #28
   d5cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d5cbe:	f899 3002 	ldrb.w	r3, [r9, #2]
   d5cc2:	1c5a      	adds	r2, r3, #1
   d5cc4:	f889 2002 	strb.w	r2, [r9, #2]
   d5cc8:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d5ccc:	429a      	cmp	r2, r3
   d5cce:	d9b7      	bls.n	d5c40 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d5cd0:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d5cd4:	2b00      	cmp	r3, #0
   d5cd6:	d0b3      	beq.n	d5c40 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d5cd8:	6823      	ldr	r3, [r4, #0]
   d5cda:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d5cde:	685b      	ldr	r3, [r3, #4]
   d5ce0:	4649      	mov	r1, r9
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	4798      	blx	r3
   d5ce6:	e7ab      	b.n	d5c40 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d5ce8:	2003e43a 	.word	0x2003e43a
   d5cec:	2003e43f 	.word	0x2003e43f

000d5cf0 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d5cf0:	b510      	push	{r4, lr}
   d5cf2:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d5cf4:	6a00      	ldr	r0, [r0, #32]
   d5cf6:	6803      	ldr	r3, [r0, #0]
   d5cf8:	68db      	ldr	r3, [r3, #12]
   d5cfa:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d5cfc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d5d00:	28ff      	cmp	r0, #255	; 0xff
   d5d02:	d002      	beq.n	d5d0a <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d5d04:	2101      	movs	r1, #1
   d5d06:	f003 f9df 	bl	d90c8 <pinMode>

    deselectSlave();
   d5d0a:	6823      	ldr	r3, [r4, #0]
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5d10:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d5d12:	2064      	movs	r0, #100	; 0x64
   d5d14:	f000 fee0 	bl	d6ad8 <delay>
#endif
    
    return true;
}
   d5d18:	2001      	movs	r0, #1
   d5d1a:	bd10      	pop	{r4, pc}

000d5d1c <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d5d1c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d5d20:	2100      	movs	r1, #0
   d5d22:	f003 b9e2 	b.w	d90ea <digitalWrite>

000d5d26 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d5d26:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d5d2a:	2101      	movs	r1, #1
   d5d2c:	f003 b9dd 	b.w	d90ea <digitalWrite>

000d5d30 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d5d30:	b570      	push	{r4, r5, r6, lr}
   d5d32:	4604      	mov	r4, r0
   d5d34:	460d      	mov	r5, r1
   d5d36:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d5d38:	f7ff fa4e 	bl	d51d8 <_ZN15RHGenericDriverC1Ev>
   d5d3c:	4b03      	ldr	r3, [pc, #12]	; (d5d4c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d5d3e:	6023      	str	r3, [r4, #0]
   d5d40:	6226      	str	r6, [r4, #32]
   d5d42:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d5d46:	4620      	mov	r0, r4
   d5d48:	bd70      	pop	{r4, r5, r6, pc}
   d5d4a:	bf00      	nop
   d5d4c:	000da224 	.word	0x000da224

000d5d50 <_ZN11RHSPIDriver7spiReadEh>:
{
   d5d50:	b538      	push	{r3, r4, r5, lr}
   d5d52:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d5d54:	6a00      	ldr	r0, [r0, #32]
   d5d56:	6803      	ldr	r3, [r0, #0]
   d5d58:	6a1b      	ldr	r3, [r3, #32]
{
   d5d5a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d5d5c:	4798      	blx	r3
    selectSlave();
   d5d5e:	6823      	ldr	r3, [r4, #0]
   d5d60:	4620      	mov	r0, r4
   d5d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5d64:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d5d66:	6a20      	ldr	r0, [r4, #32]
   d5d68:	6803      	ldr	r3, [r0, #0]
   d5d6a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d5d6e:	681b      	ldr	r3, [r3, #0]
   d5d70:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d5d72:	6a20      	ldr	r0, [r4, #32]
   d5d74:	6803      	ldr	r3, [r0, #0]
   d5d76:	2100      	movs	r1, #0
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	4798      	blx	r3
    deselectSlave();
   d5d7c:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d5d7e:	4605      	mov	r5, r0
    deselectSlave();
   d5d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5d82:	4620      	mov	r0, r4
   d5d84:	4798      	blx	r3
    _spi.endTransaction();
   d5d86:	6a20      	ldr	r0, [r4, #32]
   d5d88:	6803      	ldr	r3, [r0, #0]
   d5d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d8c:	4798      	blx	r3
}
   d5d8e:	4628      	mov	r0, r5
   d5d90:	bd38      	pop	{r3, r4, r5, pc}

000d5d92 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d5d92:	b570      	push	{r4, r5, r6, lr}
   d5d94:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d5d96:	6a00      	ldr	r0, [r0, #32]
   d5d98:	6803      	ldr	r3, [r0, #0]
   d5d9a:	6a1b      	ldr	r3, [r3, #32]
{
   d5d9c:	4616      	mov	r6, r2
   d5d9e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d5da0:	4798      	blx	r3
    selectSlave();
   d5da2:	6823      	ldr	r3, [r4, #0]
   d5da4:	4620      	mov	r0, r4
   d5da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5da8:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d5daa:	6a20      	ldr	r0, [r4, #32]
   d5dac:	6803      	ldr	r3, [r0, #0]
   d5dae:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5db2:	681b      	ldr	r3, [r3, #0]
   d5db4:	4798      	blx	r3
   d5db6:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d5db8:	6a20      	ldr	r0, [r4, #32]
   d5dba:	6803      	ldr	r3, [r0, #0]
   d5dbc:	4631      	mov	r1, r6
   d5dbe:	681b      	ldr	r3, [r3, #0]
   d5dc0:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5dc2:	2001      	movs	r0, #1
   d5dc4:	f000 fb9a 	bl	d64fc <HAL_Delay_Microseconds>
    deselectSlave();
   d5dc8:	6823      	ldr	r3, [r4, #0]
   d5dca:	4620      	mov	r0, r4
   d5dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5dce:	4798      	blx	r3
    _spi.endTransaction();
   d5dd0:	6a20      	ldr	r0, [r4, #32]
   d5dd2:	6803      	ldr	r3, [r0, #0]
   d5dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5dd6:	4798      	blx	r3
}
   d5dd8:	4628      	mov	r0, r5
   d5dda:	bd70      	pop	{r4, r5, r6, pc}

000d5ddc <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d5ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5dde:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d5de0:	6a00      	ldr	r0, [r0, #32]
{
   d5de2:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d5de4:	6803      	ldr	r3, [r0, #0]
   d5de6:	6a1b      	ldr	r3, [r3, #32]
{
   d5de8:	460f      	mov	r7, r1
   d5dea:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d5dec:	4798      	blx	r3
    selectSlave();
   d5dee:	6823      	ldr	r3, [r4, #0]
   d5df0:	4620      	mov	r0, r4
   d5df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5df4:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d5df6:	6a20      	ldr	r0, [r4, #32]
   d5df8:	6803      	ldr	r3, [r0, #0]
   d5dfa:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d5dfe:	681b      	ldr	r3, [r3, #0]
   d5e00:	4798      	blx	r3
   d5e02:	442e      	add	r6, r5
   d5e04:	4607      	mov	r7, r0
    while (len--)
   d5e06:	42b5      	cmp	r5, r6
   d5e08:	d007      	beq.n	d5e1a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d5e0a:	6a20      	ldr	r0, [r4, #32]
   d5e0c:	6803      	ldr	r3, [r0, #0]
   d5e0e:	2100      	movs	r1, #0
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	4798      	blx	r3
   d5e14:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d5e18:	e7f5      	b.n	d5e06 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d5e1a:	6823      	ldr	r3, [r4, #0]
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5e20:	4798      	blx	r3
    _spi.endTransaction();
   d5e22:	6a20      	ldr	r0, [r4, #32]
   d5e24:	6803      	ldr	r3, [r0, #0]
   d5e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e28:	4798      	blx	r3
}
   d5e2a:	4638      	mov	r0, r7
   d5e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e2e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d5e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e30:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d5e32:	6a00      	ldr	r0, [r0, #32]
{
   d5e34:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d5e36:	6803      	ldr	r3, [r0, #0]
   d5e38:	6a1b      	ldr	r3, [r3, #32]
{
   d5e3a:	460f      	mov	r7, r1
   d5e3c:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d5e3e:	4798      	blx	r3
    selectSlave();
   d5e40:	6823      	ldr	r3, [r4, #0]
   d5e42:	4620      	mov	r0, r4
   d5e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5e46:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d5e48:	6a20      	ldr	r0, [r4, #32]
   d5e4a:	6803      	ldr	r3, [r0, #0]
   d5e4c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	4798      	blx	r3
   d5e54:	442e      	add	r6, r5
   d5e56:	4607      	mov	r7, r0
    while (len--)
   d5e58:	42b5      	cmp	r5, r6
   d5e5a:	d006      	beq.n	d5e6a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d5e5c:	6a20      	ldr	r0, [r4, #32]
   d5e5e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e62:	6803      	ldr	r3, [r0, #0]
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	4798      	blx	r3
    while (len--)
   d5e68:	e7f6      	b.n	d5e58 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d5e6a:	6823      	ldr	r3, [r4, #0]
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5e70:	4798      	blx	r3
    _spi.endTransaction();
   d5e72:	6a20      	ldr	r0, [r4, #32]
   d5e74:	6803      	ldr	r3, [r0, #0]
   d5e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e78:	4798      	blx	r3
}
   d5e7a:	4638      	mov	r0, r7
   d5e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e7e <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d5e7e:	6a00      	ldr	r0, [r0, #32]
   d5e80:	6803      	ldr	r3, [r0, #0]
   d5e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e84:	4718      	bx	r3

000d5e86 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d5e86:	2001      	movs	r0, #1
   d5e88:	4770      	bx	lr

000d5e8a <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d5e8a:	20fb      	movs	r0, #251	; 0xfb
   d5e8c:	4770      	bx	lr

000d5e8e <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d5e8e:	4770      	bx	lr

000d5e90 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d5e90:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d5e92:	7903      	ldrb	r3, [r0, #4]
   d5e94:	2b05      	cmp	r3, #5
{
   d5e96:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d5e98:	d010      	beq.n	d5ebc <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d5e9a:	6803      	ldr	r3, [r0, #0]
   d5e9c:	2105      	movs	r1, #5
   d5e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d5ea2:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d5ea4:	2207      	movs	r2, #7
   d5ea6:	2101      	movs	r1, #1
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	f7ff ff72 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d5eae:	2280      	movs	r2, #128	; 0x80
   d5eb0:	2140      	movs	r1, #64	; 0x40
   d5eb2:	4620      	mov	r0, r4
   d5eb4:	f7ff ff6d 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d5eb8:	2305      	movs	r3, #5
   d5eba:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d5ebc:	7923      	ldrb	r3, [r4, #4]
   d5ebe:	2b05      	cmp	r3, #5
   d5ec0:	d0fc      	beq.n	d5ebc <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d5ec2:	7e20      	ldrb	r0, [r4, #24]
}
   d5ec4:	bd10      	pop	{r4, pc}

000d5ec6 <_ZN7RH_RF95D0Ev>:
   d5ec6:	b510      	push	{r4, lr}
   d5ec8:	f44f 7198 	mov.w	r1, #304	; 0x130
   d5ecc:	4604      	mov	r4, r0
   d5ece:	f003 f963 	bl	d9198 <_ZdlPvj>
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	bd10      	pop	{r4, pc}

000d5ed6 <_ZN7RH_RF955sleepEv>:
{
   d5ed6:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d5ed8:	7903      	ldrb	r3, [r0, #4]
   d5eda:	2b01      	cmp	r3, #1
{
   d5edc:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d5ede:	d00b      	beq.n	d5ef8 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d5ee0:	6803      	ldr	r3, [r0, #0]
   d5ee2:	2101      	movs	r1, #1
   d5ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d5ee8:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d5eea:	2200      	movs	r2, #0
   d5eec:	2101      	movs	r1, #1
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f7ff ff4f 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d5ef4:	2301      	movs	r3, #1
   d5ef6:	7123      	strb	r3, [r4, #4]
}
   d5ef8:	2001      	movs	r0, #1
   d5efa:	bd10      	pop	{r4, pc}

000d5efc <_ZN7RH_RF954recvEPhS0_>:
{
   d5efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d5efe:	6803      	ldr	r3, [r0, #0]
   d5f00:	68db      	ldr	r3, [r3, #12]
{
   d5f02:	4604      	mov	r4, r0
   d5f04:	460f      	mov	r7, r1
   d5f06:	4615      	mov	r5, r2
    if (!available())
   d5f08:	4798      	blx	r3
   d5f0a:	4606      	mov	r6, r0
   d5f0c:	b1b0      	cbz	r0, d5f3c <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d5f0e:	b187      	cbz	r7, d5f32 <_ZN7RH_RF954recvEPhS0_+0x36>
   d5f10:	b17d      	cbz	r5, d5f32 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d5f12:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5f16:	782a      	ldrb	r2, [r5, #0]
   d5f18:	3b03      	subs	r3, #3
   d5f1a:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d5f1c:	bfde      	ittt	le
   d5f1e:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d5f22:	3b04      	suble	r3, #4
   d5f24:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d5f26:	782a      	ldrb	r2, [r5, #0]
   d5f28:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d5f2c:	4638      	mov	r0, r7
   d5f2e:	f003 fd57 	bl	d99e0 <memcpy>
    _rxBufValid = false;
   d5f32:	2300      	movs	r3, #0
   d5f34:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d5f38:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d5f3c:	4630      	mov	r0, r6
   d5f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f40 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d5f40:	b538      	push	{r3, r4, r5, lr}
   d5f42:	4604      	mov	r4, r0
   d5f44:	4615      	mov	r5, r2
    _rxBufValid(0)
   d5f46:	461a      	mov	r2, r3
   d5f48:	f7ff fef2 	bl	d5d30 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d5f4c:	4b09      	ldr	r3, [pc, #36]	; (d5f74 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d5f4e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d5f50:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d5f52:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d5f54:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d5f58:	2201      	movs	r2, #1
    _rxBufValid(0)
   d5f5a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d5f5e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d5f62:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d5f66:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d5f6a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d5f6e:	4620      	mov	r0, r4
   d5f70:	bd38      	pop	{r3, r4, r5, pc}
   d5f72:	bf00      	nop
   d5f74:	000da2bc 	.word	0x000da2bc

000d5f78 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d5f78:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d5f7c:	2b03      	cmp	r3, #3
   d5f7e:	d91b      	bls.n	d5fb8 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d5f80:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d5f84:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d5f86:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d5f8a:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d5f8c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d5f90:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d5f92:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d5f96:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d5f98:	7983      	ldrb	r3, [r0, #6]
   d5f9a:	b933      	cbnz	r3, d5faa <_ZN7RH_RF9513validateRxBufEv+0x32>
   d5f9c:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d5f9e:	7942      	ldrb	r2, [r0, #5]
   d5fa0:	429a      	cmp	r2, r3
   d5fa2:	d002      	beq.n	d5faa <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d5fa4:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d5fa6:	2bff      	cmp	r3, #255	; 0xff
   d5fa8:	d106      	bne.n	d5fb8 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d5faa:	8a83      	ldrh	r3, [r0, #20]
   d5fac:	3301      	adds	r3, #1
   d5fae:	b29b      	uxth	r3, r3
   d5fb0:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d5fb2:	2301      	movs	r3, #1
   d5fb4:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d5fb8:	4770      	bx	lr
   d5fba:	0000      	movs	r0, r0
   d5fbc:	0000      	movs	r0, r0
	...

000d5fc0 <_ZN7RH_RF9512setFrequencyEf>:
{
   d5fc0:	b538      	push	{r3, r4, r5, lr}
   d5fc2:	4604      	mov	r4, r0
   d5fc4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5fc8:	ee10 0a10 	vmov	r0, s0
{
   d5fcc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5fd0:	f003 fa50 	bl	d9474 <__aeabi_f2d>
   d5fd4:	a317      	add	r3, pc, #92	; (adr r3, d6034 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d5fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5fda:	f003 faa3 	bl	d9524 <__aeabi_dmul>
   d5fde:	a317      	add	r3, pc, #92	; (adr r3, d603c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d5fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5fe4:	f003 fbc8 	bl	d9778 <__aeabi_ddiv>
   d5fe8:	f003 fcae 	bl	d9948 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d5fec:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5fee:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d5ff0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	f7ff fecc 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d5ffa:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d5ffe:	2107      	movs	r1, #7
   d6000:	4620      	mov	r0, r4
   d6002:	f7ff fec6 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d6006:	b2ea      	uxtb	r2, r5
   d6008:	2108      	movs	r1, #8
   d600a:	4620      	mov	r0, r4
   d600c:	f7ff fec1 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d6010:	eddf 7a07 	vldr	s15, [pc, #28]	; d6030 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d6014:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d6018:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6020:	bfac      	ite	ge
   d6022:	2301      	movge	r3, #1
   d6024:	2300      	movlt	r3, #0
}
   d6026:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d6028:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d602c:	bd38      	pop	{r3, r4, r5, pc}
   d602e:	bf00      	nop
   d6030:	4442c000 	.word	0x4442c000
   d6034:	00000000 	.word	0x00000000
   d6038:	412e8480 	.word	0x412e8480
   d603c:	00000000 	.word	0x00000000
   d6040:	404e8480 	.word	0x404e8480

000d6044 <_ZN7RH_RF9511setModeIdleEv>:
{
   d6044:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d6046:	7903      	ldrb	r3, [r0, #4]
   d6048:	2b02      	cmp	r3, #2
{
   d604a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d604c:	d00b      	beq.n	d6066 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d604e:	6803      	ldr	r3, [r0, #0]
   d6050:	2102      	movs	r1, #2
   d6052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6056:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d6058:	2201      	movs	r2, #1
   d605a:	4611      	mov	r1, r2
   d605c:	4620      	mov	r0, r4
   d605e:	f7ff fe98 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d6062:	2302      	movs	r3, #2
   d6064:	7123      	strb	r3, [r4, #4]
}
   d6066:	bd10      	pop	{r4, pc}

000d6068 <_ZN7RH_RF9515handleInterruptEv>:
{
   d6068:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d606a:	2112      	movs	r1, #18
{
   d606c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d606e:	f7ff fe6f 	bl	d5d50 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6072:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d6074:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6076:	4620      	mov	r0, r4
   d6078:	f7ff fe6a 	bl	d5d50 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d607c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d607e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6080:	2112      	movs	r1, #18
   d6082:	4620      	mov	r0, r4
   d6084:	f7ff fe85 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d6088:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d608a:	2b04      	cmp	r3, #4
   d608c:	d107      	bne.n	d609e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d608e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d6092:	d117      	bne.n	d60c4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d6094:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d6098:	b10b      	cbz	r3, d609e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d609a:	0670      	lsls	r0, r6, #25
   d609c:	d512      	bpl.n	d60c4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d609e:	7923      	ldrb	r3, [r4, #4]
   d60a0:	2b04      	cmp	r3, #4
   d60a2:	d101      	bne.n	d60a8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d60a4:	0669      	lsls	r1, r5, #25
   d60a6:	d422      	bmi.n	d60ee <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d60a8:	7923      	ldrb	r3, [r4, #4]
   d60aa:	2b03      	cmp	r3, #3
   d60ac:	d101      	bne.n	d60b2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d60ae:	072a      	lsls	r2, r5, #28
   d60b0:	d469      	bmi.n	d6186 <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d60b2:	7923      	ldrb	r3, [r4, #4]
   d60b4:	2b05      	cmp	r3, #5
   d60b6:	d10e      	bne.n	d60d6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d60b8:	076b      	lsls	r3, r5, #29
   d60ba:	d50c      	bpl.n	d60d6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d60bc:	f005 0501 	and.w	r5, r5, #1
   d60c0:	7625      	strb	r5, [r4, #24]
   d60c2:	e059      	b.n	d6178 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d60c4:	8a63      	ldrh	r3, [r4, #18]
   d60c6:	3301      	adds	r3, #1
   d60c8:	b29b      	uxth	r3, r3
   d60ca:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d60cc:	2300      	movs	r3, #0
   d60ce:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d60d2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d60d6:	22ff      	movs	r2, #255	; 0xff
   d60d8:	2112      	movs	r1, #18
   d60da:	4620      	mov	r0, r4
   d60dc:	f7ff fe59 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d60e0:	4620      	mov	r0, r4
   d60e2:	22ff      	movs	r2, #255	; 0xff
}
   d60e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d60e8:	2112      	movs	r1, #18
   d60ea:	f7ff be52 	b.w	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d60ee:	2113      	movs	r1, #19
   d60f0:	4620      	mov	r0, r4
   d60f2:	f7ff fe2d 	bl	d5d50 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d60f6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d60f8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d60fa:	4620      	mov	r0, r4
   d60fc:	f7ff fe28 	bl	d5d50 <_ZN11RHSPIDriver7spiReadEh>
   d6100:	210d      	movs	r1, #13
   d6102:	4602      	mov	r2, r0
   d6104:	4620      	mov	r0, r4
   d6106:	f7ff fe44 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d610a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d610e:	462b      	mov	r3, r5
   d6110:	2100      	movs	r1, #0
   d6112:	4620      	mov	r0, r4
   d6114:	f7ff fe62 	bl	d5ddc <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d6118:	2119      	movs	r1, #25
	_bufLen = len;
   d611a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d611e:	4620      	mov	r0, r4
   d6120:	f7ff fe16 	bl	d5d50 <_ZN11RHSPIDriver7spiReadEh>
   d6124:	b240      	sxtb	r0, r0
   d6126:	2800      	cmp	r0, #0
   d6128:	bfb8      	it	lt
   d612a:	3003      	addlt	r0, #3
   d612c:	1080      	asrs	r0, r0, #2
   d612e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d6132:	211a      	movs	r1, #26
   d6134:	4620      	mov	r0, r4
   d6136:	f7ff fe0b 	bl	d5d50 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d613a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d613e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d6140:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d6142:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d6144:	bfa9      	itett	ge
   d6146:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d6148:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d614a:	b21b      	sxthge	r3, r3
   d614c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d614e:	bfb2      	itee	lt
   d6150:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d6152:	220f      	movge	r2, #15
   d6154:	fb93 f3f2 	sdivge	r3, r3, r2
   d6158:	b21b      	sxth	r3, r3
   d615a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d615c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d6160:	b173      	cbz	r3, d6180 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d6162:	8a23      	ldrh	r3, [r4, #16]
   d6164:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d6166:	b21b      	sxth	r3, r3
   d6168:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d616a:	4620      	mov	r0, r4
   d616c:	f7ff ff04 	bl	d5f78 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d6170:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d6174:	2b00      	cmp	r3, #0
   d6176:	d0ae      	beq.n	d60d6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d6178:	4620      	mov	r0, r4
   d617a:	f7ff ff63 	bl	d6044 <_ZN7RH_RF9511setModeIdleEv>
   d617e:	e7aa      	b.n	d60d6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d6180:	8a23      	ldrh	r3, [r4, #16]
   d6182:	3ba4      	subs	r3, #164	; 0xa4
   d6184:	e7ef      	b.n	d6166 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d6186:	8ae3      	ldrh	r3, [r4, #22]
   d6188:	3301      	adds	r3, #1
   d618a:	b29b      	uxth	r3, r3
   d618c:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d618e:	e7f3      	b.n	d6178 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d6190 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d6190:	4b02      	ldr	r3, [pc, #8]	; (d619c <_ZN7RH_RF954isr0Ev+0xc>)
   d6192:	6818      	ldr	r0, [r3, #0]
   d6194:	b108      	cbz	r0, d619a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d6196:	f7ff bf67 	b.w	d6068 <_ZN7RH_RF9515handleInterruptEv>
}
   d619a:	4770      	bx	lr
   d619c:	2003e53c 	.word	0x2003e53c

000d61a0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d61a0:	4b02      	ldr	r3, [pc, #8]	; (d61ac <_ZN7RH_RF954isr1Ev+0xc>)
   d61a2:	6858      	ldr	r0, [r3, #4]
   d61a4:	b108      	cbz	r0, d61aa <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d61a6:	f7ff bf5f 	b.w	d6068 <_ZN7RH_RF9515handleInterruptEv>
}
   d61aa:	4770      	bx	lr
   d61ac:	2003e53c 	.word	0x2003e53c

000d61b0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d61b0:	4b02      	ldr	r3, [pc, #8]	; (d61bc <_ZN7RH_RF954isr2Ev+0xc>)
   d61b2:	6898      	ldr	r0, [r3, #8]
   d61b4:	b108      	cbz	r0, d61ba <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d61b6:	f7ff bf57 	b.w	d6068 <_ZN7RH_RF9515handleInterruptEv>
}
   d61ba:	4770      	bx	lr
   d61bc:	2003e53c 	.word	0x2003e53c

000d61c0 <_ZN7RH_RF959setModeRxEv>:
{
   d61c0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d61c2:	7903      	ldrb	r3, [r0, #4]
   d61c4:	2b04      	cmp	r3, #4
{
   d61c6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d61c8:	d010      	beq.n	d61ec <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d61ca:	6803      	ldr	r3, [r0, #0]
   d61cc:	2104      	movs	r1, #4
   d61ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d61d2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d61d4:	2205      	movs	r2, #5
   d61d6:	2101      	movs	r1, #1
   d61d8:	4620      	mov	r0, r4
   d61da:	f7ff fdda 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d61de:	2200      	movs	r2, #0
   d61e0:	2140      	movs	r1, #64	; 0x40
   d61e2:	4620      	mov	r0, r4
   d61e4:	f7ff fdd5 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d61e8:	2304      	movs	r3, #4
   d61ea:	7123      	strb	r3, [r4, #4]
}
   d61ec:	bd10      	pop	{r4, pc}

000d61ee <_ZN7RH_RF959availableEv>:
{
   d61ee:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d61f0:	7903      	ldrb	r3, [r0, #4]
   d61f2:	2b03      	cmp	r3, #3
{
   d61f4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d61f6:	d005      	beq.n	d6204 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d61f8:	f7ff ffe2 	bl	d61c0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d61fc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d6200:	b2c0      	uxtb	r0, r0
}
   d6202:	bd10      	pop	{r4, pc}
	return false;
   d6204:	2000      	movs	r0, #0
   d6206:	e7fc      	b.n	d6202 <_ZN7RH_RF959availableEv+0x14>

000d6208 <_ZN7RH_RF959setModeTxEv>:
{
   d6208:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d620a:	7903      	ldrb	r3, [r0, #4]
   d620c:	2b03      	cmp	r3, #3
{
   d620e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d6210:	d010      	beq.n	d6234 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d6212:	6803      	ldr	r3, [r0, #0]
   d6214:	2103      	movs	r1, #3
   d6216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d621a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d621c:	2203      	movs	r2, #3
   d621e:	2101      	movs	r1, #1
   d6220:	4620      	mov	r0, r4
   d6222:	f7ff fdb6 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d6226:	2240      	movs	r2, #64	; 0x40
   d6228:	4611      	mov	r1, r2
   d622a:	4620      	mov	r0, r4
   d622c:	f7ff fdb1 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d6230:	2303      	movs	r3, #3
   d6232:	7123      	strb	r3, [r4, #4]
}
   d6234:	bd10      	pop	{r4, pc}

000d6236 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d6236:	2afb      	cmp	r2, #251	; 0xfb
{
   d6238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d623a:	4604      	mov	r4, r0
   d623c:	460f      	mov	r7, r1
   d623e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d6240:	d902      	bls.n	d6248 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d6242:	2600      	movs	r6, #0
}
   d6244:	4630      	mov	r0, r6
   d6246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d6248:	6803      	ldr	r3, [r0, #0]
   d624a:	6a1b      	ldr	r3, [r3, #32]
   d624c:	4798      	blx	r3
    setModeIdle();
   d624e:	4620      	mov	r0, r4
   d6250:	f7ff fef8 	bl	d6044 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d6254:	6823      	ldr	r3, [r4, #0]
   d6256:	4620      	mov	r0, r4
   d6258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d625a:	4798      	blx	r3
   d625c:	4606      	mov	r6, r0
   d625e:	2800      	cmp	r0, #0
   d6260:	d0ef      	beq.n	d6242 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d6262:	2200      	movs	r2, #0
   d6264:	210d      	movs	r1, #13
   d6266:	4620      	mov	r0, r4
   d6268:	f7ff fd93 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d626c:	7ae2      	ldrb	r2, [r4, #11]
   d626e:	2100      	movs	r1, #0
   d6270:	4620      	mov	r0, r4
   d6272:	f7ff fd8e 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d6276:	7b22      	ldrb	r2, [r4, #12]
   d6278:	2100      	movs	r1, #0
   d627a:	4620      	mov	r0, r4
   d627c:	f7ff fd89 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d6280:	7b62      	ldrb	r2, [r4, #13]
   d6282:	2100      	movs	r1, #0
   d6284:	4620      	mov	r0, r4
   d6286:	f7ff fd84 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d628a:	7ba2      	ldrb	r2, [r4, #14]
   d628c:	2100      	movs	r1, #0
   d628e:	4620      	mov	r0, r4
   d6290:	f7ff fd7f 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d6294:	462b      	mov	r3, r5
   d6296:	463a      	mov	r2, r7
   d6298:	2100      	movs	r1, #0
   d629a:	4620      	mov	r0, r4
   d629c:	f7ff fdc7 	bl	d5e2e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d62a0:	1d2a      	adds	r2, r5, #4
   d62a2:	b2d2      	uxtb	r2, r2
   d62a4:	2122      	movs	r1, #34	; 0x22
   d62a6:	4620      	mov	r0, r4
   d62a8:	f7ff fd73 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d62ac:	4620      	mov	r0, r4
   d62ae:	f7ff ffab 	bl	d6208 <_ZN7RH_RF959setModeTxEv>
    return true;
   d62b2:	e7c7      	b.n	d6244 <_ZN7RH_RF954sendEPKhh+0xe>

000d62b4 <_ZN7RH_RF9510setTxPowerEab>:
{
   d62b4:	b538      	push	{r3, r4, r5, lr}
   d62b6:	4605      	mov	r5, r0
   d62b8:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d62ba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d62be:	b172      	cbz	r2, d62de <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d62c0:	f381 0204 	usat	r2, #4, r1
   d62c4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d62c8:	b2d2      	uxtb	r2, r2
   d62ca:	2109      	movs	r1, #9
   d62cc:	f7ff fd61 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d62d0:	2204      	movs	r2, #4
   d62d2:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d62d4:	4628      	mov	r0, r5
}
   d62d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d62da:	f7ff bd5a 	b.w	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d62de:	2914      	cmp	r1, #20
   d62e0:	dc10      	bgt.n	d6304 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d62e2:	2901      	cmp	r1, #1
   d62e4:	dd10      	ble.n	d6308 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d62e6:	2911      	cmp	r1, #17
   d62e8:	dd0f      	ble.n	d630a <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d62ea:	2207      	movs	r2, #7
   d62ec:	214d      	movs	r1, #77	; 0x4d
   d62ee:	4628      	mov	r0, r5
   d62f0:	f7ff fd4f 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d62f4:	3c03      	subs	r4, #3
   d62f6:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d62f8:	1ea2      	subs	r2, r4, #2
   d62fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d62fe:	b2d2      	uxtb	r2, r2
   d6300:	2109      	movs	r1, #9
   d6302:	e7e7      	b.n	d62d4 <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d6304:	2414      	movs	r4, #20
   d6306:	e7f0      	b.n	d62ea <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d6308:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d630a:	2204      	movs	r2, #4
   d630c:	214d      	movs	r1, #77	; 0x4d
   d630e:	4628      	mov	r0, r5
   d6310:	f7ff fd3f 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
   d6314:	e7f0      	b.n	d62f8 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d6316 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d6316:	b538      	push	{r3, r4, r5, lr}
   d6318:	460c      	mov	r4, r1
   d631a:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d631c:	780a      	ldrb	r2, [r1, #0]
   d631e:	211d      	movs	r1, #29
   d6320:	f7ff fd37 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d6324:	7862      	ldrb	r2, [r4, #1]
   d6326:	211e      	movs	r1, #30
   d6328:	4628      	mov	r0, r5
   d632a:	f7ff fd32 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d632e:	78a2      	ldrb	r2, [r4, #2]
   d6330:	4628      	mov	r0, r5
   d6332:	2126      	movs	r1, #38	; 0x26
}
   d6334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d6338:	f7ff bd2b 	b.w	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>

000d633c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d633c:	2905      	cmp	r1, #5
{
   d633e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d6340:	d80f      	bhi.n	d6362 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d6342:	4b09      	ldr	r3, [pc, #36]	; (d6368 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d6344:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d6348:	185c      	adds	r4, r3, r1
   d634a:	5a5a      	ldrh	r2, [r3, r1]
   d634c:	78a3      	ldrb	r3, [r4, #2]
   d634e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d6352:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d6354:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d6358:	f7ff ffdd 	bl	d6316 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d635c:	2001      	movs	r0, #1
}
   d635e:	b002      	add	sp, #8
   d6360:	bd10      	pop	{r4, pc}
        return false;
   d6362:	2000      	movs	r0, #0
   d6364:	e7fb      	b.n	d635e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d6366:	bf00      	nop
   d6368:	000da2a4 	.word	0x000da2a4

000d636c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d636c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d636e:	0a0a      	lsrs	r2, r1, #8
{
   d6370:	4605      	mov	r5, r0
   d6372:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d6374:	2120      	movs	r1, #32
   d6376:	f7ff fd0c 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d637a:	b2e2      	uxtb	r2, r4
   d637c:	4628      	mov	r0, r5
   d637e:	2121      	movs	r1, #33	; 0x21
}
   d6380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d6384:	f7ff bd05 	b.w	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>

000d6388 <_ZN7RH_RF954initEv>:
{
   d6388:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d638a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d638c:	f7ff fcb0 	bl	d5cf0 <_ZN11RHSPIDriver4initEv>
   d6390:	4606      	mov	r6, r0
   d6392:	b918      	cbnz	r0, d639c <_ZN7RH_RF954initEv+0x14>
	return false;
   d6394:	2600      	movs	r6, #0
}
   d6396:	4630      	mov	r0, r6
   d6398:	b002      	add	sp, #8
   d639a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d639c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d63a0:	2dff      	cmp	r5, #255	; 0xff
   d63a2:	d052      	beq.n	d644a <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d63a4:	4629      	mov	r1, r5
   d63a6:	4620      	mov	r0, r4
   d63a8:	f7ff fd69 	bl	d5e7e <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d63ac:	2280      	movs	r2, #128	; 0x80
   d63ae:	2101      	movs	r1, #1
   d63b0:	4620      	mov	r0, r4
   d63b2:	f7ff fcee 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d63b6:	200a      	movs	r0, #10
   d63b8:	f000 fb8e 	bl	d6ad8 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d63bc:	2101      	movs	r1, #1
   d63be:	4620      	mov	r0, r4
   d63c0:	f7ff fcc6 	bl	d5d50 <_ZN11RHSPIDriver7spiReadEh>
   d63c4:	2880      	cmp	r0, #128	; 0x80
   d63c6:	d1e5      	bne.n	d6394 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d63c8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d63cc:	28ff      	cmp	r0, #255	; 0xff
   d63ce:	d01c      	beq.n	d640a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d63d0:	2100      	movs	r1, #0
   d63d2:	f002 fe79 	bl	d90c8 <pinMode>
	if (_myInterruptIndex == 0xff)
   d63d6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d63da:	2bff      	cmp	r3, #255	; 0xff
   d63dc:	d107      	bne.n	d63ee <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d63de:	4a25      	ldr	r2, [pc, #148]	; (d6474 <_ZN7RH_RF954initEv+0xec>)
   d63e0:	7813      	ldrb	r3, [r2, #0]
   d63e2:	2b03      	cmp	r3, #3
   d63e4:	d8d6      	bhi.n	d6394 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d63e6:	1c59      	adds	r1, r3, #1
   d63e8:	7011      	strb	r1, [r2, #0]
   d63ea:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d63ee:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d63f2:	4b21      	ldr	r3, [pc, #132]	; (d6478 <_ZN7RH_RF954initEv+0xf0>)
   d63f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d63f8:	bb52      	cbnz	r2, d6450 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d63fa:	4920      	ldr	r1, [pc, #128]	; (d647c <_ZN7RH_RF954initEv+0xf4>)
   d63fc:	9200      	str	r2, [sp, #0]
   d63fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6402:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d6404:	b2a8      	uxth	r0, r5
   d6406:	f000 ff0f 	bl	d7228 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d640a:	2200      	movs	r2, #0
   d640c:	210e      	movs	r1, #14
   d640e:	4620      	mov	r0, r4
   d6410:	f7ff fcbf 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d6414:	2200      	movs	r2, #0
   d6416:	210f      	movs	r1, #15
   d6418:	4620      	mov	r0, r4
   d641a:	f7ff fcba 	bl	d5d92 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d641e:	4620      	mov	r0, r4
   d6420:	f7ff fe10 	bl	d6044 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d6424:	2100      	movs	r1, #0
   d6426:	4620      	mov	r0, r4
   d6428:	f7ff ff88 	bl	d633c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d642c:	2108      	movs	r1, #8
   d642e:	4620      	mov	r0, r4
   d6430:	f7ff ff9c 	bl	d636c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d6434:	ed9f 0a12 	vldr	s0, [pc, #72]	; d6480 <_ZN7RH_RF954initEv+0xf8>
   d6438:	4620      	mov	r0, r4
   d643a:	f7ff fdc1 	bl	d5fc0 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d643e:	2200      	movs	r2, #0
   d6440:	210d      	movs	r1, #13
   d6442:	4620      	mov	r0, r4
   d6444:	f7ff ff36 	bl	d62b4 <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d6448:	e7a5      	b.n	d6396 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d644a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d644e:	e7ad      	b.n	d63ac <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d6450:	2a01      	cmp	r2, #1
   d6452:	f04f 0300 	mov.w	r3, #0
   d6456:	d104      	bne.n	d6462 <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d6458:	9300      	str	r3, [sp, #0]
   d645a:	490a      	ldr	r1, [pc, #40]	; (d6484 <_ZN7RH_RF954initEv+0xfc>)
   d645c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6460:	e7d0      	b.n	d6404 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d6462:	2a02      	cmp	r2, #2
   d6464:	d196      	bne.n	d6394 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d6466:	9300      	str	r3, [sp, #0]
   d6468:	4907      	ldr	r1, [pc, #28]	; (d6488 <_ZN7RH_RF954initEv+0x100>)
   d646a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d646e:	2201      	movs	r2, #1
   d6470:	e7c8      	b.n	d6404 <_ZN7RH_RF954initEv+0x7c>
   d6472:	bf00      	nop
   d6474:	2003e539 	.word	0x2003e539
   d6478:	2003e53c 	.word	0x2003e53c
   d647c:	000d6191 	.word	0x000d6191
   d6480:	43d90000 	.word	0x43d90000
   d6484:	000d61a1 	.word	0x000d61a1
   d6488:	000d61b1 	.word	0x000d61b1

000d648c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d648c:	b508      	push	{r3, lr}
   d648e:	4b02      	ldr	r3, [pc, #8]	; (d6498 <os_mutex_recursive_create+0xc>)
   d6490:	681b      	ldr	r3, [r3, #0]
   d6492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6494:	9301      	str	r3, [sp, #4]
   d6496:	bd08      	pop	{r3, pc}
   d6498:	00030248 	.word	0x00030248

000d649c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <os_mutex_recursive_destroy+0xc>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d64a4:	9301      	str	r3, [sp, #4]
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	00030248 	.word	0x00030248

000d64ac <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <os_mutex_recursive_lock+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	00030248 	.word	0x00030248

000d64bc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <os_mutex_recursive_unlock+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	00030248 	.word	0x00030248

000d64cc <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <HAL_Feature_Set+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	00030234 	.word	0x00030234

000d64dc <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	00030234 	.word	0x00030234

000d64ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <HAL_RNG_GetRandomNumber+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	685b      	ldr	r3, [r3, #4]
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	00030218 	.word	0x00030218

000d64fc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <HAL_Delay_Microseconds+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	68db      	ldr	r3, [r3, #12]
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	00030218 	.word	0x00030218

000d650c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	695b      	ldr	r3, [r3, #20]
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	00030218 	.word	0x00030218

000d651c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <hal_rtc_time_is_valid+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	00030218 	.word	0x00030218

000d652c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <hal_timer_millis+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	00030218 	.word	0x00030218

000d653c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <hal_rtc_get_time+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	00030218 	.word	0x00030218

000d654c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <hal_rtc_set_time+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	00030218 	.word	0x00030218

000d655c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <HAL_Pin_Mode+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	689b      	ldr	r3, [r3, #8]
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	0003022c 	.word	0x0003022c

000d656c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <HAL_Get_Pin_Mode+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	68db      	ldr	r3, [r3, #12]
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	0003022c 	.word	0x0003022c

000d657c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <HAL_GPIO_Write+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	691b      	ldr	r3, [r3, #16]
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	0003022c 	.word	0x0003022c

000d658c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <HAL_Interrupts_Attach+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	699b      	ldr	r3, [r3, #24]
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	0003022c 	.word	0x0003022c

000d659c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <HAL_Interrupts_Detach+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	69db      	ldr	r3, [r3, #28]
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	0003022c 	.word	0x0003022c

000d65ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <hal_i2c_write+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	6a1b      	ldr	r3, [r3, #32]
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	00030228 	.word	0x00030228

000d65bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <hal_i2c_available+0xc>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	bd08      	pop	{r3, pc}
   d65c8:	00030228 	.word	0x00030228

000d65cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d65cc:	b508      	push	{r3, lr}
   d65ce:	4b02      	ldr	r3, [pc, #8]	; (d65d8 <hal_i2c_read+0xc>)
   d65d0:	681b      	ldr	r3, [r3, #0]
   d65d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65d4:	9301      	str	r3, [sp, #4]
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	00030228 	.word	0x00030228

000d65dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d65dc:	b508      	push	{r3, lr}
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <hal_i2c_peek+0xc>)
   d65e0:	681b      	ldr	r3, [r3, #0]
   d65e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	bd08      	pop	{r3, pc}
   d65e8:	00030228 	.word	0x00030228

000d65ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d65ec:	b508      	push	{r3, lr}
   d65ee:	4b02      	ldr	r3, [pc, #8]	; (d65f8 <hal_i2c_flush+0xc>)
   d65f0:	681b      	ldr	r3, [r3, #0]
   d65f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65f4:	9301      	str	r3, [sp, #4]
   d65f6:	bd08      	pop	{r3, pc}
   d65f8:	00030228 	.word	0x00030228

000d65fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d65fc:	b508      	push	{r3, lr}
   d65fe:	4b02      	ldr	r3, [pc, #8]	; (d6608 <hal_i2c_is_enabled+0xc>)
   d6600:	681b      	ldr	r3, [r3, #0]
   d6602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6604:	9301      	str	r3, [sp, #4]
   d6606:	bd08      	pop	{r3, pc}
   d6608:	00030228 	.word	0x00030228

000d660c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b02      	ldr	r3, [pc, #8]	; (d6618 <hal_i2c_init+0xc>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6614:	9301      	str	r3, [sp, #4]
   d6616:	bd08      	pop	{r3, pc}
   d6618:	00030228 	.word	0x00030228

000d661c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b02      	ldr	r3, [pc, #8]	; (d6628 <inet_inet_ntop+0xc>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	695b      	ldr	r3, [r3, #20]
   d6624:	9301      	str	r3, [sp, #4]
   d6626:	bd08      	pop	{r3, pc}
   d6628:	00030264 	.word	0x00030264

000d662c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d662c:	b508      	push	{r3, lr}
   d662e:	4b02      	ldr	r3, [pc, #8]	; (d6638 <netdb_freeaddrinfo+0xc>)
   d6630:	681b      	ldr	r3, [r3, #0]
   d6632:	689b      	ldr	r3, [r3, #8]
   d6634:	9301      	str	r3, [sp, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	00030268 	.word	0x00030268

000d663c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d663c:	b508      	push	{r3, lr}
   d663e:	4b02      	ldr	r3, [pc, #8]	; (d6648 <netdb_getaddrinfo+0xc>)
   d6640:	681b      	ldr	r3, [r3, #0]
   d6642:	68db      	ldr	r3, [r3, #12]
   d6644:	9301      	str	r3, [sp, #4]
   d6646:	bd08      	pop	{r3, pc}
   d6648:	00030268 	.word	0x00030268

000d664c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <hal_spi_begin+0xc>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	681b      	ldr	r3, [r3, #0]
   d6654:	9301      	str	r3, [sp, #4]
   d6656:	bd08      	pop	{r3, pc}
   d6658:	00030230 	.word	0x00030230

000d665c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d665c:	b508      	push	{r3, lr}
   d665e:	4b02      	ldr	r3, [pc, #8]	; (d6668 <hal_spi_end+0xc>)
   d6660:	681b      	ldr	r3, [r3, #0]
   d6662:	685b      	ldr	r3, [r3, #4]
   d6664:	9301      	str	r3, [sp, #4]
   d6666:	bd08      	pop	{r3, pc}
   d6668:	00030230 	.word	0x00030230

000d666c <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b02      	ldr	r3, [pc, #8]	; (d6678 <hal_spi_transfer+0xc>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	695b      	ldr	r3, [r3, #20]
   d6674:	9301      	str	r3, [sp, #4]
   d6676:	bd08      	pop	{r3, pc}
   d6678:	00030230 	.word	0x00030230

000d667c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d667c:	b508      	push	{r3, lr}
   d667e:	4b02      	ldr	r3, [pc, #8]	; (d6688 <hal_spi_init+0xc>)
   d6680:	681b      	ldr	r3, [r3, #0]
   d6682:	69db      	ldr	r3, [r3, #28]
   d6684:	9301      	str	r3, [sp, #4]
   d6686:	bd08      	pop	{r3, pc}
   d6688:	00030230 	.word	0x00030230

000d668c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d668c:	b508      	push	{r3, lr}
   d668e:	4b02      	ldr	r3, [pc, #8]	; (d6698 <hal_spi_is_enabled+0xc>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	6a1b      	ldr	r3, [r3, #32]
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	00030230 	.word	0x00030230

000d669c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d669c:	b508      	push	{r3, lr}
   d669e:	4b02      	ldr	r3, [pc, #8]	; (d66a8 <hal_spi_info+0xc>)
   d66a0:	681b      	ldr	r3, [r3, #0]
   d66a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	bd08      	pop	{r3, pc}
   d66a8:	00030230 	.word	0x00030230

000d66ac <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d66ac:	b508      	push	{r3, lr}
   d66ae:	4b02      	ldr	r3, [pc, #8]	; (d66b8 <hal_spi_set_settings+0xc>)
   d66b0:	681b      	ldr	r3, [r3, #0]
   d66b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d66b4:	9301      	str	r3, [sp, #4]
   d66b6:	bd08      	pop	{r3, pc}
   d66b8:	00030230 	.word	0x00030230

000d66bc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d66bc:	b508      	push	{r3, lr}
   d66be:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <hal_spi_acquire+0xc>)
   d66c0:	681b      	ldr	r3, [r3, #0]
   d66c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d66c4:	9301      	str	r3, [sp, #4]
   d66c6:	bd08      	pop	{r3, pc}
   d66c8:	00030230 	.word	0x00030230

000d66cc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d66cc:	b508      	push	{r3, lr}
   d66ce:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <hal_spi_release+0xc>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	00030230 	.word	0x00030230

000d66dc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d66dc:	b508      	push	{r3, lr}
   d66de:	4b02      	ldr	r3, [pc, #8]	; (d66e8 <hal_usart_init+0xc>)
   d66e0:	681b      	ldr	r3, [r3, #0]
   d66e2:	681b      	ldr	r3, [r3, #0]
   d66e4:	9301      	str	r3, [sp, #4]
   d66e6:	bd08      	pop	{r3, pc}
   d66e8:	0003023c 	.word	0x0003023c

000d66ec <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <hal_usart_end+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	689b      	ldr	r3, [r3, #8]
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	0003023c 	.word	0x0003023c

000d66fc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <hal_usart_write+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	68db      	ldr	r3, [r3, #12]
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	0003023c 	.word	0x0003023c

000d670c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <hal_usart_available+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	691b      	ldr	r3, [r3, #16]
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	0003023c 	.word	0x0003023c

000d671c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <hal_usart_read+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	695b      	ldr	r3, [r3, #20]
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	0003023c 	.word	0x0003023c

000d672c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <hal_usart_peek+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	699b      	ldr	r3, [r3, #24]
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	0003023c 	.word	0x0003023c

000d673c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <hal_usart_flush+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	69db      	ldr	r3, [r3, #28]
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	0003023c 	.word	0x0003023c

000d674c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b02      	ldr	r3, [pc, #8]	; (d6758 <hal_usart_is_enabled+0xc>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	6a1b      	ldr	r3, [r3, #32]
   d6754:	9301      	str	r3, [sp, #4]
   d6756:	bd08      	pop	{r3, pc}
   d6758:	0003023c 	.word	0x0003023c

000d675c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d675c:	b508      	push	{r3, lr}
   d675e:	4b02      	ldr	r3, [pc, #8]	; (d6768 <hal_usart_available_data_for_write+0xc>)
   d6760:	681b      	ldr	r3, [r3, #0]
   d6762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6764:	9301      	str	r3, [sp, #4]
   d6766:	bd08      	pop	{r3, pc}
   d6768:	0003023c 	.word	0x0003023c

000d676c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d676c:	b508      	push	{r3, lr}
   d676e:	4b02      	ldr	r3, [pc, #8]	; (d6778 <hal_usart_begin_config+0xc>)
   d6770:	681b      	ldr	r3, [r3, #0]
   d6772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6774:	9301      	str	r3, [sp, #4]
   d6776:	bd08      	pop	{r3, pc}
   d6778:	0003023c 	.word	0x0003023c

000d677c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d677c:	b508      	push	{r3, lr}
   d677e:	4b02      	ldr	r3, [pc, #8]	; (d6788 <HAL_USB_USART_Init+0xc>)
   d6780:	681b      	ldr	r3, [r3, #0]
   d6782:	681b      	ldr	r3, [r3, #0]
   d6784:	9301      	str	r3, [sp, #4]
   d6786:	bd08      	pop	{r3, pc}
   d6788:	0003024c 	.word	0x0003024c

000d678c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d678c:	b508      	push	{r3, lr}
   d678e:	4b02      	ldr	r3, [pc, #8]	; (d6798 <HAL_USB_USART_Begin+0xc>)
   d6790:	681b      	ldr	r3, [r3, #0]
   d6792:	685b      	ldr	r3, [r3, #4]
   d6794:	9301      	str	r3, [sp, #4]
   d6796:	bd08      	pop	{r3, pc}
   d6798:	0003024c 	.word	0x0003024c

000d679c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d679c:	b508      	push	{r3, lr}
   d679e:	4b02      	ldr	r3, [pc, #8]	; (d67a8 <HAL_USB_USART_End+0xc>)
   d67a0:	681b      	ldr	r3, [r3, #0]
   d67a2:	689b      	ldr	r3, [r3, #8]
   d67a4:	9301      	str	r3, [sp, #4]
   d67a6:	bd08      	pop	{r3, pc}
   d67a8:	0003024c 	.word	0x0003024c

000d67ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d67ac:	b508      	push	{r3, lr}
   d67ae:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <HAL_USB_USART_Available_Data+0xc>)
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	691b      	ldr	r3, [r3, #16]
   d67b4:	9301      	str	r3, [sp, #4]
   d67b6:	bd08      	pop	{r3, pc}
   d67b8:	0003024c 	.word	0x0003024c

000d67bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d67bc:	b508      	push	{r3, lr}
   d67be:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d67c0:	681b      	ldr	r3, [r3, #0]
   d67c2:	695b      	ldr	r3, [r3, #20]
   d67c4:	9301      	str	r3, [sp, #4]
   d67c6:	bd08      	pop	{r3, pc}
   d67c8:	0003024c 	.word	0x0003024c

000d67cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d67cc:	b508      	push	{r3, lr}
   d67ce:	4b02      	ldr	r3, [pc, #8]	; (d67d8 <HAL_USB_USART_Receive_Data+0xc>)
   d67d0:	681b      	ldr	r3, [r3, #0]
   d67d2:	699b      	ldr	r3, [r3, #24]
   d67d4:	9301      	str	r3, [sp, #4]
   d67d6:	bd08      	pop	{r3, pc}
   d67d8:	0003024c 	.word	0x0003024c

000d67dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <HAL_USB_USART_Send_Data+0xc>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	69db      	ldr	r3, [r3, #28]
   d67e4:	9301      	str	r3, [sp, #4]
   d67e6:	bd08      	pop	{r3, pc}
   d67e8:	0003024c 	.word	0x0003024c

000d67ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <HAL_USB_USART_Flush_Data+0xc>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	6a1b      	ldr	r3, [r3, #32]
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	bd08      	pop	{r3, pc}
   d67f8:	0003024c 	.word	0x0003024c

000d67fc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d67fc:	b508      	push	{r3, lr}
   d67fe:	4b02      	ldr	r3, [pc, #8]	; (d6808 <HAL_USB_USART_Is_Connected+0xc>)
   d6800:	681b      	ldr	r3, [r3, #0]
   d6802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6804:	9301      	str	r3, [sp, #4]
   d6806:	bd08      	pop	{r3, pc}
   d6808:	0003024c 	.word	0x0003024c

000d680c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <panic_+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	00030260 	.word	0x00030260

000d681c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <log_message_v+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	00030260 	.word	0x00030260

000d682c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <log_level_name+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	00030260 	.word	0x00030260

000d683c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <log_set_callbacks+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	00030260 	.word	0x00030260

000d684c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b03      	ldr	r3, [pc, #12]	; (d685c <diag_get_source+0x10>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6856:	9301      	str	r3, [sp, #4]
   d6858:	bd08      	pop	{r3, pc}
   d685a:	0000      	.short	0x0000
   d685c:	00030260 	.word	0x00030260

000d6860 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6860:	b508      	push	{r3, lr}
   d6862:	4b02      	ldr	r3, [pc, #8]	; (d686c <system_mode+0xc>)
   d6864:	681b      	ldr	r3, [r3, #0]
   d6866:	681b      	ldr	r3, [r3, #0]
   d6868:	9301      	str	r3, [sp, #4]
   d686a:	bd08      	pop	{r3, pc}
   d686c:	00030220 	.word	0x00030220

000d6870 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6870:	b508      	push	{r3, lr}
   d6872:	4b02      	ldr	r3, [pc, #8]	; (d687c <set_system_mode+0xc>)
   d6874:	681b      	ldr	r3, [r3, #0]
   d6876:	685b      	ldr	r3, [r3, #4]
   d6878:	9301      	str	r3, [sp, #4]
   d687a:	bd08      	pop	{r3, pc}
   d687c:	00030220 	.word	0x00030220

000d6880 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6880:	b508      	push	{r3, lr}
   d6882:	4b02      	ldr	r3, [pc, #8]	; (d688c <system_delay_ms+0xc>)
   d6884:	681b      	ldr	r3, [r3, #0]
   d6886:	695b      	ldr	r3, [r3, #20]
   d6888:	9301      	str	r3, [sp, #4]
   d688a:	bd08      	pop	{r3, pc}
   d688c:	00030220 	.word	0x00030220

000d6890 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6890:	b508      	push	{r3, lr}
   d6892:	4b02      	ldr	r3, [pc, #8]	; (d689c <system_thread_set_state+0xc>)
   d6894:	681b      	ldr	r3, [r3, #0]
   d6896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6898:	9301      	str	r3, [sp, #4]
   d689a:	bd08      	pop	{r3, pc}
   d689c:	00030220 	.word	0x00030220

000d68a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d68a0:	b508      	push	{r3, lr}
   d68a2:	4b02      	ldr	r3, [pc, #8]	; (d68ac <application_thread_current+0xc>)
   d68a4:	681b      	ldr	r3, [r3, #0]
   d68a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d68a8:	9301      	str	r3, [sp, #4]
   d68aa:	bd08      	pop	{r3, pc}
   d68ac:	00030220 	.word	0x00030220

000d68b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <application_thread_invoke+0xc>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d68b8:	9301      	str	r3, [sp, #4]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	00030220 	.word	0x00030220

000d68c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d68c0:	b508      	push	{r3, lr}
   d68c2:	4b02      	ldr	r3, [pc, #8]	; (d68cc <system_thread_get_state+0xc>)
   d68c4:	681b      	ldr	r3, [r3, #0]
   d68c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	bd08      	pop	{r3, pc}
   d68cc:	00030220 	.word	0x00030220

000d68d0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <system_notify_time_changed+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	00030220 	.word	0x00030220

000d68e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b03      	ldr	r3, [pc, #12]	; (d68f0 <system_ctrl_set_app_request_handler+0x10>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d68ea:	9301      	str	r3, [sp, #4]
   d68ec:	bd08      	pop	{r3, pc}
   d68ee:	0000      	.short	0x0000
   d68f0:	00030220 	.word	0x00030220

000d68f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b03      	ldr	r3, [pc, #12]	; (d6904 <system_ctrl_set_result+0x10>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d68fe:	9301      	str	r3, [sp, #4]
   d6900:	bd08      	pop	{r3, pc}
   d6902:	0000      	.short	0x0000
   d6904:	00030220 	.word	0x00030220

000d6908 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6908:	b508      	push	{r3, lr}
   d690a:	4b02      	ldr	r3, [pc, #8]	; (d6914 <spark_process+0xc>)
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	689b      	ldr	r3, [r3, #8]
   d6910:	9301      	str	r3, [sp, #4]
   d6912:	bd08      	pop	{r3, pc}
   d6914:	00030244 	.word	0x00030244

000d6918 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6918:	b508      	push	{r3, lr}
   d691a:	4b02      	ldr	r3, [pc, #8]	; (d6924 <spark_cloud_flag_connected+0xc>)
   d691c:	681b      	ldr	r3, [r3, #0]
   d691e:	695b      	ldr	r3, [r3, #20]
   d6920:	9301      	str	r3, [sp, #4]
   d6922:	bd08      	pop	{r3, pc}
   d6924:	00030244 	.word	0x00030244

000d6928 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6928:	b508      	push	{r3, lr}
   d692a:	4b02      	ldr	r3, [pc, #8]	; (d6934 <spark_send_event+0xc>)
   d692c:	681b      	ldr	r3, [r3, #0]
   d692e:	6a1b      	ldr	r3, [r3, #32]
   d6930:	9301      	str	r3, [sp, #4]
   d6932:	bd08      	pop	{r3, pc}
   d6934:	00030244 	.word	0x00030244

000d6938 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6938:	b508      	push	{r3, lr}
   d693a:	4b02      	ldr	r3, [pc, #8]	; (d6944 <spark_sync_time_pending+0xc>)
   d693c:	681b      	ldr	r3, [r3, #0]
   d693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6940:	9301      	str	r3, [sp, #4]
   d6942:	bd08      	pop	{r3, pc}
   d6944:	00030244 	.word	0x00030244

000d6948 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6948:	b508      	push	{r3, lr}
   d694a:	4b02      	ldr	r3, [pc, #8]	; (d6954 <spark_set_random_seed_from_cloud_handler+0xc>)
   d694c:	681b      	ldr	r3, [r3, #0]
   d694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6950:	9301      	str	r3, [sp, #4]
   d6952:	bd08      	pop	{r3, pc}
   d6954:	00030244 	.word	0x00030244

000d6958 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6958:	b508      	push	{r3, lr}
   d695a:	4b02      	ldr	r3, [pc, #8]	; (d6964 <network_connect+0xc>)
   d695c:	681b      	ldr	r3, [r3, #0]
   d695e:	685b      	ldr	r3, [r3, #4]
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	bd08      	pop	{r3, pc}
   d6964:	00030240 	.word	0x00030240

000d6968 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6968:	b508      	push	{r3, lr}
   d696a:	4b02      	ldr	r3, [pc, #8]	; (d6974 <network_connecting+0xc>)
   d696c:	681b      	ldr	r3, [r3, #0]
   d696e:	689b      	ldr	r3, [r3, #8]
   d6970:	9301      	str	r3, [sp, #4]
   d6972:	bd08      	pop	{r3, pc}
   d6974:	00030240 	.word	0x00030240

000d6978 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6978:	b508      	push	{r3, lr}
   d697a:	4b02      	ldr	r3, [pc, #8]	; (d6984 <network_disconnect+0xc>)
   d697c:	681b      	ldr	r3, [r3, #0]
   d697e:	68db      	ldr	r3, [r3, #12]
   d6980:	9301      	str	r3, [sp, #4]
   d6982:	bd08      	pop	{r3, pc}
   d6984:	00030240 	.word	0x00030240

000d6988 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6988:	b508      	push	{r3, lr}
   d698a:	4b02      	ldr	r3, [pc, #8]	; (d6994 <network_ready+0xc>)
   d698c:	681b      	ldr	r3, [r3, #0]
   d698e:	691b      	ldr	r3, [r3, #16]
   d6990:	9301      	str	r3, [sp, #4]
   d6992:	bd08      	pop	{r3, pc}
   d6994:	00030240 	.word	0x00030240

000d6998 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6998:	b508      	push	{r3, lr}
   d699a:	4b02      	ldr	r3, [pc, #8]	; (d69a4 <network_on+0xc>)
   d699c:	681b      	ldr	r3, [r3, #0]
   d699e:	695b      	ldr	r3, [r3, #20]
   d69a0:	9301      	str	r3, [sp, #4]
   d69a2:	bd08      	pop	{r3, pc}
   d69a4:	00030240 	.word	0x00030240

000d69a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d69a8:	b508      	push	{r3, lr}
   d69aa:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <network_off+0xc>)
   d69ac:	681b      	ldr	r3, [r3, #0]
   d69ae:	699b      	ldr	r3, [r3, #24]
   d69b0:	9301      	str	r3, [sp, #4]
   d69b2:	bd08      	pop	{r3, pc}
   d69b4:	00030240 	.word	0x00030240

000d69b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d69b8:	b508      	push	{r3, lr}
   d69ba:	4b02      	ldr	r3, [pc, #8]	; (d69c4 <network_listen+0xc>)
   d69bc:	681b      	ldr	r3, [r3, #0]
   d69be:	69db      	ldr	r3, [r3, #28]
   d69c0:	9301      	str	r3, [sp, #4]
   d69c2:	bd08      	pop	{r3, pc}
   d69c4:	00030240 	.word	0x00030240

000d69c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d69c8:	b508      	push	{r3, lr}
   d69ca:	4b02      	ldr	r3, [pc, #8]	; (d69d4 <network_listening+0xc>)
   d69cc:	681b      	ldr	r3, [r3, #0]
   d69ce:	6a1b      	ldr	r3, [r3, #32]
   d69d0:	9301      	str	r3, [sp, #4]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	00030240 	.word	0x00030240

000d69d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d69d8:	b508      	push	{r3, lr}
   d69da:	4b02      	ldr	r3, [pc, #8]	; (d69e4 <network_set_listen_timeout+0xc>)
   d69dc:	681b      	ldr	r3, [r3, #0]
   d69de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69e0:	9301      	str	r3, [sp, #4]
   d69e2:	bd08      	pop	{r3, pc}
   d69e4:	00030240 	.word	0x00030240

000d69e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d69e8:	b508      	push	{r3, lr}
   d69ea:	4b02      	ldr	r3, [pc, #8]	; (d69f4 <network_get_listen_timeout+0xc>)
   d69ec:	681b      	ldr	r3, [r3, #0]
   d69ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d69f0:	9301      	str	r3, [sp, #4]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	00030240 	.word	0x00030240

000d69f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d69f8:	b508      	push	{r3, lr}
   d69fa:	4b02      	ldr	r3, [pc, #8]	; (d6a04 <network_is_on+0xc>)
   d69fc:	681b      	ldr	r3, [r3, #0]
   d69fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a00:	9301      	str	r3, [sp, #4]
   d6a02:	bd08      	pop	{r3, pc}
   d6a04:	00030240 	.word	0x00030240

000d6a08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6a08:	b508      	push	{r3, lr}
   d6a0a:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <network_is_off+0xc>)
   d6a0c:	681b      	ldr	r3, [r3, #0]
   d6a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a10:	9301      	str	r3, [sp, #4]
   d6a12:	bd08      	pop	{r3, pc}
   d6a14:	00030240 	.word	0x00030240

000d6a18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6a18:	b508      	push	{r3, lr}
   d6a1a:	4b02      	ldr	r3, [pc, #8]	; (d6a24 <malloc+0xc>)
   d6a1c:	681b      	ldr	r3, [r3, #0]
   d6a1e:	681b      	ldr	r3, [r3, #0]
   d6a20:	9301      	str	r3, [sp, #4]
   d6a22:	bd08      	pop	{r3, pc}
   d6a24:	0003021c 	.word	0x0003021c

000d6a28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6a28:	b508      	push	{r3, lr}
   d6a2a:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <free+0xc>)
   d6a2c:	681b      	ldr	r3, [r3, #0]
   d6a2e:	685b      	ldr	r3, [r3, #4]
   d6a30:	9301      	str	r3, [sp, #4]
   d6a32:	bd08      	pop	{r3, pc}
   d6a34:	0003021c 	.word	0x0003021c

000d6a38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6a38:	b508      	push	{r3, lr}
   d6a3a:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <realloc+0xc>)
   d6a3c:	681b      	ldr	r3, [r3, #0]
   d6a3e:	689b      	ldr	r3, [r3, #8]
   d6a40:	9301      	str	r3, [sp, #4]
   d6a42:	bd08      	pop	{r3, pc}
   d6a44:	0003021c 	.word	0x0003021c

000d6a48 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6a48:	b508      	push	{r3, lr}
   d6a4a:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <siprintf+0xc>)
   d6a4c:	681b      	ldr	r3, [r3, #0]
   d6a4e:	691b      	ldr	r3, [r3, #16]
   d6a50:	9301      	str	r3, [sp, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	0003021c 	.word	0x0003021c

000d6a58 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d6a58:	b508      	push	{r3, lr}
   d6a5a:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <sscanf+0xc>)
   d6a5c:	681b      	ldr	r3, [r3, #0]
   d6a5e:	695b      	ldr	r3, [r3, #20]
   d6a60:	9301      	str	r3, [sp, #4]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	0003021c 	.word	0x0003021c

000d6a68 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <snprintf+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	69db      	ldr	r3, [r3, #28]
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	0003021c 	.word	0x0003021c

000d6a78 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <vsnprintf+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	0003021c 	.word	0x0003021c

000d6a88 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <abort+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	0003021c 	.word	0x0003021c

000d6a98 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <_malloc_r+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	0003021c 	.word	0x0003021c

000d6aa8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <newlib_impure_ptr_callback+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	0003021c 	.word	0x0003021c

000d6ab8 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <localtime_r+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	0003021c 	.word	0x0003021c

000d6ac8 <mktime>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <mktime+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003021c 	.word	0x0003021c

000d6ad8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6ad8:	2100      	movs	r1, #0
   d6ada:	f7ff bed1 	b.w	d6880 <system_delay_ms>

000d6ade <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6ade:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ae0:	6883      	ldr	r3, [r0, #8]
   d6ae2:	4604      	mov	r4, r0
   d6ae4:	b90b      	cbnz	r3, d6aea <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6ae6:	f002 fb5d 	bl	d91a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6aea:	68c3      	ldr	r3, [r0, #12]
   d6aec:	4798      	blx	r3
      if (_M_manager)
   d6aee:	68a3      	ldr	r3, [r4, #8]
   d6af0:	b11b      	cbz	r3, d6afa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6af2:	2203      	movs	r2, #3
   d6af4:	4621      	mov	r1, r4
   d6af6:	4620      	mov	r0, r4
   d6af8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6afa:	4620      	mov	r0, r4
   d6afc:	2110      	movs	r1, #16
}
   d6afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6b02:	f002 bb49 	b.w	d9198 <_ZdlPvj>

000d6b06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6b06:	680b      	ldr	r3, [r1, #0]
   d6b08:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6b0a:	b113      	cbz	r3, d6b12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6b0c:	685a      	ldr	r2, [r3, #4]
   d6b0e:	3201      	adds	r2, #1
   d6b10:	605a      	str	r2, [r3, #4]
      }
   d6b12:	4770      	bx	lr

000d6b14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b14:	4802      	ldr	r0, [pc, #8]	; (d6b20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6b16:	2300      	movs	r3, #0
   d6b18:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6b1a:	f7ff bcb7 	b.w	d648c <os_mutex_recursive_create>
   d6b1e:	bf00      	nop
   d6b20:	2003e548 	.word	0x2003e548

000d6b24 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6b24:	2200      	movs	r2, #0
   d6b26:	6840      	ldr	r0, [r0, #4]
   d6b28:	4611      	mov	r1, r2
   d6b2a:	f7ff bf2d 	b.w	d6988 <network_ready>

000d6b2e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6b2e:	2200      	movs	r2, #0
   d6b30:	6840      	ldr	r0, [r0, #4]
   d6b32:	4611      	mov	r1, r2
   d6b34:	f7ff bf48 	b.w	d69c8 <network_listening>

000d6b38 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6b38:	2200      	movs	r2, #0
   d6b3a:	6840      	ldr	r0, [r0, #4]
   d6b3c:	4611      	mov	r1, r2
   d6b3e:	f7ff bf53 	b.w	d69e8 <network_get_listen_timeout>

000d6b42 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6b42:	6840      	ldr	r0, [r0, #4]
   d6b44:	2200      	movs	r2, #0
   d6b46:	f7ff bf47 	b.w	d69d8 <network_set_listen_timeout>

000d6b4a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b4a:	6840      	ldr	r0, [r0, #4]
   d6b4c:	2200      	movs	r2, #0
   d6b4e:	f081 0101 	eor.w	r1, r1, #1
   d6b52:	f7ff bf31 	b.w	d69b8 <network_listen>

000d6b56 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6b56:	2300      	movs	r3, #0
   d6b58:	6840      	ldr	r0, [r0, #4]
   d6b5a:	461a      	mov	r2, r3
   d6b5c:	4619      	mov	r1, r3
   d6b5e:	f7ff bf23 	b.w	d69a8 <network_off>

000d6b62 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6b62:	2300      	movs	r3, #0
   d6b64:	6840      	ldr	r0, [r0, #4]
   d6b66:	461a      	mov	r2, r3
   d6b68:	4619      	mov	r1, r3
   d6b6a:	f7ff bf15 	b.w	d6998 <network_on>

000d6b6e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6b6e:	2200      	movs	r2, #0
   d6b70:	6840      	ldr	r0, [r0, #4]
   d6b72:	4611      	mov	r1, r2
   d6b74:	f7ff bef8 	b.w	d6968 <network_connecting>

000d6b78 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b78:	6840      	ldr	r0, [r0, #4]
   d6b7a:	2200      	movs	r2, #0
   d6b7c:	2102      	movs	r1, #2
   d6b7e:	f7ff befb 	b.w	d6978 <network_disconnect>

000d6b82 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6b82:	2300      	movs	r3, #0
   d6b84:	6840      	ldr	r0, [r0, #4]
   d6b86:	461a      	mov	r2, r3
   d6b88:	f7ff bee6 	b.w	d6958 <network_connect>

000d6b8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6b8c:	4b08      	ldr	r3, [pc, #32]	; (d6bb0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6b8e:	b510      	push	{r4, lr}
   d6b90:	2428      	movs	r4, #40	; 0x28
   d6b92:	4622      	mov	r2, r4
   d6b94:	4618      	mov	r0, r3
   d6b96:	2100      	movs	r1, #0
   d6b98:	f002 ff4a 	bl	d9a30 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6b9c:	4b05      	ldr	r3, [pc, #20]	; (d6bb4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d6b9e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6ba4:	6042      	str	r2, [r0, #4]
   d6ba6:	2204      	movs	r2, #4
   d6ba8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6baa:	4a03      	ldr	r2, [pc, #12]	; (d6bb8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6bac:	601a      	str	r2, [r3, #0]
   d6bae:	bd10      	pop	{r4, pc}
   d6bb0:	2003e554 	.word	0x2003e554
   d6bb4:	2003e54c 	.word	0x2003e54c
   d6bb8:	000da348 	.word	0x000da348

000d6bbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6bbc:	4770      	bx	lr

000d6bbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6bbe:	2000      	movs	r0, #0
   d6bc0:	4770      	bx	lr

000d6bc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6bc2:	b510      	push	{r4, lr}
   d6bc4:	2110      	movs	r1, #16
   d6bc6:	4604      	mov	r4, r0
   d6bc8:	f002 fae6 	bl	d9198 <_ZdlPvj>
   d6bcc:	4620      	mov	r0, r4
   d6bce:	bd10      	pop	{r4, pc}

000d6bd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6bd0:	b508      	push	{r3, lr}
      { delete this; }
   d6bd2:	f7ff fff6 	bl	d6bc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6bd6:	bd08      	pop	{r3, pc}

000d6bd8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6bd8:	b510      	push	{r4, lr}
      if (_M_manager)
   d6bda:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6bdc:	4604      	mov	r4, r0
      if (_M_manager)
   d6bde:	b113      	cbz	r3, d6be6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6be0:	2203      	movs	r2, #3
   d6be2:	4601      	mov	r1, r0
   d6be4:	4798      	blx	r3
    }
   d6be6:	4620      	mov	r0, r4
   d6be8:	bd10      	pop	{r4, pc}

000d6bea <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6bea:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6bec:	2200      	movs	r2, #0
   d6bee:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6bf2:	6002      	str	r2, [r0, #0]
   d6bf4:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6bf6:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bf8:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6bfa:	680c      	ldr	r4, [r1, #0]
   d6bfc:	8085      	strh	r5, [r0, #4]
   d6bfe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c00:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6c02:	bd30      	pop	{r4, r5, pc}

000d6c04 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6c04:	b510      	push	{r4, lr}
   d6c06:	4604      	mov	r4, r0
    free((void*)msg_);
   d6c08:	6800      	ldr	r0, [r0, #0]
   d6c0a:	f7ff ff0d 	bl	d6a28 <free>
}
   d6c0e:	4620      	mov	r0, r4
   d6c10:	bd10      	pop	{r4, pc}

000d6c12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6c12:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6c14:	68c4      	ldr	r4, [r0, #12]
   d6c16:	b1f4      	cbz	r4, d6c56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6c18:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6c1a:	2b02      	cmp	r3, #2
   d6c1c:	d103      	bne.n	d6c26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6c1e:	f104 000c 	add.w	r0, r4, #12
   d6c22:	f7ff ffef 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6c26:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6c28:	b135      	cbz	r5, d6c38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6c2a:	4628      	mov	r0, r5
   d6c2c:	f7ff ffd4 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
   d6c30:	2110      	movs	r1, #16
   d6c32:	4628      	mov	r0, r5
   d6c34:	f002 fab0 	bl	d9198 <_ZdlPvj>
   d6c38:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6c3a:	b135      	cbz	r5, d6c4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6c3c:	4628      	mov	r0, r5
   d6c3e:	f7ff ffcb 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
   d6c42:	2110      	movs	r1, #16
   d6c44:	4628      	mov	r0, r5
   d6c46:	f002 faa7 	bl	d9198 <_ZdlPvj>
   d6c4a:	4620      	mov	r0, r4
   d6c4c:	2114      	movs	r1, #20
   d6c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6c52:	f002 baa1 	b.w	d9198 <_ZdlPvj>
   d6c56:	bd38      	pop	{r3, r4, r5, pc}

000d6c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c5a:	460e      	mov	r6, r1
   d6c5c:	4604      	mov	r4, r0
   d6c5e:	f856 3b04 	ldr.w	r3, [r6], #4
   d6c62:	9300      	str	r3, [sp, #0]
   d6c64:	460d      	mov	r5, r1
   d6c66:	a801      	add	r0, sp, #4
   d6c68:	4631      	mov	r1, r6
   d6c6a:	f7ff ff4c 	bl	d6b06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c6e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c70:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6c72:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c74:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6c76:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6c78:	2300      	movs	r3, #0
   d6c7a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c7c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6c7e:	f7fd fadb 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c82:	4630      	mov	r0, r6
   d6c84:	f7fd fad8 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6c88:	4628      	mov	r0, r5
   d6c8a:	2108      	movs	r1, #8
   d6c8c:	f002 fa84 	bl	d9198 <_ZdlPvj>
        return p;
    }
   d6c90:	4620      	mov	r0, r4
   d6c92:	b002      	add	sp, #8
   d6c94:	bd70      	pop	{r4, r5, r6, pc}

000d6c96 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6c96:	b513      	push	{r0, r1, r4, lr}
   d6c98:	460b      	mov	r3, r1
   d6c9a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c9c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6ca0:	466c      	mov	r4, sp
   d6ca2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6ca6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6caa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6cae:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6cb2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6cb6:	b002      	add	sp, #8
   d6cb8:	bd10      	pop	{r4, pc}

000d6cba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6cba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6cbc:	b510      	push	{r4, lr}
      if (_M_empty())
   d6cbe:	b90a      	cbnz	r2, d6cc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6cc0:	f002 fa70 	bl	d91a4 <_ZSt25__throw_bad_function_callv>
    }
   d6cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cc8:	68c3      	ldr	r3, [r0, #12]
   d6cca:	4718      	bx	r3

000d6ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6ccc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6cce:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6cd0:	f100 0110 	add.w	r1, r0, #16
   d6cd4:	f7ff fff1 	bl	d6cba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6cd8:	bd08      	pop	{r3, pc}

000d6cda <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6cda:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6cdc:	b510      	push	{r4, lr}
      if (_M_empty())
   d6cde:	b90a      	cbnz	r2, d6ce4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6ce0:	f002 fa60 	bl	d91a4 <_ZSt25__throw_bad_function_callv>
    }
   d6ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ce8:	68c3      	ldr	r3, [r0, #12]
   d6cea:	4718      	bx	r3

000d6cec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6cec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6cee:	6800      	ldr	r0, [r0, #0]
   d6cf0:	f100 0110 	add.w	r1, r0, #16
   d6cf4:	f7ff fff1 	bl	d6cda <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6cf8:	bd08      	pop	{r3, pc}
	...

000d6cfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6cfc:	b538      	push	{r3, r4, r5, lr}
   d6cfe:	2300      	movs	r3, #0
   d6d00:	4604      	mov	r4, r0
   d6d02:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6d04:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6d06:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6d08:	f7fd f9c5 	bl	d4096 <_Znwj>
   d6d0c:	b128      	cbz	r0, d6d1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6d0e:	2301      	movs	r3, #1
   d6d10:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6d14:	4b02      	ldr	r3, [pc, #8]	; (d6d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6d16:	6003      	str	r3, [r0, #0]
   d6d18:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6d1a:	6020      	str	r0, [r4, #0]
	}
   d6d1c:	4620      	mov	r0, r4
   d6d1e:	bd38      	pop	{r3, r4, r5, pc}
   d6d20:	000da384 	.word	0x000da384

000d6d24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6d24:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6d26:	2300      	movs	r3, #0
   d6d28:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6d2a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6d2c:	4604      	mov	r4, r0
   d6d2e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6d30:	b12b      	cbz	r3, d6d3e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6d32:	2202      	movs	r2, #2
   d6d34:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6d36:	68eb      	ldr	r3, [r5, #12]
   d6d38:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6d3a:	68ab      	ldr	r3, [r5, #8]
   d6d3c:	60a3      	str	r3, [r4, #8]
    }
   d6d3e:	4620      	mov	r0, r4
   d6d40:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d46:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6d48:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6d4a:	4668      	mov	r0, sp
   d6d4c:	f7ff ff4d 	bl	d6bea <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6d50:	f04f 0302 	mov.w	r3, #2
   d6d54:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6d58:	2a00      	cmp	r2, #0
   d6d5a:	d103      	bne.n	d6d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6d5c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6d60:	2900      	cmp	r1, #0
   d6d62:	d1f7      	bne.n	d6d54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6d64:	d125      	bne.n	d6db2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6d66:	f104 050c 	add.w	r5, r4, #12
   d6d6a:	4669      	mov	r1, sp
   d6d6c:	4628      	mov	r0, r5
   d6d6e:	f7ff ff3c 	bl	d6bea <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6d72:	f3bf 8f5b 	dmb	ish
   d6d76:	2301      	movs	r3, #1
   d6d78:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6d7a:	2000      	movs	r0, #0
   d6d7c:	f104 0308 	add.w	r3, r4, #8
   d6d80:	f3bf 8f5b 	dmb	ish
   d6d84:	e853 6f00 	ldrex	r6, [r3]
   d6d88:	e843 0200 	strex	r2, r0, [r3]
   d6d8c:	2a00      	cmp	r2, #0
   d6d8e:	d1f9      	bne.n	d6d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6d90:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6d94:	b16e      	cbz	r6, d6db2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6d96:	f7ff fd83 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6d9a:	b178      	cbz	r0, d6dbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d9c:	4629      	mov	r1, r5
   d6d9e:	4630      	mov	r0, r6
   d6da0:	f7ff ff8b 	bl	d6cba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6da4:	4630      	mov	r0, r6
   d6da6:	f7ff ff17 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6daa:	2110      	movs	r1, #16
   d6dac:	4630      	mov	r0, r6
   d6dae:	f002 f9f3 	bl	d9198 <_ZdlPvj>
        p_->setError(std::move(error));
   d6db2:	4668      	mov	r0, sp
   d6db4:	f7ff ff26 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
    }
   d6db8:	b009      	add	sp, #36	; 0x24
   d6dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6dbc:	4631      	mov	r1, r6
   d6dbe:	a802      	add	r0, sp, #8
   d6dc0:	f7ff ffb0 	bl	d6d24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6dc4:	68e0      	ldr	r0, [r4, #12]
   d6dc6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6dca:	b108      	cbz	r0, d6dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6dcc:	f002 feba 	bl	d9b44 <strdup>
        type_(type) {
   d6dd0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6dd2:	2010      	movs	r0, #16
   d6dd4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6dd8:	f7fd f95d 	bl	d4096 <_Znwj>
   d6ddc:	4605      	mov	r5, r0
   d6dde:	b1e8      	cbz	r0, d6e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6de0:	2700      	movs	r7, #0
   d6de2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6de4:	2018      	movs	r0, #24
   d6de6:	f7fd f956 	bl	d4096 <_Znwj>
   d6dea:	4604      	mov	r4, r0
   d6dec:	b188      	cbz	r0, d6e12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6dee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6df0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6df2:	a802      	add	r0, sp, #8
   d6df4:	f7ff ff4f 	bl	d6c96 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6df8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6dfa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dfc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dfe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e00:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6e02:	a906      	add	r1, sp, #24
   d6e04:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e06:	60e3      	str	r3, [r4, #12]
   d6e08:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6e0c:	9205      	str	r2, [sp, #20]
   d6e0e:	f7ff feec 	bl	d6bea <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6e12:	4b08      	ldr	r3, [pc, #32]	; (d6e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6e14:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e16:	4b08      	ldr	r3, [pc, #32]	; (d6e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e18:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6e1a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6e1c:	a806      	add	r0, sp, #24
   d6e1e:	f7ff fef1 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6e22:	a802      	add	r0, sp, #8
   d6e24:	f7ff fed8 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e28:	2200      	movs	r2, #0
   d6e2a:	4629      	mov	r1, r5
   d6e2c:	4803      	ldr	r0, [pc, #12]	; (d6e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6e2e:	f7ff fd3f 	bl	d68b0 <application_thread_invoke>
   d6e32:	e7b7      	b.n	d6da4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6e34:	000d6ccd 	.word	0x000d6ccd
   d6e38:	000d6f65 	.word	0x000d6f65
   d6e3c:	000d6adf 	.word	0x000d6adf

000d6e40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e44:	b08a      	sub	sp, #40	; 0x28
   d6e46:	4605      	mov	r5, r0
   d6e48:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6e4c:	460c      	mov	r4, r1
   d6e4e:	4617      	mov	r7, r2
   d6e50:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e52:	f7ff fd61 	bl	d6918 <spark_cloud_flag_connected>
   d6e56:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6e58:	4682      	mov	sl, r0
   d6e5a:	bb38      	cbnz	r0, d6eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6e5c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6e60:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e62:	a905      	add	r1, sp, #20
   d6e64:	4630      	mov	r0, r6
   d6e66:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6e6a:	f7ff febe 	bl	d6bea <_ZN8particle5ErrorC1EOS0_>
   d6e6e:	2014      	movs	r0, #20
   d6e70:	f7fd f911 	bl	d4096 <_Znwj>
   d6e74:	4604      	mov	r4, r0
   d6e76:	b148      	cbz	r0, d6e8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6e78:	2302      	movs	r3, #2
   d6e7a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e7c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e7e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e82:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6e84:	4631      	mov	r1, r6
   d6e86:	300c      	adds	r0, #12
   d6e88:	f7ff feaf 	bl	d6bea <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e8c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6e8e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6e90:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6e94:	f7ff ff32 	bl	d6cfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e98:	4630      	mov	r0, r6
   d6e9a:	f7ff feb3 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6e9e:	a805      	add	r0, sp, #20
   d6ea0:	f7ff feb0 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6ea4:	4628      	mov	r0, r5
   d6ea6:	b00a      	add	sp, #40	; 0x28
   d6ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6eac:	230c      	movs	r3, #12
   d6eae:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6eb2:	2014      	movs	r0, #20
   d6eb4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6eb8:	9307      	str	r3, [sp, #28]
   d6eba:	f7fd f8ec 	bl	d4096 <_Znwj>
   d6ebe:	4601      	mov	r1, r0
   d6ec0:	b128      	cbz	r0, d6ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6ec2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6ec6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6eca:	f880 a001 	strb.w	sl, [r0, #1]
   d6ece:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6ed0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6ed2:	f7ff ff13 	bl	d6cfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6ed6:	4b22      	ldr	r3, [pc, #136]	; (d6f60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6ed8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6eda:	2008      	movs	r0, #8
   d6edc:	f7fd f8db 	bl	d4096 <_Znwj>
   d6ee0:	4682      	mov	sl, r0
   d6ee2:	b128      	cbz	r0, d6ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ee4:	9b03      	ldr	r3, [sp, #12]
   d6ee6:	f840 3b04 	str.w	r3, [r0], #4
   d6eea:	a904      	add	r1, sp, #16
   d6eec:	f7ff fe0b 	bl	d6b06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6ef0:	9600      	str	r6, [sp, #0]
   d6ef2:	fa5f f389 	uxtb.w	r3, r9
   d6ef6:	4642      	mov	r2, r8
   d6ef8:	4639      	mov	r1, r7
   d6efa:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6efc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6f00:	f7ff fd12 	bl	d6928 <spark_send_event>
   d6f04:	b9b8      	cbnz	r0, d6f36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6f06:	9b03      	ldr	r3, [sp, #12]
   d6f08:	785b      	ldrb	r3, [r3, #1]
   d6f0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6f0e:	b993      	cbnz	r3, d6f36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6f10:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6f14:	a905      	add	r1, sp, #20
   d6f16:	a803      	add	r0, sp, #12
   d6f18:	9205      	str	r2, [sp, #20]
   d6f1a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6f1e:	f7ff ff11 	bl	d6d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6f22:	a805      	add	r0, sp, #20
   d6f24:	f7ff fe6e 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6f28:	a805      	add	r0, sp, #20
   d6f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6f2c:	f7ff fe94 	bl	d6c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6f30:	a806      	add	r0, sp, #24
   d6f32:	f7fd f981 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6f36:	9b03      	ldr	r3, [sp, #12]
   d6f38:	9305      	str	r3, [sp, #20]
   d6f3a:	a904      	add	r1, sp, #16
   d6f3c:	a806      	add	r0, sp, #24
   d6f3e:	f7ff fde2 	bl	d6b06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6f42:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6f44:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6f46:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6f48:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6f4a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6f4c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6f4e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6f50:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6f52:	f7fd f971 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f56:	a804      	add	r0, sp, #16
   d6f58:	f7fd f96e 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6f5c:	e7a2      	b.n	d6ea4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6f5e:	bf00      	nop
   d6f60:	000d7029 	.word	0x000d7029

000d6f64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6f64:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f68:	4605      	mov	r5, r0
	  switch (__op)
   d6f6a:	d007      	beq.n	d6f7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6f6c:	2a03      	cmp	r2, #3
   d6f6e:	d018      	beq.n	d6fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6f70:	2a01      	cmp	r2, #1
   d6f72:	d101      	bne.n	d6f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6f74:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f76:	6003      	str	r3, [r0, #0]
	}
   d6f78:	2000      	movs	r0, #0
   d6f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f7c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6f7e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6f80:	f7fd f889 	bl	d4096 <_Znwj>
   d6f84:	4604      	mov	r4, r0
   d6f86:	b150      	cbz	r0, d6f9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6f88:	4631      	mov	r1, r6
   d6f8a:	f7ff fecb 	bl	d6d24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6f8e:	6930      	ldr	r0, [r6, #16]
   d6f90:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6f94:	b108      	cbz	r0, d6f9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6f96:	f002 fdd5 	bl	d9b44 <strdup>
        type_(type) {
   d6f9a:	6120      	str	r0, [r4, #16]
   d6f9c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6f9e:	602c      	str	r4, [r5, #0]
	}
   d6fa0:	e7ea      	b.n	d6f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6fa2:	6804      	ldr	r4, [r0, #0]
   d6fa4:	2c00      	cmp	r4, #0
   d6fa6:	d0e7      	beq.n	d6f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6fa8:	f104 0010 	add.w	r0, r4, #16
   d6fac:	f7ff fe2a 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6fb0:	4620      	mov	r0, r4
   d6fb2:	f7ff fe11 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6fb6:	2118      	movs	r1, #24
   d6fb8:	4620      	mov	r0, r4
   d6fba:	f002 f8ed 	bl	d9198 <_ZdlPvj>
   d6fbe:	e7db      	b.n	d6f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6fc0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6fc0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6fc2:	2300      	movs	r3, #0
   d6fc4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6fc6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6fc8:	4604      	mov	r4, r0
   d6fca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6fcc:	b12b      	cbz	r3, d6fda <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6fce:	2202      	movs	r2, #2
   d6fd0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6fd2:	68eb      	ldr	r3, [r5, #12]
   d6fd4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6fd6:	68ab      	ldr	r3, [r5, #8]
   d6fd8:	60a3      	str	r3, [r4, #8]
    }
   d6fda:	4620      	mov	r0, r4
   d6fdc:	bd38      	pop	{r3, r4, r5, pc}

000d6fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6fde:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6fe0:	b570      	push	{r4, r5, r6, lr}
   d6fe2:	4604      	mov	r4, r0
	  switch (__op)
   d6fe4:	d007      	beq.n	d6ff6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6fe6:	2a03      	cmp	r2, #3
   d6fe8:	d012      	beq.n	d7010 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6fea:	2a01      	cmp	r2, #1
   d6fec:	d101      	bne.n	d6ff2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6fee:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6ff0:	6003      	str	r3, [r0, #0]
	}
   d6ff2:	2000      	movs	r0, #0
   d6ff4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6ff6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6ff8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6ffa:	f7fd f84c 	bl	d4096 <_Znwj>
   d6ffe:	4605      	mov	r5, r0
   d7000:	b120      	cbz	r0, d700c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7002:	4631      	mov	r1, r6
   d7004:	f7ff ffdc 	bl	d6fc0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7008:	7c33      	ldrb	r3, [r6, #16]
   d700a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d700c:	6025      	str	r5, [r4, #0]
	}
   d700e:	e7f0      	b.n	d6ff2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7010:	6804      	ldr	r4, [r0, #0]
   d7012:	2c00      	cmp	r4, #0
   d7014:	d0ed      	beq.n	d6ff2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7016:	4620      	mov	r0, r4
   d7018:	f7ff fdde 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d701c:	2114      	movs	r1, #20
   d701e:	4620      	mov	r0, r4
   d7020:	f002 f8ba 	bl	d9198 <_ZdlPvj>
   d7024:	e7e5      	b.n	d6ff2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7028:	b5f0      	push	{r4, r5, r6, r7, lr}
   d702a:	b089      	sub	sp, #36	; 0x24
   d702c:	4604      	mov	r4, r0
   d702e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7030:	a801      	add	r0, sp, #4
   d7032:	4611      	mov	r1, r2
   d7034:	f7ff fe10 	bl	d6c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7038:	b1a4      	cbz	r4, d7064 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d703a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d703c:	b11d      	cbz	r5, d7046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d703e:	4628      	mov	r0, r5
   d7040:	f002 fd80 	bl	d9b44 <strdup>
   d7044:	4605      	mov	r5, r0
   d7046:	a801      	add	r0, sp, #4
   d7048:	a903      	add	r1, sp, #12
        type_(type) {
   d704a:	9503      	str	r5, [sp, #12]
   d704c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7050:	f7ff fe78 	bl	d6d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7054:	a803      	add	r0, sp, #12
   d7056:	f7ff fdd5 	bl	d6c04 <_ZN8particle5ErrorD1Ev>
   d705a:	a802      	add	r0, sp, #8
   d705c:	f7fd f8ec 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7060:	b009      	add	sp, #36	; 0x24
   d7062:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7064:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7066:	2301      	movs	r3, #1
   d7068:	e8d5 2f4f 	ldrexb	r2, [r5]
   d706c:	2a00      	cmp	r2, #0
   d706e:	d103      	bne.n	d7078 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7070:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7074:	2900      	cmp	r1, #0
   d7076:	d1f7      	bne.n	d7068 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7078:	d1ef      	bne.n	d705a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d707a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d707c:	f3bf 8f5b 	dmb	ish
   d7080:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7082:	1d2b      	adds	r3, r5, #4
   d7084:	f3bf 8f5b 	dmb	ish
   d7088:	e853 6f00 	ldrex	r6, [r3]
   d708c:	e843 4200 	strex	r2, r4, [r3]
   d7090:	2a00      	cmp	r2, #0
   d7092:	d1f9      	bne.n	d7088 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7094:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7098:	2e00      	cmp	r6, #0
   d709a:	d0de      	beq.n	d705a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d709c:	4620      	mov	r0, r4
   d709e:	f7ff fbff 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d70a2:	4607      	mov	r7, r0
   d70a4:	b160      	cbz	r0, d70c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d70a6:	f105 010c 	add.w	r1, r5, #12
   d70aa:	4630      	mov	r0, r6
   d70ac:	f7ff fe15 	bl	d6cda <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d70b0:	4630      	mov	r0, r6
   d70b2:	f7ff fd91 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d70b6:	2110      	movs	r1, #16
   d70b8:	4630      	mov	r0, r6
   d70ba:	f002 f86d 	bl	d9198 <_ZdlPvj>
   d70be:	e7cc      	b.n	d705a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d70c0:	4631      	mov	r1, r6
   d70c2:	a803      	add	r0, sp, #12
   d70c4:	f7ff ff7c 	bl	d6fc0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d70c8:	7b2b      	ldrb	r3, [r5, #12]
   d70ca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d70ce:	2010      	movs	r0, #16
   d70d0:	f7fc ffe1 	bl	d4096 <_Znwj>
   d70d4:	4605      	mov	r5, r0
   d70d6:	b1d0      	cbz	r0, d710e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d70d8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d70da:	2014      	movs	r0, #20
   d70dc:	f7fc ffdb 	bl	d4096 <_Znwj>
   d70e0:	4604      	mov	r4, r0
   d70e2:	b178      	cbz	r0, d7104 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d70e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d70e6:	4601      	mov	r1, r0
   d70e8:	a803      	add	r0, sp, #12
   d70ea:	f7ff fdd4 	bl	d6c96 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d70f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d70f2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70f4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d70f6:	9205      	str	r2, [sp, #20]
   d70f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d70fa:	60e3      	str	r3, [r4, #12]
   d70fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7100:	9206      	str	r2, [sp, #24]
   d7102:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7104:	4b06      	ldr	r3, [pc, #24]	; (d7120 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7106:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7108:	4b06      	ldr	r3, [pc, #24]	; (d7124 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d710a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d710c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d710e:	a803      	add	r0, sp, #12
   d7110:	f7ff fd62 	bl	d6bd8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7114:	2200      	movs	r2, #0
   d7116:	4629      	mov	r1, r5
   d7118:	4803      	ldr	r0, [pc, #12]	; (d7128 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d711a:	f7ff fbc9 	bl	d68b0 <application_thread_invoke>
   d711e:	e7c7      	b.n	d70b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7120:	000d6ced 	.word	0x000d6ced
   d7124:	000d6fdf 	.word	0x000d6fdf
   d7128:	000d6adf 	.word	0x000d6adf

000d712c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d712c:	2200      	movs	r2, #0
   d712e:	6840      	ldr	r0, [r0, #4]
   d7130:	4611      	mov	r1, r2
   d7132:	f7ff bc49 	b.w	d69c8 <network_listening>

000d7136 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7136:	2200      	movs	r2, #0
   d7138:	6840      	ldr	r0, [r0, #4]
   d713a:	4611      	mov	r1, r2
   d713c:	f7ff bc54 	b.w	d69e8 <network_get_listen_timeout>

000d7140 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7140:	6840      	ldr	r0, [r0, #4]
   d7142:	2200      	movs	r2, #0
   d7144:	f7ff bc48 	b.w	d69d8 <network_set_listen_timeout>

000d7148 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7148:	6840      	ldr	r0, [r0, #4]
   d714a:	2200      	movs	r2, #0
   d714c:	f081 0101 	eor.w	r1, r1, #1
   d7150:	f7ff bc32 	b.w	d69b8 <network_listen>

000d7154 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7154:	2300      	movs	r3, #0
   d7156:	6840      	ldr	r0, [r0, #4]
   d7158:	461a      	mov	r2, r3
   d715a:	4619      	mov	r1, r3
   d715c:	f7ff bc24 	b.w	d69a8 <network_off>

000d7160 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7160:	2300      	movs	r3, #0
   d7162:	6840      	ldr	r0, [r0, #4]
   d7164:	461a      	mov	r2, r3
   d7166:	4619      	mov	r1, r3
   d7168:	f7ff bc16 	b.w	d6998 <network_on>

000d716c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d716c:	2200      	movs	r2, #0
   d716e:	6840      	ldr	r0, [r0, #4]
   d7170:	4611      	mov	r1, r2
   d7172:	f7ff bc09 	b.w	d6988 <network_ready>

000d7176 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7176:	2200      	movs	r2, #0
   d7178:	6840      	ldr	r0, [r0, #4]
   d717a:	4611      	mov	r1, r2
   d717c:	f7ff bbf4 	b.w	d6968 <network_connecting>

000d7180 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7180:	6840      	ldr	r0, [r0, #4]
   d7182:	2200      	movs	r2, #0
   d7184:	2102      	movs	r1, #2
   d7186:	f7ff bbf7 	b.w	d6978 <network_disconnect>

000d718a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d718a:	2300      	movs	r3, #0
   d718c:	6840      	ldr	r0, [r0, #4]
   d718e:	461a      	mov	r2, r3
   d7190:	f7ff bbe2 	b.w	d6958 <network_connect>

000d7194 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7194:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7196:	2203      	movs	r2, #3
   d7198:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d719a:	4a02      	ldr	r2, [pc, #8]	; (d71a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d719c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d719e:	4770      	bx	lr
   d71a0:	2003e57c 	.word	0x2003e57c
   d71a4:	000da3a0 	.word	0x000da3a0

000d71a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d71a8:	4770      	bx	lr

000d71aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d71aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71ac:	4606      	mov	r6, r0
   d71ae:	4615      	mov	r5, r2
   d71b0:	460c      	mov	r4, r1
   d71b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d71b4:	42bc      	cmp	r4, r7
   d71b6:	d006      	beq.n	d71c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d71b8:	6833      	ldr	r3, [r6, #0]
   d71ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d71be:	689b      	ldr	r3, [r3, #8]
   d71c0:	4630      	mov	r0, r6
   d71c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d71c4:	e7f6      	b.n	d71b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d71c6:	4628      	mov	r0, r5
   d71c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d71ca:	7c00      	ldrb	r0, [r0, #16]
   d71cc:	2200      	movs	r2, #0
   d71ce:	f7ff b9ed 	b.w	d65ac <hal_i2c_write>

000d71d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d71d2:	7c00      	ldrb	r0, [r0, #16]
   d71d4:	2100      	movs	r1, #0
   d71d6:	f7ff b9f1 	b.w	d65bc <hal_i2c_available>

000d71da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d71da:	7c00      	ldrb	r0, [r0, #16]
   d71dc:	2100      	movs	r1, #0
   d71de:	f7ff b9f5 	b.w	d65cc <hal_i2c_read>

000d71e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d71e2:	7c00      	ldrb	r0, [r0, #16]
   d71e4:	2100      	movs	r1, #0
   d71e6:	f7ff b9f9 	b.w	d65dc <hal_i2c_peek>

000d71ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d71ea:	7c00      	ldrb	r0, [r0, #16]
   d71ec:	2100      	movs	r1, #0
   d71ee:	f7ff b9fd 	b.w	d65ec <hal_i2c_flush>

000d71f2 <_ZN7TwoWireD0Ev>:
   d71f2:	b510      	push	{r4, lr}
   d71f4:	2114      	movs	r1, #20
   d71f6:	4604      	mov	r4, r0
   d71f8:	f001 ffce 	bl	d9198 <_ZdlPvj>
   d71fc:	4620      	mov	r0, r4
   d71fe:	bd10      	pop	{r4, pc}

000d7200 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7200:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7206:	4604      	mov	r4, r0
   d7208:	4608      	mov	r0, r1
   d720a:	2100      	movs	r1, #0
   d720c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7210:	4b03      	ldr	r3, [pc, #12]	; (d7220 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7212:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7214:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7216:	4611      	mov	r1, r2
   d7218:	f7ff f9f8 	bl	d660c <hal_i2c_init>
}
   d721c:	4620      	mov	r0, r4
   d721e:	bd10      	pop	{r4, pc}
   d7220:	000da3dc 	.word	0x000da3dc

000d7224 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7224:	4700      	bx	r0
	...

000d7228 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7228:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d722c:	2400      	movs	r4, #0
{
   d722e:	461d      	mov	r5, r3
   d7230:	460f      	mov	r7, r1
   d7232:	4690      	mov	r8, r2
   d7234:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7236:	f7ff f9b1 	bl	d659c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d723a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d723c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7240:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7244:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7248:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d724c:	bfa2      	ittt	ge
   d724e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7252:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7256:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7258:	4907      	ldr	r1, [pc, #28]	; (d7278 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d725a:	9400      	str	r4, [sp, #0]
   d725c:	4643      	mov	r3, r8
   d725e:	463a      	mov	r2, r7
   d7260:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7262:	bfa8      	it	ge
   d7264:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7268:	f7ff f990 	bl	d658c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d726c:	fab0 f080 	clz	r0, r0
   d7270:	0940      	lsrs	r0, r0, #5
   d7272:	b004      	add	sp, #16
   d7274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7278:	000d7225 	.word	0x000d7225

000d727c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d727c:	4770      	bx	lr

000d727e <_ZN9IPAddressD0Ev>:
   d727e:	b510      	push	{r4, lr}
   d7280:	2118      	movs	r1, #24
   d7282:	4604      	mov	r4, r0
   d7284:	f001 ff88 	bl	d9198 <_ZdlPvj>
   d7288:	4620      	mov	r0, r4
   d728a:	bd10      	pop	{r4, pc}

000d728c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d728c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d728e:	7d03      	ldrb	r3, [r0, #20]
   d7290:	2b06      	cmp	r3, #6
{
   d7292:	b08d      	sub	sp, #52	; 0x34
   d7294:	460e      	mov	r6, r1
   d7296:	f100 0704 	add.w	r7, r0, #4
   d729a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d729e:	d012      	beq.n	d72c6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d72a0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d72a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d72a8:	220a      	movs	r2, #10
   d72aa:	4630      	mov	r0, r6
   d72ac:	f001 faa3 	bl	d87f6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d72b0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d72b2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d72b4:	d019      	beq.n	d72ea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d72b6:	2c00      	cmp	r4, #0
   d72b8:	d0f4      	beq.n	d72a4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d72ba:	212e      	movs	r1, #46	; 0x2e
   d72bc:	4630      	mov	r0, r6
   d72be:	f001 fa8b 	bl	d87d8 <_ZN5Print5printEc>
   d72c2:	4404      	add	r4, r0
   d72c4:	e7ee      	b.n	d72a4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72c6:	232f      	movs	r3, #47	; 0x2f
   d72c8:	466a      	mov	r2, sp
   d72ca:	4639      	mov	r1, r7
   d72cc:	200a      	movs	r0, #10
		buf[0] = 0;
   d72ce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72d2:	f7ff f9a3 	bl	d661c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d72d6:	4668      	mov	r0, sp
   d72d8:	f002 fc51 	bl	d9b7e <strlen>
   d72dc:	6833      	ldr	r3, [r6, #0]
   d72de:	4602      	mov	r2, r0
   d72e0:	68db      	ldr	r3, [r3, #12]
   d72e2:	4669      	mov	r1, sp
   d72e4:	4630      	mov	r0, r6
   d72e6:	4798      	blx	r3
   d72e8:	4604      	mov	r4, r0
    }
    return n;
}
   d72ea:	4620      	mov	r0, r4
   d72ec:	b00d      	add	sp, #52	; 0x34
   d72ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d72f0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d72f0:	b510      	push	{r4, lr}
   d72f2:	4b05      	ldr	r3, [pc, #20]	; (d7308 <_ZN9IPAddressC1Ev+0x18>)
   d72f4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d72f6:	2211      	movs	r2, #17
   d72f8:	f840 3b04 	str.w	r3, [r0], #4
   d72fc:	2100      	movs	r1, #0
   d72fe:	f002 fb97 	bl	d9a30 <memset>
}
   d7302:	4620      	mov	r0, r4
   d7304:	bd10      	pop	{r4, pc}
   d7306:	bf00      	nop
   d7308:	000da404 	.word	0x000da404

000d730c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d730c:	4603      	mov	r3, r0
   d730e:	4a07      	ldr	r2, [pc, #28]	; (d732c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7310:	b510      	push	{r4, lr}
   d7312:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7316:	f101 0210 	add.w	r2, r1, #16
   d731a:	f851 4b04 	ldr.w	r4, [r1], #4
   d731e:	f843 4b04 	str.w	r4, [r3], #4
   d7322:	4291      	cmp	r1, r2
   d7324:	d1f9      	bne.n	d731a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7326:	780a      	ldrb	r2, [r1, #0]
   d7328:	701a      	strb	r2, [r3, #0]
}
   d732a:	bd10      	pop	{r4, pc}
   d732c:	000da404 	.word	0x000da404

000d7330 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7330:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7332:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7336:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d733a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d733e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7342:	2304      	movs	r3, #4
   d7344:	6041      	str	r1, [r0, #4]
   d7346:	7503      	strb	r3, [r0, #20]
}
   d7348:	bd10      	pop	{r4, pc}

000d734a <_ZN9IPAddressaSEPKh>:
{
   d734a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d734c:	78cb      	ldrb	r3, [r1, #3]
   d734e:	9300      	str	r3, [sp, #0]
   d7350:	788b      	ldrb	r3, [r1, #2]
   d7352:	784a      	ldrb	r2, [r1, #1]
   d7354:	7809      	ldrb	r1, [r1, #0]
   d7356:	f7ff ffeb 	bl	d7330 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d735a:	b002      	add	sp, #8
   d735c:	bd10      	pop	{r4, pc}

000d735e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d735e:	f100 0310 	add.w	r3, r0, #16
   d7362:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7364:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d7368:	2901      	cmp	r1, #1
   d736a:	4618      	mov	r0, r3
   d736c:	d108      	bne.n	d7380 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d736e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d7372:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d7376:	3a01      	subs	r2, #1
   d7378:	f103 0310 	add.w	r3, r3, #16
   d737c:	d1f2      	bne.n	d7364 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d737e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d7380:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7382:	bf04      	itt	eq
   d7384:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d7388:	1852      	addeq	r2, r2, r1
   d738a:	e7f4      	b.n	d7376 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d738c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d738c:	b40e      	push	{r1, r2, r3}
   d738e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7390:	b088      	sub	sp, #32
   d7392:	af00      	add	r7, sp, #0
   d7394:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7398:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d739a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d739e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d73a0:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d73a2:	462b      	mov	r3, r5
   d73a4:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d73a6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d73a8:	f7ff fb66 	bl	d6a78 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d73ac:	280f      	cmp	r0, #15
   d73ae:	687a      	ldr	r2, [r7, #4]
   d73b0:	d91a      	bls.n	d73e8 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d73b2:	f100 0308 	add.w	r3, r0, #8
   d73b6:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d73ba:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d73bc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d73c0:	1c41      	adds	r1, r0, #1
   d73c2:	462b      	mov	r3, r5
   d73c4:	4668      	mov	r0, sp
        va_start(args, fmt);
   d73c6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d73c8:	f7ff fb56 	bl	d6a78 <vsnprintf>
        if (n > 0) {
   d73cc:	1e02      	subs	r2, r0, #0
   d73ce:	dd04      	ble.n	d73da <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d73d0:	6823      	ldr	r3, [r4, #0]
   d73d2:	4669      	mov	r1, sp
   d73d4:	689b      	ldr	r3, [r3, #8]
   d73d6:	4620      	mov	r0, r4
   d73d8:	4798      	blx	r3
   d73da:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d73dc:	3720      	adds	r7, #32
   d73de:	46bd      	mov	sp, r7
   d73e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d73e4:	b003      	add	sp, #12
   d73e6:	4770      	bx	lr
    } else if (n > 0) {
   d73e8:	2800      	cmp	r0, #0
   d73ea:	d0f7      	beq.n	d73dc <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d73ec:	6823      	ldr	r3, [r4, #0]
   d73ee:	4602      	mov	r2, r0
   d73f0:	689b      	ldr	r3, [r3, #8]
   d73f2:	f107 0110 	add.w	r1, r7, #16
   d73f6:	4620      	mov	r0, r4
   d73f8:	4798      	blx	r3
}
   d73fa:	e7ef      	b.n	d73dc <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d73fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d73fc:	b510      	push	{r4, lr}
          _M_dispose();
   d73fe:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7400:	4604      	mov	r4, r0
          _M_dispose();
   d7402:	689b      	ldr	r3, [r3, #8]
   d7404:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7406:	68a3      	ldr	r3, [r4, #8]
   d7408:	3b01      	subs	r3, #1
   d740a:	60a3      	str	r3, [r4, #8]
   d740c:	b92b      	cbnz	r3, d741a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d740e:	6823      	ldr	r3, [r4, #0]
   d7410:	4620      	mov	r0, r4
   d7412:	68db      	ldr	r3, [r3, #12]
    }
   d7414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7418:	4718      	bx	r3
    }
   d741a:	bd10      	pop	{r4, pc}

000d741c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d741c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d741e:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d7420:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d7424:	689b      	ldr	r3, [r3, #8]
   d7426:	2201      	movs	r2, #1
   d7428:	f10d 0107 	add.w	r1, sp, #7
   d742c:	4798      	blx	r3
}
   d742e:	b003      	add	sp, #12
   d7430:	f85d fb04 	ldr.w	pc, [sp], #4

000d7434 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d7434:	b538      	push	{r3, r4, r5, lr}
   d7436:	680b      	ldr	r3, [r1, #0]
   d7438:	6003      	str	r3, [r0, #0]
   d743a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d743c:	6843      	ldr	r3, [r0, #4]
   d743e:	429d      	cmp	r5, r3
    class __shared_ptr
   d7440:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d7442:	d00c      	beq.n	d745e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d7444:	b115      	cbz	r5, d744c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d7446:	686b      	ldr	r3, [r5, #4]
   d7448:	3301      	adds	r3, #1
   d744a:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d744c:	6860      	ldr	r0, [r4, #4]
   d744e:	b128      	cbz	r0, d745c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d7450:	6843      	ldr	r3, [r0, #4]
   d7452:	3b01      	subs	r3, #1
   d7454:	6043      	str	r3, [r0, #4]
   d7456:	b90b      	cbnz	r3, d745c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d7458:	f7ff ffd0 	bl	d73fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d745c:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d745e:	4620      	mov	r0, r4
   d7460:	bd38      	pop	{r3, r4, r5, pc}

000d7462 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7462:	460b      	mov	r3, r1
   d7464:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d7466:	2200      	movs	r2, #0
   d7468:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d746a:	e9c0 2200 	strd	r2, r2, [r0]
   d746e:	4604      	mov	r4, r0
        t_ = t;
   d7470:	6083      	str	r3, [r0, #8]
    if (t) {
   d7472:	b90b      	cbnz	r3, d7478 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d7474:	4620      	mov	r0, r4
   d7476:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d7478:	f7ff ffdc 	bl	d7434 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d747c:	e7fa      	b.n	d7474 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d747e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d747e:	6883      	ldr	r3, [r0, #8]
   d7480:	b1eb      	cbz	r3, d74be <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d7482:	781a      	ldrb	r2, [r3, #0]
   d7484:	2a03      	cmp	r2, #3
   d7486:	d81a      	bhi.n	d74be <_ZNK5spark9JSONValue4typeEv+0x40>
   d7488:	e8df f002 	tbb	[pc, r2]
   d748c:	1b021704 	.word	0x1b021704
   d7490:	2005      	movs	r0, #5
   d7492:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d7494:	6802      	ldr	r2, [r0, #0]
   d7496:	685b      	ldr	r3, [r3, #4]
   d7498:	6852      	ldr	r2, [r2, #4]
   d749a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d749c:	282d      	cmp	r0, #45	; 0x2d
   d749e:	d012      	beq.n	d74c6 <_ZNK5spark9JSONValue4typeEv+0x48>
   d74a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d74a4:	2b09      	cmp	r3, #9
   d74a6:	d90e      	bls.n	d74c6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d74a8:	2874      	cmp	r0, #116	; 0x74
   d74aa:	d00e      	beq.n	d74ca <_ZNK5spark9JSONValue4typeEv+0x4c>
   d74ac:	2866      	cmp	r0, #102	; 0x66
   d74ae:	d00c      	beq.n	d74ca <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d74b0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d74b4:	4258      	negs	r0, r3
   d74b6:	4158      	adcs	r0, r3
   d74b8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d74ba:	2006      	movs	r0, #6
   d74bc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d74be:	2000      	movs	r0, #0
   d74c0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d74c2:	2004      	movs	r0, #4
   d74c4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d74c6:	2003      	movs	r0, #3
   d74c8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d74ca:	2002      	movs	r0, #2
}
   d74cc:	4770      	bx	lr

000d74ce <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d74ce:	b510      	push	{r4, lr}
   d74d0:	4604      	mov	r4, r0
    switch (type()) {
   d74d2:	f7ff ffd4 	bl	d747e <_ZNK5spark9JSONValue4typeEv>
   d74d6:	2802      	cmp	r0, #2
   d74d8:	d00e      	beq.n	d74f8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d74da:	1ec3      	subs	r3, r0, #3
   d74dc:	b2db      	uxtb	r3, r3
   d74de:	2b01      	cmp	r3, #1
   d74e0:	d814      	bhi.n	d750c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d74e2:	6822      	ldr	r2, [r4, #0]
   d74e4:	68a3      	ldr	r3, [r4, #8]
   d74e6:	6850      	ldr	r0, [r2, #4]
   d74e8:	685b      	ldr	r3, [r3, #4]
}
   d74ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d74ee:	220a      	movs	r2, #10
   d74f0:	2100      	movs	r1, #0
   d74f2:	4418      	add	r0, r3
   d74f4:	f002 bc16 	b.w	d9d24 <strtol>
        const char* const s = d_->json + t_->start;
   d74f8:	6822      	ldr	r2, [r4, #0]
   d74fa:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d74fc:	6852      	ldr	r2, [r2, #4]
   d74fe:	685b      	ldr	r3, [r3, #4]
   d7500:	5cd0      	ldrb	r0, [r2, r3]
   d7502:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d7506:	4258      	negs	r0, r3
   d7508:	4158      	adcs	r0, r3
}
   d750a:	bd10      	pop	{r4, pc}
    switch (type()) {
   d750c:	2000      	movs	r0, #0
   d750e:	e7fc      	b.n	d750a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d7510 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7510:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7512:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7514:	e9c0 3300 	strd	r3, r3, [r0]
   d7518:	4604      	mov	r4, r0
        n_(0) {
   d751a:	480e      	ldr	r0, [pc, #56]	; (d7554 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d751c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7520:	b1a9      	cbz	r1, d754e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d7522:	780b      	ldrb	r3, [r1, #0]
   d7524:	2b03      	cmp	r3, #3
   d7526:	d006      	beq.n	d7536 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7528:	b98b      	cbnz	r3, d754e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d752a:	6813      	ldr	r3, [r2, #0]
   d752c:	6858      	ldr	r0, [r3, #4]
   d752e:	684b      	ldr	r3, [r1, #4]
   d7530:	5cc3      	ldrb	r3, [r0, r3]
   d7532:	2b6e      	cmp	r3, #110	; 0x6e
   d7534:	d007      	beq.n	d7546 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d7536:	6813      	ldr	r3, [r2, #0]
   d7538:	684d      	ldr	r5, [r1, #4]
   d753a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d753c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d753e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d7540:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d7542:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d7544:	60e3      	str	r3, [r4, #12]
   d7546:	4611      	mov	r1, r2
   d7548:	4620      	mov	r0, r4
   d754a:	f7ff ff73 	bl	d7434 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d754e:	4620      	mov	r0, r4
   d7550:	bd38      	pop	{r3, r4, r5, pc}
   d7552:	bf00      	nop
   d7554:	000da473 	.word	0x000da473

000d7558 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7558:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d755a:	2500      	movs	r5, #0
   d755c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d755e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d7562:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7566:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d756a:	4604      	mov	r4, r0
   d756c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d756e:	b14b      	cbz	r3, d7584 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d7570:	781a      	ldrb	r2, [r3, #0]
   d7572:	2a01      	cmp	r2, #1
   d7574:	d106      	bne.n	d7584 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d7576:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d757a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d757c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d757e:	6143      	str	r3, [r0, #20]
   d7580:	f7ff ff58 	bl	d7434 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d7584:	4620      	mov	r0, r4
   d7586:	bd38      	pop	{r3, r4, r5, pc}

000d7588 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d7588:	b510      	push	{r4, lr}
    if (!n_) {
   d758a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d758c:	4604      	mov	r4, r0
    if (!n_) {
   d758e:	b163      	cbz	r3, d75aa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d7590:	6880      	ldr	r0, [r0, #8]
   d7592:	60e0      	str	r0, [r4, #12]
    --n_;
   d7594:	3b01      	subs	r3, #1
    ++t_;
   d7596:	3010      	adds	r0, #16
   d7598:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d759a:	6120      	str	r0, [r4, #16]
    --n_;
   d759c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d759e:	b113      	cbz	r3, d75a6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d75a0:	f7ff fedd 	bl	d735e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d75a4:	60a0      	str	r0, [r4, #8]
    return true;
   d75a6:	2001      	movs	r0, #1
   d75a8:	e000      	b.n	d75ac <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d75aa:	4618      	mov	r0, r3
}
   d75ac:	bd10      	pop	{r4, pc}

000d75ae <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d75ae:	b510      	push	{r4, lr}
    write('}');
   d75b0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d75b2:	4604      	mov	r4, r0
    write('}');
   d75b4:	f7ff ff32 	bl	d741c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d75b8:	2301      	movs	r3, #1
   d75ba:	7123      	strb	r3, [r4, #4]
}
   d75bc:	4620      	mov	r0, r4
   d75be:	bd10      	pop	{r4, pc}

000d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d75c0:	b508      	push	{r3, lr}
    switch (state_) {
   d75c2:	7903      	ldrb	r3, [r0, #4]
   d75c4:	2b01      	cmp	r3, #1
   d75c6:	d002      	beq.n	d75ce <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d75c8:	2b02      	cmp	r3, #2
   d75ca:	d004      	beq.n	d75d6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d75cc:	bd08      	pop	{r3, pc}
        write(',');
   d75ce:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d75d0:	f7ff ff24 	bl	d741c <_ZN5spark10JSONWriter5writeEc>
}
   d75d4:	e7fa      	b.n	d75cc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d75d6:	213a      	movs	r1, #58	; 0x3a
   d75d8:	e7fa      	b.n	d75d0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d75da <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d75da:	b510      	push	{r4, lr}
   d75dc:	4604      	mov	r4, r0
    writeSeparator();
   d75de:	f7ff ffef 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d75e2:	4620      	mov	r0, r4
   d75e4:	217b      	movs	r1, #123	; 0x7b
   d75e6:	f7ff ff19 	bl	d741c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d75ea:	2300      	movs	r3, #0
   d75ec:	7123      	strb	r3, [r4, #4]
}
   d75ee:	4620      	mov	r0, r4
   d75f0:	bd10      	pop	{r4, pc}
	...

000d75f4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d75f4:	b513      	push	{r0, r1, r4, lr}
   d75f6:	4604      	mov	r4, r0
   d75f8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d75fa:	f7ff ffe1 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d75fe:	6823      	ldr	r3, [r4, #0]
   d7600:	9a01      	ldr	r2, [sp, #4]
   d7602:	68db      	ldr	r3, [r3, #12]
   d7604:	4903      	ldr	r1, [pc, #12]	; (d7614 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d7606:	4620      	mov	r0, r4
   d7608:	4798      	blx	r3
    state_ = NEXT;
   d760a:	2301      	movs	r3, #1
}
   d760c:	4620      	mov	r0, r4
    state_ = NEXT;
   d760e:	7123      	strb	r3, [r4, #4]
}
   d7610:	b002      	add	sp, #8
   d7612:	bd10      	pop	{r4, pc}
   d7614:	000d9e55 	.word	0x000d9e55

000d7618 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d7618:	b513      	push	{r0, r1, r4, lr}
   d761a:	4604      	mov	r4, r0
   d761c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d761e:	f7ff ffcf 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d7622:	6823      	ldr	r3, [r4, #0]
   d7624:	9a01      	ldr	r2, [sp, #4]
   d7626:	68db      	ldr	r3, [r3, #12]
   d7628:	4903      	ldr	r1, [pc, #12]	; (d7638 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d762a:	4620      	mov	r0, r4
   d762c:	4798      	blx	r3
    state_ = NEXT;
   d762e:	2301      	movs	r3, #1
}
   d7630:	4620      	mov	r0, r4
    state_ = NEXT;
   d7632:	7123      	strb	r3, [r4, #4]
}
   d7634:	b002      	add	sp, #8
   d7636:	bd10      	pop	{r4, pc}
   d7638:	000da410 	.word	0x000da410

000d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7640:	460d      	mov	r5, r1
   d7642:	4617      	mov	r7, r2
    write('"');
   d7644:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d7646:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d76e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d764a:	4604      	mov	r4, r0
    const char* const end = str + size;
   d764c:	442f      	add	r7, r5
    write('"');
   d764e:	f7ff fee5 	bl	d741c <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d7652:	4629      	mov	r1, r5
    while (s != end) {
   d7654:	42bd      	cmp	r5, r7
   d7656:	462a      	mov	r2, r5
   d7658:	d038      	beq.n	d76cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d765a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d765e:	2e22      	cmp	r6, #34	; 0x22
   d7660:	d003      	beq.n	d766a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d7662:	2e5c      	cmp	r6, #92	; 0x5c
   d7664:	d001      	beq.n	d766a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d7666:	2e1f      	cmp	r6, #31
   d7668:	d8f4      	bhi.n	d7654 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d766a:	6823      	ldr	r3, [r4, #0]
   d766c:	1a52      	subs	r2, r2, r1
   d766e:	689b      	ldr	r3, [r3, #8]
   d7670:	4620      	mov	r0, r4
   d7672:	4798      	blx	r3
            write('\\');
   d7674:	215c      	movs	r1, #92	; 0x5c
   d7676:	4620      	mov	r0, r4
   d7678:	f7ff fed0 	bl	d741c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d767c:	2e0d      	cmp	r6, #13
   d767e:	d80a      	bhi.n	d7696 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d7680:	2e07      	cmp	r6, #7
   d7682:	d91c      	bls.n	d76be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d7684:	f1a6 0308 	sub.w	r3, r6, #8
   d7688:	2b05      	cmp	r3, #5
   d768a:	d818      	bhi.n	d76be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d768c:	e8df f003 	tbb	[pc, r3]
   d7690:	17110f0d 	.word	0x17110f0d
   d7694:	1513      	.short	0x1513
   d7696:	2e22      	cmp	r6, #34	; 0x22
   d7698:	d001      	beq.n	d769e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d769a:	2e5c      	cmp	r6, #92	; 0x5c
   d769c:	d10f      	bne.n	d76be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d769e:	4631      	mov	r1, r6
                write('b');
   d76a0:	4620      	mov	r0, r4
   d76a2:	f7ff febb 	bl	d741c <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d76a6:	4629      	mov	r1, r5
    while (s != end) {
   d76a8:	e7d4      	b.n	d7654 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d76aa:	2162      	movs	r1, #98	; 0x62
   d76ac:	e7f8      	b.n	d76a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d76ae:	2174      	movs	r1, #116	; 0x74
   d76b0:	e7f6      	b.n	d76a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d76b2:	216e      	movs	r1, #110	; 0x6e
   d76b4:	e7f4      	b.n	d76a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d76b6:	2166      	movs	r1, #102	; 0x66
   d76b8:	e7f2      	b.n	d76a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d76ba:	2172      	movs	r1, #114	; 0x72
   d76bc:	e7f0      	b.n	d76a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d76be:	6823      	ldr	r3, [r4, #0]
   d76c0:	4632      	mov	r2, r6
   d76c2:	68db      	ldr	r3, [r3, #12]
   d76c4:	4641      	mov	r1, r8
   d76c6:	4620      	mov	r0, r4
   d76c8:	4798      	blx	r3
                break;
   d76ca:	e7ec      	b.n	d76a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d76cc:	428d      	cmp	r5, r1
   d76ce:	d004      	beq.n	d76da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d76d0:	6823      	ldr	r3, [r4, #0]
   d76d2:	1a6a      	subs	r2, r5, r1
   d76d4:	689b      	ldr	r3, [r3, #8]
   d76d6:	4620      	mov	r0, r4
   d76d8:	4798      	blx	r3
    }
    write('"');
   d76da:	2122      	movs	r1, #34	; 0x22
   d76dc:	4620      	mov	r0, r4
   d76de:	f7ff fe9d 	bl	d741c <_ZN5spark10JSONWriter5writeEc>
}
   d76e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d76e6:	bf00      	nop
   d76e8:	000da413 	.word	0x000da413

000d76ec <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d76ec:	b513      	push	{r0, r1, r4, lr}
   d76ee:	4604      	mov	r4, r0
   d76f0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d76f4:	f7ff ff64 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d76f8:	4620      	mov	r0, r4
   d76fa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d76fe:	f7ff ff9d 	bl	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d7702:	2302      	movs	r3, #2
}
   d7704:	4620      	mov	r0, r4
    state_ = VALUE;
   d7706:	7123      	strb	r3, [r4, #4]
}
   d7708:	b002      	add	sp, #8
   d770a:	bd10      	pop	{r4, pc}

000d770c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d770c:	b513      	push	{r0, r1, r4, lr}
   d770e:	4604      	mov	r4, r0
   d7710:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7714:	f7ff ff54 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d7718:	4620      	mov	r0, r4
   d771a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d771e:	f7ff ff8d 	bl	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d7722:	2301      	movs	r3, #1
}
   d7724:	4620      	mov	r0, r4
    state_ = NEXT;
   d7726:	7123      	strb	r3, [r4, #4]
}
   d7728:	b002      	add	sp, #8
   d772a:	bd10      	pop	{r4, pc}

000d772c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d772c:	6880      	ldr	r0, [r0, #8]
   d772e:	6803      	ldr	r3, [r0, #0]
   d7730:	68db      	ldr	r3, [r3, #12]
   d7732:	4718      	bx	r3

000d7734 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d7734:	4770      	bx	lr

000d7736 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d7736:	4608      	mov	r0, r1
   d7738:	b111      	cbz	r1, d7740 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d773a:	680b      	ldr	r3, [r1, #0]
   d773c:	685b      	ldr	r3, [r3, #4]
   d773e:	4718      	bx	r3
}
   d7740:	4770      	bx	lr

000d7742 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d7742:	4770      	bx	lr

000d7744 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d7744:	4770      	bx	lr

000d7746 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d7746:	4770      	bx	lr

000d7748 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d7748:	4770      	bx	lr

000d774a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d774a:	b538      	push	{r3, r4, r5, lr}
   d774c:	4604      	mov	r4, r0
   d774e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d7750:	6800      	ldr	r0, [r0, #0]
   d7752:	212e      	movs	r1, #46	; 0x2e
   d7754:	f002 f9d9 	bl	d9b0a <strchrnul>
    size = s - category;
   d7758:	6823      	ldr	r3, [r4, #0]
   d775a:	1ac3      	subs	r3, r0, r3
   d775c:	602b      	str	r3, [r5, #0]
    if (size) {
   d775e:	b123      	cbz	r3, d776a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d7760:	7803      	ldrb	r3, [r0, #0]
   d7762:	b103      	cbz	r3, d7766 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d7764:	3001      	adds	r0, #1
   d7766:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7768:	6020      	str	r0, [r4, #0]
}
   d776a:	4618      	mov	r0, r3
   d776c:	bd38      	pop	{r3, r4, r5, pc}

000d776e <_ZN5spark16JSONStreamWriterD0Ev>:
   d776e:	b510      	push	{r4, lr}
   d7770:	210c      	movs	r1, #12
   d7772:	4604      	mov	r4, r0
   d7774:	f001 fd10 	bl	d9198 <_ZdlPvj>
   d7778:	4620      	mov	r0, r4
   d777a:	bd10      	pop	{r4, pc}

000d777c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d777c:	b510      	push	{r4, lr}
   d777e:	2104      	movs	r1, #4
   d7780:	4604      	mov	r4, r0
   d7782:	f001 fd09 	bl	d9198 <_ZdlPvj>
   d7786:	4620      	mov	r0, r4
   d7788:	bd10      	pop	{r4, pc}

000d778a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d778a:	b510      	push	{r4, lr}
   d778c:	2104      	movs	r1, #4
   d778e:	4604      	mov	r4, r0
   d7790:	f001 fd02 	bl	d9198 <_ZdlPvj>
   d7794:	4620      	mov	r0, r4
   d7796:	bd10      	pop	{r4, pc}

000d7798 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d7798:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d779a:	f002 f9c0 	bl	d9b1e <strcmp>
}
   d779e:	fab0 f080 	clz	r0, r0
   d77a2:	0940      	lsrs	r0, r0, #5
   d77a4:	bd08      	pop	{r3, pc}

000d77a6 <__tcf_1>:
   d77a6:	4770      	bx	lr

000d77a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d77a8:	b510      	push	{r4, lr}
   d77aa:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d77ac:	f001 fb8c 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d77b0:	4284      	cmp	r4, r0
   d77b2:	d010      	beq.n	d77d6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d77b4:	f001 fafe 	bl	d8db4 <_Z22__fetch_global_Serial1v>
   d77b8:	4284      	cmp	r4, r0
   d77ba:	d105      	bne.n	d77c8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d77bc:	f001 fafa 	bl	d8db4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d77c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d77c4:	f001 baf3 	b.w	d8dae <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d77c8:	b12c      	cbz	r4, d77d6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d77ca:	6823      	ldr	r3, [r4, #0]
   d77cc:	4620      	mov	r0, r4
   d77ce:	685b      	ldr	r3, [r3, #4]
}
   d77d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d77d4:	4718      	bx	r3
   d77d6:	bd10      	pop	{r4, pc}

000d77d8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d77d8:	b513      	push	{r0, r1, r4, lr}
   d77da:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d77dc:	4608      	mov	r0, r1
   d77de:	9101      	str	r1, [sp, #4]
   d77e0:	f002 f9cd 	bl	d9b7e <strlen>
   d77e4:	9901      	ldr	r1, [sp, #4]
   d77e6:	4602      	mov	r2, r0
   d77e8:	4620      	mov	r0, r4
}
   d77ea:	b002      	add	sp, #8
   d77ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d77f0:	f7ff bf8c 	b.w	d770c <_ZN5spark10JSONWriter5valueEPKcj>

000d77f4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d77f4:	b513      	push	{r0, r1, r4, lr}
   d77f6:	4604      	mov	r4, r0
    write(str, strlen(str));
   d77f8:	4608      	mov	r0, r1
   d77fa:	9101      	str	r1, [sp, #4]
   d77fc:	f002 f9bf 	bl	d9b7e <strlen>
   d7800:	6823      	ldr	r3, [r4, #0]
   d7802:	9901      	ldr	r1, [sp, #4]
   d7804:	68db      	ldr	r3, [r3, #12]
   d7806:	4602      	mov	r2, r0
   d7808:	4620      	mov	r0, r4
}
   d780a:	b002      	add	sp, #8
   d780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d7810:	4718      	bx	r3

000d7812 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d7812:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d7814:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d7816:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d781a:	68db      	ldr	r3, [r3, #12]
   d781c:	2201      	movs	r2, #1
   d781e:	f10d 0107 	add.w	r1, sp, #7
   d7822:	4798      	blx	r3
}
   d7824:	b003      	add	sp, #12
   d7826:	f85d fb04 	ldr.w	pc, [sp], #4

000d782a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d782a:	b40e      	push	{r1, r2, r3}
   d782c:	b503      	push	{r0, r1, lr}
   d782e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d7830:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d7832:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d7836:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d7838:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d783a:	f000 fffa 	bl	d8832 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d783e:	b002      	add	sp, #8
   d7840:	f85d eb04 	ldr.w	lr, [sp], #4
   d7844:	b003      	add	sp, #12
   d7846:	4770      	bx	lr

000d7848 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d7848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d784c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d7850:	f04f 0814 	mov.w	r8, #20
   d7854:	fb08 f505 	mul.w	r5, r8, r5
   d7858:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d785a:	10ab      	asrs	r3, r5, #2
   d785c:	4d18      	ldr	r5, [pc, #96]	; (d78c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d785e:	4617      	mov	r7, r2
   d7860:	435d      	muls	r5, r3
   d7862:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d7864:	2d00      	cmp	r5, #0
   d7866:	dd23      	ble.n	d78b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d7868:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d786a:	fb08 f006 	mul.w	r0, r8, r6
   d786e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d7872:	463a      	mov	r2, r7
   d7874:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d7878:	5820      	ldr	r0, [r4, r0]
   d787a:	9101      	str	r1, [sp, #4]
   d787c:	455f      	cmp	r7, fp
   d787e:	bf28      	it	cs
   d7880:	465a      	movcs	r2, fp
   d7882:	f002 f984 	bl	d9b8e <strncmp>
                if (cmp == 0) {
   d7886:	9901      	ldr	r1, [sp, #4]
   d7888:	2301      	movs	r3, #1
   d788a:	b978      	cbnz	r0, d78ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d788c:	455f      	cmp	r7, fp
   d788e:	d103      	bne.n	d7898 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d7890:	9a00      	ldr	r2, [sp, #0]
   d7892:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d7894:	4635      	mov	r5, r6
   d7896:	e7e5      	b.n	d7864 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d7898:	bf8c      	ite	hi
   d789a:	2001      	movhi	r0, #1
   d789c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d789e:	2800      	cmp	r0, #0
   d78a0:	d0f8      	beq.n	d7894 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d78a2:	1bae      	subs	r6, r5, r6
	      ++__first;
   d78a4:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d78a8:	3e01      	subs	r6, #1
   d78aa:	e7f3      	b.n	d7894 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d78ac:	0fc0      	lsrs	r0, r0, #31
   d78ae:	e7f6      	b.n	d789e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d78b0:	eba4 0409 	sub.w	r4, r4, r9
}
   d78b4:	4802      	ldr	r0, [pc, #8]	; (d78c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d78b6:	10a4      	asrs	r4, r4, #2
   d78b8:	4360      	muls	r0, r4
   d78ba:	b003      	add	sp, #12
   d78bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d78c0:	cccccccd 	.word	0xcccccccd

000d78c4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d78c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d78c6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d78c8:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d78ca:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d78cc:	b30b      	cbz	r3, d7912 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d78ce:	b301      	cbz	r1, d7912 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d78d0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d78d2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d78d6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d78d8:	a903      	add	r1, sp, #12
   d78da:	a801      	add	r0, sp, #4
   d78dc:	f7ff ff35 	bl	d774a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d78e0:	4601      	mov	r1, r0
   d78e2:	b1b0      	cbz	r0, d7912 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d78e4:	f10d 030b 	add.w	r3, sp, #11
   d78e8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d78ea:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d78ee:	4620      	mov	r0, r4
   d78f0:	f7ff ffaa 	bl	d7848 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d78f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d78f8:	b15b      	cbz	r3, d7912 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d78fa:	6824      	ldr	r4, [r4, #0]
   d78fc:	2314      	movs	r3, #20
   d78fe:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d7902:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d7906:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d790a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d790c:	bfa8      	it	ge
   d790e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d7910:	e7e2      	b.n	d78d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d7912:	4630      	mov	r0, r6
   d7914:	b004      	add	sp, #16
   d7916:	bd70      	pop	{r4, r5, r6, pc}

000d7918 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d7918:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d791a:	4c09      	ldr	r4, [pc, #36]	; (d7940 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d791c:	7823      	ldrb	r3, [r4, #0]
   d791e:	f3bf 8f5b 	dmb	ish
   d7922:	07db      	lsls	r3, r3, #31
   d7924:	d409      	bmi.n	d793a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d7926:	4620      	mov	r0, r4
   d7928:	f7fc fbc6 	bl	d40b8 <__cxa_guard_acquire>
   d792c:	b128      	cbz	r0, d793a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d792e:	4620      	mov	r0, r4
   d7930:	f7fc fbc7 	bl	d40c2 <__cxa_guard_release>
   d7934:	4803      	ldr	r0, [pc, #12]	; (d7944 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d7936:	f002 f84d 	bl	d99d4 <atexit>
}
   d793a:	4803      	ldr	r0, [pc, #12]	; (d7948 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d793c:	bd10      	pop	{r4, pc}
   d793e:	bf00      	nop
   d7940:	2003e588 	.word	0x2003e588
   d7944:	000d7743 	.word	0x000d7743
   d7948:	2003ddbc 	.word	0x2003ddbc

000d794c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d794c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d794e:	4c09      	ldr	r4, [pc, #36]	; (d7974 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d7950:	7823      	ldrb	r3, [r4, #0]
   d7952:	f3bf 8f5b 	dmb	ish
   d7956:	07db      	lsls	r3, r3, #31
   d7958:	d409      	bmi.n	d796e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d795a:	4620      	mov	r0, r4
   d795c:	f7fc fbac 	bl	d40b8 <__cxa_guard_acquire>
   d7960:	b128      	cbz	r0, d796e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7962:	4620      	mov	r0, r4
   d7964:	f7fc fbad 	bl	d40c2 <__cxa_guard_release>
   d7968:	4803      	ldr	r0, [pc, #12]	; (d7978 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d796a:	f002 f833 	bl	d99d4 <atexit>
    return &factory;
}
   d796e:	4803      	ldr	r0, [pc, #12]	; (d797c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7970:	bd10      	pop	{r4, pc}
   d7972:	bf00      	nop
   d7974:	2003e58c 	.word	0x2003e58c
   d7978:	000d77a7 	.word	0x000d77a7
   d797c:	2003ddc0 	.word	0x2003ddc0

000d7980 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d7980:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d7982:	2500      	movs	r5, #0
   d7984:	4604      	mov	r4, r0
   d7986:	e9c0 5500 	strd	r5, r5, [r0]
   d798a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d798e:	6085      	str	r5, [r0, #8]
   d7990:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d7992:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d7996:	f7fe fd79 	bl	d648c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d799a:	f7ff ffbd 	bl	d7918 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d799e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d79a0:	f7ff ffd4 	bl	d794c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d79a4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d79a6:	6220      	str	r0, [r4, #32]
}
   d79a8:	4620      	mov	r0, r4
   d79aa:	bd38      	pop	{r3, r4, r5, pc}

000d79ac <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d79ac:	b510      	push	{r4, lr}
    static LogManager mgr;
   d79ae:	4c0a      	ldr	r4, [pc, #40]	; (d79d8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d79b0:	7823      	ldrb	r3, [r4, #0]
   d79b2:	f3bf 8f5b 	dmb	ish
   d79b6:	07db      	lsls	r3, r3, #31
   d79b8:	d40c      	bmi.n	d79d4 <_ZN5spark10LogManager8instanceEv+0x28>
   d79ba:	4620      	mov	r0, r4
   d79bc:	f7fc fb7c 	bl	d40b8 <__cxa_guard_acquire>
   d79c0:	b140      	cbz	r0, d79d4 <_ZN5spark10LogManager8instanceEv+0x28>
   d79c2:	4806      	ldr	r0, [pc, #24]	; (d79dc <_ZN5spark10LogManager8instanceEv+0x30>)
   d79c4:	f7ff ffdc 	bl	d7980 <_ZN5spark10LogManagerC1Ev>
   d79c8:	4620      	mov	r0, r4
   d79ca:	f7fc fb7a 	bl	d40c2 <__cxa_guard_release>
   d79ce:	4804      	ldr	r0, [pc, #16]	; (d79e0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d79d0:	f002 f800 	bl	d99d4 <atexit>
    return &mgr;
}
   d79d4:	4801      	ldr	r0, [pc, #4]	; (d79dc <_ZN5spark10LogManager8instanceEv+0x30>)
   d79d6:	bd10      	pop	{r4, pc}
   d79d8:	2003e584 	.word	0x2003e584
   d79dc:	2003e594 	.word	0x2003e594
   d79e0:	000d7e15 	.word	0x000d7e15

000d79e4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d79e4:	4a02      	ldr	r2, [pc, #8]	; (d79f0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d79e6:	4903      	ldr	r1, [pc, #12]	; (d79f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d79e8:	4803      	ldr	r0, [pc, #12]	; (d79f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d79ea:	2300      	movs	r3, #0
   d79ec:	f7fe bf26 	b.w	d683c <log_set_callbacks>
   d79f0:	000d7c9d 	.word	0x000d7c9d
   d79f4:	000d7c29 	.word	0x000d7c29
   d79f8:	000d7ba9 	.word	0x000d7ba9

000d79fc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d79fc:	2300      	movs	r3, #0
   d79fe:	461a      	mov	r2, r3
   d7a00:	4619      	mov	r1, r3
   d7a02:	4618      	mov	r0, r3
   d7a04:	f7fe bf1a 	b.w	d683c <log_set_callbacks>

000d7a08 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7a08:	b570      	push	{r4, r5, r6, lr}
   d7a0a:	b08a      	sub	sp, #40	; 0x28
   d7a0c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d7a0e:	4601      	mov	r1, r0
   d7a10:	a804      	add	r0, sp, #16
   d7a12:	f7fd faa0 	bl	d4f56 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d7a16:	4e14      	ldr	r6, [pc, #80]	; (d7a68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d7a18:	a804      	add	r0, sp, #16
   d7a1a:	f7ff fdb5 	bl	d7588 <_ZN5spark18JSONObjectIterator4nextEv>
   d7a1e:	b1e8      	cbz	r0, d7a5c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d7a20:	a904      	add	r1, sp, #16
   d7a22:	4668      	mov	r0, sp
   d7a24:	f7fd faa8 	bl	d4f78 <_ZNK5spark18JSONObjectIterator4nameEv>
   d7a28:	9802      	ldr	r0, [sp, #8]
   d7a2a:	4631      	mov	r1, r6
   d7a2c:	f7ff feb4 	bl	d7798 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d7a30:	4604      	mov	r4, r0
   d7a32:	b110      	cbz	r0, d7a3a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d7a34:	1e2c      	subs	r4, r5, #0
   d7a36:	bf18      	it	ne
   d7a38:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   d7a3a:	a801      	add	r0, sp, #4
   d7a3c:	f7fc fbfc 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a40:	2c00      	cmp	r4, #0
   d7a42:	d0e9      	beq.n	d7a18 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d7a44:	a904      	add	r1, sp, #16
   d7a46:	4668      	mov	r0, sp
   d7a48:	f7fd faa7 	bl	d4f9a <_ZNK5spark18JSONObjectIterator5valueEv>
   d7a4c:	4668      	mov	r0, sp
   d7a4e:	f7ff fd3e 	bl	d74ce <_ZNK5spark9JSONValue5toIntEv>
   d7a52:	6028      	str	r0, [r5, #0]
   d7a54:	a801      	add	r0, sp, #4
   d7a56:	f7fc fbef 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a5a:	e7dd      	b.n	d7a18 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d7a5c:	a805      	add	r0, sp, #20
   d7a5e:	f7fc fbeb 	bl	d4238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7a62:	b00a      	add	sp, #40	; 0x28
   d7a64:	bd70      	pop	{r4, r5, r6, pc}
   d7a66:	bf00      	nop
   d7a68:	000da419 	.word	0x000da419

000d7a6c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a6e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d7a70:	4620      	mov	r0, r4
   d7a72:	4912      	ldr	r1, [pc, #72]	; (d7abc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7a74:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d7a76:	f002 f852 	bl	d9b1e <strcmp>
   d7a7a:	b948      	cbnz	r0, d7a90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d7a7c:	f001 fa24 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d7a80:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d7a84:	f001 fa0e 	bl	d8ea4 <_ZN9USBSerial5beginEl>
        return &Serial;
   d7a88:	f001 fa1e 	bl	d8ec8 <_Z16_fetch_usbserialv>
}
   d7a8c:	b003      	add	sp, #12
   d7a8e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d7a90:	490b      	ldr	r1, [pc, #44]	; (d7ac0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d7a92:	4620      	mov	r0, r4
   d7a94:	f002 f843 	bl	d9b1e <strcmp>
   d7a98:	b970      	cbnz	r0, d7ab8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d7a9a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d7a9e:	a901      	add	r1, sp, #4
   d7aa0:	4628      	mov	r0, r5
        int baud = 9600;
   d7aa2:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d7aa4:	f7ff ffb0 	bl	d7a08 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d7aa8:	f001 f984 	bl	d8db4 <_Z22__fetch_global_Serial1v>
   d7aac:	9901      	ldr	r1, [sp, #4]
   d7aae:	f001 f97b 	bl	d8da8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d7ab2:	f001 f97f 	bl	d8db4 <_Z22__fetch_global_Serial1v>
   d7ab6:	e7e9      	b.n	d7a8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d7ab8:	2000      	movs	r0, #0
   d7aba:	e7e7      	b.n	d7a8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d7abc:	000da41e 	.word	0x000da41e
   d7ac0:	000da425 	.word	0x000da425

000d7ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7ac4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7ac6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d7aca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7acc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7ace:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7ad2:	42ae      	cmp	r6, r5
   d7ad4:	d005      	beq.n	d7ae2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d7ad6:	f105 0008 	add.w	r0, r5, #8
   d7ada:	f7ff fff3 	bl	d7ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7ade:	3514      	adds	r5, #20
   d7ae0:	e7f7      	b.n	d7ad2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d7ae2:	6820      	ldr	r0, [r4, #0]
   d7ae4:	f7fe ffa0 	bl	d6a28 <free>
}
   d7ae8:	4620      	mov	r0, r4
   d7aea:	bd70      	pop	{r4, r5, r6, pc}

000d7aec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7aec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7aee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7af2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7af4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d7af8:	42ae      	cmp	r6, r5
   d7afa:	d004      	beq.n	d7b06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7afc:	4628      	mov	r0, r5
   d7afe:	f000 ffa5 	bl	d8a4c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d7b02:	3510      	adds	r5, #16
   d7b04:	e7f8      	b.n	d7af8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7b06:	6820      	ldr	r0, [r4, #0]
   d7b08:	f7fe ff8e 	bl	d6a28 <free>
}
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	bd70      	pop	{r4, r5, r6, pc}

000d7b10 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d7b10:	b510      	push	{r4, lr}
   d7b12:	4604      	mov	r4, r0
   d7b14:	300c      	adds	r0, #12
   d7b16:	f7ff ffd5 	bl	d7ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7b1a:	4620      	mov	r0, r4
   d7b1c:	f7ff ffe6 	bl	d7aec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7b20:	4620      	mov	r0, r4
   d7b22:	bd10      	pop	{r4, pc}

000d7b24 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d7b24:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d7b26:	4b04      	ldr	r3, [pc, #16]	; (d7b38 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d7b28:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d7b2a:	f840 3b04 	str.w	r3, [r0], #4
   d7b2e:	f7ff ffef 	bl	d7b10 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d7b32:	4620      	mov	r0, r4
   d7b34:	bd10      	pop	{r4, pc}
   d7b36:	bf00      	nop
   d7b38:	000da018 	.word	0x000da018

000d7b3c <_ZN5spark16StreamLogHandlerD0Ev>:
   d7b3c:	b510      	push	{r4, lr}
   d7b3e:	4604      	mov	r4, r0
   d7b40:	f7ff fff0 	bl	d7b24 <_ZN5spark16StreamLogHandlerD1Ev>
   d7b44:	4620      	mov	r0, r4
   d7b46:	2124      	movs	r1, #36	; 0x24
   d7b48:	f001 fb26 	bl	d9198 <_ZdlPvj>
   d7b4c:	4620      	mov	r0, r4
   d7b4e:	bd10      	pop	{r4, pc}

000d7b50 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d7b50:	b510      	push	{r4, lr}
   d7b52:	4b03      	ldr	r3, [pc, #12]	; (d7b60 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7b54:	6003      	str	r3, [r0, #0]
   d7b56:	4604      	mov	r4, r0
   d7b58:	f7ff ffe4 	bl	d7b24 <_ZN5spark16StreamLogHandlerD1Ev>
   d7b5c:	4620      	mov	r0, r4
   d7b5e:	bd10      	pop	{r4, pc}
   d7b60:	000da4c4 	.word	0x000da4c4

000d7b64 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7b64:	b510      	push	{r4, lr}
   d7b66:	4604      	mov	r4, r0
   d7b68:	f7ff fff2 	bl	d7b50 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7b6c:	4620      	mov	r0, r4
   d7b6e:	2124      	movs	r1, #36	; 0x24
   d7b70:	f001 fb12 	bl	d9198 <_ZdlPvj>
   d7b74:	4620      	mov	r0, r4
   d7b76:	bd10      	pop	{r4, pc}

000d7b78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d7b78:	2200      	movs	r2, #0
   d7b7a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7b7e:	b510      	push	{r4, lr}
        capacity_(0) {
   d7b80:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7b82:	680c      	ldr	r4, [r1, #0]
   d7b84:	6004      	str	r4, [r0, #0]
   d7b86:	684c      	ldr	r4, [r1, #4]
   d7b88:	6044      	str	r4, [r0, #4]
   d7b8a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b8c:	600a      	str	r2, [r1, #0]
   d7b8e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7b90:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b92:	608a      	str	r2, [r1, #8]
}
   d7b94:	bd10      	pop	{r4, pc}

000d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7b96:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d7b98:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d7b9a:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7b9c:	6818      	ldr	r0, [r3, #0]
   d7b9e:	f7fe fc8d 	bl	d64bc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7ba2:	4620      	mov	r0, r4
   d7ba4:	bd10      	pop	{r4, pc}
	...

000d7ba8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7bac:	b087      	sub	sp, #28
   d7bae:	4680      	mov	r8, r0
   d7bb0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d7bb2:	4b1c      	ldr	r3, [pc, #112]	; (d7c24 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d7bb4:	685b      	ldr	r3, [r3, #4]
   d7bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7bba:	4689      	mov	r9, r1
   d7bbc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7bbe:	b96b      	cbnz	r3, d7bdc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d7bc0:	f7ff fef4 	bl	d79ac <_ZN5spark10LogManager8instanceEv>
   d7bc4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7bc6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d7bca:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7bcc:	9305      	str	r3, [sp, #20]
   d7bce:	f7fe fc6d 	bl	d64ac <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d7bd2:	7b23      	ldrb	r3, [r4, #12]
   d7bd4:	b12b      	cbz	r3, d7be2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d7bd6:	a805      	add	r0, sp, #20
   d7bd8:	f7ff ffdd 	bl	d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d7bdc:	b007      	add	sp, #28
   d7bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7be2:	2301      	movs	r3, #1
   d7be4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d7be6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d7bea:	fa5f f989 	uxtb.w	r9, r9
   d7bee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7bf2:	45aa      	cmp	sl, r5
   d7bf4:	d012      	beq.n	d7c1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d7bf6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d7bfa:	4631      	mov	r1, r6
   d7bfc:	1d38      	adds	r0, r7, #4
   d7bfe:	f7ff fe61 	bl	d78c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7c02:	4581      	cmp	r9, r0
   d7c04:	d3f5      	bcc.n	d7bf2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d7c06:	683b      	ldr	r3, [r7, #0]
   d7c08:	9a03      	ldr	r2, [sp, #12]
   d7c0a:	9200      	str	r2, [sp, #0]
   d7c0c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d7c10:	464a      	mov	r2, r9
   d7c12:	4633      	mov	r3, r6
   d7c14:	4641      	mov	r1, r8
   d7c16:	4638      	mov	r0, r7
   d7c18:	47d8      	blx	fp
   d7c1a:	e7ea      	b.n	d7bf2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d7c1c:	2300      	movs	r3, #0
   d7c1e:	7323      	strb	r3, [r4, #12]
   d7c20:	e7d9      	b.n	d7bd6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d7c22:	bf00      	nop
   d7c24:	e000ed00 	.word	0xe000ed00

000d7c28 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c2c:	469b      	mov	fp, r3
   d7c2e:	4b1a      	ldr	r3, [pc, #104]	; (d7c98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d7c30:	685b      	ldr	r3, [r3, #4]
   d7c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7c36:	4680      	mov	r8, r0
   d7c38:	4689      	mov	r9, r1
   d7c3a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d7c3c:	b96b      	cbnz	r3, d7c5a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d7c3e:	f7ff feb5 	bl	d79ac <_ZN5spark10LogManager8instanceEv>
   d7c42:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7c44:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d7c48:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7c4a:	9301      	str	r3, [sp, #4]
   d7c4c:	f7fe fc2e 	bl	d64ac <os_mutex_recursive_lock>
        if (that->isActive()) {
   d7c50:	7b23      	ldrb	r3, [r4, #12]
   d7c52:	b12b      	cbz	r3, d7c60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d7c54:	a801      	add	r0, sp, #4
   d7c56:	f7ff ff9e 	bl	d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7c5a:	b003      	add	sp, #12
   d7c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d7c60:	2301      	movs	r3, #1
   d7c62:	7323      	strb	r3, [r4, #12]
   d7c64:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d7c68:	b2f6      	uxtb	r6, r6
   d7c6a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7c6e:	4555      	cmp	r5, sl
   d7c70:	d00e      	beq.n	d7c90 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d7c72:	f855 7b04 	ldr.w	r7, [r5], #4
   d7c76:	4659      	mov	r1, fp
   d7c78:	1d38      	adds	r0, r7, #4
   d7c7a:	f7ff fe23 	bl	d78c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7c7e:	4286      	cmp	r6, r0
   d7c80:	d3f5      	bcc.n	d7c6e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d7c82:	683b      	ldr	r3, [r7, #0]
   d7c84:	464a      	mov	r2, r9
   d7c86:	68db      	ldr	r3, [r3, #12]
   d7c88:	4641      	mov	r1, r8
   d7c8a:	4638      	mov	r0, r7
   d7c8c:	4798      	blx	r3
   d7c8e:	e7ee      	b.n	d7c6e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d7c90:	2300      	movs	r3, #0
   d7c92:	7323      	strb	r3, [r4, #12]
   d7c94:	e7de      	b.n	d7c54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d7c96:	bf00      	nop
   d7c98:	e000ed00 	.word	0xe000ed00

000d7c9c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7c9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7ca0:	4b16      	ldr	r3, [pc, #88]	; (d7cfc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d7ca2:	685b      	ldr	r3, [r3, #4]
   d7ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7ca8:	4605      	mov	r5, r0
   d7caa:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d7cac:	bb1b      	cbnz	r3, d7cf6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d7cae:	f7ff fe7d 	bl	d79ac <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d7cb2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d7cb6:	4604      	mov	r4, r0
   d7cb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7cba:	9301      	str	r3, [sp, #4]
   d7cbc:	f7fe fbf6 	bl	d64ac <os_mutex_recursive_lock>
   d7cc0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d7cc4:	2446      	movs	r4, #70	; 0x46
   d7cc6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7cca:	45b0      	cmp	r8, r6
   d7ccc:	d109      	bne.n	d7ce2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d7cce:	a801      	add	r0, sp, #4
   d7cd0:	f7ff ff61 	bl	d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d7cd4:	42a5      	cmp	r5, r4
   d7cd6:	bfb4      	ite	lt
   d7cd8:	2000      	movlt	r0, #0
   d7cda:	2001      	movge	r0, #1
}
   d7cdc:	b002      	add	sp, #8
   d7cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d7ce2:	f856 0b04 	ldr.w	r0, [r6], #4
   d7ce6:	4639      	mov	r1, r7
   d7ce8:	3004      	adds	r0, #4
   d7cea:	f7ff fdeb 	bl	d78c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d7cee:	4284      	cmp	r4, r0
   d7cf0:	bfa8      	it	ge
   d7cf2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d7cf4:	e7e9      	b.n	d7cca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d7cf6:	2000      	movs	r0, #0
   d7cf8:	e7f0      	b.n	d7cdc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d7cfa:	bf00      	nop
   d7cfc:	e000ed00 	.word	0xe000ed00

000d7d00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7d00:	b570      	push	{r4, r5, r6, lr}
   d7d02:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7d04:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7d08:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d7d0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d7d0e:	4282      	cmp	r2, r0
   d7d10:	d007      	beq.n	d7d22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d7d12:	4601      	mov	r1, r0
            if (*p == value) {
   d7d14:	681d      	ldr	r5, [r3, #0]
   d7d16:	f851 6b04 	ldr.w	r6, [r1], #4
   d7d1a:	42ae      	cmp	r6, r5
   d7d1c:	d003      	beq.n	d7d26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d7d1e:	4608      	mov	r0, r1
   d7d20:	e7f5      	b.n	d7d0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d7d22:	2000      	movs	r0, #0
}
   d7d24:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7d26:	1a52      	subs	r2, r2, r1
   d7d28:	f001 fe68 	bl	d99fc <memmove>
    --size_;
   d7d2c:	6863      	ldr	r3, [r4, #4]
   d7d2e:	3b01      	subs	r3, #1
   d7d30:	6063      	str	r3, [r4, #4]
    return true;
   d7d32:	2001      	movs	r0, #1
   d7d34:	e7f6      	b.n	d7d24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d7d36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7d36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d7d38:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7d3c:	4604      	mov	r4, r0
   d7d3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7d40:	9101      	str	r1, [sp, #4]
   d7d42:	9303      	str	r3, [sp, #12]
   d7d44:	f7fe fbb2 	bl	d64ac <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7d48:	a901      	add	r1, sp, #4
   d7d4a:	4620      	mov	r0, r4
   d7d4c:	f7ff ffd8 	bl	d7d00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7d50:	b118      	cbz	r0, d7d5a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d7d52:	6863      	ldr	r3, [r4, #4]
   d7d54:	b90b      	cbnz	r3, d7d5a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d7d56:	f7ff fe51 	bl	d79fc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7d5a:	a803      	add	r0, sp, #12
   d7d5c:	f7ff ff1b 	bl	d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7d60:	b004      	add	sp, #16
   d7d62:	bd10      	pop	{r4, pc}

000d7d64 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d7d64:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d7d66:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d7d6a:	2318      	movs	r3, #24
   d7d6c:	4604      	mov	r4, r0
   d7d6e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7d72:	42ae      	cmp	r6, r5
   d7d74:	d015      	beq.n	d7da2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7d76:	f105 0110 	add.w	r1, r5, #16
   d7d7a:	4620      	mov	r0, r4
   d7d7c:	f7ff ffc0 	bl	d7d00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7d80:	6863      	ldr	r3, [r4, #4]
   d7d82:	b90b      	cbnz	r3, d7d88 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7d84:	f7ff fe3a 	bl	d79fc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d7d88:	69e0      	ldr	r0, [r4, #28]
   d7d8a:	6929      	ldr	r1, [r5, #16]
   d7d8c:	6803      	ldr	r3, [r0, #0]
   d7d8e:	68db      	ldr	r3, [r3, #12]
   d7d90:	4798      	blx	r3
        if (h.stream) {
   d7d92:	6969      	ldr	r1, [r5, #20]
   d7d94:	b119      	cbz	r1, d7d9e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7d96:	6a20      	ldr	r0, [r4, #32]
   d7d98:	6803      	ldr	r3, [r0, #0]
   d7d9a:	68db      	ldr	r3, [r3, #12]
   d7d9c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d7d9e:	3518      	adds	r5, #24
   d7da0:	e7e7      	b.n	d7d72 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d7da2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7da6:	2618      	movs	r6, #24
   d7da8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7dac:	42ae      	cmp	r6, r5
   d7dae:	d004      	beq.n	d7dba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d7db0:	4628      	mov	r0, r5
   d7db2:	f000 fe4b 	bl	d8a4c <_ZN6StringD1Ev>
   d7db6:	3518      	adds	r5, #24
   d7db8:	e7f8      	b.n	d7dac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d7dba:	2300      	movs	r3, #0
   d7dbc:	6163      	str	r3, [r4, #20]
}
   d7dbe:	bd70      	pop	{r4, r5, r6, pc}

000d7dc0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d7dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7dc2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d7dc4:	f7ff fe1a 	bl	d79fc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7dc8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d7dcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7dce:	9301      	str	r3, [sp, #4]
   d7dd0:	f7fe fb6c 	bl	d64ac <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d7dd4:	4620      	mov	r0, r4
   d7dd6:	f7ff ffc5 	bl	d7d64 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d7dda:	a801      	add	r0, sp, #4
   d7ddc:	f7ff fedb 	bl	d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d7de0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7de2:	b108      	cbz	r0, d7de8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d7de4:	f7fe fb5a 	bl	d649c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d7de8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7dec:	2618      	movs	r6, #24
   d7dee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7df2:	42ae      	cmp	r6, r5
   d7df4:	d004      	beq.n	d7e00 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d7df6:	4628      	mov	r0, r5
   d7df8:	f000 fe28 	bl	d8a4c <_ZN6StringD1Ev>
   d7dfc:	3518      	adds	r5, #24
   d7dfe:	e7f8      	b.n	d7df2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d7e00:	6920      	ldr	r0, [r4, #16]
   d7e02:	f7fe fe11 	bl	d6a28 <free>
   d7e06:	6820      	ldr	r0, [r4, #0]
   d7e08:	f7fe fe0e 	bl	d6a28 <free>
}
   d7e0c:	4620      	mov	r0, r4
   d7e0e:	b002      	add	sp, #8
   d7e10:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7e14 <__tcf_2>:
    static LogManager mgr;
   d7e14:	4801      	ldr	r0, [pc, #4]	; (d7e1c <__tcf_2+0x8>)
   d7e16:	f7ff bfd3 	b.w	d7dc0 <_ZN5spark10LogManagerD1Ev>
   d7e1a:	bf00      	nop
   d7e1c:	2003e594 	.word	0x2003e594

000d7e20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d7e20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e24:	4606      	mov	r6, r0
   d7e26:	460c      	mov	r4, r1
   d7e28:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7e2a:	d927      	bls.n	d7e7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d7e2c:	4290      	cmp	r0, r2
   d7e2e:	d226      	bcs.n	d7e7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d7e30:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d7e34:	1a6c      	subs	r4, r5, r1
   d7e36:	f1a1 0714 	sub.w	r7, r1, #20
   d7e3a:	4404      	add	r4, r0
        capacity_(0) {
   d7e3c:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d7e3e:	42af      	cmp	r7, r5
   d7e40:	d03d      	beq.n	d7ebe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d7e42:	b1a4      	cbz	r4, d7e6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d7e44:	682b      	ldr	r3, [r5, #0]
   d7e46:	6023      	str	r3, [r4, #0]
   d7e48:	88ab      	ldrh	r3, [r5, #4]
   d7e4a:	80a3      	strh	r3, [r4, #4]
   d7e4c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d7e50:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d7e52:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d7e56:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e58:	68ab      	ldr	r3, [r5, #8]
   d7e5a:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e5c:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e5e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7e60:	68ea      	ldr	r2, [r5, #12]
   d7e62:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e64:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e66:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e68:	692a      	ldr	r2, [r5, #16]
   d7e6a:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e6c:	612b      	str	r3, [r5, #16]
   d7e6e:	f105 0008 	add.w	r0, r5, #8
   d7e72:	f7ff fe27 	bl	d7ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d7e76:	3d14      	subs	r5, #20
   d7e78:	3c14      	subs	r4, #20
   d7e7a:	e7e0      	b.n	d7e3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d7e7c:	d01f      	beq.n	d7ebe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d7e7e:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d7e80:	42ac      	cmp	r4, r5
   d7e82:	d01c      	beq.n	d7ebe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d7e84:	b1a6      	cbz	r6, d7eb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d7e86:	6823      	ldr	r3, [r4, #0]
   d7e88:	6033      	str	r3, [r6, #0]
   d7e8a:	88a3      	ldrh	r3, [r4, #4]
   d7e8c:	80b3      	strh	r3, [r6, #4]
   d7e8e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d7e92:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d7e94:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d7e98:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e9a:	68a3      	ldr	r3, [r4, #8]
   d7e9c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e9e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ea0:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7ea2:	68e2      	ldr	r2, [r4, #12]
   d7ea4:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ea6:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ea8:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7eaa:	6922      	ldr	r2, [r4, #16]
   d7eac:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7eae:	6123      	str	r3, [r4, #16]
   d7eb0:	f104 0008 	add.w	r0, r4, #8
   d7eb4:	f7ff fe06 	bl	d7ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d7eb8:	3414      	adds	r4, #20
   d7eba:	3614      	adds	r6, #20
   d7ebc:	e7e0      	b.n	d7e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d7ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ec0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7ec2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d7ec6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7ec8:	4604      	mov	r4, r0
   d7eca:	460e      	mov	r6, r1
   d7ecc:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7ece:	db0d      	blt.n	d7eec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d7ed0:	3501      	adds	r5, #1
        if (n > 0) {
   d7ed2:	2d00      	cmp	r5, #0
   d7ed4:	6800      	ldr	r0, [r0, #0]
   d7ed6:	dd04      	ble.n	d7ee2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d7ed8:	00a9      	lsls	r1, r5, #2
   d7eda:	f7fe fdad 	bl	d6a38 <realloc>
            if (!d) {
   d7ede:	b918      	cbnz	r0, d7ee8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d7ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d7ee2:	f7fe fda1 	bl	d6a28 <free>
        T* d = nullptr;
   d7ee6:	2000      	movs	r0, #0
        data_ = d;
   d7ee8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7eea:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d7eec:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7eee:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7ef0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d7ef4:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7ef6:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d7efa:	1d08      	adds	r0, r1, #4
   d7efc:	f001 fd7e 	bl	d99fc <memmove>
    new(p) T(std::move(value));
   d7f00:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7f04:	6863      	ldr	r3, [r4, #4]
   d7f06:	3301      	adds	r3, #1
   d7f08:	6063      	str	r3, [r4, #4]
    return true;
   d7f0a:	2001      	movs	r0, #1
   d7f0c:	e7e8      	b.n	d7ee0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d7f0e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7f0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d7f10:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7f14:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d7f16:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	460d      	mov	r5, r1
   d7f1c:	f7fe fac6 	bl	d64ac <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d7f20:	e9d4 3100 	ldrd	r3, r1, [r4]
   d7f24:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d7f28:	4283      	cmp	r3, r0
   d7f2a:	461a      	mov	r2, r3
   d7f2c:	d00b      	beq.n	d7f46 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d7f2e:	6812      	ldr	r2, [r2, #0]
   d7f30:	42aa      	cmp	r2, r5
   d7f32:	f103 0304 	add.w	r3, r3, #4
   d7f36:	d1f7      	bne.n	d7f28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d7f38:	a801      	add	r0, sp, #4
   d7f3a:	f7ff fe2c 	bl	d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d7f3e:	2500      	movs	r5, #0
}
   d7f40:	4628      	mov	r0, r5
   d7f42:	b003      	add	sp, #12
   d7f44:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d7f46:	462a      	mov	r2, r5
   d7f48:	4620      	mov	r0, r4
   d7f4a:	f7ff ffb9 	bl	d7ec0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7f4e:	4605      	mov	r5, r0
   d7f50:	2800      	cmp	r0, #0
   d7f52:	d0f1      	beq.n	d7f38 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d7f54:	6863      	ldr	r3, [r4, #4]
   d7f56:	2b01      	cmp	r3, #1
   d7f58:	d101      	bne.n	d7f5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d7f5a:	f7ff fd43 	bl	d79e4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7f5e:	a801      	add	r0, sp, #4
   d7f60:	f7ff fe19 	bl	d7b96 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7f64:	e7ec      	b.n	d7f40 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d7f66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d7f66:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f6a:	4604      	mov	r4, r0
   d7f6c:	460d      	mov	r5, r1
   d7f6e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7f70:	d914      	bls.n	d7f9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7f72:	4290      	cmp	r0, r2
   d7f74:	d213      	bcs.n	d7f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d7f76:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d7f7a:	1a75      	subs	r5, r6, r1
   d7f7c:	f1a1 0710 	sub.w	r7, r1, #16
   d7f80:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7f82:	42b7      	cmp	r7, r6
   d7f84:	d018      	beq.n	d7fb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7f86:	b11c      	cbz	r4, d7f90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7f88:	4631      	mov	r1, r6
   d7f8a:	4620      	mov	r0, r4
   d7f8c:	f000 fdda 	bl	d8b44 <_ZN6StringC1EOS_>
                end->~T();
   d7f90:	4630      	mov	r0, r6
   d7f92:	f000 fd5b 	bl	d8a4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d7f96:	3e10      	subs	r6, #16
   d7f98:	3c10      	subs	r4, #16
   d7f9a:	e7f2      	b.n	d7f82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d7f9c:	d00c      	beq.n	d7fb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7f9e:	42b5      	cmp	r5, r6
   d7fa0:	d00a      	beq.n	d7fb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7fa2:	b11c      	cbz	r4, d7fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7fa4:	4629      	mov	r1, r5
   d7fa6:	4620      	mov	r0, r4
   d7fa8:	f000 fdcc 	bl	d8b44 <_ZN6StringC1EOS_>
                p->~T();
   d7fac:	4628      	mov	r0, r5
   d7fae:	f000 fd4d 	bl	d8a4c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d7fb2:	3510      	adds	r5, #16
   d7fb4:	3410      	adds	r4, #16
   d7fb6:	e7f2      	b.n	d7f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d7fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d7fba:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7fbc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7fbe:	4605      	mov	r5, r0
        if (n > 0) {
   d7fc0:	dd11      	ble.n	d7fe6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7fc2:	0130      	lsls	r0, r6, #4
   d7fc4:	f7fe fd28 	bl	d6a18 <malloc>
            if (!d) {
   d7fc8:	4604      	mov	r4, r0
   d7fca:	b158      	cbz	r0, d7fe4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7fcc:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7fd0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7fd4:	f7ff ffc7 	bl	d7f66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d7fd8:	6828      	ldr	r0, [r5, #0]
   d7fda:	f7fe fd25 	bl	d6a28 <free>
        data_ = d;
   d7fde:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7fe0:	60ae      	str	r6, [r5, #8]
        return true;
   d7fe2:	2001      	movs	r0, #1
    }
   d7fe4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7fe6:	2400      	movs	r4, #0
   d7fe8:	e7f6      	b.n	d7fd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d7fea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fee:	4691      	mov	r9, r2
   d7ff0:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d7ff2:	2300      	movs	r3, #0
   d7ff4:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d7ff6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d7ffa:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7ffc:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d7ffe:	4299      	cmp	r1, r3
        capacity_(0) {
   d8000:	e9c0 3300 	strd	r3, r3, [r0]
   d8004:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d8008:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d800c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d8010:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d8012:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d8014:	dc23      	bgt.n	d805e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d8016:	e9d9 5700 	ldrd	r5, r7, [r9]
   d801a:	2314      	movs	r3, #20
   d801c:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d8020:	42af      	cmp	r7, r5
   d8022:	d03b      	beq.n	d809c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d8024:	4629      	mov	r1, r5
   d8026:	a80d      	add	r0, sp, #52	; 0x34
   d8028:	f000 fd8c 	bl	d8b44 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d802c:	a90d      	add	r1, sp, #52	; 0x34
   d802e:	a811      	add	r0, sp, #68	; 0x44
   d8030:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d8032:	f000 fd87 	bl	d8b44 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8036:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d803a:	4299      	cmp	r1, r3
   d803c:	da1b      	bge.n	d8076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d803e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d8040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d8042:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d8046:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d804a:	4631      	mov	r1, r6
   d804c:	f106 0010 	add.w	r0, r6, #16
   d8050:	f7ff ff89 	bl	d7f66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d8054:	b9ee      	cbnz	r6, d8092 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d8056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8058:	3301      	adds	r3, #1
   d805a:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d805c:	e011      	b.n	d8082 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d805e:	a80a      	add	r0, sp, #40	; 0x28
   d8060:	f7ff ffab 	bl	d7fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d8064:	2800      	cmp	r0, #0
   d8066:	d1d6      	bne.n	d8016 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d8068:	a80a      	add	r0, sp, #40	; 0x28
   d806a:	f7ff fd3f 	bl	d7aec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d806e:	4620      	mov	r0, r4
   d8070:	b017      	add	sp, #92	; 0x5c
   d8072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8076:	3101      	adds	r1, #1
   d8078:	a80a      	add	r0, sp, #40	; 0x28
   d807a:	f7ff ff9e 	bl	d7fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d807e:	2800      	cmp	r0, #0
   d8080:	d1dd      	bne.n	d803e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d8082:	a811      	add	r0, sp, #68	; 0x44
   d8084:	f000 fce2 	bl	d8a4c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d8088:	a80d      	add	r0, sp, #52	; 0x34
   d808a:	f000 fcdf 	bl	d8a4c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d808e:	3514      	adds	r5, #20
   d8090:	e7c6      	b.n	d8020 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d8092:	a911      	add	r1, sp, #68	; 0x44
   d8094:	4630      	mov	r0, r6
   d8096:	f000 fd55 	bl	d8b44 <_ZN6StringC1EOS_>
   d809a:	e7dc      	b.n	d8056 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d809c:	2600      	movs	r6, #0
   d809e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d80a2:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d80a4:	4637      	mov	r7, r6
   d80a6:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d80aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d80ae:	429e      	cmp	r6, r3
   d80b0:	f280 8097 	bge.w	d81e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d80b4:	0133      	lsls	r3, r6, #4
   d80b6:	58d3      	ldr	r3, [r2, r3]
   d80b8:	9308      	str	r3, [sp, #32]
        if (!category) {
   d80ba:	b90b      	cbnz	r3, d80c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d80bc:	3601      	adds	r6, #1
   d80be:	e7f4      	b.n	d80aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d80c0:	fb0a f306 	mul.w	r3, sl, r6
   d80c4:	9709      	str	r7, [sp, #36]	; 0x24
   d80c6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d80c8:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d80ca:	a909      	add	r1, sp, #36	; 0x24
   d80cc:	a808      	add	r0, sp, #32
   d80ce:	f7ff fb3c 	bl	d774a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d80d2:	4683      	mov	fp, r0
   d80d4:	2800      	cmp	r0, #0
   d80d6:	d0f1      	beq.n	d80bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d80d8:	4601      	mov	r1, r0
   d80da:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d80dc:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d80e0:	f10d 031f 	add.w	r3, sp, #31
   d80e4:	4628      	mov	r0, r5
   d80e6:	f7ff fbaf 	bl	d7848 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d80ea:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d80ee:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d80f0:	f1b8 0f00 	cmp.w	r8, #0
   d80f4:	d166      	bne.n	d81c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d80f6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d80fa:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d80fe:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d8102:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8106:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d810a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d810e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8112:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d8116:	4293      	cmp	r3, r2
   d8118:	db1a      	blt.n	d8150 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d811a:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d811e:	f1bb 0f00 	cmp.w	fp, #0
   d8122:	dd4a      	ble.n	d81ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d8124:	fb0a f00b 	mul.w	r0, sl, fp
   d8128:	f7fe fc76 	bl	d6a18 <malloc>
            if (!d) {
   d812c:	9004      	str	r0, [sp, #16]
   d812e:	2800      	cmp	r0, #0
   d8130:	d045      	beq.n	d81be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d8132:	e9d5 1200 	ldrd	r1, r2, [r5]
   d8136:	fb0a 1202 	mla	r2, sl, r2, r1
   d813a:	f7ff fe71 	bl	d7e20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d813e:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d8140:	6828      	ldr	r0, [r5, #0]
   d8142:	9304      	str	r3, [sp, #16]
   d8144:	f7fe fc70 	bl	d6a28 <free>
        data_ = d;
   d8148:	9b04      	ldr	r3, [sp, #16]
   d814a:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d814c:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d8150:	9b01      	ldr	r3, [sp, #4]
   d8152:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d8156:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d8158:	fb0a f303 	mul.w	r3, sl, r3
   d815c:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d8160:	f101 0014 	add.w	r0, r1, #20
   d8164:	fb0a b202 	mla	r2, sl, r2, fp
   d8168:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d816a:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d816c:	f7ff fe58 	bl	d7e20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d8170:	9904      	ldr	r1, [sp, #16]
   d8172:	b1a9      	cbz	r1, d81a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d8174:	9b05      	ldr	r3, [sp, #20]
   d8176:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8178:	f84b 2003 	str.w	r2, [fp, r3]
   d817c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d8180:	808b      	strh	r3, [r1, #4]
   d8182:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d8186:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d8188:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d818c:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d818e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8190:	608b      	str	r3, [r1, #8]
   d8192:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d8194:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d8196:	60cb      	str	r3, [r1, #12]
   d8198:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d819a:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d819c:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d819e:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d81a0:	686b      	ldr	r3, [r5, #4]
   d81a2:	3301      	adds	r3, #1
   d81a4:	606b      	str	r3, [r5, #4]
   d81a6:	a813      	add	r0, sp, #76	; 0x4c
   d81a8:	f7ff fc8c 	bl	d7ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d81ac:	f1b8 0f00 	cmp.w	r8, #0
   d81b0:	d008      	beq.n	d81c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d81b2:	a80d      	add	r0, sp, #52	; 0x34
   d81b4:	f7ff fc86 	bl	d7ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d81b8:	e756      	b.n	d8068 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d81ba:	4643      	mov	r3, r8
   d81bc:	e7c0      	b.n	d8140 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d81be:	f04f 0801 	mov.w	r8, #1
   d81c2:	e7f0      	b.n	d81a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d81c4:	9b01      	ldr	r3, [sp, #4]
   d81c6:	682d      	ldr	r5, [r5, #0]
   d81c8:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d81cc:	9b08      	ldr	r3, [sp, #32]
   d81ce:	781b      	ldrb	r3, [r3, #0]
   d81d0:	b92b      	cbnz	r3, d81de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d81d2:	f8d9 3000 	ldr.w	r3, [r9]
   d81d6:	9a02      	ldr	r2, [sp, #8]
   d81d8:	4413      	add	r3, r2
   d81da:	7c1b      	ldrb	r3, [r3, #16]
   d81dc:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d81de:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d81e0:	e773      	b.n	d80ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81e2:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d81e4:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81e6:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d81e8:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81ea:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d81ec:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d81ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d81f0:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81f2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d81f4:	60a2      	str	r2, [r4, #8]
   d81f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d81f8:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81fa:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d81fc:	60e2      	str	r2, [r4, #12]
   d81fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d8200:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8202:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8204:	6122      	str	r2, [r4, #16]
   d8206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d8208:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d820a:	9b03      	ldr	r3, [sp, #12]
   d820c:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d820e:	6162      	str	r2, [r4, #20]
   d8210:	7623      	strb	r3, [r4, #24]
   d8212:	e7ce      	b.n	d81b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d8214 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d8214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d8216:	4605      	mov	r5, r0
   d8218:	4b09      	ldr	r3, [pc, #36]	; (d8240 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d821a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d821e:	4604      	mov	r4, r0
   d8220:	460e      	mov	r6, r1
        filter_(level, filters) {
   d8222:	a801      	add	r0, sp, #4
   d8224:	4611      	mov	r1, r2
   d8226:	f7fc f9ac 	bl	d4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d822a:	aa01      	add	r2, sp, #4
   d822c:	4631      	mov	r1, r6
   d822e:	4628      	mov	r0, r5
   d8230:	f7ff fedb 	bl	d7fea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d8234:	a801      	add	r0, sp, #4
   d8236:	f7fc f963 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d823a:	4620      	mov	r0, r4
   d823c:	b004      	add	sp, #16
   d823e:	bd70      	pop	{r4, r5, r6, pc}
   d8240:	000da018 	.word	0x000da018

000d8244 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d8244:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8246:	460f      	mov	r7, r1
   d8248:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d824a:	4926      	ldr	r1, [pc, #152]	; (d82e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d824c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d824e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d8250:	4616      	mov	r6, r2
   d8252:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8254:	f001 fc63 	bl	d9b1e <strcmp>
   d8258:	bb00      	cbnz	r0, d829c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d825a:	b1e4      	cbz	r4, d8296 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d825c:	4629      	mov	r1, r5
   d825e:	4668      	mov	r0, sp
   d8260:	f7ff fc8a 	bl	d7b78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d8264:	4920      	ldr	r1, [pc, #128]	; (d82e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d8266:	2024      	movs	r0, #36	; 0x24
   d8268:	f000 ff98 	bl	d919c <_ZnwjRKSt9nothrow_t>
   d826c:	4605      	mov	r5, r0
   d826e:	b170      	cbz	r0, d828e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d8270:	4669      	mov	r1, sp
   d8272:	a803      	add	r0, sp, #12
   d8274:	f7fc f985 	bl	d4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d8278:	aa03      	add	r2, sp, #12
   d827a:	4631      	mov	r1, r6
   d827c:	4628      	mov	r0, r5
   d827e:	f7ff ffc9 	bl	d8214 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d8282:	a803      	add	r0, sp, #12
   d8284:	f7fc f93c 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d8288:	4b18      	ldr	r3, [pc, #96]	; (d82ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d828a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d828c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d828e:	4668      	mov	r0, sp
   d8290:	f7fc f936 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d8294:	462c      	mov	r4, r5
}
   d8296:	4620      	mov	r0, r4
   d8298:	b007      	add	sp, #28
   d829a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d829c:	4914      	ldr	r1, [pc, #80]	; (d82f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d829e:	4638      	mov	r0, r7
   d82a0:	f001 fc3d 	bl	d9b1e <strcmp>
   d82a4:	b9e0      	cbnz	r0, d82e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d82a6:	2c00      	cmp	r4, #0
   d82a8:	d0f5      	beq.n	d8296 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d82aa:	4629      	mov	r1, r5
   d82ac:	4668      	mov	r0, sp
   d82ae:	f7ff fc63 	bl	d7b78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d82b2:	490d      	ldr	r1, [pc, #52]	; (d82e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d82b4:	2024      	movs	r0, #36	; 0x24
   d82b6:	f000 ff71 	bl	d919c <_ZnwjRKSt9nothrow_t>
   d82ba:	4605      	mov	r5, r0
   d82bc:	2800      	cmp	r0, #0
   d82be:	d0e6      	beq.n	d828e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d82c0:	4669      	mov	r1, sp
   d82c2:	a803      	add	r0, sp, #12
   d82c4:	f7fc f95d 	bl	d4582 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d82c8:	aa03      	add	r2, sp, #12
   d82ca:	4631      	mov	r1, r6
   d82cc:	4628      	mov	r0, r5
   d82ce:	f7ff ffa1 	bl	d8214 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d82d2:	a803      	add	r0, sp, #12
   d82d4:	f7fc f914 	bl	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d82d8:	4b06      	ldr	r3, [pc, #24]	; (d82f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d82da:	602b      	str	r3, [r5, #0]
   d82dc:	622c      	str	r4, [r5, #32]
}
   d82de:	e7d6      	b.n	d828e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d82e0:	2400      	movs	r4, #0
   d82e2:	e7d8      	b.n	d8296 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d82e4:	000da42d 	.word	0x000da42d
   d82e8:	000da5c4 	.word	0x000da5c4
   d82ec:	000da4c4 	.word	0x000da4c4
   d82f0:	000da431 	.word	0x000da431
   d82f4:	000da4ac 	.word	0x000da4ac

000d82f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d82f8:	4b01      	ldr	r3, [pc, #4]	; (d8300 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d82fa:	4a02      	ldr	r2, [pc, #8]	; (d8304 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d82fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d82fe:	4770      	bx	lr
   d8300:	2003e590 	.word	0x2003e590
   d8304:	000da442 	.word	0x000da442

000d8308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d830c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d830e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8312:	4604      	mov	r4, r0
   d8314:	460e      	mov	r6, r1
   d8316:	4617      	mov	r7, r2
   d8318:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d831a:	f000 fdd5 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d831e:	4581      	cmp	r9, r0
   d8320:	d04c      	beq.n	d83bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d8322:	792b      	ldrb	r3, [r5, #4]
   d8324:	0719      	lsls	r1, r3, #28
   d8326:	d504      	bpl.n	d8332 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d8328:	696a      	ldr	r2, [r5, #20]
   d832a:	4954      	ldr	r1, [pc, #336]	; (d847c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d832c:	4620      	mov	r0, r4
   d832e:	f7ff fa7c 	bl	d782a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d8332:	f1b8 0f00 	cmp.w	r8, #0
   d8336:	d00d      	beq.n	d8354 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d8338:	215b      	movs	r1, #91	; 0x5b
   d833a:	4620      	mov	r0, r4
   d833c:	f7ff fa69 	bl	d7812 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d8340:	4641      	mov	r1, r8
   d8342:	4620      	mov	r0, r4
   d8344:	f7ff fa56 	bl	d77f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d8348:	6823      	ldr	r3, [r4, #0]
   d834a:	494d      	ldr	r1, [pc, #308]	; (d8480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d834c:	68db      	ldr	r3, [r3, #12]
   d834e:	2202      	movs	r2, #2
   d8350:	4620      	mov	r0, r4
   d8352:	4798      	blx	r3
    if (attr.has_file) {
   d8354:	792b      	ldrb	r3, [r5, #4]
   d8356:	07da      	lsls	r2, r3, #31
   d8358:	d523      	bpl.n	d83a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d835a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d835e:	212f      	movs	r1, #47	; 0x2f
   d8360:	4640      	mov	r0, r8
   d8362:	f001 fc26 	bl	d9bb2 <strrchr>
    if (s1) {
   d8366:	b108      	cbz	r0, d836c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d8368:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d836c:	4641      	mov	r1, r8
   d836e:	4620      	mov	r0, r4
   d8370:	f7ff fa40 	bl	d77f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d8374:	792b      	ldrb	r3, [r5, #4]
   d8376:	079b      	lsls	r3, r3, #30
   d8378:	d508      	bpl.n	d838c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d837a:	213a      	movs	r1, #58	; 0x3a
   d837c:	4620      	mov	r0, r4
   d837e:	f7ff fa48 	bl	d7812 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d8382:	68ea      	ldr	r2, [r5, #12]
   d8384:	493f      	ldr	r1, [pc, #252]	; (d8484 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d8386:	4620      	mov	r0, r4
   d8388:	f7ff fa4f 	bl	d782a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d838c:	792a      	ldrb	r2, [r5, #4]
   d838e:	6823      	ldr	r3, [r4, #0]
   d8390:	f012 0f04 	tst.w	r2, #4
   d8394:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d8396:	bf14      	ite	ne
   d8398:	493b      	ldrne	r1, [pc, #236]	; (d8488 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d839a:	493c      	ldreq	r1, [pc, #240]	; (d848c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d839c:	2202      	movs	r2, #2
            write(": ", 2);
   d839e:	4620      	mov	r0, r4
   d83a0:	4798      	blx	r3
    if (attr.has_function) {
   d83a2:	792b      	ldrb	r3, [r5, #4]
   d83a4:	0758      	lsls	r0, r3, #29
   d83a6:	d51d      	bpl.n	d83e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d83a8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d83aa:	460b      	mov	r3, r1
   d83ac:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d83ae:	f813 0b01 	ldrb.w	r0, [r3], #1
   d83b2:	b160      	cbz	r0, d83ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d83b4:	2820      	cmp	r0, #32
   d83b6:	d108      	bne.n	d83ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d83b8:	4619      	mov	r1, r3
   d83ba:	e7f7      	b.n	d83ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d83bc:	4834      	ldr	r0, [pc, #208]	; (d8490 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d83be:	f000 f966 	bl	d868e <_ZN5spark12NetworkClass9listeningEv>
   d83c2:	2800      	cmp	r0, #0
   d83c4:	d0ad      	beq.n	d8322 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d83c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d83ca:	2828      	cmp	r0, #40	; 0x28
   d83cc:	d1ee      	bne.n	d83ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d83ce:	6823      	ldr	r3, [r4, #0]
   d83d0:	1a52      	subs	r2, r2, r1
   d83d2:	68db      	ldr	r3, [r3, #12]
   d83d4:	4620      	mov	r0, r4
   d83d6:	4798      	blx	r3
        write("(): ", 4);
   d83d8:	6823      	ldr	r3, [r4, #0]
   d83da:	492e      	ldr	r1, [pc, #184]	; (d8494 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d83dc:	68db      	ldr	r3, [r3, #12]
   d83de:	2204      	movs	r2, #4
   d83e0:	4620      	mov	r0, r4
   d83e2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d83e4:	2100      	movs	r1, #0
   d83e6:	4638      	mov	r0, r7
   d83e8:	f7fe fa20 	bl	d682c <log_level_name>
   d83ec:	4601      	mov	r1, r0
    write(s);
   d83ee:	4620      	mov	r0, r4
   d83f0:	f7ff fa00 	bl	d77f4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d83f4:	6823      	ldr	r3, [r4, #0]
   d83f6:	4925      	ldr	r1, [pc, #148]	; (d848c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d83f8:	68db      	ldr	r3, [r3, #12]
   d83fa:	2202      	movs	r2, #2
   d83fc:	4620      	mov	r0, r4
   d83fe:	4798      	blx	r3
    if (msg) {
   d8400:	b11e      	cbz	r6, d840a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d8402:	4631      	mov	r1, r6
   d8404:	4620      	mov	r0, r4
   d8406:	f7ff f9f5 	bl	d77f4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d840a:	792b      	ldrb	r3, [r5, #4]
   d840c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d8410:	d02c      	beq.n	d846c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d8412:	6823      	ldr	r3, [r4, #0]
   d8414:	4920      	ldr	r1, [pc, #128]	; (d8498 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d8416:	68db      	ldr	r3, [r3, #12]
   d8418:	2202      	movs	r2, #2
   d841a:	4620      	mov	r0, r4
   d841c:	4798      	blx	r3
        if (attr.has_code) {
   d841e:	792b      	ldrb	r3, [r5, #4]
   d8420:	06d9      	lsls	r1, r3, #27
   d8422:	d50a      	bpl.n	d843a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d8424:	6823      	ldr	r3, [r4, #0]
   d8426:	491d      	ldr	r1, [pc, #116]	; (d849c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d8428:	68db      	ldr	r3, [r3, #12]
   d842a:	2207      	movs	r2, #7
   d842c:	4620      	mov	r0, r4
   d842e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d8430:	69aa      	ldr	r2, [r5, #24]
   d8432:	491b      	ldr	r1, [pc, #108]	; (d84a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d8434:	4620      	mov	r0, r4
   d8436:	f7ff f9f8 	bl	d782a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d843a:	792b      	ldrb	r3, [r5, #4]
   d843c:	069a      	lsls	r2, r3, #26
   d843e:	d511      	bpl.n	d8464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d8440:	06db      	lsls	r3, r3, #27
   d8442:	d505      	bpl.n	d8450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d8444:	6823      	ldr	r3, [r4, #0]
   d8446:	4910      	ldr	r1, [pc, #64]	; (d8488 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d8448:	68db      	ldr	r3, [r3, #12]
   d844a:	2202      	movs	r2, #2
   d844c:	4620      	mov	r0, r4
   d844e:	4798      	blx	r3
            write("details = ", 10);
   d8450:	6823      	ldr	r3, [r4, #0]
   d8452:	4914      	ldr	r1, [pc, #80]	; (d84a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d8454:	68db      	ldr	r3, [r3, #12]
   d8456:	4620      	mov	r0, r4
   d8458:	220a      	movs	r2, #10
   d845a:	4798      	blx	r3
            write(attr.details);
   d845c:	69e9      	ldr	r1, [r5, #28]
   d845e:	4620      	mov	r0, r4
   d8460:	f7ff f9c8 	bl	d77f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d8464:	215d      	movs	r1, #93	; 0x5d
   d8466:	4620      	mov	r0, r4
   d8468:	f7ff f9d3 	bl	d7812 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d846c:	6823      	ldr	r3, [r4, #0]
   d846e:	490e      	ldr	r1, [pc, #56]	; (d84a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d8470:	68db      	ldr	r3, [r3, #12]
   d8472:	4620      	mov	r0, r4
   d8474:	2202      	movs	r2, #2
}
   d8476:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d847a:	4718      	bx	r3
   d847c:	000da446 	.word	0x000da446
   d8480:	000da44d 	.word	0x000da44d
   d8484:	000d9e55 	.word	0x000d9e55
   d8488:	000da450 	.word	0x000da450
   d848c:	000da455 	.word	0x000da455
   d8490:	2003e5bc 	.word	0x2003e5bc
   d8494:	000da453 	.word	0x000da453
   d8498:	000da458 	.word	0x000da458
   d849c:	000da45b 	.word	0x000da45b
   d84a0:	000da463 	.word	0x000da463
   d84a4:	000da466 	.word	0x000da466
   d84a8:	000da471 	.word	0x000da471

000d84ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d84ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d84b0:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d84b2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d84b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d84b8:	4605      	mov	r5, r0
   d84ba:	460f      	mov	r7, r1
   d84bc:	4690      	mov	r8, r2
   d84be:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d84c0:	f000 fd02 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d84c4:	4581      	cmp	r9, r0
   d84c6:	d105      	bne.n	d84d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d84c8:	4849      	ldr	r0, [pc, #292]	; (d85f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d84ca:	f000 f8e0 	bl	d868e <_ZN5spark12NetworkClass9listeningEv>
   d84ce:	2800      	cmp	r0, #0
   d84d0:	f040 808a 	bne.w	d85e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d84d4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d84d6:	4a47      	ldr	r2, [pc, #284]	; (d85f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d84d8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d84da:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d84de:	a801      	add	r0, sp, #4
        strm_(stream) {
   d84e0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d84e2:	f88d 9008 	strb.w	r9, [sp, #8]
   d84e6:	f7ff f878 	bl	d75da <_ZN5spark10JSONWriter11beginObjectEv>
   d84ea:	4649      	mov	r1, r9
   d84ec:	4640      	mov	r0, r8
   d84ee:	f7fe f99d 	bl	d682c <log_level_name>
    json.name("l", 1).value(s);
   d84f2:	4941      	ldr	r1, [pc, #260]	; (d85f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d84f4:	4680      	mov	r8, r0
   d84f6:	2201      	movs	r2, #1
   d84f8:	a801      	add	r0, sp, #4
   d84fa:	f7ff f8f7 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d84fe:	4641      	mov	r1, r8
   d8500:	f7ff f96a 	bl	d77d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d8504:	b13f      	cbz	r7, d8516 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d8506:	493d      	ldr	r1, [pc, #244]	; (d85fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d8508:	2201      	movs	r2, #1
   d850a:	a801      	add	r0, sp, #4
   d850c:	f7ff f8ee 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d8510:	4639      	mov	r1, r7
   d8512:	f7ff f961 	bl	d77d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d8516:	b13e      	cbz	r6, d8528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d8518:	4939      	ldr	r1, [pc, #228]	; (d8600 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d851a:	2201      	movs	r2, #1
   d851c:	a801      	add	r0, sp, #4
   d851e:	f7ff f8e5 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d8522:	4631      	mov	r1, r6
   d8524:	f7ff f958 	bl	d77d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d8528:	7923      	ldrb	r3, [r4, #4]
   d852a:	07df      	lsls	r7, r3, #31
   d852c:	d50e      	bpl.n	d854c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d852e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d8530:	212f      	movs	r1, #47	; 0x2f
   d8532:	4630      	mov	r0, r6
   d8534:	f001 fb3d 	bl	d9bb2 <strrchr>
    if (s1) {
   d8538:	b100      	cbz	r0, d853c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d853a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d853c:	4931      	ldr	r1, [pc, #196]	; (d8604 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d853e:	2201      	movs	r2, #1
   d8540:	a801      	add	r0, sp, #4
   d8542:	f7ff f8d3 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d8546:	4631      	mov	r1, r6
   d8548:	f7ff f946 	bl	d77d8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d854c:	7923      	ldrb	r3, [r4, #4]
   d854e:	079e      	lsls	r6, r3, #30
   d8550:	d507      	bpl.n	d8562 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d8552:	492d      	ldr	r1, [pc, #180]	; (d8608 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d8554:	2202      	movs	r2, #2
   d8556:	a801      	add	r0, sp, #4
   d8558:	f7ff f8c8 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d855c:	68e1      	ldr	r1, [r4, #12]
   d855e:	f7ff f849 	bl	d75f4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d8562:	7923      	ldrb	r3, [r4, #4]
   d8564:	0758      	lsls	r0, r3, #29
   d8566:	d514      	bpl.n	d8592 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d8568:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d856a:	4633      	mov	r3, r6
   d856c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d856e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8572:	b12a      	cbz	r2, d8580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d8574:	2a20      	cmp	r2, #32
   d8576:	d101      	bne.n	d857c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d8578:	461e      	mov	r6, r3
   d857a:	e7f7      	b.n	d856c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d857c:	2a28      	cmp	r2, #40	; 0x28
   d857e:	d1f5      	bne.n	d856c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d8580:	4922      	ldr	r1, [pc, #136]	; (d860c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d8582:	2202      	movs	r2, #2
   d8584:	a801      	add	r0, sp, #4
   d8586:	f7ff f8b1 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d858a:	1bba      	subs	r2, r7, r6
   d858c:	4631      	mov	r1, r6
   d858e:	f7ff f8bd 	bl	d770c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d8592:	7923      	ldrb	r3, [r4, #4]
   d8594:	0719      	lsls	r1, r3, #28
   d8596:	d507      	bpl.n	d85a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d8598:	491d      	ldr	r1, [pc, #116]	; (d8610 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d859a:	2201      	movs	r2, #1
   d859c:	a801      	add	r0, sp, #4
   d859e:	f7ff f8a5 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d85a2:	6961      	ldr	r1, [r4, #20]
   d85a4:	f7ff f838 	bl	d7618 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d85a8:	7923      	ldrb	r3, [r4, #4]
   d85aa:	06da      	lsls	r2, r3, #27
   d85ac:	d508      	bpl.n	d85c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d85ae:	2204      	movs	r2, #4
   d85b0:	4918      	ldr	r1, [pc, #96]	; (d8614 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d85b2:	eb0d 0002 	add.w	r0, sp, r2
   d85b6:	f7ff f899 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d85ba:	69a1      	ldr	r1, [r4, #24]
   d85bc:	f7ff f81a 	bl	d75f4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d85c0:	7923      	ldrb	r3, [r4, #4]
   d85c2:	069b      	lsls	r3, r3, #26
   d85c4:	d507      	bpl.n	d85d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d85c6:	4914      	ldr	r1, [pc, #80]	; (d8618 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d85c8:	2206      	movs	r2, #6
   d85ca:	a801      	add	r0, sp, #4
   d85cc:	f7ff f88e 	bl	d76ec <_ZN5spark10JSONWriter4nameEPKcj>
   d85d0:	69e1      	ldr	r1, [r4, #28]
   d85d2:	f7ff f901 	bl	d77d8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d85d6:	a801      	add	r0, sp, #4
   d85d8:	f7fe ffe9 	bl	d75ae <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d85dc:	6a28      	ldr	r0, [r5, #32]
   d85de:	490f      	ldr	r1, [pc, #60]	; (d861c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d85e0:	6803      	ldr	r3, [r0, #0]
   d85e2:	2202      	movs	r2, #2
   d85e4:	68db      	ldr	r3, [r3, #12]
   d85e6:	4798      	blx	r3
}
   d85e8:	b005      	add	sp, #20
   d85ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d85ee:	bf00      	nop
   d85f0:	2003e5bc 	.word	0x2003e5bc
   d85f4:	000da494 	.word	0x000da494
   d85f8:	000da423 	.word	0x000da423
   d85fc:	000da474 	.word	0x000da474
   d8600:	000da476 	.word	0x000da476
   d8604:	000da478 	.word	0x000da478
   d8608:	000da47a 	.word	0x000da47a
   d860c:	000da47d 	.word	0x000da47d
   d8610:	000d9e7e 	.word	0x000d9e7e
   d8614:	000da480 	.word	0x000da480
   d8618:	000da485 	.word	0x000da485
   d861c:	000da471 	.word	0x000da471

000d8620 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8620:	2300      	movs	r3, #0
   d8622:	6840      	ldr	r0, [r0, #4]
   d8624:	461a      	mov	r2, r3
   d8626:	f7fe b997 	b.w	d6958 <network_connect>

000d862a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d862a:	6840      	ldr	r0, [r0, #4]
   d862c:	2200      	movs	r2, #0
   d862e:	2102      	movs	r1, #2
   d8630:	f7fe b9a2 	b.w	d6978 <network_disconnect>

000d8634 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8634:	2200      	movs	r2, #0
   d8636:	6840      	ldr	r0, [r0, #4]
   d8638:	4611      	mov	r1, r2
   d863a:	f7fe b995 	b.w	d6968 <network_connecting>

000d863e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d863e:	2200      	movs	r2, #0
   d8640:	6840      	ldr	r0, [r0, #4]
   d8642:	4611      	mov	r1, r2
   d8644:	f7fe b9a0 	b.w	d6988 <network_ready>

000d8648 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8648:	2300      	movs	r3, #0
   d864a:	6840      	ldr	r0, [r0, #4]
   d864c:	461a      	mov	r2, r3
   d864e:	4619      	mov	r1, r3
   d8650:	f7fe b9a2 	b.w	d6998 <network_on>

000d8654 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8654:	2300      	movs	r3, #0
   d8656:	6840      	ldr	r0, [r0, #4]
   d8658:	461a      	mov	r2, r3
   d865a:	4619      	mov	r1, r3
   d865c:	f7fe b9a4 	b.w	d69a8 <network_off>

000d8660 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8660:	6840      	ldr	r0, [r0, #4]
   d8662:	2100      	movs	r1, #0
   d8664:	f7fe b9c8 	b.w	d69f8 <network_is_on>

000d8668 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8668:	6840      	ldr	r0, [r0, #4]
   d866a:	2100      	movs	r1, #0
   d866c:	f7fe b9cc 	b.w	d6a08 <network_is_off>

000d8670 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8670:	6840      	ldr	r0, [r0, #4]
   d8672:	2200      	movs	r2, #0
   d8674:	f081 0101 	eor.w	r1, r1, #1
   d8678:	f7fe b99e 	b.w	d69b8 <network_listen>

000d867c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d867c:	6840      	ldr	r0, [r0, #4]
   d867e:	2200      	movs	r2, #0
   d8680:	f7fe b9aa 	b.w	d69d8 <network_set_listen_timeout>

000d8684 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8684:	2200      	movs	r2, #0
   d8686:	6840      	ldr	r0, [r0, #4]
   d8688:	4611      	mov	r1, r2
   d868a:	f7fe b9ad 	b.w	d69e8 <network_get_listen_timeout>

000d868e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d868e:	2200      	movs	r2, #0
   d8690:	6840      	ldr	r0, [r0, #4]
   d8692:	4611      	mov	r1, r2
   d8694:	f7fe b998 	b.w	d69c8 <network_listening>

000d8698 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d869c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d869e:	b095      	sub	sp, #84	; 0x54
   d86a0:	4616      	mov	r6, r2
   d86a2:	460d      	mov	r5, r1
   d86a4:	4607      	mov	r7, r0
    IPAddress addr;
   d86a6:	f7fe fe23 	bl	d72f0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d86aa:	4621      	mov	r1, r4
   d86ac:	2218      	movs	r2, #24
   d86ae:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d86b0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d86b2:	f001 f9bd 	bl	d9a30 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d86b6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d86b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d86bc:	4621      	mov	r1, r4
   d86be:	466b      	mov	r3, sp
   d86c0:	aa0c      	add	r2, sp, #48	; 0x30
   d86c2:	4630      	mov	r0, r6
   d86c4:	f7fd ffba 	bl	d663c <netdb_getaddrinfo>
    if (!r) {
   d86c8:	4604      	mov	r4, r0
   d86ca:	2800      	cmp	r0, #0
   d86cc:	d146      	bne.n	d875c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d86ce:	4602      	mov	r2, r0
   d86d0:	2101      	movs	r1, #1
   d86d2:	6868      	ldr	r0, [r5, #4]
   d86d4:	f7fe f958 	bl	d6988 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d86d8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d86da:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d86dc:	4622      	mov	r2, r4
   d86de:	6868      	ldr	r0, [r5, #4]
   d86e0:	f7fe f952 	bl	d6988 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86e4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d86e6:	4681      	mov	r9, r0
        bool ok = false;
   d86e8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86ea:	2e00      	cmp	r6, #0
   d86ec:	d036      	beq.n	d875c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d86ee:	2900      	cmp	r1, #0
   d86f0:	d134      	bne.n	d875c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d86f2:	6873      	ldr	r3, [r6, #4]
   d86f4:	2b02      	cmp	r3, #2
   d86f6:	d003      	beq.n	d8700 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d86f8:	2b0a      	cmp	r3, #10
   d86fa:	d00b      	beq.n	d8714 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86fc:	69f6      	ldr	r6, [r6, #28]
   d86fe:	e7f4      	b.n	d86ea <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8700:	f1b8 0f00 	cmp.w	r8, #0
   d8704:	d004      	beq.n	d8710 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8706:	6971      	ldr	r1, [r6, #20]
   d8708:	4638      	mov	r0, r7
   d870a:	3104      	adds	r1, #4
   d870c:	f7fe fe1d 	bl	d734a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8710:	4641      	mov	r1, r8
   d8712:	e7f3      	b.n	d86fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8714:	f1b9 0f00 	cmp.w	r9, #0
   d8718:	d101      	bne.n	d871e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d871a:	4649      	mov	r1, r9
   d871c:	e7ee      	b.n	d86fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d871e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8720:	2210      	movs	r2, #16
   d8722:	a801      	add	r0, sp, #4
   d8724:	f001 f984 	bl	d9a30 <memset>
                    a.v = 6;
   d8728:	2306      	movs	r3, #6
   d872a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d872e:	ad01      	add	r5, sp, #4
   d8730:	f104 0308 	add.w	r3, r4, #8
   d8734:	3418      	adds	r4, #24
   d8736:	6818      	ldr	r0, [r3, #0]
   d8738:	6859      	ldr	r1, [r3, #4]
   d873a:	462a      	mov	r2, r5
   d873c:	c203      	stmia	r2!, {r0, r1}
   d873e:	3308      	adds	r3, #8
   d8740:	42a3      	cmp	r3, r4
   d8742:	4615      	mov	r5, r2
   d8744:	d1f7      	bne.n	d8736 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8746:	a901      	add	r1, sp, #4
   d8748:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d874a:	ad07      	add	r5, sp, #28
   d874c:	f7fe fdde 	bl	d730c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8752:	1d3c      	adds	r4, r7, #4
   d8754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8756:	682b      	ldr	r3, [r5, #0]
   d8758:	7023      	strb	r3, [r4, #0]
   d875a:	e7de      	b.n	d871a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d875c:	9800      	ldr	r0, [sp, #0]
   d875e:	f7fd ff65 	bl	d662c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8762:	4638      	mov	r0, r7
   d8764:	b015      	add	sp, #84	; 0x54
   d8766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d876c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d876c:	4b02      	ldr	r3, [pc, #8]	; (d8778 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d876e:	4a03      	ldr	r2, [pc, #12]	; (d877c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8770:	601a      	str	r2, [r3, #0]
   d8772:	2200      	movs	r2, #0
   d8774:	605a      	str	r2, [r3, #4]

} // spark
   d8776:	4770      	bx	lr
   d8778:	2003e5bc 	.word	0x2003e5bc
   d877c:	000da50c 	.word	0x000da50c

000d8780 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8782:	4606      	mov	r6, r0
   d8784:	460d      	mov	r5, r1
  size_t n = 0;
   d8786:	188f      	adds	r7, r1, r2
   d8788:	2400      	movs	r4, #0
  while (size--) {
   d878a:	42bd      	cmp	r5, r7
   d878c:	d00c      	beq.n	d87a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d878e:	6833      	ldr	r3, [r6, #0]
   d8790:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8794:	689b      	ldr	r3, [r3, #8]
   d8796:	4630      	mov	r0, r6
   d8798:	4798      	blx	r3
     if (chunk>=0)
   d879a:	1e03      	subs	r3, r0, #0
   d879c:	db01      	blt.n	d87a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d879e:	441c      	add	r4, r3
  while (size--) {
   d87a0:	e7f3      	b.n	d878a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d87a2:	2c00      	cmp	r4, #0
   d87a4:	bf08      	it	eq
   d87a6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d87a8:	4620      	mov	r0, r4
   d87aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d87ac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d87ac:	b513      	push	{r0, r1, r4, lr}
   d87ae:	4604      	mov	r4, r0
    }
   d87b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d87b2:	b159      	cbz	r1, d87cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d87b4:	9101      	str	r1, [sp, #4]
   d87b6:	f001 f9e2 	bl	d9b7e <strlen>
   d87ba:	6823      	ldr	r3, [r4, #0]
   d87bc:	9901      	ldr	r1, [sp, #4]
   d87be:	68db      	ldr	r3, [r3, #12]
   d87c0:	4602      	mov	r2, r0
   d87c2:	4620      	mov	r0, r4
    }
   d87c4:	b002      	add	sp, #8
   d87c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d87ca:	4718      	bx	r3
    }
   d87cc:	b002      	add	sp, #8
   d87ce:	bd10      	pop	{r4, pc}

000d87d0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d87d0:	b508      	push	{r3, lr}
  return write(str);
   d87d2:	f7ff ffeb 	bl	d87ac <_ZN5Print5writeEPKc>
}
   d87d6:	bd08      	pop	{r3, pc}

000d87d8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d87d8:	6803      	ldr	r3, [r0, #0]
   d87da:	689b      	ldr	r3, [r3, #8]
   d87dc:	4718      	bx	r3

000d87de <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d87de:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d87e0:	210d      	movs	r1, #13
{
   d87e2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d87e4:	f7ff fff8 	bl	d87d8 <_ZN5Print5printEc>
  n += print('\n');
   d87e8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d87ea:	4604      	mov	r4, r0
  n += print('\n');
   d87ec:	4628      	mov	r0, r5
   d87ee:	f7ff fff3 	bl	d87d8 <_ZN5Print5printEc>
  return n;
}
   d87f2:	4420      	add	r0, r4
   d87f4:	bd38      	pop	{r3, r4, r5, pc}

000d87f6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d87f6:	b530      	push	{r4, r5, lr}
   d87f8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d87fa:	2300      	movs	r3, #0
   d87fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8800:	2a01      	cmp	r2, #1
   d8802:	bf98      	it	ls
   d8804:	220a      	movls	r2, #10
   d8806:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8808:	460d      	mov	r5, r1
   d880a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d880e:	fb01 5312 	mls	r3, r1, r2, r5
   d8812:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8816:	2b09      	cmp	r3, #9
   d8818:	bf94      	ite	ls
   d881a:	3330      	addls	r3, #48	; 0x30
   d881c:	3337      	addhi	r3, #55	; 0x37
   d881e:	b2db      	uxtb	r3, r3
  } while(n);
   d8820:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8822:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8826:	d9ef      	bls.n	d8808 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8828:	4621      	mov	r1, r4
   d882a:	f7ff ffbf 	bl	d87ac <_ZN5Print5writeEPKc>
}
   d882e:	b00b      	add	sp, #44	; 0x2c
   d8830:	bd30      	pop	{r4, r5, pc}

000d8832 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d8832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8836:	b086      	sub	sp, #24
   d8838:	af00      	add	r7, sp, #0
   d883a:	4605      	mov	r5, r0
   d883c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d883e:	1d38      	adds	r0, r7, #4
   d8840:	2114      	movs	r1, #20
{
   d8842:	4614      	mov	r4, r2
    va_copy(args2, args);
   d8844:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8846:	f7fe f917 	bl	d6a78 <vsnprintf>

    if (n<bufsize)
   d884a:	2813      	cmp	r0, #19
   d884c:	d80e      	bhi.n	d886c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d884e:	1d39      	adds	r1, r7, #4
   d8850:	4628      	mov	r0, r5
   d8852:	f7ff ffab 	bl	d87ac <_ZN5Print5writeEPKc>
   d8856:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8858:	b11e      	cbz	r6, d8862 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d885a:	4628      	mov	r0, r5
   d885c:	f7ff ffbf 	bl	d87de <_ZN5Print7printlnEv>
   d8860:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8862:	4620      	mov	r0, r4
   d8864:	3718      	adds	r7, #24
   d8866:	46bd      	mov	sp, r7
   d8868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d886c:	f100 0308 	add.w	r3, r0, #8
   d8870:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8874:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8876:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d887a:	4622      	mov	r2, r4
   d887c:	1c41      	adds	r1, r0, #1
   d887e:	683b      	ldr	r3, [r7, #0]
   d8880:	4668      	mov	r0, sp
   d8882:	f7fe f8f9 	bl	d6a78 <vsnprintf>
  return write(str);
   d8886:	4669      	mov	r1, sp
   d8888:	4628      	mov	r0, r5
   d888a:	f7ff ff8f 	bl	d87ac <_ZN5Print5writeEPKc>
   d888e:	4604      	mov	r4, r0
   d8890:	46c5      	mov	sp, r8
   d8892:	e7e1      	b.n	d8858 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d8894 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d8894:	b510      	push	{r4, lr}
  if (0 == max) {
   d8896:	4604      	mov	r4, r0
   d8898:	b128      	cbz	r0, d88a6 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d889a:	f001 f8f5 	bl	d9a88 <rand>
   d889e:	fb90 f3f4 	sdiv	r3, r0, r4
   d88a2:	fb03 0414 	mls	r4, r3, r4, r0
}
   d88a6:	4620      	mov	r0, r4
   d88a8:	bd10      	pop	{r4, pc}

000d88aa <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d88aa:	4288      	cmp	r0, r1
{
   d88ac:	b510      	push	{r4, lr}
   d88ae:	4604      	mov	r4, r0
  if (min >= max) {
   d88b0:	da03      	bge.n	d88ba <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d88b2:	1a08      	subs	r0, r1, r0
   d88b4:	f7ff ffee 	bl	d8894 <_Z6randomi>
   d88b8:	4404      	add	r4, r0
}
   d88ba:	4620      	mov	r0, r4
   d88bc:	bd10      	pop	{r4, pc}
	...

000d88c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d88c0:	4b01      	ldr	r3, [pc, #4]	; (d88c8 <_GLOBAL__sub_I_RGB+0x8>)
   d88c2:	2200      	movs	r2, #0
   d88c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d88c6:	4770      	bx	lr
   d88c8:	2003e5c4 	.word	0x2003e5c4

000d88cc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d88cc:	2100      	movs	r1, #0
   d88ce:	f7fd bef5 	b.w	d66bc <hal_spi_acquire>

000d88d2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d88d2:	2100      	movs	r1, #0
   d88d4:	f7fd befa 	b.w	d66cc <hal_spi_release>

000d88d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d88d8:	b510      	push	{r4, lr}
   d88da:	4604      	mov	r4, r0
   d88dc:	4608      	mov	r0, r1
{
    _spi = spi;
   d88de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d88e0:	f7fd fecc 	bl	d667c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d88e4:	2300      	movs	r3, #0
   d88e6:	6063      	str	r3, [r4, #4]
}
   d88e8:	4620      	mov	r0, r4
   d88ea:	bd10      	pop	{r4, pc}

000d88ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d88ec:	b510      	push	{r4, lr}
   d88ee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d88f0:	7800      	ldrb	r0, [r0, #0]
   d88f2:	f7ff ffeb 	bl	d88cc <_ZN8SPIClass4lockEv.isra.0>
   d88f6:	b948      	cbnz	r0, d890c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d88f8:	7820      	ldrb	r0, [r4, #0]
   d88fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d88fe:	f7fd fea5 	bl	d664c <hal_spi_begin>
        unlock();
   d8902:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8908:	f7ff bfe3 	b.w	d88d2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d890c:	bd10      	pop	{r4, pc}

000d890e <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d890e:	b510      	push	{r4, lr}
   d8910:	4604      	mov	r4, r0
    if (!lock())
   d8912:	7800      	ldrb	r0, [r0, #0]
   d8914:	f7ff ffda 	bl	d88cc <_ZN8SPIClass4lockEv.isra.0>
   d8918:	b938      	cbnz	r0, d892a <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d891a:	7820      	ldrb	r0, [r4, #0]
   d891c:	f7fd fe9e 	bl	d665c <hal_spi_end>
        unlock();
   d8920:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8926:	f7ff bfd4 	b.w	d88d2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d892a:	bd10      	pop	{r4, pc}

000d892c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d892c:	7800      	ldrb	r0, [r0, #0]
   d892e:	f7ff bfd0 	b.w	d88d2 <_ZN8SPIClass6unlockEv.isra.0>
	...

000d8934 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8934:	0840      	lsrs	r0, r0, #1
{
   d8936:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d8938:	6018      	str	r0, [r3, #0]
   d893a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d893c:	6818      	ldr	r0, [r3, #0]
   d893e:	4288      	cmp	r0, r1
   d8940:	b2e5      	uxtb	r5, r4
   d8942:	d906      	bls.n	d8952 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8944:	3401      	adds	r4, #1
   d8946:	2c08      	cmp	r4, #8
   d8948:	d002      	beq.n	d8950 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d894a:	0840      	lsrs	r0, r0, #1
   d894c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d894e:	e7f5      	b.n	d893c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8950:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d8952:	4b02      	ldr	r3, [pc, #8]	; (d895c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8954:	5d5b      	ldrb	r3, [r3, r5]
   d8956:	7013      	strb	r3, [r2, #0]
}
   d8958:	bd30      	pop	{r4, r5, pc}
   d895a:	bf00      	nop
   d895c:	000da540 	.word	0x000da540

000d8960 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d8960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8964:	4606      	mov	r6, r0
   d8966:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8968:	7800      	ldrb	r0, [r0, #0]
{
   d896a:	460c      	mov	r4, r1
    CHECK(lock());
   d896c:	f7ff ffae 	bl	d88cc <_ZN8SPIClass4lockEv.isra.0>
   d8970:	2800      	cmp	r0, #0
   d8972:	db1b      	blt.n	d89ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8974:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8976:	2214      	movs	r2, #20
   d8978:	2100      	movs	r1, #0
   d897a:	a809      	add	r0, sp, #36	; 0x24
   d897c:	f001 f858 	bl	d9a30 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8980:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d8982:	2200      	movs	r2, #0
   d8984:	a909      	add	r1, sp, #36	; 0x24
   d8986:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8988:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d898c:	f7fd fe86 	bl	d669c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8990:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8994:	b113      	cbz	r3, d899c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8996:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d899a:	b155      	cbz	r5, d89b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d899c:	2700      	movs	r7, #0
   d899e:	46b9      	mov	r9, r7
   d89a0:	46b8      	mov	r8, r7
   d89a2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d89a4:	7923      	ldrb	r3, [r4, #4]
   d89a6:	b15d      	cbz	r5, d89c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d89a8:	b1c3      	cbz	r3, d89dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d89aa:	2000      	movs	r0, #0
}
   d89ac:	b00f      	add	sp, #60	; 0x3c
   d89ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d89b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d89b6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d89ba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d89be:	e7f1      	b.n	d89a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d89c0:	2b00      	cmp	r3, #0
   d89c2:	d135      	bne.n	d8a30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d89c4:	68a3      	ldr	r3, [r4, #8]
   d89c6:	4543      	cmp	r3, r8
   d89c8:	d108      	bne.n	d89dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d89ca:	f88d 9020 	strb.w	r9, [sp, #32]
   d89ce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d89d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d89d6:	89a3      	ldrh	r3, [r4, #12]
   d89d8:	429a      	cmp	r2, r3
   d89da:	d0e6      	beq.n	d89aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d89dc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d89de:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d89e0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d89e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d89e6:	ab04      	add	r3, sp, #16
   d89e8:	f10d 020f 	add.w	r2, sp, #15
   d89ec:	f7ff ffa2 	bl	d8934 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d89f0:	7921      	ldrb	r1, [r4, #4]
   d89f2:	b985      	cbnz	r5, d8a16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d89f4:	b989      	cbnz	r1, d8a1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d89f6:	68a3      	ldr	r3, [r4, #8]
   d89f8:	4543      	cmp	r3, r8
   d89fa:	d30e      	bcc.n	d8a1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d89fc:	f88d 9020 	strb.w	r9, [sp, #32]
   d8a00:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d8a04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8a08:	89a3      	ldrh	r3, [r4, #12]
   d8a0a:	429a      	cmp	r2, r3
   d8a0c:	d105      	bne.n	d8a1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d8a0e:	9b04      	ldr	r3, [sp, #16]
   d8a10:	4543      	cmp	r3, r8
   d8a12:	d102      	bne.n	d8a1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d8a14:	e7c9      	b.n	d89aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d8a16:	2900      	cmp	r1, #0
   d8a18:	d1f9      	bne.n	d8a0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d8a1a:	2300      	movs	r3, #0
   d8a1c:	9301      	str	r3, [sp, #4]
   d8a1e:	7b63      	ldrb	r3, [r4, #13]
   d8a20:	9300      	str	r3, [sp, #0]
   d8a22:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8a26:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8a28:	7830      	ldrb	r0, [r6, #0]
   d8a2a:	f7fd fe3f 	bl	d66ac <hal_spi_set_settings>
   d8a2e:	e7bc      	b.n	d89aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d8a30:	e9cd 5500 	strd	r5, r5, [sp]
   d8a34:	462b      	mov	r3, r5
   d8a36:	462a      	mov	r2, r5
   d8a38:	2101      	movs	r1, #1
   d8a3a:	e7f5      	b.n	d8a28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d8a3c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d8a3c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d8a3e:	7800      	ldrb	r0, [r0, #0]
   d8a40:	f7fd fe14 	bl	d666c <hal_spi_transfer>
}
   d8a44:	b2c0      	uxtb	r0, r0
   d8a46:	bd08      	pop	{r3, pc}

000d8a48 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   d8a48:	4770      	bx	lr

000d8a4a <_ZN8SPIClass15detachInterruptEv>:
   d8a4a:	4770      	bx	lr

000d8a4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8a4c:	b510      	push	{r4, lr}
   d8a4e:	4604      	mov	r4, r0
{
	free(buffer);
   d8a50:	6800      	ldr	r0, [r0, #0]
   d8a52:	f7fd ffe9 	bl	d6a28 <free>
}
   d8a56:	4620      	mov	r0, r4
   d8a58:	bd10      	pop	{r4, pc}

000d8a5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8a5a:	b510      	push	{r4, lr}
   d8a5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8a5e:	6800      	ldr	r0, [r0, #0]
   d8a60:	b108      	cbz	r0, d8a66 <_ZN6String10invalidateEv+0xc>
   d8a62:	f7fd ffe1 	bl	d6a28 <free>
	buffer = NULL;
   d8a66:	2300      	movs	r3, #0
	capacity = len = 0;
   d8a68:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8a6c:	6023      	str	r3, [r4, #0]
}
   d8a6e:	bd10      	pop	{r4, pc}

000d8a70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8a70:	b538      	push	{r3, r4, r5, lr}
   d8a72:	4604      	mov	r4, r0
   d8a74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8a76:	6800      	ldr	r0, [r0, #0]
   d8a78:	3101      	adds	r1, #1
   d8a7a:	f7fd ffdd 	bl	d6a38 <realloc>
	if (newbuffer) {
   d8a7e:	b110      	cbz	r0, d8a86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8a80:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8a84:	2001      	movs	r0, #1
	}
	return 0;
}
   d8a86:	bd38      	pop	{r3, r4, r5, pc}

000d8a88 <_ZN6String7reserveEj>:
{
   d8a88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8a8a:	6803      	ldr	r3, [r0, #0]
{
   d8a8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8a8e:	b123      	cbz	r3, d8a9a <_ZN6String7reserveEj+0x12>
   d8a90:	6843      	ldr	r3, [r0, #4]
   d8a92:	428b      	cmp	r3, r1
   d8a94:	d301      	bcc.n	d8a9a <_ZN6String7reserveEj+0x12>
   d8a96:	2001      	movs	r0, #1
}
   d8a98:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8a9a:	4620      	mov	r0, r4
   d8a9c:	f7ff ffe8 	bl	d8a70 <_ZN6String12changeBufferEj>
   d8aa0:	2800      	cmp	r0, #0
   d8aa2:	d0f9      	beq.n	d8a98 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8aa4:	68a3      	ldr	r3, [r4, #8]
   d8aa6:	2b00      	cmp	r3, #0
   d8aa8:	d1f5      	bne.n	d8a96 <_ZN6String7reserveEj+0xe>
   d8aaa:	6822      	ldr	r2, [r4, #0]
   d8aac:	7013      	strb	r3, [r2, #0]
   d8aae:	e7f2      	b.n	d8a96 <_ZN6String7reserveEj+0xe>

000d8ab0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8ab2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8ab4:	4611      	mov	r1, r2
   d8ab6:	9201      	str	r2, [sp, #4]
{
   d8ab8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8aba:	f7ff ffe5 	bl	d8a88 <_ZN6String7reserveEj>
   d8abe:	9a01      	ldr	r2, [sp, #4]
   d8ac0:	b928      	cbnz	r0, d8ace <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d8ac2:	4620      	mov	r0, r4
   d8ac4:	f7ff ffc9 	bl	d8a5a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8ac8:	4620      	mov	r0, r4
   d8aca:	b003      	add	sp, #12
   d8acc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8ace:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8ad0:	4629      	mov	r1, r5
   d8ad2:	6820      	ldr	r0, [r4, #0]
   d8ad4:	f000 ff84 	bl	d99e0 <memcpy>
	buffer[len] = 0;
   d8ad8:	6822      	ldr	r2, [r4, #0]
   d8ada:	68a3      	ldr	r3, [r4, #8]
   d8adc:	2100      	movs	r1, #0
   d8ade:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8ae0:	e7f2      	b.n	d8ac8 <_ZN6String4copyEPKcj+0x18>

000d8ae2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d8ae2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d8ae4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d8ae6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8aea:	4604      	mov	r4, r0
	len = 0;
   d8aec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8aee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8af0:	b141      	cbz	r1, d8b04 <_ZN6StringC1EPKc+0x22>
   d8af2:	4608      	mov	r0, r1
   d8af4:	9101      	str	r1, [sp, #4]
   d8af6:	f001 f842 	bl	d9b7e <strlen>
   d8afa:	9901      	ldr	r1, [sp, #4]
   d8afc:	4602      	mov	r2, r0
   d8afe:	4620      	mov	r0, r4
   d8b00:	f7ff ffd6 	bl	d8ab0 <_ZN6String4copyEPKcj>
}
   d8b04:	4620      	mov	r0, r4
   d8b06:	b002      	add	sp, #8
   d8b08:	bd10      	pop	{r4, pc}

000d8b0a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8b0a:	b538      	push	{r3, r4, r5, lr}
   d8b0c:	4605      	mov	r5, r0
	if (buffer) {
   d8b0e:	6800      	ldr	r0, [r0, #0]
{
   d8b10:	460c      	mov	r4, r1
	if (buffer) {
   d8b12:	b168      	cbz	r0, d8b30 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d8b14:	686a      	ldr	r2, [r5, #4]
   d8b16:	688b      	ldr	r3, [r1, #8]
   d8b18:	429a      	cmp	r2, r3
   d8b1a:	d307      	bcc.n	d8b2c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8b1c:	6809      	ldr	r1, [r1, #0]
   d8b1e:	f001 f808 	bl	d9b32 <strcpy>
			len = rhs.len;
   d8b22:	68a3      	ldr	r3, [r4, #8]
   d8b24:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8b26:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8b28:	60a3      	str	r3, [r4, #8]
}
   d8b2a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d8b2c:	f7fd ff7c 	bl	d6a28 <free>
	buffer = rhs.buffer;
   d8b30:	6823      	ldr	r3, [r4, #0]
   d8b32:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d8b34:	6863      	ldr	r3, [r4, #4]
   d8b36:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8b38:	68a3      	ldr	r3, [r4, #8]
   d8b3a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8b3c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d8b3e:	e9c4 3300 	strd	r3, r3, [r4]
   d8b42:	e7f1      	b.n	d8b28 <_ZN6String4moveERS_+0x1e>

000d8b44 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d8b44:	b510      	push	{r4, lr}
	buffer = NULL;
   d8b46:	2300      	movs	r3, #0
	capacity = 0;
   d8b48:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d8b4c:	4604      	mov	r4, r0
	len = 0;
   d8b4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b50:	7303      	strb	r3, [r0, #12]
	move(rval);
   d8b52:	f7ff ffda 	bl	d8b0a <_ZN6String4moveERS_>
}
   d8b56:	4620      	mov	r0, r4
   d8b58:	bd10      	pop	{r4, pc}

000d8b5a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8b5a:	4288      	cmp	r0, r1
{
   d8b5c:	b510      	push	{r4, lr}
   d8b5e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8b60:	d005      	beq.n	d8b6e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8b62:	680b      	ldr	r3, [r1, #0]
   d8b64:	b12b      	cbz	r3, d8b72 <_ZN6StringaSERKS_+0x18>
   d8b66:	688a      	ldr	r2, [r1, #8]
   d8b68:	4619      	mov	r1, r3
   d8b6a:	f7ff ffa1 	bl	d8ab0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8b6e:	4620      	mov	r0, r4
   d8b70:	bd10      	pop	{r4, pc}
	else invalidate();
   d8b72:	f7ff ff72 	bl	d8a5a <_ZN6String10invalidateEv>
   d8b76:	e7fa      	b.n	d8b6e <_ZN6StringaSERKS_+0x14>

000d8b78 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d8b78:	b510      	push	{r4, lr}
	buffer = NULL;
   d8b7a:	2300      	movs	r3, #0
String::String(const String &value)
   d8b7c:	4604      	mov	r4, r0
	capacity = 0;
   d8b7e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d8b82:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b84:	7303      	strb	r3, [r0, #12]
	*this = value;
   d8b86:	f7ff ffe8 	bl	d8b5a <_ZN6StringaSERKS_>
}
   d8b8a:	4620      	mov	r0, r4
   d8b8c:	bd10      	pop	{r4, pc}

000d8b8e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8b8e:	b513      	push	{r0, r1, r4, lr}
   d8b90:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8b92:	b159      	cbz	r1, d8bac <_ZN6StringaSEPKc+0x1e>
   d8b94:	4608      	mov	r0, r1
   d8b96:	9101      	str	r1, [sp, #4]
   d8b98:	f000 fff1 	bl	d9b7e <strlen>
   d8b9c:	9901      	ldr	r1, [sp, #4]
   d8b9e:	4602      	mov	r2, r0
   d8ba0:	4620      	mov	r0, r4
   d8ba2:	f7ff ff85 	bl	d8ab0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8ba6:	4620      	mov	r0, r4
   d8ba8:	b002      	add	sp, #8
   d8baa:	bd10      	pop	{r4, pc}
	else invalidate();
   d8bac:	f7ff ff55 	bl	d8a5a <_ZN6String10invalidateEv>
   d8bb0:	e7f9      	b.n	d8ba6 <_ZN6StringaSEPKc+0x18>
	...

000d8bb4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8bb4:	4b05      	ldr	r3, [pc, #20]	; (d8bcc <_GLOBAL__sub_I_System+0x18>)
   d8bb6:	2202      	movs	r2, #2
   d8bb8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8bba:	4b05      	ldr	r3, [pc, #20]	; (d8bd0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8bbc:	4a05      	ldr	r2, [pc, #20]	; (d8bd4 <_GLOBAL__sub_I_System+0x20>)
   d8bbe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d8bc0:	2000      	movs	r0, #0
   d8bc2:	6018      	str	r0, [r3, #0]
   d8bc4:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d8bc6:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8bc8:	f7fd be52 	b.w	d6870 <set_system_mode>
   d8bcc:	2003e5e0 	.word	0x2003e5e0
   d8bd0:	2003e5d4 	.word	0x2003e5d4
   d8bd4:	ffff0000 	.word	0xffff0000

000d8bd8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d8bd8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8bda:	2000      	movs	r0, #0
   d8bdc:	f7fd feac 	bl	d6938 <spark_sync_time_pending>
   d8be0:	b128      	cbz	r0, d8bee <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8be2:	f7fd fe99 	bl	d6918 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8be6:	f080 0001 	eor.w	r0, r0, #1
   d8bea:	b2c0      	uxtb	r0, r0
    }
   d8bec:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8bee:	2001      	movs	r0, #1
   d8bf0:	e7fc      	b.n	d8bec <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8bf2 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8bf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8bf4:	4602      	mov	r2, r0
   d8bf6:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8bf8:	4668      	mov	r0, sp
    struct timeval tv = {
   d8bfa:	2100      	movs	r1, #0
    };
   d8bfc:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8c00:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8c04:	f7fd fca2 	bl	d654c <hal_rtc_set_time>
   d8c08:	4602      	mov	r2, r0
   d8c0a:	b910      	cbnz	r0, d8c12 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8c0c:	4601      	mov	r1, r0
   d8c0e:	f7fd fe5f 	bl	d68d0 <system_notify_time_changed>
    }
}
   d8c12:	b005      	add	sp, #20
   d8c14:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c18 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8c18:	b530      	push	{r4, r5, lr}
   d8c1a:	4604      	mov	r4, r0
    t += time_zone_cache;
   d8c1c:	4818      	ldr	r0, [pc, #96]	; (d8c80 <_ZN9TimeClass7timeStrEx+0x68>)
   d8c1e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8c22:	1852      	adds	r2, r2, r1
   d8c24:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d8c28:	4816      	ldr	r0, [pc, #88]	; (d8c84 <_ZN9TimeClass7timeStrEx+0x6c>)
   d8c2a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8c2e:	1852      	adds	r2, r2, r1
{
   d8c30:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d8c32:	eb40 0303 	adc.w	r3, r0, r3
   d8c36:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d8c3a:	2224      	movs	r2, #36	; 0x24
   d8c3c:	eb0d 0002 	add.w	r0, sp, r2
   d8c40:	2100      	movs	r1, #0
   d8c42:	f000 fef5 	bl	d9a30 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d8c46:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d8c48:	a909      	add	r1, sp, #36	; 0x24
   d8c4a:	4668      	mov	r0, sp
   d8c4c:	f7fd ff34 	bl	d6ab8 <localtime_r>
    char ascstr[26] = {};
   d8c50:	2216      	movs	r2, #22
   d8c52:	4629      	mov	r1, r5
   d8c54:	a803      	add	r0, sp, #12
   d8c56:	9502      	str	r5, [sp, #8]
   d8c58:	f000 feea 	bl	d9a30 <memset>
    asctime_r(&calendar_time, ascstr);
   d8c5c:	a902      	add	r1, sp, #8
   d8c5e:	a809      	add	r0, sp, #36	; 0x24
   d8c60:	f000 fe92 	bl	d9988 <asctime_r>
    int len = strlen(ascstr);
   d8c64:	a802      	add	r0, sp, #8
   d8c66:	f000 ff8a 	bl	d9b7e <strlen>
    ascstr[len-1] = 0; // remove final newline
   d8c6a:	ab12      	add	r3, sp, #72	; 0x48
   d8c6c:	4418      	add	r0, r3
    return String(ascstr);
   d8c6e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d8c70:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d8c74:	4620      	mov	r0, r4
   d8c76:	f7ff ff34 	bl	d8ae2 <_ZN6StringC1EPKc>
}
   d8c7a:	4620      	mov	r0, r4
   d8c7c:	b013      	add	sp, #76	; 0x4c
   d8c7e:	bd30      	pop	{r4, r5, pc}
   d8c80:	2003e5f0 	.word	0x2003e5f0
   d8c84:	2003e5e8 	.word	0x2003e5e8

000d8c88 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8c88:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8c8a:	2000      	movs	r0, #0
   d8c8c:	f7fd fc46 	bl	d651c <hal_rtc_time_is_valid>
    if (rtcstate)
   d8c90:	4604      	mov	r4, r0
   d8c92:	b9a0      	cbnz	r0, d8cbe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8c94:	f7fd fde4 	bl	d6860 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8c98:	2801      	cmp	r0, #1
   d8c9a:	d110      	bne.n	d8cbe <_ZN9TimeClass7isValidEv+0x36>
   d8c9c:	4620      	mov	r0, r4
   d8c9e:	f7fd fe0f 	bl	d68c0 <system_thread_get_state>
   d8ca2:	b960      	cbnz	r0, d8cbe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8ca4:	f7ff ff98 	bl	d8bd8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8ca8:	b910      	cbnz	r0, d8cb0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8caa:	f7fd fe2d 	bl	d6908 <spark_process>
        while (_while() && !_condition()) {
   d8cae:	e7f9      	b.n	d8ca4 <_ZN9TimeClass7isValidEv+0x1c>
   d8cb0:	f7ff ff92 	bl	d8bd8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8cb8:	2000      	movs	r0, #0
   d8cba:	f7fd bc2f 	b.w	d651c <hal_rtc_time_is_valid>
}
   d8cbe:	4620      	mov	r0, r4
   d8cc0:	bd10      	pop	{r4, pc}

000d8cc2 <_ZN9TimeClass3nowEv>:
{
   d8cc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8cc4:	f7ff ffe0 	bl	d8c88 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8cc8:	2210      	movs	r2, #16
   d8cca:	2100      	movs	r1, #0
   d8ccc:	4668      	mov	r0, sp
   d8cce:	f000 feaf 	bl	d9a30 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8cd2:	2100      	movs	r1, #0
   d8cd4:	4668      	mov	r0, sp
   d8cd6:	f7fd fc31 	bl	d653c <hal_rtc_get_time>
}
   d8cda:	9800      	ldr	r0, [sp, #0]
   d8cdc:	b005      	add	sp, #20
   d8cde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8ce4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8ce4:	4b02      	ldr	r3, [pc, #8]	; (d8cf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8ce6:	681a      	ldr	r2, [r3, #0]
   d8ce8:	4b02      	ldr	r3, [pc, #8]	; (d8cf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8cea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8cec:	4770      	bx	lr
   d8cee:	bf00      	nop
   d8cf0:	2003ddc4 	.word	0x2003ddc4
   d8cf4:	2003e5e4 	.word	0x2003e5e4

000d8cf8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8cf8:	4770      	bx	lr

000d8cfa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8cfa:	7441      	strb	r1, [r0, #17]
}
   d8cfc:	4770      	bx	lr

000d8cfe <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8cfe:	4770      	bx	lr

000d8d00 <_ZN11USARTSerial17availableForWriteEv>:
{
   d8d00:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8d02:	7c00      	ldrb	r0, [r0, #16]
   d8d04:	f7fd fd2a 	bl	d675c <hal_usart_available_data_for_write>
}
   d8d08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8d0c:	bd08      	pop	{r3, pc}

000d8d0e <_ZN11USARTSerial9availableEv>:
{
   d8d0e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8d10:	7c00      	ldrb	r0, [r0, #16]
   d8d12:	f7fd fcfb 	bl	d670c <hal_usart_available>
}
   d8d16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8d1a:	bd08      	pop	{r3, pc}

000d8d1c <_ZN11USARTSerial4peekEv>:
{
   d8d1c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8d1e:	7c00      	ldrb	r0, [r0, #16]
   d8d20:	f7fd fd04 	bl	d672c <hal_usart_peek>
}
   d8d24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8d28:	bd08      	pop	{r3, pc}

000d8d2a <_ZN11USARTSerial4readEv>:
{
   d8d2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8d2c:	7c00      	ldrb	r0, [r0, #16]
   d8d2e:	f7fd fcf5 	bl	d671c <hal_usart_read>
}
   d8d32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8d36:	bd08      	pop	{r3, pc}

000d8d38 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d8d38:	7c00      	ldrb	r0, [r0, #16]
   d8d3a:	f7fd bcff 	b.w	d673c <hal_usart_flush>

000d8d3e <_ZN11USARTSerial5writeEh>:
{
   d8d3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8d40:	7c45      	ldrb	r5, [r0, #17]
{
   d8d42:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8d44:	b12d      	cbz	r5, d8d52 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d8d46:	7c20      	ldrb	r0, [r4, #16]
}
   d8d48:	b003      	add	sp, #12
   d8d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8d4e:	f7fd bcd5 	b.w	d66fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8d52:	7c00      	ldrb	r0, [r0, #16]
   d8d54:	9101      	str	r1, [sp, #4]
   d8d56:	f7fd fd01 	bl	d675c <hal_usart_available_data_for_write>
   d8d5a:	2800      	cmp	r0, #0
   d8d5c:	9901      	ldr	r1, [sp, #4]
   d8d5e:	dcf2      	bgt.n	d8d46 <_ZN11USARTSerial5writeEh+0x8>
}
   d8d60:	4628      	mov	r0, r5
   d8d62:	b003      	add	sp, #12
   d8d64:	bd30      	pop	{r4, r5, pc}

000d8d66 <_ZN11USARTSerialD0Ev>:
   d8d66:	b510      	push	{r4, lr}
   d8d68:	2114      	movs	r1, #20
   d8d6a:	4604      	mov	r4, r0
   d8d6c:	f000 fa14 	bl	d9198 <_ZdlPvj>
   d8d70:	4620      	mov	r0, r4
   d8d72:	bd10      	pop	{r4, pc}

000d8d74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8d74:	b510      	push	{r4, lr}
   d8d76:	f04f 0c00 	mov.w	ip, #0
   d8d7a:	4604      	mov	r4, r0
   d8d7c:	4608      	mov	r0, r1
   d8d7e:	4611      	mov	r1, r2
   d8d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8d84:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8d88:	4a04      	ldr	r2, [pc, #16]	; (d8d9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8d8a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8d8c:	2201      	movs	r2, #1
  _serial = serial;
   d8d8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8d90:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8d92:	461a      	mov	r2, r3
   d8d94:	f7fd fca2 	bl	d66dc <hal_usart_init>
}
   d8d98:	4620      	mov	r0, r4
   d8d9a:	bd10      	pop	{r4, pc}
   d8d9c:	000da56c 	.word	0x000da56c

000d8da0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d8da0:	7c00      	ldrb	r0, [r0, #16]
   d8da2:	2300      	movs	r3, #0
   d8da4:	f7fd bce2 	b.w	d676c <hal_usart_begin_config>

000d8da8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d8da8:	2200      	movs	r2, #0
   d8daa:	f7ff bff9 	b.w	d8da0 <_ZN11USARTSerial5beginEmm>

000d8dae <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d8dae:	7c00      	ldrb	r0, [r0, #16]
   d8db0:	f7fd bc9c 	b.w	d66ec <hal_usart_end>

000d8db4 <_Z22__fetch_global_Serial1v>:
{
   d8db4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8db6:	4c0d      	ldr	r4, [pc, #52]	; (d8dec <_Z22__fetch_global_Serial1v+0x38>)
   d8db8:	7821      	ldrb	r1, [r4, #0]
   d8dba:	f3bf 8f5b 	dmb	ish
   d8dbe:	f011 0101 	ands.w	r1, r1, #1
   d8dc2:	d110      	bne.n	d8de6 <_Z22__fetch_global_Serial1v+0x32>
   d8dc4:	4620      	mov	r0, r4
   d8dc6:	9101      	str	r1, [sp, #4]
   d8dc8:	f7fb f976 	bl	d40b8 <__cxa_guard_acquire>
   d8dcc:	9901      	ldr	r1, [sp, #4]
   d8dce:	b150      	cbz	r0, d8de6 <_Z22__fetch_global_Serial1v+0x32>
   d8dd0:	4b07      	ldr	r3, [pc, #28]	; (d8df0 <_Z22__fetch_global_Serial1v+0x3c>)
   d8dd2:	4a08      	ldr	r2, [pc, #32]	; (d8df4 <_Z22__fetch_global_Serial1v+0x40>)
   d8dd4:	4808      	ldr	r0, [pc, #32]	; (d8df8 <_Z22__fetch_global_Serial1v+0x44>)
   d8dd6:	f7ff ffcd 	bl	d8d74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8dda:	4620      	mov	r0, r4
   d8ddc:	f7fb f971 	bl	d40c2 <__cxa_guard_release>
   d8de0:	4806      	ldr	r0, [pc, #24]	; (d8dfc <_Z22__fetch_global_Serial1v+0x48>)
   d8de2:	f000 fdf7 	bl	d99d4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8de6:	4804      	ldr	r0, [pc, #16]	; (d8df8 <_Z22__fetch_global_Serial1v+0x44>)
   d8de8:	b002      	add	sp, #8
   d8dea:	bd10      	pop	{r4, pc}
   d8dec:	2003e5f8 	.word	0x2003e5f8
   d8df0:	2003e680 	.word	0x2003e680
   d8df4:	2003e5fc 	.word	0x2003e5fc
   d8df8:	2003e704 	.word	0x2003e704
   d8dfc:	000d8cff 	.word	0x000d8cff

000d8e00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8e00:	7441      	strb	r1, [r0, #17]
}
   d8e02:	4770      	bx	lr

000d8e04 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8e04:	4770      	bx	lr

000d8e06 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8e06:	4770      	bx	lr

000d8e08 <_ZN9USBSerial4readEv>:
{
   d8e08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8e0a:	2100      	movs	r1, #0
   d8e0c:	7c00      	ldrb	r0, [r0, #16]
   d8e0e:	f7fd fcdd 	bl	d67cc <HAL_USB_USART_Receive_Data>
}
   d8e12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8e16:	bd08      	pop	{r3, pc}

000d8e18 <_ZN9USBSerial4peekEv>:
{
   d8e18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8e1a:	2101      	movs	r1, #1
   d8e1c:	7c00      	ldrb	r0, [r0, #16]
   d8e1e:	f7fd fcd5 	bl	d67cc <HAL_USB_USART_Receive_Data>
}
   d8e22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8e26:	bd08      	pop	{r3, pc}

000d8e28 <_ZN9USBSerial17availableForWriteEv>:
{
   d8e28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8e2a:	7c00      	ldrb	r0, [r0, #16]
   d8e2c:	f7fd fcc6 	bl	d67bc <HAL_USB_USART_Available_Data_For_Write>
}
   d8e30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8e34:	bd08      	pop	{r3, pc}

000d8e36 <_ZN9USBSerial9availableEv>:
{
   d8e36:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8e38:	7c00      	ldrb	r0, [r0, #16]
   d8e3a:	f7fd fcb7 	bl	d67ac <HAL_USB_USART_Available_Data>
}
   d8e3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8e42:	bd08      	pop	{r3, pc}

000d8e44 <_ZN9USBSerial5writeEh>:
{
   d8e44:	b513      	push	{r0, r1, r4, lr}
   d8e46:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8e48:	7c00      	ldrb	r0, [r0, #16]
{
   d8e4a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8e4c:	f7fd fcb6 	bl	d67bc <HAL_USB_USART_Available_Data_For_Write>
   d8e50:	2800      	cmp	r0, #0
   d8e52:	9901      	ldr	r1, [sp, #4]
   d8e54:	dc01      	bgt.n	d8e5a <_ZN9USBSerial5writeEh+0x16>
   d8e56:	7c60      	ldrb	r0, [r4, #17]
   d8e58:	b120      	cbz	r0, d8e64 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8e5a:	7c20      	ldrb	r0, [r4, #16]
   d8e5c:	f7fd fcbe 	bl	d67dc <HAL_USB_USART_Send_Data>
   d8e60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8e64:	b002      	add	sp, #8
   d8e66:	bd10      	pop	{r4, pc}

000d8e68 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8e68:	7c00      	ldrb	r0, [r0, #16]
   d8e6a:	f7fd bcbf 	b.w	d67ec <HAL_USB_USART_Flush_Data>

000d8e6e <_ZN9USBSerialD0Ev>:
   d8e6e:	b510      	push	{r4, lr}
   d8e70:	2114      	movs	r1, #20
   d8e72:	4604      	mov	r4, r0
   d8e74:	f000 f990 	bl	d9198 <_ZdlPvj>
   d8e78:	4620      	mov	r0, r4
   d8e7a:	bd10      	pop	{r4, pc}

000d8e7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8e7c:	b510      	push	{r4, lr}
   d8e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8e82:	4604      	mov	r4, r0
   d8e84:	4608      	mov	r0, r1
   d8e86:	2100      	movs	r1, #0
   d8e88:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8e8c:	4b04      	ldr	r3, [pc, #16]	; (d8ea0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8e8e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8e90:	2301      	movs	r3, #1
  _serial = serial;
   d8e92:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8e94:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8e96:	4611      	mov	r1, r2
   d8e98:	f7fd fc70 	bl	d677c <HAL_USB_USART_Init>
}
   d8e9c:	4620      	mov	r0, r4
   d8e9e:	bd10      	pop	{r4, pc}
   d8ea0:	000da59c 	.word	0x000da59c

000d8ea4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8ea4:	7c00      	ldrb	r0, [r0, #16]
   d8ea6:	2200      	movs	r2, #0
   d8ea8:	f7fd bc70 	b.w	d678c <HAL_USB_USART_Begin>

000d8eac <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d8eac:	7c00      	ldrb	r0, [r0, #16]
   d8eae:	f7fd bc75 	b.w	d679c <HAL_USB_USART_End>

000d8eb2 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   d8eb2:	7c00      	ldrb	r0, [r0, #16]
   d8eb4:	f7fd bca2 	b.w	d67fc <HAL_USB_USART_Is_Connected>

000d8eb8 <_Z19acquireSerialBufferv>:
{
   d8eb8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8eba:	2214      	movs	r2, #20
{
   d8ebc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8ebe:	2100      	movs	r1, #0
   d8ec0:	f000 fdb6 	bl	d9a30 <memset>
}
   d8ec4:	4620      	mov	r0, r4
   d8ec6:	bd10      	pop	{r4, pc}

000d8ec8 <_Z16_fetch_usbserialv>:
{
   d8ec8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8eca:	4c0f      	ldr	r4, [pc, #60]	; (d8f08 <_Z16_fetch_usbserialv+0x40>)
{
   d8ecc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8ece:	a803      	add	r0, sp, #12
   d8ed0:	f7ff fff2 	bl	d8eb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8ed4:	7821      	ldrb	r1, [r4, #0]
   d8ed6:	f3bf 8f5b 	dmb	ish
   d8eda:	f011 0101 	ands.w	r1, r1, #1
   d8ede:	d10f      	bne.n	d8f00 <_Z16_fetch_usbserialv+0x38>
   d8ee0:	4620      	mov	r0, r4
   d8ee2:	9101      	str	r1, [sp, #4]
   d8ee4:	f7fb f8e8 	bl	d40b8 <__cxa_guard_acquire>
   d8ee8:	9901      	ldr	r1, [sp, #4]
   d8eea:	b148      	cbz	r0, d8f00 <_Z16_fetch_usbserialv+0x38>
   d8eec:	aa03      	add	r2, sp, #12
   d8eee:	4807      	ldr	r0, [pc, #28]	; (d8f0c <_Z16_fetch_usbserialv+0x44>)
   d8ef0:	f7ff ffc4 	bl	d8e7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8ef4:	4620      	mov	r0, r4
   d8ef6:	f7fb f8e4 	bl	d40c2 <__cxa_guard_release>
   d8efa:	4805      	ldr	r0, [pc, #20]	; (d8f10 <_Z16_fetch_usbserialv+0x48>)
   d8efc:	f000 fd6a 	bl	d99d4 <atexit>
	return _usbserial;
}
   d8f00:	4802      	ldr	r0, [pc, #8]	; (d8f0c <_Z16_fetch_usbserialv+0x44>)
   d8f02:	b008      	add	sp, #32
   d8f04:	bd10      	pop	{r4, pc}
   d8f06:	bf00      	nop
   d8f08:	2003e718 	.word	0x2003e718
   d8f0c:	2003e71c 	.word	0x2003e71c
   d8f10:	000d8e05 	.word	0x000d8e05

000d8f14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8f14:	4b01      	ldr	r3, [pc, #4]	; (d8f1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8f16:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8f18:	4770      	bx	lr
   d8f1a:	bf00      	nop
   d8f1c:	2003ddc8 	.word	0x2003ddc8

000d8f20 <serialEventRun>:
{
   d8f20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8f22:	4b0b      	ldr	r3, [pc, #44]	; (d8f50 <serialEventRun+0x30>)
   d8f24:	b143      	cbz	r3, d8f38 <serialEventRun+0x18>
   d8f26:	f7ff ffcf 	bl	d8ec8 <_Z16_fetch_usbserialv>
   d8f2a:	6803      	ldr	r3, [r0, #0]
   d8f2c:	691b      	ldr	r3, [r3, #16]
   d8f2e:	4798      	blx	r3
   d8f30:	2800      	cmp	r0, #0
   d8f32:	dd01      	ble.n	d8f38 <serialEventRun+0x18>
        serialEvent();
   d8f34:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8f38:	4b06      	ldr	r3, [pc, #24]	; (d8f54 <serialEventRun+0x34>)
   d8f3a:	b143      	cbz	r3, d8f4e <serialEventRun+0x2e>
   d8f3c:	f7ff ff3a 	bl	d8db4 <_Z22__fetch_global_Serial1v>
   d8f40:	6803      	ldr	r3, [r0, #0]
   d8f42:	691b      	ldr	r3, [r3, #16]
   d8f44:	4798      	blx	r3
   d8f46:	2800      	cmp	r0, #0
   d8f48:	dd01      	ble.n	d8f4e <serialEventRun+0x2e>
        serialEvent1();
   d8f4a:	f3af 8000 	nop.w
}
   d8f4e:	bd08      	pop	{r3, pc}
	...

000d8f58 <_post_loop>:
{
   d8f58:	b508      	push	{r3, lr}
	serialEventRun();
   d8f5a:	f7ff ffe1 	bl	d8f20 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8f5e:	f7fd fad5 	bl	d650c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8f62:	4b01      	ldr	r3, [pc, #4]	; (d8f68 <_post_loop+0x10>)
   d8f64:	6018      	str	r0, [r3, #0]
}
   d8f66:	bd08      	pop	{r3, pc}
   d8f68:	2003e738 	.word	0x2003e738

000d8f6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8f6c:	4805      	ldr	r0, [pc, #20]	; (d8f84 <_Z33system_initialize_user_backup_ramv+0x18>)
   d8f6e:	4a06      	ldr	r2, [pc, #24]	; (d8f88 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8f70:	4906      	ldr	r1, [pc, #24]	; (d8f8c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d8f72:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8f74:	1a12      	subs	r2, r2, r0
   d8f76:	f000 fd33 	bl	d99e0 <memcpy>
    __backup_sram_signature = signature;
   d8f7a:	4b05      	ldr	r3, [pc, #20]	; (d8f90 <_Z33system_initialize_user_backup_ramv+0x24>)
   d8f7c:	4a05      	ldr	r2, [pc, #20]	; (d8f94 <_Z33system_initialize_user_backup_ramv+0x28>)
   d8f7e:	601a      	str	r2, [r3, #0]
}
   d8f80:	bd08      	pop	{r3, pc}
   d8f82:	bf00      	nop
   d8f84:	2003f400 	.word	0x2003f400
   d8f88:	2003f408 	.word	0x2003f408
   d8f8c:	000da750 	.word	0x000da750
   d8f90:	2003f404 	.word	0x2003f404
   d8f94:	9a271c1e 	.word	0x9a271c1e

000d8f98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8f98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8f9a:	2300      	movs	r3, #0
   d8f9c:	9300      	str	r3, [sp, #0]
   d8f9e:	461a      	mov	r2, r3
   d8fa0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8fa4:	f7fd fca6 	bl	d68f4 <system_ctrl_set_result>
}
   d8fa8:	b003      	add	sp, #12
   d8faa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8fb0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8fb0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8fb2:	8843      	ldrh	r3, [r0, #2]
   d8fb4:	2b0a      	cmp	r3, #10
   d8fb6:	d008      	beq.n	d8fca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8fb8:	2b50      	cmp	r3, #80	; 0x50
   d8fba:	d10b      	bne.n	d8fd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8fbc:	4b09      	ldr	r3, [pc, #36]	; (d8fe4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8fbe:	681b      	ldr	r3, [r3, #0]
   d8fc0:	b14b      	cbz	r3, d8fd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8fc2:	b003      	add	sp, #12
   d8fc4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8fc8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8fca:	f7ff ffe5 	bl	d8f98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8fce:	b003      	add	sp, #12
   d8fd0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8fd4:	2300      	movs	r3, #0
   d8fd6:	9300      	str	r3, [sp, #0]
   d8fd8:	461a      	mov	r2, r3
   d8fda:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8fde:	f7fd fc89 	bl	d68f4 <system_ctrl_set_result>
}
   d8fe2:	e7f4      	b.n	d8fce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8fe4:	2003e734 	.word	0x2003e734

000d8fe8 <module_user_init_hook>:
{
   d8fe8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8fea:	4812      	ldr	r0, [pc, #72]	; (d9034 <module_user_init_hook+0x4c>)
   d8fec:	2100      	movs	r1, #0
   d8fee:	f7fd fd5b 	bl	d6aa8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8ff2:	4b11      	ldr	r3, [pc, #68]	; (d9038 <module_user_init_hook+0x50>)
   d8ff4:	681a      	ldr	r2, [r3, #0]
   d8ff6:	4b11      	ldr	r3, [pc, #68]	; (d903c <module_user_init_hook+0x54>)
   d8ff8:	429a      	cmp	r2, r3
   d8ffa:	4b11      	ldr	r3, [pc, #68]	; (d9040 <module_user_init_hook+0x58>)
   d8ffc:	bf0c      	ite	eq
   d8ffe:	2201      	moveq	r2, #1
   d9000:	2200      	movne	r2, #0
   d9002:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9004:	d001      	beq.n	d900a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d9006:	f7ff ffb1 	bl	d8f6c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d900a:	f7fd fa6f 	bl	d64ec <HAL_RNG_GetRandomNumber>
   d900e:	4604      	mov	r4, r0
    srand(seed);
   d9010:	f000 fd16 	bl	d9a40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9014:	4b0b      	ldr	r3, [pc, #44]	; (d9044 <module_user_init_hook+0x5c>)
   d9016:	b113      	cbz	r3, d901e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d9018:	4620      	mov	r0, r4
   d901a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d901e:	2100      	movs	r1, #0
   d9020:	4808      	ldr	r0, [pc, #32]	; (d9044 <module_user_init_hook+0x5c>)
   d9022:	f7fd fc91 	bl	d6948 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d902a:	4807      	ldr	r0, [pc, #28]	; (d9048 <module_user_init_hook+0x60>)
   d902c:	2100      	movs	r1, #0
   d902e:	f7fd bc57 	b.w	d68e0 <system_ctrl_set_app_request_handler>
   d9032:	bf00      	nop
   d9034:	000d8f15 	.word	0x000d8f15
   d9038:	2003f404 	.word	0x2003f404
   d903c:	9a271c1e 	.word	0x9a271c1e
   d9040:	2003e730 	.word	0x2003e730
   d9044:	00000000 	.word	0x00000000
   d9048:	000d8fb1 	.word	0x000d8fb1

000d904c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d904c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d904e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9050:	d902      	bls.n	d9058 <pinAvailable+0xc>
    return false;
   d9052:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9054:	b002      	add	sp, #8
   d9056:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9058:	f1a0 030b 	sub.w	r3, r0, #11
   d905c:	2b02      	cmp	r3, #2
   d905e:	d81a      	bhi.n	d9096 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9060:	4c17      	ldr	r4, [pc, #92]	; (d90c0 <pinAvailable+0x74>)
   d9062:	7821      	ldrb	r1, [r4, #0]
   d9064:	f3bf 8f5b 	dmb	ish
   d9068:	f011 0101 	ands.w	r1, r1, #1
   d906c:	d10b      	bne.n	d9086 <pinAvailable+0x3a>
   d906e:	4620      	mov	r0, r4
   d9070:	9101      	str	r1, [sp, #4]
   d9072:	f7fb f821 	bl	d40b8 <__cxa_guard_acquire>
   d9076:	9901      	ldr	r1, [sp, #4]
   d9078:	b128      	cbz	r0, d9086 <pinAvailable+0x3a>
   d907a:	4812      	ldr	r0, [pc, #72]	; (d90c4 <pinAvailable+0x78>)
   d907c:	f7ff fc2c 	bl	d88d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9080:	4620      	mov	r0, r4
   d9082:	f7fb f81e 	bl	d40c2 <__cxa_guard_release>
   d9086:	4b0f      	ldr	r3, [pc, #60]	; (d90c4 <pinAvailable+0x78>)
   d9088:	7818      	ldrb	r0, [r3, #0]
   d908a:	f7fd faff 	bl	d668c <hal_spi_is_enabled>
   d908e:	2800      	cmp	r0, #0
   d9090:	d1df      	bne.n	d9052 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9092:	2001      	movs	r0, #1
   d9094:	e7de      	b.n	d9054 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9096:	2801      	cmp	r0, #1
   d9098:	d809      	bhi.n	d90ae <pinAvailable+0x62>
   d909a:	f000 f859 	bl	d9150 <_Z19__fetch_global_Wirev>
   d909e:	2100      	movs	r1, #0
   d90a0:	7c00      	ldrb	r0, [r0, #16]
   d90a2:	f7fd faab 	bl	d65fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d90a6:	f080 0001 	eor.w	r0, r0, #1
   d90aa:	b2c0      	uxtb	r0, r0
   d90ac:	e7d2      	b.n	d9054 <pinAvailable+0x8>
   d90ae:	3809      	subs	r0, #9
   d90b0:	2801      	cmp	r0, #1
   d90b2:	d8ee      	bhi.n	d9092 <pinAvailable+0x46>
   d90b4:	f7ff fe7e 	bl	d8db4 <_Z22__fetch_global_Serial1v>
   d90b8:	7c00      	ldrb	r0, [r0, #16]
   d90ba:	f7fd fb47 	bl	d674c <hal_usart_is_enabled>
   d90be:	e7f2      	b.n	d90a6 <pinAvailable+0x5a>
   d90c0:	2003e31c 	.word	0x2003e31c
   d90c4:	2003e320 	.word	0x2003e320

000d90c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d90c8:	2823      	cmp	r0, #35	; 0x23
{
   d90ca:	b538      	push	{r3, r4, r5, lr}
   d90cc:	4604      	mov	r4, r0
   d90ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d90d0:	d80a      	bhi.n	d90e8 <pinMode+0x20>
   d90d2:	29ff      	cmp	r1, #255	; 0xff
   d90d4:	d008      	beq.n	d90e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d90d6:	f7ff ffb9 	bl	d904c <pinAvailable>
   d90da:	b128      	cbz	r0, d90e8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d90dc:	4629      	mov	r1, r5
   d90de:	4620      	mov	r0, r4
}
   d90e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d90e4:	f7fd ba3a 	b.w	d655c <HAL_Pin_Mode>
}
   d90e8:	bd38      	pop	{r3, r4, r5, pc}

000d90ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d90ea:	b538      	push	{r3, r4, r5, lr}
   d90ec:	4604      	mov	r4, r0
   d90ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d90f0:	f7fd fa3c 	bl	d656c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d90f4:	28ff      	cmp	r0, #255	; 0xff
   d90f6:	d010      	beq.n	d911a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d90f8:	2806      	cmp	r0, #6
   d90fa:	d804      	bhi.n	d9106 <digitalWrite+0x1c>
   d90fc:	234d      	movs	r3, #77	; 0x4d
   d90fe:	fa23 f000 	lsr.w	r0, r3, r0
   d9102:	07c3      	lsls	r3, r0, #31
   d9104:	d409      	bmi.n	d911a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9106:	4620      	mov	r0, r4
   d9108:	f7ff ffa0 	bl	d904c <pinAvailable>
   d910c:	b128      	cbz	r0, d911a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d910e:	4629      	mov	r1, r5
   d9110:	4620      	mov	r0, r4
}
   d9112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9116:	f7fd ba31 	b.w	d657c <HAL_GPIO_Write>
}
   d911a:	bd38      	pop	{r3, r4, r5, pc}

000d911c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d911c:	4770      	bx	lr
	...

000d9120 <_Z17acquireWireBufferv>:
{
   d9120:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9122:	2300      	movs	r3, #0
   d9124:	2520      	movs	r5, #32
   d9126:	8043      	strh	r3, [r0, #2]
   d9128:	2314      	movs	r3, #20
{
   d912a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d912c:	8003      	strh	r3, [r0, #0]
   d912e:	6085      	str	r5, [r0, #8]
   d9130:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9132:	4906      	ldr	r1, [pc, #24]	; (d914c <_Z17acquireWireBufferv+0x2c>)
   d9134:	4628      	mov	r0, r5
   d9136:	f000 f833 	bl	d91a0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d913a:	4904      	ldr	r1, [pc, #16]	; (d914c <_Z17acquireWireBufferv+0x2c>)
	};
   d913c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d913e:	4628      	mov	r0, r5
   d9140:	f000 f82e 	bl	d91a0 <_ZnajRKSt9nothrow_t>
	};
   d9144:	60e0      	str	r0, [r4, #12]
}
   d9146:	4620      	mov	r0, r4
   d9148:	bd38      	pop	{r3, r4, r5, pc}
   d914a:	bf00      	nop
   d914c:	000da5c4 	.word	0x000da5c4

000d9150 <_Z19__fetch_global_Wirev>:
{
   d9150:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9152:	4d0e      	ldr	r5, [pc, #56]	; (d918c <_Z19__fetch_global_Wirev+0x3c>)
   d9154:	7829      	ldrb	r1, [r5, #0]
   d9156:	f3bf 8f5b 	dmb	ish
   d915a:	f011 0401 	ands.w	r4, r1, #1
{
   d915e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9160:	d111      	bne.n	d9186 <_Z19__fetch_global_Wirev+0x36>
   d9162:	4628      	mov	r0, r5
   d9164:	f7fa ffa8 	bl	d40b8 <__cxa_guard_acquire>
   d9168:	b168      	cbz	r0, d9186 <_Z19__fetch_global_Wirev+0x36>
   d916a:	a801      	add	r0, sp, #4
   d916c:	f7ff ffd8 	bl	d9120 <_Z17acquireWireBufferv>
   d9170:	aa01      	add	r2, sp, #4
   d9172:	4621      	mov	r1, r4
   d9174:	4806      	ldr	r0, [pc, #24]	; (d9190 <_Z19__fetch_global_Wirev+0x40>)
   d9176:	f7fe f843 	bl	d7200 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d917a:	4628      	mov	r0, r5
   d917c:	f7fa ffa1 	bl	d40c2 <__cxa_guard_release>
   d9180:	4804      	ldr	r0, [pc, #16]	; (d9194 <_Z19__fetch_global_Wirev+0x44>)
   d9182:	f000 fc27 	bl	d99d4 <atexit>
	return wire;
}
   d9186:	4802      	ldr	r0, [pc, #8]	; (d9190 <_Z19__fetch_global_Wirev+0x40>)
   d9188:	b007      	add	sp, #28
   d918a:	bd30      	pop	{r4, r5, pc}
   d918c:	2003e73c 	.word	0x2003e73c
   d9190:	2003e740 	.word	0x2003e740
   d9194:	000d911d 	.word	0x000d911d

000d9198 <_ZdlPvj>:
   d9198:	f7fa bf81 	b.w	d409e <_ZdlPv>

000d919c <_ZnwjRKSt9nothrow_t>:
   d919c:	f7fa bf7b 	b.w	d4096 <_Znwj>

000d91a0 <_ZnajRKSt9nothrow_t>:
   d91a0:	f7fa bf7b 	b.w	d409a <_Znaj>

000d91a4 <_ZSt25__throw_bad_function_callv>:
   d91a4:	b508      	push	{r3, lr}
   d91a6:	f7fd fc6f 	bl	d6a88 <abort>
	...

000d91ac <__aeabi_drsub>:
   d91ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d91b0:	e002      	b.n	d91b8 <__adddf3>
   d91b2:	bf00      	nop

000d91b4 <__aeabi_dsub>:
   d91b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d91b8 <__adddf3>:
   d91b8:	b530      	push	{r4, r5, lr}
   d91ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d91be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d91c2:	ea94 0f05 	teq	r4, r5
   d91c6:	bf08      	it	eq
   d91c8:	ea90 0f02 	teqeq	r0, r2
   d91cc:	bf1f      	itttt	ne
   d91ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   d91d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d91d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d91da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d91de:	f000 80e2 	beq.w	d93a6 <__adddf3+0x1ee>
   d91e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d91e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d91ea:	bfb8      	it	lt
   d91ec:	426d      	neglt	r5, r5
   d91ee:	dd0c      	ble.n	d920a <__adddf3+0x52>
   d91f0:	442c      	add	r4, r5
   d91f2:	ea80 0202 	eor.w	r2, r0, r2
   d91f6:	ea81 0303 	eor.w	r3, r1, r3
   d91fa:	ea82 0000 	eor.w	r0, r2, r0
   d91fe:	ea83 0101 	eor.w	r1, r3, r1
   d9202:	ea80 0202 	eor.w	r2, r0, r2
   d9206:	ea81 0303 	eor.w	r3, r1, r3
   d920a:	2d36      	cmp	r5, #54	; 0x36
   d920c:	bf88      	it	hi
   d920e:	bd30      	pophi	{r4, r5, pc}
   d9210:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9214:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9218:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d921c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9220:	d002      	beq.n	d9228 <__adddf3+0x70>
   d9222:	4240      	negs	r0, r0
   d9224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9228:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d922c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9230:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9234:	d002      	beq.n	d923c <__adddf3+0x84>
   d9236:	4252      	negs	r2, r2
   d9238:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d923c:	ea94 0f05 	teq	r4, r5
   d9240:	f000 80a7 	beq.w	d9392 <__adddf3+0x1da>
   d9244:	f1a4 0401 	sub.w	r4, r4, #1
   d9248:	f1d5 0e20 	rsbs	lr, r5, #32
   d924c:	db0d      	blt.n	d926a <__adddf3+0xb2>
   d924e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9252:	fa22 f205 	lsr.w	r2, r2, r5
   d9256:	1880      	adds	r0, r0, r2
   d9258:	f141 0100 	adc.w	r1, r1, #0
   d925c:	fa03 f20e 	lsl.w	r2, r3, lr
   d9260:	1880      	adds	r0, r0, r2
   d9262:	fa43 f305 	asr.w	r3, r3, r5
   d9266:	4159      	adcs	r1, r3
   d9268:	e00e      	b.n	d9288 <__adddf3+0xd0>
   d926a:	f1a5 0520 	sub.w	r5, r5, #32
   d926e:	f10e 0e20 	add.w	lr, lr, #32
   d9272:	2a01      	cmp	r2, #1
   d9274:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9278:	bf28      	it	cs
   d927a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d927e:	fa43 f305 	asr.w	r3, r3, r5
   d9282:	18c0      	adds	r0, r0, r3
   d9284:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d928c:	d507      	bpl.n	d929e <__adddf3+0xe6>
   d928e:	f04f 0e00 	mov.w	lr, #0
   d9292:	f1dc 0c00 	rsbs	ip, ip, #0
   d9296:	eb7e 0000 	sbcs.w	r0, lr, r0
   d929a:	eb6e 0101 	sbc.w	r1, lr, r1
   d929e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d92a2:	d31b      	bcc.n	d92dc <__adddf3+0x124>
   d92a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d92a8:	d30c      	bcc.n	d92c4 <__adddf3+0x10c>
   d92aa:	0849      	lsrs	r1, r1, #1
   d92ac:	ea5f 0030 	movs.w	r0, r0, rrx
   d92b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d92b4:	f104 0401 	add.w	r4, r4, #1
   d92b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d92bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d92c0:	f080 809a 	bcs.w	d93f8 <__adddf3+0x240>
   d92c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d92c8:	bf08      	it	eq
   d92ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d92ce:	f150 0000 	adcs.w	r0, r0, #0
   d92d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d92d6:	ea41 0105 	orr.w	r1, r1, r5
   d92da:	bd30      	pop	{r4, r5, pc}
   d92dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d92e0:	4140      	adcs	r0, r0
   d92e2:	eb41 0101 	adc.w	r1, r1, r1
   d92e6:	3c01      	subs	r4, #1
   d92e8:	bf28      	it	cs
   d92ea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d92ee:	d2e9      	bcs.n	d92c4 <__adddf3+0x10c>
   d92f0:	f091 0f00 	teq	r1, #0
   d92f4:	bf04      	itt	eq
   d92f6:	4601      	moveq	r1, r0
   d92f8:	2000      	moveq	r0, #0
   d92fa:	fab1 f381 	clz	r3, r1
   d92fe:	bf08      	it	eq
   d9300:	3320      	addeq	r3, #32
   d9302:	f1a3 030b 	sub.w	r3, r3, #11
   d9306:	f1b3 0220 	subs.w	r2, r3, #32
   d930a:	da0c      	bge.n	d9326 <__adddf3+0x16e>
   d930c:	320c      	adds	r2, #12
   d930e:	dd08      	ble.n	d9322 <__adddf3+0x16a>
   d9310:	f102 0c14 	add.w	ip, r2, #20
   d9314:	f1c2 020c 	rsb	r2, r2, #12
   d9318:	fa01 f00c 	lsl.w	r0, r1, ip
   d931c:	fa21 f102 	lsr.w	r1, r1, r2
   d9320:	e00c      	b.n	d933c <__adddf3+0x184>
   d9322:	f102 0214 	add.w	r2, r2, #20
   d9326:	bfd8      	it	le
   d9328:	f1c2 0c20 	rsble	ip, r2, #32
   d932c:	fa01 f102 	lsl.w	r1, r1, r2
   d9330:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9334:	bfdc      	itt	le
   d9336:	ea41 010c 	orrle.w	r1, r1, ip
   d933a:	4090      	lslle	r0, r2
   d933c:	1ae4      	subs	r4, r4, r3
   d933e:	bfa2      	ittt	ge
   d9340:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9344:	4329      	orrge	r1, r5
   d9346:	bd30      	popge	{r4, r5, pc}
   d9348:	ea6f 0404 	mvn.w	r4, r4
   d934c:	3c1f      	subs	r4, #31
   d934e:	da1c      	bge.n	d938a <__adddf3+0x1d2>
   d9350:	340c      	adds	r4, #12
   d9352:	dc0e      	bgt.n	d9372 <__adddf3+0x1ba>
   d9354:	f104 0414 	add.w	r4, r4, #20
   d9358:	f1c4 0220 	rsb	r2, r4, #32
   d935c:	fa20 f004 	lsr.w	r0, r0, r4
   d9360:	fa01 f302 	lsl.w	r3, r1, r2
   d9364:	ea40 0003 	orr.w	r0, r0, r3
   d9368:	fa21 f304 	lsr.w	r3, r1, r4
   d936c:	ea45 0103 	orr.w	r1, r5, r3
   d9370:	bd30      	pop	{r4, r5, pc}
   d9372:	f1c4 040c 	rsb	r4, r4, #12
   d9376:	f1c4 0220 	rsb	r2, r4, #32
   d937a:	fa20 f002 	lsr.w	r0, r0, r2
   d937e:	fa01 f304 	lsl.w	r3, r1, r4
   d9382:	ea40 0003 	orr.w	r0, r0, r3
   d9386:	4629      	mov	r1, r5
   d9388:	bd30      	pop	{r4, r5, pc}
   d938a:	fa21 f004 	lsr.w	r0, r1, r4
   d938e:	4629      	mov	r1, r5
   d9390:	bd30      	pop	{r4, r5, pc}
   d9392:	f094 0f00 	teq	r4, #0
   d9396:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d939a:	bf06      	itte	eq
   d939c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d93a0:	3401      	addeq	r4, #1
   d93a2:	3d01      	subne	r5, #1
   d93a4:	e74e      	b.n	d9244 <__adddf3+0x8c>
   d93a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d93aa:	bf18      	it	ne
   d93ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d93b0:	d029      	beq.n	d9406 <__adddf3+0x24e>
   d93b2:	ea94 0f05 	teq	r4, r5
   d93b6:	bf08      	it	eq
   d93b8:	ea90 0f02 	teqeq	r0, r2
   d93bc:	d005      	beq.n	d93ca <__adddf3+0x212>
   d93be:	ea54 0c00 	orrs.w	ip, r4, r0
   d93c2:	bf04      	itt	eq
   d93c4:	4619      	moveq	r1, r3
   d93c6:	4610      	moveq	r0, r2
   d93c8:	bd30      	pop	{r4, r5, pc}
   d93ca:	ea91 0f03 	teq	r1, r3
   d93ce:	bf1e      	ittt	ne
   d93d0:	2100      	movne	r1, #0
   d93d2:	2000      	movne	r0, #0
   d93d4:	bd30      	popne	{r4, r5, pc}
   d93d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d93da:	d105      	bne.n	d93e8 <__adddf3+0x230>
   d93dc:	0040      	lsls	r0, r0, #1
   d93de:	4149      	adcs	r1, r1
   d93e0:	bf28      	it	cs
   d93e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d93e6:	bd30      	pop	{r4, r5, pc}
   d93e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d93ec:	bf3c      	itt	cc
   d93ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d93f2:	bd30      	popcc	{r4, r5, pc}
   d93f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d93f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d93fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9400:	f04f 0000 	mov.w	r0, #0
   d9404:	bd30      	pop	{r4, r5, pc}
   d9406:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d940a:	bf1a      	itte	ne
   d940c:	4619      	movne	r1, r3
   d940e:	4610      	movne	r0, r2
   d9410:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9414:	bf1c      	itt	ne
   d9416:	460b      	movne	r3, r1
   d9418:	4602      	movne	r2, r0
   d941a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d941e:	bf06      	itte	eq
   d9420:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9424:	ea91 0f03 	teqeq	r1, r3
   d9428:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d942c:	bd30      	pop	{r4, r5, pc}
   d942e:	bf00      	nop

000d9430 <__aeabi_ui2d>:
   d9430:	f090 0f00 	teq	r0, #0
   d9434:	bf04      	itt	eq
   d9436:	2100      	moveq	r1, #0
   d9438:	4770      	bxeq	lr
   d943a:	b530      	push	{r4, r5, lr}
   d943c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9440:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9444:	f04f 0500 	mov.w	r5, #0
   d9448:	f04f 0100 	mov.w	r1, #0
   d944c:	e750      	b.n	d92f0 <__adddf3+0x138>
   d944e:	bf00      	nop

000d9450 <__aeabi_i2d>:
   d9450:	f090 0f00 	teq	r0, #0
   d9454:	bf04      	itt	eq
   d9456:	2100      	moveq	r1, #0
   d9458:	4770      	bxeq	lr
   d945a:	b530      	push	{r4, r5, lr}
   d945c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9460:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9464:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9468:	bf48      	it	mi
   d946a:	4240      	negmi	r0, r0
   d946c:	f04f 0100 	mov.w	r1, #0
   d9470:	e73e      	b.n	d92f0 <__adddf3+0x138>
   d9472:	bf00      	nop

000d9474 <__aeabi_f2d>:
   d9474:	0042      	lsls	r2, r0, #1
   d9476:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d947a:	ea4f 0131 	mov.w	r1, r1, rrx
   d947e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9482:	bf1f      	itttt	ne
   d9484:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9488:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d948c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9490:	4770      	bxne	lr
   d9492:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9496:	bf08      	it	eq
   d9498:	4770      	bxeq	lr
   d949a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d949e:	bf04      	itt	eq
   d94a0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d94a4:	4770      	bxeq	lr
   d94a6:	b530      	push	{r4, r5, lr}
   d94a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d94ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d94b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d94b4:	e71c      	b.n	d92f0 <__adddf3+0x138>
   d94b6:	bf00      	nop

000d94b8 <__aeabi_ul2d>:
   d94b8:	ea50 0201 	orrs.w	r2, r0, r1
   d94bc:	bf08      	it	eq
   d94be:	4770      	bxeq	lr
   d94c0:	b530      	push	{r4, r5, lr}
   d94c2:	f04f 0500 	mov.w	r5, #0
   d94c6:	e00a      	b.n	d94de <__aeabi_l2d+0x16>

000d94c8 <__aeabi_l2d>:
   d94c8:	ea50 0201 	orrs.w	r2, r0, r1
   d94cc:	bf08      	it	eq
   d94ce:	4770      	bxeq	lr
   d94d0:	b530      	push	{r4, r5, lr}
   d94d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d94d6:	d502      	bpl.n	d94de <__aeabi_l2d+0x16>
   d94d8:	4240      	negs	r0, r0
   d94da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d94de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d94ea:	f43f aed8 	beq.w	d929e <__adddf3+0xe6>
   d94ee:	f04f 0203 	mov.w	r2, #3
   d94f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94f6:	bf18      	it	ne
   d94f8:	3203      	addne	r2, #3
   d94fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94fe:	bf18      	it	ne
   d9500:	3203      	addne	r2, #3
   d9502:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9506:	f1c2 0320 	rsb	r3, r2, #32
   d950a:	fa00 fc03 	lsl.w	ip, r0, r3
   d950e:	fa20 f002 	lsr.w	r0, r0, r2
   d9512:	fa01 fe03 	lsl.w	lr, r1, r3
   d9516:	ea40 000e 	orr.w	r0, r0, lr
   d951a:	fa21 f102 	lsr.w	r1, r1, r2
   d951e:	4414      	add	r4, r2
   d9520:	e6bd      	b.n	d929e <__adddf3+0xe6>
   d9522:	bf00      	nop

000d9524 <__aeabi_dmul>:
   d9524:	b570      	push	{r4, r5, r6, lr}
   d9526:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d952a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d952e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9532:	bf1d      	ittte	ne
   d9534:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9538:	ea94 0f0c 	teqne	r4, ip
   d953c:	ea95 0f0c 	teqne	r5, ip
   d9540:	f000 f8de 	bleq	d9700 <__aeabi_dmul+0x1dc>
   d9544:	442c      	add	r4, r5
   d9546:	ea81 0603 	eor.w	r6, r1, r3
   d954a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d954e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9552:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9556:	bf18      	it	ne
   d9558:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d955c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9564:	d038      	beq.n	d95d8 <__aeabi_dmul+0xb4>
   d9566:	fba0 ce02 	umull	ip, lr, r0, r2
   d956a:	f04f 0500 	mov.w	r5, #0
   d956e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9572:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9576:	fbe0 e503 	umlal	lr, r5, r0, r3
   d957a:	f04f 0600 	mov.w	r6, #0
   d957e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9582:	f09c 0f00 	teq	ip, #0
   d9586:	bf18      	it	ne
   d9588:	f04e 0e01 	orrne.w	lr, lr, #1
   d958c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9590:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9594:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9598:	d204      	bcs.n	d95a4 <__aeabi_dmul+0x80>
   d959a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d959e:	416d      	adcs	r5, r5
   d95a0:	eb46 0606 	adc.w	r6, r6, r6
   d95a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d95a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d95ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d95b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d95b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d95b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d95bc:	bf88      	it	hi
   d95be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d95c2:	d81e      	bhi.n	d9602 <__aeabi_dmul+0xde>
   d95c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d95c8:	bf08      	it	eq
   d95ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d95ce:	f150 0000 	adcs.w	r0, r0, #0
   d95d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d95d6:	bd70      	pop	{r4, r5, r6, pc}
   d95d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d95dc:	ea46 0101 	orr.w	r1, r6, r1
   d95e0:	ea40 0002 	orr.w	r0, r0, r2
   d95e4:	ea81 0103 	eor.w	r1, r1, r3
   d95e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d95ec:	bfc2      	ittt	gt
   d95ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d95f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d95f6:	bd70      	popgt	{r4, r5, r6, pc}
   d95f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95fc:	f04f 0e00 	mov.w	lr, #0
   d9600:	3c01      	subs	r4, #1
   d9602:	f300 80ab 	bgt.w	d975c <__aeabi_dmul+0x238>
   d9606:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d960a:	bfde      	ittt	le
   d960c:	2000      	movle	r0, #0
   d960e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9612:	bd70      	pople	{r4, r5, r6, pc}
   d9614:	f1c4 0400 	rsb	r4, r4, #0
   d9618:	3c20      	subs	r4, #32
   d961a:	da35      	bge.n	d9688 <__aeabi_dmul+0x164>
   d961c:	340c      	adds	r4, #12
   d961e:	dc1b      	bgt.n	d9658 <__aeabi_dmul+0x134>
   d9620:	f104 0414 	add.w	r4, r4, #20
   d9624:	f1c4 0520 	rsb	r5, r4, #32
   d9628:	fa00 f305 	lsl.w	r3, r0, r5
   d962c:	fa20 f004 	lsr.w	r0, r0, r4
   d9630:	fa01 f205 	lsl.w	r2, r1, r5
   d9634:	ea40 0002 	orr.w	r0, r0, r2
   d9638:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d963c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9644:	fa21 f604 	lsr.w	r6, r1, r4
   d9648:	eb42 0106 	adc.w	r1, r2, r6
   d964c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9650:	bf08      	it	eq
   d9652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9656:	bd70      	pop	{r4, r5, r6, pc}
   d9658:	f1c4 040c 	rsb	r4, r4, #12
   d965c:	f1c4 0520 	rsb	r5, r4, #32
   d9660:	fa00 f304 	lsl.w	r3, r0, r4
   d9664:	fa20 f005 	lsr.w	r0, r0, r5
   d9668:	fa01 f204 	lsl.w	r2, r1, r4
   d966c:	ea40 0002 	orr.w	r0, r0, r2
   d9670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9678:	f141 0100 	adc.w	r1, r1, #0
   d967c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9680:	bf08      	it	eq
   d9682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9686:	bd70      	pop	{r4, r5, r6, pc}
   d9688:	f1c4 0520 	rsb	r5, r4, #32
   d968c:	fa00 f205 	lsl.w	r2, r0, r5
   d9690:	ea4e 0e02 	orr.w	lr, lr, r2
   d9694:	fa20 f304 	lsr.w	r3, r0, r4
   d9698:	fa01 f205 	lsl.w	r2, r1, r5
   d969c:	ea43 0302 	orr.w	r3, r3, r2
   d96a0:	fa21 f004 	lsr.w	r0, r1, r4
   d96a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96a8:	fa21 f204 	lsr.w	r2, r1, r4
   d96ac:	ea20 0002 	bic.w	r0, r0, r2
   d96b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d96b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d96b8:	bf08      	it	eq
   d96ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d96be:	bd70      	pop	{r4, r5, r6, pc}
   d96c0:	f094 0f00 	teq	r4, #0
   d96c4:	d10f      	bne.n	d96e6 <__aeabi_dmul+0x1c2>
   d96c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d96ca:	0040      	lsls	r0, r0, #1
   d96cc:	eb41 0101 	adc.w	r1, r1, r1
   d96d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d96d4:	bf08      	it	eq
   d96d6:	3c01      	subeq	r4, #1
   d96d8:	d0f7      	beq.n	d96ca <__aeabi_dmul+0x1a6>
   d96da:	ea41 0106 	orr.w	r1, r1, r6
   d96de:	f095 0f00 	teq	r5, #0
   d96e2:	bf18      	it	ne
   d96e4:	4770      	bxne	lr
   d96e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d96ea:	0052      	lsls	r2, r2, #1
   d96ec:	eb43 0303 	adc.w	r3, r3, r3
   d96f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d96f4:	bf08      	it	eq
   d96f6:	3d01      	subeq	r5, #1
   d96f8:	d0f7      	beq.n	d96ea <__aeabi_dmul+0x1c6>
   d96fa:	ea43 0306 	orr.w	r3, r3, r6
   d96fe:	4770      	bx	lr
   d9700:	ea94 0f0c 	teq	r4, ip
   d9704:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9708:	bf18      	it	ne
   d970a:	ea95 0f0c 	teqne	r5, ip
   d970e:	d00c      	beq.n	d972a <__aeabi_dmul+0x206>
   d9710:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9714:	bf18      	it	ne
   d9716:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d971a:	d1d1      	bne.n	d96c0 <__aeabi_dmul+0x19c>
   d971c:	ea81 0103 	eor.w	r1, r1, r3
   d9720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9724:	f04f 0000 	mov.w	r0, #0
   d9728:	bd70      	pop	{r4, r5, r6, pc}
   d972a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d972e:	bf06      	itte	eq
   d9730:	4610      	moveq	r0, r2
   d9732:	4619      	moveq	r1, r3
   d9734:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9738:	d019      	beq.n	d976e <__aeabi_dmul+0x24a>
   d973a:	ea94 0f0c 	teq	r4, ip
   d973e:	d102      	bne.n	d9746 <__aeabi_dmul+0x222>
   d9740:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9744:	d113      	bne.n	d976e <__aeabi_dmul+0x24a>
   d9746:	ea95 0f0c 	teq	r5, ip
   d974a:	d105      	bne.n	d9758 <__aeabi_dmul+0x234>
   d974c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9750:	bf1c      	itt	ne
   d9752:	4610      	movne	r0, r2
   d9754:	4619      	movne	r1, r3
   d9756:	d10a      	bne.n	d976e <__aeabi_dmul+0x24a>
   d9758:	ea81 0103 	eor.w	r1, r1, r3
   d975c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9760:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9768:	f04f 0000 	mov.w	r0, #0
   d976c:	bd70      	pop	{r4, r5, r6, pc}
   d976e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9772:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9776:	bd70      	pop	{r4, r5, r6, pc}

000d9778 <__aeabi_ddiv>:
   d9778:	b570      	push	{r4, r5, r6, lr}
   d977a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d977e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9786:	bf1d      	ittte	ne
   d9788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d978c:	ea94 0f0c 	teqne	r4, ip
   d9790:	ea95 0f0c 	teqne	r5, ip
   d9794:	f000 f8a7 	bleq	d98e6 <__aeabi_ddiv+0x16e>
   d9798:	eba4 0405 	sub.w	r4, r4, r5
   d979c:	ea81 0e03 	eor.w	lr, r1, r3
   d97a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d97a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d97a8:	f000 8088 	beq.w	d98bc <__aeabi_ddiv+0x144>
   d97ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d97b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d97b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d97b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d97bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d97c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d97c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d97c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d97cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d97d0:	429d      	cmp	r5, r3
   d97d2:	bf08      	it	eq
   d97d4:	4296      	cmpeq	r6, r2
   d97d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d97da:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d97de:	d202      	bcs.n	d97e6 <__aeabi_ddiv+0x6e>
   d97e0:	085b      	lsrs	r3, r3, #1
   d97e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d97e6:	1ab6      	subs	r6, r6, r2
   d97e8:	eb65 0503 	sbc.w	r5, r5, r3
   d97ec:	085b      	lsrs	r3, r3, #1
   d97ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d97f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d97f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d97fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d97fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9802:	bf22      	ittt	cs
   d9804:	1ab6      	subcs	r6, r6, r2
   d9806:	4675      	movcs	r5, lr
   d9808:	ea40 000c 	orrcs.w	r0, r0, ip
   d980c:	085b      	lsrs	r3, r3, #1
   d980e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9812:	ebb6 0e02 	subs.w	lr, r6, r2
   d9816:	eb75 0e03 	sbcs.w	lr, r5, r3
   d981a:	bf22      	ittt	cs
   d981c:	1ab6      	subcs	r6, r6, r2
   d981e:	4675      	movcs	r5, lr
   d9820:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9824:	085b      	lsrs	r3, r3, #1
   d9826:	ea4f 0232 	mov.w	r2, r2, rrx
   d982a:	ebb6 0e02 	subs.w	lr, r6, r2
   d982e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9832:	bf22      	ittt	cs
   d9834:	1ab6      	subcs	r6, r6, r2
   d9836:	4675      	movcs	r5, lr
   d9838:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d983c:	085b      	lsrs	r3, r3, #1
   d983e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9842:	ebb6 0e02 	subs.w	lr, r6, r2
   d9846:	eb75 0e03 	sbcs.w	lr, r5, r3
   d984a:	bf22      	ittt	cs
   d984c:	1ab6      	subcs	r6, r6, r2
   d984e:	4675      	movcs	r5, lr
   d9850:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9854:	ea55 0e06 	orrs.w	lr, r5, r6
   d9858:	d018      	beq.n	d988c <__aeabi_ddiv+0x114>
   d985a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d985e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9862:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9866:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d986a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d986e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9872:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9876:	d1c0      	bne.n	d97fa <__aeabi_ddiv+0x82>
   d9878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d987c:	d10b      	bne.n	d9896 <__aeabi_ddiv+0x11e>
   d987e:	ea41 0100 	orr.w	r1, r1, r0
   d9882:	f04f 0000 	mov.w	r0, #0
   d9886:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d988a:	e7b6      	b.n	d97fa <__aeabi_ddiv+0x82>
   d988c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9890:	bf04      	itt	eq
   d9892:	4301      	orreq	r1, r0
   d9894:	2000      	moveq	r0, #0
   d9896:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d989a:	bf88      	it	hi
   d989c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d98a0:	f63f aeaf 	bhi.w	d9602 <__aeabi_dmul+0xde>
   d98a4:	ebb5 0c03 	subs.w	ip, r5, r3
   d98a8:	bf04      	itt	eq
   d98aa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d98ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d98b2:	f150 0000 	adcs.w	r0, r0, #0
   d98b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d98ba:	bd70      	pop	{r4, r5, r6, pc}
   d98bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d98c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d98c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d98c8:	bfc2      	ittt	gt
   d98ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d98ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d98d2:	bd70      	popgt	{r4, r5, r6, pc}
   d98d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d98d8:	f04f 0e00 	mov.w	lr, #0
   d98dc:	3c01      	subs	r4, #1
   d98de:	e690      	b.n	d9602 <__aeabi_dmul+0xde>
   d98e0:	ea45 0e06 	orr.w	lr, r5, r6
   d98e4:	e68d      	b.n	d9602 <__aeabi_dmul+0xde>
   d98e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d98ea:	ea94 0f0c 	teq	r4, ip
   d98ee:	bf08      	it	eq
   d98f0:	ea95 0f0c 	teqeq	r5, ip
   d98f4:	f43f af3b 	beq.w	d976e <__aeabi_dmul+0x24a>
   d98f8:	ea94 0f0c 	teq	r4, ip
   d98fc:	d10a      	bne.n	d9914 <__aeabi_ddiv+0x19c>
   d98fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9902:	f47f af34 	bne.w	d976e <__aeabi_dmul+0x24a>
   d9906:	ea95 0f0c 	teq	r5, ip
   d990a:	f47f af25 	bne.w	d9758 <__aeabi_dmul+0x234>
   d990e:	4610      	mov	r0, r2
   d9910:	4619      	mov	r1, r3
   d9912:	e72c      	b.n	d976e <__aeabi_dmul+0x24a>
   d9914:	ea95 0f0c 	teq	r5, ip
   d9918:	d106      	bne.n	d9928 <__aeabi_ddiv+0x1b0>
   d991a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d991e:	f43f aefd 	beq.w	d971c <__aeabi_dmul+0x1f8>
   d9922:	4610      	mov	r0, r2
   d9924:	4619      	mov	r1, r3
   d9926:	e722      	b.n	d976e <__aeabi_dmul+0x24a>
   d9928:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d992c:	bf18      	it	ne
   d992e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9932:	f47f aec5 	bne.w	d96c0 <__aeabi_dmul+0x19c>
   d9936:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d993a:	f47f af0d 	bne.w	d9758 <__aeabi_dmul+0x234>
   d993e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9942:	f47f aeeb 	bne.w	d971c <__aeabi_dmul+0x1f8>
   d9946:	e712      	b.n	d976e <__aeabi_dmul+0x24a>

000d9948 <__aeabi_d2uiz>:
   d9948:	004a      	lsls	r2, r1, #1
   d994a:	d211      	bcs.n	d9970 <__aeabi_d2uiz+0x28>
   d994c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9950:	d211      	bcs.n	d9976 <__aeabi_d2uiz+0x2e>
   d9952:	d50d      	bpl.n	d9970 <__aeabi_d2uiz+0x28>
   d9954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d995c:	d40e      	bmi.n	d997c <__aeabi_d2uiz+0x34>
   d995e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d996a:	fa23 f002 	lsr.w	r0, r3, r2
   d996e:	4770      	bx	lr
   d9970:	f04f 0000 	mov.w	r0, #0
   d9974:	4770      	bx	lr
   d9976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d997a:	d102      	bne.n	d9982 <__aeabi_d2uiz+0x3a>
   d997c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9980:	4770      	bx	lr
   d9982:	f04f 0000 	mov.w	r0, #0
   d9986:	4770      	bx	lr

000d9988 <asctime_r>:
   d9988:	b510      	push	{r4, lr}
   d998a:	460c      	mov	r4, r1
   d998c:	6941      	ldr	r1, [r0, #20]
   d998e:	6903      	ldr	r3, [r0, #16]
   d9990:	6982      	ldr	r2, [r0, #24]
   d9992:	b086      	sub	sp, #24
   d9994:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9998:	9104      	str	r1, [sp, #16]
   d999a:	6801      	ldr	r1, [r0, #0]
   d999c:	9103      	str	r1, [sp, #12]
   d999e:	6841      	ldr	r1, [r0, #4]
   d99a0:	9102      	str	r1, [sp, #8]
   d99a2:	6881      	ldr	r1, [r0, #8]
   d99a4:	9101      	str	r1, [sp, #4]
   d99a6:	68c1      	ldr	r1, [r0, #12]
   d99a8:	9100      	str	r1, [sp, #0]
   d99aa:	4907      	ldr	r1, [pc, #28]	; (d99c8 <asctime_r+0x40>)
   d99ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d99b0:	440b      	add	r3, r1
   d99b2:	4906      	ldr	r1, [pc, #24]	; (d99cc <asctime_r+0x44>)
   d99b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d99b8:	440a      	add	r2, r1
   d99ba:	4620      	mov	r0, r4
   d99bc:	4904      	ldr	r1, [pc, #16]	; (d99d0 <asctime_r+0x48>)
   d99be:	f7fd f843 	bl	d6a48 <siprintf>
   d99c2:	4620      	mov	r0, r4
   d99c4:	b006      	add	sp, #24
   d99c6:	bd10      	pop	{r4, pc}
   d99c8:	000da5fa 	.word	0x000da5fa
   d99cc:	000da5e5 	.word	0x000da5e5
   d99d0:	000da5c5 	.word	0x000da5c5

000d99d4 <atexit>:
   d99d4:	2300      	movs	r3, #0
   d99d6:	4601      	mov	r1, r0
   d99d8:	461a      	mov	r2, r3
   d99da:	4618      	mov	r0, r3
   d99dc:	f000 b9ac 	b.w	d9d38 <__register_exitproc>

000d99e0 <memcpy>:
   d99e0:	440a      	add	r2, r1
   d99e2:	4291      	cmp	r1, r2
   d99e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d99e8:	d100      	bne.n	d99ec <memcpy+0xc>
   d99ea:	4770      	bx	lr
   d99ec:	b510      	push	{r4, lr}
   d99ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d99f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d99f6:	4291      	cmp	r1, r2
   d99f8:	d1f9      	bne.n	d99ee <memcpy+0xe>
   d99fa:	bd10      	pop	{r4, pc}

000d99fc <memmove>:
   d99fc:	4288      	cmp	r0, r1
   d99fe:	b510      	push	{r4, lr}
   d9a00:	eb01 0402 	add.w	r4, r1, r2
   d9a04:	d902      	bls.n	d9a0c <memmove+0x10>
   d9a06:	4284      	cmp	r4, r0
   d9a08:	4623      	mov	r3, r4
   d9a0a:	d807      	bhi.n	d9a1c <memmove+0x20>
   d9a0c:	1e43      	subs	r3, r0, #1
   d9a0e:	42a1      	cmp	r1, r4
   d9a10:	d008      	beq.n	d9a24 <memmove+0x28>
   d9a12:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9a16:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9a1a:	e7f8      	b.n	d9a0e <memmove+0x12>
   d9a1c:	4402      	add	r2, r0
   d9a1e:	4601      	mov	r1, r0
   d9a20:	428a      	cmp	r2, r1
   d9a22:	d100      	bne.n	d9a26 <memmove+0x2a>
   d9a24:	bd10      	pop	{r4, pc}
   d9a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d9a2e:	e7f7      	b.n	d9a20 <memmove+0x24>

000d9a30 <memset>:
   d9a30:	4402      	add	r2, r0
   d9a32:	4603      	mov	r3, r0
   d9a34:	4293      	cmp	r3, r2
   d9a36:	d100      	bne.n	d9a3a <memset+0xa>
   d9a38:	4770      	bx	lr
   d9a3a:	f803 1b01 	strb.w	r1, [r3], #1
   d9a3e:	e7f9      	b.n	d9a34 <memset+0x4>

000d9a40 <srand>:
   d9a40:	b538      	push	{r3, r4, r5, lr}
   d9a42:	4b0d      	ldr	r3, [pc, #52]	; (d9a78 <srand+0x38>)
   d9a44:	681d      	ldr	r5, [r3, #0]
   d9a46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9a48:	4604      	mov	r4, r0
   d9a4a:	b97b      	cbnz	r3, d9a6c <srand+0x2c>
   d9a4c:	2018      	movs	r0, #24
   d9a4e:	f7fc ffe3 	bl	d6a18 <malloc>
   d9a52:	4a0a      	ldr	r2, [pc, #40]	; (d9a7c <srand+0x3c>)
   d9a54:	4b0a      	ldr	r3, [pc, #40]	; (d9a80 <srand+0x40>)
   d9a56:	63a8      	str	r0, [r5, #56]	; 0x38
   d9a58:	e9c0 2300 	strd	r2, r3, [r0]
   d9a5c:	4b09      	ldr	r3, [pc, #36]	; (d9a84 <srand+0x44>)
   d9a5e:	6083      	str	r3, [r0, #8]
   d9a60:	230b      	movs	r3, #11
   d9a62:	8183      	strh	r3, [r0, #12]
   d9a64:	2201      	movs	r2, #1
   d9a66:	2300      	movs	r3, #0
   d9a68:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9a6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9a6e:	2200      	movs	r2, #0
   d9a70:	611c      	str	r4, [r3, #16]
   d9a72:	615a      	str	r2, [r3, #20]
   d9a74:	bd38      	pop	{r3, r4, r5, pc}
   d9a76:	bf00      	nop
   d9a78:	2003ddc8 	.word	0x2003ddc8
   d9a7c:	abcd330e 	.word	0xabcd330e
   d9a80:	e66d1234 	.word	0xe66d1234
   d9a84:	0005deec 	.word	0x0005deec

000d9a88 <rand>:
   d9a88:	4b13      	ldr	r3, [pc, #76]	; (d9ad8 <rand+0x50>)
   d9a8a:	b510      	push	{r4, lr}
   d9a8c:	681c      	ldr	r4, [r3, #0]
   d9a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9a90:	b97b      	cbnz	r3, d9ab2 <rand+0x2a>
   d9a92:	2018      	movs	r0, #24
   d9a94:	f7fc ffc0 	bl	d6a18 <malloc>
   d9a98:	4a10      	ldr	r2, [pc, #64]	; (d9adc <rand+0x54>)
   d9a9a:	4b11      	ldr	r3, [pc, #68]	; (d9ae0 <rand+0x58>)
   d9a9c:	63a0      	str	r0, [r4, #56]	; 0x38
   d9a9e:	e9c0 2300 	strd	r2, r3, [r0]
   d9aa2:	4b10      	ldr	r3, [pc, #64]	; (d9ae4 <rand+0x5c>)
   d9aa4:	6083      	str	r3, [r0, #8]
   d9aa6:	230b      	movs	r3, #11
   d9aa8:	8183      	strh	r3, [r0, #12]
   d9aaa:	2201      	movs	r2, #1
   d9aac:	2300      	movs	r3, #0
   d9aae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9ab2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9ab4:	480c      	ldr	r0, [pc, #48]	; (d9ae8 <rand+0x60>)
   d9ab6:	690a      	ldr	r2, [r1, #16]
   d9ab8:	694b      	ldr	r3, [r1, #20]
   d9aba:	4c0c      	ldr	r4, [pc, #48]	; (d9aec <rand+0x64>)
   d9abc:	4350      	muls	r0, r2
   d9abe:	fb04 0003 	mla	r0, r4, r3, r0
   d9ac2:	fba2 3404 	umull	r3, r4, r2, r4
   d9ac6:	1c5a      	adds	r2, r3, #1
   d9ac8:	4404      	add	r4, r0
   d9aca:	f144 0000 	adc.w	r0, r4, #0
   d9ace:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d9ad2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d9ad6:	bd10      	pop	{r4, pc}
   d9ad8:	2003ddc8 	.word	0x2003ddc8
   d9adc:	abcd330e 	.word	0xabcd330e
   d9ae0:	e66d1234 	.word	0xe66d1234
   d9ae4:	0005deec 	.word	0x0005deec
   d9ae8:	5851f42d 	.word	0x5851f42d
   d9aec:	4c957f2d 	.word	0x4c957f2d

000d9af0 <strchr>:
   d9af0:	b2c9      	uxtb	r1, r1
   d9af2:	4603      	mov	r3, r0
   d9af4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9af8:	b11a      	cbz	r2, d9b02 <strchr+0x12>
   d9afa:	428a      	cmp	r2, r1
   d9afc:	d1f9      	bne.n	d9af2 <strchr+0x2>
   d9afe:	4618      	mov	r0, r3
   d9b00:	4770      	bx	lr
   d9b02:	2900      	cmp	r1, #0
   d9b04:	bf18      	it	ne
   d9b06:	2300      	movne	r3, #0
   d9b08:	e7f9      	b.n	d9afe <strchr+0xe>

000d9b0a <strchrnul>:
   d9b0a:	b510      	push	{r4, lr}
   d9b0c:	4604      	mov	r4, r0
   d9b0e:	f7ff ffef 	bl	d9af0 <strchr>
   d9b12:	b918      	cbnz	r0, d9b1c <strchrnul+0x12>
   d9b14:	4620      	mov	r0, r4
   d9b16:	f000 f832 	bl	d9b7e <strlen>
   d9b1a:	4420      	add	r0, r4
   d9b1c:	bd10      	pop	{r4, pc}

000d9b1e <strcmp>:
   d9b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9b22:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9b26:	2a01      	cmp	r2, #1
   d9b28:	bf28      	it	cs
   d9b2a:	429a      	cmpcs	r2, r3
   d9b2c:	d0f7      	beq.n	d9b1e <strcmp>
   d9b2e:	1ad0      	subs	r0, r2, r3
   d9b30:	4770      	bx	lr

000d9b32 <strcpy>:
   d9b32:	4603      	mov	r3, r0
   d9b34:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9b38:	f803 2b01 	strb.w	r2, [r3], #1
   d9b3c:	2a00      	cmp	r2, #0
   d9b3e:	d1f9      	bne.n	d9b34 <strcpy+0x2>
   d9b40:	4770      	bx	lr
	...

000d9b44 <strdup>:
   d9b44:	4b02      	ldr	r3, [pc, #8]	; (d9b50 <strdup+0xc>)
   d9b46:	4601      	mov	r1, r0
   d9b48:	6818      	ldr	r0, [r3, #0]
   d9b4a:	f000 b803 	b.w	d9b54 <_strdup_r>
   d9b4e:	bf00      	nop
   d9b50:	2003ddc8 	.word	0x2003ddc8

000d9b54 <_strdup_r>:
   d9b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9b56:	4604      	mov	r4, r0
   d9b58:	4608      	mov	r0, r1
   d9b5a:	460d      	mov	r5, r1
   d9b5c:	f000 f80f 	bl	d9b7e <strlen>
   d9b60:	1c42      	adds	r2, r0, #1
   d9b62:	4611      	mov	r1, r2
   d9b64:	4620      	mov	r0, r4
   d9b66:	9201      	str	r2, [sp, #4]
   d9b68:	f7fc ff96 	bl	d6a98 <_malloc_r>
   d9b6c:	4604      	mov	r4, r0
   d9b6e:	b118      	cbz	r0, d9b78 <_strdup_r+0x24>
   d9b70:	9a01      	ldr	r2, [sp, #4]
   d9b72:	4629      	mov	r1, r5
   d9b74:	f7ff ff34 	bl	d99e0 <memcpy>
   d9b78:	4620      	mov	r0, r4
   d9b7a:	b003      	add	sp, #12
   d9b7c:	bd30      	pop	{r4, r5, pc}

000d9b7e <strlen>:
   d9b7e:	4603      	mov	r3, r0
   d9b80:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9b84:	2a00      	cmp	r2, #0
   d9b86:	d1fb      	bne.n	d9b80 <strlen+0x2>
   d9b88:	1a18      	subs	r0, r3, r0
   d9b8a:	3801      	subs	r0, #1
   d9b8c:	4770      	bx	lr

000d9b8e <strncmp>:
   d9b8e:	b510      	push	{r4, lr}
   d9b90:	b16a      	cbz	r2, d9bae <strncmp+0x20>
   d9b92:	3901      	subs	r1, #1
   d9b94:	1884      	adds	r4, r0, r2
   d9b96:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9b9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d9b9e:	4293      	cmp	r3, r2
   d9ba0:	d103      	bne.n	d9baa <strncmp+0x1c>
   d9ba2:	42a0      	cmp	r0, r4
   d9ba4:	d001      	beq.n	d9baa <strncmp+0x1c>
   d9ba6:	2b00      	cmp	r3, #0
   d9ba8:	d1f5      	bne.n	d9b96 <strncmp+0x8>
   d9baa:	1a98      	subs	r0, r3, r2
   d9bac:	bd10      	pop	{r4, pc}
   d9bae:	4610      	mov	r0, r2
   d9bb0:	e7fc      	b.n	d9bac <strncmp+0x1e>

000d9bb2 <strrchr>:
   d9bb2:	b538      	push	{r3, r4, r5, lr}
   d9bb4:	4603      	mov	r3, r0
   d9bb6:	460c      	mov	r4, r1
   d9bb8:	b969      	cbnz	r1, d9bd6 <strrchr+0x24>
   d9bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9bbe:	f7ff bf97 	b.w	d9af0 <strchr>
   d9bc2:	1c43      	adds	r3, r0, #1
   d9bc4:	4605      	mov	r5, r0
   d9bc6:	4621      	mov	r1, r4
   d9bc8:	4618      	mov	r0, r3
   d9bca:	f7ff ff91 	bl	d9af0 <strchr>
   d9bce:	2800      	cmp	r0, #0
   d9bd0:	d1f7      	bne.n	d9bc2 <strrchr+0x10>
   d9bd2:	4628      	mov	r0, r5
   d9bd4:	bd38      	pop	{r3, r4, r5, pc}
   d9bd6:	2500      	movs	r5, #0
   d9bd8:	e7f5      	b.n	d9bc6 <strrchr+0x14>

000d9bda <__strtok_r>:
   d9bda:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9bdc:	b908      	cbnz	r0, d9be2 <__strtok_r+0x8>
   d9bde:	6810      	ldr	r0, [r2, #0]
   d9be0:	b188      	cbz	r0, d9c06 <__strtok_r+0x2c>
   d9be2:	4604      	mov	r4, r0
   d9be4:	4620      	mov	r0, r4
   d9be6:	f814 5b01 	ldrb.w	r5, [r4], #1
   d9bea:	460f      	mov	r7, r1
   d9bec:	f817 6b01 	ldrb.w	r6, [r7], #1
   d9bf0:	b91e      	cbnz	r6, d9bfa <__strtok_r+0x20>
   d9bf2:	b965      	cbnz	r5, d9c0e <__strtok_r+0x34>
   d9bf4:	6015      	str	r5, [r2, #0]
   d9bf6:	4628      	mov	r0, r5
   d9bf8:	e005      	b.n	d9c06 <__strtok_r+0x2c>
   d9bfa:	42b5      	cmp	r5, r6
   d9bfc:	d1f6      	bne.n	d9bec <__strtok_r+0x12>
   d9bfe:	2b00      	cmp	r3, #0
   d9c00:	d1f0      	bne.n	d9be4 <__strtok_r+0xa>
   d9c02:	6014      	str	r4, [r2, #0]
   d9c04:	7003      	strb	r3, [r0, #0]
   d9c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9c08:	461c      	mov	r4, r3
   d9c0a:	e00c      	b.n	d9c26 <__strtok_r+0x4c>
   d9c0c:	b915      	cbnz	r5, d9c14 <__strtok_r+0x3a>
   d9c0e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9c12:	460e      	mov	r6, r1
   d9c14:	f816 5b01 	ldrb.w	r5, [r6], #1
   d9c18:	42ab      	cmp	r3, r5
   d9c1a:	d1f7      	bne.n	d9c0c <__strtok_r+0x32>
   d9c1c:	2b00      	cmp	r3, #0
   d9c1e:	d0f3      	beq.n	d9c08 <__strtok_r+0x2e>
   d9c20:	2300      	movs	r3, #0
   d9c22:	f804 3c01 	strb.w	r3, [r4, #-1]
   d9c26:	6014      	str	r4, [r2, #0]
   d9c28:	e7ed      	b.n	d9c06 <__strtok_r+0x2c>

000d9c2a <strtok_r>:
   d9c2a:	2301      	movs	r3, #1
   d9c2c:	f7ff bfd5 	b.w	d9bda <__strtok_r>

000d9c30 <_strtol_l.isra.0>:
   d9c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9c34:	4e3a      	ldr	r6, [pc, #232]	; (d9d20 <_strtol_l.isra.0+0xf0>)
   d9c36:	4686      	mov	lr, r0
   d9c38:	468c      	mov	ip, r1
   d9c3a:	4660      	mov	r0, ip
   d9c3c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9c40:	5da5      	ldrb	r5, [r4, r6]
   d9c42:	f015 0508 	ands.w	r5, r5, #8
   d9c46:	d1f8      	bne.n	d9c3a <_strtol_l.isra.0+0xa>
   d9c48:	2c2d      	cmp	r4, #45	; 0x2d
   d9c4a:	d133      	bne.n	d9cb4 <_strtol_l.isra.0+0x84>
   d9c4c:	f89c 4000 	ldrb.w	r4, [ip]
   d9c50:	f04f 0801 	mov.w	r8, #1
   d9c54:	f100 0c02 	add.w	ip, r0, #2
   d9c58:	2b00      	cmp	r3, #0
   d9c5a:	d05c      	beq.n	d9d16 <_strtol_l.isra.0+0xe6>
   d9c5c:	2b10      	cmp	r3, #16
   d9c5e:	d10c      	bne.n	d9c7a <_strtol_l.isra.0+0x4a>
   d9c60:	2c30      	cmp	r4, #48	; 0x30
   d9c62:	d10a      	bne.n	d9c7a <_strtol_l.isra.0+0x4a>
   d9c64:	f89c 0000 	ldrb.w	r0, [ip]
   d9c68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9c6c:	2858      	cmp	r0, #88	; 0x58
   d9c6e:	d14d      	bne.n	d9d0c <_strtol_l.isra.0+0xdc>
   d9c70:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9c74:	2310      	movs	r3, #16
   d9c76:	f10c 0c02 	add.w	ip, ip, #2
   d9c7a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9c7e:	3f01      	subs	r7, #1
   d9c80:	2600      	movs	r6, #0
   d9c82:	fbb7 f9f3 	udiv	r9, r7, r3
   d9c86:	4630      	mov	r0, r6
   d9c88:	fb03 7a19 	mls	sl, r3, r9, r7
   d9c8c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9c90:	2d09      	cmp	r5, #9
   d9c92:	d818      	bhi.n	d9cc6 <_strtol_l.isra.0+0x96>
   d9c94:	462c      	mov	r4, r5
   d9c96:	42a3      	cmp	r3, r4
   d9c98:	dd24      	ble.n	d9ce4 <_strtol_l.isra.0+0xb4>
   d9c9a:	1c75      	adds	r5, r6, #1
   d9c9c:	d007      	beq.n	d9cae <_strtol_l.isra.0+0x7e>
   d9c9e:	4581      	cmp	r9, r0
   d9ca0:	d31d      	bcc.n	d9cde <_strtol_l.isra.0+0xae>
   d9ca2:	d101      	bne.n	d9ca8 <_strtol_l.isra.0+0x78>
   d9ca4:	45a2      	cmp	sl, r4
   d9ca6:	db1a      	blt.n	d9cde <_strtol_l.isra.0+0xae>
   d9ca8:	fb00 4003 	mla	r0, r0, r3, r4
   d9cac:	2601      	movs	r6, #1
   d9cae:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9cb2:	e7eb      	b.n	d9c8c <_strtol_l.isra.0+0x5c>
   d9cb4:	2c2b      	cmp	r4, #43	; 0x2b
   d9cb6:	bf08      	it	eq
   d9cb8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9cbc:	46a8      	mov	r8, r5
   d9cbe:	bf08      	it	eq
   d9cc0:	f100 0c02 	addeq.w	ip, r0, #2
   d9cc4:	e7c8      	b.n	d9c58 <_strtol_l.isra.0+0x28>
   d9cc6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9cca:	2d19      	cmp	r5, #25
   d9ccc:	d801      	bhi.n	d9cd2 <_strtol_l.isra.0+0xa2>
   d9cce:	3c37      	subs	r4, #55	; 0x37
   d9cd0:	e7e1      	b.n	d9c96 <_strtol_l.isra.0+0x66>
   d9cd2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9cd6:	2d19      	cmp	r5, #25
   d9cd8:	d804      	bhi.n	d9ce4 <_strtol_l.isra.0+0xb4>
   d9cda:	3c57      	subs	r4, #87	; 0x57
   d9cdc:	e7db      	b.n	d9c96 <_strtol_l.isra.0+0x66>
   d9cde:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9ce2:	e7e4      	b.n	d9cae <_strtol_l.isra.0+0x7e>
   d9ce4:	1c73      	adds	r3, r6, #1
   d9ce6:	d106      	bne.n	d9cf6 <_strtol_l.isra.0+0xc6>
   d9ce8:	2322      	movs	r3, #34	; 0x22
   d9cea:	f8ce 3000 	str.w	r3, [lr]
   d9cee:	4638      	mov	r0, r7
   d9cf0:	b942      	cbnz	r2, d9d04 <_strtol_l.isra.0+0xd4>
   d9cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9cf6:	f1b8 0f00 	cmp.w	r8, #0
   d9cfa:	d000      	beq.n	d9cfe <_strtol_l.isra.0+0xce>
   d9cfc:	4240      	negs	r0, r0
   d9cfe:	2a00      	cmp	r2, #0
   d9d00:	d0f7      	beq.n	d9cf2 <_strtol_l.isra.0+0xc2>
   d9d02:	b10e      	cbz	r6, d9d08 <_strtol_l.isra.0+0xd8>
   d9d04:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9d08:	6011      	str	r1, [r2, #0]
   d9d0a:	e7f2      	b.n	d9cf2 <_strtol_l.isra.0+0xc2>
   d9d0c:	2430      	movs	r4, #48	; 0x30
   d9d0e:	2b00      	cmp	r3, #0
   d9d10:	d1b3      	bne.n	d9c7a <_strtol_l.isra.0+0x4a>
   d9d12:	2308      	movs	r3, #8
   d9d14:	e7b1      	b.n	d9c7a <_strtol_l.isra.0+0x4a>
   d9d16:	2c30      	cmp	r4, #48	; 0x30
   d9d18:	d0a4      	beq.n	d9c64 <_strtol_l.isra.0+0x34>
   d9d1a:	230a      	movs	r3, #10
   d9d1c:	e7ad      	b.n	d9c7a <_strtol_l.isra.0+0x4a>
   d9d1e:	bf00      	nop
   d9d20:	000da61f 	.word	0x000da61f

000d9d24 <strtol>:
   d9d24:	4613      	mov	r3, r2
   d9d26:	460a      	mov	r2, r1
   d9d28:	4601      	mov	r1, r0
   d9d2a:	4802      	ldr	r0, [pc, #8]	; (d9d34 <strtol+0x10>)
   d9d2c:	6800      	ldr	r0, [r0, #0]
   d9d2e:	f7ff bf7f 	b.w	d9c30 <_strtol_l.isra.0>
   d9d32:	bf00      	nop
   d9d34:	2003ddc8 	.word	0x2003ddc8

000d9d38 <__register_exitproc>:
   d9d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9d3c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d9df8 <__register_exitproc+0xc0>
   d9d40:	4606      	mov	r6, r0
   d9d42:	f8d8 0000 	ldr.w	r0, [r8]
   d9d46:	461f      	mov	r7, r3
   d9d48:	460d      	mov	r5, r1
   d9d4a:	4691      	mov	r9, r2
   d9d4c:	f000 f856 	bl	d9dfc <__retarget_lock_acquire_recursive>
   d9d50:	4b25      	ldr	r3, [pc, #148]	; (d9de8 <__register_exitproc+0xb0>)
   d9d52:	681c      	ldr	r4, [r3, #0]
   d9d54:	b934      	cbnz	r4, d9d64 <__register_exitproc+0x2c>
   d9d56:	4c25      	ldr	r4, [pc, #148]	; (d9dec <__register_exitproc+0xb4>)
   d9d58:	601c      	str	r4, [r3, #0]
   d9d5a:	4b25      	ldr	r3, [pc, #148]	; (d9df0 <__register_exitproc+0xb8>)
   d9d5c:	b113      	cbz	r3, d9d64 <__register_exitproc+0x2c>
   d9d5e:	681b      	ldr	r3, [r3, #0]
   d9d60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d9d64:	6863      	ldr	r3, [r4, #4]
   d9d66:	2b1f      	cmp	r3, #31
   d9d68:	dd07      	ble.n	d9d7a <__register_exitproc+0x42>
   d9d6a:	f8d8 0000 	ldr.w	r0, [r8]
   d9d6e:	f000 f847 	bl	d9e00 <__retarget_lock_release_recursive>
   d9d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9d7a:	b34e      	cbz	r6, d9dd0 <__register_exitproc+0x98>
   d9d7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d9d80:	b988      	cbnz	r0, d9da6 <__register_exitproc+0x6e>
   d9d82:	4b1c      	ldr	r3, [pc, #112]	; (d9df4 <__register_exitproc+0xbc>)
   d9d84:	b923      	cbnz	r3, d9d90 <__register_exitproc+0x58>
   d9d86:	f8d8 0000 	ldr.w	r0, [r8]
   d9d8a:	f000 f838 	bl	d9dfe <__retarget_lock_release>
   d9d8e:	e7f0      	b.n	d9d72 <__register_exitproc+0x3a>
   d9d90:	f44f 7084 	mov.w	r0, #264	; 0x108
   d9d94:	f7fc fe40 	bl	d6a18 <malloc>
   d9d98:	2800      	cmp	r0, #0
   d9d9a:	d0f4      	beq.n	d9d86 <__register_exitproc+0x4e>
   d9d9c:	2300      	movs	r3, #0
   d9d9e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d9da2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d9da6:	6863      	ldr	r3, [r4, #4]
   d9da8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d9dac:	2201      	movs	r2, #1
   d9dae:	409a      	lsls	r2, r3
   d9db0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d9db4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d9db8:	4313      	orrs	r3, r2
   d9dba:	2e02      	cmp	r6, #2
   d9dbc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d9dc0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d9dc4:	bf02      	ittt	eq
   d9dc6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d9dca:	431a      	orreq	r2, r3
   d9dcc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d9dd0:	6863      	ldr	r3, [r4, #4]
   d9dd2:	f8d8 0000 	ldr.w	r0, [r8]
   d9dd6:	1c5a      	adds	r2, r3, #1
   d9dd8:	3302      	adds	r3, #2
   d9dda:	6062      	str	r2, [r4, #4]
   d9ddc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d9de0:	f000 f80e 	bl	d9e00 <__retarget_lock_release_recursive>
   d9de4:	2000      	movs	r0, #0
   d9de6:	e7c6      	b.n	d9d76 <__register_exitproc+0x3e>
   d9de8:	2003e7e0 	.word	0x2003e7e0
   d9dec:	2003e754 	.word	0x2003e754
   d9df0:	00000000 	.word	0x00000000
   d9df4:	000d6a19 	.word	0x000d6a19
   d9df8:	2003de2c 	.word	0x2003de2c

000d9dfc <__retarget_lock_acquire_recursive>:
   d9dfc:	4770      	bx	lr

000d9dfe <__retarget_lock_release>:
   d9dfe:	4770      	bx	lr

000d9e00 <__retarget_lock_release_recursive>:
   d9e00:	4770      	bx	lr

000d9e02 <link_code_end>:
	...

000d9e04 <dynalib_user>:
   d9e04:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9e14:	0000 0000 6e75 7573 6363 7365 6673 6c75     ....unsuccessful
   d9e24:	5300 6e65 6964 676e 7420 206f 616d 616e     .Sending to mana
   d9e34:	6567 5f72 656d 6873 735f 7265 6576 3172     ger_mesh_server1
   d9e44:	7300 6e65 6964 676e 6d20 7365 6173 6567     .sending message
   d9e54:	2520 0064 6170 6c79 616f 2064 6f74 7320      %d.payload to s
   d9e64:	7265 6576 3172 7300 6e65 6964 676e 4d00     erver1.sending.M
   d9e74:	7365 6173 6567 7320 6e65 0074 6552 7073     essage sent.Resp
   d9e84:	6e6f 6573 203a 7830 3025 7832 7220 7373     onse: 0x%02x rss
   d9e94:	3d69 6425 2d20 6420 6c65 7669 7265 2079     i=%d - delivery 
   d9ea4:	7325 5400 6d69 2065 7369 203a 6c25 0075     %s.Time is: %lu.
   d9eb4:	6954 656d 7320 7465 7420 206f 6c25 2075     Time set to %lu 
   d9ec4:	6f6c 6163 206c 6974 656d 6920 2073 7325     local time is %s
   d9ed4:	4e00 7865 2074 6572 6f70 7472 6920 206e     .Next report in 
   d9ee4:	7525 7320 6365 6e6f 7364 5500 6470 7461     %u seconds.Updat
   d9ef4:	0065 6f4e 7220 7065 796c 202c 7369 7220     e.No reply, is r
   d9f04:	3966 5f35 656d 6873 735f 7265 6576 3172     f95_mesh_server1
   d9f14:	202c 6672 3539 6d5f 7365 5f68 6573 7672     , rf95_mesh_serv
   d9f24:	7265 2032 6e61 2064 6672 3539 6d5f 7365     er2 and rf95_mes
   d9f34:	5f68 6573 7672 7265 2033 7572 6e6e 6e69     h_server3 runnin
   d9f44:	3f67 7300 6e65 7464 576f 6961 2074 6166     g?.sendtoWait fa
   d9f54:	6c69 6465 202e 7241 2065 6874 2065 6e69     iled. Are the in
   d9f64:	6574 6d72 6465 6169 6574 6d20 7365 2068     termediate mesh 
   d9f74:	6573 7672 7265 2073 7572 6e6e 6e69 3f67     servers running?
   d9f84:	6e00 746f 7620 6c61 6469 6900 696e 2074     .not valid.init 
   d9f94:	6166 6c69 6465 5300 6174 7472 7075 6320     failed.Startup c
   d9fa4:	6d6f 6c70 7465 2065 202d 6162 7474 7265     omplete - batter
   d9fb4:	2079 3425 322e 2566 2c25 7220 7065 726f     y %4.2f%%, repor
   d9fc4:	6974 676e 6520 6576 7972 2520 2075 6573     ting every %u se
   d9fd4:	6f63 646e 2073 6c63 636f 206b 7369 2520     conds clock is %
   d9fe4:	0073 5345 3554 4445 2c54 334d 322e 302e     s.EST5EDT,M3.2.0
   d9ff4:	322f 303a 3a30 3030 4d2c 3131 312e 302e     /2:00:00,M11.1.0
   da004:	322f 303a 3a30 3030 0000 0000               /2:00:00....

000da010 <_ZTVN5spark10LogHandlerE>:
	...
   da020:	40a5 000d 40c9 000d                         .@...@..

000da028 <_ZTVN5spark16SerialLogHandlerE>:
	...
   da030:	40e1 000d 4115 000d 8309 000d 40cb 000d     .@...A.......@..
   da040:	7061 2e70 6261 3831 3530 2500 3a64 6425     app.ab1805.%d:%d
   da050:	253a 0064 3030 303a 3a30 3030 3200 3a33     :%d.00:00:00.23:
   da060:	3935 353a 0039 254d 2e64 6425 252e 0064     59:59.M%d.%d.%d.
   da070:	002c 0000                                   ,...

000da074 <_ZTV9LocalTime>:
	...
   da07c:	4909 000d 4921 000d                         .I..!I..

000da084 <_ZTV12LocalTimeHMS>:
	...
   da08c:	48b9 000d 48bd 000d                         .H...H..

000da094 <_ZTV15LocalTimeChange>:
	...
   da09c:	48bb 000d 48cb 000d                         .H...H..

000da0a4 <_ZTV22LocalTimePosixTimezone>:
	...
   da0ac:	48d9 000d 48f5 000d                         .H...H..

000da0b4 <_ZTV15RHGenericDriver>:
	...
   da0c4:	50c5 000d 40a5 000d 40a5 000d 40a5 000d     .P...@...@...@..
   da0d4:	40a5 000d 5127 000d 50c9 000d 5177 000d     .@..'Q...P..wQ..
   da0e4:	5145 000d 519b 000d 50d3 000d 50db 000d     EQ...Q...P...P..
   da0f4:	50df 000d 50e3 000d 50e7 000d 50eb 000d     .P...P...P...P..
   da104:	50d7 000d 50f7 000d 50fb 000d 50ff 000d     .P...P...P...P..
   da114:	5103 000d 5107 000d 510d 000d 5111 000d     .Q...Q...Q...Q..
   da124:	50d3 000d 5115 000d 511b 000d 5121 000d     .P...Q...Q..!Q..

000da134 <_ZTV12RHGenericSPI>:
	...
   da13c:	40a5 000d 51f9 000d 51fb 000d 40a5 000d     .@...Q...Q...@..
   da14c:	40a5 000d 5203 000d 5207 000d 520b 000d     .@...R...R...R..
   da15c:	51fd 000d 51ff 000d 5201 000d 6564 6166     .Q...Q...R..defa
   da16c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   da17c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   da18c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   da19c:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000da1ac <_ZTVN8particle11SPISettingsE>:
	...
   da1b4:	5251 000d 5225 000d 5227 000d               QR..%R..'R..

000da1c0 <_ZTV13RHHardwareSPI>:
	...
   da1c8:	5305 000d 5319 000d 5327 000d 5335 000d     .S...S..'S..5S..
   da1d8:	53a1 000d 5203 000d 5207 000d 520b 000d     .S...R...R...R..
   da1e8:	53af 000d 53c3 000d 53d1 000d               .S...S...S..

000da1f4 <_ZTV6RHMesh>:
	...
   da1fc:	54a1 000d 57a9 000d 53fd 000d 53e9 000d     .T...W...S...S..

000da20c <_ZTV8RHRouter>:
	...
   da214:	5a0f 000d 5a53 000d                         .Z..SZ..

000da21c <_ZTV11RHSPIDriver>:
	...
   da22c:	5cf1 000d 40a5 000d 40a5 000d 40a5 000d     .\...@...@...@..
   da23c:	40a5 000d 5127 000d 50c9 000d 5177 000d     .@..'Q...P..wQ..
   da24c:	5145 000d 519b 000d 50d3 000d 50db 000d     EQ...Q...P...P..
   da25c:	50df 000d 50e3 000d 50e7 000d 50eb 000d     .P...P...P...P..
   da26c:	50d7 000d 50f7 000d 50fb 000d 50ff 000d     .P...P...P...P..
   da27c:	5103 000d 5107 000d 510d 000d 5111 000d     .Q...Q...Q...Q..
   da28c:	50d3 000d 5115 000d 511b 000d 5121 000d     .P...Q...Q..!Q..
   da29c:	5d1d 000d 5d27 000d                         .]..']..

000da2a4 <_ZL18MODEM_CONFIG_TABLE>:
   da2a4:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000da2b4 <_ZTV7RH_RF95>:
	...
   da2bc:	5e8f 000d 5ec7 000d 6389 000d 61ef 000d     .^...^...c...a..
   da2cc:	5efd 000d 6237 000d 5e8b 000d 5127 000d     .^..7b...^..'Q..
   da2dc:	50c9 000d 5177 000d 5145 000d 519b 000d     .P..wQ..EQ...Q..
   da2ec:	5e91 000d 50db 000d 50df 000d 50e3 000d     .^...P...P...P..
   da2fc:	50e7 000d 50eb 000d 50d7 000d 50f7 000d     .P...P...P...P..
   da30c:	50fb 000d 50ff 000d 5103 000d 5107 000d     .P...P...Q...Q..
   da31c:	510d 000d 5111 000d 5ed7 000d 5115 000d     .Q...Q...^...Q..
   da32c:	511b 000d 5121 000d 5d1d 000d 5d27 000d     .Q..!Q...]..']..
   da33c:	5e87 000d                                   .^..

000da340 <_ZTVN5spark13CellularClassE>:
	...
   da348:	6b83 000d 6b79 000d 6b6f 000d 6b25 000d     .k..yk..ok..%k..
   da358:	6b63 000d 6b57 000d 8661 000d 8669 000d     ck..Wk..a...i...
   da368:	6b4b 000d 6b43 000d 6b39 000d 6b2f 000d     Kk..Ck..9k../k..
   da378:	8699 000d                                   ....

000da37c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da384:	6bbd 000d 6bc3 000d 6c13 000d 6bd1 000d     .k...k...l...k..
   da394:	6bbf 000d                                   .k..

000da398 <_ZTVN5spark13EthernetClassE>:
	...
   da3a0:	718b 000d 7181 000d 7177 000d 716d 000d     .q...q..wq..mq..
   da3b0:	7161 000d 7155 000d 8661 000d 8669 000d     aq..Uq..a...i...
   da3c0:	7149 000d 7141 000d 7137 000d 712d 000d     Iq..Aq..7q..-q..
   da3d0:	8699 000d                                   ....

000da3d4 <_ZTV7TwoWire>:
	...
   da3dc:	71a9 000d 71f3 000d 71cb 000d 71ab 000d     .q...q...q...q..
   da3ec:	71d3 000d 71db 000d 71e3 000d 71eb 000d     .q...q...q...q..

000da3fc <_ZTV9IPAddress>:
	...
   da404:	728d 000d 727d 000d 727f 000d 7525 7500     .r..}r...r..%u.u
   da414:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   da424:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   da434:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   da444:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   da454:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   da464:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   da474:	006d 0063 0066 6e6c 6600 006e 6f63 6564     m.c.f.ln.fn.code
   da484:	6400 7465 6961 006c                         .detail.

000da48c <_ZTVN5spark16JSONStreamWriterE>:
	...
   da494:	7749 000d 776f 000d 772d 000d 738d 000d     Iw..ow..-w...s..

000da4a4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   da4ac:	7b25 000d 7b3d 000d 8309 000d 40cb 000d     %{..={.......@..

000da4bc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   da4c4:	7b51 000d 7b65 000d 84ad 000d 7735 000d     Q{..e{......5w..

000da4d4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   da4dc:	7747 000d 777d 000d 8245 000d 7737 000d     Gw..}w..E...7w..

000da4ec <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   da4f4:	7745 000d 778b 000d 7a6d 000d 77a9 000d     Ew...w..mz...w..

000da504 <_ZTVN5spark12NetworkClassE>:
	...
   da50c:	8621 000d 862b 000d 8635 000d 863f 000d     !...+...5...?...
   da51c:	8649 000d 8655 000d 8661 000d 8669 000d     I...U...a...i...
   da52c:	8671 000d 867d 000d 8685 000d 868f 000d     q...}...........
   da53c:	8699 000d                                   ....

000da540 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da540:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   da550:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   da560:	6d69 0065                                   ime.

000da564 <_ZTV11USARTSerial>:
	...
   da56c:	8cf9 000d 8d67 000d 8d3f 000d 8781 000d     ....g...?.......
   da57c:	8d0f 000d 8d2b 000d 8d1d 000d 8d39 000d     ....+.......9...
   da58c:	8cfb 000d 8d01 000d                         ........

000da594 <_ZTV9USBSerial>:
	...
   da59c:	8e07 000d 8e6f 000d 8e45 000d 8781 000d     ....o...E.......
   da5ac:	8e37 000d 8e09 000d 8e19 000d 8e69 000d     7...........i...
   da5bc:	8e29 000d 8e01 000d                         ).......

000da5c4 <_ZSt7nothrow>:
   da5c4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   da5d4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000da5e5 <day_name.6145>:
   da5e5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   da5f5:	6972 6153                                    riSat

000da5fa <mon_name.6146>:
   da5fa:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   da60a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   da61a:	4476 6365                                   vDec

000da61e <_ctype_>:
   da61e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da62e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da63e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da64e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da65e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da66e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da67e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da68e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da69e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da71f <link_const_variable_data_end>:
	...

000da720 <link_constructors_location>:
   da720:	000d45e9 	.word	0x000d45e9
   da724:	000d48a9 	.word	0x000d48a9
   da728:	000d53d9 	.word	0x000d53d9
   da72c:	000d6b15 	.word	0x000d6b15
   da730:	000d6b8d 	.word	0x000d6b8d
   da734:	000d7195 	.word	0x000d7195
   da738:	000d82f9 	.word	0x000d82f9
   da73c:	000d876d 	.word	0x000d876d
   da740:	000d88c1 	.word	0x000d88c1
   da744:	000d8bb5 	.word	0x000d8bb5
   da748:	000d8ce5 	.word	0x000d8ce5

000da74c <link_constructors_end>:
   da74c:	00000000 	.word	0x00000000
