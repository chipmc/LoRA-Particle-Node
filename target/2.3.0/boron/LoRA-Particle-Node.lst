
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/2.3.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008d20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000008  2003f400  000dcd40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000104  2003dca4  000dcd48  0001dca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a48  2003dda8  2003dda8  0002dda8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dce4c  000dce4c  0002ce4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dce74  000dce74  0002ce74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00270758  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000247f5  00000000  00000000  0029d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004357e  00000000  00000000  002c1dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003790  00000000  00000000  00305343  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000aaf8  00000000  00000000  00308ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00049b45  00000000  00000000  003135cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005f145  00000000  00000000  0035d110  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012b262  00000000  00000000  003bc255  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a194  00000000  00000000  004e74b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fe17 	bl	dbc64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fe39 	bl	dbcb4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dca4 	.word	0x2003dca4
   d404c:	000dcd48 	.word	0x000dcd48
   d4050:	2003dda8 	.word	0x2003dda8
   d4054:	2003dda8 	.word	0x2003dda8
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f8d9 	bl	db218 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dcd10 	.word	0x000dcd10
   d4080:	000dcd3c 	.word	0x000dcd3c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbf0 	b.w	d4868 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd71 	bl	d4b70 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b879 	b.w	db188 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bc0d 	b.w	d88b4 <malloc>

000d409a <_Znaj>:
   d409a:	f004 bc0b 	b.w	d88b4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bc11 	b.w	d88c4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 fada 	bl	d8664 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d8305 	.word	0x000d8305

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z9sensorISRv>:
    	systemStatusWriteNeeded = false;
  	}
}

void sensorISR() {
	sensorDetect = true;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z9sensorISRv+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
}
   d40da:	4770      	bx	lr
   d40dc:	2003e2e0 	.word	0x2003e2e0

000d40e0 <_Z13userSwitchISRv>:

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d40e0:	4b01      	ldr	r3, [pc, #4]	; (d40e8 <_Z13userSwitchISRv+0x8>)
   d40e2:	2201      	movs	r2, #1
   d40e4:	701a      	strb	r2, [r3, #0]
}
   d40e6:	4770      	bx	lr
   d40e8:	2003e309 	.word	0x2003e309

000d40ec <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40ec:	b510      	push	{r4, lr}
   d40ee:	4b03      	ldr	r3, [pc, #12]	; (d40fc <_ZN8MB85RC64D1Ev+0x10>)
   d40f0:	6003      	str	r3, [r0, #0]
   d40f2:	4604      	mov	r4, r0
   d40f4:	f002 fd29 	bl	d6b4a <_ZN6MB85RCD1Ev>
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}
   d40fc:	000dc388 	.word	0x000dc388

000d4100 <_ZN8MB85RC64D0Ev>:
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff fff2 	bl	d40ec <_ZN8MB85RC64D1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	2110      	movs	r1, #16
   d410c:	f007 f96e 	bl	db3ec <_ZdlPvj>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4114:	4b0a      	ldr	r3, [pc, #40]	; (d4140 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4116:	b510      	push	{r4, lr}
   d4118:	4604      	mov	r4, r0
   d411a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d411c:	f005 fbf0 	bl	d9900 <_ZN5spark10LogManager8instanceEv>
   d4120:	4621      	mov	r1, r4
   d4122:	f005 fdb2 	bl	d9c8a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4126:	f006 ffe7 	bl	db0f8 <_Z16_fetch_usbserialv>
   d412a:	f006 ffd9 	bl	db0e0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d412e:	4620      	mov	r0, r4
   d4130:	4b04      	ldr	r3, [pc, #16]	; (d4144 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4132:	f840 3b04 	str.w	r3, [r0], #4
   d4136:	f005 fc95 	bl	d9a64 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d413a:	4620      	mov	r0, r4
   d413c:	bd10      	pop	{r4, pc}
   d413e:	bf00      	nop
   d4140:	000dc370 	.word	0x000dc370
   d4144:	000dc358 	.word	0x000dc358

000d4148 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4148:	b510      	push	{r4, lr}
   d414a:	4604      	mov	r4, r0
    }
   d414c:	f7ff ffe2 	bl	d4114 <_ZN5spark16SerialLogHandlerD1Ev>
   d4150:	4620      	mov	r0, r4
   d4152:	2124      	movs	r1, #36	; 0x24
   d4154:	f007 f94a 	bl	db3ec <_ZdlPvj>
   d4158:	4620      	mov	r0, r4
   d415a:	bd10      	pop	{r4, pc}

000d415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d415e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4160:	4605      	mov	r5, r0
   d4162:	460f      	mov	r7, r1
   d4164:	4616      	mov	r6, r2
        if (valid_) {
   d4166:	b18b      	cbz	r3, d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4168:	6803      	ldr	r3, [r0, #0]
   d416a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d416c:	b183      	cbz	r3, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d416e:	889a      	ldrh	r2, [r3, #4]
   d4170:	2a01      	cmp	r2, #1
   d4172:	d006      	beq.n	d4182 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4174:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4176:	e7f9      	b.n	d416c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4178:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d417a:	b14b      	cbz	r3, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d417c:	889a      	ldrh	r2, [r3, #4]
   d417e:	2a01      	cmp	r2, #1
   d4180:	d1fa      	bne.n	d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4182:	b12b      	cbz	r3, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4184:	899a      	ldrh	r2, [r3, #12]
   d4186:	42ba      	cmp	r2, r7
   d4188:	d1f6      	bne.n	d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d418a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d418c:	4628      	mov	r0, r5
   d418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4190:	490a      	ldr	r1, [pc, #40]	; (d41bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4192:	2010      	movs	r0, #16
   d4194:	f007 f92c 	bl	db3f0 <_ZnwjRKSt9nothrow_t>
   d4198:	4604      	mov	r4, r0
   d419a:	b168      	cbz	r0, d41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d419c:	2210      	movs	r2, #16
   d419e:	2100      	movs	r1, #0
   d41a0:	f007 fd88 	bl	dbcb4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41a4:	4b06      	ldr	r3, [pc, #24]	; (d41c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41a6:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41a8:	2301      	movs	r3, #1
   d41aa:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41ac:	692b      	ldr	r3, [r5, #16]
   d41ae:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d41b0:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d41b2:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41b4:	612c      	str	r4, [r5, #16]
   d41b6:	e7e9      	b.n	d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d41b8:	7528      	strb	r0, [r5, #20]
                return *this;
   d41ba:	e7e7      	b.n	d418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d41bc:	000dcbb4 	.word	0x000dcbb4
   d41c0:	00030010 	.word	0x00030010

000d41c4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41c4:	b40e      	push	{r1, r2, r3}
   d41c6:	b510      	push	{r4, lr}
   d41c8:	b08d      	sub	sp, #52	; 0x34
   d41ca:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d41cc:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d41ce:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d41d2:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41d4:	2300      	movs	r3, #0
   d41d6:	2020      	movs	r0, #32
   d41d8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41dc:	e9cd 4200 	strd	r4, r2, [sp]
   d41e0:	201e      	movs	r0, #30
   d41e2:	aa04      	add	r2, sp, #16
   d41e4:	f004 fa4e 	bl	d8684 <log_message_v>
}
   d41e8:	b00d      	add	sp, #52	; 0x34
   d41ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41ee:	b003      	add	sp, #12
   d41f0:	4770      	bx	lr
	...

000d41f4 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d41f4:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d41f6:	247f      	movs	r4, #127	; 0x7f
   d41f8:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d41fa:	2400      	movs	r4, #0
   d41fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d4200:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d4204:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d4208:	6849      	ldr	r1, [r1, #4]
   d420a:	4c03      	ldr	r4, [pc, #12]	; (d4218 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d420c:	6852      	ldr	r2, [r2, #4]
   d420e:	61c4      	str	r4, [r0, #28]
   d4210:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d4214:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d4216:	bd10      	pop	{r4, pc}
   d4218:	000dc604 	.word	0x000dc604

000d421c <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d421c:	b510      	push	{r4, lr}
   d421e:	4604      	mov	r4, r0
   d4220:	3024      	adds	r0, #36	; 0x24
   d4222:	f001 f9fb 	bl	d561c <_ZN12LocalTimeHMSD1Ev>
   d4226:	f104 001c 	add.w	r0, r4, #28
   d422a:	f001 f9f7 	bl	d561c <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d422e:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4230:	b108      	cbz	r0, d4236 <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4232:	f7ff ff34 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d4236:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d4238:	b108      	cbz	r0, d423e <_ZN14LocalTimeRangeD1Ev+0x22>
   d423a:	f7ff ff30 	bl	d409e <_ZdlPv>
   d423e:	4620      	mov	r0, r4
   d4240:	bd10      	pop	{r4, pc}
	...

000d4244 <_Z11recordCountv>:

void recordCount() {
   d4244:	b538      	push	{r3, r4, r5, lr}
	static time_t lastCount = Time.now();
   d4246:	4d17      	ldr	r5, [pc, #92]	; (d42a4 <_Z11recordCountv+0x60>)
   d4248:	4c17      	ldr	r4, [pc, #92]	; (d42a8 <_Z11recordCountv+0x64>)
   d424a:	782b      	ldrb	r3, [r5, #0]
   d424c:	f3bf 8f5b 	dmb	ish
   d4250:	f013 0f01 	tst.w	r3, #1
   d4254:	d10b      	bne.n	d426e <_Z11recordCountv+0x2a>
   d4256:	4628      	mov	r0, r5
   d4258:	f7ff ff2e 	bl	d40b8 <__cxa_guard_acquire>
   d425c:	b138      	cbz	r0, d426e <_Z11recordCountv+0x2a>
   d425e:	f006 fe4a 	bl	daef6 <_ZN9TimeClass3nowEv>
   d4262:	17c1      	asrs	r1, r0, #31
   d4264:	e9c4 0100 	strd	r0, r1, [r4]
   d4268:	4628      	mov	r0, r5
   d426a:	f7ff ff2a 	bl	d40c2 <__cxa_guard_release>
	if (Time.now() - lastCount) {
   d426e:	f006 fe42 	bl	daef6 <_ZN9TimeClass3nowEv>
   d4272:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4276:	17c1      	asrs	r1, r0, #31
   d4278:	4299      	cmp	r1, r3
   d427a:	bf08      	it	eq
   d427c:	4290      	cmpeq	r0, r2
   d427e:	d00f      	beq.n	d42a0 <_Z11recordCountv+0x5c>
		lastCount = Time.now();
   d4280:	f006 fe39 	bl	daef6 <_ZN9TimeClass3nowEv>
		hourly++;
   d4284:	4a09      	ldr	r2, [pc, #36]	; (d42ac <_Z11recordCountv+0x68>)
   d4286:	8813      	ldrh	r3, [r2, #0]
   d4288:	3301      	adds	r3, #1
   d428a:	8013      	strh	r3, [r2, #0]
		daily++;
   d428c:	4a08      	ldr	r2, [pc, #32]	; (d42b0 <_Z11recordCountv+0x6c>)
   d428e:	8813      	ldrh	r3, [r2, #0]
		lastCount = Time.now();
   d4290:	17c1      	asrs	r1, r0, #31
		daily++;
   d4292:	3301      	adds	r3, #1
   d4294:	8013      	strh	r3, [r2, #0]
		lastCount = Time.now();
   d4296:	e9c4 0100 	strd	r0, r1, [r4]
		sensorDetect = false;
   d429a:	4b06      	ldr	r3, [pc, #24]	; (d42b4 <_Z11recordCountv+0x70>)
   d429c:	2200      	movs	r2, #0
   d429e:	701a      	strb	r2, [r3, #0]
	}
}
   d42a0:	bd38      	pop	{r3, r4, r5, pc}
   d42a2:	bf00      	nop
   d42a4:	2003ddb4 	.word	0x2003ddb4
   d42a8:	2003ddc0 	.word	0x2003ddc0
   d42ac:	2003e054 	.word	0x2003e054
   d42b0:	2003df10 	.word	0x2003df10
   d42b4:	2003e2e0 	.word	0x2003e2e0

000d42b8 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition to the Log Handler and to the Particle monitoring system.
 *
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d42b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	char stateTransitionString[40];
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d42ba:	4d25      	ldr	r5, [pc, #148]	; (d4350 <_Z22publishStateTransitionv+0x98>)
   d42bc:	4c25      	ldr	r4, [pc, #148]	; (d4354 <_Z22publishStateTransitionv+0x9c>)
   d42be:	4b26      	ldr	r3, [pc, #152]	; (d4358 <_Z22publishStateTransitionv+0xa0>)
   d42c0:	782a      	ldrb	r2, [r5, #0]
   d42c2:	7821      	ldrb	r1, [r4, #0]
{
   d42c4:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d42c6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d42ca:	9200      	str	r2, [sp, #0]
   d42cc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d42d0:	4a22      	ldr	r2, [pc, #136]	; (d435c <_Z22publishStateTransitionv+0xa4>)
   d42d2:	2128      	movs	r1, #40	; 0x28
   d42d4:	a804      	add	r0, sp, #16
   d42d6:	f004 fb15 	bl	d8904 <snprintf>
	oldState = state;
   d42da:	782b      	ldrb	r3, [r5, #0]
   d42dc:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42de:	f004 fa61 	bl	d87a4 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d42e2:	2800      	cmp	r0, #0
   d42e4:	d02e      	beq.n	d4344 <_Z22publishStateTransitionv+0x8c>
		static time_t lastPublish = 0;
		if (millis() - lastPublish > 1000) {
   d42e6:	4c1e      	ldr	r4, [pc, #120]	; (d4360 <_Z22publishStateTransitionv+0xa8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42e8:	f004 f814 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
   d42ec:	e9d4 3200 	ldrd	r3, r2, [r4]
   d42f0:	1ac6      	subs	r6, r0, r3
   d42f2:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d42f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d42fa:	2300      	movs	r3, #0
   d42fc:	42b2      	cmp	r2, r6
   d42fe:	41bb      	sbcs	r3, r7
   d4300:	da20      	bge.n	d4344 <_Z22publishStateTransitionv+0x8c>
   d4302:	f004 f807 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d4306:	2300      	movs	r3, #0
   d4308:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d430a:	4b16      	ldr	r3, [pc, #88]	; (d4364 <_Z22publishStateTransitionv+0xac>)
   d430c:	6020      	str	r0, [r4, #0]
   d430e:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4310:	f88d 3000 	strb.w	r3, [sp]
   d4314:	4914      	ldr	r1, [pc, #80]	; (d4368 <_Z22publishStateTransitionv+0xb0>)
   d4316:	233c      	movs	r3, #60	; 0x3c
   d4318:	aa04      	add	r2, sp, #16
   d431a:	a802      	add	r0, sp, #8
   d431c:	f004 fcee 	bl	d8cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4320:	9c03      	ldr	r4, [sp, #12]
   d4322:	b17c      	cbz	r4, d4344 <_Z22publishStateTransitionv+0x8c>
      if (--_M_use_count == 0)
   d4324:	6863      	ldr	r3, [r4, #4]
   d4326:	3b01      	subs	r3, #1
   d4328:	6063      	str	r3, [r4, #4]
   d432a:	b95b      	cbnz	r3, d4344 <_Z22publishStateTransitionv+0x8c>
          _M_dispose();
   d432c:	6823      	ldr	r3, [r4, #0]
   d432e:	4620      	mov	r0, r4
   d4330:	689b      	ldr	r3, [r3, #8]
   d4332:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4334:	68a3      	ldr	r3, [r4, #8]
   d4336:	3b01      	subs	r3, #1
   d4338:	60a3      	str	r3, [r4, #8]
   d433a:	b91b      	cbnz	r3, d4344 <_Z22publishStateTransitionv+0x8c>
            _M_destroy();
   d433c:	6823      	ldr	r3, [r4, #0]
   d433e:	4620      	mov	r0, r4
   d4340:	68db      	ldr	r3, [r3, #12]
   d4342:	4798      	blx	r3
			Particle.publish("State Transition",stateTransitionString, PRIVATE);
		}
	}
	Log.info(stateTransitionString);
   d4344:	4809      	ldr	r0, [pc, #36]	; (d436c <_Z22publishStateTransitionv+0xb4>)
   d4346:	a904      	add	r1, sp, #16
   d4348:	f7ff ff3c 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
}
   d434c:	b00f      	add	sp, #60	; 0x3c
   d434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4350:	2003e2e1 	.word	0x2003e2e1
   d4354:	2003e2ac 	.word	0x2003e2ac
   d4358:	2003dca4 	.word	0x2003dca4
   d435c:	000dc0c4 	.word	0x000dc0c4
   d4360:	2003ddd0 	.word	0x2003ddd0
   d4364:	2003ddb8 	.word	0x2003ddb8
   d4368:	000dc0d2 	.word	0x000dc0d2
   d436c:	2003e58c 	.word	0x2003e58c

000d4370 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4370:	b530      	push	{r4, r5, lr}
   d4372:	b085      	sub	sp, #20
   d4374:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4376:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4378:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d437a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d437c:	f004 f99a 	bl	d86b4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4380:	b9b0      	cbnz	r0, d43b0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4382:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4384:	b10c      	cbz	r4, d438a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4386:	6923      	ldr	r3, [r4, #16]
   d4388:	b923      	cbnz	r3, d4394 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d438a:	4a0a      	ldr	r2, [pc, #40]	; (d43b4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d438c:	2100      	movs	r1, #0
   d438e:	200a      	movs	r0, #10
   d4390:	f004 f968 	bl	d8664 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4394:	2300      	movs	r3, #0
   d4396:	f8ad 3006 	strh.w	r3, [sp, #6]
   d439a:	230c      	movs	r3, #12
   d439c:	f8ad 3004 	strh.w	r3, [sp, #4]
   d43a0:	2304      	movs	r3, #4
   d43a2:	9303      	str	r3, [sp, #12]
   d43a4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d43a6:	6923      	ldr	r3, [r4, #16]
   d43a8:	aa01      	add	r2, sp, #4
   d43aa:	2101      	movs	r1, #1
   d43ac:	4620      	mov	r0, r4
   d43ae:	4798      	blx	r3
}
   d43b0:	b005      	add	sp, #20
   d43b2:	bd30      	pop	{r4, r5, pc}
   d43b4:	000d8305 	.word	0x000d8305

000d43b8 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   d43b8:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d43ba:	2003      	movs	r0, #3
   d43bc:	a901      	add	r1, sp, #4
   d43be:	f7ff ffd7 	bl	d4370 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d43c2:	b940      	cbnz	r0, d43d6 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d43c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d43c8:	ee00 3a10 	vmov	s0, r3
   d43cc:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d43d0:	b003      	add	sp, #12
   d43d2:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d43d6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d43da:	e7f9      	b.n	d43d0 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d43dc <_Z11sendMessagev>:
void sendMessage() {
   d43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	Log.info("Sending to Gateway");
   d43de:	4971      	ldr	r1, [pc, #452]	; (d45a4 <_Z11sendMessagev+0x1c8>)
   d43e0:	4871      	ldr	r0, [pc, #452]	; (d45a8 <_Z11sendMessagev+0x1cc>)
void sendMessage() {
   d43e2:	b0af      	sub	sp, #188	; 0xbc
	Log.info("Sending to Gateway");
   d43e4:	f7ff feee 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(blueLED,HIGH);
   d43e8:	2101      	movs	r1, #1
   d43ea:	2007      	movs	r0, #7
   d43ec:	f006 ff95 	bl	db31a <digitalWrite>
	uint8_t battChg = System.batteryCharge();
   d43f0:	f7ff ffe2 	bl	d43b8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d43f4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d43f8:	a91e      	add	r1, sp, #120	; 0x78
   d43fa:	edcd 7a07 	vstr	s15, [sp, #28]
   d43fe:	2007      	movs	r0, #7
   d4400:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d4404:	f7ff ffb4 	bl	d4370 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d4408:	1e04      	subs	r4, r0, #0
    int16_t rssi = driver.lastRssi();
   d440a:	4868      	ldr	r0, [pc, #416]	; (d45ac <_Z11sendMessagev+0x1d0>)
        return val;
   d440c:	bfa8      	it	ge
   d440e:	9c1e      	ldrge	r4, [sp, #120]	; 0x78
   d4410:	f002 fd7d 	bl	d6f0e <_ZN15RHGenericDriver8lastRssiEv>
	payload[0] = 0; 								// to be replaced/updated
   d4414:	4b66      	ldr	r3, [pc, #408]	; (d45b0 <_Z11sendMessagev+0x1d4>)
   d4416:	930e      	str	r3, [sp, #56]	; 0x38
	payload[5] = highByte(hourly);
   d4418:	4b66      	ldr	r3, [pc, #408]	; (d45b4 <_Z11sendMessagev+0x1d8>)
	uint8_t battState = System.batteryState();
   d441a:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
	payload[5] = highByte(hourly);
   d441e:	881b      	ldrh	r3, [r3, #0]
	payload[6] = lowByte(hourly); 
   d4420:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	payload[5] = highByte(hourly);
   d4424:	121a      	asrs	r2, r3, #8
	payload[7] = highByte(daily);
   d4426:	4b64      	ldr	r3, [pc, #400]	; (d45b8 <_Z11sendMessagev+0x1dc>)
	payload[5] = highByte(hourly);
   d4428:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
	payload[7] = highByte(daily);
   d442c:	881b      	ldrh	r3, [r3, #0]
	payload[8] = lowByte(daily); 
   d442e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	payload[7] = highByte(daily);
   d4432:	121a      	asrs	r2, r3, #8
	payload[9] = temp;
   d4434:	2355      	movs	r3, #85	; 0x55
   d4436:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
	payload[12] = resetCount;
   d443a:	4b60      	ldr	r3, [pc, #384]	; (d45bc <_Z11sendMessagev+0x1e0>)
	payload[7] = highByte(daily);
   d443c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	payload[12] = resetCount;
   d4440:	781b      	ldrb	r3, [r3, #0]
   d4442:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	payload[13] = alerts;
   d4446:	4b5e      	ldr	r3, [pc, #376]	; (d45c0 <_Z11sendMessagev+0x1e4>)
	payload[10] = battChg;
   d4448:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
	payload[13] = alerts;
   d444c:	781b      	ldrb	r3, [r3, #0]
   d444e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	payload[16] = msgCnt++;
   d4452:	4b5c      	ldr	r3, [pc, #368]	; (d45c4 <_Z11sendMessagev+0x1e8>)
   d4454:	781a      	ldrb	r2, [r3, #0]
   d4456:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   d445a:	1c51      	adds	r1, r2, #1
	payload[14] = highByte(rssi);
   d445c:	ba40      	rev16	r0, r0
	payload[16] = msgCnt++;
   d445e:	7019      	strb	r1, [r3, #0]
	payload[4] = firmwareMajor;						// Set for code release
   d4460:	2600      	movs	r6, #0
	Log.info("sending message %d", payload[16]);
   d4462:	4959      	ldr	r1, [pc, #356]	; (d45c8 <_Z11sendMessagev+0x1ec>)
	payload[14] = highByte(rssi);
   d4464:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
	Log.info("sending message %d", payload[16]);
   d4468:	484f      	ldr	r0, [pc, #316]	; (d45a8 <_Z11sendMessagev+0x1cc>)
	payload[4] = firmwareMajor;						// Set for code release
   d446a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
	Log.info("sending message %d", payload[16]);
   d446e:	f7ff fea9 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(payload, sizeof(payload), GATEWAY_ADDRESS) == RH_ROUTER_ERROR_NONE) {
   d4472:	4856      	ldr	r0, [pc, #344]	; (d45cc <_Z11sendMessagev+0x1f0>)
   d4474:	9600      	str	r6, [sp, #0]
   d4476:	2301      	movs	r3, #1
   d4478:	2211      	movs	r2, #17
   d447a:	a90e      	add	r1, sp, #56	; 0x38
   d447c:	f002 ff64 	bl	d7348 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4480:	4604      	mov	r4, r0
   d4482:	2800      	cmp	r0, #0
   d4484:	f040 808c 	bne.w	d45a0 <_Z11sendMessagev+0x1c4>
		uint8_t len = sizeof(buf);
   d4488:	23f9      	movs	r3, #249	; 0xf9
		Log.info("Message sent");
   d448a:	4951      	ldr	r1, [pc, #324]	; (d45d0 <_Z11sendMessagev+0x1f4>)
   d448c:	4846      	ldr	r0, [pc, #280]	; (d45a8 <_Z11sendMessagev+0x1cc>)
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d448e:	4d51      	ldr	r5, [pc, #324]	; (d45d4 <_Z11sendMessagev+0x1f8>)
		uint8_t len = sizeof(buf);
   d4490:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		Log.info("Message sent");
   d4494:	f7ff fe96 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d4498:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   d449c:	9300      	str	r3, [sp, #0]
   d449e:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d44a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d44a6:	4849      	ldr	r0, [pc, #292]	; (d45cc <_Z11sendMessagev+0x1f0>)
   d44a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d44ac:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   d44b0:	4629      	mov	r1, r5
   d44b2:	f003 f84f 	bl	d7554 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d44b6:	2800      	cmp	r0, #0
   d44b8:	d06d      	beq.n	d4596 <_Z11sendMessagev+0x1ba>
			buf[len] = 0;
   d44ba:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[2] == payload[16]) ? "successful":"unsuccessful");
   d44be:	483b      	ldr	r0, [pc, #236]	; (d45ac <_Z11sendMessagev+0x1d0>)
			buf[len] = 0;
   d44c0:	54ec      	strb	r4, [r5, r3]
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[2] == payload[16]) ? "successful":"unsuccessful");
   d44c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   d44c6:	9307      	str	r3, [sp, #28]
   d44c8:	f002 fd21 	bl	d6f0e <_ZN15RHGenericDriver8lastRssiEv>
   d44cc:	78af      	ldrb	r7, [r5, #2]
   d44ce:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   d44d2:	4941      	ldr	r1, [pc, #260]	; (d45d8 <_Z11sendMessagev+0x1fc>)
   d44d4:	4a41      	ldr	r2, [pc, #260]	; (d45dc <_Z11sendMessagev+0x200>)
   d44d6:	9b07      	ldr	r3, [sp, #28]
   d44d8:	42b7      	cmp	r7, r6
   d44da:	bf18      	it	ne
   d44dc:	460a      	movne	r2, r1
   d44de:	e9cd 0200 	strd	r0, r2, [sp]
   d44e2:	2140      	movs	r1, #64	; 0x40
   d44e4:	4a3e      	ldr	r2, [pc, #248]	; (d45e0 <_Z11sendMessagev+0x204>)
   d44e6:	a81e      	add	r0, sp, #120	; 0x78
   d44e8:	f004 fa0c 	bl	d8904 <snprintf>
			Log.info(data);
   d44ec:	482e      	ldr	r0, [pc, #184]	; (d45a8 <_Z11sendMessagev+0x1cc>)
   d44ee:	a91e      	add	r1, sp, #120	; 0x78
   d44f0:	f7ff fe68 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
			uint32_t newTime = ((buf[3] << 24) | (buf[4] << 16) | (buf[5] << 8) | buf[6]);
   d44f4:	f8d5 2003 	ldr.w	r2, [r5, #3]
			Log.info("Time is: %lu",newTime);
   d44f8:	493a      	ldr	r1, [pc, #232]	; (d45e4 <_Z11sendMessagev+0x208>)
   d44fa:	482b      	ldr	r0, [pc, #172]	; (d45a8 <_Z11sendMessagev+0x1cc>)
   d44fc:	ba12      	rev	r2, r2
   d44fe:	9207      	str	r2, [sp, #28]
   d4500:	f7ff fe60 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
			Time.setTime(newTime);  // Set time based on response from gateway
   d4504:	9a07      	ldr	r2, [sp, #28]
   d4506:	4621      	mov	r1, r4
   d4508:	4610      	mov	r0, r2
   d450a:	f006 fbde 	bl	dacca <_ZN9TimeClass7setTimeEx>
			Log.info("Time set to %lu local time is %s", newTime, Time.timeStr(newTime).c_str());
   d450e:	4623      	mov	r3, r4
   d4510:	9a07      	ldr	r2, [sp, #28]
   d4512:	a813      	add	r0, sp, #76	; 0x4c
   d4514:	f006 fbec 	bl	dacf0 <_ZN9TimeClass7timeStrEx>
   d4518:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d451a:	9a07      	ldr	r2, [sp, #28]
   d451c:	4932      	ldr	r1, [pc, #200]	; (d45e8 <_Z11sendMessagev+0x20c>)
   d451e:	4822      	ldr	r0, [pc, #136]	; (d45a8 <_Z11sendMessagev+0x1cc>)
   d4520:	f7ff fe50 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d4524:	a813      	add	r0, sp, #76	; 0x4c
   d4526:	f006 fa3b 	bl	da9a0 <_ZN6StringD1Ev>
			Log.info("Next report in %u minutes",((buf[7] << 8) | buf[8]));
   d452a:	f8b5 2007 	ldrh.w	r2, [r5, #7]
   d452e:	492f      	ldr	r1, [pc, #188]	; (d45ec <_Z11sendMessagev+0x210>)
   d4530:	481d      	ldr	r0, [pc, #116]	; (d45a8 <_Z11sendMessagev+0x1cc>)
   d4532:	ba52      	rev16	r2, r2
   d4534:	b292      	uxth	r2, r2
   d4536:	f7ff fe45 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
			sysStatus.frequencyMinutes = ((buf[7] << 8) | buf[8]);
   d453a:	79eb      	ldrb	r3, [r5, #7]
   d453c:	7a2c      	ldrb	r4, [r5, #8]
			publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every as directed from 6am to 10pm
   d453e:	492c      	ldr	r1, [pc, #176]	; (d45f0 <_Z11sendMessagev+0x214>)
			sysStatus.frequencyMinutes = ((buf[7] << 8) | buf[8]);
   d4540:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   d4544:	4b2b      	ldr	r3, [pc, #172]	; (d45f4 <_Z11sendMessagev+0x218>)
			publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every as directed from 6am to 10pm
   d4546:	a80a      	add	r0, sp, #40	; 0x28
			sysStatus.frequencyMinutes = ((buf[7] << 8) | buf[8]);
   d4548:	83dc      	strh	r4, [r3, #30]
			publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every as directed from 6am to 10pm
   d454a:	f001 fa19 	bl	d5980 <_ZN12LocalTimeHMSC1EPKc>
   d454e:	492a      	ldr	r1, [pc, #168]	; (d45f8 <_Z11sendMessagev+0x21c>)
   d4550:	a80c      	add	r0, sp, #48	; 0x30
   d4552:	f001 fa15 	bl	d5980 <_ZN12LocalTimeHMSC1EPKc>
   d4556:	aa0c      	add	r2, sp, #48	; 0x30
   d4558:	a90a      	add	r1, sp, #40	; 0x28
   d455a:	a813      	add	r0, sp, #76	; 0x4c
   d455c:	f7ff fe4a 	bl	d41f4 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4560:	aa13      	add	r2, sp, #76	; 0x4c
   d4562:	4621      	mov	r1, r4
   d4564:	4825      	ldr	r0, [pc, #148]	; (d45fc <_Z11sendMessagev+0x220>)
   d4566:	f002 fad6 	bl	d6b16 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d456a:	a813      	add	r0, sp, #76	; 0x4c
   d456c:	f7ff fe56 	bl	d421c <_ZN14LocalTimeRangeD1Ev>
   d4570:	a80c      	add	r0, sp, #48	; 0x30
   d4572:	f001 f853 	bl	d561c <_ZN12LocalTimeHMSD1Ev>
   d4576:	a80a      	add	r0, sp, #40	; 0x28
   d4578:	f001 f850 	bl	d561c <_ZN12LocalTimeHMSD1Ev>
			systemStatusWriteNeeded = true;
   d457c:	4b20      	ldr	r3, [pc, #128]	; (d4600 <_Z11sendMessagev+0x224>)
   d457e:	2201      	movs	r2, #1
   d4580:	701a      	strb	r2, [r3, #0]
   d4582:	f003 fec7 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
	lastReportMillis = millis();
   d4586:	4b1f      	ldr	r3, [pc, #124]	; (d4604 <_Z11sendMessagev+0x228>)
	digitalWrite(blueLED,LOW);
   d4588:	2100      	movs	r1, #0
	lastReportMillis = millis();
   d458a:	6018      	str	r0, [r3, #0]
	digitalWrite(blueLED,LOW);
   d458c:	2007      	movs	r0, #7
   d458e:	f006 fec4 	bl	db31a <digitalWrite>
}
   d4592:	b02f      	add	sp, #188	; 0xbc
   d4594:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Log.info("No reply, are the gateways running?");
   d4596:	491c      	ldr	r1, [pc, #112]	; (d4608 <_Z11sendMessagev+0x22c>)
	else Log.info("sendtoWait failed. are the gateways running?");
   d4598:	4803      	ldr	r0, [pc, #12]	; (d45a8 <_Z11sendMessagev+0x1cc>)
   d459a:	f7ff fe13 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d459e:	e7f0      	b.n	d4582 <_Z11sendMessagev+0x1a6>
   d45a0:	491a      	ldr	r1, [pc, #104]	; (d460c <_Z11sendMessagev+0x230>)
   d45a2:	e7f9      	b.n	d4598 <_Z11sendMessagev+0x1bc>
   d45a4:	000dc0f0 	.word	0x000dc0f0
   d45a8:	2003e58c 	.word	0x2003e58c
   d45ac:	2003df14 	.word	0x2003df14
   d45b0:	feff0000 	.word	0xfeff0000
   d45b4:	2003e054 	.word	0x2003e054
   d45b8:	2003df10 	.word	0x2003df10
   d45bc:	2003f400 	.word	0x2003f400
   d45c0:	2003ddfc 	.word	0x2003ddfc
   d45c4:	2003ddc8 	.word	0x2003ddc8
   d45c8:	000dc103 	.word	0x000dc103
   d45cc:	2003e174 	.word	0x2003e174
   d45d0:	000dc116 	.word	0x000dc116
   d45d4:	2003ddfd 	.word	0x2003ddfd
   d45d8:	000dc0e3 	.word	0x000dc0e3
   d45dc:	000dc0e5 	.word	0x000dc0e5
   d45e0:	000dc123 	.word	0x000dc123
   d45e4:	000dc14a 	.word	0x000dc14a
   d45e8:	000dc157 	.word	0x000dc157
   d45ec:	000dc178 	.word	0x000dc178
   d45f0:	000dc192 	.word	0x000dc192
   d45f4:	2003e2e4 	.word	0x2003e2e4
   d45f8:	000dc19b 	.word	0x000dc19b
   d45fc:	2003e2b0 	.word	0x2003e2b0
   d4600:	2003e308 	.word	0x2003e308
   d4604:	2003e058 	.word	0x2003e058
   d4608:	000dc1a4 	.word	0x000dc1a4
   d460c:	000dc1c8 	.word	0x000dc1c8

000d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4610:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4612:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4616:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4618:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d461a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d461e:	42ae      	cmp	r6, r5
   d4620:	d004      	beq.n	d462c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4622:	4628      	mov	r0, r5
   d4624:	f006 f9bc 	bl	da9a0 <_ZN6StringD1Ev>
   d4628:	3514      	adds	r5, #20
   d462a:	e7f8      	b.n	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d462c:	6820      	ldr	r0, [r4, #0]
   d462e:	f004 f949 	bl	d88c4 <free>
    AllocatorT::free(data_);
}
   d4632:	4620      	mov	r0, r4
   d4634:	bd70      	pop	{r4, r5, r6, pc}

000d4636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4636:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d463a:	4604      	mov	r4, r0
   d463c:	460d      	mov	r5, r1
   d463e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4640:	d916      	bls.n	d4670 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4642:	4290      	cmp	r0, r2
   d4644:	d215      	bcs.n	d4672 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4646:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d464a:	1a75      	subs	r5, r6, r1
   d464c:	f1a1 0714 	sub.w	r7, r1, #20
   d4650:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4652:	42b7      	cmp	r7, r6
   d4654:	d01c      	beq.n	d4690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4656:	b12c      	cbz	r4, d4664 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4658:	4631      	mov	r1, r6
   d465a:	4620      	mov	r0, r4
   d465c:	f006 fa1c 	bl	daa98 <_ZN6StringC1EOS_>
   d4660:	7c33      	ldrb	r3, [r6, #16]
   d4662:	7423      	strb	r3, [r4, #16]
   d4664:	4630      	mov	r0, r6
   d4666:	f006 f99b 	bl	da9a0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d466a:	3e14      	subs	r6, #20
   d466c:	3c14      	subs	r4, #20
   d466e:	e7f0      	b.n	d4652 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4670:	d00e      	beq.n	d4690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4672:	42b5      	cmp	r5, r6
   d4674:	d00c      	beq.n	d4690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4676:	b12c      	cbz	r4, d4684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4678:	4629      	mov	r1, r5
   d467a:	4620      	mov	r0, r4
   d467c:	f006 fa0c 	bl	daa98 <_ZN6StringC1EOS_>
   d4680:	7c2b      	ldrb	r3, [r5, #16]
   d4682:	7423      	strb	r3, [r4, #16]
   d4684:	4628      	mov	r0, r5
   d4686:	f006 f98b 	bl	da9a0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d468a:	3514      	adds	r5, #20
   d468c:	3414      	adds	r4, #20
   d468e:	e7f0      	b.n	d4672 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4696:	2300      	movs	r3, #0
   d4698:	e9c0 3300 	strd	r3, r3, [r0]
   d469c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d469e:	684f      	ldr	r7, [r1, #4]
   d46a0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46a2:	4604      	mov	r4, r0
   d46a4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d46a6:	dd23      	ble.n	d46f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d46a8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d46ac:	fb08 f007 	mul.w	r0, r8, r7
   d46b0:	f004 f900 	bl	d88b4 <malloc>
            if (!d) {
   d46b4:	4605      	mov	r5, r0
   d46b6:	b1d8      	cbz	r0, d46f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d46b8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d46bc:	fb08 1202 	mla	r2, r8, r2, r1
   d46c0:	f7ff ffb9 	bl	d4636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d46c4:	6820      	ldr	r0, [r4, #0]
   d46c6:	f004 f8fd 	bl	d88c4 <free>
        data_ = d;
   d46ca:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d46cc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d46ce:	e9d6 7300 	ldrd	r7, r3, [r6]
   d46d2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d46d6:	45b8      	cmp	r8, r7
   d46d8:	d008      	beq.n	d46ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d46da:	4639      	mov	r1, r7
   d46dc:	4628      	mov	r0, r5
   d46de:	f006 f9f5 	bl	daacc <_ZN6StringC1ERKS_>
   d46e2:	7c3b      	ldrb	r3, [r7, #16]
   d46e4:	742b      	strb	r3, [r5, #16]
   d46e6:	3714      	adds	r7, #20
   d46e8:	3514      	adds	r5, #20
   d46ea:	e7f4      	b.n	d46d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d46ec:	6873      	ldr	r3, [r6, #4]
   d46ee:	6063      	str	r3, [r4, #4]
}
   d46f0:	4620      	mov	r0, r4
   d46f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d46f8 <_GLOBAL__sub_I_sysStatus>:
			return (long)(localTimeConvert_NEXT.time - localTimeConvert_NOW.time);
		}
		else return 0;
    }
	else return 0;
   d46f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   d46fc:	4b48      	ldr	r3, [pc, #288]	; (d4820 <_GLOBAL__sub_I_sysStatus+0x128>)
    SleepResult() {}
   d46fe:	4a49      	ldr	r2, [pc, #292]	; (d4824 <_GLOBAL__sub_I_sysStatus+0x12c>)
        filter_(level, filters) {
   d4700:	4d49      	ldr	r5, [pc, #292]	; (d4828 <_GLOBAL__sub_I_sysStatus+0x130>)
   d4702:	2601      	movs	r6, #1
   d4704:	701e      	strb	r6, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d4706:	4b49      	ldr	r3, [pc, #292]	; (d482c <_GLOBAL__sub_I_sysStatus+0x134>)
   d4708:	2400      	movs	r4, #0
   d470a:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   d470c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d470e:	601c      	str	r4, [r3, #0]
   d4710:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d4712:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d4714:	2003      	movs	r0, #3
   d4716:	f003 ffdf 	bl	d86d8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d471a:	4621      	mov	r1, r4
   d471c:	4630      	mov	r0, r6
   d471e:	f003 fff3 	bl	d8708 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4722:	4631      	mov	r1, r6
   d4724:	2004      	movs	r0, #4
   d4726:	f003 fdd5 	bl	d82d4 <HAL_Feature_Set>
        capacity_(0) {
   d472a:	e9cd 4400 	strd	r4, r4, [sp]
   d472e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4730:	f006 fce2 	bl	db0f8 <_Z16_fetch_usbserialv>
   d4734:	4669      	mov	r1, sp
   d4736:	4607      	mov	r7, r0
   d4738:	a803      	add	r0, sp, #12
   d473a:	f7ff ffaa 	bl	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d473e:	46a8      	mov	r8, r5
        stream_(&stream) {
   d4740:	a903      	add	r1, sp, #12
   d4742:	a806      	add	r0, sp, #24
   d4744:	f7ff ffa5 	bl	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4748:	4b39      	ldr	r3, [pc, #228]	; (d4830 <_GLOBAL__sub_I_sysStatus+0x138>)
   d474a:	f848 3b04 	str.w	r3, [r8], #4
   d474e:	a906      	add	r1, sp, #24
   d4750:	a809      	add	r0, sp, #36	; 0x24
   d4752:	f7ff ff9e 	bl	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4756:	aa09      	add	r2, sp, #36	; 0x24
   d4758:	211e      	movs	r1, #30
   d475a:	4640      	mov	r0, r8
   d475c:	f005 fbef 	bl	d9f3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4760:	a809      	add	r0, sp, #36	; 0x24
   d4762:	f7ff ff55 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4766:	a806      	add	r0, sp, #24
   d4768:	f7ff ff52 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d476c:	4b31      	ldr	r3, [pc, #196]	; (d4834 <_GLOBAL__sub_I_sysStatus+0x13c>)
   d476e:	602b      	str	r3, [r5, #0]
   d4770:	622f      	str	r7, [r5, #32]
   d4772:	a803      	add	r0, sp, #12
   d4774:	f7ff ff4c 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4778:	4b2f      	ldr	r3, [pc, #188]	; (d4838 <_GLOBAL__sub_I_sysStatus+0x140>)
   d477a:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d477c:	f006 fcbc 	bl	db0f8 <_Z16_fetch_usbserialv>
   d4780:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4784:	f006 fca8 	bl	db0d8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4788:	f005 f8ba 	bl	d9900 <_ZN5spark10LogManager8instanceEv>
   d478c:	4629      	mov	r1, r5
   d478e:	f005 fb68 	bl	d9e62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);		// For monitoring / debugging, you have some options on the next few lines
   d4792:	4668      	mov	r0, sp
   d4794:	f7ff ff3c 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   d4798:	4b28      	ldr	r3, [pc, #160]	; (d483c <_GLOBAL__sub_I_sysStatus+0x144>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d479a:	4d29      	ldr	r5, [pc, #164]	; (d4840 <_GLOBAL__sub_I_sysStatus+0x148>)
              valid_(true) {
   d479c:	f8a3 4009 	strh.w	r4, [r3, #9]
        : config_(config) {
   d47a0:	461a      	mov	r2, r3
   d47a2:	1d19      	adds	r1, r3, #4
   d47a4:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d47a8:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d47aa:	4a26      	ldr	r2, [pc, #152]	; (d4844 <_GLOBAL__sub_I_sysStatus+0x14c>)
              valid_(true) {
   d47ac:	751e      	strb	r6, [r3, #20]
        config_.wakeup_sources = nullptr;
   d47ae:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d47b2:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d47b4:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d47b6:	f006 fdf5 	bl	db3a4 <_Z19__fetch_global_Wirev>
   d47ba:	4623      	mov	r3, r4
   d47bc:	4601      	mov	r1, r0
   d47be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d47c2:	4628      	mov	r0, r5
   d47c4:	f002 f9ce 	bl	d6b64 <_ZN6MB85RCC1ER7TwoWireji>
   d47c8:	4b1f      	ldr	r3, [pc, #124]	; (d4848 <_GLOBAL__sub_I_sysStatus+0x150>)
   d47ca:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d47cc:	f006 fdea 	bl	db3a4 <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d47d0:	4d1e      	ldr	r5, [pc, #120]	; (d484c <_GLOBAL__sub_I_sysStatus+0x154>)
   d47d2:	4601      	mov	r1, r0
   d47d4:	2269      	movs	r2, #105	; 0x69
   d47d6:	481e      	ldr	r0, [pc, #120]	; (d4850 <_GLOBAL__sub_I_sysStatus+0x158>)
   d47d8:	f000 fadc 	bl	d4d94 <_ZN6AB1805C1ER7TwoWireh>
   d47dc:	491d      	ldr	r1, [pc, #116]	; (d4854 <_GLOBAL__sub_I_sysStatus+0x15c>)
   d47de:	4628      	mov	r0, r5
   d47e0:	f006 f929 	bl	daa36 <_ZN6StringC1EPKc>
   d47e4:	2200      	movs	r2, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d47e6:	481c      	ldr	r0, [pc, #112]	; (d4858 <_GLOBAL__sub_I_sysStatus+0x160>)
    LocalTimeSchedule() {
   d47e8:	612c      	str	r4, [r5, #16]
   d47ea:	2300      	movs	r3, #0
   d47ec:	e9c5 2306 	strd	r2, r3, [r5, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d47f0:	e9c5 4408 	strd	r4, r4, [r5, #32]
   d47f4:	62ac      	str	r4, [r5, #40]	; 0x28
class LocalTimeConvert {
   d47f6:	2306      	movs	r3, #6
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d47f8:	4c18      	ldr	r4, [pc, #96]	; (d485c <_GLOBAL__sub_I_sysStatus+0x164>)
   d47fa:	f840 3b04 	str.w	r3, [r0], #4
   d47fe:	f001 f9e9 	bl	d5bd4 <_ZN22LocalTimePosixTimezoneC1Ev>
   d4802:	4b17      	ldr	r3, [pc, #92]	; (d4860 <_GLOBAL__sub_I_sysStatus+0x168>)
   d4804:	2202      	movs	r2, #2
   d4806:	210e      	movs	r1, #14
   d4808:	4620      	mov	r0, r4
   d480a:	f003 fa9d 	bl	d7d48 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, NODE2_ADDRESS);
   d480e:	220a      	movs	r2, #10
   d4810:	4621      	mov	r1, r4
   d4812:	4814      	ldr	r0, [pc, #80]	; (d4864 <_GLOBAL__sub_I_sysStatus+0x16c>)
   d4814:	f002 fd8e 	bl	d7334 <_ZN6RHMeshC1ER15RHGenericDriverh>
   d4818:	b00c      	add	sp, #48	; 0x30
   d481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d481e:	bf00      	nop
   d4820:	2003ddb8 	.word	0x2003ddb8
   d4824:	ffff0000 	.word	0xffff0000
   d4828:	2003e150 	.word	0x2003e150
   d482c:	2003dda8 	.word	0x2003dda8
   d4830:	000dc358 	.word	0x000dc358
   d4834:	000dca6c 	.word	0x000dca6c
   d4838:	000dc370 	.word	0x000dc370
   d483c:	2003def8 	.word	0x2003def8
   d4840:	2003e044 	.word	0x2003e044
   d4844:	00030010 	.word	0x00030010
   d4848:	000dc388 	.word	0x000dc388
   d484c:	2003e2b0 	.word	0x2003e2b0
   d4850:	2003dddc 	.word	0x2003dddc
   d4854:	000dca30 	.word	0x000dca30
   d4858:	2003e060 	.word	0x2003e060
   d485c:	2003df14 	.word	0x2003df14
   d4860:	2003e324 	.word	0x2003e324
   d4864:	2003e174 	.word	0x2003e174

000d4868 <setup>:
{
   d4868:	b530      	push	{r4, r5, lr}
	pinMode(blueLED,OUTPUT);						// Blue led signals sends
   d486a:	2101      	movs	r1, #1
{
   d486c:	b0a1      	sub	sp, #132	; 0x84
	pinMode(blueLED,OUTPUT);						// Blue led signals sends
   d486e:	2007      	movs	r0, #7
   d4870:	f006 fd42 	bl	db2f8 <pinMode>
	pinMode(intPin, INPUT_PULLDOWN);				// Initialize sensor interrupt pin
   d4874:	2103      	movs	r1, #3
   d4876:	2013      	movs	r0, #19
   d4878:	f006 fd3e 	bl	db2f8 <pinMode>
        int reason = RESET_REASON_NONE;
   d487c:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d487e:	4611      	mov	r1, r2
   d4880:	a80a      	add	r0, sp, #40	; 0x28
        int reason = RESET_REASON_NONE;
   d4882:	920a      	str	r2, [sp, #40]	; 0x28
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4884:	f003 fd2e 	bl	d82e4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d488a:	2b14      	cmp	r3, #20
   d488c:	f04f 0200 	mov.w	r2, #0
   d4890:	f040 80c9 	bne.w	d4a26 <setup+0x1be>
    	resetCount++;
   d4894:	4a70      	ldr	r2, [pc, #448]	; (d4a58 <setup+0x1f0>)
   d4896:	7813      	ldrb	r3, [r2, #0]
   d4898:	3301      	adds	r3, #1
   d489a:	b2db      	uxtb	r3, r3
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d489c:	2b06      	cmp	r3, #6
    	resetCount++;
   d489e:	7013      	strb	r3, [r2, #0]
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d48a0:	f200 80cb 	bhi.w	d4a3a <setup+0x1d2>
	if (!manager.init()) Log.info("init failed"); // Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d48a4:	486d      	ldr	r0, [pc, #436]	; (d4a5c <setup+0x1f4>)
   d48a6:	f002 ffb7 	bl	d7818 <_ZN8RHRouter4initEv>
   d48aa:	b918      	cbnz	r0, d48b4 <setup+0x4c>
   d48ac:	496c      	ldr	r1, [pc, #432]	; (d4a60 <setup+0x1f8>)
   d48ae:	486d      	ldr	r0, [pc, #436]	; (d4a64 <setup+0x1fc>)
   d48b0:	f7ff fc88 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					// Setup ISM frequency - typically 868.0 or 915.0 in the Americas, or 433.0 in the EU
   d48b4:	ed9f 0a6c 	vldr	s0, [pc, #432]	; d4a68 <setup+0x200>
   d48b8:	486c      	ldr	r0, [pc, #432]	; (d4a6c <setup+0x204>)
   d48ba:	4d6d      	ldr	r5, [pc, #436]	; (d4a70 <setup+0x208>)
   d48bc:	f003 fa84 	bl	d7dc8 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                     // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default):
   d48c0:	2200      	movs	r2, #0
   d48c2:	486a      	ldr	r0, [pc, #424]	; (d4a6c <setup+0x204>)
   d48c4:	2117      	movs	r1, #23
   d48c6:	f003 fbf9 	bl	d80bc <_ZN7RH_RF9510setTxPowerEab>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d48ca:	486a      	ldr	r0, [pc, #424]	; (d4a74 <setup+0x20c>)
   d48cc:	2308      	movs	r3, #8
  	ab1805.withFOUT(D8).setup();                    // The carrier board has D8 connected to FOUT for wake interrupts
   d48ce:	2101      	movs	r1, #1
   d48d0:	8143      	strh	r3, [r0, #10]
   d48d2:	f000 fd6b 	bl	d53ac <_ZN6AB18055setupEb>
  	ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);    // Enable watchdog
   d48d6:	217c      	movs	r1, #124	; 0x7c
   d48d8:	4866      	ldr	r0, [pc, #408]	; (d4a74 <setup+0x20c>)
   d48da:	f000 fb4b 	bl	d4f74 <_ZN6AB18056setWDTEi>
	fram.begin();                                                        // Initialize the FRAM module
   d48de:	4866      	ldr	r0, [pc, #408]	; (d4a78 <setup+0x210>)
   d48e0:	f002 f94a 	bl	d6b78 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d48e4:	4864      	ldr	r0, [pc, #400]	; (d4a78 <setup+0x210>)
   d48e6:	2301      	movs	r3, #1
   d48e8:	f10d 0217 	add.w	r2, sp, #23
   d48ec:	2100      	movs	r1, #0
   d48ee:	f002 f985 	bl	d6bfc <_ZN6MB85RC8readDataEjPhj>
	if (tempVersion != FRAMversionNumber) {                              // Check to see if the memory map in the sketch matches the data on the chip
   d48f2:	f89d 4017 	ldrb.w	r4, [sp, #23]
   d48f6:	2c01      	cmp	r4, #1
   d48f8:	f000 80a3 	beq.w	d4a42 <setup+0x1da>
		Log.info("Erasing FRAM");
   d48fc:	495f      	ldr	r1, [pc, #380]	; (d4a7c <setup+0x214>)
   d48fe:	4859      	ldr	r0, [pc, #356]	; (d4a64 <setup+0x1fc>)
   d4900:	f7ff fc60 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
		fram.erase();                                                      // Reset the FRAM to correct the issue
   d4904:	485c      	ldr	r0, [pc, #368]	; (d4a78 <setup+0x210>)
   d4906:	f002 f941 	bl	d6b8c <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d490a:	4a5d      	ldr	r2, [pc, #372]	; (d4a80 <setup+0x218>)
   d490c:	485a      	ldr	r0, [pc, #360]	; (d4a78 <setup+0x210>)
   d490e:	2304      	movs	r3, #4
   d4910:	2100      	movs	r1, #0
   d4912:	f002 f9be 	bl	d6c92 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4916:	2301      	movs	r3, #1
   d4918:	4857      	ldr	r0, [pc, #348]	; (d4a78 <setup+0x210>)
   d491a:	f10d 0217 	add.w	r2, sp, #23
   d491e:	2100      	movs	r1, #0
   d4920:	f002 f96c 	bl	d6bfc <_ZN6MB85RC8readDataEjPhj>
		if (tempVersion != FRAMversionNumber) {
   d4924:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d4928:	2b01      	cmp	r3, #1
   d492a:	d001      	beq.n	d4930 <setup+0xc8>
		state = ERROR_STATE;                                             // Device will not work without FRAM will need to reset
   d492c:	2301      	movs	r3, #1
   d492e:	702b      	strb	r3, [r5, #0]
	Log.info("Startup complete - battery %4.2f%%, clock is %s", System.batteryCharge(), (Time.isValid()) ? "valid" : "not valid");
   d4930:	f7ff fd42 	bl	d43b8 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d4934:	ee10 0a10 	vmov	r0, s0
   d4938:	f006 fecc 	bl	db6d4 <__aeabi_f2d>
   d493c:	460b      	mov	r3, r1
   d493e:	4602      	mov	r2, r0
   d4940:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4944:	f006 faba 	bl	daebc <_ZN9TimeClass7isValidEv>
   d4948:	4c4e      	ldr	r4, [pc, #312]	; (d4a84 <setup+0x21c>)
   d494a:	494f      	ldr	r1, [pc, #316]	; (d4a88 <setup+0x220>)
   d494c:	2800      	cmp	r0, #0
   d494e:	bf14      	ite	ne
   d4950:	4608      	movne	r0, r1
   d4952:	4620      	moveq	r0, r4
   d4954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d4958:	494c      	ldr	r1, [pc, #304]	; (d4a8c <setup+0x224>)
   d495a:	9000      	str	r0, [sp, #0]
   d495c:	4841      	ldr	r0, [pc, #260]	; (d4a64 <setup+0x1fc>)
   d495e:	f7ff fc31 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d4962:	f001 fba5 	bl	d60b0 <_ZN9LocalTime8instanceEv>
   d4966:	494a      	ldr	r1, [pc, #296]	; (d4a90 <setup+0x228>)
   d4968:	4604      	mov	r4, r0
   d496a:	a80a      	add	r0, sp, #40	; 0x28
   d496c:	f001 f9e4 	bl	d5d38 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d4970:	a90b      	add	r1, sp, #44	; 0x2c
   d4972:	f104 0008 	add.w	r0, r4, #8
   d4976:	f006 f89a 	bl	daaae <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d497a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d497c:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d497e:	a911      	add	r1, sp, #68	; 0x44
   d4980:	f104 0020 	add.w	r0, r4, #32
   d4984:	f006 f893 	bl	daaae <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d4988:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d498a:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d498c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d498e:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d4990:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d4992:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d4994:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d4996:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d4998:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d499a:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d499c:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   d49a0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d49a4:	a80a      	add	r0, sp, #40	; 0x28
   d49a6:	f000 fe51 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d49aa:	f006 faa4 	bl	daef6 <_ZN9TimeClass3nowEv>
   d49ae:	4939      	ldr	r1, [pc, #228]	; (d4a94 <setup+0x22c>)
   d49b0:	4602      	mov	r2, r0
   d49b2:	17c3      	asrs	r3, r0, #31
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   d49b4:	4608      	mov	r0, r1
   d49b6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
   d49ba:	f001 fbf1 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every n minutes from 6am to 10pm
   d49be:	4b36      	ldr	r3, [pc, #216]	; (d4a98 <setup+0x230>)
   d49c0:	4936      	ldr	r1, [pc, #216]	; (d4a9c <setup+0x234>)
   d49c2:	8bdc      	ldrh	r4, [r3, #30]
   d49c4:	a806      	add	r0, sp, #24
   d49c6:	f000 ffdb 	bl	d5980 <_ZN12LocalTimeHMSC1EPKc>
   d49ca:	4935      	ldr	r1, [pc, #212]	; (d4aa0 <setup+0x238>)
   d49cc:	a808      	add	r0, sp, #32
   d49ce:	f000 ffd7 	bl	d5980 <_ZN12LocalTimeHMSC1EPKc>
   d49d2:	aa08      	add	r2, sp, #32
   d49d4:	a906      	add	r1, sp, #24
   d49d6:	a80a      	add	r0, sp, #40	; 0x28
   d49d8:	f7ff fc0c 	bl	d41f4 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d49dc:	4621      	mov	r1, r4
   d49de:	aa0a      	add	r2, sp, #40	; 0x28
   d49e0:	4830      	ldr	r0, [pc, #192]	; (d4aa4 <setup+0x23c>)
   d49e2:	f002 f898 	bl	d6b16 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d49e6:	a80a      	add	r0, sp, #40	; 0x28
   d49e8:	f7ff fc18 	bl	d421c <_ZN14LocalTimeRangeD1Ev>
   d49ec:	a808      	add	r0, sp, #32
   d49ee:	f000 fe15 	bl	d561c <_ZN12LocalTimeHMSD1Ev>
	attachInterrupt(intPin, sensorISR, RISING);     // Pressure Sensor interrupt from low to high
   d49f2:	2400      	movs	r4, #0
	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every n minutes from 6am to 10pm
   d49f4:	a806      	add	r0, sp, #24
   d49f6:	f000 fe11 	bl	d561c <_ZN12LocalTimeHMSD1Ev>
	attachInterrupt(intPin, sensorISR, RISING);     // Pressure Sensor interrupt from low to high
   d49fa:	492b      	ldr	r1, [pc, #172]	; (d4aa8 <setup+0x240>)
   d49fc:	9400      	str	r4, [sp, #0]
   d49fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4a02:	2201      	movs	r2, #1
   d4a04:	2013      	movs	r0, #19
   d4a06:	f004 fbb9 	bl	d917c <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(userSwitch,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d4a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4a0e:	4927      	ldr	r1, [pc, #156]	; (d4aac <setup+0x244>)
   d4a10:	9400      	str	r4, [sp, #0]
   d4a12:	4622      	mov	r2, r4
   d4a14:	2004      	movs	r0, #4
   d4a16:	f004 fbb1 	bl	d917c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;	// We got through setup without error
   d4a1a:	782b      	ldrb	r3, [r5, #0]
   d4a1c:	b90b      	cbnz	r3, d4a22 <setup+0x1ba>
   d4a1e:	2302      	movs	r3, #2
   d4a20:	702b      	strb	r3, [r5, #0]
}
   d4a22:	b021      	add	sp, #132	; 0x84
   d4a24:	bd30      	pop	{r4, r5, pc}
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4a26:	4611      	mov	r1, r2
   d4a28:	a80a      	add	r0, sp, #40	; 0x28
        int reason = RESET_REASON_NONE;
   d4a2a:	920a      	str	r2, [sp, #40]	; 0x28
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4a2c:	f003 fc5a 	bl	d82e4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d4a32:	2b8c      	cmp	r3, #140	; 0x8c
   d4a34:	f47f af36 	bne.w	d48a4 <setup+0x3c>
   d4a38:	e72c      	b.n	d4894 <setup+0x2c>
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d4a3a:	4b1d      	ldr	r3, [pc, #116]	; (d4ab0 <setup+0x248>)
   d4a3c:	220d      	movs	r2, #13
   d4a3e:	701a      	strb	r2, [r3, #0]
   d4a40:	e730      	b.n	d48a4 <setup+0x3c>
		Log.info("Loading the sysStatus array");
   d4a42:	491c      	ldr	r1, [pc, #112]	; (d4ab4 <setup+0x24c>)
   d4a44:	4807      	ldr	r0, [pc, #28]	; (d4a64 <setup+0x1fc>)
   d4a46:	f7ff fbbd 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d4a4a:	4a13      	ldr	r2, [pc, #76]	; (d4a98 <setup+0x230>)
   d4a4c:	480a      	ldr	r0, [pc, #40]	; (d4a78 <setup+0x210>)
   d4a4e:	2324      	movs	r3, #36	; 0x24
   d4a50:	4621      	mov	r1, r4
   d4a52:	f002 f8d3 	bl	d6bfc <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4a56:	e76b      	b.n	d4930 <setup+0xc8>
   d4a58:	2003f400 	.word	0x2003f400
   d4a5c:	2003e174 	.word	0x2003e174
   d4a60:	000dc1ff 	.word	0x000dc1ff
   d4a64:	2003e58c 	.word	0x2003e58c
   d4a68:	4464c000 	.word	0x4464c000
   d4a6c:	2003df14 	.word	0x2003df14
   d4a70:	2003e2e1 	.word	0x2003e2e1
   d4a74:	2003dddc 	.word	0x2003dddc
   d4a78:	2003e044 	.word	0x2003e044
   d4a7c:	000dc20b 	.word	0x000dc20b
   d4a80:	000dc39c 	.word	0x000dc39c
   d4a84:	000dc1f5 	.word	0x000dc1f5
   d4a88:	000dc1f9 	.word	0x000dc1f9
   d4a8c:	000dc234 	.word	0x000dc234
   d4a90:	000dc264 	.word	0x000dc264
   d4a94:	2003e060 	.word	0x2003e060
   d4a98:	2003e2e4 	.word	0x2003e2e4
   d4a9c:	000dc192 	.word	0x000dc192
   d4aa0:	000dc19b 	.word	0x000dc19b
   d4aa4:	2003e2b0 	.word	0x2003e2b0
   d4aa8:	000d40d5 	.word	0x000d40d5
   d4aac:	000d40e1 	.word	0x000d40e1
   d4ab0:	2003ddfc 	.word	0x2003ddfc
   d4ab4:	000dc218 	.word	0x000dc218

000d4ab8 <_Z21secondsUntilNextEventv.part.0>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4ab8:	b530      	push	{r4, r5, lr}
   d4aba:	b0c1      	sub	sp, #260	; 0x104
   d4abc:	f006 fa1b 	bl	daef6 <_ZN9TimeClass3nowEv>
   d4ac0:	4c20      	ldr	r4, [pc, #128]	; (d4b44 <_Z21secondsUntilNextEventv.part.0+0x8c>)
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d4ac2:	4d21      	ldr	r5, [pc, #132]	; (d4b48 <_Z21secondsUntilNextEventv.part.0+0x90>)
   d4ac4:	17c1      	asrs	r1, r0, #31
   d4ac6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
        localTimeConvert_NOW.withCurrentTime().convert();
   d4aca:	4620      	mov	r0, r4
   d4acc:	f001 fb68 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d4ad0:	682a      	ldr	r2, [r5, #0]
   d4ad2:	4621      	mov	r1, r4
   d4ad4:	a804      	add	r0, sp, #16
   d4ad6:	f001 fa45 	bl	d5f64 <_ZN16LocalTimeConvert6formatEPKc>
   d4ada:	9a04      	ldr	r2, [sp, #16]
   d4adc:	491b      	ldr	r1, [pc, #108]	; (d4b4c <_Z21secondsUntilNextEventv.part.0+0x94>)
   d4ade:	481c      	ldr	r0, [pc, #112]	; (d4b50 <_Z21secondsUntilNextEventv.part.0+0x98>)
   d4ae0:	f7ff fb70 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d4ae4:	a804      	add	r0, sp, #16
   d4ae6:	f005 ff5b 	bl	da9a0 <_ZN6StringD1Ev>
class LocalTimeConvert {
   d4aea:	2306      	movs	r3, #6
   d4aec:	a805      	add	r0, sp, #20
   d4aee:	9304      	str	r3, [sp, #16]
   d4af0:	f001 f870 	bl	d5bd4 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d4af4:	f006 f9ff 	bl	daef6 <_ZN9TimeClass3nowEv>
   d4af8:	17c1      	asrs	r1, r0, #31
   d4afa:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
        localTimeConvert_NEXT.withCurrentTime().convert();
   d4afe:	a804      	add	r0, sp, #16
   d4b00:	f001 fb4e 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
		if (publishSchedule.getNextScheduledTime(localTimeConvert_NEXT)) {
   d4b04:	4813      	ldr	r0, [pc, #76]	; (d4b54 <_Z21secondsUntilNextEventv.part.0+0x9c>)
   d4b06:	a904      	add	r1, sp, #16
   d4b08:	f001 feb0 	bl	d686c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d4b0c:	b1c0      	cbz	r0, d4b40 <_Z21secondsUntilNextEventv.part.0+0x88>
        	Log.info("time of next event is: %s which is %lu seconds away", localTimeConvert_NEXT.format(TIME_FORMAT_DEFAULT).c_str(), (long)(localTimeConvert_NEXT.time - localTimeConvert_NOW.time));
   d4b0e:	682a      	ldr	r2, [r5, #0]
   d4b10:	a904      	add	r1, sp, #16
   d4b12:	4668      	mov	r0, sp
   d4b14:	f001 fa26 	bl	d5f64 <_ZN16LocalTimeConvert6formatEPKc>
   d4b18:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d4b1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d4b1c:	490e      	ldr	r1, [pc, #56]	; (d4b58 <_Z21secondsUntilNextEventv.part.0+0xa0>)
   d4b1e:	480c      	ldr	r0, [pc, #48]	; (d4b50 <_Z21secondsUntilNextEventv.part.0+0x98>)
   d4b20:	1ad3      	subs	r3, r2, r3
   d4b22:	9a00      	ldr	r2, [sp, #0]
   d4b24:	f7ff fb4e 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d4b28:	4668      	mov	r0, sp
   d4b2a:	f005 ff39 	bl	da9a0 <_ZN6StringD1Ev>
			return (long)(localTimeConvert_NEXT.time - localTimeConvert_NOW.time);
   d4b2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d4b30:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   d4b32:	1a24      	subs	r4, r4, r0
class LocalTimeConvert {
   d4b34:	a805      	add	r0, sp, #20
   d4b36:	f000 fd89 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	b041      	add	sp, #260	; 0x104
   d4b3e:	bd30      	pop	{r4, r5, pc}
		else return 0;
   d4b40:	4604      	mov	r4, r0
   d4b42:	e7f7      	b.n	d4b34 <_Z21secondsUntilNextEventv.part.0+0x7c>
   d4b44:	2003e060 	.word	0x2003e060
   d4b48:	2003dd3c 	.word	0x2003dd3c
   d4b4c:	000dc28b 	.word	0x000dc28b
   d4b50:	2003e58c 	.word	0x2003e58c
   d4b54:	2003e2b0 	.word	0x2003e2b0
   d4b58:	000dc29a 	.word	0x000dc29a

000d4b5c <_Z21secondsUntilNextEventv>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d4b5c:	b508      	push	{r3, lr}
   if (Time.isValid()) {
   d4b5e:	f006 f9ad 	bl	daebc <_ZN9TimeClass7isValidEv>
   d4b62:	b118      	cbz	r0, d4b6c <_Z21secondsUntilNextEventv+0x10>
   d4b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4b68:	f7ff bfa6 	b.w	d4ab8 <_Z21secondsUntilNextEventv.part.0>
   d4b6c:	bd08      	pop	{r3, pc}
	...

000d4b70 <loop>:
{
   d4b70:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (state) {
   d4b72:	4c5c      	ldr	r4, [pc, #368]	; (d4ce4 <loop+0x174>)
   d4b74:	7823      	ldrb	r3, [r4, #0]
   d4b76:	2b03      	cmp	r3, #3
{
   d4b78:	b085      	sub	sp, #20
	switch (state) {
   d4b7a:	d02e      	beq.n	d4bda <loop+0x6a>
   d4b7c:	2b07      	cmp	r3, #7
   d4b7e:	f000 808e 	beq.w	d4c9e <loop+0x12e>
   d4b82:	2b02      	cmp	r3, #2
   d4b84:	d176      	bne.n	d4c74 <loop+0x104>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4b86:	4b58      	ldr	r3, [pc, #352]	; (d4ce8 <loop+0x178>)
   d4b88:	781b      	ldrb	r3, [r3, #0]
   d4b8a:	2b02      	cmp	r3, #2
   d4b8c:	d001      	beq.n	d4b92 <loop+0x22>
   d4b8e:	f7ff fb93 	bl	d42b8 <_Z22publishStateTransitionv>
			if (publishSchedule.isScheduledTime()) {	// Using the sendFrequency set above, we go to the reporing state - this only works if time is valid
   d4b92:	4856      	ldr	r0, [pc, #344]	; (d4cec <loop+0x17c>)
   d4b94:	f001 fea0 	bl	d68d8 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
   d4b98:	b140      	cbz	r0, d4bac <loop+0x3c>
				Log.info("Going to reporting based on schedule");
   d4b9a:	4955      	ldr	r1, [pc, #340]	; (d4cf0 <loop+0x180>)
   d4b9c:	4855      	ldr	r0, [pc, #340]	; (d4cf4 <loop+0x184>)
   d4b9e:	f7ff fb11 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
				sensorDetect = true;
   d4ba2:	4b55      	ldr	r3, [pc, #340]	; (d4cf8 <loop+0x188>)
   d4ba4:	2201      	movs	r2, #1
   d4ba6:	701a      	strb	r2, [r3, #0]
				state = REPORTING_STATE;
   d4ba8:	2307      	movs	r3, #7
   d4baa:	7023      	strb	r3, [r4, #0]
			if (!Time.isValid() && millis() - lastAttempt > 60000) {
   d4bac:	f006 f986 	bl	daebc <_ZN9TimeClass7isValidEv>
   d4bb0:	2800      	cmp	r0, #0
   d4bb2:	d15f      	bne.n	d4c74 <loop+0x104>
   d4bb4:	4d51      	ldr	r5, [pc, #324]	; (d4cfc <loop+0x18c>)
   d4bb6:	f003 fbad 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
   d4bba:	682b      	ldr	r3, [r5, #0]
   d4bbc:	1ac0      	subs	r0, r0, r3
   d4bbe:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4bc2:	4298      	cmp	r0, r3
   d4bc4:	d956      	bls.n	d4c74 <loop+0x104>
				Log.info("Going to reporting on rescue mode");
   d4bc6:	494e      	ldr	r1, [pc, #312]	; (d4d00 <loop+0x190>)
   d4bc8:	484a      	ldr	r0, [pc, #296]	; (d4cf4 <loop+0x184>)
   d4bca:	f7ff fafb 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d4bce:	f003 fba1 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
				state = REPORTING_STATE;
   d4bd2:	2307      	movs	r3, #7
				lastAttempt = millis();
   d4bd4:	6028      	str	r0, [r5, #0]
			else state = IDLE_STATE;
   d4bd6:	7023      	strb	r3, [r4, #0]
   d4bd8:	e04c      	b.n	d4c74 <loop+0x104>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4bda:	4b43      	ldr	r3, [pc, #268]	; (d4ce8 <loop+0x178>)
   d4bdc:	781b      	ldrb	r3, [r3, #0]
   d4bde:	2b03      	cmp	r3, #3
   d4be0:	d001      	beq.n	d4be6 <loop+0x76>
   d4be2:	f7ff fb69 	bl	d42b8 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d4be6:	2100      	movs	r1, #0
   d4be8:	4846      	ldr	r0, [pc, #280]	; (d4d04 <loop+0x194>)
   d4bea:	f000 f9c3 	bl	d4f74 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent() - 10;   	   	       // Need to wake for the next event - the 10 seconds part ensures we are in IDLE when the next event occurs
   d4bee:	f7ff ffb5 	bl	d4b5c <_Z21secondsUntilNextEventv>
   d4bf2:	f1a0 070a 	sub.w	r7, r0, #10
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d4bf6:	463a      	mov	r2, r7
   d4bf8:	4943      	ldr	r1, [pc, #268]	; (d4d08 <loop+0x198>)
   d4bfa:	483e      	ldr	r0, [pc, #248]	; (d4cf4 <loop+0x184>)
   d4bfc:	f7ff fae2 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d4c00:	4b42      	ldr	r3, [pc, #264]	; (d4d0c <loop+0x19c>)
   d4c02:	7d1a      	ldrb	r2, [r3, #20]
   d4c04:	b10a      	cbz	r2, d4c0a <loop+0x9a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4c06:	2202      	movs	r2, #2
   d4c08:	721a      	strb	r2, [r3, #8]
				.gpio(userSwitch,CHANGE)
   d4c0a:	4840      	ldr	r0, [pc, #256]	; (d4d0c <loop+0x19c>)
   d4c0c:	2200      	movs	r2, #0
   d4c0e:	2104      	movs	r1, #4
   d4c10:	f7ff faa4 	bl	d415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4c14:	7d03      	ldrb	r3, [r0, #20]
   d4c16:	4606      	mov	r6, r0
   d4c18:	b1eb      	cbz	r3, d4c56 <loop+0xe6>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4c1a:	6833      	ldr	r3, [r6, #0]
				.duration(wakeInSeconds * 1000L);
   d4c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4c20:	68db      	ldr	r3, [r3, #12]
   d4c22:	4347      	muls	r7, r0
        if (!start) {
   d4c24:	b123      	cbz	r3, d4c30 <loop+0xc0>
            if (start->type == type) {
   d4c26:	889a      	ldrh	r2, [r3, #4]
   d4c28:	2a04      	cmp	r2, #4
   d4c2a:	d058      	beq.n	d4cde <loop+0x16e>
            start = start->next;
   d4c2c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4c2e:	e7f9      	b.n	d4c24 <loop+0xb4>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4c30:	4937      	ldr	r1, [pc, #220]	; (d4d10 <loop+0x1a0>)
   d4c32:	2010      	movs	r0, #16
   d4c34:	f006 fbdc 	bl	db3f0 <_ZnwjRKSt9nothrow_t>
   d4c38:	4605      	mov	r5, r0
   d4c3a:	2800      	cmp	r0, #0
   d4c3c:	d04d      	beq.n	d4cda <loop+0x16a>
   d4c3e:	2210      	movs	r2, #16
   d4c40:	2100      	movs	r1, #0
   d4c42:	f007 f837 	bl	dbcb4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4c46:	4b33      	ldr	r3, [pc, #204]	; (d4d14 <loop+0x1a4>)
   d4c48:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4c4a:	2304      	movs	r3, #4
   d4c4c:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4c4e:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4c50:	e9c5 3702 	strd	r3, r7, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4c54:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d4c56:	492d      	ldr	r1, [pc, #180]	; (d4d0c <loop+0x19c>)
   d4c58:	a801      	add	r0, sp, #4
   d4c5a:	f005 ffb3 	bl	dabc4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4c5e:	4829      	ldr	r0, [pc, #164]	; (d4d04 <loop+0x194>)
   d4c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4c64:	f000 f986 	bl	d4f74 <_ZN6AB18056setWDTEi>
        if (wakeupSource_) {
   d4c68:	9801      	ldr	r0, [sp, #4]
			state = IDLE_STATE;
   d4c6a:	2302      	movs	r3, #2
   d4c6c:	7023      	strb	r3, [r4, #0]
   d4c6e:	b108      	cbz	r0, d4c74 <loop+0x104>
            free(wakeupSource_);
   d4c70:	f003 fe28 	bl	d88c4 <free>
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   d4c74:	4823      	ldr	r0, [pc, #140]	; (d4d04 <loop+0x194>)
   d4c76:	f000 fc79 	bl	d556c <_ZN6AB18054loopEv>
	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d4c7a:	4b1f      	ldr	r3, [pc, #124]	; (d4cf8 <loop+0x188>)
   d4c7c:	781b      	ldrb	r3, [r3, #0]
   d4c7e:	b10b      	cbz	r3, d4c84 <loop+0x114>
   d4c80:	f7ff fae0 	bl	d4244 <_Z11recordCountv>
	if (systemStatusWriteNeeded) {                                       // These flags get set when a value is changed
   d4c84:	4c24      	ldr	r4, [pc, #144]	; (d4d18 <loop+0x1a8>)
   d4c86:	7823      	ldrb	r3, [r4, #0]
   d4c88:	b13b      	cbz	r3, d4c9a <loop+0x12a>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4c8a:	2324      	movs	r3, #36	; 0x24
   d4c8c:	4a23      	ldr	r2, [pc, #140]	; (d4d1c <loop+0x1ac>)
   d4c8e:	4824      	ldr	r0, [pc, #144]	; (d4d20 <loop+0x1b0>)
   d4c90:	2101      	movs	r1, #1
   d4c92:	f001 fffe 	bl	d6c92 <_ZN6MB85RC9writeDataEjPKhj>
    	systemStatusWriteNeeded = false;
   d4c96:	2300      	movs	r3, #0
   d4c98:	7023      	strb	r3, [r4, #0]
}
   d4c9a:	b005      	add	sp, #20
   d4c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int randomDelay = random(10);
   d4c9e:	200a      	movs	r0, #10
   d4ca0:	f005 fda2 	bl	da7e8 <_Z6randomi>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4ca4:	4b10      	ldr	r3, [pc, #64]	; (d4ce8 <loop+0x178>)
   d4ca6:	7822      	ldrb	r2, [r4, #0]
   d4ca8:	781b      	ldrb	r3, [r3, #0]
   d4caa:	429a      	cmp	r2, r3
			int randomDelay = random(10);
   d4cac:	4605      	mov	r5, r0
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4cae:	d001      	beq.n	d4cb4 <loop+0x144>
   d4cb0:	f7ff fb02 	bl	d42b8 <_Z22publishStateTransitionv>
			Log.info("Adding a random delay of %i seconds", randomDelay);
   d4cb4:	491b      	ldr	r1, [pc, #108]	; (d4d24 <loop+0x1b4>)
   d4cb6:	480f      	ldr	r0, [pc, #60]	; (d4cf4 <loop+0x184>)
   d4cb8:	462a      	mov	r2, r5
   d4cba:	f7ff fa83 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
			delay(randomDelay*1000);
   d4cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4cc2:	4368      	muls	r0, r5
   d4cc4:	f003 fe66 	bl	d8994 <delay>
			sendMessage();
   d4cc8:	f7ff fb88 	bl	d43dc <_Z11sendMessagev>
			if (Time.isValid()) state = SLEEPING_STATE;							// We may be in rescue mode
   d4ccc:	f006 f8f6 	bl	daebc <_ZN9TimeClass7isValidEv>
   d4cd0:	b108      	cbz	r0, d4cd6 <loop+0x166>
   d4cd2:	2303      	movs	r3, #3
   d4cd4:	e77f      	b.n	d4bd6 <loop+0x66>
			else state = IDLE_STATE;
   d4cd6:	2302      	movs	r3, #2
   d4cd8:	e77d      	b.n	d4bd6 <loop+0x66>
                valid_ = false;
   d4cda:	7530      	strb	r0, [r6, #20]
                return *this;
   d4cdc:	e7bb      	b.n	d4c56 <loop+0xe6>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4cde:	60df      	str	r7, [r3, #12]
                return *this;
   d4ce0:	e7b9      	b.n	d4c56 <loop+0xe6>
   d4ce2:	bf00      	nop
   d4ce4:	2003e2e1 	.word	0x2003e2e1
   d4ce8:	2003e2ac 	.word	0x2003e2ac
   d4cec:	2003e2b0 	.word	0x2003e2b0
   d4cf0:	000dc2ce 	.word	0x000dc2ce
   d4cf4:	2003e58c 	.word	0x2003e58c
   d4cf8:	2003e2e0 	.word	0x2003e2e0
   d4cfc:	2003ddd8 	.word	0x2003ddd8
   d4d00:	000dc2f3 	.word	0x000dc2f3
   d4d04:	2003dddc 	.word	0x2003dddc
   d4d08:	000dc315 	.word	0x000dc315
   d4d0c:	2003def8 	.word	0x2003def8
   d4d10:	000dcbb4 	.word	0x000dcbb4
   d4d14:	00030010 	.word	0x00030010
   d4d18:	2003e308 	.word	0x2003e308
   d4d1c:	2003e2e4 	.word	0x2003e2e4
   d4d20:	2003e044 	.word	0x2003e044
   d4d24:	000dc32a 	.word	0x000dc32a

000d4d28 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d4d28:	4770      	bx	lr

000d4d2a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d4d2a:	b510      	push	{r4, lr}
}
   d4d2c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d4d2e:	4604      	mov	r4, r0
}
   d4d30:	f006 fb5c 	bl	db3ec <_ZdlPvj>
   d4d34:	4620      	mov	r0, r4
   d4d36:	bd10      	pop	{r4, pc}

000d4d38 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d4d38:	b40e      	push	{r1, r2, r3}
   d4d3a:	b510      	push	{r4, lr}
   d4d3c:	b08d      	sub	sp, #52	; 0x34
   d4d3e:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d4d40:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d4d42:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4d46:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4d48:	2300      	movs	r3, #0
   d4d4a:	2020      	movs	r0, #32
   d4d4c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4d50:	e9cd 4200 	strd	r4, r2, [sp]
   d4d54:	2001      	movs	r0, #1
   d4d56:	aa04      	add	r2, sp, #16
   d4d58:	f003 fc94 	bl	d8684 <log_message_v>
}
   d4d5c:	b00d      	add	sp, #52	; 0x34
   d4d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d62:	b003      	add	sp, #12
   d4d64:	4770      	bx	lr

000d4d66 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d4d66:	b40e      	push	{r1, r2, r3}
   d4d68:	b510      	push	{r4, lr}
   d4d6a:	b08d      	sub	sp, #52	; 0x34
   d4d6c:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d4d6e:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d4d70:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4d74:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4d76:	2300      	movs	r3, #0
   d4d78:	2020      	movs	r0, #32
   d4d7a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4d7e:	e9cd 4200 	strd	r4, r2, [sp]
   d4d82:	2032      	movs	r0, #50	; 0x32
   d4d84:	aa04      	add	r2, sp, #16
   d4d86:	f003 fc7d 	bl	d8684 <log_message_v>
}
   d4d8a:	b00d      	add	sp, #52	; 0x34
   d4d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d90:	b003      	add	sp, #12
   d4d92:	4770      	bx	lr

000d4d94 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4d94:	b510      	push	{r4, lr}
   d4d96:	7202      	strb	r2, [r0, #8]
   d4d98:	22ff      	movs	r2, #255	; 0xff
   d4d9a:	8142      	strh	r2, [r0, #10]
   d4d9c:	2200      	movs	r2, #0
   d4d9e:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d4da2:	6142      	str	r2, [r0, #20]
   d4da4:	7602      	strb	r2, [r0, #24]
   d4da6:	61c2      	str	r2, [r0, #28]
    instance = this;
   d4da8:	4a02      	ldr	r2, [pc, #8]	; (d4db4 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4daa:	4c03      	ldr	r4, [pc, #12]	; (d4db8 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d4dac:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4dae:	e9c0 4100 	strd	r4, r1, [r0]
}
   d4db2:	bd10      	pop	{r4, pc}
   d4db4:	2003e310 	.word	0x2003e310
   d4db8:	000dc58c 	.word	0x000dc58c

000d4dbc <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d4dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4dc0:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d4dc4:	4604      	mov	r4, r0
   d4dc6:	4689      	mov	r9, r1
   d4dc8:	4616      	mov	r6, r2
   d4dca:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d4dcc:	f1b8 0f00 	cmp.w	r8, #0
   d4dd0:	d002      	beq.n	d4dd8 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d4dd2:	6840      	ldr	r0, [r0, #4]
   d4dd4:	f004 f9be 	bl	d9154 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d4dd8:	7a21      	ldrb	r1, [r4, #8]
   d4dda:	6860      	ldr	r0, [r4, #4]
   d4ddc:	f004 f9af 	bl	d913e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d4de0:	6860      	ldr	r0, [r4, #4]
   d4de2:	6803      	ldr	r3, [r0, #0]
   d4de4:	4649      	mov	r1, r9
   d4de6:	689b      	ldr	r3, [r3, #8]
   d4de8:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d4dea:	6860      	ldr	r0, [r4, #4]
   d4dec:	2100      	movs	r1, #0
   d4dee:	f004 f9ad 	bl	d914c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d4df2:	4605      	mov	r5, r0
   d4df4:	bb00      	cbnz	r0, d4e38 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d4df6:	2301      	movs	r3, #1
   d4df8:	7a21      	ldrb	r1, [r4, #8]
   d4dfa:	6860      	ldr	r0, [r4, #4]
   d4dfc:	463a      	mov	r2, r7
   d4dfe:	f004 f98c 	bl	d911a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d4e02:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d4e04:	4603      	mov	r3, r0
        if (count == num) {
   d4e06:	d109      	bne.n	d4e1c <_ZN6AB180513readRegistersEhPhjb+0x60>
   d4e08:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d4e0a:	42be      	cmp	r6, r7
   d4e0c:	d01c      	beq.n	d4e48 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d4e0e:	6860      	ldr	r0, [r4, #4]
   d4e10:	6803      	ldr	r3, [r0, #0]
   d4e12:	695b      	ldr	r3, [r3, #20]
   d4e14:	4798      	blx	r3
   d4e16:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d4e1a:	e7f6      	b.n	d4e0a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d4e1c:	490b      	ldr	r1, [pc, #44]	; (d4e4c <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d4e1e:	480c      	ldr	r0, [pc, #48]	; (d4e50 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d4e20:	464a      	mov	r2, r9
   d4e22:	f7ff ffa0 	bl	d4d66 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d4e26:	f1b8 0f00 	cmp.w	r8, #0
   d4e2a:	d002      	beq.n	d4e32 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d4e2c:	6860      	ldr	r0, [r4, #4]
   d4e2e:	f004 f99a 	bl	d9166 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d4e32:	4628      	mov	r0, r5
   d4e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d4e38:	4603      	mov	r3, r0
   d4e3a:	4906      	ldr	r1, [pc, #24]	; (d4e54 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d4e3c:	4804      	ldr	r0, [pc, #16]	; (d4e50 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d4e3e:	464a      	mov	r2, r9
   d4e40:	f7ff ff91 	bl	d4d66 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d4e44:	2500      	movs	r5, #0
   d4e46:	e7ee      	b.n	d4e26 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d4e48:	2501      	movs	r5, #1
   d4e4a:	e7ec      	b.n	d4e26 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d4e4c:	000dc3a0 	.word	0x000dc3a0
   d4e50:	2003e30c 	.word	0x2003e30c
   d4e54:	000dc3c5 	.word	0x000dc3c5

000d4e58 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d4e58:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d4e5a:	9300      	str	r3, [sp, #0]
   d4e5c:	2301      	movs	r3, #1
   d4e5e:	f7ff ffad 	bl	d4dbc <_ZN6AB180513readRegistersEhPhjb>
}
   d4e62:	b003      	add	sp, #12
   d4e64:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e68 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d4e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d4e6a:	8943      	ldrh	r3, [r0, #10]
   d4e6c:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d4e6e:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d4e70:	d010      	beq.n	d4e94 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d4e72:	4e19      	ldr	r6, [pc, #100]	; (d4ed8 <_ZN6AB180510detectChipEv+0x70>)
   d4e74:	4d19      	ldr	r5, [pc, #100]	; (d4edc <_ZN6AB180510detectChipEv+0x74>)
   d4e76:	f003 fa4d 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d4e7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4e7e:	d209      	bcs.n	d4e94 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d4e80:	8960      	ldrh	r0, [r4, #10]
   d4e82:	f006 fa63 	bl	db34c <digitalRead>
   d4e86:	2801      	cmp	r0, #1
   d4e88:	d004      	beq.n	d4e94 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d4e8a:	4631      	mov	r1, r6
   d4e8c:	4628      	mov	r0, r5
   d4e8e:	f7ff f999 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d4e92:	e7f0      	b.n	d4e76 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d4e94:	2301      	movs	r3, #1
   d4e96:	f10d 0207 	add.w	r2, sp, #7
   d4e9a:	2128      	movs	r1, #40	; 0x28
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f7ff ffdb 	bl	d4e58 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d4ea2:	b930      	cbnz	r0, d4eb2 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d4ea4:	480d      	ldr	r0, [pc, #52]	; (d4edc <_ZN6AB180510detectChipEv+0x74>)
   d4ea6:	490e      	ldr	r1, [pc, #56]	; (d4ee0 <_ZN6AB180510detectChipEv+0x78>)
   d4ea8:	f7ff f98c 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d4eac:	2000      	movs	r0, #0
}
   d4eae:	b002      	add	sp, #8
   d4eb0:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d4eb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4eb6:	2b18      	cmp	r3, #24
   d4eb8:	d1f4      	bne.n	d4ea4 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d4eba:	2301      	movs	r3, #1
   d4ebc:	f10d 0207 	add.w	r2, sp, #7
   d4ec0:	2129      	movs	r1, #41	; 0x29
   d4ec2:	4620      	mov	r0, r4
   d4ec4:	f7ff ffc8 	bl	d4e58 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d4ec8:	2800      	cmp	r0, #0
   d4eca:	d0eb      	beq.n	d4ea4 <_ZN6AB180510detectChipEv+0x3c>
   d4ecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4ed0:	2b05      	cmp	r3, #5
   d4ed2:	d1e7      	bne.n	d4ea4 <_ZN6AB180510detectChipEv+0x3c>
   d4ed4:	e7eb      	b.n	d4eae <_ZN6AB180510detectChipEv+0x46>
   d4ed6:	bf00      	nop
   d4ed8:	000dc3e9 	.word	0x000dc3e9
   d4edc:	2003e30c 	.word	0x2003e30c
   d4ee0:	000dc3fe 	.word	0x000dc3fe

000d4ee4 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d4ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ee8:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d4eec:	4604      	mov	r4, r0
   d4eee:	460f      	mov	r7, r1
   d4ef0:	4615      	mov	r5, r2
   d4ef2:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d4ef4:	f1b8 0f00 	cmp.w	r8, #0
   d4ef8:	d002      	beq.n	d4f00 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d4efa:	6840      	ldr	r0, [r0, #4]
   d4efc:	f004 f92a 	bl	d9154 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d4f00:	7a21      	ldrb	r1, [r4, #8]
   d4f02:	6860      	ldr	r0, [r4, #4]
   d4f04:	f004 f91b 	bl	d913e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d4f08:	6860      	ldr	r0, [r4, #4]
   d4f0a:	6803      	ldr	r3, [r0, #0]
   d4f0c:	4639      	mov	r1, r7
   d4f0e:	689b      	ldr	r3, [r3, #8]
   d4f10:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d4f12:	442e      	add	r6, r5
   d4f14:	42b5      	cmp	r5, r6
   d4f16:	6860      	ldr	r0, [r4, #4]
   d4f18:	d005      	beq.n	d4f26 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d4f1a:	6803      	ldr	r3, [r0, #0]
   d4f1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f20:	689b      	ldr	r3, [r3, #8]
   d4f22:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d4f24:	e7f6      	b.n	d4f14 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d4f26:	2101      	movs	r1, #1
   d4f28:	f004 f910 	bl	d914c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d4f2c:	4603      	mov	r3, r0
   d4f2e:	b170      	cbz	r0, d4f4e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d4f30:	4908      	ldr	r1, [pc, #32]	; (d4f54 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d4f32:	4809      	ldr	r0, [pc, #36]	; (d4f58 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d4f34:	463a      	mov	r2, r7
   d4f36:	f7ff ff16 	bl	d4d66 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d4f3a:	2500      	movs	r5, #0
    }

    if (lock) {
   d4f3c:	f1b8 0f00 	cmp.w	r8, #0
   d4f40:	d002      	beq.n	d4f48 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d4f42:	6860      	ldr	r0, [r4, #4]
   d4f44:	f004 f90f 	bl	d9166 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d4f48:	4628      	mov	r0, r5
   d4f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d4f4e:	2501      	movs	r5, #1
   d4f50:	e7f4      	b.n	d4f3c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d4f52:	bf00      	nop
   d4f54:	000dc40b 	.word	0x000dc40b
   d4f58:	2003e30c 	.word	0x2003e30c

000d4f5c <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d4f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4f5e:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d4f62:	9300      	str	r3, [sp, #0]
   d4f64:	f10d 020f 	add.w	r2, sp, #15
   d4f68:	2301      	movs	r3, #1
   d4f6a:	f7ff ffbb 	bl	d4ee4 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d4f6e:	b005      	add	sp, #20
   d4f70:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f74 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d4f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d4f76:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d4f78:	460c      	mov	r4, r1
   d4f7a:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d4f7c:	491a      	ldr	r1, [pc, #104]	; (d4fe8 <_ZN6AB18056setWDTEi+0x74>)
   d4f7e:	481b      	ldr	r0, [pc, #108]	; (d4fec <_ZN6AB18056setWDTEi+0x78>)
   d4f80:	f7ff f920 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d4f84:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d4f86:	bfb8      	it	lt
   d4f88:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d4f8a:	b97c      	cbnz	r4, d4fac <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d4f8c:	2301      	movs	r3, #1
   d4f8e:	4622      	mov	r2, r4
   d4f90:	211b      	movs	r1, #27
   d4f92:	4628      	mov	r0, r5
   d4f94:	f7ff ffe2 	bl	d4f5c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d4f98:	4915      	ldr	r1, [pc, #84]	; (d4ff0 <_ZN6AB18056setWDTEi+0x7c>)
   d4f9a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d4f9c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d4f9e:	4813      	ldr	r0, [pc, #76]	; (d4fec <_ZN6AB18056setWDTEi+0x78>)
   d4fa0:	f7ff feca 	bl	d4d38 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d4fa4:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d4fa6:	616c      	str	r4, [r5, #20]
}
   d4fa8:	4630      	mov	r0, r6
   d4faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d4fac:	2c03      	cmp	r4, #3
   d4fae:	dd19      	ble.n	d4fe4 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d4fb0:	10a7      	asrs	r7, r4, #2
   d4fb2:	2f1f      	cmp	r7, #31
   d4fb4:	bfa8      	it	ge
   d4fb6:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d4fb8:	00ba      	lsls	r2, r7, #2
   d4fba:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d4fbe:	2301      	movs	r3, #1
   d4fc0:	b2d2      	uxtb	r2, r2
   d4fc2:	211b      	movs	r1, #27
   d4fc4:	4628      	mov	r0, r5
   d4fc6:	f7ff ffc9 	bl	d4f5c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d4fca:	463a      	mov	r2, r7
   d4fcc:	4603      	mov	r3, r0
   d4fce:	4909      	ldr	r1, [pc, #36]	; (d4ff4 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d4fd0:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d4fd2:	4806      	ldr	r0, [pc, #24]	; (d4fec <_ZN6AB18056setWDTEi+0x78>)
   d4fd4:	f7ff feb0 	bl	d4d38 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d4fd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d4fdc:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d4fde:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d4fe0:	616f      	str	r7, [r5, #20]
   d4fe2:	e7e1      	b.n	d4fa8 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d4fe4:	2701      	movs	r7, #1
   d4fe6:	e7e7      	b.n	d4fb8 <_ZN6AB18056setWDTEi+0x44>
   d4fe8:	000dc430 	.word	0x000dc430
   d4fec:	2003e30c 	.word	0x2003e30c
   d4ff0:	000dc43a 	.word	0x000dc43a
   d4ff4:	000dc456 	.word	0x000dc456

000d4ff8 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d4ff8:	460b      	mov	r3, r1
    if (instance) {
   d4ffa:	4907      	ldr	r1, [pc, #28]	; (d5018 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d4ffc:	4602      	mov	r2, r0
    if (instance) {
   d4ffe:	6808      	ldr	r0, [r1, #0]
   d5000:	b148      	cbz	r0, d5016 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5002:	2b00      	cmp	r3, #0
   d5004:	bf08      	it	eq
   d5006:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d500a:	d104      	bne.n	d5016 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d500c:	68c3      	ldr	r3, [r0, #12]
   d500e:	b113      	cbz	r3, d5016 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5010:	2100      	movs	r1, #0
   d5012:	f7ff bfaf 	b.w	d4f74 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d5016:	4770      	bx	lr
   d5018:	2003e310 	.word	0x2003e310

000d501c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d501c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5020:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5024:	4605      	mov	r5, r0
   d5026:	4616      	mov	r6, r2
   d5028:	461f      	mov	r7, r3
    if (lock) {
   d502a:	f1b8 0f00 	cmp.w	r8, #0
   d502e:	d004      	beq.n	d503a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5030:	6840      	ldr	r0, [r0, #4]
   d5032:	9101      	str	r1, [sp, #4]
   d5034:	f004 f88e 	bl	d9154 <_ZN7TwoWire4lockEv>
   d5038:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d503a:	9101      	str	r1, [sp, #4]
   d503c:	2300      	movs	r3, #0
   d503e:	f10d 020f 	add.w	r2, sp, #15
   d5042:	4628      	mov	r0, r5
   d5044:	f7ff ff08 	bl	d4e58 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5048:	4604      	mov	r4, r0
   d504a:	b160      	cbz	r0, d5066 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d504c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5050:	ea03 0206 	and.w	r2, r3, r6
   d5054:	433a      	orrs	r2, r7
        if (newValue != value) {
   d5056:	4293      	cmp	r3, r2
   d5058:	d005      	beq.n	d5066 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d505a:	9901      	ldr	r1, [sp, #4]
   d505c:	2300      	movs	r3, #0
   d505e:	4628      	mov	r0, r5
   d5060:	f7ff ff7c 	bl	d4f5c <_ZN6AB180513writeRegisterEhhb>
   d5064:	4604      	mov	r4, r0
    if (lock) {
   d5066:	f1b8 0f00 	cmp.w	r8, #0
   d506a:	d002      	beq.n	d5072 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d506c:	6868      	ldr	r0, [r5, #4]
   d506e:	f004 f87a 	bl	d9166 <_ZN7TwoWire6unlockEv>
}
   d5072:	4620      	mov	r0, r4
   d5074:	b004      	add	sp, #16
   d5076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d507a <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d507a:	b513      	push	{r0, r1, r4, lr}
   d507c:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d507e:	f10d 0207 	add.w	r2, sp, #7
   d5082:	f7ff fee9 	bl	d4e58 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d5086:	b128      	cbz	r0, d5094 <_ZN6AB180510isBitClearEhhb+0x1a>
   d5088:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d508c:	421c      	tst	r4, r3
   d508e:	bf0c      	ite	eq
   d5090:	2001      	moveq	r0, #1
   d5092:	2000      	movne	r0, #0
}
   d5094:	b002      	add	sp, #8
   d5096:	bd10      	pop	{r4, pc}

000d5098 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5098:	b513      	push	{r0, r1, r4, lr}
   d509a:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d509c:	f10d 0207 	add.w	r2, sp, #7
   d50a0:	f7ff feda 	bl	d4e58 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d50a4:	b128      	cbz	r0, d50b2 <_ZN6AB18058isBitSetEhhb+0x1a>
   d50a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d50aa:	421c      	tst	r4, r3
   d50ac:	bf14      	ite	ne
   d50ae:	2001      	movne	r0, #1
   d50b0:	2000      	moveq	r0, #0
}
   d50b2:	b002      	add	sp, #8
   d50b4:	bd10      	pop	{r4, pc}

000d50b6 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d50b6:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d50b8:	43d2      	mvns	r2, r2
   d50ba:	9300      	str	r3, [sp, #0]
   d50bc:	b2d2      	uxtb	r2, r2
   d50be:	2300      	movs	r3, #0
   d50c0:	f7ff ffac 	bl	d501c <_ZN6AB180512maskRegisterEhhhb>
}
   d50c4:	b003      	add	sp, #12
   d50c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d50cc <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d50cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d50ce:	2301      	movs	r3, #1
   d50d0:	f10d 0207 	add.w	r2, sp, #7
   d50d4:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d50d6:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d50d8:	f7ff febe 	bl	d4e58 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d50dc:	4605      	mov	r5, r0
   d50de:	b938      	cbnz	r0, d50f0 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d50e0:	491e      	ldr	r1, [pc, #120]	; (d515c <_ZN6AB180516updateWakeReasonEv+0x90>)
   d50e2:	481f      	ldr	r0, [pc, #124]	; (d5160 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d50e4:	22ad      	movs	r2, #173	; 0xad
   d50e6:	f7ff fe3e 	bl	d4d66 <_ZNK5spark6Logger5errorEPKcz>
}
   d50ea:	4628      	mov	r0, r5
   d50ec:	b003      	add	sp, #12
   d50ee:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d50f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d50f4:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d50f8:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d50fc:	d00b      	beq.n	d5116 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d50fe:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5100:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5102:	210f      	movs	r1, #15
   d5104:	4620      	mov	r0, r4
   d5106:	f7ff ffd6 	bl	d50b6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d510a:	4a16      	ldr	r2, [pc, #88]	; (d5164 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d510c:	4916      	ldr	r1, [pc, #88]	; (d5168 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d510e:	4814      	ldr	r0, [pc, #80]	; (d5160 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5110:	f7ff f858 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d5114:	e7e9      	b.n	d50ea <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5116:	2208      	movs	r2, #8
   d5118:	2117      	movs	r1, #23
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff ffbc 	bl	d5098 <_ZN6AB18058isBitSetEhhb>
   d5120:	b118      	cbz	r0, d512a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5122:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5124:	4a11      	ldr	r2, [pc, #68]	; (d516c <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5126:	61e3      	str	r3, [r4, #28]
   d5128:	e7f0      	b.n	d510c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d512a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d512e:	071a      	lsls	r2, r3, #28
   d5130:	d509      	bpl.n	d5146 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5132:	2303      	movs	r3, #3
   d5134:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d5136:	2208      	movs	r2, #8
   d5138:	2301      	movs	r3, #1
   d513a:	210f      	movs	r1, #15
   d513c:	4620      	mov	r0, r4
   d513e:	f7ff ffba 	bl	d50b6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5142:	4a0b      	ldr	r2, [pc, #44]	; (d5170 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5144:	e7e2      	b.n	d510c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d5146:	075b      	lsls	r3, r3, #29
   d5148:	d5cf      	bpl.n	d50ea <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d514a:	2204      	movs	r2, #4
   d514c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d514e:	2301      	movs	r3, #1
   d5150:	210f      	movs	r1, #15
   d5152:	4620      	mov	r0, r4
   d5154:	f7ff ffaf 	bl	d50b6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d5158:	4a06      	ldr	r2, [pc, #24]	; (d5174 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d515a:	e7d7      	b.n	d510c <_ZN6AB180516updateWakeReasonEv+0x40>
   d515c:	000dc4a9 	.word	0x000dc4a9
   d5160:	2003e30c 	.word	0x2003e30c
   d5164:	000dc47a 	.word	0x000dc47a
   d5168:	000dc4c8 	.word	0x000dc4c8
   d516c:	000dc483 	.word	0x000dc483
   d5170:	000dc493 	.word	0x000dc493
   d5174:	000dc4a3 	.word	0x000dc4a3

000d5178 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5178:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d517a:	9300      	str	r3, [sp, #0]
   d517c:	4613      	mov	r3, r2
   d517e:	22ff      	movs	r2, #255	; 0xff
   d5180:	f7ff ff4c 	bl	d501c <_ZN6AB180512maskRegisterEhhhb>
}
   d5184:	b003      	add	sp, #12
   d5186:	f85d fb04 	ldr.w	pc, [sp], #4

000d518a <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d518a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d518e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5192:	4605      	mov	r5, r0
   d5194:	460c      	mov	r4, r1
   d5196:	4691      	mov	r9, r2
   d5198:	461f      	mov	r7, r3
    if (lock) {
   d519a:	f1ba 0f00 	cmp.w	sl, #0
   d519e:	d002      	beq.n	d51a6 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d51a0:	6840      	ldr	r0, [r0, #4]
   d51a2:	f003 ffd7 	bl	d9154 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d51a6:	b307      	cbz	r7, d51ea <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d51a8:	2f20      	cmp	r7, #32
   d51aa:	463e      	mov	r6, r7
   d51ac:	bf28      	it	cs
   d51ae:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d51b0:	2c7f      	cmp	r4, #127	; 0x7f
   d51b2:	d826      	bhi.n	d5202 <_ZN6AB18057readRamEjPhjb+0x78>
   d51b4:	1933      	adds	r3, r6, r4
   d51b6:	2b80      	cmp	r3, #128	; 0x80
   d51b8:	d901      	bls.n	d51be <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d51ba:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d51be:	2301      	movs	r3, #1
   d51c0:	2204      	movs	r2, #4
   d51c2:	213f      	movs	r1, #63	; 0x3f
   d51c4:	4628      	mov	r0, r5
   d51c6:	f7ff ff76 	bl	d50b6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d51ca:	2300      	movs	r3, #0
   d51cc:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d51d0:	9300      	str	r3, [sp, #0]
   d51d2:	464a      	mov	r2, r9
   d51d4:	4633      	mov	r3, r6
   d51d6:	b2c9      	uxtb	r1, r1
   d51d8:	4628      	mov	r0, r5
   d51da:	f7ff fdef 	bl	d4dbc <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d51de:	4680      	mov	r8, r0
   d51e0:	b128      	cbz	r0, d51ee <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d51e2:	4434      	add	r4, r6
        dataLen -= count;
   d51e4:	1bbf      	subs	r7, r7, r6
        data += count;
   d51e6:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d51e8:	e7dd      	b.n	d51a6 <_ZN6AB18057readRamEjPhjb+0x1c>
   d51ea:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d51ee:	f1ba 0f00 	cmp.w	sl, #0
   d51f2:	d002      	beq.n	d51fa <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d51f4:	6868      	ldr	r0, [r5, #4]
   d51f6:	f003 ffb6 	bl	d9166 <_ZN7TwoWire6unlockEv>
}
   d51fa:	4640      	mov	r0, r8
   d51fc:	b002      	add	sp, #8
   d51fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5202:	2301      	movs	r3, #1
   d5204:	2204      	movs	r2, #4
   d5206:	213f      	movs	r1, #63	; 0x3f
   d5208:	4628      	mov	r0, r5
   d520a:	f7ff ffb5 	bl	d5178 <_ZN6AB180514setRegisterBitEhhb>
   d520e:	e7dc      	b.n	d51ca <_ZN6AB18057readRamEjPhjb+0x40>

000d5210 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d5210:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5214:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5218:	4605      	mov	r5, r0
   d521a:	460c      	mov	r4, r1
   d521c:	4691      	mov	r9, r2
   d521e:	461f      	mov	r7, r3
    if (lock) {
   d5220:	f1ba 0f00 	cmp.w	sl, #0
   d5224:	d002      	beq.n	d522c <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d5226:	6840      	ldr	r0, [r0, #4]
   d5228:	f003 ff94 	bl	d9154 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d522c:	b307      	cbz	r7, d5270 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d522e:	2f1f      	cmp	r7, #31
   d5230:	463e      	mov	r6, r7
   d5232:	bf28      	it	cs
   d5234:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5236:	2c7f      	cmp	r4, #127	; 0x7f
   d5238:	d826      	bhi.n	d5288 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d523a:	1933      	adds	r3, r6, r4
   d523c:	2b80      	cmp	r3, #128	; 0x80
   d523e:	d901      	bls.n	d5244 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d5240:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5244:	2301      	movs	r3, #1
   d5246:	2204      	movs	r2, #4
   d5248:	213f      	movs	r1, #63	; 0x3f
   d524a:	4628      	mov	r0, r5
   d524c:	f7ff ff33 	bl	d50b6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5250:	2300      	movs	r3, #0
   d5252:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5256:	9300      	str	r3, [sp, #0]
   d5258:	464a      	mov	r2, r9
   d525a:	4633      	mov	r3, r6
   d525c:	b2c9      	uxtb	r1, r1
   d525e:	4628      	mov	r0, r5
   d5260:	f7ff fe40 	bl	d4ee4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d5264:	4680      	mov	r8, r0
   d5266:	b128      	cbz	r0, d5274 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d5268:	4434      	add	r4, r6
        dataLen -= count;
   d526a:	1bbf      	subs	r7, r7, r6
        data += count;
   d526c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d526e:	e7dd      	b.n	d522c <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d5270:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5274:	f1ba 0f00 	cmp.w	sl, #0
   d5278:	d002      	beq.n	d5280 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d527a:	6868      	ldr	r0, [r5, #4]
   d527c:	f003 ff73 	bl	d9166 <_ZN7TwoWire6unlockEv>
}
   d5280:	4640      	mov	r0, r8
   d5282:	b002      	add	sp, #8
   d5284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5288:	2301      	movs	r3, #1
   d528a:	2204      	movs	r2, #4
   d528c:	213f      	movs	r1, #63	; 0x3f
   d528e:	4628      	mov	r0, r5
   d5290:	f7ff ff72 	bl	d5178 <_ZN6AB180514setRegisterBitEhhb>
   d5294:	e7dc      	b.n	d5250 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d5298 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d5298:	b530      	push	{r4, r5, lr}
   d529a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d529c:	680d      	ldr	r5, [r1, #0]
   d529e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d52a2:	9503      	str	r5, [sp, #12]
   d52a4:	684d      	ldr	r5, [r1, #4]
   d52a6:	9502      	str	r5, [sp, #8]
   d52a8:	688d      	ldr	r5, [r1, #8]
   d52aa:	9501      	str	r5, [sp, #4]
   d52ac:	68c9      	ldr	r1, [r1, #12]
   d52ae:	9100      	str	r1, [sp, #0]
   d52b0:	3301      	adds	r3, #1
   d52b2:	4904      	ldr	r1, [pc, #16]	; (d52c4 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d52b4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d52b8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d52ba:	f005 fc25 	bl	dab08 <_ZN6String6formatEPKcz>
}
   d52be:	4620      	mov	r0, r4
   d52c0:	b005      	add	sp, #20
   d52c2:	bd30      	pop	{r4, r5, pc}
   d52c4:	000dc4d9 	.word	0x000dc4d9

000d52c8 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d52c8:	1103      	asrs	r3, r0, #4
}
   d52ca:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d52cc:	f000 000f 	and.w	r0, r0, #15
}
   d52d0:	fb02 0003 	mla	r0, r2, r3, r0
   d52d4:	4770      	bx	lr

000d52d6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d52d6:	b538      	push	{r3, r4, r5, lr}
   d52d8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d52da:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d52dc:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d52de:	f7ff fff3 	bl	d52c8 <_ZN6AB180510bcdToValueEh>
   d52e2:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d52e4:	7860      	ldrb	r0, [r4, #1]
   d52e6:	f7ff ffef 	bl	d52c8 <_ZN6AB180510bcdToValueEh>
   d52ea:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d52ec:	78a0      	ldrb	r0, [r4, #2]
   d52ee:	f7ff ffeb 	bl	d52c8 <_ZN6AB180510bcdToValueEh>
   d52f2:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d52f4:	78e0      	ldrb	r0, [r4, #3]
   d52f6:	f7ff ffe7 	bl	d52c8 <_ZN6AB180510bcdToValueEh>
   d52fa:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d52fc:	7920      	ldrb	r0, [r4, #4]
   d52fe:	f7ff ffe3 	bl	d52c8 <_ZN6AB180510bcdToValueEh>
   d5302:	3801      	subs	r0, #1
   d5304:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d5306:	b92d      	cbnz	r5, d5314 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d5308:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d530a:	7828      	ldrb	r0, [r5, #0]
   d530c:	f7ff ffdc 	bl	d52c8 <_ZN6AB180510bcdToValueEh>
   d5310:	6188      	str	r0, [r1, #24]
}
   d5312:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d5314:	7960      	ldrb	r0, [r4, #5]
   d5316:	f7ff ffd7 	bl	d52c8 <_ZN6AB180510bcdToValueEh>
   d531a:	3064      	adds	r0, #100	; 0x64
   d531c:	1da5      	adds	r5, r4, #6
   d531e:	6148      	str	r0, [r1, #20]
   d5320:	e7f3      	b.n	d530a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d5324 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5324:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5326:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5328:	b088      	sub	sp, #32
   d532a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d532c:	461a      	mov	r2, r3
   d532e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5330:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5332:	f7ff fea2 	bl	d507a <_ZN6AB180510isBitClearEhhb>
   d5336:	b1f0      	cbz	r0, d5376 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d5338:	2308      	movs	r3, #8
   d533a:	2601      	movs	r6, #1
   d533c:	4620      	mov	r0, r4
   d533e:	9600      	str	r6, [sp, #0]
   d5340:	eb0d 0203 	add.w	r2, sp, r3
   d5344:	2100      	movs	r1, #0
   d5346:	f7ff fd39 	bl	d4dbc <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d534a:	4604      	mov	r4, r0
   d534c:	b198      	cbz	r0, d5376 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d534e:	4632      	mov	r2, r6
   d5350:	4629      	mov	r1, r5
   d5352:	f10d 0009 	add.w	r0, sp, #9
   d5356:	f7ff ffbe 	bl	d52d6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d535a:	a804      	add	r0, sp, #16
   d535c:	f7ff ff9c 	bl	d5298 <_ZN6AB180510tmToStringEPK2tm>
   d5360:	4808      	ldr	r0, [pc, #32]	; (d5384 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d5362:	9a04      	ldr	r2, [sp, #16]
   d5364:	4908      	ldr	r1, [pc, #32]	; (d5388 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d5366:	f7fe ff2d 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d536a:	a804      	add	r0, sp, #16
   d536c:	f005 fb18 	bl	da9a0 <_ZN6StringD1Ev>
}
   d5370:	4620      	mov	r0, r4
   d5372:	b008      	add	sp, #32
   d5374:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d5376:	2224      	movs	r2, #36	; 0x24
   d5378:	2100      	movs	r1, #0
   d537a:	4628      	mov	r0, r5
   d537c:	f006 fc9a 	bl	dbcb4 <memset>
   d5380:	2400      	movs	r4, #0
   d5382:	e7f5      	b.n	d5370 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d5384:	2003e30c 	.word	0x2003e30c
   d5388:	000dc4f7 	.word	0x000dc4f7

000d538c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d538c:	b530      	push	{r4, r5, lr}
   d538e:	b08b      	sub	sp, #44	; 0x2c
   d5390:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d5392:	a901      	add	r1, sp, #4
   d5394:	f7ff ffc6 	bl	d5324 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d5398:	4604      	mov	r4, r0
   d539a:	b120      	cbz	r0, d53a6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d539c:	a801      	add	r0, sp, #4
   d539e:	f003 faf1 	bl	d8984 <mktime>
   d53a2:	e9c5 0100 	strd	r0, r1, [r5]
}
   d53a6:	4620      	mov	r0, r4
   d53a8:	b00b      	add	sp, #44	; 0x2c
   d53aa:	bd30      	pop	{r4, r5, pc}

000d53ac <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d53ac:	b510      	push	{r4, lr}
   d53ae:	4604      	mov	r4, r0
   d53b0:	b088      	sub	sp, #32
    if (callBegin) {
   d53b2:	b111      	cbz	r1, d53ba <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d53b4:	6840      	ldr	r0, [r0, #4]
   d53b6:	f003 fe93 	bl	d90e0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d53ba:	4620      	mov	r0, r4
   d53bc:	f7ff fd54 	bl	d4e68 <_ZN6AB180510detectChipEv>
   d53c0:	b370      	cbz	r0, d5420 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d53c2:	4620      	mov	r0, r4
   d53c4:	f7ff fe82 	bl	d50cc <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d53c8:	2301      	movs	r3, #1
   d53ca:	461a      	mov	r2, r3
   d53cc:	2110      	movs	r1, #16
   d53ce:	4620      	mov	r0, r4
   d53d0:	f7ff fe53 	bl	d507a <_ZN6AB180510isBitClearEhhb>
   d53d4:	b1d8      	cbz	r0, d540e <_ZN6AB18055setupEb+0x62>
   d53d6:	f005 fd71 	bl	daebc <_ZN9TimeClass7isValidEv>
   d53da:	b9c0      	cbnz	r0, d540e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d53dc:	a902      	add	r1, sp, #8
   d53de:	4620      	mov	r0, r4
   d53e0:	f7ff ffd4 	bl	d538c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d53e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d53e8:	f005 fc6f 	bl	dacca <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d53ec:	4b0f      	ldr	r3, [pc, #60]	; (d542c <_ZN6AB18055setupEb+0x80>)
   d53ee:	4910      	ldr	r1, [pc, #64]	; (d5430 <_ZN6AB18055setupEb+0x84>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	9300      	str	r3, [sp, #0]
   d53f4:	a804      	add	r0, sp, #16
   d53f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d53fa:	f005 fd1d 	bl	dae38 <_ZN9TimeClass6formatExPKc>
   d53fe:	480d      	ldr	r0, [pc, #52]	; (d5434 <_ZN6AB18055setupEb+0x88>)
   d5400:	9a04      	ldr	r2, [sp, #16]
   d5402:	490d      	ldr	r1, [pc, #52]	; (d5438 <_ZN6AB18055setupEb+0x8c>)
   d5404:	f7fe fede 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d5408:	a804      	add	r0, sp, #16
   d540a:	f005 fac9 	bl	da9a0 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d540e:	4a0b      	ldr	r2, [pc, #44]	; (d543c <_ZN6AB18055setupEb+0x90>)
   d5410:	2300      	movs	r3, #0
   d5412:	2100      	movs	r1, #0
   d5414:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d5418:	f003 f96e 	bl	d86f8 <system_subscribe_event>
}
   d541c:	b008      	add	sp, #32
   d541e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d5420:	4907      	ldr	r1, [pc, #28]	; (d5440 <_ZN6AB18055setupEb+0x94>)
   d5422:	4804      	ldr	r0, [pc, #16]	; (d5434 <_ZN6AB18055setupEb+0x88>)
   d5424:	f7ff fc9f 	bl	d4d66 <_ZNK5spark6Logger5errorEPKcz>
   d5428:	e7f1      	b.n	d540e <_ZN6AB18055setupEb+0x62>
   d542a:	bf00      	nop
   d542c:	2003dd3c 	.word	0x2003dd3c
   d5430:	2003e5e0 	.word	0x2003e5e0
   d5434:	2003e30c 	.word	0x2003e30c
   d5438:	000dc505 	.word	0x000dc505
   d543c:	000d4ff9 	.word	0x000d4ff9
   d5440:	000dc522 	.word	0x000dc522

000d5444 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d5444:	220a      	movs	r2, #10
   d5446:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d544a:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d544e:	fb93 f1f2 	sdiv	r1, r3, r2
   d5452:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d5456:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d545a:	b2c0      	uxtb	r0, r0
   d545c:	4770      	bx	lr

000d545e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d545e:	b570      	push	{r4, r5, r6, lr}
   d5460:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d5462:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5464:	460c      	mov	r4, r1
   d5466:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d5468:	f7ff ffec 	bl	d5444 <_ZN6AB180510valueToBcdEi>
   d546c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d546e:	6868      	ldr	r0, [r5, #4]
   d5470:	f7ff ffe8 	bl	d5444 <_ZN6AB180510valueToBcdEi>
   d5474:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d5476:	68a8      	ldr	r0, [r5, #8]
   d5478:	f7ff ffe4 	bl	d5444 <_ZN6AB180510valueToBcdEi>
   d547c:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d547e:	68e8      	ldr	r0, [r5, #12]
   d5480:	f7ff ffe0 	bl	d5444 <_ZN6AB180510valueToBcdEi>
   d5484:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5486:	6928      	ldr	r0, [r5, #16]
   d5488:	3001      	adds	r0, #1
   d548a:	f7ff ffdb 	bl	d5444 <_ZN6AB180510valueToBcdEi>
   d548e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d5490:	b92e      	cbnz	r6, d549e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5492:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d5494:	69a8      	ldr	r0, [r5, #24]
   d5496:	f7ff ffd5 	bl	d5444 <_ZN6AB180510valueToBcdEi>
   d549a:	7030      	strb	r0, [r6, #0]
}
   d549c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d549e:	696a      	ldr	r2, [r5, #20]
   d54a0:	2364      	movs	r3, #100	; 0x64
   d54a2:	fb92 f0f3 	sdiv	r0, r2, r3
   d54a6:	fb03 2010 	mls	r0, r3, r0, r2
   d54aa:	f7ff ffcb 	bl	d5444 <_ZN6AB180510valueToBcdEi>
   d54ae:	1da6      	adds	r6, r4, #6
   d54b0:	7160      	strb	r0, [r4, #5]
   d54b2:	e7ef      	b.n	d5494 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d54b4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54b6:	b087      	sub	sp, #28
   d54b8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d54ba:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d54bc:	4616      	mov	r6, r2
   d54be:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d54c0:	f7ff feea 	bl	d5298 <_ZN6AB180510tmToStringEPK2tm>
   d54c4:	481e      	ldr	r0, [pc, #120]	; (d5540 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d54c6:	9a02      	ldr	r2, [sp, #8]
   d54c8:	491e      	ldr	r1, [pc, #120]	; (d5544 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d54ca:	f7fe fe7b 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d54ce:	a802      	add	r0, sp, #8
   d54d0:	f005 fa66 	bl	da9a0 <_ZN6StringD1Ev>
    if (lock) {
   d54d4:	b116      	cbz	r6, d54dc <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d54d6:	6868      	ldr	r0, [r5, #4]
   d54d8:	f003 fe3c 	bl	d9154 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d54dc:	4620      	mov	r0, r4
   d54de:	2201      	movs	r2, #1
   d54e0:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d54e4:	2700      	movs	r7, #0
   d54e6:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d54ea:	f7ff ffb8 	bl	d545e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d54ee:	2301      	movs	r3, #1
   d54f0:	461a      	mov	r2, r3
   d54f2:	2110      	movs	r1, #16
   d54f4:	4628      	mov	r0, r5
   d54f6:	f7ff fe3f 	bl	d5178 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d54fa:	4604      	mov	r4, r0
   d54fc:	b1e8      	cbz	r0, d553a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d54fe:	2308      	movs	r3, #8
   d5500:	9700      	str	r7, [sp, #0]
   d5502:	eb0d 0203 	add.w	r2, sp, r3
   d5506:	4639      	mov	r1, r7
   d5508:	4628      	mov	r0, r5
   d550a:	f7ff fceb 	bl	d4ee4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d550e:	4604      	mov	r4, r0
   d5510:	b160      	cbz	r0, d552c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5512:	2301      	movs	r3, #1
   d5514:	461a      	mov	r2, r3
   d5516:	2110      	movs	r1, #16
   d5518:	4628      	mov	r0, r5
   d551a:	f7ff fdcc 	bl	d50b6 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d551e:	b116      	cbz	r6, d5526 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d5520:	6868      	ldr	r0, [r5, #4]
   d5522:	f003 fe20 	bl	d9166 <_ZN7TwoWire6unlockEv>
}
   d5526:	4620      	mov	r0, r4
   d5528:	b007      	add	sp, #28
   d552a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d552c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d5530:	4905      	ldr	r1, [pc, #20]	; (d5548 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d5532:	4803      	ldr	r0, [pc, #12]	; (d5540 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d5534:	f7ff fc17 	bl	d4d66 <_ZNK5spark6Logger5errorEPKcz>
   d5538:	e7f1      	b.n	d551e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d553a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d553e:	e7f7      	b.n	d5530 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d5540:	2003e30c 	.word	0x2003e30c
   d5544:	000dc53a 	.word	0x000dc53a
   d5548:	000dc548 	.word	0x000dc548

000d554c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d554c:	b513      	push	{r0, r1, r4, lr}
   d554e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d5550:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d5552:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d5556:	f006 fb73 	bl	dbc40 <gmtime>
    return setRtcFromTm(tm, lock);
   d555a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d555e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d5560:	4620      	mov	r0, r4
   d5562:	f7ff ffa7 	bl	d54b4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d5566:	b002      	add	sp, #8
   d5568:	bd10      	pop	{r4, pc}
	...

000d556c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d556c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d556e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d5570:	b089      	sub	sp, #36	; 0x24
   d5572:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5574:	bb75      	cbnz	r5, d55d4 <_ZN6AB18054loopEv+0x68>
   d5576:	f005 fca1 	bl	daebc <_ZN9TimeClass7isValidEv>
   d557a:	b358      	cbz	r0, d55d4 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d557c:	2600      	movs	r6, #0
   d557e:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d5580:	a904      	add	r1, sp, #16
   d5582:	4628      	mov	r0, r5
        tm = 0;
   d5584:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d5588:	f003 f924 	bl	d87d4 <spark_sync_time_last>
   d558c:	b310      	cbz	r0, d55d4 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d558e:	2501      	movs	r5, #1
   d5590:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d5592:	f005 fcb0 	bl	daef6 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d5596:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d5598:	4602      	mov	r2, r0
   d559a:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d559c:	4620      	mov	r0, r4
        time_t time = Time.now();
   d559e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d55a2:	f7ff ffd3 	bl	d554c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d55a6:	a902      	add	r1, sp, #8
   d55a8:	4620      	mov	r0, r4
        time = 0;
   d55aa:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d55ae:	f7ff feed 	bl	d538c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d55b2:	4b12      	ldr	r3, [pc, #72]	; (d55fc <_ZN6AB18054loopEv+0x90>)
   d55b4:	4912      	ldr	r1, [pc, #72]	; (d5600 <_ZN6AB18054loopEv+0x94>)
   d55b6:	681b      	ldr	r3, [r3, #0]
   d55b8:	9300      	str	r3, [sp, #0]
   d55ba:	a804      	add	r0, sp, #16
   d55bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d55c0:	f005 fc3a 	bl	dae38 <_ZN9TimeClass6formatExPKc>
   d55c4:	480f      	ldr	r0, [pc, #60]	; (d5604 <_ZN6AB18054loopEv+0x98>)
   d55c6:	9a04      	ldr	r2, [sp, #16]
   d55c8:	490f      	ldr	r1, [pc, #60]	; (d5608 <_ZN6AB18054loopEv+0x9c>)
   d55ca:	f7fe fdfb 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
   d55ce:	a804      	add	r0, sp, #16
   d55d0:	f005 f9e6 	bl	da9a0 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d55d4:	6963      	ldr	r3, [r4, #20]
   d55d6:	b173      	cbz	r3, d55f6 <_ZN6AB18054loopEv+0x8a>
   d55d8:	f002 fe9c 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d55dc:	6923      	ldr	r3, [r4, #16]
   d55de:	1ac0      	subs	r0, r0, r3
   d55e0:	6963      	ldr	r3, [r4, #20]
   d55e2:	4298      	cmp	r0, r3
   d55e4:	d307      	bcc.n	d55f6 <_ZN6AB18054loopEv+0x8a>
   d55e6:	f002 fe95 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d55ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d55ee:	6120      	str	r0, [r4, #16]
            setWDT();
   d55f0:	4620      	mov	r0, r4
   d55f2:	f7ff fcbf 	bl	d4f74 <_ZN6AB18056setWDTEi>
}
   d55f6:	b009      	add	sp, #36	; 0x24
   d55f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55fa:	bf00      	nop
   d55fc:	2003dd3c 	.word	0x2003dd3c
   d5600:	2003e5e0 	.word	0x2003e5e0
   d5604:	2003e30c 	.word	0x2003e30c
   d5608:	000dc563 	.word	0x000dc563

000d560c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d560c:	4b01      	ldr	r3, [pc, #4]	; (d5614 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d560e:	4a02      	ldr	r2, [pc, #8]	; (d5618 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d5610:	601a      	str	r2, [r3, #0]
}
   d5612:	4770      	bx	lr
   d5614:	2003e30c 	.word	0x2003e30c
   d5618:	000dc579 	.word	0x000dc579

000d561c <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d561c:	4770      	bx	lr

000d561e <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d561e:	4770      	bx	lr

000d5620 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d5620:	2001      	movs	r0, #1
   d5622:	4770      	bx	lr

000d5624 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d5624:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5626:	bf08      	it	eq
   d5628:	6001      	streq	r1, [r0, #0]
	}
   d562a:	2000      	movs	r0, #0
   d562c:	4770      	bx	lr

000d562e <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d562e:	b510      	push	{r4, lr}
}
   d5630:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d5632:	4604      	mov	r4, r0
}
   d5634:	f005 feda 	bl	db3ec <_ZdlPvj>
   d5638:	4620      	mov	r0, r4
   d563a:	bd10      	pop	{r4, pc}

000d563c <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d563c:	b510      	push	{r4, lr}
}
   d563e:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d5640:	4604      	mov	r4, r0
}
   d5642:	f005 fed3 	bl	db3ec <_ZdlPvj>
   d5646:	4620      	mov	r0, r4
   d5648:	bd10      	pop	{r4, pc}
	...

000d564c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d564c:	b510      	push	{r4, lr}
   d564e:	4b05      	ldr	r3, [pc, #20]	; (d5664 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d5650:	4604      	mov	r4, r0
   d5652:	f840 3b1c 	str.w	r3, [r0], #28
   d5656:	f005 f9a3 	bl	da9a0 <_ZN6StringD1Ev>
   d565a:	1d20      	adds	r0, r4, #4
   d565c:	f005 f9a0 	bl	da9a0 <_ZN6StringD1Ev>
}
   d5660:	4620      	mov	r0, r4
   d5662:	bd10      	pop	{r4, pc}
   d5664:	000dc624 	.word	0x000dc624

000d5668 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d5668:	b510      	push	{r4, lr}
   d566a:	4604      	mov	r4, r0
}
   d566c:	f7ff ffee 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
   d5670:	4620      	mov	r0, r4
   d5672:	2158      	movs	r1, #88	; 0x58
   d5674:	f005 feba 	bl	db3ec <_ZdlPvj>
   d5678:	4620      	mov	r0, r4
   d567a:	bd10      	pop	{r4, pc}

000d567c <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d567c:	b510      	push	{r4, lr}
   d567e:	4b04      	ldr	r3, [pc, #16]	; (d5690 <_ZN9LocalTimeD1Ev+0x14>)
   d5680:	4604      	mov	r4, r0
   d5682:	f840 3b04 	str.w	r3, [r0], #4
   d5686:	f7ff ffe1 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
   d568a:	4620      	mov	r0, r4
   d568c:	bd10      	pop	{r4, pc}
   d568e:	bf00      	nop
   d5690:	000dc5f4 	.word	0x000dc5f4

000d5694 <_ZN9LocalTimeD0Ev>:
   d5694:	b510      	push	{r4, lr}
   d5696:	4604      	mov	r4, r0
   d5698:	f7ff fff0 	bl	d567c <_ZN9LocalTimeD1Ev>
   d569c:	4620      	mov	r0, r4
   d569e:	2160      	movs	r1, #96	; 0x60
   d56a0:	f005 fea4 	bl	db3ec <_ZdlPvj>
   d56a4:	4620      	mov	r0, r4
   d56a6:	bd10      	pop	{r4, pc}

000d56a8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d56a8:	f020 0302 	bic.w	r3, r0, #2
   d56ac:	2b01      	cmp	r3, #1
   d56ae:	d003      	beq.n	d56b8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d56b0:	1f43      	subs	r3, r0, #5
   d56b2:	4258      	negs	r0, r3
   d56b4:	4158      	adcs	r0, r3
   d56b6:	4770      	bx	lr
   d56b8:	4618      	mov	r0, r3
   d56ba:	4770      	bx	lr

000d56bc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d56bc:	b108      	cbz	r0, d56c2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
   d56be:	f7fe bcee 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d56c2:	4770      	bx	lr

000d56c4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d56c4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d56c6:	b148      	cbz	r0, d56dc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d56c8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d56cc:	d301      	bcc.n	d56d2 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d56ce:	f005 fe93 	bl	db3f8 <_ZSt17__throw_bad_allocv>
      }
   d56d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d56d6:	0080      	lsls	r0, r0, #2
   d56d8:	f7fe bcdd 	b.w	d4096 <_Znwj>
   d56dc:	bd08      	pop	{r3, pc}

000d56de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56de:	680b      	ldr	r3, [r1, #0]
   d56e0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d56e2:	684b      	ldr	r3, [r1, #4]
   d56e4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d56e6:	b113      	cbz	r3, d56ee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d56e8:	685a      	ldr	r2, [r3, #4]
   d56ea:	3201      	adds	r2, #1
   d56ec:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56ee:	4770      	bx	lr

000d56f0 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d56f0:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d56f4:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d56f8:	429a      	cmp	r2, r3
   d56fa:	db13      	blt.n	d5724 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d56fc:	dc10      	bgt.n	d5720 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d56fe:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d5702:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d5706:	429a      	cmp	r2, r3
   d5708:	db0c      	blt.n	d5724 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d570a:	dc09      	bgt.n	d5720 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d570c:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d5710:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d5714:	429a      	cmp	r2, r3
   d5716:	db05      	blt.n	d5724 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d5718:	bfcc      	ite	gt
   d571a:	2001      	movgt	r0, #1
   d571c:	2000      	movle	r0, #0
   d571e:	4770      	bx	lr
            return +1;
   d5720:	2001      	movs	r0, #1
   d5722:	4770      	bx	lr
            return -1;
   d5724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d5728:	4770      	bx	lr
	...

000d572c <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d572c:	4a02      	ldr	r2, [pc, #8]	; (d5738 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d572e:	6002      	str	r2, [r0, #0]
   d5730:	684a      	ldr	r2, [r1, #4]
   d5732:	6042      	str	r2, [r0, #4]
   d5734:	4770      	bx	lr
   d5736:	bf00      	nop
   d5738:	000dc604 	.word	0x000dc604

000d573c <_ZN12LocalTimeHMSaSERKS_>:
   d573c:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d5740:	7102      	strb	r2, [r0, #4]
   d5742:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d5746:	7142      	strb	r2, [r0, #5]
   d5748:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d574c:	7182      	strb	r2, [r0, #6]
   d574e:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d5752:	71c2      	strb	r2, [r0, #7]
   d5754:	4770      	bx	lr

000d5756 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d5756:	b538      	push	{r3, r4, r5, lr}
   d5758:	460c      	mov	r4, r1
   d575a:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d575c:	f100 011c 	add.w	r1, r0, #28
   d5760:	4620      	mov	r0, r4
   d5762:	f7ff ffc5 	bl	d56f0 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d5766:	2800      	cmp	r0, #0
   d5768:	db09      	blt.n	d577e <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d576a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d576e:	4620      	mov	r0, r4
   d5770:	f7ff ffbe 	bl	d56f0 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d5774:	2800      	cmp	r0, #0
   d5776:	bfd4      	ite	le
   d5778:	2000      	movle	r0, #0
   d577a:	2001      	movgt	r0, #1
    }
   d577c:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d577e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5782:	e7fb      	b.n	d577c <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d5784 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d5784:	b538      	push	{r3, r4, r5, lr}
   d5786:	4604      	mov	r4, r0
   d5788:	460d      	mov	r5, r1
   d578a:	3004      	adds	r0, #4
   d578c:	3104      	adds	r1, #4
   d578e:	f005 f98e 	bl	daaae <_ZN6StringaSERKS_>
   d5792:	f105 0114 	add.w	r1, r5, #20
   d5796:	f104 0014 	add.w	r0, r4, #20
   d579a:	f7ff ffcf 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
   d579e:	f105 011c 	add.w	r1, r5, #28
   d57a2:	f104 001c 	add.w	r0, r4, #28
   d57a6:	f005 f982 	bl	daaae <_ZN6StringaSERKS_>
   d57aa:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d57ae:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d57b2:	f7ff ffc3 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d57b6:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d57ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d57be:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d57c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d57c6:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d57ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d57ce:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d57d2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d57d6:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d57da:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d57de:	f7ff ffad 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
   d57e2:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d57e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d57ea:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d57ee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d57f2:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d57f6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d57fa:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d57fe:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d5802:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5806:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d580a:	f7ff ff97 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d580e:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d5812:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5816:	4620      	mov	r0, r4
   d5818:	bd38      	pop	{r3, r4, r5, pc}

000d581a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d581a:	694a      	ldr	r2, [r1, #20]
   d581c:	6803      	ldr	r3, [r0, #0]
   d581e:	f362 0316 	bfi	r3, r2, #0, #23
   d5822:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d5824:	690b      	ldr	r3, [r1, #16]
   d5826:	1c5a      	adds	r2, r3, #1
   d5828:	8843      	ldrh	r3, [r0, #2]
   d582a:	f362 13ca 	bfi	r3, r2, #7, #4
   d582e:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d5830:	68ca      	ldr	r2, [r1, #12]
   d5832:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d5836:	f362 03c7 	bfi	r3, r2, #3, #5
   d583a:	70c3      	strb	r3, [r0, #3]
}
   d583c:	4770      	bx	lr

000d583e <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d583e:	b510      	push	{r4, lr}
   d5840:	4604      	mov	r4, r0
   d5842:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d5844:	2224      	movs	r2, #36	; 0x24
   d5846:	2100      	movs	r1, #0
   d5848:	a803      	add	r0, sp, #12
   d584a:	f006 fa33 	bl	dbcb4 <memset>
    timeInfo.tm_year = ymd.year;
   d584e:	6823      	ldr	r3, [r4, #0]
   d5850:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5854:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d5856:	8863      	ldrh	r3, [r4, #2]
   d5858:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d585c:	3b01      	subs	r3, #1
   d585e:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d5860:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d5862:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d5864:	08db      	lsrs	r3, r3, #3
   d5866:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d5868:	f003 f88c 	bl	d8984 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d586c:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d5870:	a903      	add	r1, sp, #12
   d5872:	4668      	mov	r0, sp
   d5874:	f003 f876 	bl	d8964 <localtime_r>
}
   d5878:	9809      	ldr	r0, [sp, #36]	; 0x24
   d587a:	b00c      	add	sp, #48	; 0x30
   d587c:	bd10      	pop	{r4, pc}

000d587e <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d587e:	b530      	push	{r4, r5, lr}
   d5880:	4604      	mov	r4, r0
   d5882:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d5884:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d5886:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d5888:	a803      	add	r0, sp, #12
   d588a:	2100      	movs	r1, #0
   d588c:	f006 fa12 	bl	dbcb4 <memset>
    timeInfo.tm_year = ymd.year;
   d5890:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d5892:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d5894:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5898:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d589a:	8863      	ldrh	r3, [r4, #2]
   d589c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d58a0:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d58a2:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d58a6:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d58a8:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d58aa:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d58ac:	f003 f86a 	bl	d8984 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d58b0:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d58b4:	a903      	add	r1, sp, #12
   d58b6:	4668      	mov	r0, sp
   d58b8:	f003 f854 	bl	d8964 <localtime_r>
    fromTimeInfo(&timeInfo);
   d58bc:	a903      	add	r1, sp, #12
   d58be:	4620      	mov	r0, r4
   d58c0:	f7ff ffab 	bl	d581a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d58c4:	b00d      	add	sp, #52	; 0x34
   d58c6:	bd30      	pop	{r4, r5, pc}

000d58c8 <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d58c8:	6803      	ldr	r3, [r0, #0]
   d58ca:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d58ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d58d2:	4293      	cmp	r3, r2
   d58d4:	d313      	bcc.n	d58fe <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d58d6:	d810      	bhi.n	d58fa <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d58d8:	8842      	ldrh	r2, [r0, #2]
   d58da:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d58de:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d58e2:	429a      	cmp	r2, r3
   d58e4:	d30b      	bcc.n	d58fe <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d58e6:	d808      	bhi.n	d58fa <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d58e8:	78c3      	ldrb	r3, [r0, #3]
   d58ea:	08db      	lsrs	r3, r3, #3
   d58ec:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d58f0:	d305      	bcc.n	d58fe <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d58f2:	bf8c      	ite	hi
   d58f4:	2001      	movhi	r0, #1
   d58f6:	2000      	movls	r0, #0
   d58f8:	4770      	bx	lr
        cmp = +1;
   d58fa:	2001      	movs	r0, #1
   d58fc:	4770      	bx	lr
        cmp = -1;
   d58fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5902:	4770      	bx	lr

000d5904 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d5904:	4a02      	ldr	r2, [pc, #8]	; (d5910 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d5906:	6002      	str	r2, [r0, #0]
   d5908:	2200      	movs	r2, #0
   d590a:	6042      	str	r2, [r0, #4]
}
   d590c:	4770      	bx	lr
   d590e:	bf00      	nop
   d5910:	000dc604 	.word	0x000dc604

000d5914 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d5914:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d5916:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d5918:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d591a:	8083      	strh	r3, [r0, #4]
   d591c:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d591e:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d5920:	ab05      	add	r3, sp, #20
   d5922:	9300      	str	r3, [sp, #0]
   d5924:	4913      	ldr	r1, [pc, #76]	; (d5974 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d5926:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d5928:	ab04      	add	r3, sp, #16
   d592a:	aa03      	add	r2, sp, #12
   d592c:	4628      	mov	r0, r5
   d592e:	f002 ffe1 	bl	d88f4 <sscanf>
   d5932:	2803      	cmp	r0, #3
   d5934:	d107      	bne.n	d5946 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d5936:	9b03      	ldr	r3, [sp, #12]
   d5938:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d593a:	9b04      	ldr	r3, [sp, #16]
   d593c:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d593e:	9b05      	ldr	r3, [sp, #20]
   d5940:	71a3      	strb	r3, [r4, #6]
}
   d5942:	b007      	add	sp, #28
   d5944:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d5946:	490c      	ldr	r1, [pc, #48]	; (d5978 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d5948:	ab04      	add	r3, sp, #16
   d594a:	aa03      	add	r2, sp, #12
   d594c:	4628      	mov	r0, r5
   d594e:	f002 ffd1 	bl	d88f4 <sscanf>
   d5952:	2802      	cmp	r0, #2
   d5954:	d104      	bne.n	d5960 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d5956:	9b03      	ldr	r3, [sp, #12]
   d5958:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d595a:	9b04      	ldr	r3, [sp, #16]
   d595c:	7163      	strb	r3, [r4, #5]
   d595e:	e7f0      	b.n	d5942 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d5960:	4906      	ldr	r1, [pc, #24]	; (d597c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d5962:	aa03      	add	r2, sp, #12
   d5964:	4628      	mov	r0, r5
   d5966:	f002 ffc5 	bl	d88f4 <sscanf>
   d596a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d596c:	bf04      	itt	eq
   d596e:	9b03      	ldreq	r3, [sp, #12]
   d5970:	7123      	strbeq	r3, [r4, #4]
}
   d5972:	e7e6      	b.n	d5942 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d5974:	000dc59c 	.word	0x000dc59c
   d5978:	000dc59f 	.word	0x000dc59f
   d597c:	000dc437 	.word	0x000dc437

000d5980 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d5980:	b510      	push	{r4, lr}
   d5982:	4b04      	ldr	r3, [pc, #16]	; (d5994 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d5984:	6003      	str	r3, [r0, #0]
   d5986:	2300      	movs	r3, #0
   d5988:	4604      	mov	r4, r0
   d598a:	6043      	str	r3, [r0, #4]
    parse(str);
   d598c:	f7ff ffc2 	bl	d5914 <_ZN12LocalTimeHMS5parseEPKc>
}
   d5990:	4620      	mov	r0, r4
   d5992:	bd10      	pop	{r4, pc}
   d5994:	000dc604 	.word	0x000dc604

000d5998 <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d5998:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d599a:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d599c:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d599e:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d59a0:	7003      	strb	r3, [r0, #0]
   d59a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d59a6:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d59aa:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d59ae:	490a      	ldr	r1, [pc, #40]	; (d59d8 <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d59b0:	301c      	adds	r0, #28
   d59b2:	f7ff ffe5 	bl	d5980 <_ZN12LocalTimeHMSC1EPKc>
   d59b6:	4909      	ldr	r1, [pc, #36]	; (d59dc <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d59b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d59bc:	f7ff ffe0 	bl	d5980 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d59c0:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d59c4:	4906      	ldr	r1, [pc, #24]	; (d59e0 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d59c6:	6365      	str	r5, [r4, #52]	; 0x34
   d59c8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d59cc:	f005 f833 	bl	daa36 <_ZN6StringC1EPKc>
   d59d0:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d59d2:	4620      	mov	r0, r4
   d59d4:	bd38      	pop	{r3, r4, r5, pc}
   d59d6:	bf00      	nop
   d59d8:	000dc5a5 	.word	0x000dc5a5
   d59dc:	000dc5ae 	.word	0x000dc5ae
   d59e0:	000dca30 	.word	0x000dca30

000d59e4 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d59e4:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d59e8:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d59ec:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d59f0:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d59f2:	bfb8      	it	lt
   d59f4:	4808      	ldrlt	r0, [pc, #32]	; (d5a18 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d59f6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d59fa:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d59fe:	bfbd      	ittte	lt
   d5a00:	fb00 2003 	mlalt	r0, r0, r3, r2
   d5a04:	1840      	addlt	r0, r0, r1
   d5a06:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d5a08:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d5a0c:	bfa4      	itt	ge
   d5a0e:	fb00 2303 	mlage	r3, r0, r3, r2
   d5a12:	1858      	addge	r0, r3, r1
}
   d5a14:	4770      	bx	lr
   d5a16:	bf00      	nop
   d5a18:	fffff1f0 	.word	0xfffff1f0

000d5a1c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d5a1c:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d5a20:	b943      	cbnz	r3, d5a34 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d5a22:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d5a26:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d5a28:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d5a2c:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d5a2e:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d5a32:	600b      	str	r3, [r1, #0]
}
   d5a34:	4770      	bx	lr

000d5a36 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d5a36:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d5a3a:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d5a3c:	b9b3      	cbnz	r3, d5a6c <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d5a3e:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d5a42:	688c      	ldr	r4, [r1, #8]
   d5a44:	442c      	add	r4, r5
   d5a46:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d5a4a:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d5a4c:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d5a50:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d5a52:	bfb5      	itete	lt
   d5a54:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d5a56:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d5a58:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d5a5a:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d5a5c:	bfb5      	itete	lt
   d5a5e:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d5a62:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d5a66:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d5a68:	189b      	addge	r3, r3, r2
   d5a6a:	600b      	str	r3, [r1, #0]
}
   d5a6c:	bd30      	pop	{r4, r5, pc}

000d5a6e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d5a6e:	b538      	push	{r3, r4, r5, lr}
   d5a70:	6844      	ldr	r4, [r0, #4]
   d5a72:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d5a74:	68ab      	ldr	r3, [r5, #8]
   d5a76:	42a3      	cmp	r3, r4
   d5a78:	d007      	beq.n	d5a8a <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	f7ff ff24 	bl	d58c8 <_ZNK12LocalTimeYMD9compareToES_>
   d5a80:	3404      	adds	r4, #4
        if (*it == ymd) {
   d5a82:	2800      	cmp	r0, #0
   d5a84:	d1f6      	bne.n	d5a74 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d5a86:	2001      	movs	r0, #1
}
   d5a88:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d5a8a:	2000      	movs	r0, #0
   d5a8c:	e7fc      	b.n	d5a88 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d5a8e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d5a8e:	b538      	push	{r3, r4, r5, lr}
   d5a90:	6904      	ldr	r4, [r0, #16]
   d5a92:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d5a94:	696b      	ldr	r3, [r5, #20]
   d5a96:	42a3      	cmp	r3, r4
   d5a98:	d007      	beq.n	d5aaa <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	f7ff ff14 	bl	d58c8 <_ZNK12LocalTimeYMD9compareToES_>
   d5aa0:	3404      	adds	r4, #4
        if (*it == ymd) {
   d5aa2:	2800      	cmp	r0, #0
   d5aa4:	d1f6      	bne.n	d5a94 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d5aa6:	2001      	movs	r0, #1
}
   d5aa8:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d5aaa:	2000      	movs	r0, #0
   d5aac:	e7fc      	b.n	d5aa8 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d5aae <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d5aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5ab0:	4605      	mov	r5, r0
   d5ab2:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d5ab4:	f7ff ffeb 	bl	d5a8e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d5ab8:	b990      	cbnz	r0, d5ae0 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d5aba:	a801      	add	r0, sp, #4
   d5abc:	9101      	str	r1, [sp, #4]
   d5abe:	f7ff febe 	bl	d583e <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d5ac2:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d5ac4:	4631      	mov	r1, r6
   d5ac6:	fa43 f400 	asr.w	r4, r3, r0
   d5aca:	4628      	mov	r0, r5
   d5acc:	f7ff ffcf 	bl	d5a6e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d5ad0:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d5ad4:	2c00      	cmp	r4, #0
   d5ad6:	bf08      	it	eq
   d5ad8:	4604      	moveq	r4, r0
}
   d5ada:	4620      	mov	r0, r4
   d5adc:	b002      	add	sp, #8
   d5ade:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d5ae0:	2400      	movs	r4, #0
   d5ae2:	e7fa      	b.n	d5ada <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d5ae4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d5ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d5ae8:	2400      	movs	r4, #0
   d5aea:	6845      	ldr	r5, [r0, #4]
   d5aec:	4680      	mov	r8, r0
   d5aee:	4626      	mov	r6, r4
   d5af0:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d5af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d5af6:	429d      	cmp	r5, r3
   d5af8:	d01e      	beq.n	d5b38 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d5afa:	f367 0916 	bfi	r9, r7, #0, #23
   d5afe:	f366 59da 	bfi	r9, r6, #23, #4
   d5b02:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d5b06:	f1b9 0f00 	cmp.w	r9, #0
   d5b0a:	d109      	bne.n	d5b20 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d5b0c:	682f      	ldr	r7, [r5, #0]
   d5b0e:	886e      	ldrh	r6, [r5, #2]
   d5b10:	78ec      	ldrb	r4, [r5, #3]
   d5b12:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d5b16:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d5b1a:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d5b1c:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d5b1e:	e7e8      	b.n	d5af2 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d5b20:	f367 0116 	bfi	r1, r7, #0, #23
   d5b24:	f366 51da 	bfi	r1, r6, #23, #4
   d5b28:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d5b2c:	4628      	mov	r0, r5
   d5b2e:	f7ff fecb 	bl	d58c8 <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d5b32:	2800      	cmp	r0, #0
   d5b34:	dcea      	bgt.n	d5b0c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d5b36:	e7f1      	b.n	d5b1c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d5b38:	2000      	movs	r0, #0
   d5b3a:	f367 0016 	bfi	r0, r7, #0, #23
   d5b3e:	f366 50da 	bfi	r0, r6, #23, #4
   d5b42:	f364 60df 	bfi	r0, r4, #27, #5
}
   d5b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d5b4c <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d5b4c:	4a05      	ldr	r2, [pc, #20]	; (d5b64 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d5b4e:	b508      	push	{r3, lr}
   d5b50:	6002      	str	r2, [r0, #0]
   d5b52:	2200      	movs	r2, #0
   d5b54:	4603      	mov	r3, r0
   d5b56:	6042      	str	r2, [r0, #4]
   d5b58:	3008      	adds	r0, #8
   d5b5a:	f7ff fed3 	bl	d5904 <_ZN12LocalTimeHMSC1Ev>
}
   d5b5e:	4618      	mov	r0, r3
   d5b60:	bd08      	pop	{r3, pc}
   d5b62:	bf00      	nop
   d5b64:	000dc614 	.word	0x000dc614

000d5b68 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d5b68:	2300      	movs	r3, #0
   d5b6a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d5b6c:	8183      	strh	r3, [r0, #12]
   d5b6e:	7383      	strb	r3, [r0, #14]
}
   d5b70:	4770      	bx	lr
	...

000d5b74 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d5b74:	b530      	push	{r4, r5, lr}
   d5b76:	4604      	mov	r4, r0
   d5b78:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d5b7a:	460d      	mov	r5, r1
   d5b7c:	b111      	cbz	r1, d5b84 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d5b7e:	780b      	ldrb	r3, [r1, #0]
   d5b80:	2b4d      	cmp	r3, #77	; 0x4d
   d5b82:	d003      	beq.n	d5b8c <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d5b84:	4620      	mov	r0, r4
   d5b86:	f7ff ffef 	bl	d5b68 <_ZN15LocalTimeChange5clearEv>
   d5b8a:	e01b      	b.n	d5bc4 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d5b8c:	ab05      	add	r3, sp, #20
   d5b8e:	9300      	str	r3, [sp, #0]
   d5b90:	490f      	ldr	r1, [pc, #60]	; (d5bd0 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d5b92:	ab04      	add	r3, sp, #16
   d5b94:	aa03      	add	r2, sp, #12
   d5b96:	4628      	mov	r0, r5
   d5b98:	f002 feac 	bl	d88f4 <sscanf>
   d5b9c:	2803      	cmp	r0, #3
   d5b9e:	d1f1      	bne.n	d5b84 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d5ba0:	9b03      	ldr	r3, [sp, #12]
   d5ba2:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d5ba4:	9b04      	ldr	r3, [sp, #16]
   d5ba6:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d5ba8:	9b05      	ldr	r3, [sp, #20]
   d5baa:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d5bac:	212f      	movs	r1, #47	; 0x2f
   d5bae:	4628      	mov	r0, r5
   d5bb0:	f006 f8e0 	bl	dbd74 <strchr>
        if (cp) {
   d5bb4:	b140      	cbz	r0, d5bc8 <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d5bb6:	1c41      	adds	r1, r0, #1
   d5bb8:	f104 0008 	add.w	r0, r4, #8
   d5bbc:	f7ff feaa 	bl	d5914 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d5bc0:	2301      	movs	r3, #1
   d5bc2:	71e3      	strb	r3, [r4, #7]
}
   d5bc4:	b007      	add	sp, #28
   d5bc6:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d5bc8:	81a0      	strh	r0, [r4, #12]
   d5bca:	73a0      	strb	r0, [r4, #14]
}
   d5bcc:	e7f8      	b.n	d5bc0 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d5bce:	bf00      	nop
   d5bd0:	000dc5b7 	.word	0x000dc5b7

000d5bd4 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d5bd4:	4b10      	ldr	r3, [pc, #64]	; (d5c18 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d5bd6:	4911      	ldr	r1, [pc, #68]	; (d5c1c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d5bd8:	b510      	push	{r4, lr}
   d5bda:	4604      	mov	r4, r0
   d5bdc:	f840 3b04 	str.w	r3, [r0], #4
   d5be0:	f004 ff29 	bl	daa36 <_ZN6StringC1EPKc>
   d5be4:	f104 0014 	add.w	r0, r4, #20
   d5be8:	f7ff fe8c 	bl	d5904 <_ZN12LocalTimeHMSC1Ev>
   d5bec:	490b      	ldr	r1, [pc, #44]	; (d5c1c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d5bee:	f104 001c 	add.w	r0, r4, #28
   d5bf2:	f004 ff20 	bl	daa36 <_ZN6StringC1EPKc>
   d5bf6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5bfa:	f7ff fe83 	bl	d5904 <_ZN12LocalTimeHMSC1Ev>
   d5bfe:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5c02:	f7ff ffa3 	bl	d5b4c <_ZN15LocalTimeChangeC1Ev>
   d5c06:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5c0a:	f7ff ff9f 	bl	d5b4c <_ZN15LocalTimeChangeC1Ev>
   d5c0e:	2300      	movs	r3, #0
   d5c10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d5c14:	4620      	mov	r0, r4
   d5c16:	bd10      	pop	{r4, pc}
   d5c18:	000dc624 	.word	0x000dc624
   d5c1c:	000dca30 	.word	0x000dca30

000d5c20 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d5c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c24:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d5c26:	4608      	mov	r0, r1
   d5c28:	f006 f8ce 	bl	dbdc8 <strdup>
    size_t ii = 0;
   d5c2c:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d5c2e:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d5c30:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d5c32:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d5c36:	493f      	ldr	r1, [pc, #252]	; (d5d34 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d5c38:	9801      	ldr	r0, [sp, #4]
   d5c3a:	aa01      	add	r2, sp, #4
   d5c3c:	f006 f94a 	bl	dbed4 <strtok_r>
   d5c40:	4601      	mov	r1, r0
   d5c42:	2800      	cmp	r0, #0
   d5c44:	d062      	beq.n	d5d0c <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d5c46:	2d01      	cmp	r5, #1
   d5c48:	f105 0301 	add.w	r3, r5, #1
   d5c4c:	d053      	beq.n	d5cf6 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d5c4e:	2d02      	cmp	r5, #2
   d5c50:	d056      	beq.n	d5d00 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d5c52:	2d00      	cmp	r5, #0
   d5c54:	d146      	bne.n	d5ce4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d5c56:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d5c58:	f892 9000 	ldrb.w	r9, [r2]
   d5c5c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d5c60:	4615      	mov	r5, r2
   d5c62:	4617      	mov	r7, r2
   d5c64:	f102 0201 	add.w	r2, r2, #1
   d5c68:	d8f6      	bhi.n	d5c58 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d5c6e:	f104 001c 	add.w	r0, r4, #28
   d5c72:	f004 ff36 	bl	daae2 <_ZN6StringaSEPKc>
                valid = true;
   d5c76:	2201      	movs	r2, #1
                *cp = save2;
   d5c78:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d5c7c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d5c80:	782a      	ldrb	r2, [r5, #0]
   d5c82:	b36a      	cbz	r2, d5ce0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d5c84:	f897 a000 	ldrb.w	sl, [r7]
   d5c88:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d5c8c:	2a3f      	cmp	r2, #63	; 0x3f
   d5c8e:	46b9      	mov	r9, r7
   d5c90:	46bb      	mov	fp, r7
   d5c92:	f107 0701 	add.w	r7, r7, #1
   d5c96:	d9f5      	bls.n	d5c84 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d5c98:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d5c9a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d5c9e:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d5ca2:	4629      	mov	r1, r5
   d5ca4:	4638      	mov	r0, r7
   d5ca6:	f7ff fe35 	bl	d5914 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d5caa:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d5cae:	f1ba 0f00 	cmp.w	sl, #0
   d5cb2:	d015      	beq.n	d5ce0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d5cb4:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d5cb6:	f81b ab01 	ldrb.w	sl, [fp], #1
   d5cba:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d5cbe:	d8f9      	bhi.n	d5cb4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d5cc0:	2200      	movs	r2, #0
   d5cc2:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d5cc4:	4649      	mov	r1, r9
   d5cc6:	1d20      	adds	r0, r4, #4
   d5cc8:	f004 ff0b 	bl	daae2 <_ZN6StringaSEPKc>
                        *cp = save2;
   d5ccc:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d5cd0:	f104 0014 	add.w	r0, r4, #20
   d5cd4:	f1ba 0f00 	cmp.w	sl, #0
   d5cd8:	d006      	beq.n	d5ce8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d5cda:	4629      	mov	r1, r5
   d5cdc:	f7ff fe1a 	bl	d5914 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d5ce0:	2501      	movs	r5, #1
   d5ce2:	e7a8      	b.n	d5c36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d5ce4:	461d      	mov	r5, r3
   d5ce6:	e7a6      	b.n	d5c36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d5ce8:	4639      	mov	r1, r7
   d5cea:	f7ff fd27 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d5cee:	7e23      	ldrb	r3, [r4, #24]
   d5cf0:	3b01      	subs	r3, #1
   d5cf2:	7623      	strb	r3, [r4, #24]
   d5cf4:	e7f4      	b.n	d5ce0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d5cf6:	4640      	mov	r0, r8
   d5cf8:	f7ff ff3c 	bl	d5b74 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d5cfc:	2502      	movs	r5, #2
   d5cfe:	e79a      	b.n	d5c36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d5d00:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5d04:	f7ff ff36 	bl	d5b74 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d5d08:	2503      	movs	r5, #3
   d5d0a:	e794      	b.n	d5c36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d5d0c:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d5d10:	b143      	cbz	r3, d5d24 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d5d12:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d5d16:	b92a      	cbnz	r2, d5d24 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d5d18:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5d1c:	f7ff ff24 	bl	d5b68 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d5d20:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d5d24:	4630      	mov	r0, r6
   d5d26:	f002 fdcd 	bl	d88c4 <free>
}
   d5d2a:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d5d2e:	b003      	add	sp, #12
   d5d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d34:	000dc5c1 	.word	0x000dc5c1

000d5d38 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d5d38:	b538      	push	{r3, r4, r5, lr}
   d5d3a:	4b13      	ldr	r3, [pc, #76]	; (d5d88 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d5d3c:	4604      	mov	r4, r0
   d5d3e:	460d      	mov	r5, r1
   d5d40:	f840 3b04 	str.w	r3, [r0], #4
   d5d44:	4911      	ldr	r1, [pc, #68]	; (d5d8c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5d46:	f004 fe76 	bl	daa36 <_ZN6StringC1EPKc>
   d5d4a:	f104 0014 	add.w	r0, r4, #20
   d5d4e:	f7ff fdd9 	bl	d5904 <_ZN12LocalTimeHMSC1Ev>
   d5d52:	490e      	ldr	r1, [pc, #56]	; (d5d8c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d5d54:	f104 001c 	add.w	r0, r4, #28
   d5d58:	f004 fe6d 	bl	daa36 <_ZN6StringC1EPKc>
   d5d5c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5d60:	f7ff fdd0 	bl	d5904 <_ZN12LocalTimeHMSC1Ev>
   d5d64:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5d68:	f7ff fef0 	bl	d5b4c <_ZN15LocalTimeChangeC1Ev>
   d5d6c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5d70:	f7ff feec 	bl	d5b4c <_ZN15LocalTimeChangeC1Ev>
   d5d74:	2300      	movs	r3, #0
   d5d76:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d5d7a:	4629      	mov	r1, r5
   d5d7c:	4620      	mov	r0, r4
   d5d7e:	f7ff ff4f 	bl	d5c20 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d5d82:	4620      	mov	r0, r4
   d5d84:	bd38      	pop	{r3, r4, r5, pc}
   d5d86:	bf00      	nop
   d5d88:	000dc624 	.word	0x000dc624
   d5d8c:	000dca30 	.word	0x000dca30

000d5d90 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d5d94:	f7ff fdb6 	bl	d5904 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d5d98:	688a      	ldr	r2, [r1, #8]
   d5d9a:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d5d9c:	684a      	ldr	r2, [r1, #4]
   d5d9e:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d5da0:	680a      	ldr	r2, [r1, #0]
   d5da2:	719a      	strb	r2, [r3, #6]
}
   d5da4:	4618      	mov	r0, r3
   d5da6:	bd08      	pop	{r3, pc}

000d5da8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d5da8:	b513      	push	{r0, r1, r4, lr}
   d5daa:	4b07      	ldr	r3, [pc, #28]	; (d5dc8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d5dac:	6003      	str	r3, [r0, #0]
   d5dae:	2300      	movs	r3, #0
   d5db0:	4604      	mov	r4, r0
   d5db2:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d5db4:	4668      	mov	r0, sp
   d5db6:	f7ff ffeb 	bl	d5d90 <_ZNK14LocalTimeValue3hmsEv>
   d5dba:	4669      	mov	r1, sp
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	f7ff fcbd 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
}
   d5dc2:	4620      	mov	r0, r4
   d5dc4:	b002      	add	sp, #8
   d5dc6:	bd10      	pop	{r4, pc}
   d5dc8:	000dc604 	.word	0x000dc604

000d5dcc <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d5dcc:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d5dd0:	b943      	cbnz	r3, d5de4 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d5dd2:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d5dd6:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d5dd8:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d5ddc:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d5dde:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d5de2:	6003      	str	r3, [r0, #0]
}
   d5de4:	4770      	bx	lr

000d5de6 <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d5de6:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d5de8:	2300      	movs	r3, #0
   d5dea:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d5dec:	a801      	add	r0, sp, #4
   d5dee:	9301      	str	r3, [sp, #4]
   d5df0:	f7ff fd13 	bl	d581a <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d5df4:	9801      	ldr	r0, [sp, #4]
   d5df6:	b003      	add	sp, #12
   d5df8:	f85d fb04 	ldr.w	pc, [sp], #4

000d5dfc <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d5dfc:	4b19      	ldr	r3, [pc, #100]	; (d5e64 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d5dfe:	b570      	push	{r4, r5, r6, lr}
   d5e00:	4604      	mov	r4, r0
   d5e02:	460d      	mov	r5, r1
   d5e04:	f840 3b04 	str.w	r3, [r0], #4
   d5e08:	3104      	adds	r1, #4
   d5e0a:	f004 fe5f 	bl	daacc <_ZN6StringC1ERKS_>
   d5e0e:	f105 0114 	add.w	r1, r5, #20
   d5e12:	f104 0014 	add.w	r0, r4, #20
   d5e16:	f7ff fc89 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d5e1a:	f105 011c 	add.w	r1, r5, #28
   d5e1e:	f104 001c 	add.w	r0, r4, #28
   d5e22:	f004 fe53 	bl	daacc <_ZN6StringC1ERKS_>
   d5e26:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d5e2a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5e2e:	f7ff fc7d 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d5e32:	4e0d      	ldr	r6, [pc, #52]	; (d5e68 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d5e34:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5e36:	63a3      	str	r3, [r4, #56]	; 0x38
   d5e38:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d5e3c:	6366      	str	r6, [r4, #52]	; 0x34
   d5e3e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5e42:	f7ff fc73 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d5e46:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d5e48:	64a3      	str	r3, [r4, #72]	; 0x48
   d5e4a:	6466      	str	r6, [r4, #68]	; 0x44
   d5e4c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5e50:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d5e54:	f7ff fc6a 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d5e58:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d5e5c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5e60:	4620      	mov	r0, r4
   d5e62:	bd70      	pop	{r4, r5, r6, pc}
   d5e64:	000dc624 	.word	0x000dc624
   d5e68:	000dc614 	.word	0x000dc614

000d5e6c <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d5e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e6e:	460c      	mov	r4, r1
   d5e70:	f851 3b04 	ldr.w	r3, [r1], #4
   d5e74:	4607      	mov	r7, r0
   d5e76:	f840 3b04 	str.w	r3, [r0], #4
   d5e7a:	f7ff ffbf 	bl	d5dfc <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d5e7e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d5e82:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d5e86:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d5e8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5e8c:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d5e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5e92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5e96:	6833      	ldr	r3, [r6, #0]
   d5e98:	602b      	str	r3, [r5, #0]
   d5e9a:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d5e9e:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d5ea2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d5ea6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5ea8:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d5eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5eae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5eb2:	6833      	ldr	r3, [r6, #0]
   d5eb4:	602b      	str	r3, [r5, #0]
   d5eb6:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d5eba:	34c8      	adds	r4, #200	; 0xc8
   d5ebc:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d5ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5ec2:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d5ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5ecc:	6823      	ldr	r3, [r4, #0]
   d5ece:	602b      	str	r3, [r5, #0]
   d5ed0:	4638      	mov	r0, r7
   d5ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ed4 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d5ed4:	b510      	push	{r4, lr}
   d5ed6:	4604      	mov	r4, r0
   d5ed8:	3038      	adds	r0, #56	; 0x38
   d5eda:	f004 fd61 	bl	da9a0 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d5ede:	6920      	ldr	r0, [r4, #16]
   d5ee0:	f7ff fbec 	bl	d56bc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d5ee4:	6860      	ldr	r0, [r4, #4]
   d5ee6:	f7ff fbe9 	bl	d56bc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d5eea:	4620      	mov	r0, r4
   d5eec:	bd10      	pop	{r4, pc}

000d5eee <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   d5eee:	b510      	push	{r4, lr}
   d5ef0:	4604      	mov	r4, r0
   d5ef2:	b088      	sub	sp, #32
   d5ef4:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   d5ef6:	3068      	adds	r0, #104	; 0x68
   d5ef8:	a901      	add	r1, sp, #4
   d5efa:	f005 fe75 	bl	dbbe8 <asctime_r>
    int len = strlen(ascstr);
   d5efe:	a801      	add	r0, sp, #4
   d5f00:	f005 ff7f 	bl	dbe02 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d5f04:	ab08      	add	r3, sp, #32
   d5f06:	4418      	add	r0, r3
   d5f08:	2300      	movs	r3, #0
   d5f0a:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   d5f0e:	a901      	add	r1, sp, #4
   d5f10:	4620      	mov	r0, r4
   d5f12:	f004 fd90 	bl	daa36 <_ZN6StringC1EPKc>
}
   d5f16:	4620      	mov	r0, r4
   d5f18:	b008      	add	sp, #32
   d5f1a:	bd10      	pop	{r4, pc}

000d5f1c <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   d5f1c:	b538      	push	{r3, r4, r5, lr}
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   d5f1e:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
   d5f22:	4605      	mov	r5, r0
   d5f24:	460c      	mov	r4, r1
   d5f26:	b13b      	cbz	r3, d5f38 <_ZNK16LocalTimeConvert8zoneNameEv+0x1c>
   d5f28:	f991 303f 	ldrsb.w	r3, [r1, #63]	; 0x3f
   d5f2c:	b953      	cbnz	r3, d5f44 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
   d5f2e:	f101 0030 	add.w	r0, r1, #48	; 0x30
   d5f32:	f7ff fd57 	bl	d59e4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5f36:	b928      	cbnz	r0, d5f44 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
        return "Z";
   d5f38:	4909      	ldr	r1, [pc, #36]	; (d5f60 <_ZNK16LocalTimeConvert8zoneNameEv+0x44>)
   d5f3a:	4628      	mov	r0, r5
   d5f3c:	f004 fd7b 	bl	daa36 <_ZN6StringC1EPKc>
};
   d5f40:	4628      	mov	r0, r5
   d5f42:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   d5f44:	6820      	ldr	r0, [r4, #0]
   d5f46:	f7ff fbaf 	bl	d56a8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d5f4a:	b128      	cbz	r0, d5f58 <_ZNK16LocalTimeConvert8zoneNameEv+0x3c>
        return config.dstName;
   d5f4c:	f104 0108 	add.w	r1, r4, #8
        return config.standardName;
   d5f50:	4628      	mov	r0, r5
   d5f52:	f004 fdbb 	bl	daacc <_ZN6StringC1ERKS_>
   d5f56:	e7f3      	b.n	d5f40 <_ZNK16LocalTimeConvert8zoneNameEv+0x24>
   d5f58:	f104 0120 	add.w	r1, r4, #32
   d5f5c:	e7f8      	b.n	d5f50 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>
   d5f5e:	bf00      	nop
   d5f60:	000dc5c3 	.word	0x000dc5c3

000d5f64 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   d5f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f68:	4680      	mov	r8, r0
   d5f6a:	b0a9      	sub	sp, #164	; 0xa4
   d5f6c:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d5f6e:	4615      	mov	r5, r2
   d5f70:	b12a      	cbz	r2, d5f7e <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   d5f72:	4b4b      	ldr	r3, [pc, #300]	; (d60a0 <_ZN16LocalTimeConvert6formatEPKc+0x13c>)
   d5f74:	4610      	mov	r0, r2
   d5f76:	6819      	ldr	r1, [r3, #0]
   d5f78:	f005 ff13 	bl	dbda2 <strcmp>
   d5f7c:	b938      	cbnz	r0, d5f8e <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   d5f7e:	4621      	mov	r1, r4
   d5f80:	4640      	mov	r0, r8
   d5f82:	f7ff ffb4 	bl	d5eee <_ZN16LocalTimeConvert7timeStrEv>
}
   d5f86:	4640      	mov	r0, r8
   d5f88:	b029      	add	sp, #164	; 0xa4
   d5f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d5f8e:	4629      	mov	r1, r5
   d5f90:	223f      	movs	r2, #63	; 0x3f
   d5f92:	a818      	add	r0, sp, #96	; 0x60
   d5f94:	f005 ff4f 	bl	dbe36 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d5f98:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5f9a:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d5f9c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5fa0:	f005 ff2f 	bl	dbe02 <strlen>
    String zoneNameStr = zoneName();
   d5fa4:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d5fa6:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   d5fa8:	a803      	add	r0, sp, #12
   d5faa:	f7ff ffb7 	bl	d5f1c <_ZNK16LocalTimeConvert8zoneNameEv>
   d5fae:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   d5fb2:	b13b      	cbz	r3, d5fc4 <_ZN16LocalTimeConvert6formatEPKc+0x60>
   d5fb4:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d5fb8:	bb83      	cbnz	r3, d601c <_ZN16LocalTimeConvert6formatEPKc+0xb8>
   d5fba:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d5fbe:	f7ff fd11 	bl	d59e4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d5fc2:	bb58      	cbnz	r0, d601c <_ZN16LocalTimeConvert6formatEPKc+0xb8>
        strcpy(time_zone_str, "Z");
   d5fc4:	4937      	ldr	r1, [pc, #220]	; (d60a4 <_ZN16LocalTimeConvert6formatEPKc+0x140>)
   d5fc6:	a807      	add	r0, sp, #28
   d5fc8:	f005 fef5 	bl	dbdb6 <strcpy>
   d5fcc:	af18      	add	r7, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   d5fce:	2600      	movs	r6, #0
    for (size_t i=0; i<len-1; i++)
   d5fd0:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   d5fd4:	45b3      	cmp	fp, r6
   d5fd6:	d94e      	bls.n	d6076 <_ZN16LocalTimeConvert6formatEPKc+0x112>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d5fd8:	46ba      	mov	sl, r7
   d5fda:	f106 0901 	add.w	r9, r6, #1
   d5fde:	f81a 3b01 	ldrb.w	r3, [sl], #1
   d5fe2:	2b25      	cmp	r3, #37	; 0x25
   d5fe4:	d117      	bne.n	d6016 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
   d5fe6:	787b      	ldrb	r3, [r7, #1]
   d5fe8:	2b7a      	cmp	r3, #122	; 0x7a
   d5fea:	d136      	bne.n	d605a <_ZN16LocalTimeConvert6formatEPKc+0xf6>
            size_t tzlen = strlen(time_zone_str);
   d5fec:	a807      	add	r0, sp, #28
   d5fee:	f005 ff08 	bl	dbe02 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5ff2:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   d5ff4:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d5ff6:	1830      	adds	r0, r6, r0
   d5ff8:	ebab 0206 	sub.w	r2, fp, r6
   d5ffc:	1cb9      	adds	r1, r7, #2
   d5ffe:	4418      	add	r0, r3
   d6000:	f005 fe30 	bl	dbc64 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d6004:	462a      	mov	r2, r5
   d6006:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d6008:	4638      	mov	r0, r7
   d600a:	f005 fe2b 	bl	dbc64 <memcpy>
            len = strlen(format_str);
   d600e:	a818      	add	r0, sp, #96	; 0x60
   d6010:	f005 fef7 	bl	dbe02 <strlen>
   d6014:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   d6016:	4657      	mov	r7, sl
   d6018:	464e      	mov	r6, r9
   d601a:	e7d9      	b.n	d5fd0 <_ZN16LocalTimeConvert6formatEPKc+0x6c>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d601c:	6820      	ldr	r0, [r4, #0]
   d601e:	f7ff fb43 	bl	d56a8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6022:	b1b8      	cbz	r0, d6054 <_ZN16LocalTimeConvert6formatEPKc+0xf0>
   d6024:	f104 0018 	add.w	r0, r4, #24
   d6028:	f7ff fcdc 	bl	d59e4 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   d602c:	213c      	movs	r1, #60	; 0x3c
   d602e:	fb90 f3f1 	sdiv	r3, r0, r1
   d6032:	2b00      	cmp	r3, #0
   d6034:	bfb8      	it	lt
   d6036:	425b      	neglt	r3, r3
   d6038:	fbb3 f2f1 	udiv	r2, r3, r1
   d603c:	fb01 3312 	mls	r3, r1, r2, r3
   d6040:	9300      	str	r3, [sp, #0]
   d6042:	4a19      	ldr	r2, [pc, #100]	; (d60a8 <_ZN16LocalTimeConvert6formatEPKc+0x144>)
   d6044:	4b19      	ldr	r3, [pc, #100]	; (d60ac <_ZN16LocalTimeConvert6formatEPKc+0x148>)
   d6046:	fb90 f3f3 	sdiv	r3, r0, r3
   d604a:	2110      	movs	r1, #16
   d604c:	a807      	add	r0, sp, #28
   d604e:	f002 fc59 	bl	d8904 <snprintf>
   d6052:	e7bb      	b.n	d5fcc <_ZN16LocalTimeConvert6formatEPKc+0x68>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d6054:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d6058:	e7e6      	b.n	d6028 <_ZN16LocalTimeConvert6formatEPKc+0xc4>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   d605a:	2b5a      	cmp	r3, #90	; 0x5a
   d605c:	d1db      	bne.n	d6016 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
            size_t tzlen = zoneNameStr.length();
   d605e:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d6060:	ab18      	add	r3, sp, #96	; 0x60
   d6062:	1970      	adds	r0, r6, r5
   d6064:	ebab 0206 	sub.w	r2, fp, r6
   d6068:	1cb9      	adds	r1, r7, #2
   d606a:	4418      	add	r0, r3
   d606c:	f005 fdfa 	bl	dbc64 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d6070:	9903      	ldr	r1, [sp, #12]
   d6072:	462a      	mov	r2, r5
   d6074:	e7c8      	b.n	d6008 <_ZN16LocalTimeConvert6formatEPKc+0xa4>
    char buf[50] = {};
   d6076:	2100      	movs	r1, #0
   d6078:	222e      	movs	r2, #46	; 0x2e
   d607a:	a80c      	add	r0, sp, #48	; 0x30
   d607c:	910b      	str	r1, [sp, #44]	; 0x2c
   d607e:	f005 fe19 	bl	dbcb4 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   d6082:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d6086:	aa18      	add	r2, sp, #96	; 0x60
   d6088:	2132      	movs	r1, #50	; 0x32
   d608a:	a80b      	add	r0, sp, #44	; 0x2c
   d608c:	f002 fc62 	bl	d8954 <strftime>
    return String(buf);    
   d6090:	a90b      	add	r1, sp, #44	; 0x2c
   d6092:	4640      	mov	r0, r8
   d6094:	f004 fccf 	bl	daa36 <_ZN6StringC1EPKc>
    String zoneNameStr = zoneName();
   d6098:	a803      	add	r0, sp, #12
   d609a:	f004 fc81 	bl	da9a0 <_ZN6StringD1Ev>
   d609e:	e772      	b.n	d5f86 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   d60a0:	2003dd3c 	.word	0x2003dd3c
   d60a4:	000dc5c3 	.word	0x000dc5c3
   d60a8:	000dc5c5 	.word	0x000dc5c5
   d60ac:	fffff1f0 	.word	0xfffff1f0

000d60b0 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d60b0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d60b2:	4d09      	ldr	r5, [pc, #36]	; (d60d8 <_ZN9LocalTime8instanceEv+0x28>)
   d60b4:	682b      	ldr	r3, [r5, #0]
   d60b6:	b963      	cbnz	r3, d60d2 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d60b8:	2060      	movs	r0, #96	; 0x60
   d60ba:	f7fd ffec 	bl	d4096 <_Znwj>
   d60be:	4604      	mov	r4, r0
   d60c0:	b130      	cbz	r0, d60d0 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d60c2:	4b06      	ldr	r3, [pc, #24]	; (d60dc <_ZN9LocalTime8instanceEv+0x2c>)
   d60c4:	f840 3b04 	str.w	r3, [r0], #4
   d60c8:	f7ff fd84 	bl	d5bd4 <_ZN22LocalTimePosixTimezoneC1Ev>
   d60cc:	2364      	movs	r3, #100	; 0x64
   d60ce:	65e3      	str	r3, [r4, #92]	; 0x5c
   d60d0:	602c      	str	r4, [r5, #0]
}
   d60d2:	6828      	ldr	r0, [r5, #0]
   d60d4:	bd38      	pop	{r3, r4, r5, pc}
   d60d6:	bf00      	nop
   d60d8:	2003e314 	.word	0x2003e314
   d60dc:	000dc5f4 	.word	0x000dc5f4

000d60e0 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d60e0:	f002 bc50 	b.w	d8984 <mktime>

000d60e4 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d60e4:	3901      	subs	r1, #1
   d60e6:	290b      	cmp	r1, #11
   d60e8:	d815      	bhi.n	d6116 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d60ea:	e8df f001 	tbb	[pc, r1]
   d60ee:	0816      	.short	0x0816
   d60f0:	06160616 	.word	0x06160616
   d60f4:	16061616 	.word	0x16061616
   d60f8:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d60fa:	201e      	movs	r0, #30
   d60fc:	4770      	bx	lr
            if ((year % 4) == 0) {
   d60fe:	0783      	lsls	r3, r0, #30
   d6100:	d10d      	bne.n	d611e <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d6102:	2264      	movs	r2, #100	; 0x64
   d6104:	fb90 f3f2 	sdiv	r3, r0, r2
   d6108:	fb02 0013 	mls	r0, r2, r3, r0
   d610c:	2800      	cmp	r0, #0
                    return 29;
   d610e:	bf0c      	ite	eq
   d6110:	201c      	moveq	r0, #28
   d6112:	201d      	movne	r0, #29
   d6114:	4770      	bx	lr
    return 0;
   d6116:	2000      	movs	r0, #0
   d6118:	4770      	bx	lr
            return 31;
   d611a:	201f      	movs	r0, #31
   d611c:	4770      	bx	lr
                return 28;
   d611e:	201c      	movs	r0, #28
}
   d6120:	4770      	bx	lr

000d6122 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d6122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d6124:	2301      	movs	r3, #1
   d6126:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d6128:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d612c:	3b01      	subs	r3, #1
   d612e:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d6130:	2300      	movs	r3, #0
   d6132:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d6136:	4606      	mov	r6, r0
   d6138:	460c      	mov	r4, r1
   d613a:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d613c:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d613e:	4620      	mov	r0, r4
   d6140:	f7ff ffce 	bl	d60e0 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d6144:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d6148:	69a2      	ldr	r2, [r4, #24]
   d614a:	429a      	cmp	r2, r3
   d614c:	d003      	beq.n	d6156 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d614e:	68e3      	ldr	r3, [r4, #12]
   d6150:	3301      	adds	r3, #1
   d6152:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d6154:	e7f3      	b.n	d613e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d6156:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d615a:	2d01      	cmp	r5, #1
   d615c:	d013      	beq.n	d6186 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d615e:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d6160:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d6162:	3d01      	subs	r5, #1
   d6164:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d6168:	441d      	add	r5, r3
   d616a:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d616c:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d6170:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6174:	f7ff ffb6 	bl	d60e4 <_ZN9LocalTime14lastDayOfMonthEii>
   d6178:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d617a:	bfc4      	itt	gt
   d617c:	3d07      	subgt	r5, #7
   d617e:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d6180:	4620      	mov	r0, r4
   d6182:	f7ff ffad 	bl	d60e0 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d6186:	4621      	mov	r1, r4
   d6188:	f106 0008 	add.w	r0, r6, #8
   d618c:	f7ff fc46 	bl	d5a1c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d6190:	4638      	mov	r0, r7
   d6192:	f7ff fc50 	bl	d5a36 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d6196:	4620      	mov	r0, r4
}
   d6198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d619c:	f002 bbf2 	b.w	d8984 <mktime>

000d61a0 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d61a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d61a2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d61a6:	b085      	sub	sp, #20
   d61a8:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d61aa:	b92b      	cbnz	r3, d61b8 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d61ac:	f7ff ff80 	bl	d60b0 <_ZN9LocalTime8instanceEv>
   d61b0:	1d01      	adds	r1, r0, #4
   d61b2:	1d20      	adds	r0, r4, #4
   d61b4:	f7ff fae6 	bl	d5784 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d61b8:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d61bc:	2b00      	cmp	r3, #0
   d61be:	d069      	beq.n	d6294 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d61c0:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d61c4:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d61c8:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d61ca:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d61cc:	a802      	add	r0, sp, #8
   d61ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d61d2:	f002 fbc7 	bl	d8964 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d61d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d61d8:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d61dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d61de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d61e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d61e2:	6833      	ldr	r3, [r6, #0]
   d61e4:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d61e6:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d61ea:	a802      	add	r0, sp, #8
   d61ec:	f7ff fa9e 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d61f0:	aa02      	add	r2, sp, #8
   d61f2:	4639      	mov	r1, r7
   d61f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d61f8:	f7ff ff93 	bl	d6122 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d61fc:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6200:	f104 0118 	add.w	r1, r4, #24
   d6204:	a802      	add	r0, sp, #8
   d6206:	f7ff fa91 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d620a:	aa02      	add	r2, sp, #8
   d620c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d6210:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6214:	f7ff ff85 	bl	d6122 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d6218:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d621c:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d621e:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6220:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d6222:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6226:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d622a:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d622e:	da24      	bge.n	d627a <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d6230:	42b0      	cmp	r0, r6
   d6232:	eb71 0507 	sbcs.w	r5, r1, r7
   d6236:	da19      	bge.n	d626c <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d6238:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d623a:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d623c:	6820      	ldr	r0, [r4, #0]
   d623e:	f7ff fa33 	bl	d56a8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6242:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d6246:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d624a:	9101      	str	r1, [sp, #4]
   d624c:	bb20      	cbnz	r0, d6298 <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d624e:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d6252:	f7ff fbc7 	bl	d59e4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6256:	1a36      	subs	r6, r6, r0
   d6258:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d625c:	9901      	ldr	r1, [sp, #4]
   d625e:	a802      	add	r0, sp, #8
   d6260:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6264:	f002 fb7e 	bl	d8964 <localtime_r>
}
   d6268:	b005      	add	sp, #20
   d626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d626c:	4290      	cmp	r0, r2
   d626e:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d6272:	bfb4      	ite	lt
   d6274:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d6276:	2302      	movge	r3, #2
   d6278:	e7df      	b.n	d623a <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d627a:	4290      	cmp	r0, r2
   d627c:	eb71 0303 	sbcs.w	r3, r1, r3
   d6280:	da01      	bge.n	d6286 <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d6282:	2303      	movs	r3, #3
   d6284:	e7d9      	b.n	d623a <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d6286:	42b0      	cmp	r0, r6
   d6288:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d628c:	bfb4      	ite	lt
   d628e:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d6290:	2305      	movge	r3, #5
   d6292:	e7d2      	b.n	d623a <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d6294:	2306      	movs	r3, #6
   d6296:	e7d0      	b.n	d623a <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d6298:	f104 0018 	add.w	r0, r4, #24
   d629c:	e7d9      	b.n	d6252 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d629e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d629e:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d62a2:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d62a4:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d62a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d62a8:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d62aa:	ad01      	add	r5, sp, #4
   d62ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d62ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d62b2:	6823      	ldr	r3, [r4, #0]
   d62b4:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d62b6:	a801      	add	r0, sp, #4
   d62b8:	f002 fb64 	bl	d8984 <mktime>
   d62bc:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d62be:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d62c2:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d62c4:	f7ff fb8e 	bl	d59e4 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d62c8:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d62cc:	eb14 0800 	adds.w	r8, r4, r0
   d62d0:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d62d4:	b31b      	cbz	r3, d631e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d62d6:	2306      	movs	r3, #6
   d62d8:	a821      	add	r0, sp, #132	; 0x84
   d62da:	9320      	str	r3, [sp, #128]	; 0x80
   d62dc:	f7ff fc7a 	bl	d5bd4 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d62e0:	4631      	mov	r1, r6
   d62e2:	a80a      	add	r0, sp, #40	; 0x28
   d62e4:	f7ff fd8a 	bl	d5dfc <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d62e8:	a90a      	add	r1, sp, #40	; 0x28
   d62ea:	a821      	add	r0, sp, #132	; 0x84
   d62ec:	f7ff fa4a 	bl	d5784 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d62f0:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d62f2:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d62f6:	f7ff ff53 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
   d62fa:	a80a      	add	r0, sp, #40	; 0x28
   d62fc:	f7ff f9a6 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d6300:	9820      	ldr	r0, [sp, #128]	; 0x80
   d6302:	f7ff f9d1 	bl	d56a8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6306:	b138      	cbz	r0, d6318 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d6308:	f106 0014 	add.w	r0, r6, #20
   d630c:	f7ff fb6a 	bl	d59e4 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6310:	eb14 0800 	adds.w	r8, r4, r0
   d6314:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d6318:	a821      	add	r0, sp, #132	; 0x84
   d631a:	f7ff f997 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d631e:	4640      	mov	r0, r8
   d6320:	4649      	mov	r1, r9
   d6322:	b05c      	add	sp, #368	; 0x170
   d6324:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d6328 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d6328:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d632a:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d632e:	b097      	sub	sp, #92	; 0x5c
   d6330:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d6332:	b9c3      	cbnz	r3, d6366 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d6334:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d6338:	4668      	mov	r0, sp
   d633a:	f7ff f9f7 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d633e:	4669      	mov	r1, sp
   d6340:	4628      	mov	r0, r5
   d6342:	f7ff fd43 	bl	d5dcc <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d6346:	1d21      	adds	r1, r4, #4
   d6348:	4668      	mov	r0, sp
   d634a:	f7ff fd57 	bl	d5dfc <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d634e:	4669      	mov	r1, sp
   d6350:	4628      	mov	r0, r5
   d6352:	f7ff ffa4 	bl	d629e <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d6356:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d635a:	4668      	mov	r0, sp
   d635c:	f7ff f976 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d6360:	4620      	mov	r0, r4
   d6362:	f7ff ff1d 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
}
   d6366:	b017      	add	sp, #92	; 0x5c
   d6368:	bd30      	pop	{r4, r5, pc}
	...

000d636c <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d636c:	b530      	push	{r4, r5, lr}
    time += 86400;
   d636e:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d6372:	4d0b      	ldr	r5, [pc, #44]	; (d63a0 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d6374:	195b      	adds	r3, r3, r5
   d6376:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d637a:	b085      	sub	sp, #20
    time += 86400;
   d637c:	eb45 0202 	adc.w	r2, r5, r2
   d6380:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6384:	4604      	mov	r4, r0
   d6386:	9101      	str	r1, [sp, #4]
    convert();
   d6388:	f7ff ff0a 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d638c:	9901      	ldr	r1, [sp, #4]
   d638e:	a802      	add	r0, sp, #8
   d6390:	f7ff f9cc 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d6394:	a902      	add	r1, sp, #8
   d6396:	4620      	mov	r0, r4
   d6398:	f7ff ffc6 	bl	d6328 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d639c:	b005      	add	sp, #20
   d639e:	bd30      	pop	{r4, r5, pc}
   d63a0:	00015180 	.word	0x00015180

000d63a4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d63a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63a8:	b08a      	sub	sp, #40	; 0x28
   d63aa:	4617      	mov	r7, r2
   d63ac:	4606      	mov	r6, r0
   d63ae:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d63b0:	2224      	movs	r2, #36	; 0x24
   d63b2:	2100      	movs	r1, #0
   d63b4:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d63b6:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d63b8:	f005 fc7c 	bl	dbcb4 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d63bc:	2f06      	cmp	r7, #6
   d63be:	d829      	bhi.n	d6414 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d63c0:	4629      	mov	r1, r5
   d63c2:	4630      	mov	r0, r6
   d63c4:	f7ff fe8e 	bl	d60e4 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d63c8:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d63ca:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d63cc:	dd24      	ble.n	d6418 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d63ce:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d63d2:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d63d4:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d63d6:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d63d8:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d63da:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d63dc:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d63de:	f7ff fe7f 	bl	d60e0 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d63e2:	9a07      	ldr	r2, [sp, #28]
   d63e4:	9b04      	ldr	r3, [sp, #16]
   d63e6:	42ba      	cmp	r2, r7
   d63e8:	d001      	beq.n	d63ee <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d63ea:	3301      	adds	r3, #1
   d63ec:	e7f5      	b.n	d63da <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d63ee:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d63f0:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d63f2:	4294      	cmp	r4, r2
   d63f4:	d106      	bne.n	d6404 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d63f6:	b101      	cbz	r1, d63fa <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d63f8:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d63fa:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d63fc:	4620      	mov	r0, r4
   d63fe:	b00a      	add	sp, #40	; 0x28
   d6400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d6404:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d6406:	4543      	cmp	r3, r8
   d6408:	dc04      	bgt.n	d6414 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d640a:	3201      	adds	r2, #1
   d640c:	2a06      	cmp	r2, #6
   d640e:	f04f 0101 	mov.w	r1, #1
   d6412:	d1ee      	bne.n	d63f2 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d6414:	2400      	movs	r4, #0
   d6416:	e7f1      	b.n	d63fc <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d6418:	d0f0      	beq.n	d63fc <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d641a:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d641c:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d6420:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d6424:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d6426:	a801      	add	r0, sp, #4
   d6428:	f7ff fe5a 	bl	d60e0 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d642c:	9b07      	ldr	r3, [sp, #28]
   d642e:	9904      	ldr	r1, [sp, #16]
   d6430:	42bb      	cmp	r3, r7
   d6432:	d002      	beq.n	d643a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d6434:	3901      	subs	r1, #1
   d6436:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d6438:	e7f5      	b.n	d6426 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d643a:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d643c:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d643e:	4264      	negs	r4, r4
   d6440:	4294      	cmp	r4, r2
   d6442:	dc03      	bgt.n	d644c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d6444:	2800      	cmp	r0, #0
   d6446:	d0d8      	beq.n	d63fa <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d6448:	9104      	str	r1, [sp, #16]
   d644a:	e7d6      	b.n	d63fa <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d644c:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d644e:	2900      	cmp	r1, #0
   d6450:	dde0      	ble.n	d6414 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d6452:	3201      	adds	r2, #1
   d6454:	2a06      	cmp	r2, #6
   d6456:	f04f 0001 	mov.w	r0, #1
   d645a:	d1f1      	bne.n	d6440 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d645c:	e7da      	b.n	d6414 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d6460 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6460:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d6464:	b0cd      	sub	sp, #308	; 0x134
   d6466:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d6468:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d646a:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d646c:	f7ff fcfe 	bl	d5e6c <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d6470:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d6472:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d6474:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d6476:	f7ff fb35 	bl	d5ae4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d647a:	bb58      	cbnz	r0, d64d4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d647c:	a82a      	add	r0, sp, #168	; 0xa8
   d647e:	f7ff fcb2 	bl	d5de6 <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d6482:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d6484:	f7ff fe14 	bl	d60b0 <_ZN9LocalTime8instanceEv>
   d6488:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d648a:	a802      	add	r0, sp, #8
   d648c:	f7ff f9f7 	bl	d587e <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d6490:	f8df a20c 	ldr.w	sl, [pc, #524]	; d66a0 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d6494:	a82a      	add	r0, sp, #168	; 0xa8
   d6496:	f7ff fca6 	bl	d5de6 <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d649a:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d649c:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d649e:	4606      	mov	r6, r0
   d64a0:	a803      	add	r0, sp, #12
   d64a2:	f7ff fa11 	bl	d58c8 <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d64a6:	2800      	cmp	r0, #0
   d64a8:	f300 80f2 	bgt.w	d6690 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d64ac:	4631      	mov	r1, r6
   d64ae:	4620      	mov	r0, r4
   d64b0:	f7ff fafd 	bl	d5aae <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d64b4:	4607      	mov	r7, r0
   d64b6:	2800      	cmp	r0, #0
   d64b8:	f000 8094 	beq.w	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d64bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d64be:	3b01      	subs	r3, #1
   d64c0:	2b04      	cmp	r3, #4
   d64c2:	f200 808f 	bhi.w	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d64c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   d64ca:	0007      	.short	0x0007
   d64cc:	00960007 	.word	0x00960007
   d64d0:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d64d4:	9002      	str	r0, [sp, #8]
   d64d6:	e7db      	b.n	d6490 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d64d8:	a92a      	add	r1, sp, #168	; 0xa8
   d64da:	a807      	add	r0, sp, #28
   d64dc:	f7ff fc58 	bl	d5d90 <_ZNK14LocalTimeValue3hmsEv>
   d64e0:	a907      	add	r1, sp, #28
   d64e2:	4620      	mov	r0, r4
   d64e4:	f7ff f937 	bl	d5756 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d64e8:	2800      	cmp	r0, #0
   d64ea:	da0d      	bge.n	d6508 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d64ec:	f104 011c 	add.w	r1, r4, #28
   d64f0:	a807      	add	r0, sp, #28
   d64f2:	f7ff f91b 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d64f6:	a907      	add	r1, sp, #28
   d64f8:	a810      	add	r0, sp, #64	; 0x40
   d64fa:	f7ff ff15 	bl	d6328 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d64fe:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6502:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d6506:	e094      	b.n	d6632 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d6508:	d16c      	bne.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d650a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d650c:	2b01      	cmp	r3, #1
   d650e:	d025      	beq.n	d655c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d6510:	2b02      	cmp	r3, #2
   d6512:	d167      	bne.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d6514:	f104 011c 	add.w	r1, r4, #28
   d6518:	a804      	add	r0, sp, #16
   d651a:	f7ff f907 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d651e:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d6522:	4649      	mov	r1, r9
   d6524:	a804      	add	r0, sp, #16
   d6526:	f7ff f8e3 	bl	d56f0 <_ZNK12LocalTimeHMS9compareToERKS_>
   d652a:	2800      	cmp	r0, #0
   d652c:	dc5a      	bgt.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d652e:	a904      	add	r1, sp, #16
   d6530:	a807      	add	r0, sp, #28
   d6532:	f7ff f8fb 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d6536:	a907      	add	r1, sp, #28
   d6538:	a810      	add	r0, sp, #64	; 0x40
   d653a:	f7ff fef5 	bl	d6328 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d653e:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d6542:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6546:	4290      	cmp	r0, r2
   d6548:	eb71 0303 	sbcs.w	r3, r1, r3
   d654c:	db41      	blt.n	d65d2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d654e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6552:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d6554:	4413      	add	r3, r2
   d6556:	f88d 3014 	strb.w	r3, [sp, #20]
   d655a:	e7e2      	b.n	d6522 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d655c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d655e:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d6562:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d6566:	213c      	movs	r1, #60	; 0x3c
   d6568:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d656a:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d656e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6572:	1852      	adds	r2, r2, r1
   d6574:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d6578:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d657a:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d657e:	f7ff fe0f 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d6582:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d6586:	a907      	add	r1, sp, #28
   d6588:	a804      	add	r0, sp, #16
   d658a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d658e:	f002 f9e9 	bl	d8964 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d6592:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d6594:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6596:	1b9b      	subs	r3, r3, r6
   d6598:	fb93 f2f1 	sdiv	r2, r3, r1
   d659c:	fb01 3312 	mls	r3, r1, r2, r3
   d65a0:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d65a2:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d65a4:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d65a6:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d65aa:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d65ac:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d65ae:	f002 f9e9 	bl	d8984 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d65b2:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d65b6:	a810      	add	r0, sp, #64	; 0x40
   d65b8:	f7ff fdf2 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d65bc:	a92a      	add	r1, sp, #168	; 0xa8
   d65be:	a804      	add	r0, sp, #16
   d65c0:	f7ff fbf2 	bl	d5da8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d65c4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d65c8:	a804      	add	r0, sp, #16
   d65ca:	f7ff f891 	bl	d56f0 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d65ce:	2800      	cmp	r0, #0
   d65d0:	da08      	bge.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d65d2:	a82a      	add	r0, sp, #168	; 0xa8
   d65d4:	f7ff fc07 	bl	d5de6 <_ZNK14LocalTimeValue3ymdEv>
   d65d8:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d65da:	4620      	mov	r0, r4
   d65dc:	f7ff fa67 	bl	d5aae <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d65e0:	2800      	cmp	r0, #0
   d65e2:	d18c      	bne.n	d64fe <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d65e4:	4651      	mov	r1, sl
   d65e6:	a807      	add	r0, sp, #28
   d65e8:	f7ff f9ca 	bl	d5980 <_ZN12LocalTimeHMSC1EPKc>
   d65ec:	a907      	add	r1, sp, #28
   d65ee:	a810      	add	r0, sp, #64	; 0x40
   d65f0:	f7ff febc 	bl	d636c <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d65f4:	e74e      	b.n	d6494 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d65f6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d65f8:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d65fa:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d65fe:	3101      	adds	r1, #1
   d6600:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6604:	f7ff fece 	bl	d63a4 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d6608:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d660a:	4298      	cmp	r0, r3
   d660c:	d1ea      	bne.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d660e:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d6612:	a807      	add	r0, sp, #28
   d6614:	f7ff f88a 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d6618:	a907      	add	r1, sp, #28
   d661a:	a810      	add	r0, sp, #64	; 0x40
   d661c:	f7ff fe84 	bl	d6328 <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d6620:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d6624:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d6628:	4282      	cmp	r2, r0
   d662a:	418b      	sbcs	r3, r1
   d662c:	dada      	bge.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d662e:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d6632:	4628      	mov	r0, r5
   d6634:	f7ff fdb4 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d6638:	e02b      	b.n	d6692 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d663a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d663c:	2e00      	cmp	r6, #0
   d663e:	da08      	bge.n	d6652 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d6640:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d6642:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d6644:	3101      	adds	r1, #1
   d6646:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d664a:	f7ff fd4b 	bl	d60e4 <_ZN9LocalTime14lastDayOfMonthEii>
   d664e:	4430      	add	r0, r6
   d6650:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d6652:	a82a      	add	r0, sp, #168	; 0xa8
   d6654:	f7ff fbc7 	bl	d5de6 <_ZNK14LocalTimeValue3ymdEv>
   d6658:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d665c:	d1c2      	bne.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d665e:	a92a      	add	r1, sp, #168	; 0xa8
   d6660:	a807      	add	r0, sp, #28
   d6662:	f7ff fb95 	bl	d5d90 <_ZNK14LocalTimeValue3hmsEv>
   d6666:	a907      	add	r1, sp, #28
   d6668:	4620      	mov	r0, r4
   d666a:	f7ff f874 	bl	d5756 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d666e:	2800      	cmp	r0, #0
   d6670:	dcb8      	bgt.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d6672:	e7cc      	b.n	d660e <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d6674:	a92a      	add	r1, sp, #168	; 0xa8
   d6676:	a807      	add	r0, sp, #28
   d6678:	f7ff fb8a 	bl	d5d90 <_ZNK14LocalTimeValue3hmsEv>
   d667c:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d6680:	a807      	add	r0, sp, #28
   d6682:	9101      	str	r1, [sp, #4]
   d6684:	f7ff f834 	bl	d56f0 <_ZNK12LocalTimeHMS9compareToERKS_>
   d6688:	2800      	cmp	r0, #0
   d668a:	9901      	ldr	r1, [sp, #4]
   d668c:	dcaa      	bgt.n	d65e4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d668e:	e7c0      	b.n	d6612 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d6690:	2700      	movs	r7, #0
class LocalTimeConvert {
   d6692:	a811      	add	r0, sp, #68	; 0x44
   d6694:	f7fe ffda 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d6698:	4638      	mov	r0, r7
   d669a:	b04d      	add	sp, #308	; 0x134
   d669c:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d66a0:	000dc5a5 	.word	0x000dc5a5

000d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d66a4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d66a6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d66a8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d66aa:	b17c      	cbz	r4, d66cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d66ac:	6863      	ldr	r3, [r4, #4]
   d66ae:	3b01      	subs	r3, #1
   d66b0:	6063      	str	r3, [r4, #4]
   d66b2:	b95b      	cbnz	r3, d66cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d66b4:	6823      	ldr	r3, [r4, #0]
   d66b6:	4620      	mov	r0, r4
   d66b8:	689b      	ldr	r3, [r3, #8]
   d66ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d66bc:	68a3      	ldr	r3, [r4, #8]
   d66be:	3b01      	subs	r3, #1
   d66c0:	60a3      	str	r3, [r4, #8]
   d66c2:	b91b      	cbnz	r3, d66cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d66c4:	6823      	ldr	r3, [r4, #0]
   d66c6:	4620      	mov	r0, r4
   d66c8:	68db      	ldr	r3, [r3, #12]
   d66ca:	4798      	blx	r3
      }
   d66cc:	4628      	mov	r0, r5
   d66ce:	bd38      	pop	{r3, r4, r5, pc}

000d66d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d66d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d66d2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d66d4:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d66d6:	4668      	mov	r0, sp
   d66d8:	f7ff f801 	bl	d56de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d66dc:	466a      	mov	r2, sp
   d66de:	4629      	mov	r1, r5
   d66e0:	4620      	mov	r0, r4
   d66e2:	f002 fee3 	bl	d94ac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d66e6:	a801      	add	r0, sp, #4
   d66e8:	f7ff ffdc 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d66ec:	4620      	mov	r0, r4
   d66ee:	b003      	add	sp, #12
   d66f0:	bd30      	pop	{r4, r5, pc}

000d66f2 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d66f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d66f4:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d66f6:	4604      	mov	r4, r0
   d66f8:	4668      	mov	r0, sp
   d66fa:	f7fe fff0 	bl	d56de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d66fe:	466a      	mov	r2, sp
   d6700:	4629      	mov	r1, r5
   d6702:	4620      	mov	r0, r4
   d6704:	f002 feae 	bl	d9464 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d6708:	a801      	add	r0, sp, #4
   d670a:	f7ff ffcb 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d670e:	4620      	mov	r0, r4
   d6710:	b003      	add	sp, #12
   d6712:	bd30      	pop	{r4, r5, pc}

000d6714 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6714:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d6716:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6718:	4604      	mov	r4, r0
   d671a:	4668      	mov	r0, sp
   d671c:	f7fe ffdf 	bl	d56de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d6720:	466a      	mov	r2, sp
   d6722:	4629      	mov	r1, r5
   d6724:	4620      	mov	r0, r4
   d6726:	f002 fe46 	bl	d93b6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d672a:	a801      	add	r0, sp, #4
   d672c:	f7ff ffba 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6730:	4620      	mov	r0, r4
   d6732:	b003      	add	sp, #12
   d6734:	bd30      	pop	{r4, r5, pc}

000d6736 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d6736:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6738:	e9d1 3600 	ldrd	r3, r6, [r1]
   d673c:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d673e:	2300      	movs	r3, #0
   d6740:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d6744:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6746:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d6748:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d674a:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d674c:	f7fe ffba 	bl	d56c4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d6750:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d6754:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d6758:	4406      	add	r6, r0
   d675a:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d675c:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d675e:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d6760:	4293      	cmp	r3, r2
   d6762:	d005      	beq.n	d6770 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6764:	b109      	cbz	r1, d676a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d6766:	6816      	ldr	r6, [r2, #0]
   d6768:	600e      	str	r6, [r1, #0]
   d676a:	3104      	adds	r1, #4
   d676c:	3204      	adds	r2, #4
   d676e:	e7f7      	b.n	d6760 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d6770:	1b5b      	subs	r3, r3, r5
   d6772:	4418      	add	r0, r3
   d6774:	6060      	str	r0, [r4, #4]
      }
   d6776:	4620      	mov	r0, r4
   d6778:	bd70      	pop	{r4, r5, r6, pc}

000d677a <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d677a:	b538      	push	{r3, r4, r5, lr}
   d677c:	460d      	mov	r5, r1
   d677e:	f811 3b04 	ldrb.w	r3, [r1], #4
   d6782:	4604      	mov	r4, r0
   d6784:	f800 3b04 	strb.w	r3, [r0], #4
   d6788:	f7ff ffd5 	bl	d6736 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d678c:	f105 0110 	add.w	r1, r5, #16
   d6790:	f104 0010 	add.w	r0, r4, #16
   d6794:	f7ff ffcf 	bl	d6736 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d6798:	4620      	mov	r0, r4
   d679a:	bd38      	pop	{r3, r4, r5, pc}

000d679c <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d679c:	b538      	push	{r3, r4, r5, lr}
   d679e:	4604      	mov	r4, r0
   d67a0:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d67a2:	f7ff ffea 	bl	d677a <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d67a6:	f105 011c 	add.w	r1, r5, #28
   d67aa:	f104 001c 	add.w	r0, r4, #28
   d67ae:	f7fe ffbd 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
   d67b2:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d67b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d67ba:	f7fe ffb7 	bl	d572c <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d67be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d67c0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d67c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d67c4:	6323      	str	r3, [r4, #48]	; 0x30
   d67c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d67c8:	6363      	str	r3, [r4, #52]	; 0x34
   d67ca:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d67ce:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d67d2:	f004 f97b 	bl	daacc <_ZN6StringC1ERKS_>
   d67d6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d67d8:	64a3      	str	r3, [r4, #72]	; 0x48
   d67da:	4620      	mov	r0, r4
   d67dc:	bd38      	pop	{r3, r4, r5, pc}

000d67de <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d67de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d67e2:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d67e6:	b0d1      	sub	sp, #324	; 0x144
   d67e8:	4681      	mov	r9, r0
   d67ea:	460c      	mov	r4, r1
   d67ec:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d67ee:	2600      	movs	r6, #0
   d67f0:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d67f2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d67f6:	4543      	cmp	r3, r8
   d67f8:	d029      	beq.n	d684e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d67fa:	4641      	mov	r1, r8
   d67fc:	a801      	add	r0, sp, #4
   d67fe:	f7ff ffcd 	bl	d679c <_ZN21LocalTimeScheduleItemC1ERKS_>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6802:	68ab      	ldr	r3, [r5, #8]
   d6804:	b90b      	cbnz	r3, d680a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d6806:	f004 fdfd 	bl	db404 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d680a:	68eb      	ldr	r3, [r5, #12]
   d680c:	a901      	add	r1, sp, #4
   d680e:	4628      	mov	r0, r5
   d6810:	4798      	blx	r3
        if (filter(item)) {
   d6812:	b1b0      	cbz	r0, d6842 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d6814:	4621      	mov	r1, r4
   d6816:	a814      	add	r0, sp, #80	; 0x50
   d6818:	f7ff fb28 	bl	d5e6c <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d681c:	a914      	add	r1, sp, #80	; 0x50
   d681e:	a801      	add	r0, sp, #4
   d6820:	f7ff fe1e 	bl	d6460 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d6824:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d6828:	b110      	cbz	r0, d6830 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d682a:	ea56 0107 	orrs.w	r1, r6, r7
   d682e:	d003      	beq.n	d6838 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d6830:	42b2      	cmp	r2, r6
   d6832:	eb73 0107 	sbcs.w	r1, r3, r7
   d6836:	da01      	bge.n	d683c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d6838:	4616      	mov	r6, r2
   d683a:	461f      	mov	r7, r3
class LocalTimeConvert {
   d683c:	a815      	add	r0, sp, #84	; 0x54
   d683e:	f7fe ff05 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d6842:	a801      	add	r0, sp, #4
   d6844:	f7ff fb46 	bl	d5ed4 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d6848:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d684c:	e7d1      	b.n	d67f2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d684e:	ea56 0307 	orrs.w	r3, r6, r7
   d6852:	d008      	beq.n	d6866 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d6854:	4620      	mov	r0, r4
        conv.time = closestTime;
   d6856:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d685a:	f7ff fca1 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d685e:	2001      	movs	r0, #1
}
   d6860:	b051      	add	sp, #324	; 0x144
   d6862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d6866:	2000      	movs	r0, #0
   d6868:	e7fa      	b.n	d6860 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d686c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d686c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d686e:	4b08      	ldr	r3, [pc, #32]	; (d6890 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d6870:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d6872:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d6874:	4b07      	ldr	r3, [pc, #28]	; (d6894 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d6876:	9302      	str	r3, [sp, #8]
   d6878:	f7ff ffb1 	bl	d67de <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d687c:	9b02      	ldr	r3, [sp, #8]
   d687e:	4604      	mov	r4, r0
   d6880:	b11b      	cbz	r3, d688a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6882:	4669      	mov	r1, sp
   d6884:	2203      	movs	r2, #3
   d6886:	4608      	mov	r0, r1
   d6888:	4798      	blx	r3
}
   d688a:	4620      	mov	r0, r4
   d688c:	b004      	add	sp, #16
   d688e:	bd10      	pop	{r4, pc}
   d6890:	000d5621 	.word	0x000d5621
   d6894:	000d5625 	.word	0x000d5625

000d6898 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   d6898:	b570      	push	{r4, r5, r6, lr}
   d689a:	4604      	mov	r4, r0
   d689c:	460d      	mov	r5, r1
   d689e:	4610      	mov	r0, r2
   d68a0:	4619      	mov	r1, r3
    if (nextTime != 0 && nextTime <= timeNow) {
   d68a2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d68a6:	ea52 0603 	orrs.w	r6, r2, r3
   d68aa:	d013      	beq.n	d68d4 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
   d68ac:	4290      	cmp	r0, r2
   d68ae:	eb71 0303 	sbcs.w	r3, r1, r3
   d68b2:	db0f      	blt.n	d68d4 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
        nextTime = 0;
   d68b4:	2200      	movs	r2, #0
   d68b6:	2300      	movs	r3, #0
   d68b8:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   d68bc:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   d68be:	4629      	mov	r1, r5
   d68c0:	4620      	mov	r0, r4
   d68c2:	f7ff ffd3 	bl	d686c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d68c6:	b118      	cbz	r0, d68d0 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x38>
        nextTime = conv.time;
   d68c8:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d68cc:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   d68d0:	4630      	mov	r0, r6
   d68d2:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   d68d4:	2600      	movs	r6, #0
   d68d6:	e7f2      	b.n	d68be <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x26>

000d68d8 <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   d68d8:	b530      	push	{r4, r5, lr}
   d68da:	b0bd      	sub	sp, #244	; 0xf4
   d68dc:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   d68de:	f004 faed 	bl	daebc <_ZN9TimeClass7isValidEv>
   d68e2:	4604      	mov	r4, r0
   d68e4:	b1c0      	cbz	r0, d6918 <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   d68e6:	2306      	movs	r3, #6
   d68e8:	a801      	add	r0, sp, #4
   d68ea:	9300      	str	r3, [sp, #0]
   d68ec:	f7ff f972 	bl	d5bd4 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d68f0:	f004 fb01 	bl	daef6 <_ZN9TimeClass3nowEv>
   d68f4:	17c1      	asrs	r1, r0, #31
   d68f6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   d68fa:	4668      	mov	r0, sp
   d68fc:	f7ff fc50 	bl	d61a0 <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   d6900:	f004 faf9 	bl	daef6 <_ZN9TimeClass3nowEv>
   d6904:	4669      	mov	r1, sp
   d6906:	4602      	mov	r2, r0
   d6908:	17c3      	asrs	r3, r0, #31
   d690a:	4628      	mov	r0, r5
   d690c:	f7ff ffc4 	bl	d6898 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   d6910:	4604      	mov	r4, r0
class LocalTimeConvert {
   d6912:	a801      	add	r0, sp, #4
   d6914:	f7fe fe9a 	bl	d564c <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d6918:	4620      	mov	r0, r4
   d691a:	b03d      	add	sp, #244	; 0xf4
   d691c:	bd30      	pop	{r4, r5, pc}

000d691e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d691e:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d6920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6924:	4604      	mov	r4, r0
   d6926:	460e      	mov	r6, r1
      if (&__x != this)
   d6928:	d022      	beq.n	d6970 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d692a:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d692e:	6800      	ldr	r0, [r0, #0]
   d6930:	68a3      	ldr	r3, [r4, #8]
   d6932:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6934:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d6938:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d693a:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d693e:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d6942:	d218      	bcs.n	d6976 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d6944:	4608      	mov	r0, r1
   d6946:	f7fe febd 	bl	d56c4 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d694a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d694c:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d694e:	45a8      	cmp	r8, r5
   d6950:	d005      	beq.n	d695e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d6952:	b10b      	cbz	r3, d6958 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d6954:	682a      	ldr	r2, [r5, #0]
   d6956:	601a      	str	r2, [r3, #0]
   d6958:	3304      	adds	r3, #4
   d695a:	3504      	adds	r5, #4
   d695c:	e7f7      	b.n	d694e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d695e:	6820      	ldr	r0, [r4, #0]
   d6960:	f7fe feac 	bl	d56bc <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d6964:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d6966:	443e      	add	r6, r7
   d6968:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d696a:	6823      	ldr	r3, [r4, #0]
   d696c:	441f      	add	r7, r3
   d696e:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d6970:	4620      	mov	r0, r4
   d6972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6976:	6862      	ldr	r2, [r4, #4]
   d6978:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d697a:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d697e:	d806      	bhi.n	d698e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d6980:	45a8      	cmp	r8, r5
   d6982:	d0f2      	beq.n	d696a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6984:	463a      	mov	r2, r7
   d6986:	4629      	mov	r1, r5
   d6988:	f005 f97a 	bl	dbc80 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d698c:	e7ed      	b.n	d696a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d698e:	b112      	cbz	r2, d6996 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6990:	4629      	mov	r1, r5
   d6992:	f005 f975 	bl	dbc80 <memmove>
   d6996:	e9d4 3200 	ldrd	r3, r2, [r4]
   d699a:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d699c:	6833      	ldr	r3, [r6, #0]
   d699e:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d69a0:	6871      	ldr	r1, [r6, #4]
   d69a2:	4299      	cmp	r1, r3
   d69a4:	d0e1      	beq.n	d696a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d69a6:	b10a      	cbz	r2, d69ac <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d69a8:	6818      	ldr	r0, [r3, #0]
   d69aa:	6010      	str	r0, [r2, #0]
   d69ac:	3304      	adds	r3, #4
   d69ae:	3204      	adds	r2, #4
   d69b0:	e7f7      	b.n	d69a2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d69b2 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d69b2:	b538      	push	{r3, r4, r5, lr}
   d69b4:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d69b6:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d69ba:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d69bc:	f800 3b04 	strb.w	r3, [r0], #4
   d69c0:	f7ff ffad 	bl	d691e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d69c4:	f105 0110 	add.w	r1, r5, #16
   d69c8:	f104 0010 	add.w	r0, r4, #16
   d69cc:	f7ff ffa7 	bl	d691e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d69d0:	f105 011c 	add.w	r1, r5, #28
   d69d4:	f104 001c 	add.w	r0, r4, #28
   d69d8:	f7fe feb0 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
   d69dc:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d69e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d69e4:	f7fe feaa 	bl	d573c <_ZN12LocalTimeHMSaSERKS_>
   d69e8:	4620      	mov	r0, r4
   d69ea:	bd38      	pop	{r3, r4, r5, pc}

000d69ec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d69ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69f0:	e9d0 6900 	ldrd	r6, r9, [r0]
   d69f4:	4d3b      	ldr	r5, [pc, #236]	; (d6ae4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d69f6:	4b3c      	ldr	r3, [pc, #240]	; (d6ae8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d69f8:	eba9 0406 	sub.w	r4, r9, r6
   d69fc:	10a4      	asrs	r4, r4, #2
   d69fe:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d6a00:	429c      	cmp	r4, r3
   d6a02:	468a      	mov	sl, r1
   d6a04:	4607      	mov	r7, r0
   d6a06:	4611      	mov	r1, r2
   d6a08:	46a8      	mov	r8, r5
   d6a0a:	d102      	bne.n	d6a12 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d6a0c:	4837      	ldr	r0, [pc, #220]	; (d6aec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d6a0e:	f004 fcf6 	bl	db3fe <_ZSt20__throw_length_errorPKc>
   d6a12:	2c01      	cmp	r4, #1
   d6a14:	4622      	mov	r2, r4
   d6a16:	bf38      	it	cc
   d6a18:	2201      	movcc	r2, #1
   d6a1a:	18a4      	adds	r4, r4, r2
   d6a1c:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d6a20:	d25d      	bcs.n	d6ade <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6a22:	b154      	cbz	r4, d6a3a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d6a24:	429c      	cmp	r4, r3
   d6a26:	bf28      	it	cs
   d6a28:	461c      	movcs	r4, r3
   d6a2a:	204c      	movs	r0, #76	; 0x4c
   d6a2c:	4360      	muls	r0, r4
   d6a2e:	9100      	str	r1, [sp, #0]
   d6a30:	f7fd fb31 	bl	d4096 <_Znwj>
   d6a34:	9900      	ldr	r1, [sp, #0]
   d6a36:	4683      	mov	fp, r0
   d6a38:	e000      	b.n	d6a3c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d6a3a:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6a3c:	eb1b 0005 	adds.w	r0, fp, r5
   d6a40:	d001      	beq.n	d6a46 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d6a42:	f7ff feab 	bl	d679c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d6a46:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6a48:	4631      	mov	r1, r6
   d6a4a:	458a      	cmp	sl, r1
   d6a4c:	d00a      	beq.n	d6a64 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d6a4e:	b133      	cbz	r3, d6a5e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d6a50:	4618      	mov	r0, r3
   d6a52:	9101      	str	r1, [sp, #4]
   d6a54:	9300      	str	r3, [sp, #0]
   d6a56:	f7ff fea1 	bl	d679c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d6a5a:	e9dd 3100 	ldrd	r3, r1, [sp]
   d6a5e:	314c      	adds	r1, #76	; 0x4c
   d6a60:	334c      	adds	r3, #76	; 0x4c
   d6a62:	e7f2      	b.n	d6a4a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d6a64:	08ad      	lsrs	r5, r5, #2
   d6a66:	fb08 fa05 	mul.w	sl, r8, r5
   d6a6a:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d6a6e:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d6a72:	fb0a fa05 	mul.w	sl, sl, r5
   d6a76:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d6a7a:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d6a7e:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d6a80:	4653      	mov	r3, sl
   d6a82:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d6a84:	4549      	cmp	r1, r9
   d6a86:	d113      	bne.n	d6ab0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d6a88:	eba9 0505 	sub.w	r5, r9, r5
   d6a8c:	08ad      	lsrs	r5, r5, #2
   d6a8e:	fb08 f505 	mul.w	r5, r8, r5
   d6a92:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d6a96:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d6a9a:	fb08 a505 	mla	r5, r8, r5, sl
   d6a9e:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d6aa0:	45c8      	cmp	r8, r9
   d6aa2:	d00f      	beq.n	d6ac4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d6aa4:	4640      	mov	r0, r8
   d6aa6:	f7ff fa15 	bl	d5ed4 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d6aaa:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d6aae:	e7f7      	b.n	d6aa0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6ab0:	4618      	mov	r0, r3
   d6ab2:	9101      	str	r1, [sp, #4]
   d6ab4:	9300      	str	r3, [sp, #0]
   d6ab6:	f7ff fe71 	bl	d679c <_ZN21LocalTimeScheduleItemC1ERKS_>
   d6aba:	9901      	ldr	r1, [sp, #4]
   d6abc:	9b00      	ldr	r3, [sp, #0]
   d6abe:	314c      	adds	r1, #76	; 0x4c
   d6ac0:	334c      	adds	r3, #76	; 0x4c
   d6ac2:	e7df      	b.n	d6a84 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d6ac4:	b116      	cbz	r6, d6acc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d6ac6:	4630      	mov	r0, r6
   d6ac8:	f7fd fae9 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d6acc:	204c      	movs	r0, #76	; 0x4c
   d6ace:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d6ad2:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d6ad6:	60bc      	str	r4, [r7, #8]
    }
   d6ad8:	b003      	add	sp, #12
   d6ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d6ade:	461c      	mov	r4, r3
   d6ae0:	e7a3      	b.n	d6a2a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d6ae2:	bf00      	nop
   d6ae4:	286bca1b 	.word	0x286bca1b
   d6ae8:	01af286b 	.word	0x01af286b
   d6aec:	000dc5d0 	.word	0x000dc5d0

000d6af0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d6af0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d6af2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d6af6:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d6af8:	4604      	mov	r4, r0
   d6afa:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d6afc:	d007      	beq.n	d6b0e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6afe:	b113      	cbz	r3, d6b06 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d6b00:	4618      	mov	r0, r3
   d6b02:	f7ff fe4b 	bl	d679c <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d6b06:	6863      	ldr	r3, [r4, #4]
   d6b08:	334c      	adds	r3, #76	; 0x4c
   d6b0a:	6063      	str	r3, [r4, #4]
      }
   d6b0c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d6b0e:	4619      	mov	r1, r3
   d6b10:	f7ff ff6c 	bl	d69ec <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d6b14:	e7fa      	b.n	d6b0c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d6b16 <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d6b16:	b530      	push	{r4, r5, lr}
   d6b18:	b097      	sub	sp, #92	; 0x5c
   d6b1a:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d6b1c:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d6b1e:	9201      	str	r2, [sp, #4]
   d6b20:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d6b22:	f7fe ff39 	bl	d5998 <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d6b26:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d6b28:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d6b2a:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d6b2c:	a803      	add	r0, sp, #12
    item.increment = increment;
   d6b2e:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d6b30:	f7ff ff3f 	bl	d69b2 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d6b34:	a903      	add	r1, sp, #12
   d6b36:	f104 0020 	add.w	r0, r4, #32
   d6b3a:	f7ff ffd9 	bl	d6af0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d6b3e:	a803      	add	r0, sp, #12
   d6b40:	f7ff f9c8 	bl	d5ed4 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d6b44:	4620      	mov	r0, r4
   d6b46:	b017      	add	sp, #92	; 0x5c
   d6b48:	bd30      	pop	{r4, r5, pc}

000d6b4a <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d6b4a:	4770      	bx	lr

000d6b4c <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d6b4c:	b510      	push	{r4, lr}
}
   d6b4e:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d6b50:	4604      	mov	r4, r0
}
   d6b52:	f004 fc4b 	bl	db3ec <_ZdlPvj>
   d6b56:	4620      	mov	r0, r4
   d6b58:	bd10      	pop	{r4, pc}

000d6b5a <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d6b5a:	6803      	ldr	r3, [r0, #0]
   d6b5c:	b2c9      	uxtb	r1, r1
   d6b5e:	689b      	ldr	r3, [r3, #8]
   d6b60:	4718      	bx	r3
	...

000d6b64 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d6b64:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d6b66:	4d03      	ldr	r5, [pc, #12]	; (d6b74 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6b68:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d6b6c:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6b70:	bd30      	pop	{r4, r5, pc}
   d6b72:	bf00      	nop
   d6b74:	000dc660 	.word	0x000dc660

000d6b78 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6b78:	6840      	ldr	r0, [r0, #4]
   d6b7a:	f002 bab1 	b.w	d90e0 <_ZN7TwoWire5beginEv>

000d6b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6b7e:	b510      	push	{r4, lr}
   d6b80:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6b82:	6800      	ldr	r0, [r0, #0]
   d6b84:	f002 faef 	bl	d9166 <_ZN7TwoWire6unlockEv>
   d6b88:	4620      	mov	r0, r4
   d6b8a:	bd10      	pop	{r4, pc}

000d6b8c <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d6b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b90:	b08a      	sub	sp, #40	; 0x28
   d6b92:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d6b94:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b96:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6b98:	f002 fadc 	bl	d9154 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d6b9c:	221e      	movs	r2, #30
   d6b9e:	2100      	movs	r1, #0
   d6ba0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d6ba2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d6ba4:	f005 f886 	bl	dbcb4 <memset>
		size_t framAddr = 0;
   d6ba8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d6baa:	b1ef      	cbz	r7, d6be8 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d6bac:	6823      	ldr	r3, [r4, #0]
   d6bae:	2f1e      	cmp	r7, #30
   d6bb0:	46b8      	mov	r8, r7
   d6bb2:	bf28      	it	cs
   d6bb4:	f04f 081e 	movcs.w	r8, #30
   d6bb8:	68dd      	ldr	r5, [r3, #12]
   d6bba:	aa02      	add	r2, sp, #8
   d6bbc:	4643      	mov	r3, r8
   d6bbe:	4631      	mov	r1, r6
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	47a8      	blx	r5
			if (!result) {
   d6bc4:	4605      	mov	r5, r0
   d6bc6:	b958      	cbnz	r0, d6be0 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6bc8:	480a      	ldr	r0, [pc, #40]	; (d6bf4 <_ZN6MB85RC5eraseEv+0x68>)
   d6bca:	490b      	ldr	r1, [pc, #44]	; (d6bf8 <_ZN6MB85RC5eraseEv+0x6c>)
   d6bcc:	4632      	mov	r2, r6
   d6bce:	f7fd faf9 	bl	d41c4 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d6bd2:	a801      	add	r0, sp, #4
   d6bd4:	f7ff ffd3 	bl	d6b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6bd8:	4628      	mov	r0, r5
   d6bda:	b00a      	add	sp, #40	; 0x28
   d6bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6be0:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d6be4:	4446      	add	r6, r8
		while(totalLen > 0) {
   d6be6:	e7e0      	b.n	d6baa <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6be8:	a801      	add	r0, sp, #4
   d6bea:	f7ff ffc8 	bl	d6b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d6bee:	2501      	movs	r5, #1
   d6bf0:	e7f2      	b.n	d6bd8 <_ZN6MB85RC5eraseEv+0x4c>
   d6bf2:	bf00      	nop
   d6bf4:	2003e58c 	.word	0x2003e58c
   d6bf8:	000dc62c 	.word	0x000dc62c

000d6bfc <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6c00:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6c02:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c04:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6c06:	460d      	mov	r5, r1
   d6c08:	4616      	mov	r6, r2
   d6c0a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d6c0c:	f002 faa2 	bl	d9154 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d6c10:	b1a7      	cbz	r7, d6c3c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6c12:	68e1      	ldr	r1, [r4, #12]
   d6c14:	6860      	ldr	r0, [r4, #4]
   d6c16:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6c1a:	f002 fa94 	bl	d9146 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6c1e:	0a29      	lsrs	r1, r5, #8
   d6c20:	6860      	ldr	r0, [r4, #4]
   d6c22:	f7ff ff9a 	bl	d6b5a <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6c26:	4629      	mov	r1, r5
   d6c28:	6860      	ldr	r0, [r4, #4]
   d6c2a:	f7ff ff96 	bl	d6b5a <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d6c2e:	6860      	ldr	r0, [r4, #4]
   d6c30:	2100      	movs	r1, #0
   d6c32:	f002 fa8b 	bl	d914c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6c36:	b148      	cbz	r0, d6c4c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d6c38:	2400      	movs	r4, #0
   d6c3a:	e000      	b.n	d6c3e <_ZN6MB85RC8readDataEjPhj+0x42>
   d6c3c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6c3e:	a801      	add	r0, sp, #4
   d6c40:	f7ff ff9d 	bl	d6b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d6c44:	4620      	mov	r0, r4
   d6c46:	b003      	add	sp, #12
   d6c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d6c4c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d6c4e:	7b21      	ldrb	r1, [r4, #12]
   d6c50:	6860      	ldr	r0, [r4, #4]
   d6c52:	46b8      	mov	r8, r7
   d6c54:	bf28      	it	cs
   d6c56:	f04f 0820 	movcs.w	r8, #32
   d6c5a:	2301      	movs	r3, #1
   d6c5c:	4642      	mov	r2, r8
   d6c5e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6c62:	f002 fa5a 	bl	d911a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d6c66:	f004 fb9d 	bl	db3a4 <_Z19__fetch_global_Wirev>
   d6c6a:	6803      	ldr	r3, [r0, #0]
   d6c6c:	691b      	ldr	r3, [r3, #16]
   d6c6e:	4798      	blx	r3
   d6c70:	4540      	cmp	r0, r8
   d6c72:	dbe1      	blt.n	d6c38 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d6c74:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d6c78:	f004 fb94 	bl	db3a4 <_Z19__fetch_global_Wirev>
   d6c7c:	6803      	ldr	r3, [r0, #0]
   d6c7e:	695b      	ldr	r3, [r3, #20]
   d6c80:	4798      	blx	r3
   d6c82:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d6c86:	454e      	cmp	r6, r9
   d6c88:	d1f6      	bne.n	d6c78 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d6c8a:	4445      	add	r5, r8
   d6c8c:	eba7 0708 	sub.w	r7, r7, r8
   d6c90:	e7be      	b.n	d6c10 <_ZN6MB85RC8readDataEjPhj+0x14>

000d6c92 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6c92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c96:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6c98:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c9a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6c9c:	460e      	mov	r6, r1
   d6c9e:	4690      	mov	r8, r2
   d6ca0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d6ca2:	f002 fa57 	bl	d9154 <_ZN7TwoWire4lockEv>
   d6ca6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d6caa:	f1b9 0f00 	cmp.w	r9, #0
   d6cae:	d02a      	beq.n	d6d06 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6cb0:	b34d      	cbz	r5, d6d06 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6cb2:	68e1      	ldr	r1, [r4, #12]
   d6cb4:	6860      	ldr	r0, [r4, #4]
   d6cb6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6cba:	f002 fa44 	bl	d9146 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6cbe:	0a31      	lsrs	r1, r6, #8
   d6cc0:	6860      	ldr	r0, [r4, #4]
   d6cc2:	f7ff ff4a 	bl	d6b5a <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6cc6:	6860      	ldr	r0, [r4, #4]
   d6cc8:	4631      	mov	r1, r6
   d6cca:	f7ff ff46 	bl	d6b5a <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6cce:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d6cd2:	4647      	mov	r7, r8
   d6cd4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6cd8:	6860      	ldr	r0, [r4, #4]
   d6cda:	f817 1b01 	ldrb.w	r1, [r7], #1
   d6cde:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6ce0:	3d01      	subs	r5, #1
				wire.write(*data);
   d6ce2:	689b      	ldr	r3, [r3, #8]
   d6ce4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6ce6:	4555      	cmp	r5, sl
   d6ce8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d6cec:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6cee:	d001      	beq.n	d6cf4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6cf0:	2d00      	cmp	r5, #0
   d6cf2:	d1f1      	bne.n	d6cd8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d6cf4:	6860      	ldr	r0, [r4, #4]
   d6cf6:	2101      	movs	r1, #1
   d6cf8:	f002 fa28 	bl	d914c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6cfc:	2800      	cmp	r0, #0
   d6cfe:	d0d7      	beq.n	d6cb0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6d00:	f04f 0900 	mov.w	r9, #0
   d6d04:	e7d1      	b.n	d6caa <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d6d06:	a801      	add	r0, sp, #4
   d6d08:	f7ff ff39 	bl	d6b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d6d0c:	4648      	mov	r0, r9
   d6d0e:	b003      	add	sp, #12
   d6d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6d14 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d18:	b08b      	sub	sp, #44	; 0x2c
   d6d1a:	460e      	mov	r6, r1
   d6d1c:	4615      	mov	r5, r2
   d6d1e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6d20:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d22:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6d24:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d6d26:	f002 fa15 	bl	d9154 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d6d2a:	42ae      	cmp	r6, r5
   d6d2c:	d229      	bcs.n	d6d82 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6d2e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6d30:	4425      	add	r5, r4
			while(numBytes > 0) {
   d6d32:	b18c      	cbz	r4, d6d58 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d6d34:	2c1e      	cmp	r4, #30
   d6d36:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6d38:	f8d8 3000 	ldr.w	r3, [r8]
   d6d3c:	bf28      	it	cs
   d6d3e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6d40:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d6d42:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6d46:	aa02      	add	r2, sp, #8
   d6d48:	463b      	mov	r3, r7
   d6d4a:	4631      	mov	r1, r6
   d6d4c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d6d4e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d6d50:	47c8      	blx	r9
				if (!result) {
   d6d52:	b948      	cbnz	r0, d6d68 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6d54:	2400      	movs	r4, #0
   d6d56:	e000      	b.n	d6d5a <_ZN6MB85RC8moveDataEjjj+0x46>
   d6d58:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6d5a:	a801      	add	r0, sp, #4
   d6d5c:	f7ff ff0f 	bl	d6b7e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6d60:	4620      	mov	r0, r4
   d6d62:	b00b      	add	sp, #44	; 0x2c
   d6d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6d68:	f8d8 3000 	ldr.w	r3, [r8]
   d6d6c:	aa02      	add	r2, sp, #8
   d6d6e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6d72:	4629      	mov	r1, r5
   d6d74:	463b      	mov	r3, r7
   d6d76:	4640      	mov	r0, r8
   d6d78:	47c8      	blx	r9
				if (!result) {
   d6d7a:	2800      	cmp	r0, #0
   d6d7c:	d0ea      	beq.n	d6d54 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d6d7e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6d80:	e7d7      	b.n	d6d32 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d6d82:	d9e9      	bls.n	d6d58 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d6d84:	2c00      	cmp	r4, #0
   d6d86:	d0e7      	beq.n	d6d58 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6d88:	f8d8 3000 	ldr.w	r3, [r8]
   d6d8c:	2c1e      	cmp	r4, #30
   d6d8e:	4627      	mov	r7, r4
   d6d90:	bf28      	it	cs
   d6d92:	271e      	movcs	r7, #30
   d6d94:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6d98:	aa02      	add	r2, sp, #8
   d6d9a:	463b      	mov	r3, r7
   d6d9c:	4631      	mov	r1, r6
   d6d9e:	4640      	mov	r0, r8
   d6da0:	47c8      	blx	r9
				if (!result) {
   d6da2:	2800      	cmp	r0, #0
   d6da4:	d0d6      	beq.n	d6d54 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d6da6:	f8d8 3000 	ldr.w	r3, [r8]
   d6daa:	aa02      	add	r2, sp, #8
   d6dac:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6db0:	4629      	mov	r1, r5
   d6db2:	463b      	mov	r3, r7
   d6db4:	4640      	mov	r0, r8
   d6db6:	47c8      	blx	r9
				if (!result) {
   d6db8:	2800      	cmp	r0, #0
   d6dba:	d0cb      	beq.n	d6d54 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6dbc:	443e      	add	r6, r7
				framAddrTo += count;
   d6dbe:	443d      	add	r5, r7
				numBytes -= count;
   d6dc0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6dc2:	e7df      	b.n	d6d84 <_ZN6MB85RC8moveDataEjjj+0x70>

000d6dc4 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d6dc4:	6001      	str	r1, [r0, #0]
   d6dc6:	7102      	strb	r2, [r0, #4]
{
}
   d6dc8:	4770      	bx	lr

000d6dca <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d6dca:	6800      	ldr	r0, [r0, #0]
   d6dcc:	6803      	ldr	r3, [r0, #0]
   d6dce:	68db      	ldr	r3, [r3, #12]
   d6dd0:	4718      	bx	r3

000d6dd2 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d6dd2:	6800      	ldr	r0, [r0, #0]
   d6dd4:	6803      	ldr	r3, [r0, #0]
   d6dd6:	6a1b      	ldr	r3, [r3, #32]
   d6dd8:	4718      	bx	r3

000d6dda <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d6dda:	6800      	ldr	r0, [r0, #0]
   d6ddc:	6803      	ldr	r3, [r0, #0]
   d6dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6de0:	4718      	bx	r3

000d6de2 <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d6de2:	6800      	ldr	r0, [r0, #0]
   d6de4:	6803      	ldr	r3, [r0, #0]
   d6de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6de8:	4718      	bx	r3

000d6dea <_ZN10RHDatagram6sendtoEPhhh>:
{
   d6dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6dec:	4605      	mov	r5, r0
   d6dee:	460c      	mov	r4, r1
    setHeaderTo(address);
   d6df0:	4619      	mov	r1, r3
{
   d6df2:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d6df4:	f7ff fff5 	bl	d6de2 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d6df8:	6828      	ldr	r0, [r5, #0]
   d6dfa:	9a01      	ldr	r2, [sp, #4]
   d6dfc:	6803      	ldr	r3, [r0, #0]
   d6dfe:	695b      	ldr	r3, [r3, #20]
   d6e00:	4621      	mov	r1, r4
}
   d6e02:	b003      	add	sp, #12
   d6e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d6e08:	4718      	bx	r3

000d6e0a <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d6e0a:	6800      	ldr	r0, [r0, #0]
   d6e0c:	6803      	ldr	r3, [r0, #0]
   d6e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6e10:	4718      	bx	r3

000d6e12 <_ZN10RHDatagram14setThisAddressEh>:
{
   d6e12:	b538      	push	{r3, r4, r5, lr}
   d6e14:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d6e16:	6800      	ldr	r0, [r0, #0]
   d6e18:	6803      	ldr	r3, [r0, #0]
{
   d6e1a:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d6e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e1e:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d6e20:	4629      	mov	r1, r5
   d6e22:	4620      	mov	r0, r4
   d6e24:	f7ff fff1 	bl	d6e0a <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d6e28:	7125      	strb	r5, [r4, #4]
}
   d6e2a:	bd38      	pop	{r3, r4, r5, pc}

000d6e2c <_ZN10RHDatagram4initEv>:
{
   d6e2c:	b538      	push	{r3, r4, r5, lr}
   d6e2e:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d6e30:	6800      	ldr	r0, [r0, #0]
   d6e32:	6803      	ldr	r3, [r0, #0]
   d6e34:	689b      	ldr	r3, [r3, #8]
   d6e36:	4798      	blx	r3
    if (ret)
   d6e38:	4605      	mov	r5, r0
   d6e3a:	b118      	cbz	r0, d6e44 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d6e3c:	7921      	ldrb	r1, [r4, #4]
   d6e3e:	4620      	mov	r0, r4
   d6e40:	f7ff ffe7 	bl	d6e12 <_ZN10RHDatagram14setThisAddressEh>
}
   d6e44:	4628      	mov	r0, r5
   d6e46:	bd38      	pop	{r3, r4, r5, pc}

000d6e48 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d6e48:	6800      	ldr	r0, [r0, #0]
   d6e4a:	6803      	ldr	r3, [r0, #0]
   d6e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e4e:	4718      	bx	r3

000d6e50 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d6e50:	6800      	ldr	r0, [r0, #0]
   d6e52:	6803      	ldr	r3, [r0, #0]
   d6e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e56:	4718      	bx	r3

000d6e58 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d6e58:	6800      	ldr	r0, [r0, #0]
   d6e5a:	6803      	ldr	r3, [r0, #0]
   d6e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6e5e:	4718      	bx	r3

000d6e60 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d6e60:	6800      	ldr	r0, [r0, #0]
   d6e62:	6803      	ldr	r3, [r0, #0]
   d6e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6e66:	4718      	bx	r3

000d6e68 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d6e68:	6800      	ldr	r0, [r0, #0]
   d6e6a:	6803      	ldr	r3, [r0, #0]
   d6e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e6e:	4718      	bx	r3

000d6e70 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d6e70:	6800      	ldr	r0, [r0, #0]
   d6e72:	6803      	ldr	r3, [r0, #0]
   d6e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6e76:	4718      	bx	r3

000d6e78 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d6e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6e7c:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d6e7e:	6800      	ldr	r0, [r0, #0]
{
   d6e80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d6e82:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d6e84:	6803      	ldr	r3, [r0, #0]
   d6e86:	691b      	ldr	r3, [r3, #16]
{
   d6e88:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d6e8c:	4798      	blx	r3
   d6e8e:	4605      	mov	r5, r0
   d6e90:	b1c8      	cbz	r0, d6ec6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d6e92:	b11e      	cbz	r6, d6e9c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d6e94:	4620      	mov	r0, r4
   d6e96:	f7ff ffe3 	bl	d6e60 <_ZN10RHDatagram10headerFromEv>
   d6e9a:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d6e9c:	f1b9 0f00 	cmp.w	r9, #0
   d6ea0:	d004      	beq.n	d6eac <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d6ea2:	4620      	mov	r0, r4
   d6ea4:	f7ff ffd8 	bl	d6e58 <_ZN10RHDatagram8headerToEv>
   d6ea8:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d6eac:	f1b8 0f00 	cmp.w	r8, #0
   d6eb0:	d004      	beq.n	d6ebc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d6eb2:	4620      	mov	r0, r4
   d6eb4:	f7ff ffd8 	bl	d6e68 <_ZN10RHDatagram8headerIdEv>
   d6eb8:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d6ebc:	b11f      	cbz	r7, d6ec6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	f7ff ffd6 	bl	d6e70 <_ZN10RHDatagram11headerFlagsEv>
   d6ec4:	7038      	strb	r0, [r7, #0]
}
   d6ec6:	4628      	mov	r0, r5
   d6ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6ecc <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d6ecc:	2001      	movs	r0, #1
   d6ece:	4770      	bx	lr

000d6ed0 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d6ed0:	7903      	ldrb	r3, [r0, #4]
   d6ed2:	2b03      	cmp	r3, #3
   d6ed4:	d0fc      	beq.n	d6ed0 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d6ed6:	2001      	movs	r0, #1
   d6ed8:	4770      	bx	lr

000d6eda <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d6eda:	2000      	movs	r0, #0
   d6edc:	4770      	bx	lr

000d6ede <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d6ede:	7181      	strb	r1, [r0, #6]
}
   d6ee0:	4770      	bx	lr

000d6ee2 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d6ee2:	7141      	strb	r1, [r0, #5]
}
   d6ee4:	4770      	bx	lr

000d6ee6 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d6ee6:	72c1      	strb	r1, [r0, #11]
}
   d6ee8:	4770      	bx	lr

000d6eea <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d6eea:	7301      	strb	r1, [r0, #12]
}
   d6eec:	4770      	bx	lr

000d6eee <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d6eee:	7341      	strb	r1, [r0, #13]
}
   d6ef0:	4770      	bx	lr

000d6ef2 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d6ef2:	7b83      	ldrb	r3, [r0, #14]
   d6ef4:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d6ef8:	4311      	orrs	r1, r2
   d6efa:	7381      	strb	r1, [r0, #14]
}
   d6efc:	4770      	bx	lr

000d6efe <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d6efe:	79c0      	ldrb	r0, [r0, #7]
}
   d6f00:	4770      	bx	lr

000d6f02 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d6f02:	7a00      	ldrb	r0, [r0, #8]
}
   d6f04:	4770      	bx	lr

000d6f06 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d6f06:	7a40      	ldrb	r0, [r0, #9]
}
   d6f08:	4770      	bx	lr

000d6f0a <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d6f0a:	7a80      	ldrb	r0, [r0, #10]
}
   d6f0c:	4770      	bx	lr

000d6f0e <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d6f0e:	8a00      	ldrh	r0, [r0, #16]
}
   d6f10:	b200      	sxth	r0, r0
   d6f12:	4770      	bx	lr

000d6f14 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d6f14:	7900      	ldrb	r0, [r0, #4]
}
   d6f16:	4770      	bx	lr

000d6f18 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d6f18:	7101      	strb	r1, [r0, #4]
}
   d6f1a:	4770      	bx	lr

000d6f1c <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d6f1c:	8a40      	ldrh	r0, [r0, #18]
}
   d6f1e:	b280      	uxth	r0, r0
   d6f20:	4770      	bx	lr

000d6f22 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d6f22:	8a80      	ldrh	r0, [r0, #20]
}
   d6f24:	b280      	uxth	r0, r0
   d6f26:	4770      	bx	lr

000d6f28 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d6f28:	8ac0      	ldrh	r0, [r0, #22]
}
   d6f2a:	b280      	uxth	r0, r0
   d6f2c:	4770      	bx	lr

000d6f2e <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d6f2e:	b538      	push	{r3, r4, r5, lr}
   d6f30:	4605      	mov	r5, r0
   d6f32:	460c      	mov	r4, r1
    while (!available())
   d6f34:	682b      	ldr	r3, [r5, #0]
   d6f36:	4628      	mov	r0, r5
   d6f38:	68db      	ldr	r3, [r3, #12]
   d6f3a:	4798      	blx	r3
   d6f3c:	b928      	cbnz	r0, d6f4a <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d6f3e:	2c00      	cmp	r4, #0
   d6f40:	d0f8      	beq.n	d6f34 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d6f42:	4620      	mov	r0, r4
   d6f44:	f001 fd26 	bl	d8994 <delay>
   d6f48:	e7f4      	b.n	d6f34 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d6f4a:	bd38      	pop	{r3, r4, r5, pc}

000d6f4c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d6f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f4e:	4605      	mov	r5, r0
   d6f50:	460f      	mov	r7, r1
   d6f52:	4614      	mov	r4, r2
   d6f54:	f001 f9de 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
   d6f58:	4606      	mov	r6, r0
   d6f5a:	f001 f9db 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d6f5e:	1b80      	subs	r0, r0, r6
   d6f60:	42b8      	cmp	r0, r7
   d6f62:	d20a      	bcs.n	d6f7a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d6f64:	682b      	ldr	r3, [r5, #0]
   d6f66:	4628      	mov	r0, r5
   d6f68:	68db      	ldr	r3, [r3, #12]
   d6f6a:	4798      	blx	r3
   d6f6c:	b930      	cbnz	r0, d6f7c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d6f6e:	2c00      	cmp	r4, #0
   d6f70:	d0f3      	beq.n	d6f5a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d6f72:	4620      	mov	r0, r4
   d6f74:	f001 fd0e 	bl	d8994 <delay>
   d6f78:	e7ef      	b.n	d6f5a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d6f7a:	2000      	movs	r0, #0
}
   d6f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f7e <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d6f7e:	b570      	push	{r4, r5, r6, lr}
   d6f80:	4604      	mov	r4, r0
   d6f82:	460e      	mov	r6, r1
   d6f84:	f001 f9c6 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
   d6f88:	4605      	mov	r5, r0
   d6f8a:	f001 f9c3 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d6f8e:	1b40      	subs	r0, r0, r5
   d6f90:	42b0      	cmp	r0, r6
   d6f92:	d204      	bcs.n	d6f9e <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d6f94:	7923      	ldrb	r3, [r4, #4]
   d6f96:	2b03      	cmp	r3, #3
   d6f98:	d0f7      	beq.n	d6f8a <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d6f9a:	2001      	movs	r0, #1
}
   d6f9c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d6f9e:	2000      	movs	r0, #0
   d6fa0:	e7fc      	b.n	d6f9c <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d6fa2 <_ZN15RHGenericDriver7waitCADEv>:
{
   d6fa2:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d6fa4:	69c3      	ldr	r3, [r0, #28]
{
   d6fa6:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d6fa8:	b1b3      	cbz	r3, d6fd8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d6faa:	f001 f9b3 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d6fae:	2664      	movs	r6, #100	; 0x64
   d6fb0:	4605      	mov	r5, r0
    while (isChannelActive())
   d6fb2:	6823      	ldr	r3, [r4, #0]
   d6fb4:	4620      	mov	r0, r4
   d6fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fb8:	4798      	blx	r3
   d6fba:	b168      	cbz	r0, d6fd8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d6fbc:	f001 f9aa 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d6fc0:	69e3      	ldr	r3, [r4, #28]
   d6fc2:	1b40      	subs	r0, r0, r5
   d6fc4:	4298      	cmp	r0, r3
   d6fc6:	d809      	bhi.n	d6fdc <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d6fc8:	210a      	movs	r1, #10
   d6fca:	2001      	movs	r0, #1
   d6fcc:	f003 fc17 	bl	da7fe <_Z6randomii>
   d6fd0:	4370      	muls	r0, r6
   d6fd2:	f001 fcdf 	bl	d8994 <delay>
    while (isChannelActive())
   d6fd6:	e7ec      	b.n	d6fb2 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d6fd8:	2001      	movs	r0, #1
}
   d6fda:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d6fdc:	2000      	movs	r0, #0
   d6fde:	e7fc      	b.n	d6fda <_ZN15RHGenericDriver7waitCADEv+0x38>

000d6fe0 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d6fe0:	4a06      	ldr	r2, [pc, #24]	; (d6ffc <_ZN15RHGenericDriverC1Ev+0x1c>)
   d6fe2:	6002      	str	r2, [r0, #0]
   d6fe4:	21ff      	movs	r1, #255	; 0xff
   d6fe6:	2200      	movs	r2, #0
   d6fe8:	7102      	strb	r2, [r0, #4]
   d6fea:	7141      	strb	r1, [r0, #5]
   d6fec:	8242      	strh	r2, [r0, #18]
   d6fee:	72c1      	strb	r1, [r0, #11]
   d6ff0:	8282      	strh	r2, [r0, #20]
   d6ff2:	8181      	strh	r1, [r0, #12]
   d6ff4:	7382      	strb	r2, [r0, #14]
   d6ff6:	82c2      	strh	r2, [r0, #22]
   d6ff8:	61c2      	str	r2, [r0, #28]
}
   d6ffa:	4770      	bx	lr
   d6ffc:	000dc67c 	.word	0x000dc67c

000d7000 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d7000:	4770      	bx	lr

000d7002 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d7002:	4770      	bx	lr

000d7004 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d7004:	4770      	bx	lr

000d7006 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d7006:	4770      	bx	lr

000d7008 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d7008:	4770      	bx	lr

000d700a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d700a:	7141      	strb	r1, [r0, #5]
}
   d700c:	4770      	bx	lr

000d700e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d700e:	7181      	strb	r1, [r0, #6]
}
   d7010:	4770      	bx	lr

000d7012 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d7012:	7101      	strb	r1, [r0, #4]
}
   d7014:	4770      	bx	lr
	...

000d7018 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d7018:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d701a:	4d03      	ldr	r5, [pc, #12]	; (d7028 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d701c:	6005      	str	r5, [r0, #0]
   d701e:	7101      	strb	r1, [r0, #4]
   d7020:	7142      	strb	r2, [r0, #5]
   d7022:	7183      	strb	r3, [r0, #6]
}
   d7024:	bd30      	pop	{r4, r5, pc}
   d7026:	bf00      	nop
   d7028:	000dc6fc 	.word	0x000dc6fc

000d702c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d702c:	4770      	bx	lr

000d702e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d702e:	b510      	push	{r4, lr}
  }
   d7030:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d7032:	4604      	mov	r4, r0
  }
   d7034:	f004 f9da 	bl	db3ec <_ZdlPvj>
   d7038:	4620      	mov	r0, r4
   d703a:	bd10      	pop	{r4, pc}

000d703c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d703c:	b40e      	push	{r1, r2, r3}
   d703e:	b503      	push	{r0, r1, lr}
   d7040:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d7042:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d7044:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d7048:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d704a:	f003 fb9c 	bl	da786 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d704e:	b002      	add	sp, #8
   d7050:	f85d eb04 	ldr.w	lr, [sp], #4
   d7054:	b003      	add	sp, #12
   d7056:	4770      	bx	lr

000d7058 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d7058:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d705a:	4604      	mov	r4, r0
   d705c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d705e:	7922      	ldrb	r2, [r4, #4]
   d7060:	68a3      	ldr	r3, [r4, #8]
   d7062:	b132      	cbz	r2, d7072 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d7064:	b9a3      	cbnz	r3, d7090 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d7066:	490b      	ldr	r1, [pc, #44]	; (d7094 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d7068:	b002      	add	sp, #8
   d706a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d706e:	f003 bb59 	b.w	da724 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d7072:	4a09      	ldr	r2, [pc, #36]	; (d7098 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d7074:	7b26      	ldrb	r6, [r4, #12]
   d7076:	4d09      	ldr	r5, [pc, #36]	; (d709c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d7078:	4909      	ldr	r1, [pc, #36]	; (d70a0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d707a:	7b64      	ldrb	r4, [r4, #13]
   d707c:	2e01      	cmp	r6, #1
   d707e:	bf18      	it	ne
   d7080:	4629      	movne	r1, r5
   d7082:	e9cd 1400 	strd	r1, r4, [sp]
   d7086:	4907      	ldr	r1, [pc, #28]	; (d70a4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d7088:	f7ff ffd8 	bl	d703c <_ZN5Print6printfEPKcz>
  }
   d708c:	b002      	add	sp, #8
   d708e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d7090:	4a05      	ldr	r2, [pc, #20]	; (d70a8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d7092:	e7ef      	b.n	d7074 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d7094:	000dc739 	.word	0x000dc739
   d7098:	000dca30 	.word	0x000dca30
   d709c:	000dc735 	.word	0x000dc735
   d70a0:	000dc731 	.word	0x000dc731
   d70a4:	000dc74f 	.word	0x000dc74f
   d70a8:	000dc728 	.word	0x000dc728

000d70ac <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d70ac:	b510      	push	{r4, lr}
   d70ae:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d70b0:	f7ff ffb2 	bl	d7018 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d70b4:	4b05      	ldr	r3, [pc, #20]	; (d70cc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d70b6:	6023      	str	r3, [r4, #0]
  {
   d70b8:	4b05      	ldr	r3, [pc, #20]	; (d70d0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d70ba:	60a3      	str	r3, [r4, #8]
   d70bc:	2301      	movs	r3, #1
   d70be:	7323      	strb	r3, [r4, #12]
   d70c0:	2300      	movs	r3, #0
   d70c2:	6123      	str	r3, [r4, #16]
   d70c4:	82a3      	strh	r3, [r4, #20]
{
}
   d70c6:	4620      	mov	r0, r4
   d70c8:	bd10      	pop	{r4, pc}
   d70ca:	bf00      	nop
   d70cc:	000dc788 	.word	0x000dc788
   d70d0:	000dc774 	.word	0x000dc774

000d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d70d4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d70d6:	4c0b      	ldr	r4, [pc, #44]	; (d7104 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d70d8:	7821      	ldrb	r1, [r4, #0]
   d70da:	f3bf 8f5b 	dmb	ish
   d70de:	f011 0101 	ands.w	r1, r1, #1
   d70e2:	d10b      	bne.n	d70fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d70e4:	4620      	mov	r0, r4
   d70e6:	9101      	str	r1, [sp, #4]
   d70e8:	f7fc ffe6 	bl	d40b8 <__cxa_guard_acquire>
   d70ec:	9901      	ldr	r1, [sp, #4]
   d70ee:	b128      	cbz	r0, d70fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d70f0:	4805      	ldr	r0, [pc, #20]	; (d7108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d70f2:	f003 fb9b 	bl	da82c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d70f6:	4620      	mov	r0, r4
   d70f8:	f7fc ffe3 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d70fc:	4802      	ldr	r0, [pc, #8]	; (d7108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d70fe:	b002      	add	sp, #8
   d7100:	bd10      	pop	{r4, pc}
   d7102:	bf00      	nop
   d7104:	2003e318 	.word	0x2003e318
   d7108:	2003e31c 	.word	0x2003e31c

000d710c <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d710c:	b507      	push	{r0, r1, r2, lr}
   d710e:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d7110:	f7ff ffe0 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7114:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d7116:	b003      	add	sp, #12
   d7118:	f85d eb04 	ldr.w	lr, [sp], #4
   d711c:	f003 bc38 	b.w	da990 <_ZN8SPIClass8transferEh>

000d7120 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d7120:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d7122:	f7ff ffd7 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d7126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d712a:	f003 bc37 	b.w	da99c <_ZN8SPIClass15attachInterruptEv>

000d712e <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d712e:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d7130:	f7ff ffd0 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d7134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d7138:	f003 bc31 	b.w	da99e <_ZN8SPIClass15detachInterruptEv>

000d713c <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d713c:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d713e:	7903      	ldrb	r3, [r0, #4]
   d7140:	2b04      	cmp	r3, #4
   d7142:	d020      	beq.n	d7186 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d7144:	2b03      	cmp	r3, #3
   d7146:	d020      	beq.n	d718a <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d7148:	2b02      	cmp	r3, #2
   d714a:	d020      	beq.n	d718e <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d714c:	4a11      	ldr	r2, [pc, #68]	; (d7194 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d714e:	4912      	ldr	r1, [pc, #72]	; (d7198 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d7150:	2b01      	cmp	r3, #1
   d7152:	bf18      	it	ne
   d7154:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d7156:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d7158:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d715a:	3901      	subs	r1, #1
   d715c:	bf18      	it	ne
   d715e:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d7160:	b133      	cbz	r3, d7170 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d7162:	2b01      	cmp	r3, #1
   d7164:	d004      	beq.n	d7170 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d7166:	2b02      	cmp	r3, #2
   d7168:	d002      	beq.n	d7170 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d716a:	2b03      	cmp	r3, #3
   d716c:	bf18      	it	ne
   d716e:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d7170:	2400      	movs	r4, #0
   d7172:	7304      	strb	r4, [r0, #12]
   d7174:	6102      	str	r2, [r0, #16]
   d7176:	7501      	strb	r1, [r0, #20]
   d7178:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d717a:	f7ff ffab 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d717e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7182:	f003 bb5d 	b.w	da840 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d7186:	4a05      	ldr	r2, [pc, #20]	; (d719c <_ZN13RHHardwareSPI5beginEv+0x60>)
   d7188:	e7e5      	b.n	d7156 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d718a:	4a05      	ldr	r2, [pc, #20]	; (d71a0 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d718c:	e7e3      	b.n	d7156 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d718e:	4a05      	ldr	r2, [pc, #20]	; (d71a4 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d7190:	e7e1      	b.n	d7156 <_ZN13RHHardwareSPI5beginEv+0x1a>
   d7192:	bf00      	nop
   d7194:	001e8480 	.word	0x001e8480
   d7198:	000f4240 	.word	0x000f4240
   d719c:	00f42400 	.word	0x00f42400
   d71a0:	007a1200 	.word	0x007a1200
   d71a4:	003d0900 	.word	0x003d0900

000d71a8 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d71a8:	b508      	push	{r3, lr}
        instance().end();
   d71aa:	f7ff ff93 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d71ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d71b2:	f003 bb56 	b.w	da862 <_ZN8SPIClass3endEv>

000d71b6 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d71b6:	b510      	push	{r4, lr}
   d71b8:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d71ba:	f7ff ff8b 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d71be:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d71c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d71c6:	f003 bb75 	b.w	da8b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d71ca <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d71ca:	b508      	push	{r3, lr}
        instance().endTransaction();
   d71cc:	f7ff ff82 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d71d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d71d4:	f003 bb54 	b.w	da880 <_ZN8SPIClass14endTransactionEv>

000d71d8 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d71d8:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d71da:	f7ff ff7b 	bl	d70d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d71de:	bd08      	pop	{r3, pc}

000d71e0 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d71e0:	2300      	movs	r3, #0
   d71e2:	4802      	ldr	r0, [pc, #8]	; (d71ec <_GLOBAL__sub_I_hardware_spi+0xc>)
   d71e4:	461a      	mov	r2, r3
   d71e6:	4619      	mov	r1, r3
   d71e8:	f7ff bf60 	b.w	d70ac <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d71ec:	2003e324 	.word	0x2003e324

000d71f0 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d71f0:	2a01      	cmp	r2, #1
   d71f2:	d105      	bne.n	d7200 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d71f4:	7a00      	ldrb	r0, [r0, #8]
   d71f6:	780b      	ldrb	r3, [r1, #0]
   d71f8:	1a1b      	subs	r3, r3, r0
   d71fa:	4258      	negs	r0, r3
   d71fc:	4158      	adcs	r0, r3
   d71fe:	4770      	bx	lr
   d7200:	2000      	movs	r0, #0
}
   d7202:	4770      	bx	lr

000d7204 <_ZN6RHMesh5doArpEh>:
{
   d7204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d7208:	4d26      	ldr	r5, [pc, #152]	; (d72a4 <_ZN6RHMesh5doArpEh+0xa0>)
   d720a:	2301      	movs	r3, #1
{
   d720c:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d720e:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d7210:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d7212:	2300      	movs	r3, #0
{
   d7214:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d7216:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d7218:	9300      	str	r3, [sp, #0]
   d721a:	2203      	movs	r2, #3
   d721c:	23ff      	movs	r3, #255	; 0xff
   d721e:	4629      	mov	r1, r5
{
   d7220:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d7222:	f000 fbe7 	bl	d79f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d7226:	b120      	cbz	r0, d7232 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d7228:	2400      	movs	r4, #0
}
   d722a:	4620      	mov	r0, r4
   d722c:	b007      	add	sp, #28
   d722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d7232:	23fa      	movs	r3, #250	; 0xfa
   d7234:	f88d 3017 	strb.w	r3, [sp, #23]
   d7238:	f001 f86c 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d723c:	f106 0904 	add.w	r9, r6, #4
   d7240:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d7242:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d7244:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d7248:	f001 f864 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
   d724c:	1a20      	subs	r0, r4, r0
   d724e:	2800      	cmp	r0, #0
   d7250:	ddea      	ble.n	d7228 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d7252:	b281      	uxth	r1, r0
   d7254:	2200      	movs	r2, #0
   d7256:	4648      	mov	r0, r9
   d7258:	f7ff fdbf 	bl	d6dda <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d725c:	2800      	cmp	r0, #0
   d725e:	d0f3      	beq.n	d7248 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d7260:	2300      	movs	r3, #0
   d7262:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d7266:	e9cd 3300 	strd	r3, r3, [sp]
   d726a:	f10d 0217 	add.w	r2, sp, #23
   d726e:	4651      	mov	r1, sl
   d7270:	4630      	mov	r0, r6
   d7272:	f000 fbc9 	bl	d7a08 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d7276:	4604      	mov	r4, r0
   d7278:	2800      	cmp	r0, #0
   d727a:	d0e3      	beq.n	d7244 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d727c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d7280:	2b01      	cmp	r3, #1
   d7282:	d9df      	bls.n	d7244 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d7284:	f895 b000 	ldrb.w	fp, [r5]
   d7288:	f1bb 0f02 	cmp.w	fp, #2
   d728c:	d1da      	bne.n	d7244 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d728e:	4648      	mov	r0, r9
   d7290:	f7ff fde6 	bl	d6e60 <_ZN10RHDatagram10headerFromEv>
   d7294:	465b      	mov	r3, fp
   d7296:	4602      	mov	r2, r0
   d7298:	4639      	mov	r1, r7
   d729a:	4630      	mov	r0, r6
   d729c:	f000 fb21 	bl	d78e2 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d72a0:	e7c3      	b.n	d722a <_ZN6RHMesh5doArpEh+0x26>
   d72a2:	bf00      	nop
   d72a4:	2003e33c 	.word	0x2003e33c

000d72a8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d72a8:	2a01      	cmp	r2, #1
{
   d72aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d72ae:	4607      	mov	r7, r0
   d72b0:	460e      	mov	r6, r1
   d72b2:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d72b4:	d93b      	bls.n	d732e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d72b6:	794d      	ldrb	r5, [r1, #5]
   d72b8:	2d02      	cmp	r5, #2
   d72ba:	d130      	bne.n	d731e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d72bc:	f100 0804 	add.w	r8, r0, #4
   d72c0:	79c9      	ldrb	r1, [r1, #7]
   d72c2:	9101      	str	r1, [sp, #4]
   d72c4:	4640      	mov	r0, r8
   d72c6:	f7ff fdcb 	bl	d6e60 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d72ca:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d72cc:	462b      	mov	r3, r5
   d72ce:	4602      	mov	r2, r0
   d72d0:	9901      	ldr	r1, [sp, #4]
   d72d2:	4638      	mov	r0, r7
   d72d4:	f000 fb05 	bl	d78e2 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d72d8:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d72da:	f106 0308 	add.w	r3, r6, #8
   d72de:	2400      	movs	r4, #0
   d72e0:	4622      	mov	r2, r4
   d72e2:	4295      	cmp	r5, r2
   d72e4:	f104 0401 	add.w	r4, r4, #1
   d72e8:	b2e4      	uxtb	r4, r4
   d72ea:	d904      	bls.n	d72f6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d72ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   d72f0:	7a39      	ldrb	r1, [r7, #8]
   d72f2:	4291      	cmp	r1, r2
   d72f4:	d1f4      	bne.n	d72e0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d72f6:	f104 0108 	add.w	r1, r4, #8
   d72fa:	440e      	add	r6, r1
	while (i < numRoutes)
   d72fc:	42a5      	cmp	r5, r4
   d72fe:	d916      	bls.n	d732e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d7300:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7304:	9101      	str	r1, [sp, #4]
   d7306:	4640      	mov	r0, r8
   d7308:	f7ff fdaa 	bl	d6e60 <_ZN10RHDatagram10headerFromEv>
   d730c:	3401      	adds	r4, #1
   d730e:	4602      	mov	r2, r0
   d7310:	9901      	ldr	r1, [sp, #4]
   d7312:	2302      	movs	r3, #2
   d7314:	4638      	mov	r0, r7
   d7316:	b2e4      	uxtb	r4, r4
   d7318:	f000 fae3 	bl	d78e2 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d731c:	e7ee      	b.n	d72fc <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d731e:	2d03      	cmp	r5, #3
   d7320:	d105      	bne.n	d732e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d7322:	7989      	ldrb	r1, [r1, #6]
}
   d7324:	b002      	add	sp, #8
   d7326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d732a:	f000 bac3 	b.w	d78b4 <_ZN8RHRouter13deleteRouteToEh>
}
   d732e:	b002      	add	sp, #8
   d7330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7334 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d7334:	b510      	push	{r4, lr}
   d7336:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d7338:	f000 fb14 	bl	d7964 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d733c:	4b01      	ldr	r3, [pc, #4]	; (d7344 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d733e:	6023      	str	r3, [r4, #0]
}
   d7340:	4620      	mov	r0, r4
   d7342:	bd10      	pop	{r4, pc}
   d7344:	000dc7bc 	.word	0x000dc7bc

000d7348 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d7348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d734c:	2af9      	cmp	r2, #249	; 0xf9
{
   d734e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d7352:	4606      	mov	r6, r0
   d7354:	460f      	mov	r7, r1
   d7356:	4614      	mov	r4, r2
   d7358:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d735a:	d825      	bhi.n	d73a8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d735c:	2bff      	cmp	r3, #255	; 0xff
   d735e:	d114      	bne.n	d738a <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d7360:	f8df 8048 	ldr.w	r8, [pc, #72]	; d73ac <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d7364:	4640      	mov	r0, r8
   d7366:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d7368:	4622      	mov	r2, r4
   d736a:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d736c:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d7370:	f004 fc78 	bl	dbc64 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d7374:	1c62      	adds	r2, r4, #1
   d7376:	f8cd 9020 	str.w	r9, [sp, #32]
   d737a:	462b      	mov	r3, r5
   d737c:	4641      	mov	r1, r8
   d737e:	4630      	mov	r0, r6
   d7380:	b2d2      	uxtb	r2, r2
}
   d7382:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d7386:	f000 bb35 	b.w	d79f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d738a:	4619      	mov	r1, r3
   d738c:	f000 fa4e 	bl	d782c <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d7390:	2800      	cmp	r0, #0
   d7392:	d1e5      	bne.n	d7360 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d7394:	6833      	ldr	r3, [r6, #0]
   d7396:	4629      	mov	r1, r5
   d7398:	689b      	ldr	r3, [r3, #8]
   d739a:	4630      	mov	r0, r6
   d739c:	4798      	blx	r3
   d739e:	2800      	cmp	r0, #0
   d73a0:	d1de      	bne.n	d7360 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d73a2:	2002      	movs	r0, #2
}
   d73a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d73a8:	2001      	movs	r0, #1
   d73aa:	e7fb      	b.n	d73a4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d73ac:	2003e33c 	.word	0x2003e33c

000d73b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d73b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73b4:	b089      	sub	sp, #36	; 0x24
   d73b6:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d73b8:	23fa      	movs	r3, #250	; 0xfa
   d73ba:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d73be:	f10d 031f 	add.w	r3, sp, #31
   d73c2:	9303      	str	r3, [sp, #12]
   d73c4:	f10d 031e 	add.w	r3, sp, #30
   d73c8:	f8df a180 	ldr.w	sl, [pc, #384]	; d754c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d73cc:	9302      	str	r3, [sp, #8]
   d73ce:	f10d 031d 	add.w	r3, sp, #29
   d73d2:	9301      	str	r3, [sp, #4]
   d73d4:	ab07      	add	r3, sp, #28
   d73d6:	9300      	str	r3, [sp, #0]
{     
   d73d8:	4689      	mov	r9, r1
   d73da:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d73dc:	f10d 031b 	add.w	r3, sp, #27
   d73e0:	f10d 021a 	add.w	r2, sp, #26
   d73e4:	4651      	mov	r1, sl
{     
   d73e6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d73ea:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d73ec:	f000 fb0c 	bl	d7a08 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d73f0:	4656      	mov	r6, sl
   d73f2:	4604      	mov	r4, r0
   d73f4:	b920      	cbnz	r0, d7400 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d73f6:	2400      	movs	r4, #0
}
   d73f8:	4620      	mov	r0, r4
   d73fa:	b009      	add	sp, #36	; 0x24
   d73fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d7400:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d7404:	b373      	cbz	r3, d7464 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d7406:	f89a 2000 	ldrb.w	r2, [sl]
   d740a:	bb5a      	cbnz	r2, d7464 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d740c:	f1b8 0f00 	cmp.w	r8, #0
   d7410:	d003      	beq.n	d741a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d7412:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d7416:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d741a:	f1bb 0f00 	cmp.w	fp, #0
   d741e:	d003      	beq.n	d7428 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d7420:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7424:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d7428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d742a:	b11a      	cbz	r2, d7434 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d742c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d742e:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d7432:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d7434:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7436:	b11a      	cbz	r2, d7440 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d7438:	9914      	ldr	r1, [sp, #80]	; 0x50
   d743a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d743e:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d7440:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d7442:	b11a      	cbz	r2, d744c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d7444:	9915      	ldr	r1, [sp, #84]	; 0x54
   d7446:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d744a:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d744c:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d744e:	493d      	ldr	r1, [pc, #244]	; (d7544 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d7450:	3b01      	subs	r3, #1
   d7452:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d7454:	429a      	cmp	r2, r3
		*len = msgLen;
   d7456:	bf88      	it	hi
   d7458:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d745a:	783a      	ldrb	r2, [r7, #0]
   d745c:	4648      	mov	r0, r9
   d745e:	f004 fc01 	bl	dbc64 <memcpy>
	    return true;
   d7462:	e7c9      	b.n	d73f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d7464:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7468:	2aff      	cmp	r2, #255	; 0xff
   d746a:	d1c4      	bne.n	d73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d746c:	2b01      	cmp	r3, #1
   d746e:	d9c2      	bls.n	d73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d7470:	7832      	ldrb	r2, [r6, #0]
   d7472:	2a01      	cmp	r2, #1
   d7474:	d1bf      	bne.n	d73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d7476:	7a2a      	ldrb	r2, [r5, #8]
   d7478:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d747c:	42a2      	cmp	r2, r4
   d747e:	d0ba      	beq.n	d73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d7480:	1edf      	subs	r7, r3, #3
   d7482:	4931      	ldr	r1, [pc, #196]	; (d7548 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d7484:	b2ff      	uxtb	r7, r7
   d7486:	2300      	movs	r3, #0
   d7488:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d748c:	4547      	cmp	r7, r8
   d748e:	d906      	bls.n	d749e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d7490:	f811 0b01 	ldrb.w	r0, [r1], #1
   d7494:	4282      	cmp	r2, r0
   d7496:	f103 0301 	add.w	r3, r3, #1
   d749a:	d1f5      	bne.n	d7488 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d749c:	e7ab      	b.n	d73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d749e:	f105 0904 	add.w	r9, r5, #4
   d74a2:	4648      	mov	r0, r9
   d74a4:	f7ff fcdc 	bl	d6e60 <_ZN10RHDatagram10headerFromEv>
   d74a8:	2302      	movs	r3, #2
   d74aa:	4602      	mov	r2, r0
   d74ac:	4621      	mov	r1, r4
   d74ae:	4628      	mov	r0, r5
   d74b0:	f000 fa17 	bl	d78e2 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d74b4:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d74b8:	b193      	cbz	r3, d74e0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d74ba:	4c24      	ldr	r4, [pc, #144]	; (d754c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d74bc:	1ba3      	subs	r3, r4, r6
   d74be:	b2db      	uxtb	r3, r3
   d74c0:	429f      	cmp	r7, r3
   d74c2:	d90c      	bls.n	d74de <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d74c4:	78e1      	ldrb	r1, [r4, #3]
   d74c6:	9105      	str	r1, [sp, #20]
   d74c8:	4648      	mov	r0, r9
   d74ca:	f7ff fcc9 	bl	d6e60 <_ZN10RHDatagram10headerFromEv>
   d74ce:	9905      	ldr	r1, [sp, #20]
   d74d0:	4602      	mov	r2, r0
   d74d2:	2302      	movs	r3, #2
   d74d4:	4628      	mov	r0, r5
   d74d6:	f000 fa04 	bl	d78e2 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d74da:	3401      	adds	r4, #1
   d74dc:	e7ee      	b.n	d74bc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d74de:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d74e0:	682b      	ldr	r3, [r5, #0]
   d74e2:	7872      	ldrb	r2, [r6, #1]
   d74e4:	68db      	ldr	r3, [r3, #12]
   d74e6:	491a      	ldr	r1, [pc, #104]	; (d7550 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d74e8:	4628      	mov	r0, r5
   d74ea:	4798      	blx	r3
   d74ec:	4604      	mov	r4, r0
   d74ee:	b160      	cbz	r0, d750a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d74f0:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d74f2:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d74f4:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d74f6:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d74fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d74fe:	4913      	ldr	r1, [pc, #76]	; (d754c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d7500:	9400      	str	r4, [sp, #0]
   d7502:	4628      	mov	r0, r5
   d7504:	f000 fa76 	bl	d79f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d7508:	e776      	b.n	d73f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d750a:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d750e:	4543      	cmp	r3, r8
   d7510:	f67f af71 	bls.w	d73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d7514:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d7518:	2b00      	cmp	r3, #0
   d751a:	f43f af6c 	beq.w	d73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d751e:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d7522:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7524:	4909      	ldr	r1, [pc, #36]	; (d754c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d7526:	443e      	add	r6, r7
		tmpMessageLen++;
   d7528:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d752a:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d752c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d7530:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d7532:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7534:	9300      	str	r3, [sp, #0]
   d7536:	4628      	mov	r0, r5
   d7538:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d753a:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d753e:	f000 fa23 	bl	d7988 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d7542:	e759      	b.n	d73f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d7544:	2003e33d 	.word	0x2003e33d
   d7548:	2003e33f 	.word	0x2003e33f
   d754c:	2003e33c 	.word	0x2003e33c
   d7550:	2003e33e 	.word	0x2003e33e

000d7554 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d7554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7558:	b085      	sub	sp, #20
   d755a:	4680      	mov	r8, r0
   d755c:	461c      	mov	r4, r3
   d755e:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d7562:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d7564:	4689      	mov	r9, r1
   d7566:	4692      	mov	sl, r2
   d7568:	f000 fed4 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d756c:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d7570:	4404      	add	r4, r0
   d7572:	f000 fecf 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
   d7576:	1a20      	subs	r0, r4, r0
   d7578:	2800      	cmp	r0, #0
   d757a:	dd16      	ble.n	d75aa <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d757c:	b281      	uxth	r1, r0
   d757e:	2200      	movs	r2, #0
   d7580:	4658      	mov	r0, fp
   d7582:	f7ff fc2a 	bl	d6dda <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7586:	2800      	cmp	r0, #0
   d7588:	d0f3      	beq.n	d7572 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d758a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d758c:	9300      	str	r3, [sp, #0]
   d758e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7594:	9501      	str	r5, [sp, #4]
   d7596:	4652      	mov	r2, sl
   d7598:	4649      	mov	r1, r9
   d759a:	4640      	mov	r0, r8
   d759c:	f7ff ff08 	bl	d73b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d75a0:	2800      	cmp	r0, #0
   d75a2:	d0e6      	beq.n	d7572 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d75a4:	b005      	add	sp, #20
   d75a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d75aa:	2000      	movs	r0, #0
   d75ac:	e7fa      	b.n	d75a4 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d75b0 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d75b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75b2:	b085      	sub	sp, #20
   d75b4:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d75b6:	3004      	adds	r0, #4
{
   d75b8:	460e      	mov	r6, r1
   d75ba:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d75bc:	f7ff fc50 	bl	d6e60 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d75c0:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d75c2:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d75c4:	4631      	mov	r1, r6
   d75c6:	4628      	mov	r0, r5
   d75c8:	f000 f947 	bl	d785a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d75cc:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d75ce:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d75d0:	d001      	beq.n	d75d6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d75d2:	2805      	cmp	r0, #5
   d75d4:	d11b      	bne.n	d760e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d75d6:	7831      	ldrb	r1, [r6, #0]
   d75d8:	4628      	mov	r0, r5
   d75da:	f000 f96b 	bl	d78b4 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d75de:	7872      	ldrb	r2, [r6, #1]
   d75e0:	7a2b      	ldrb	r3, [r5, #8]
   d75e2:	429a      	cmp	r2, r3
   d75e4:	d013      	beq.n	d760e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d75e6:	4c0b      	ldr	r4, [pc, #44]	; (d7614 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d75e8:	2303      	movs	r3, #3
   d75ea:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d75ec:	7833      	ldrb	r3, [r6, #0]
   d75ee:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d75f0:	7871      	ldrb	r1, [r6, #1]
   d75f2:	2302      	movs	r3, #2
   d75f4:	463a      	mov	r2, r7
   d75f6:	4628      	mov	r0, r5
   d75f8:	f000 f973 	bl	d78e2 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d75fc:	2300      	movs	r3, #0
   d75fe:	9300      	str	r3, [sp, #0]
   d7600:	4621      	mov	r1, r4
   d7602:	7873      	ldrb	r3, [r6, #1]
   d7604:	2202      	movs	r2, #2
   d7606:	4628      	mov	r0, r5
   d7608:	f000 f9f4 	bl	d79f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d760c:	4604      	mov	r4, r0
}
   d760e:	4620      	mov	r0, r4
   d7610:	b005      	add	sp, #20
   d7612:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7614:	2003e33c 	.word	0x2003e33c

000d7618 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d7618:	b510      	push	{r4, lr}
   d761a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d761c:	f7ff fbd2 	bl	d6dc4 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d7620:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d7622:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d7624:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d7626:	2303      	movs	r3, #3
    _retransmissions = 0;
   d7628:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d762a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d762c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d762e:	f44f 7280 	mov.w	r2, #256	; 0x100
   d7632:	f104 0011 	add.w	r0, r4, #17
   d7636:	f004 fb3d 	bl	dbcb4 <memset>
}
   d763a:	4620      	mov	r0, r4
   d763c:	bd10      	pop	{r4, pc}

000d763e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d763e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7640:	4604      	mov	r4, r0
   d7642:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d7644:	f7ff fc00 	bl	d6e48 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d7648:	4620      	mov	r0, r4
   d764a:	2200      	movs	r2, #0
   d764c:	2180      	movs	r1, #128	; 0x80
   d764e:	f7ff fbff 	bl	d6e50 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d7652:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d7654:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d7656:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d765a:	f10d 010f 	add.w	r1, sp, #15
   d765e:	2201      	movs	r2, #1
   d7660:	4620      	mov	r0, r4
   d7662:	f7ff fbc2 	bl	d6dea <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d7666:	4620      	mov	r0, r4
   d7668:	f7ff fbb3 	bl	d6dd2 <_ZN10RHDatagram14waitPacketSentEv>
}
   d766c:	b004      	add	sp, #16
   d766e:	bd10      	pop	{r4, pc}

000d7670 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d7670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7674:	7b05      	ldrb	r5, [r0, #12]
   d7676:	3501      	adds	r5, #1
   d7678:	b2ed      	uxtb	r5, r5
{
   d767a:	b087      	sub	sp, #28
   d767c:	4604      	mov	r4, r0
   d767e:	4689      	mov	r9, r1
   d7680:	4692      	mov	sl, r2
   d7682:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7684:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d7686:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d7688:	7c22      	ldrb	r2, [r4, #16]
   d768a:	463b      	mov	r3, r7
   d768c:	429a      	cmp	r2, r3
   d768e:	f107 0701 	add.w	r7, r7, #1
   d7692:	b2ff      	uxtb	r7, r7
   d7694:	d36b      	bcc.n	d776e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d7696:	4629      	mov	r1, r5
   d7698:	4620      	mov	r0, r4
   d769a:	f7ff fbd5 	bl	d6e48 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d769e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d76a0:	bf0d      	iteet	eq
   d76a2:	22c0      	moveq	r2, #192	; 0xc0
   d76a4:	2280      	movne	r2, #128	; 0x80
   d76a6:	2140      	movne	r1, #64	; 0x40
   d76a8:	2100      	moveq	r1, #0
   d76aa:	4620      	mov	r0, r4
   d76ac:	f7ff fbd0 	bl	d6e50 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d76b0:	4643      	mov	r3, r8
   d76b2:	4652      	mov	r2, sl
   d76b4:	4649      	mov	r1, r9
   d76b6:	4620      	mov	r0, r4
   d76b8:	f7ff fb97 	bl	d6dea <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d76bc:	4620      	mov	r0, r4
   d76be:	f7ff fb88 	bl	d6dd2 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d76c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d76c6:	d054      	beq.n	d7772 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d76c8:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d76ca:	bf82      	ittt	hi
   d76cc:	68a3      	ldrhi	r3, [r4, #8]
   d76ce:	3301      	addhi	r3, #1
   d76d0:	60a3      	strhi	r3, [r4, #8]
   d76d2:	f000 fe1f 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d76d6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d76da:	4683      	mov	fp, r0
   d76dc:	2000      	movs	r0, #0
   d76de:	89e6      	ldrh	r6, [r4, #14]
   d76e0:	f003 f88d 	bl	da7fe <_Z6randomii>
   d76e4:	4370      	muls	r0, r6
   d76e6:	bf48      	it	mi
   d76e8:	30ff      	addmi	r0, #255	; 0xff
   d76ea:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d76ee:	fa1b f686 	uxtah	r6, fp, r6
   d76f2:	f000 fe0f 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
   d76f6:	1a30      	subs	r0, r6, r0
   d76f8:	2800      	cmp	r0, #0
   d76fa:	ddc5      	ble.n	d7688 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d76fc:	b281      	uxth	r1, r0
   d76fe:	2200      	movs	r2, #0
   d7700:	4620      	mov	r0, r4
   d7702:	f7ff fb6a 	bl	d6dda <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7706:	2800      	cmp	r0, #0
   d7708:	d0f3      	beq.n	d76f2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d770a:	f10d 0317 	add.w	r3, sp, #23
   d770e:	9302      	str	r3, [sp, #8]
   d7710:	f10d 0316 	add.w	r3, sp, #22
   d7714:	9301      	str	r3, [sp, #4]
   d7716:	2200      	movs	r2, #0
   d7718:	f10d 0315 	add.w	r3, sp, #21
   d771c:	9300      	str	r3, [sp, #0]
   d771e:	4611      	mov	r1, r2
   d7720:	ab05      	add	r3, sp, #20
   d7722:	4620      	mov	r0, r4
   d7724:	f7ff fba8 	bl	d6e78 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d7728:	2800      	cmp	r0, #0
   d772a:	d0e2      	beq.n	d76f2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d772c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d7730:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d7734:	4542      	cmp	r2, r8
   d7736:	d10e      	bne.n	d7756 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d7738:	f894 c004 	ldrb.w	ip, [r4, #4]
   d773c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d7740:	458c      	cmp	ip, r1
   d7742:	d108      	bne.n	d7756 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d7744:	2b00      	cmp	r3, #0
   d7746:	da08      	bge.n	d775a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d7748:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d774c:	42ab      	cmp	r3, r5
   d774e:	d1d0      	bne.n	d76f2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d7750:	b007      	add	sp, #28
   d7752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d7756:	2b00      	cmp	r3, #0
   d7758:	dbcb      	blt.n	d76f2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d775a:	18a1      	adds	r1, r4, r2
   d775c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d7760:	7c49      	ldrb	r1, [r1, #17]
   d7762:	4299      	cmp	r1, r3
   d7764:	d1c5      	bne.n	d76f2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d7766:	4620      	mov	r0, r4
   d7768:	f7ff ff69 	bl	d763e <_ZN18RHReliableDatagram11acknowledgeEhh>
   d776c:	e7c1      	b.n	d76f2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d776e:	2000      	movs	r0, #0
   d7770:	e7ee      	b.n	d7750 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d7772:	2001      	movs	r0, #1
   d7774:	e7ec      	b.n	d7750 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d7776 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d7776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d777a:	b089      	sub	sp, #36	; 0x24
   d777c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d7780:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d7784:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d7786:	4604      	mov	r4, r0
   d7788:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d778a:	f7ff fb1e 	bl	d6dca <_ZN10RHDatagram9availableEv>
   d778e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d7792:	b920      	cbnz	r0, d779e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d7794:	2500      	movs	r5, #0
}
   d7796:	4628      	mov	r0, r5
   d7798:	b009      	add	sp, #36	; 0x24
   d779a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d779e:	f10d 031f 	add.w	r3, sp, #31
   d77a2:	9302      	str	r3, [sp, #8]
   d77a4:	f10d 031e 	add.w	r3, sp, #30
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	f10d 031d 	add.w	r3, sp, #29
   d77ae:	9300      	str	r3, [sp, #0]
   d77b0:	4620      	mov	r0, r4
   d77b2:	ab07      	add	r3, sp, #28
   d77b4:	f7ff fb60 	bl	d6e78 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d77b8:	4605      	mov	r5, r0
   d77ba:	2800      	cmp	r0, #0
   d77bc:	d0ea      	beq.n	d7794 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d77be:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d77c2:	2b00      	cmp	r3, #0
   d77c4:	dbe6      	blt.n	d7794 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d77c6:	7922      	ldrb	r2, [r4, #4]
   d77c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d77cc:	429a      	cmp	r2, r3
   d77ce:	d106      	bne.n	d77de <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d77d0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d77d4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d77d8:	4620      	mov	r0, r4
   d77da:	f7ff ff30 	bl	d763e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d77de:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d77e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d77e6:	4414      	add	r4, r2
   d77e8:	7c61      	ldrb	r1, [r4, #17]
   d77ea:	4299      	cmp	r1, r3
   d77ec:	d0d2      	beq.n	d7794 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d77ee:	b106      	cbz	r6, d77f2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d77f0:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d77f2:	f1b9 0f00 	cmp.w	r9, #0
   d77f6:	d003      	beq.n	d7800 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d77f8:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d77fc:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d7800:	f1b8 0f00 	cmp.w	r8, #0
   d7804:	d001      	beq.n	d780a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d7806:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d780a:	b117      	cbz	r7, d7812 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d780c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d7810:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d7812:	7463      	strb	r3, [r4, #17]
		return true;
   d7814:	e7bf      	b.n	d7796 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d7816 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d7816:	4770      	bx	lr

000d7818 <_ZN8RHRouter4initEv>:
{
   d7818:	b510      	push	{r4, lr}
   d781a:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d781c:	3004      	adds	r0, #4
   d781e:	f7ff fb05 	bl	d6e2c <_ZN10RHDatagram4initEv>
    if (ret)
   d7822:	b110      	cbz	r0, d782a <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d7824:	231e      	movs	r3, #30
   d7826:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d782a:	bd10      	pop	{r4, pc}

000d782c <_ZN8RHRouter10getRouteToEh>:
{
   d782c:	b510      	push	{r4, lr}
   d782e:	4602      	mov	r2, r0
   d7830:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d7832:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d7836:	428c      	cmp	r4, r1
   d7838:	d108      	bne.n	d784c <_ZN8RHRouter10getRouteToEh+0x20>
   d783a:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d783e:	b12c      	cbz	r4, d784c <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d7840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7844:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d7848:	4418      	add	r0, r3
}
   d784a:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d784c:	3301      	adds	r3, #1
   d784e:	2b0a      	cmp	r3, #10
   d7850:	f102 0203 	add.w	r2, r2, #3
   d7854:	d1ed      	bne.n	d7832 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d7856:	2000      	movs	r0, #0
   d7858:	e7f7      	b.n	d784a <_ZN8RHRouter10getRouteToEh+0x1e>

000d785a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d785a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d785c:	780b      	ldrb	r3, [r1, #0]
   d785e:	2bff      	cmp	r3, #255	; 0xff
{
   d7860:	4605      	mov	r5, r0
   d7862:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d7864:	d006      	beq.n	d7874 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d7866:	4619      	mov	r1, r3
   d7868:	9201      	str	r2, [sp, #4]
   d786a:	f7ff ffdf 	bl	d782c <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d786e:	b158      	cbz	r0, d7888 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d7870:	7843      	ldrb	r3, [r0, #1]
   d7872:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d7874:	4621      	mov	r1, r4
   d7876:	1d28      	adds	r0, r5, #4
   d7878:	f7ff fefa 	bl	d7670 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d787c:	2800      	cmp	r0, #0
   d787e:	bf14      	ite	ne
   d7880:	2000      	movne	r0, #0
   d7882:	2005      	moveq	r0, #5
}
   d7884:	b003      	add	sp, #12
   d7886:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d7888:	2002      	movs	r0, #2
   d788a:	e7fb      	b.n	d7884 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d788c <_ZN8RHRouter11deleteRouteEh>:
{
   d788c:	b510      	push	{r4, lr}
   d788e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d7892:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d7894:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d7898:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d789c:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d78a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d78a4:	4421      	add	r1, r4
   d78a6:	4420      	add	r0, r4
   d78a8:	f004 f9dc 	bl	dbc64 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d78ac:	2300      	movs	r3, #0
   d78ae:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d78b2:	bd10      	pop	{r4, pc}

000d78b4 <_ZN8RHRouter13deleteRouteToEh>:
{
   d78b4:	b538      	push	{r3, r4, r5, lr}
   d78b6:	460a      	mov	r2, r1
   d78b8:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d78ba:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d78be:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d78c2:	b2d9      	uxtb	r1, r3
   d78c4:	5d65      	ldrb	r5, [r4, r5]
   d78c6:	4295      	cmp	r5, r2
   d78c8:	d103      	bne.n	d78d2 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d78ca:	f7ff ffdf 	bl	d788c <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d78ce:	2001      	movs	r0, #1
}
   d78d0:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d78d2:	3301      	adds	r3, #1
   d78d4:	2b0a      	cmp	r3, #10
   d78d6:	d1f2      	bne.n	d78be <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d78d8:	2000      	movs	r0, #0
   d78da:	e7f9      	b.n	d78d0 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d78dc <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d78dc:	2100      	movs	r1, #0
   d78de:	f7ff bfd5 	b.w	d788c <_ZN8RHRouter11deleteRouteEh>

000d78e2 <_ZN8RHRouter10addRouteToEhhh>:
{
   d78e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78e4:	4616      	mov	r6, r2
   d78e6:	461f      	mov	r7, r3
   d78e8:	4604      	mov	r4, r0
   d78ea:	460d      	mov	r5, r1
   d78ec:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d78ee:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d78f2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d78f6:	5c11      	ldrb	r1, [r2, r0]
   d78f8:	42a9      	cmp	r1, r5
   d78fa:	d105      	bne.n	d7908 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d78fc:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d78fe:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d7902:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d7906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7908:	3301      	adds	r3, #1
   d790a:	2b0a      	cmp	r3, #10
   d790c:	d1f1      	bne.n	d78f2 <_ZN8RHRouter10addRouteToEhhh+0x10>
   d790e:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d7910:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d7914:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d7918:	5c11      	ldrb	r1, [r2, r0]
   d791a:	b919      	cbnz	r1, d7924 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d791c:	4420      	add	r0, r4
   d791e:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d7922:	e7ec      	b.n	d78fe <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7924:	3301      	adds	r3, #1
   d7926:	2b0a      	cmp	r3, #10
   d7928:	d1f4      	bne.n	d7914 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d792a:	4620      	mov	r0, r4
   d792c:	f7ff ffd6 	bl	d78dc <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7930:	4620      	mov	r0, r4
   d7932:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d7936:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d793a:	b92a      	cbnz	r2, d7948 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d793c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d7940:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d7944:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7948:	3003      	adds	r0, #3
   d794a:	4298      	cmp	r0, r3
   d794c:	d1f3      	bne.n	d7936 <_ZN8RHRouter10addRouteToEhhh+0x54>
   d794e:	e7da      	b.n	d7906 <_ZN8RHRouter10addRouteToEhhh+0x24>

000d7950 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7950:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d7954:	2200      	movs	r2, #0
   d7956:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d795a:	3003      	adds	r0, #3
   d795c:	4298      	cmp	r0, r3
   d795e:	d1fa      	bne.n	d7956 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d7960:	4770      	bx	lr
	...

000d7964 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d7964:	b510      	push	{r4, lr}
   d7966:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d7968:	3004      	adds	r0, #4
   d796a:	f7ff fe55 	bl	d7618 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d796e:	4b05      	ldr	r3, [pc, #20]	; (d7984 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d7970:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d7972:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d7976:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d7978:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d797c:	f7ff ffe8 	bl	d7950 <_ZN8RHRouter17clearRoutingTableEv>
}
   d7980:	4620      	mov	r0, r4
   d7982:	bd10      	pop	{r4, pc}
   d7984:	000dc7d4 	.word	0x000dc7d4

000d7988 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d7988:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d798c:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d798e:	6840      	ldr	r0, [r0, #4]
{
   d7990:	9101      	str	r1, [sp, #4]
   d7992:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7994:	6803      	ldr	r3, [r0, #0]
{
   d7996:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d799a:	699b      	ldr	r3, [r3, #24]
{
   d799c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d79a0:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d79a2:	4798      	blx	r3
   d79a4:	f106 0805 	add.w	r8, r6, #5
   d79a8:	4580      	cmp	r8, r0
   d79aa:	d81c      	bhi.n	d79e6 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d79ac:	4d10      	ldr	r5, [pc, #64]	; (d79f0 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d79ae:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d79b0:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d79b4:	2300      	movs	r3, #0
   d79b6:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d79b8:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d79bc:	70eb      	strb	r3, [r5, #3]
   d79be:	1c5a      	adds	r2, r3, #1
   d79c0:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d79c4:	1d68      	adds	r0, r5, #5
   d79c6:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d79c8:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d79ca:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d79ce:	f004 f949 	bl	dbc64 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d79d2:	6823      	ldr	r3, [r4, #0]
   d79d4:	685b      	ldr	r3, [r3, #4]
   d79d6:	fa5f f288 	uxtb.w	r2, r8
   d79da:	4629      	mov	r1, r5
   d79dc:	4620      	mov	r0, r4
}
   d79de:	b002      	add	sp, #8
   d79e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d79e4:	4718      	bx	r3
}
   d79e6:	2001      	movs	r0, #1
   d79e8:	b002      	add	sp, #8
   d79ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79ee:	bf00      	nop
   d79f0:	2003e436 	.word	0x2003e436

000d79f4 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d79f4:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d79f6:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d79fa:	9401      	str	r4, [sp, #4]
   d79fc:	7a04      	ldrb	r4, [r0, #8]
   d79fe:	9400      	str	r4, [sp, #0]
   d7a00:	f7ff ffc2 	bl	d7988 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d7a04:	b002      	add	sp, #8
   d7a06:	bd10      	pop	{r4, pc}

000d7a08 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d7a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a0c:	b087      	sub	sp, #28
   d7a0e:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d7a10:	23ff      	movs	r3, #255	; 0xff
   d7a12:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7a16:	f10d 0317 	add.w	r3, sp, #23
   d7a1a:	9302      	str	r3, [sp, #8]
   d7a1c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d7af0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d7a20:	f10d 0316 	add.w	r3, sp, #22
   d7a24:	9301      	str	r3, [sp, #4]
   d7a26:	f10d 0315 	add.w	r3, sp, #21
   d7a2a:	9300      	str	r3, [sp, #0]
{  
   d7a2c:	4604      	mov	r4, r0
   d7a2e:	4688      	mov	r8, r1
   d7a30:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7a32:	ab05      	add	r3, sp, #20
   d7a34:	f10d 0213 	add.w	r2, sp, #19
   d7a38:	4649      	mov	r1, r9
   d7a3a:	3004      	adds	r0, #4
{  
   d7a3c:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7a40:	f7ff fe99 	bl	d7776 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d7a44:	4605      	mov	r5, r0
   d7a46:	b908      	cbnz	r0, d7a4c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d7a48:	2500      	movs	r5, #0
   d7a4a:	e038      	b.n	d7abe <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d7a4c:	6823      	ldr	r3, [r4, #0]
   d7a4e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d7a52:	681b      	ldr	r3, [r3, #0]
   d7a54:	4649      	mov	r1, r9
   d7a56:	4620      	mov	r0, r4
   d7a58:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d7a5a:	f899 3000 	ldrb.w	r3, [r9]
   d7a5e:	7a22      	ldrb	r2, [r4, #8]
   d7a60:	429a      	cmp	r2, r3
   d7a62:	d001      	beq.n	d7a68 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d7a64:	2bff      	cmp	r3, #255	; 0xff
   d7a66:	d12e      	bne.n	d7ac6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d7a68:	b117      	cbz	r7, d7a70 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d7a6a:	4b21      	ldr	r3, [pc, #132]	; (d7af0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7a6c:	785b      	ldrb	r3, [r3, #1]
   d7a6e:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d7a70:	f1bb 0f00 	cmp.w	fp, #0
   d7a74:	d003      	beq.n	d7a7e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d7a76:	4b1e      	ldr	r3, [pc, #120]	; (d7af0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7a78:	781b      	ldrb	r3, [r3, #0]
   d7a7a:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d7a7e:	f1ba 0f00 	cmp.w	sl, #0
   d7a82:	d003      	beq.n	d7a8c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d7a84:	4b1a      	ldr	r3, [pc, #104]	; (d7af0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7a86:	78db      	ldrb	r3, [r3, #3]
   d7a88:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d7a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7a8e:	b11b      	cbz	r3, d7a98 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d7a90:	4b17      	ldr	r3, [pc, #92]	; (d7af0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7a92:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7a94:	791b      	ldrb	r3, [r3, #4]
   d7a96:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d7a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7a9a:	b11b      	cbz	r3, d7aa4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d7a9c:	4b14      	ldr	r3, [pc, #80]	; (d7af0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d7a9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7aa0:	789b      	ldrb	r3, [r3, #2]
   d7aa2:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d7aa4:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d7aa8:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d7aaa:	4912      	ldr	r1, [pc, #72]	; (d7af4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d7aac:	3b05      	subs	r3, #5
   d7aae:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d7ab0:	429a      	cmp	r2, r3
		*len = msgLen;
   d7ab2:	bf88      	it	hi
   d7ab4:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d7ab6:	7832      	ldrb	r2, [r6, #0]
   d7ab8:	4640      	mov	r0, r8
   d7aba:	f004 f8d3 	bl	dbc64 <memcpy>
}
   d7abe:	4628      	mov	r0, r5
   d7ac0:	b007      	add	sp, #28
   d7ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d7ac6:	f899 3002 	ldrb.w	r3, [r9, #2]
   d7aca:	1c5a      	adds	r2, r3, #1
   d7acc:	f889 2002 	strb.w	r2, [r9, #2]
   d7ad0:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d7ad4:	429a      	cmp	r2, r3
   d7ad6:	d9b7      	bls.n	d7a48 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d7ad8:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d7adc:	2b00      	cmp	r3, #0
   d7ade:	d0b3      	beq.n	d7a48 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d7ae0:	6823      	ldr	r3, [r4, #0]
   d7ae2:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d7ae6:	685b      	ldr	r3, [r3, #4]
   d7ae8:	4649      	mov	r1, r9
   d7aea:	4620      	mov	r0, r4
   d7aec:	4798      	blx	r3
   d7aee:	e7ab      	b.n	d7a48 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d7af0:	2003e436 	.word	0x2003e436
   d7af4:	2003e43b 	.word	0x2003e43b

000d7af8 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d7af8:	b510      	push	{r4, lr}
   d7afa:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d7afc:	6a00      	ldr	r0, [r0, #32]
   d7afe:	6803      	ldr	r3, [r0, #0]
   d7b00:	68db      	ldr	r3, [r3, #12]
   d7b02:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d7b04:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d7b08:	28ff      	cmp	r0, #255	; 0xff
   d7b0a:	d002      	beq.n	d7b12 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d7b0c:	2101      	movs	r1, #1
   d7b0e:	f003 fbf3 	bl	db2f8 <pinMode>

    deselectSlave();
   d7b12:	6823      	ldr	r3, [r4, #0]
   d7b14:	4620      	mov	r0, r4
   d7b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7b18:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d7b1a:	2064      	movs	r0, #100	; 0x64
   d7b1c:	f000 ff3a 	bl	d8994 <delay>
#endif
    
    return true;
}
   d7b20:	2001      	movs	r0, #1
   d7b22:	bd10      	pop	{r4, pc}

000d7b24 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d7b24:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d7b28:	2100      	movs	r1, #0
   d7b2a:	f003 bbf6 	b.w	db31a <digitalWrite>

000d7b2e <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d7b2e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d7b32:	2101      	movs	r1, #1
   d7b34:	f003 bbf1 	b.w	db31a <digitalWrite>

000d7b38 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d7b38:	b570      	push	{r4, r5, r6, lr}
   d7b3a:	4604      	mov	r4, r0
   d7b3c:	460d      	mov	r5, r1
   d7b3e:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d7b40:	f7ff fa4e 	bl	d6fe0 <_ZN15RHGenericDriverC1Ev>
   d7b44:	4b03      	ldr	r3, [pc, #12]	; (d7b54 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d7b46:	6023      	str	r3, [r4, #0]
   d7b48:	6226      	str	r6, [r4, #32]
   d7b4a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d7b4e:	4620      	mov	r0, r4
   d7b50:	bd70      	pop	{r4, r5, r6, pc}
   d7b52:	bf00      	nop
   d7b54:	000dc7e4 	.word	0x000dc7e4

000d7b58 <_ZN11RHSPIDriver7spiReadEh>:
{
   d7b58:	b538      	push	{r3, r4, r5, lr}
   d7b5a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7b5c:	6a00      	ldr	r0, [r0, #32]
   d7b5e:	6803      	ldr	r3, [r0, #0]
   d7b60:	6a1b      	ldr	r3, [r3, #32]
{
   d7b62:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d7b64:	4798      	blx	r3
    selectSlave();
   d7b66:	6823      	ldr	r3, [r4, #0]
   d7b68:	4620      	mov	r0, r4
   d7b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7b6c:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d7b6e:	6a20      	ldr	r0, [r4, #32]
   d7b70:	6803      	ldr	r3, [r0, #0]
   d7b72:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d7b76:	681b      	ldr	r3, [r3, #0]
   d7b78:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d7b7a:	6a20      	ldr	r0, [r4, #32]
   d7b7c:	6803      	ldr	r3, [r0, #0]
   d7b7e:	2100      	movs	r1, #0
   d7b80:	681b      	ldr	r3, [r3, #0]
   d7b82:	4798      	blx	r3
    deselectSlave();
   d7b84:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d7b86:	4605      	mov	r5, r0
    deselectSlave();
   d7b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7b8a:	4620      	mov	r0, r4
   d7b8c:	4798      	blx	r3
    _spi.endTransaction();
   d7b8e:	6a20      	ldr	r0, [r4, #32]
   d7b90:	6803      	ldr	r3, [r0, #0]
   d7b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7b94:	4798      	blx	r3
}
   d7b96:	4628      	mov	r0, r5
   d7b98:	bd38      	pop	{r3, r4, r5, pc}

000d7b9a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d7b9a:	b570      	push	{r4, r5, r6, lr}
   d7b9c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7b9e:	6a00      	ldr	r0, [r0, #32]
   d7ba0:	6803      	ldr	r3, [r0, #0]
   d7ba2:	6a1b      	ldr	r3, [r3, #32]
{
   d7ba4:	4616      	mov	r6, r2
   d7ba6:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d7ba8:	4798      	blx	r3
    selectSlave();
   d7baa:	6823      	ldr	r3, [r4, #0]
   d7bac:	4620      	mov	r0, r4
   d7bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7bb0:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d7bb2:	6a20      	ldr	r0, [r4, #32]
   d7bb4:	6803      	ldr	r3, [r0, #0]
   d7bb6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d7bba:	681b      	ldr	r3, [r3, #0]
   d7bbc:	4798      	blx	r3
   d7bbe:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d7bc0:	6a20      	ldr	r0, [r4, #32]
   d7bc2:	6803      	ldr	r3, [r0, #0]
   d7bc4:	4631      	mov	r1, r6
   d7bc6:	681b      	ldr	r3, [r3, #0]
   d7bc8:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d7bca:	2001      	movs	r0, #1
   d7bcc:	f000 fb9a 	bl	d8304 <HAL_Delay_Microseconds>
    deselectSlave();
   d7bd0:	6823      	ldr	r3, [r4, #0]
   d7bd2:	4620      	mov	r0, r4
   d7bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7bd6:	4798      	blx	r3
    _spi.endTransaction();
   d7bd8:	6a20      	ldr	r0, [r4, #32]
   d7bda:	6803      	ldr	r3, [r0, #0]
   d7bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7bde:	4798      	blx	r3
}
   d7be0:	4628      	mov	r0, r5
   d7be2:	bd70      	pop	{r4, r5, r6, pc}

000d7be4 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d7be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7be6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7be8:	6a00      	ldr	r0, [r0, #32]
{
   d7bea:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d7bec:	6803      	ldr	r3, [r0, #0]
   d7bee:	6a1b      	ldr	r3, [r3, #32]
{
   d7bf0:	460f      	mov	r7, r1
   d7bf2:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d7bf4:	4798      	blx	r3
    selectSlave();
   d7bf6:	6823      	ldr	r3, [r4, #0]
   d7bf8:	4620      	mov	r0, r4
   d7bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7bfc:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d7bfe:	6a20      	ldr	r0, [r4, #32]
   d7c00:	6803      	ldr	r3, [r0, #0]
   d7c02:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d7c06:	681b      	ldr	r3, [r3, #0]
   d7c08:	4798      	blx	r3
   d7c0a:	442e      	add	r6, r5
   d7c0c:	4607      	mov	r7, r0
    while (len--)
   d7c0e:	42b5      	cmp	r5, r6
   d7c10:	d007      	beq.n	d7c22 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d7c12:	6a20      	ldr	r0, [r4, #32]
   d7c14:	6803      	ldr	r3, [r0, #0]
   d7c16:	2100      	movs	r1, #0
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	4798      	blx	r3
   d7c1c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d7c20:	e7f5      	b.n	d7c0e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d7c22:	6823      	ldr	r3, [r4, #0]
   d7c24:	4620      	mov	r0, r4
   d7c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7c28:	4798      	blx	r3
    _spi.endTransaction();
   d7c2a:	6a20      	ldr	r0, [r4, #32]
   d7c2c:	6803      	ldr	r3, [r0, #0]
   d7c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c30:	4798      	blx	r3
}
   d7c32:	4638      	mov	r0, r7
   d7c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c36 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d7c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c38:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d7c3a:	6a00      	ldr	r0, [r0, #32]
{
   d7c3c:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d7c3e:	6803      	ldr	r3, [r0, #0]
   d7c40:	6a1b      	ldr	r3, [r3, #32]
{
   d7c42:	460f      	mov	r7, r1
   d7c44:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d7c46:	4798      	blx	r3
    selectSlave();
   d7c48:	6823      	ldr	r3, [r4, #0]
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7c4e:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d7c50:	6a20      	ldr	r0, [r4, #32]
   d7c52:	6803      	ldr	r3, [r0, #0]
   d7c54:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	4798      	blx	r3
   d7c5c:	442e      	add	r6, r5
   d7c5e:	4607      	mov	r7, r0
    while (len--)
   d7c60:	42b5      	cmp	r5, r6
   d7c62:	d006      	beq.n	d7c72 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d7c64:	6a20      	ldr	r0, [r4, #32]
   d7c66:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7c6a:	6803      	ldr	r3, [r0, #0]
   d7c6c:	681b      	ldr	r3, [r3, #0]
   d7c6e:	4798      	blx	r3
    while (len--)
   d7c70:	e7f6      	b.n	d7c60 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d7c72:	6823      	ldr	r3, [r4, #0]
   d7c74:	4620      	mov	r0, r4
   d7c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7c78:	4798      	blx	r3
    _spi.endTransaction();
   d7c7a:	6a20      	ldr	r0, [r4, #32]
   d7c7c:	6803      	ldr	r3, [r0, #0]
   d7c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c80:	4798      	blx	r3
}
   d7c82:	4638      	mov	r0, r7
   d7c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c86 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d7c86:	6a00      	ldr	r0, [r0, #32]
   d7c88:	6803      	ldr	r3, [r0, #0]
   d7c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7c8c:	4718      	bx	r3

000d7c8e <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d7c8e:	2001      	movs	r0, #1
   d7c90:	4770      	bx	lr

000d7c92 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d7c92:	20fb      	movs	r0, #251	; 0xfb
   d7c94:	4770      	bx	lr

000d7c96 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d7c96:	4770      	bx	lr

000d7c98 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d7c98:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d7c9a:	7903      	ldrb	r3, [r0, #4]
   d7c9c:	2b05      	cmp	r3, #5
{
   d7c9e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d7ca0:	d010      	beq.n	d7cc4 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d7ca2:	6803      	ldr	r3, [r0, #0]
   d7ca4:	2105      	movs	r1, #5
   d7ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7caa:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d7cac:	2207      	movs	r2, #7
   d7cae:	2101      	movs	r1, #1
   d7cb0:	4620      	mov	r0, r4
   d7cb2:	f7ff ff72 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d7cb6:	2280      	movs	r2, #128	; 0x80
   d7cb8:	2140      	movs	r1, #64	; 0x40
   d7cba:	4620      	mov	r0, r4
   d7cbc:	f7ff ff6d 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d7cc0:	2305      	movs	r3, #5
   d7cc2:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d7cc4:	7923      	ldrb	r3, [r4, #4]
   d7cc6:	2b05      	cmp	r3, #5
   d7cc8:	d0fc      	beq.n	d7cc4 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d7cca:	7e20      	ldrb	r0, [r4, #24]
}
   d7ccc:	bd10      	pop	{r4, pc}

000d7cce <_ZN7RH_RF95D0Ev>:
   d7cce:	b510      	push	{r4, lr}
   d7cd0:	f44f 7198 	mov.w	r1, #304	; 0x130
   d7cd4:	4604      	mov	r4, r0
   d7cd6:	f003 fb89 	bl	db3ec <_ZdlPvj>
   d7cda:	4620      	mov	r0, r4
   d7cdc:	bd10      	pop	{r4, pc}

000d7cde <_ZN7RH_RF955sleepEv>:
{
   d7cde:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d7ce0:	7903      	ldrb	r3, [r0, #4]
   d7ce2:	2b01      	cmp	r3, #1
{
   d7ce4:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d7ce6:	d00b      	beq.n	d7d00 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d7ce8:	6803      	ldr	r3, [r0, #0]
   d7cea:	2101      	movs	r1, #1
   d7cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7cf0:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d7cf2:	2200      	movs	r2, #0
   d7cf4:	2101      	movs	r1, #1
   d7cf6:	4620      	mov	r0, r4
   d7cf8:	f7ff ff4f 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d7cfc:	2301      	movs	r3, #1
   d7cfe:	7123      	strb	r3, [r4, #4]
}
   d7d00:	2001      	movs	r0, #1
   d7d02:	bd10      	pop	{r4, pc}

000d7d04 <_ZN7RH_RF954recvEPhS0_>:
{
   d7d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d7d06:	6803      	ldr	r3, [r0, #0]
   d7d08:	68db      	ldr	r3, [r3, #12]
{
   d7d0a:	4604      	mov	r4, r0
   d7d0c:	460f      	mov	r7, r1
   d7d0e:	4615      	mov	r5, r2
    if (!available())
   d7d10:	4798      	blx	r3
   d7d12:	4606      	mov	r6, r0
   d7d14:	b1b0      	cbz	r0, d7d44 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d7d16:	b187      	cbz	r7, d7d3a <_ZN7RH_RF954recvEPhS0_+0x36>
   d7d18:	b17d      	cbz	r5, d7d3a <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d7d1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d7d1e:	782a      	ldrb	r2, [r5, #0]
   d7d20:	3b03      	subs	r3, #3
   d7d22:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d7d24:	bfde      	ittt	le
   d7d26:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d7d2a:	3b04      	suble	r3, #4
   d7d2c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d7d2e:	782a      	ldrb	r2, [r5, #0]
   d7d30:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d7d34:	4638      	mov	r0, r7
   d7d36:	f003 ff95 	bl	dbc64 <memcpy>
    _rxBufValid = false;
   d7d3a:	2300      	movs	r3, #0
   d7d3c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d7d40:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d7d44:	4630      	mov	r0, r6
   d7d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d48 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d7d48:	b538      	push	{r3, r4, r5, lr}
   d7d4a:	4604      	mov	r4, r0
   d7d4c:	4615      	mov	r5, r2
    _rxBufValid(0)
   d7d4e:	461a      	mov	r2, r3
   d7d50:	f7ff fef2 	bl	d7b38 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d7d54:	4b09      	ldr	r3, [pc, #36]	; (d7d7c <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d7d56:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d7d58:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d7d5a:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d7d5c:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d7d60:	2201      	movs	r2, #1
    _rxBufValid(0)
   d7d62:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d7d66:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d7d6a:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d7d6e:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d7d72:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d7d76:	4620      	mov	r0, r4
   d7d78:	bd38      	pop	{r3, r4, r5, pc}
   d7d7a:	bf00      	nop
   d7d7c:	000dc87c 	.word	0x000dc87c

000d7d80 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d7d80:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d7d84:	2b03      	cmp	r3, #3
   d7d86:	d91b      	bls.n	d7dc0 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d7d88:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7d8c:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d7d8e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d7d92:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d7d94:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d7d98:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d7d9a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d7d9e:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d7da0:	7983      	ldrb	r3, [r0, #6]
   d7da2:	b933      	cbnz	r3, d7db2 <_ZN7RH_RF9513validateRxBufEv+0x32>
   d7da4:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d7da6:	7942      	ldrb	r2, [r0, #5]
   d7da8:	429a      	cmp	r2, r3
   d7daa:	d002      	beq.n	d7db2 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d7dac:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d7dae:	2bff      	cmp	r3, #255	; 0xff
   d7db0:	d106      	bne.n	d7dc0 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d7db2:	8a83      	ldrh	r3, [r0, #20]
   d7db4:	3301      	adds	r3, #1
   d7db6:	b29b      	uxth	r3, r3
   d7db8:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d7dba:	2301      	movs	r3, #1
   d7dbc:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d7dc0:	4770      	bx	lr
   d7dc2:	0000      	movs	r0, r0
   d7dc4:	0000      	movs	r0, r0
	...

000d7dc8 <_ZN7RH_RF9512setFrequencyEf>:
{
   d7dc8:	b538      	push	{r3, r4, r5, lr}
   d7dca:	4604      	mov	r4, r0
   d7dcc:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d7dd0:	ee10 0a10 	vmov	r0, s0
{
   d7dd4:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d7dd8:	f003 fc7c 	bl	db6d4 <__aeabi_f2d>
   d7ddc:	a317      	add	r3, pc, #92	; (adr r3, d7e3c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d7dde:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7de2:	f003 fccf 	bl	db784 <__aeabi_dmul>
   d7de6:	a317      	add	r3, pc, #92	; (adr r3, d7e44 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d7de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7dec:	f003 fdf4 	bl	db9d8 <__aeabi_ddiv>
   d7df0:	f003 feda 	bl	dbba8 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d7df4:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d7df6:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d7df8:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	f7ff fecc 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d7e02:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d7e06:	2107      	movs	r1, #7
   d7e08:	4620      	mov	r0, r4
   d7e0a:	f7ff fec6 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d7e0e:	b2ea      	uxtb	r2, r5
   d7e10:	2108      	movs	r1, #8
   d7e12:	4620      	mov	r0, r4
   d7e14:	f7ff fec1 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d7e18:	eddf 7a07 	vldr	s15, [pc, #28]	; d7e38 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d7e1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d7e20:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d7e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7e28:	bfac      	ite	ge
   d7e2a:	2301      	movge	r3, #1
   d7e2c:	2300      	movlt	r3, #0
}
   d7e2e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d7e30:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d7e34:	bd38      	pop	{r3, r4, r5, pc}
   d7e36:	bf00      	nop
   d7e38:	4442c000 	.word	0x4442c000
   d7e3c:	00000000 	.word	0x00000000
   d7e40:	412e8480 	.word	0x412e8480
   d7e44:	00000000 	.word	0x00000000
   d7e48:	404e8480 	.word	0x404e8480

000d7e4c <_ZN7RH_RF9511setModeIdleEv>:
{
   d7e4c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d7e4e:	7903      	ldrb	r3, [r0, #4]
   d7e50:	2b02      	cmp	r3, #2
{
   d7e52:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d7e54:	d00b      	beq.n	d7e6e <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d7e56:	6803      	ldr	r3, [r0, #0]
   d7e58:	2102      	movs	r1, #2
   d7e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7e5e:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d7e60:	2201      	movs	r2, #1
   d7e62:	4611      	mov	r1, r2
   d7e64:	4620      	mov	r0, r4
   d7e66:	f7ff fe98 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d7e6a:	2302      	movs	r3, #2
   d7e6c:	7123      	strb	r3, [r4, #4]
}
   d7e6e:	bd10      	pop	{r4, pc}

000d7e70 <_ZN7RH_RF9515handleInterruptEv>:
{
   d7e70:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d7e72:	2112      	movs	r1, #18
{
   d7e74:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d7e76:	f7ff fe6f 	bl	d7b58 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d7e7a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d7e7c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d7e7e:	4620      	mov	r0, r4
   d7e80:	f7ff fe6a 	bl	d7b58 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7e84:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d7e86:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7e88:	2112      	movs	r1, #18
   d7e8a:	4620      	mov	r0, r4
   d7e8c:	f7ff fe85 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d7e90:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d7e92:	2b04      	cmp	r3, #4
   d7e94:	d107      	bne.n	d7ea6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d7e96:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d7e9a:	d117      	bne.n	d7ecc <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d7e9c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d7ea0:	b10b      	cbz	r3, d7ea6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d7ea2:	0670      	lsls	r0, r6, #25
   d7ea4:	d512      	bpl.n	d7ecc <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d7ea6:	7923      	ldrb	r3, [r4, #4]
   d7ea8:	2b04      	cmp	r3, #4
   d7eaa:	d101      	bne.n	d7eb0 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d7eac:	0669      	lsls	r1, r5, #25
   d7eae:	d422      	bmi.n	d7ef6 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d7eb0:	7923      	ldrb	r3, [r4, #4]
   d7eb2:	2b03      	cmp	r3, #3
   d7eb4:	d101      	bne.n	d7eba <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d7eb6:	072a      	lsls	r2, r5, #28
   d7eb8:	d469      	bmi.n	d7f8e <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d7eba:	7923      	ldrb	r3, [r4, #4]
   d7ebc:	2b05      	cmp	r3, #5
   d7ebe:	d10e      	bne.n	d7ede <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d7ec0:	076b      	lsls	r3, r5, #29
   d7ec2:	d50c      	bpl.n	d7ede <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d7ec4:	f005 0501 	and.w	r5, r5, #1
   d7ec8:	7625      	strb	r5, [r4, #24]
   d7eca:	e059      	b.n	d7f80 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d7ecc:	8a63      	ldrh	r3, [r4, #18]
   d7ece:	3301      	adds	r3, #1
   d7ed0:	b29b      	uxth	r3, r3
   d7ed2:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d7ed4:	2300      	movs	r3, #0
   d7ed6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d7eda:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7ede:	22ff      	movs	r2, #255	; 0xff
   d7ee0:	2112      	movs	r1, #18
   d7ee2:	4620      	mov	r0, r4
   d7ee4:	f7ff fe59 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7ee8:	4620      	mov	r0, r4
   d7eea:	22ff      	movs	r2, #255	; 0xff
}
   d7eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7ef0:	2112      	movs	r1, #18
   d7ef2:	f7ff be52 	b.w	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d7ef6:	2113      	movs	r1, #19
   d7ef8:	4620      	mov	r0, r4
   d7efa:	f7ff fe2d 	bl	d7b58 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d7efe:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d7f00:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d7f02:	4620      	mov	r0, r4
   d7f04:	f7ff fe28 	bl	d7b58 <_ZN11RHSPIDriver7spiReadEh>
   d7f08:	210d      	movs	r1, #13
   d7f0a:	4602      	mov	r2, r0
   d7f0c:	4620      	mov	r0, r4
   d7f0e:	f7ff fe44 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d7f12:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d7f16:	462b      	mov	r3, r5
   d7f18:	2100      	movs	r1, #0
   d7f1a:	4620      	mov	r0, r4
   d7f1c:	f7ff fe62 	bl	d7be4 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d7f20:	2119      	movs	r1, #25
	_bufLen = len;
   d7f22:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d7f26:	4620      	mov	r0, r4
   d7f28:	f7ff fe16 	bl	d7b58 <_ZN11RHSPIDriver7spiReadEh>
   d7f2c:	b240      	sxtb	r0, r0
   d7f2e:	2800      	cmp	r0, #0
   d7f30:	bfb8      	it	lt
   d7f32:	3003      	addlt	r0, #3
   d7f34:	1080      	asrs	r0, r0, #2
   d7f36:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d7f3a:	211a      	movs	r1, #26
   d7f3c:	4620      	mov	r0, r4
   d7f3e:	f7ff fe0b 	bl	d7b58 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d7f42:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d7f46:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d7f48:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d7f4a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d7f4c:	bfa9      	itett	ge
   d7f4e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d7f50:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d7f52:	b21b      	sxthge	r3, r3
   d7f54:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d7f56:	bfb2      	itee	lt
   d7f58:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d7f5a:	220f      	movge	r2, #15
   d7f5c:	fb93 f3f2 	sdivge	r3, r3, r2
   d7f60:	b21b      	sxth	r3, r3
   d7f62:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d7f64:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d7f68:	b173      	cbz	r3, d7f88 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d7f6a:	8a23      	ldrh	r3, [r4, #16]
   d7f6c:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d7f6e:	b21b      	sxth	r3, r3
   d7f70:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d7f72:	4620      	mov	r0, r4
   d7f74:	f7ff ff04 	bl	d7d80 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d7f78:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d7f7c:	2b00      	cmp	r3, #0
   d7f7e:	d0ae      	beq.n	d7ede <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d7f80:	4620      	mov	r0, r4
   d7f82:	f7ff ff63 	bl	d7e4c <_ZN7RH_RF9511setModeIdleEv>
   d7f86:	e7aa      	b.n	d7ede <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d7f88:	8a23      	ldrh	r3, [r4, #16]
   d7f8a:	3ba4      	subs	r3, #164	; 0xa4
   d7f8c:	e7ef      	b.n	d7f6e <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d7f8e:	8ae3      	ldrh	r3, [r4, #22]
   d7f90:	3301      	adds	r3, #1
   d7f92:	b29b      	uxth	r3, r3
   d7f94:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d7f96:	e7f3      	b.n	d7f80 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d7f98 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d7f98:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <_ZN7RH_RF954isr0Ev+0xc>)
   d7f9a:	6818      	ldr	r0, [r3, #0]
   d7f9c:	b108      	cbz	r0, d7fa2 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d7f9e:	f7ff bf67 	b.w	d7e70 <_ZN7RH_RF9515handleInterruptEv>
}
   d7fa2:	4770      	bx	lr
   d7fa4:	2003e538 	.word	0x2003e538

000d7fa8 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d7fa8:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <_ZN7RH_RF954isr1Ev+0xc>)
   d7faa:	6858      	ldr	r0, [r3, #4]
   d7fac:	b108      	cbz	r0, d7fb2 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d7fae:	f7ff bf5f 	b.w	d7e70 <_ZN7RH_RF9515handleInterruptEv>
}
   d7fb2:	4770      	bx	lr
   d7fb4:	2003e538 	.word	0x2003e538

000d7fb8 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d7fb8:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <_ZN7RH_RF954isr2Ev+0xc>)
   d7fba:	6898      	ldr	r0, [r3, #8]
   d7fbc:	b108      	cbz	r0, d7fc2 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d7fbe:	f7ff bf57 	b.w	d7e70 <_ZN7RH_RF9515handleInterruptEv>
}
   d7fc2:	4770      	bx	lr
   d7fc4:	2003e538 	.word	0x2003e538

000d7fc8 <_ZN7RH_RF959setModeRxEv>:
{
   d7fc8:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d7fca:	7903      	ldrb	r3, [r0, #4]
   d7fcc:	2b04      	cmp	r3, #4
{
   d7fce:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d7fd0:	d010      	beq.n	d7ff4 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d7fd2:	6803      	ldr	r3, [r0, #0]
   d7fd4:	2104      	movs	r1, #4
   d7fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7fda:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d7fdc:	2205      	movs	r2, #5
   d7fde:	2101      	movs	r1, #1
   d7fe0:	4620      	mov	r0, r4
   d7fe2:	f7ff fdda 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d7fe6:	2200      	movs	r2, #0
   d7fe8:	2140      	movs	r1, #64	; 0x40
   d7fea:	4620      	mov	r0, r4
   d7fec:	f7ff fdd5 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d7ff0:	2304      	movs	r3, #4
   d7ff2:	7123      	strb	r3, [r4, #4]
}
   d7ff4:	bd10      	pop	{r4, pc}

000d7ff6 <_ZN7RH_RF959availableEv>:
{
   d7ff6:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d7ff8:	7903      	ldrb	r3, [r0, #4]
   d7ffa:	2b03      	cmp	r3, #3
{
   d7ffc:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d7ffe:	d005      	beq.n	d800c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d8000:	f7ff ffe2 	bl	d7fc8 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d8004:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d8008:	b2c0      	uxtb	r0, r0
}
   d800a:	bd10      	pop	{r4, pc}
	return false;
   d800c:	2000      	movs	r0, #0
   d800e:	e7fc      	b.n	d800a <_ZN7RH_RF959availableEv+0x14>

000d8010 <_ZN7RH_RF959setModeTxEv>:
{
   d8010:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d8012:	7903      	ldrb	r3, [r0, #4]
   d8014:	2b03      	cmp	r3, #3
{
   d8016:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d8018:	d010      	beq.n	d803c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d801a:	6803      	ldr	r3, [r0, #0]
   d801c:	2103      	movs	r1, #3
   d801e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d8022:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d8024:	2203      	movs	r2, #3
   d8026:	2101      	movs	r1, #1
   d8028:	4620      	mov	r0, r4
   d802a:	f7ff fdb6 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d802e:	2240      	movs	r2, #64	; 0x40
   d8030:	4611      	mov	r1, r2
   d8032:	4620      	mov	r0, r4
   d8034:	f7ff fdb1 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d8038:	2303      	movs	r3, #3
   d803a:	7123      	strb	r3, [r4, #4]
}
   d803c:	bd10      	pop	{r4, pc}

000d803e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d803e:	2afb      	cmp	r2, #251	; 0xfb
{
   d8040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8042:	4604      	mov	r4, r0
   d8044:	460f      	mov	r7, r1
   d8046:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d8048:	d902      	bls.n	d8050 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d804a:	2600      	movs	r6, #0
}
   d804c:	4630      	mov	r0, r6
   d804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d8050:	6803      	ldr	r3, [r0, #0]
   d8052:	6a1b      	ldr	r3, [r3, #32]
   d8054:	4798      	blx	r3
    setModeIdle();
   d8056:	4620      	mov	r0, r4
   d8058:	f7ff fef8 	bl	d7e4c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d805c:	6823      	ldr	r3, [r4, #0]
   d805e:	4620      	mov	r0, r4
   d8060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8062:	4798      	blx	r3
   d8064:	4606      	mov	r6, r0
   d8066:	2800      	cmp	r0, #0
   d8068:	d0ef      	beq.n	d804a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d806a:	2200      	movs	r2, #0
   d806c:	210d      	movs	r1, #13
   d806e:	4620      	mov	r0, r4
   d8070:	f7ff fd93 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d8074:	7ae2      	ldrb	r2, [r4, #11]
   d8076:	2100      	movs	r1, #0
   d8078:	4620      	mov	r0, r4
   d807a:	f7ff fd8e 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d807e:	7b22      	ldrb	r2, [r4, #12]
   d8080:	2100      	movs	r1, #0
   d8082:	4620      	mov	r0, r4
   d8084:	f7ff fd89 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d8088:	7b62      	ldrb	r2, [r4, #13]
   d808a:	2100      	movs	r1, #0
   d808c:	4620      	mov	r0, r4
   d808e:	f7ff fd84 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d8092:	7ba2      	ldrb	r2, [r4, #14]
   d8094:	2100      	movs	r1, #0
   d8096:	4620      	mov	r0, r4
   d8098:	f7ff fd7f 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d809c:	462b      	mov	r3, r5
   d809e:	463a      	mov	r2, r7
   d80a0:	2100      	movs	r1, #0
   d80a2:	4620      	mov	r0, r4
   d80a4:	f7ff fdc7 	bl	d7c36 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d80a8:	1d2a      	adds	r2, r5, #4
   d80aa:	b2d2      	uxtb	r2, r2
   d80ac:	2122      	movs	r1, #34	; 0x22
   d80ae:	4620      	mov	r0, r4
   d80b0:	f7ff fd73 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d80b4:	4620      	mov	r0, r4
   d80b6:	f7ff ffab 	bl	d8010 <_ZN7RH_RF959setModeTxEv>
    return true;
   d80ba:	e7c7      	b.n	d804c <_ZN7RH_RF954sendEPKhh+0xe>

000d80bc <_ZN7RH_RF9510setTxPowerEab>:
{
   d80bc:	b538      	push	{r3, r4, r5, lr}
   d80be:	4605      	mov	r5, r0
   d80c0:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d80c2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d80c6:	b172      	cbz	r2, d80e6 <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d80c8:	f381 0204 	usat	r2, #4, r1
   d80cc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d80d0:	b2d2      	uxtb	r2, r2
   d80d2:	2109      	movs	r1, #9
   d80d4:	f7ff fd61 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d80d8:	2204      	movs	r2, #4
   d80da:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d80dc:	4628      	mov	r0, r5
}
   d80de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d80e2:	f7ff bd5a 	b.w	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d80e6:	2914      	cmp	r1, #20
   d80e8:	dc10      	bgt.n	d810c <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d80ea:	2901      	cmp	r1, #1
   d80ec:	dd10      	ble.n	d8110 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d80ee:	2911      	cmp	r1, #17
   d80f0:	dd0f      	ble.n	d8112 <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d80f2:	2207      	movs	r2, #7
   d80f4:	214d      	movs	r1, #77	; 0x4d
   d80f6:	4628      	mov	r0, r5
   d80f8:	f7ff fd4f 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d80fc:	3c03      	subs	r4, #3
   d80fe:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d8100:	1ea2      	subs	r2, r4, #2
   d8102:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d8106:	b2d2      	uxtb	r2, r2
   d8108:	2109      	movs	r1, #9
   d810a:	e7e7      	b.n	d80dc <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d810c:	2414      	movs	r4, #20
   d810e:	e7f0      	b.n	d80f2 <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d8110:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d8112:	2204      	movs	r2, #4
   d8114:	214d      	movs	r1, #77	; 0x4d
   d8116:	4628      	mov	r0, r5
   d8118:	f7ff fd3f 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
   d811c:	e7f0      	b.n	d8100 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d811e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d811e:	b538      	push	{r3, r4, r5, lr}
   d8120:	460c      	mov	r4, r1
   d8122:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d8124:	780a      	ldrb	r2, [r1, #0]
   d8126:	211d      	movs	r1, #29
   d8128:	f7ff fd37 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d812c:	7862      	ldrb	r2, [r4, #1]
   d812e:	211e      	movs	r1, #30
   d8130:	4628      	mov	r0, r5
   d8132:	f7ff fd32 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d8136:	78a2      	ldrb	r2, [r4, #2]
   d8138:	4628      	mov	r0, r5
   d813a:	2126      	movs	r1, #38	; 0x26
}
   d813c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d8140:	f7ff bd2b 	b.w	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>

000d8144 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d8144:	2905      	cmp	r1, #5
{
   d8146:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d8148:	d80f      	bhi.n	d816a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d814a:	4b09      	ldr	r3, [pc, #36]	; (d8170 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d814c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d8150:	185c      	adds	r4, r3, r1
   d8152:	5a5a      	ldrh	r2, [r3, r1]
   d8154:	78a3      	ldrb	r3, [r4, #2]
   d8156:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d815a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d815c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d8160:	f7ff ffdd 	bl	d811e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d8164:	2001      	movs	r0, #1
}
   d8166:	b002      	add	sp, #8
   d8168:	bd10      	pop	{r4, pc}
        return false;
   d816a:	2000      	movs	r0, #0
   d816c:	e7fb      	b.n	d8166 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d816e:	bf00      	nop
   d8170:	000dc864 	.word	0x000dc864

000d8174 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d8174:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d8176:	0a0a      	lsrs	r2, r1, #8
{
   d8178:	4605      	mov	r5, r0
   d817a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d817c:	2120      	movs	r1, #32
   d817e:	f7ff fd0c 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d8182:	b2e2      	uxtb	r2, r4
   d8184:	4628      	mov	r0, r5
   d8186:	2121      	movs	r1, #33	; 0x21
}
   d8188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d818c:	f7ff bd05 	b.w	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>

000d8190 <_ZN7RH_RF954initEv>:
{
   d8190:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8192:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d8194:	f7ff fcb0 	bl	d7af8 <_ZN11RHSPIDriver4initEv>
   d8198:	4606      	mov	r6, r0
   d819a:	b918      	cbnz	r0, d81a4 <_ZN7RH_RF954initEv+0x14>
	return false;
   d819c:	2600      	movs	r6, #0
}
   d819e:	4630      	mov	r0, r6
   d81a0:	b002      	add	sp, #8
   d81a2:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d81a4:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d81a8:	2dff      	cmp	r5, #255	; 0xff
   d81aa:	d052      	beq.n	d8252 <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d81ac:	4629      	mov	r1, r5
   d81ae:	4620      	mov	r0, r4
   d81b0:	f7ff fd69 	bl	d7c86 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d81b4:	2280      	movs	r2, #128	; 0x80
   d81b6:	2101      	movs	r1, #1
   d81b8:	4620      	mov	r0, r4
   d81ba:	f7ff fcee 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d81be:	200a      	movs	r0, #10
   d81c0:	f000 fbe8 	bl	d8994 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d81c4:	2101      	movs	r1, #1
   d81c6:	4620      	mov	r0, r4
   d81c8:	f7ff fcc6 	bl	d7b58 <_ZN11RHSPIDriver7spiReadEh>
   d81cc:	2880      	cmp	r0, #128	; 0x80
   d81ce:	d1e5      	bne.n	d819c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d81d0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d81d4:	28ff      	cmp	r0, #255	; 0xff
   d81d6:	d01c      	beq.n	d8212 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d81d8:	2100      	movs	r1, #0
   d81da:	f003 f88d 	bl	db2f8 <pinMode>
	if (_myInterruptIndex == 0xff)
   d81de:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d81e2:	2bff      	cmp	r3, #255	; 0xff
   d81e4:	d107      	bne.n	d81f6 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d81e6:	4a25      	ldr	r2, [pc, #148]	; (d827c <_ZN7RH_RF954initEv+0xec>)
   d81e8:	7813      	ldrb	r3, [r2, #0]
   d81ea:	2b03      	cmp	r3, #3
   d81ec:	d8d6      	bhi.n	d819c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d81ee:	1c59      	adds	r1, r3, #1
   d81f0:	7011      	strb	r1, [r2, #0]
   d81f2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d81f6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d81fa:	4b21      	ldr	r3, [pc, #132]	; (d8280 <_ZN7RH_RF954initEv+0xf0>)
   d81fc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d8200:	bb52      	cbnz	r2, d8258 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d8202:	4920      	ldr	r1, [pc, #128]	; (d8284 <_ZN7RH_RF954initEv+0xf4>)
   d8204:	9200      	str	r2, [sp, #0]
   d8206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d820a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d820c:	b2a8      	uxth	r0, r5
   d820e:	f000 ffb5 	bl	d917c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d8212:	2200      	movs	r2, #0
   d8214:	210e      	movs	r1, #14
   d8216:	4620      	mov	r0, r4
   d8218:	f7ff fcbf 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d821c:	2200      	movs	r2, #0
   d821e:	210f      	movs	r1, #15
   d8220:	4620      	mov	r0, r4
   d8222:	f7ff fcba 	bl	d7b9a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d8226:	4620      	mov	r0, r4
   d8228:	f7ff fe10 	bl	d7e4c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d822c:	2100      	movs	r1, #0
   d822e:	4620      	mov	r0, r4
   d8230:	f7ff ff88 	bl	d8144 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d8234:	2108      	movs	r1, #8
   d8236:	4620      	mov	r0, r4
   d8238:	f7ff ff9c 	bl	d8174 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d823c:	ed9f 0a12 	vldr	s0, [pc, #72]	; d8288 <_ZN7RH_RF954initEv+0xf8>
   d8240:	4620      	mov	r0, r4
   d8242:	f7ff fdc1 	bl	d7dc8 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d8246:	2200      	movs	r2, #0
   d8248:	210d      	movs	r1, #13
   d824a:	4620      	mov	r0, r4
   d824c:	f7ff ff36 	bl	d80bc <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d8250:	e7a5      	b.n	d819e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d8252:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8256:	e7ad      	b.n	d81b4 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d8258:	2a01      	cmp	r2, #1
   d825a:	f04f 0300 	mov.w	r3, #0
   d825e:	d104      	bne.n	d826a <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d8260:	9300      	str	r3, [sp, #0]
   d8262:	490a      	ldr	r1, [pc, #40]	; (d828c <_ZN7RH_RF954initEv+0xfc>)
   d8264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8268:	e7d0      	b.n	d820c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d826a:	2a02      	cmp	r2, #2
   d826c:	d196      	bne.n	d819c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d826e:	9300      	str	r3, [sp, #0]
   d8270:	4907      	ldr	r1, [pc, #28]	; (d8290 <_ZN7RH_RF954initEv+0x100>)
   d8272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8276:	2201      	movs	r2, #1
   d8278:	e7c8      	b.n	d820c <_ZN7RH_RF954initEv+0x7c>
   d827a:	bf00      	nop
   d827c:	2003e535 	.word	0x2003e535
   d8280:	2003e538 	.word	0x2003e538
   d8284:	000d7f99 	.word	0x000d7f99
   d8288:	43d90000 	.word	0x43d90000
   d828c:	000d7fa9 	.word	0x000d7fa9
   d8290:	000d7fb9 	.word	0x000d7fb9

000d8294 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <os_mutex_recursive_create+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	00030248 	.word	0x00030248

000d82a4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <os_mutex_recursive_destroy+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	00030248 	.word	0x00030248

000d82b4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <os_mutex_recursive_lock+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	00030248 	.word	0x00030248

000d82c4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <os_mutex_recursive_unlock+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	00030248 	.word	0x00030248

000d82d4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <HAL_Feature_Set+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	00030234 	.word	0x00030234

000d82e4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	00030234 	.word	0x00030234

000d82f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <HAL_RNG_GetRandomNumber+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	685b      	ldr	r3, [r3, #4]
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	00030218 	.word	0x00030218

000d8304 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <HAL_Delay_Microseconds+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	68db      	ldr	r3, [r3, #12]
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	00030218 	.word	0x00030218

000d8314 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8314:	b508      	push	{r3, lr}
   d8316:	4b02      	ldr	r3, [pc, #8]	; (d8320 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8318:	681b      	ldr	r3, [r3, #0]
   d831a:	695b      	ldr	r3, [r3, #20]
   d831c:	9301      	str	r3, [sp, #4]
   d831e:	bd08      	pop	{r3, pc}
   d8320:	00030218 	.word	0x00030218

000d8324 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d8324:	b508      	push	{r3, lr}
   d8326:	4b02      	ldr	r3, [pc, #8]	; (d8330 <hal_rtc_time_is_valid+0xc>)
   d8328:	681b      	ldr	r3, [r3, #0]
   d832a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d832c:	9301      	str	r3, [sp, #4]
   d832e:	bd08      	pop	{r3, pc}
   d8330:	00030218 	.word	0x00030218

000d8334 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8334:	b508      	push	{r3, lr}
   d8336:	4b02      	ldr	r3, [pc, #8]	; (d8340 <hal_rtc_get_time+0xc>)
   d8338:	681b      	ldr	r3, [r3, #0]
   d833a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d833c:	9301      	str	r3, [sp, #4]
   d833e:	bd08      	pop	{r3, pc}
   d8340:	00030218 	.word	0x00030218

000d8344 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d8344:	b508      	push	{r3, lr}
   d8346:	4b02      	ldr	r3, [pc, #8]	; (d8350 <hal_rtc_set_time+0xc>)
   d8348:	681b      	ldr	r3, [r3, #0]
   d834a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	bd08      	pop	{r3, pc}
   d8350:	00030218 	.word	0x00030218

000d8354 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b02      	ldr	r3, [pc, #8]	; (d8360 <HAL_Pin_Mode+0xc>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	689b      	ldr	r3, [r3, #8]
   d835c:	9301      	str	r3, [sp, #4]
   d835e:	bd08      	pop	{r3, pc}
   d8360:	0003022c 	.word	0x0003022c

000d8364 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8364:	b508      	push	{r3, lr}
   d8366:	4b02      	ldr	r3, [pc, #8]	; (d8370 <HAL_Get_Pin_Mode+0xc>)
   d8368:	681b      	ldr	r3, [r3, #0]
   d836a:	68db      	ldr	r3, [r3, #12]
   d836c:	9301      	str	r3, [sp, #4]
   d836e:	bd08      	pop	{r3, pc}
   d8370:	0003022c 	.word	0x0003022c

000d8374 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8374:	b508      	push	{r3, lr}
   d8376:	4b02      	ldr	r3, [pc, #8]	; (d8380 <HAL_GPIO_Write+0xc>)
   d8378:	681b      	ldr	r3, [r3, #0]
   d837a:	691b      	ldr	r3, [r3, #16]
   d837c:	9301      	str	r3, [sp, #4]
   d837e:	bd08      	pop	{r3, pc}
   d8380:	0003022c 	.word	0x0003022c

000d8384 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d8384:	b508      	push	{r3, lr}
   d8386:	4b02      	ldr	r3, [pc, #8]	; (d8390 <HAL_GPIO_Read+0xc>)
   d8388:	681b      	ldr	r3, [r3, #0]
   d838a:	695b      	ldr	r3, [r3, #20]
   d838c:	9301      	str	r3, [sp, #4]
   d838e:	bd08      	pop	{r3, pc}
   d8390:	0003022c 	.word	0x0003022c

000d8394 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d8394:	b508      	push	{r3, lr}
   d8396:	4b02      	ldr	r3, [pc, #8]	; (d83a0 <HAL_Interrupts_Attach+0xc>)
   d8398:	681b      	ldr	r3, [r3, #0]
   d839a:	699b      	ldr	r3, [r3, #24]
   d839c:	9301      	str	r3, [sp, #4]
   d839e:	bd08      	pop	{r3, pc}
   d83a0:	0003022c 	.word	0x0003022c

000d83a4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d83a4:	b508      	push	{r3, lr}
   d83a6:	4b02      	ldr	r3, [pc, #8]	; (d83b0 <HAL_Interrupts_Detach+0xc>)
   d83a8:	681b      	ldr	r3, [r3, #0]
   d83aa:	69db      	ldr	r3, [r3, #28]
   d83ac:	9301      	str	r3, [sp, #4]
   d83ae:	bd08      	pop	{r3, pc}
   d83b0:	0003022c 	.word	0x0003022c

000d83b4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d83b4:	b508      	push	{r3, lr}
   d83b6:	4b02      	ldr	r3, [pc, #8]	; (d83c0 <hal_i2c_begin+0xc>)
   d83b8:	681b      	ldr	r3, [r3, #0]
   d83ba:	68db      	ldr	r3, [r3, #12]
   d83bc:	9301      	str	r3, [sp, #4]
   d83be:	bd08      	pop	{r3, pc}
   d83c0:	00030228 	.word	0x00030228

000d83c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d83c4:	b508      	push	{r3, lr}
   d83c6:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <hal_i2c_begin_transmission+0xc>)
   d83c8:	681b      	ldr	r3, [r3, #0]
   d83ca:	699b      	ldr	r3, [r3, #24]
   d83cc:	9301      	str	r3, [sp, #4]
   d83ce:	bd08      	pop	{r3, pc}
   d83d0:	00030228 	.word	0x00030228

000d83d4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d83d4:	b508      	push	{r3, lr}
   d83d6:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <hal_i2c_end_transmission+0xc>)
   d83d8:	681b      	ldr	r3, [r3, #0]
   d83da:	69db      	ldr	r3, [r3, #28]
   d83dc:	9301      	str	r3, [sp, #4]
   d83de:	bd08      	pop	{r3, pc}
   d83e0:	00030228 	.word	0x00030228

000d83e4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d83e4:	b508      	push	{r3, lr}
   d83e6:	4b02      	ldr	r3, [pc, #8]	; (d83f0 <hal_i2c_write+0xc>)
   d83e8:	681b      	ldr	r3, [r3, #0]
   d83ea:	6a1b      	ldr	r3, [r3, #32]
   d83ec:	9301      	str	r3, [sp, #4]
   d83ee:	bd08      	pop	{r3, pc}
   d83f0:	00030228 	.word	0x00030228

000d83f4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d83f4:	b508      	push	{r3, lr}
   d83f6:	4b02      	ldr	r3, [pc, #8]	; (d8400 <hal_i2c_available+0xc>)
   d83f8:	681b      	ldr	r3, [r3, #0]
   d83fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83fc:	9301      	str	r3, [sp, #4]
   d83fe:	bd08      	pop	{r3, pc}
   d8400:	00030228 	.word	0x00030228

000d8404 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8404:	b508      	push	{r3, lr}
   d8406:	4b02      	ldr	r3, [pc, #8]	; (d8410 <hal_i2c_read+0xc>)
   d8408:	681b      	ldr	r3, [r3, #0]
   d840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d840c:	9301      	str	r3, [sp, #4]
   d840e:	bd08      	pop	{r3, pc}
   d8410:	00030228 	.word	0x00030228

000d8414 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8414:	b508      	push	{r3, lr}
   d8416:	4b02      	ldr	r3, [pc, #8]	; (d8420 <hal_i2c_peek+0xc>)
   d8418:	681b      	ldr	r3, [r3, #0]
   d841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d841c:	9301      	str	r3, [sp, #4]
   d841e:	bd08      	pop	{r3, pc}
   d8420:	00030228 	.word	0x00030228

000d8424 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8424:	b508      	push	{r3, lr}
   d8426:	4b02      	ldr	r3, [pc, #8]	; (d8430 <hal_i2c_flush+0xc>)
   d8428:	681b      	ldr	r3, [r3, #0]
   d842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d842c:	9301      	str	r3, [sp, #4]
   d842e:	bd08      	pop	{r3, pc}
   d8430:	00030228 	.word	0x00030228

000d8434 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8434:	b508      	push	{r3, lr}
   d8436:	4b02      	ldr	r3, [pc, #8]	; (d8440 <hal_i2c_is_enabled+0xc>)
   d8438:	681b      	ldr	r3, [r3, #0]
   d843a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d843c:	9301      	str	r3, [sp, #4]
   d843e:	bd08      	pop	{r3, pc}
   d8440:	00030228 	.word	0x00030228

000d8444 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8444:	b508      	push	{r3, lr}
   d8446:	4b02      	ldr	r3, [pc, #8]	; (d8450 <hal_i2c_init+0xc>)
   d8448:	681b      	ldr	r3, [r3, #0]
   d844a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d844c:	9301      	str	r3, [sp, #4]
   d844e:	bd08      	pop	{r3, pc}
   d8450:	00030228 	.word	0x00030228

000d8454 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8454:	b508      	push	{r3, lr}
   d8456:	4b02      	ldr	r3, [pc, #8]	; (d8460 <hal_i2c_lock+0xc>)
   d8458:	681b      	ldr	r3, [r3, #0]
   d845a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d845c:	9301      	str	r3, [sp, #4]
   d845e:	bd08      	pop	{r3, pc}
   d8460:	00030228 	.word	0x00030228

000d8464 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8464:	b508      	push	{r3, lr}
   d8466:	4b02      	ldr	r3, [pc, #8]	; (d8470 <hal_i2c_unlock+0xc>)
   d8468:	681b      	ldr	r3, [r3, #0]
   d846a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d846c:	9301      	str	r3, [sp, #4]
   d846e:	bd08      	pop	{r3, pc}
   d8470:	00030228 	.word	0x00030228

000d8474 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8474:	b508      	push	{r3, lr}
   d8476:	4b02      	ldr	r3, [pc, #8]	; (d8480 <hal_i2c_request_ex+0xc>)
   d8478:	681b      	ldr	r3, [r3, #0]
   d847a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d847c:	9301      	str	r3, [sp, #4]
   d847e:	bd08      	pop	{r3, pc}
   d8480:	00030228 	.word	0x00030228

000d8484 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8484:	b508      	push	{r3, lr}
   d8486:	4b02      	ldr	r3, [pc, #8]	; (d8490 <inet_inet_ntop+0xc>)
   d8488:	681b      	ldr	r3, [r3, #0]
   d848a:	695b      	ldr	r3, [r3, #20]
   d848c:	9301      	str	r3, [sp, #4]
   d848e:	bd08      	pop	{r3, pc}
   d8490:	00030264 	.word	0x00030264

000d8494 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8494:	b508      	push	{r3, lr}
   d8496:	4b02      	ldr	r3, [pc, #8]	; (d84a0 <netdb_freeaddrinfo+0xc>)
   d8498:	681b      	ldr	r3, [r3, #0]
   d849a:	689b      	ldr	r3, [r3, #8]
   d849c:	9301      	str	r3, [sp, #4]
   d849e:	bd08      	pop	{r3, pc}
   d84a0:	00030268 	.word	0x00030268

000d84a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d84a4:	b508      	push	{r3, lr}
   d84a6:	4b02      	ldr	r3, [pc, #8]	; (d84b0 <netdb_getaddrinfo+0xc>)
   d84a8:	681b      	ldr	r3, [r3, #0]
   d84aa:	68db      	ldr	r3, [r3, #12]
   d84ac:	9301      	str	r3, [sp, #4]
   d84ae:	bd08      	pop	{r3, pc}
   d84b0:	00030268 	.word	0x00030268

000d84b4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d84b4:	b508      	push	{r3, lr}
   d84b6:	4b02      	ldr	r3, [pc, #8]	; (d84c0 <hal_spi_begin+0xc>)
   d84b8:	681b      	ldr	r3, [r3, #0]
   d84ba:	681b      	ldr	r3, [r3, #0]
   d84bc:	9301      	str	r3, [sp, #4]
   d84be:	bd08      	pop	{r3, pc}
   d84c0:	00030230 	.word	0x00030230

000d84c4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d84c4:	b508      	push	{r3, lr}
   d84c6:	4b02      	ldr	r3, [pc, #8]	; (d84d0 <hal_spi_end+0xc>)
   d84c8:	681b      	ldr	r3, [r3, #0]
   d84ca:	685b      	ldr	r3, [r3, #4]
   d84cc:	9301      	str	r3, [sp, #4]
   d84ce:	bd08      	pop	{r3, pc}
   d84d0:	00030230 	.word	0x00030230

000d84d4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d84d4:	b508      	push	{r3, lr}
   d84d6:	4b02      	ldr	r3, [pc, #8]	; (d84e0 <hal_spi_transfer+0xc>)
   d84d8:	681b      	ldr	r3, [r3, #0]
   d84da:	695b      	ldr	r3, [r3, #20]
   d84dc:	9301      	str	r3, [sp, #4]
   d84de:	bd08      	pop	{r3, pc}
   d84e0:	00030230 	.word	0x00030230

000d84e4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d84e4:	b508      	push	{r3, lr}
   d84e6:	4b02      	ldr	r3, [pc, #8]	; (d84f0 <hal_spi_init+0xc>)
   d84e8:	681b      	ldr	r3, [r3, #0]
   d84ea:	69db      	ldr	r3, [r3, #28]
   d84ec:	9301      	str	r3, [sp, #4]
   d84ee:	bd08      	pop	{r3, pc}
   d84f0:	00030230 	.word	0x00030230

000d84f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d84f4:	b508      	push	{r3, lr}
   d84f6:	4b02      	ldr	r3, [pc, #8]	; (d8500 <hal_spi_is_enabled+0xc>)
   d84f8:	681b      	ldr	r3, [r3, #0]
   d84fa:	6a1b      	ldr	r3, [r3, #32]
   d84fc:	9301      	str	r3, [sp, #4]
   d84fe:	bd08      	pop	{r3, pc}
   d8500:	00030230 	.word	0x00030230

000d8504 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d8504:	b508      	push	{r3, lr}
   d8506:	4b02      	ldr	r3, [pc, #8]	; (d8510 <hal_spi_info+0xc>)
   d8508:	681b      	ldr	r3, [r3, #0]
   d850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d850c:	9301      	str	r3, [sp, #4]
   d850e:	bd08      	pop	{r3, pc}
   d8510:	00030230 	.word	0x00030230

000d8514 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8514:	b508      	push	{r3, lr}
   d8516:	4b02      	ldr	r3, [pc, #8]	; (d8520 <hal_spi_set_settings+0xc>)
   d8518:	681b      	ldr	r3, [r3, #0]
   d851a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d851c:	9301      	str	r3, [sp, #4]
   d851e:	bd08      	pop	{r3, pc}
   d8520:	00030230 	.word	0x00030230

000d8524 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8524:	b508      	push	{r3, lr}
   d8526:	4b02      	ldr	r3, [pc, #8]	; (d8530 <hal_spi_acquire+0xc>)
   d8528:	681b      	ldr	r3, [r3, #0]
   d852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d852c:	9301      	str	r3, [sp, #4]
   d852e:	bd08      	pop	{r3, pc}
   d8530:	00030230 	.word	0x00030230

000d8534 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8534:	b508      	push	{r3, lr}
   d8536:	4b02      	ldr	r3, [pc, #8]	; (d8540 <hal_spi_release+0xc>)
   d8538:	681b      	ldr	r3, [r3, #0]
   d853a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d853c:	9301      	str	r3, [sp, #4]
   d853e:	bd08      	pop	{r3, pc}
   d8540:	00030230 	.word	0x00030230

000d8544 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8544:	b508      	push	{r3, lr}
   d8546:	4b02      	ldr	r3, [pc, #8]	; (d8550 <hal_usart_init+0xc>)
   d8548:	681b      	ldr	r3, [r3, #0]
   d854a:	681b      	ldr	r3, [r3, #0]
   d854c:	9301      	str	r3, [sp, #4]
   d854e:	bd08      	pop	{r3, pc}
   d8550:	0003023c 	.word	0x0003023c

000d8554 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d8554:	b508      	push	{r3, lr}
   d8556:	4b02      	ldr	r3, [pc, #8]	; (d8560 <hal_usart_end+0xc>)
   d8558:	681b      	ldr	r3, [r3, #0]
   d855a:	689b      	ldr	r3, [r3, #8]
   d855c:	9301      	str	r3, [sp, #4]
   d855e:	bd08      	pop	{r3, pc}
   d8560:	0003023c 	.word	0x0003023c

000d8564 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8564:	b508      	push	{r3, lr}
   d8566:	4b02      	ldr	r3, [pc, #8]	; (d8570 <hal_usart_write+0xc>)
   d8568:	681b      	ldr	r3, [r3, #0]
   d856a:	68db      	ldr	r3, [r3, #12]
   d856c:	9301      	str	r3, [sp, #4]
   d856e:	bd08      	pop	{r3, pc}
   d8570:	0003023c 	.word	0x0003023c

000d8574 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8574:	b508      	push	{r3, lr}
   d8576:	4b02      	ldr	r3, [pc, #8]	; (d8580 <hal_usart_available+0xc>)
   d8578:	681b      	ldr	r3, [r3, #0]
   d857a:	691b      	ldr	r3, [r3, #16]
   d857c:	9301      	str	r3, [sp, #4]
   d857e:	bd08      	pop	{r3, pc}
   d8580:	0003023c 	.word	0x0003023c

000d8584 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8584:	b508      	push	{r3, lr}
   d8586:	4b02      	ldr	r3, [pc, #8]	; (d8590 <hal_usart_read+0xc>)
   d8588:	681b      	ldr	r3, [r3, #0]
   d858a:	695b      	ldr	r3, [r3, #20]
   d858c:	9301      	str	r3, [sp, #4]
   d858e:	bd08      	pop	{r3, pc}
   d8590:	0003023c 	.word	0x0003023c

000d8594 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8594:	b508      	push	{r3, lr}
   d8596:	4b02      	ldr	r3, [pc, #8]	; (d85a0 <hal_usart_peek+0xc>)
   d8598:	681b      	ldr	r3, [r3, #0]
   d859a:	699b      	ldr	r3, [r3, #24]
   d859c:	9301      	str	r3, [sp, #4]
   d859e:	bd08      	pop	{r3, pc}
   d85a0:	0003023c 	.word	0x0003023c

000d85a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d85a4:	b508      	push	{r3, lr}
   d85a6:	4b02      	ldr	r3, [pc, #8]	; (d85b0 <hal_usart_flush+0xc>)
   d85a8:	681b      	ldr	r3, [r3, #0]
   d85aa:	69db      	ldr	r3, [r3, #28]
   d85ac:	9301      	str	r3, [sp, #4]
   d85ae:	bd08      	pop	{r3, pc}
   d85b0:	0003023c 	.word	0x0003023c

000d85b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d85b4:	b508      	push	{r3, lr}
   d85b6:	4b02      	ldr	r3, [pc, #8]	; (d85c0 <hal_usart_is_enabled+0xc>)
   d85b8:	681b      	ldr	r3, [r3, #0]
   d85ba:	6a1b      	ldr	r3, [r3, #32]
   d85bc:	9301      	str	r3, [sp, #4]
   d85be:	bd08      	pop	{r3, pc}
   d85c0:	0003023c 	.word	0x0003023c

000d85c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d85c4:	b508      	push	{r3, lr}
   d85c6:	4b02      	ldr	r3, [pc, #8]	; (d85d0 <hal_usart_available_data_for_write+0xc>)
   d85c8:	681b      	ldr	r3, [r3, #0]
   d85ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d85cc:	9301      	str	r3, [sp, #4]
   d85ce:	bd08      	pop	{r3, pc}
   d85d0:	0003023c 	.word	0x0003023c

000d85d4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d85d4:	b508      	push	{r3, lr}
   d85d6:	4b02      	ldr	r3, [pc, #8]	; (d85e0 <hal_usart_begin_config+0xc>)
   d85d8:	681b      	ldr	r3, [r3, #0]
   d85da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d85dc:	9301      	str	r3, [sp, #4]
   d85de:	bd08      	pop	{r3, pc}
   d85e0:	0003023c 	.word	0x0003023c

000d85e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d85e4:	b508      	push	{r3, lr}
   d85e6:	4b02      	ldr	r3, [pc, #8]	; (d85f0 <HAL_USB_USART_Init+0xc>)
   d85e8:	681b      	ldr	r3, [r3, #0]
   d85ea:	681b      	ldr	r3, [r3, #0]
   d85ec:	9301      	str	r3, [sp, #4]
   d85ee:	bd08      	pop	{r3, pc}
   d85f0:	0003024c 	.word	0x0003024c

000d85f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d85f4:	b508      	push	{r3, lr}
   d85f6:	4b02      	ldr	r3, [pc, #8]	; (d8600 <HAL_USB_USART_Begin+0xc>)
   d85f8:	681b      	ldr	r3, [r3, #0]
   d85fa:	685b      	ldr	r3, [r3, #4]
   d85fc:	9301      	str	r3, [sp, #4]
   d85fe:	bd08      	pop	{r3, pc}
   d8600:	0003024c 	.word	0x0003024c

000d8604 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d8604:	b508      	push	{r3, lr}
   d8606:	4b02      	ldr	r3, [pc, #8]	; (d8610 <HAL_USB_USART_End+0xc>)
   d8608:	681b      	ldr	r3, [r3, #0]
   d860a:	689b      	ldr	r3, [r3, #8]
   d860c:	9301      	str	r3, [sp, #4]
   d860e:	bd08      	pop	{r3, pc}
   d8610:	0003024c 	.word	0x0003024c

000d8614 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8614:	b508      	push	{r3, lr}
   d8616:	4b02      	ldr	r3, [pc, #8]	; (d8620 <HAL_USB_USART_Available_Data+0xc>)
   d8618:	681b      	ldr	r3, [r3, #0]
   d861a:	691b      	ldr	r3, [r3, #16]
   d861c:	9301      	str	r3, [sp, #4]
   d861e:	bd08      	pop	{r3, pc}
   d8620:	0003024c 	.word	0x0003024c

000d8624 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8624:	b508      	push	{r3, lr}
   d8626:	4b02      	ldr	r3, [pc, #8]	; (d8630 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8628:	681b      	ldr	r3, [r3, #0]
   d862a:	695b      	ldr	r3, [r3, #20]
   d862c:	9301      	str	r3, [sp, #4]
   d862e:	bd08      	pop	{r3, pc}
   d8630:	0003024c 	.word	0x0003024c

000d8634 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8634:	b508      	push	{r3, lr}
   d8636:	4b02      	ldr	r3, [pc, #8]	; (d8640 <HAL_USB_USART_Receive_Data+0xc>)
   d8638:	681b      	ldr	r3, [r3, #0]
   d863a:	699b      	ldr	r3, [r3, #24]
   d863c:	9301      	str	r3, [sp, #4]
   d863e:	bd08      	pop	{r3, pc}
   d8640:	0003024c 	.word	0x0003024c

000d8644 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8644:	b508      	push	{r3, lr}
   d8646:	4b02      	ldr	r3, [pc, #8]	; (d8650 <HAL_USB_USART_Send_Data+0xc>)
   d8648:	681b      	ldr	r3, [r3, #0]
   d864a:	69db      	ldr	r3, [r3, #28]
   d864c:	9301      	str	r3, [sp, #4]
   d864e:	bd08      	pop	{r3, pc}
   d8650:	0003024c 	.word	0x0003024c

000d8654 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8654:	b508      	push	{r3, lr}
   d8656:	4b02      	ldr	r3, [pc, #8]	; (d8660 <HAL_USB_USART_Flush_Data+0xc>)
   d8658:	681b      	ldr	r3, [r3, #0]
   d865a:	6a1b      	ldr	r3, [r3, #32]
   d865c:	9301      	str	r3, [sp, #4]
   d865e:	bd08      	pop	{r3, pc}
   d8660:	0003024c 	.word	0x0003024c

000d8664 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8664:	b508      	push	{r3, lr}
   d8666:	4b02      	ldr	r3, [pc, #8]	; (d8670 <panic_+0xc>)
   d8668:	681b      	ldr	r3, [r3, #0]
   d866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d866c:	9301      	str	r3, [sp, #4]
   d866e:	bd08      	pop	{r3, pc}
   d8670:	00030260 	.word	0x00030260

000d8674 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8674:	b508      	push	{r3, lr}
   d8676:	4b02      	ldr	r3, [pc, #8]	; (d8680 <log_message+0xc>)
   d8678:	681b      	ldr	r3, [r3, #0]
   d867a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d867c:	9301      	str	r3, [sp, #4]
   d867e:	bd08      	pop	{r3, pc}
   d8680:	00030260 	.word	0x00030260

000d8684 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8684:	b508      	push	{r3, lr}
   d8686:	4b02      	ldr	r3, [pc, #8]	; (d8690 <log_message_v+0xc>)
   d8688:	681b      	ldr	r3, [r3, #0]
   d868a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d868c:	9301      	str	r3, [sp, #4]
   d868e:	bd08      	pop	{r3, pc}
   d8690:	00030260 	.word	0x00030260

000d8694 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d8694:	b508      	push	{r3, lr}
   d8696:	4b02      	ldr	r3, [pc, #8]	; (d86a0 <log_level_name+0xc>)
   d8698:	681b      	ldr	r3, [r3, #0]
   d869a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d869c:	9301      	str	r3, [sp, #4]
   d869e:	bd08      	pop	{r3, pc}
   d86a0:	00030260 	.word	0x00030260

000d86a4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d86a4:	b508      	push	{r3, lr}
   d86a6:	4b02      	ldr	r3, [pc, #8]	; (d86b0 <log_set_callbacks+0xc>)
   d86a8:	681b      	ldr	r3, [r3, #0]
   d86aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d86ac:	9301      	str	r3, [sp, #4]
   d86ae:	bd08      	pop	{r3, pc}
   d86b0:	00030260 	.word	0x00030260

000d86b4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d86b4:	b508      	push	{r3, lr}
   d86b6:	4b03      	ldr	r3, [pc, #12]	; (d86c4 <diag_get_source+0x10>)
   d86b8:	681b      	ldr	r3, [r3, #0]
   d86ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d86be:	9301      	str	r3, [sp, #4]
   d86c0:	bd08      	pop	{r3, pc}
   d86c2:	0000      	.short	0x0000
   d86c4:	00030260 	.word	0x00030260

000d86c8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d86c8:	b508      	push	{r3, lr}
   d86ca:	4b02      	ldr	r3, [pc, #8]	; (d86d4 <system_mode+0xc>)
   d86cc:	681b      	ldr	r3, [r3, #0]
   d86ce:	681b      	ldr	r3, [r3, #0]
   d86d0:	9301      	str	r3, [sp, #4]
   d86d2:	bd08      	pop	{r3, pc}
   d86d4:	00030220 	.word	0x00030220

000d86d8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d86d8:	b508      	push	{r3, lr}
   d86da:	4b02      	ldr	r3, [pc, #8]	; (d86e4 <set_system_mode+0xc>)
   d86dc:	681b      	ldr	r3, [r3, #0]
   d86de:	685b      	ldr	r3, [r3, #4]
   d86e0:	9301      	str	r3, [sp, #4]
   d86e2:	bd08      	pop	{r3, pc}
   d86e4:	00030220 	.word	0x00030220

000d86e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d86e8:	b508      	push	{r3, lr}
   d86ea:	4b02      	ldr	r3, [pc, #8]	; (d86f4 <system_delay_ms+0xc>)
   d86ec:	681b      	ldr	r3, [r3, #0]
   d86ee:	695b      	ldr	r3, [r3, #20]
   d86f0:	9301      	str	r3, [sp, #4]
   d86f2:	bd08      	pop	{r3, pc}
   d86f4:	00030220 	.word	0x00030220

000d86f8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d86f8:	b508      	push	{r3, lr}
   d86fa:	4b02      	ldr	r3, [pc, #8]	; (d8704 <system_subscribe_event+0xc>)
   d86fc:	681b      	ldr	r3, [r3, #0]
   d86fe:	6a1b      	ldr	r3, [r3, #32]
   d8700:	9301      	str	r3, [sp, #4]
   d8702:	bd08      	pop	{r3, pc}
   d8704:	00030220 	.word	0x00030220

000d8708 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8708:	b508      	push	{r3, lr}
   d870a:	4b02      	ldr	r3, [pc, #8]	; (d8714 <system_thread_set_state+0xc>)
   d870c:	681b      	ldr	r3, [r3, #0]
   d870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8710:	9301      	str	r3, [sp, #4]
   d8712:	bd08      	pop	{r3, pc}
   d8714:	00030220 	.word	0x00030220

000d8718 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8718:	b508      	push	{r3, lr}
   d871a:	4b02      	ldr	r3, [pc, #8]	; (d8724 <application_thread_current+0xc>)
   d871c:	681b      	ldr	r3, [r3, #0]
   d871e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8720:	9301      	str	r3, [sp, #4]
   d8722:	bd08      	pop	{r3, pc}
   d8724:	00030220 	.word	0x00030220

000d8728 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8728:	b508      	push	{r3, lr}
   d872a:	4b02      	ldr	r3, [pc, #8]	; (d8734 <application_thread_invoke+0xc>)
   d872c:	681b      	ldr	r3, [r3, #0]
   d872e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8730:	9301      	str	r3, [sp, #4]
   d8732:	bd08      	pop	{r3, pc}
   d8734:	00030220 	.word	0x00030220

000d8738 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8738:	b508      	push	{r3, lr}
   d873a:	4b02      	ldr	r3, [pc, #8]	; (d8744 <system_thread_get_state+0xc>)
   d873c:	681b      	ldr	r3, [r3, #0]
   d873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8740:	9301      	str	r3, [sp, #4]
   d8742:	bd08      	pop	{r3, pc}
   d8744:	00030220 	.word	0x00030220

000d8748 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8748:	b508      	push	{r3, lr}
   d874a:	4b02      	ldr	r3, [pc, #8]	; (d8754 <system_notify_time_changed+0xc>)
   d874c:	681b      	ldr	r3, [r3, #0]
   d874e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8750:	9301      	str	r3, [sp, #4]
   d8752:	bd08      	pop	{r3, pc}
   d8754:	00030220 	.word	0x00030220

000d8758 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8758:	b508      	push	{r3, lr}
   d875a:	4b03      	ldr	r3, [pc, #12]	; (d8768 <system_ctrl_set_app_request_handler+0x10>)
   d875c:	681b      	ldr	r3, [r3, #0]
   d875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8762:	9301      	str	r3, [sp, #4]
   d8764:	bd08      	pop	{r3, pc}
   d8766:	0000      	.short	0x0000
   d8768:	00030220 	.word	0x00030220

000d876c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d876c:	b508      	push	{r3, lr}
   d876e:	4b03      	ldr	r3, [pc, #12]	; (d877c <system_ctrl_set_result+0x10>)
   d8770:	681b      	ldr	r3, [r3, #0]
   d8772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8776:	9301      	str	r3, [sp, #4]
   d8778:	bd08      	pop	{r3, pc}
   d877a:	0000      	.short	0x0000
   d877c:	00030220 	.word	0x00030220

000d8780 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8780:	b508      	push	{r3, lr}
   d8782:	4b03      	ldr	r3, [pc, #12]	; (d8790 <system_sleep_ext+0x10>)
   d8784:	681b      	ldr	r3, [r3, #0]
   d8786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d878a:	9301      	str	r3, [sp, #4]
   d878c:	bd08      	pop	{r3, pc}
   d878e:	0000      	.short	0x0000
   d8790:	00030220 	.word	0x00030220

000d8794 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8794:	b508      	push	{r3, lr}
   d8796:	4b02      	ldr	r3, [pc, #8]	; (d87a0 <spark_process+0xc>)
   d8798:	681b      	ldr	r3, [r3, #0]
   d879a:	689b      	ldr	r3, [r3, #8]
   d879c:	9301      	str	r3, [sp, #4]
   d879e:	bd08      	pop	{r3, pc}
   d87a0:	00030244 	.word	0x00030244

000d87a4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d87a4:	b508      	push	{r3, lr}
   d87a6:	4b02      	ldr	r3, [pc, #8]	; (d87b0 <spark_cloud_flag_connected+0xc>)
   d87a8:	681b      	ldr	r3, [r3, #0]
   d87aa:	695b      	ldr	r3, [r3, #20]
   d87ac:	9301      	str	r3, [sp, #4]
   d87ae:	bd08      	pop	{r3, pc}
   d87b0:	00030244 	.word	0x00030244

000d87b4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d87b4:	b508      	push	{r3, lr}
   d87b6:	4b02      	ldr	r3, [pc, #8]	; (d87c0 <spark_send_event+0xc>)
   d87b8:	681b      	ldr	r3, [r3, #0]
   d87ba:	6a1b      	ldr	r3, [r3, #32]
   d87bc:	9301      	str	r3, [sp, #4]
   d87be:	bd08      	pop	{r3, pc}
   d87c0:	00030244 	.word	0x00030244

000d87c4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d87c4:	b508      	push	{r3, lr}
   d87c6:	4b02      	ldr	r3, [pc, #8]	; (d87d0 <spark_sync_time_pending+0xc>)
   d87c8:	681b      	ldr	r3, [r3, #0]
   d87ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d87cc:	9301      	str	r3, [sp, #4]
   d87ce:	bd08      	pop	{r3, pc}
   d87d0:	00030244 	.word	0x00030244

000d87d4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d87d4:	b508      	push	{r3, lr}
   d87d6:	4b02      	ldr	r3, [pc, #8]	; (d87e0 <spark_sync_time_last+0xc>)
   d87d8:	681b      	ldr	r3, [r3, #0]
   d87da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d87dc:	9301      	str	r3, [sp, #4]
   d87de:	bd08      	pop	{r3, pc}
   d87e0:	00030244 	.word	0x00030244

000d87e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d87e4:	b508      	push	{r3, lr}
   d87e6:	4b02      	ldr	r3, [pc, #8]	; (d87f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d87e8:	681b      	ldr	r3, [r3, #0]
   d87ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d87ec:	9301      	str	r3, [sp, #4]
   d87ee:	bd08      	pop	{r3, pc}
   d87f0:	00030244 	.word	0x00030244

000d87f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d87f4:	b508      	push	{r3, lr}
   d87f6:	4b02      	ldr	r3, [pc, #8]	; (d8800 <network_connect+0xc>)
   d87f8:	681b      	ldr	r3, [r3, #0]
   d87fa:	685b      	ldr	r3, [r3, #4]
   d87fc:	9301      	str	r3, [sp, #4]
   d87fe:	bd08      	pop	{r3, pc}
   d8800:	00030240 	.word	0x00030240

000d8804 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8804:	b508      	push	{r3, lr}
   d8806:	4b02      	ldr	r3, [pc, #8]	; (d8810 <network_connecting+0xc>)
   d8808:	681b      	ldr	r3, [r3, #0]
   d880a:	689b      	ldr	r3, [r3, #8]
   d880c:	9301      	str	r3, [sp, #4]
   d880e:	bd08      	pop	{r3, pc}
   d8810:	00030240 	.word	0x00030240

000d8814 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8814:	b508      	push	{r3, lr}
   d8816:	4b02      	ldr	r3, [pc, #8]	; (d8820 <network_disconnect+0xc>)
   d8818:	681b      	ldr	r3, [r3, #0]
   d881a:	68db      	ldr	r3, [r3, #12]
   d881c:	9301      	str	r3, [sp, #4]
   d881e:	bd08      	pop	{r3, pc}
   d8820:	00030240 	.word	0x00030240

000d8824 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8824:	b508      	push	{r3, lr}
   d8826:	4b02      	ldr	r3, [pc, #8]	; (d8830 <network_ready+0xc>)
   d8828:	681b      	ldr	r3, [r3, #0]
   d882a:	691b      	ldr	r3, [r3, #16]
   d882c:	9301      	str	r3, [sp, #4]
   d882e:	bd08      	pop	{r3, pc}
   d8830:	00030240 	.word	0x00030240

000d8834 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8834:	b508      	push	{r3, lr}
   d8836:	4b02      	ldr	r3, [pc, #8]	; (d8840 <network_on+0xc>)
   d8838:	681b      	ldr	r3, [r3, #0]
   d883a:	695b      	ldr	r3, [r3, #20]
   d883c:	9301      	str	r3, [sp, #4]
   d883e:	bd08      	pop	{r3, pc}
   d8840:	00030240 	.word	0x00030240

000d8844 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8844:	b508      	push	{r3, lr}
   d8846:	4b02      	ldr	r3, [pc, #8]	; (d8850 <network_off+0xc>)
   d8848:	681b      	ldr	r3, [r3, #0]
   d884a:	699b      	ldr	r3, [r3, #24]
   d884c:	9301      	str	r3, [sp, #4]
   d884e:	bd08      	pop	{r3, pc}
   d8850:	00030240 	.word	0x00030240

000d8854 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8854:	b508      	push	{r3, lr}
   d8856:	4b02      	ldr	r3, [pc, #8]	; (d8860 <network_listen+0xc>)
   d8858:	681b      	ldr	r3, [r3, #0]
   d885a:	69db      	ldr	r3, [r3, #28]
   d885c:	9301      	str	r3, [sp, #4]
   d885e:	bd08      	pop	{r3, pc}
   d8860:	00030240 	.word	0x00030240

000d8864 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8864:	b508      	push	{r3, lr}
   d8866:	4b02      	ldr	r3, [pc, #8]	; (d8870 <network_listening+0xc>)
   d8868:	681b      	ldr	r3, [r3, #0]
   d886a:	6a1b      	ldr	r3, [r3, #32]
   d886c:	9301      	str	r3, [sp, #4]
   d886e:	bd08      	pop	{r3, pc}
   d8870:	00030240 	.word	0x00030240

000d8874 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8874:	b508      	push	{r3, lr}
   d8876:	4b02      	ldr	r3, [pc, #8]	; (d8880 <network_set_listen_timeout+0xc>)
   d8878:	681b      	ldr	r3, [r3, #0]
   d887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d887c:	9301      	str	r3, [sp, #4]
   d887e:	bd08      	pop	{r3, pc}
   d8880:	00030240 	.word	0x00030240

000d8884 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8884:	b508      	push	{r3, lr}
   d8886:	4b02      	ldr	r3, [pc, #8]	; (d8890 <network_get_listen_timeout+0xc>)
   d8888:	681b      	ldr	r3, [r3, #0]
   d888a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d888c:	9301      	str	r3, [sp, #4]
   d888e:	bd08      	pop	{r3, pc}
   d8890:	00030240 	.word	0x00030240

000d8894 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8894:	b508      	push	{r3, lr}
   d8896:	4b02      	ldr	r3, [pc, #8]	; (d88a0 <network_is_on+0xc>)
   d8898:	681b      	ldr	r3, [r3, #0]
   d889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d889c:	9301      	str	r3, [sp, #4]
   d889e:	bd08      	pop	{r3, pc}
   d88a0:	00030240 	.word	0x00030240

000d88a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d88a4:	b508      	push	{r3, lr}
   d88a6:	4b02      	ldr	r3, [pc, #8]	; (d88b0 <network_is_off+0xc>)
   d88a8:	681b      	ldr	r3, [r3, #0]
   d88aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d88ac:	9301      	str	r3, [sp, #4]
   d88ae:	bd08      	pop	{r3, pc}
   d88b0:	00030240 	.word	0x00030240

000d88b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d88b4:	b508      	push	{r3, lr}
   d88b6:	4b02      	ldr	r3, [pc, #8]	; (d88c0 <malloc+0xc>)
   d88b8:	681b      	ldr	r3, [r3, #0]
   d88ba:	681b      	ldr	r3, [r3, #0]
   d88bc:	9301      	str	r3, [sp, #4]
   d88be:	bd08      	pop	{r3, pc}
   d88c0:	0003021c 	.word	0x0003021c

000d88c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d88c4:	b508      	push	{r3, lr}
   d88c6:	4b02      	ldr	r3, [pc, #8]	; (d88d0 <free+0xc>)
   d88c8:	681b      	ldr	r3, [r3, #0]
   d88ca:	685b      	ldr	r3, [r3, #4]
   d88cc:	9301      	str	r3, [sp, #4]
   d88ce:	bd08      	pop	{r3, pc}
   d88d0:	0003021c 	.word	0x0003021c

000d88d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d88d4:	b508      	push	{r3, lr}
   d88d6:	4b02      	ldr	r3, [pc, #8]	; (d88e0 <realloc+0xc>)
   d88d8:	681b      	ldr	r3, [r3, #0]
   d88da:	689b      	ldr	r3, [r3, #8]
   d88dc:	9301      	str	r3, [sp, #4]
   d88de:	bd08      	pop	{r3, pc}
   d88e0:	0003021c 	.word	0x0003021c

000d88e4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d88e4:	b508      	push	{r3, lr}
   d88e6:	4b02      	ldr	r3, [pc, #8]	; (d88f0 <siprintf+0xc>)
   d88e8:	681b      	ldr	r3, [r3, #0]
   d88ea:	691b      	ldr	r3, [r3, #16]
   d88ec:	9301      	str	r3, [sp, #4]
   d88ee:	bd08      	pop	{r3, pc}
   d88f0:	0003021c 	.word	0x0003021c

000d88f4 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d88f4:	b508      	push	{r3, lr}
   d88f6:	4b02      	ldr	r3, [pc, #8]	; (d8900 <sscanf+0xc>)
   d88f8:	681b      	ldr	r3, [r3, #0]
   d88fa:	695b      	ldr	r3, [r3, #20]
   d88fc:	9301      	str	r3, [sp, #4]
   d88fe:	bd08      	pop	{r3, pc}
   d8900:	0003021c 	.word	0x0003021c

000d8904 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8904:	b508      	push	{r3, lr}
   d8906:	4b02      	ldr	r3, [pc, #8]	; (d8910 <snprintf+0xc>)
   d8908:	681b      	ldr	r3, [r3, #0]
   d890a:	69db      	ldr	r3, [r3, #28]
   d890c:	9301      	str	r3, [sp, #4]
   d890e:	bd08      	pop	{r3, pc}
   d8910:	0003021c 	.word	0x0003021c

000d8914 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8914:	b508      	push	{r3, lr}
   d8916:	4b02      	ldr	r3, [pc, #8]	; (d8920 <vsnprintf+0xc>)
   d8918:	681b      	ldr	r3, [r3, #0]
   d891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d891c:	9301      	str	r3, [sp, #4]
   d891e:	bd08      	pop	{r3, pc}
   d8920:	0003021c 	.word	0x0003021c

000d8924 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8924:	b508      	push	{r3, lr}
   d8926:	4b02      	ldr	r3, [pc, #8]	; (d8930 <abort+0xc>)
   d8928:	681b      	ldr	r3, [r3, #0]
   d892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d892c:	9301      	str	r3, [sp, #4]
   d892e:	bd08      	pop	{r3, pc}
   d8930:	0003021c 	.word	0x0003021c

000d8934 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8934:	b508      	push	{r3, lr}
   d8936:	4b02      	ldr	r3, [pc, #8]	; (d8940 <_malloc_r+0xc>)
   d8938:	681b      	ldr	r3, [r3, #0]
   d893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d893c:	9301      	str	r3, [sp, #4]
   d893e:	bd08      	pop	{r3, pc}
   d8940:	0003021c 	.word	0x0003021c

000d8944 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8944:	b508      	push	{r3, lr}
   d8946:	4b02      	ldr	r3, [pc, #8]	; (d8950 <newlib_impure_ptr_callback+0xc>)
   d8948:	681b      	ldr	r3, [r3, #0]
   d894a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d894c:	9301      	str	r3, [sp, #4]
   d894e:	bd08      	pop	{r3, pc}
   d8950:	0003021c 	.word	0x0003021c

000d8954 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8954:	b508      	push	{r3, lr}
   d8956:	4b02      	ldr	r3, [pc, #8]	; (d8960 <strftime+0xc>)
   d8958:	681b      	ldr	r3, [r3, #0]
   d895a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d895c:	9301      	str	r3, [sp, #4]
   d895e:	bd08      	pop	{r3, pc}
   d8960:	0003021c 	.word	0x0003021c

000d8964 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8964:	b508      	push	{r3, lr}
   d8966:	4b02      	ldr	r3, [pc, #8]	; (d8970 <localtime_r+0xc>)
   d8968:	681b      	ldr	r3, [r3, #0]
   d896a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d896c:	9301      	str	r3, [sp, #4]
   d896e:	bd08      	pop	{r3, pc}
   d8970:	0003021c 	.word	0x0003021c

000d8974 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8974:	b508      	push	{r3, lr}
   d8976:	4b02      	ldr	r3, [pc, #8]	; (d8980 <gmtime_r+0xc>)
   d8978:	681b      	ldr	r3, [r3, #0]
   d897a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d897c:	9301      	str	r3, [sp, #4]
   d897e:	bd08      	pop	{r3, pc}
   d8980:	0003021c 	.word	0x0003021c

000d8984 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8984:	b508      	push	{r3, lr}
   d8986:	4b02      	ldr	r3, [pc, #8]	; (d8990 <mktime+0xc>)
   d8988:	681b      	ldr	r3, [r3, #0]
   d898a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d898c:	9301      	str	r3, [sp, #4]
   d898e:	bd08      	pop	{r3, pc}
   d8990:	0003021c 	.word	0x0003021c

000d8994 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8994:	2100      	movs	r1, #0
   d8996:	f7ff bea7 	b.w	d86e8 <system_delay_ms>

000d899a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d899a:	b510      	push	{r4, lr}
      if (_M_empty())
   d899c:	6883      	ldr	r3, [r0, #8]
   d899e:	4604      	mov	r4, r0
   d89a0:	b90b      	cbnz	r3, d89a6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d89a2:	f002 fd2f 	bl	db404 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d89a6:	68c3      	ldr	r3, [r0, #12]
   d89a8:	4798      	blx	r3
      if (_M_manager)
   d89aa:	68a3      	ldr	r3, [r4, #8]
   d89ac:	b11b      	cbz	r3, d89b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d89ae:	2203      	movs	r2, #3
   d89b0:	4621      	mov	r1, r4
   d89b2:	4620      	mov	r0, r4
   d89b4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d89b6:	4620      	mov	r0, r4
   d89b8:	2110      	movs	r1, #16
}
   d89ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d89be:	f002 bd15 	b.w	db3ec <_ZdlPvj>

000d89c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d89c2:	680b      	ldr	r3, [r1, #0]
   d89c4:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d89c6:	b113      	cbz	r3, d89ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d89c8:	685a      	ldr	r2, [r3, #4]
   d89ca:	3201      	adds	r2, #1
   d89cc:	605a      	str	r2, [r3, #4]
      }
   d89ce:	4770      	bx	lr

000d89d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d89d0:	4802      	ldr	r0, [pc, #8]	; (d89dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d89d2:	2300      	movs	r3, #0
   d89d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d89d6:	f7ff bc5d 	b.w	d8294 <os_mutex_recursive_create>
   d89da:	bf00      	nop
   d89dc:	2003e544 	.word	0x2003e544

000d89e0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d89e0:	2200      	movs	r2, #0
   d89e2:	6840      	ldr	r0, [r0, #4]
   d89e4:	4611      	mov	r1, r2
   d89e6:	f7ff bf1d 	b.w	d8824 <network_ready>

000d89ea <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d89ea:	2200      	movs	r2, #0
   d89ec:	6840      	ldr	r0, [r0, #4]
   d89ee:	4611      	mov	r1, r2
   d89f0:	f7ff bf38 	b.w	d8864 <network_listening>

000d89f4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d89f4:	2200      	movs	r2, #0
   d89f6:	6840      	ldr	r0, [r0, #4]
   d89f8:	4611      	mov	r1, r2
   d89fa:	f7ff bf43 	b.w	d8884 <network_get_listen_timeout>

000d89fe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d89fe:	6840      	ldr	r0, [r0, #4]
   d8a00:	2200      	movs	r2, #0
   d8a02:	f7ff bf37 	b.w	d8874 <network_set_listen_timeout>

000d8a06 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8a06:	6840      	ldr	r0, [r0, #4]
   d8a08:	2200      	movs	r2, #0
   d8a0a:	f081 0101 	eor.w	r1, r1, #1
   d8a0e:	f7ff bf21 	b.w	d8854 <network_listen>

000d8a12 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8a12:	2300      	movs	r3, #0
   d8a14:	6840      	ldr	r0, [r0, #4]
   d8a16:	461a      	mov	r2, r3
   d8a18:	4619      	mov	r1, r3
   d8a1a:	f7ff bf13 	b.w	d8844 <network_off>

000d8a1e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8a1e:	2300      	movs	r3, #0
   d8a20:	6840      	ldr	r0, [r0, #4]
   d8a22:	461a      	mov	r2, r3
   d8a24:	4619      	mov	r1, r3
   d8a26:	f7ff bf05 	b.w	d8834 <network_on>

000d8a2a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8a2a:	2200      	movs	r2, #0
   d8a2c:	6840      	ldr	r0, [r0, #4]
   d8a2e:	4611      	mov	r1, r2
   d8a30:	f7ff bee8 	b.w	d8804 <network_connecting>

000d8a34 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8a34:	6840      	ldr	r0, [r0, #4]
   d8a36:	2200      	movs	r2, #0
   d8a38:	2102      	movs	r1, #2
   d8a3a:	f7ff beeb 	b.w	d8814 <network_disconnect>

000d8a3e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8a3e:	2300      	movs	r3, #0
   d8a40:	6840      	ldr	r0, [r0, #4]
   d8a42:	461a      	mov	r2, r3
   d8a44:	f7ff bed6 	b.w	d87f4 <network_connect>

000d8a48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8a48:	4b08      	ldr	r3, [pc, #32]	; (d8a6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8a4a:	b510      	push	{r4, lr}
   d8a4c:	2428      	movs	r4, #40	; 0x28
   d8a4e:	4622      	mov	r2, r4
   d8a50:	4618      	mov	r0, r3
   d8a52:	2100      	movs	r1, #0
   d8a54:	f003 f92e 	bl	dbcb4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8a58:	4b05      	ldr	r3, [pc, #20]	; (d8a70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8a5a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8a60:	6042      	str	r2, [r0, #4]
   d8a62:	2204      	movs	r2, #4
   d8a64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8a66:	4a03      	ldr	r2, [pc, #12]	; (d8a74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8a68:	601a      	str	r2, [r3, #0]
   d8a6a:	bd10      	pop	{r4, pc}
   d8a6c:	2003e550 	.word	0x2003e550
   d8a70:	2003e548 	.word	0x2003e548
   d8a74:	000dc908 	.word	0x000dc908

000d8a78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8a78:	4770      	bx	lr

000d8a7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8a7a:	2000      	movs	r0, #0
   d8a7c:	4770      	bx	lr

000d8a7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8a7e:	b510      	push	{r4, lr}
   d8a80:	2110      	movs	r1, #16
   d8a82:	4604      	mov	r4, r0
   d8a84:	f002 fcb2 	bl	db3ec <_ZdlPvj>
   d8a88:	4620      	mov	r0, r4
   d8a8a:	bd10      	pop	{r4, pc}

000d8a8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8a8c:	b508      	push	{r3, lr}
      { delete this; }
   d8a8e:	f7ff fff6 	bl	d8a7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8a92:	bd08      	pop	{r3, pc}

000d8a94 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d8a94:	b510      	push	{r4, lr}
      if (_M_manager)
   d8a96:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d8a98:	4604      	mov	r4, r0
      if (_M_manager)
   d8a9a:	b113      	cbz	r3, d8aa2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8a9c:	2203      	movs	r2, #3
   d8a9e:	4601      	mov	r1, r0
   d8aa0:	4798      	blx	r3
    }
   d8aa2:	4620      	mov	r0, r4
   d8aa4:	bd10      	pop	{r4, pc}

000d8aa6 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8aa6:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8aa8:	2200      	movs	r2, #0
   d8aaa:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8aae:	6002      	str	r2, [r0, #0]
   d8ab0:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8ab2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8ab4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8ab6:	680c      	ldr	r4, [r1, #0]
   d8ab8:	8085      	strh	r5, [r0, #4]
   d8aba:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8abc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8abe:	bd30      	pop	{r4, r5, pc}

000d8ac0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8ac0:	b510      	push	{r4, lr}
   d8ac2:	4604      	mov	r4, r0
    free((void*)msg_);
   d8ac4:	6800      	ldr	r0, [r0, #0]
   d8ac6:	f7ff fefd 	bl	d88c4 <free>
}
   d8aca:	4620      	mov	r0, r4
   d8acc:	bd10      	pop	{r4, pc}

000d8ace <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8ace:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8ad0:	68c4      	ldr	r4, [r0, #12]
   d8ad2:	b1f4      	cbz	r4, d8b12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8ad4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8ad6:	2b02      	cmp	r3, #2
   d8ad8:	d103      	bne.n	d8ae2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8ada:	f104 000c 	add.w	r0, r4, #12
   d8ade:	f7ff ffef 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8ae2:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8ae4:	b135      	cbz	r5, d8af4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8ae6:	4628      	mov	r0, r5
   d8ae8:	f7ff ffd4 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
   d8aec:	2110      	movs	r1, #16
   d8aee:	4628      	mov	r0, r5
   d8af0:	f002 fc7c 	bl	db3ec <_ZdlPvj>
   d8af4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8af6:	b135      	cbz	r5, d8b06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8af8:	4628      	mov	r0, r5
   d8afa:	f7ff ffcb 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
   d8afe:	2110      	movs	r1, #16
   d8b00:	4628      	mov	r0, r5
   d8b02:	f002 fc73 	bl	db3ec <_ZdlPvj>
   d8b06:	4620      	mov	r0, r4
   d8b08:	2114      	movs	r1, #20
   d8b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8b0e:	f002 bc6d 	b.w	db3ec <_ZdlPvj>
   d8b12:	bd38      	pop	{r3, r4, r5, pc}

000d8b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b16:	460e      	mov	r6, r1
   d8b18:	4604      	mov	r4, r0
   d8b1a:	f856 3b04 	ldr.w	r3, [r6], #4
   d8b1e:	9300      	str	r3, [sp, #0]
   d8b20:	460d      	mov	r5, r1
   d8b22:	a801      	add	r0, sp, #4
   d8b24:	4631      	mov	r1, r6
   d8b26:	f7ff ff4c 	bl	d89c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8b2a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b2c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8b2e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b30:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8b32:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8b34:	2300      	movs	r3, #0
   d8b36:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8b38:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8b3a:	f7fd fdb3 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b3e:	4630      	mov	r0, r6
   d8b40:	f7fd fdb0 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8b44:	4628      	mov	r0, r5
   d8b46:	2108      	movs	r1, #8
   d8b48:	f002 fc50 	bl	db3ec <_ZdlPvj>
        return p;
    }
   d8b4c:	4620      	mov	r0, r4
   d8b4e:	b002      	add	sp, #8
   d8b50:	bd70      	pop	{r4, r5, r6, pc}

000d8b52 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d8b52:	b513      	push	{r0, r1, r4, lr}
   d8b54:	460b      	mov	r3, r1
   d8b56:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b58:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8b5c:	466c      	mov	r4, sp
   d8b5e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8b62:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8b66:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8b6e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8b72:	b002      	add	sp, #8
   d8b74:	bd10      	pop	{r4, pc}

000d8b76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8b76:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8b78:	b510      	push	{r4, lr}
      if (_M_empty())
   d8b7a:	b90a      	cbnz	r2, d8b80 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8b7c:	f002 fc42 	bl	db404 <_ZSt25__throw_bad_function_callv>
    }
   d8b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8b84:	68c3      	ldr	r3, [r0, #12]
   d8b86:	4718      	bx	r3

000d8b88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8b88:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8b8a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8b8c:	f100 0110 	add.w	r1, r0, #16
   d8b90:	f7ff fff1 	bl	d8b76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8b94:	bd08      	pop	{r3, pc}

000d8b96 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8b96:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8b98:	b510      	push	{r4, lr}
      if (_M_empty())
   d8b9a:	b90a      	cbnz	r2, d8ba0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8b9c:	f002 fc32 	bl	db404 <_ZSt25__throw_bad_function_callv>
    }
   d8ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ba4:	68c3      	ldr	r3, [r0, #12]
   d8ba6:	4718      	bx	r3

000d8ba8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ba8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8baa:	6800      	ldr	r0, [r0, #0]
   d8bac:	f100 0110 	add.w	r1, r0, #16
   d8bb0:	f7ff fff1 	bl	d8b96 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8bb4:	bd08      	pop	{r3, pc}
	...

000d8bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8bb8:	b538      	push	{r3, r4, r5, lr}
   d8bba:	2300      	movs	r3, #0
   d8bbc:	4604      	mov	r4, r0
   d8bbe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8bc0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8bc2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8bc4:	f7fb fa67 	bl	d4096 <_Znwj>
   d8bc8:	b128      	cbz	r0, d8bd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8bca:	2301      	movs	r3, #1
   d8bcc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8bd0:	4b02      	ldr	r3, [pc, #8]	; (d8bdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8bd2:	6003      	str	r3, [r0, #0]
   d8bd4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8bd6:	6020      	str	r0, [r4, #0]
	}
   d8bd8:	4620      	mov	r0, r4
   d8bda:	bd38      	pop	{r3, r4, r5, pc}
   d8bdc:	000dc944 	.word	0x000dc944

000d8be0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8be0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8be2:	2300      	movs	r3, #0
   d8be4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8be6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8be8:	4604      	mov	r4, r0
   d8bea:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8bec:	b12b      	cbz	r3, d8bfa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8bee:	2202      	movs	r2, #2
   d8bf0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8bf2:	68eb      	ldr	r3, [r5, #12]
   d8bf4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8bf6:	68ab      	ldr	r3, [r5, #8]
   d8bf8:	60a3      	str	r3, [r4, #8]
    }
   d8bfa:	4620      	mov	r0, r4
   d8bfc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8c00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8c02:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8c04:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8c06:	4668      	mov	r0, sp
   d8c08:	f7ff ff4d 	bl	d8aa6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8c0c:	f04f 0302 	mov.w	r3, #2
   d8c10:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8c14:	2a00      	cmp	r2, #0
   d8c16:	d103      	bne.n	d8c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8c18:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8c1c:	2900      	cmp	r1, #0
   d8c1e:	d1f7      	bne.n	d8c10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8c20:	d125      	bne.n	d8c6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8c22:	f104 050c 	add.w	r5, r4, #12
   d8c26:	4669      	mov	r1, sp
   d8c28:	4628      	mov	r0, r5
   d8c2a:	f7ff ff3c 	bl	d8aa6 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8c2e:	f3bf 8f5b 	dmb	ish
   d8c32:	2301      	movs	r3, #1
   d8c34:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8c36:	2000      	movs	r0, #0
   d8c38:	f104 0308 	add.w	r3, r4, #8
   d8c3c:	f3bf 8f5b 	dmb	ish
   d8c40:	e853 6f00 	ldrex	r6, [r3]
   d8c44:	e843 0200 	strex	r2, r0, [r3]
   d8c48:	2a00      	cmp	r2, #0
   d8c4a:	d1f9      	bne.n	d8c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8c4c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8c50:	b16e      	cbz	r6, d8c6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8c52:	f7ff fd61 	bl	d8718 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8c56:	b178      	cbz	r0, d8c78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8c58:	4629      	mov	r1, r5
   d8c5a:	4630      	mov	r0, r6
   d8c5c:	f7ff ff8b 	bl	d8b76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8c60:	4630      	mov	r0, r6
   d8c62:	f7ff ff17 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8c66:	2110      	movs	r1, #16
   d8c68:	4630      	mov	r0, r6
   d8c6a:	f002 fbbf 	bl	db3ec <_ZdlPvj>
        p_->setError(std::move(error));
   d8c6e:	4668      	mov	r0, sp
   d8c70:	f7ff ff26 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
    }
   d8c74:	b009      	add	sp, #36	; 0x24
   d8c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8c78:	4631      	mov	r1, r6
   d8c7a:	a802      	add	r0, sp, #8
   d8c7c:	f7ff ffb0 	bl	d8be0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8c80:	68e0      	ldr	r0, [r4, #12]
   d8c82:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8c86:	b108      	cbz	r0, d8c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8c88:	f003 f89e 	bl	dbdc8 <strdup>
        type_(type) {
   d8c8c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8c8e:	2010      	movs	r0, #16
   d8c90:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8c94:	f7fb f9ff 	bl	d4096 <_Znwj>
   d8c98:	4605      	mov	r5, r0
   d8c9a:	b1e8      	cbz	r0, d8cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8c9c:	2700      	movs	r7, #0
   d8c9e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ca0:	2018      	movs	r0, #24
   d8ca2:	f7fb f9f8 	bl	d4096 <_Znwj>
   d8ca6:	4604      	mov	r4, r0
   d8ca8:	b188      	cbz	r0, d8cce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8caa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8cac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8cae:	a802      	add	r0, sp, #8
   d8cb0:	f7ff ff4f 	bl	d8b52 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8cb4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8cb6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8cb8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8cba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8cbc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8cbe:	a906      	add	r1, sp, #24
   d8cc0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8cc2:	60e3      	str	r3, [r4, #12]
   d8cc4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8cc8:	9205      	str	r2, [sp, #20]
   d8cca:	f7ff feec 	bl	d8aa6 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8cce:	4b08      	ldr	r3, [pc, #32]	; (d8cf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8cd0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8cd2:	4b08      	ldr	r3, [pc, #32]	; (d8cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8cd4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8cd6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8cd8:	a806      	add	r0, sp, #24
   d8cda:	f7ff fef1 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8cde:	a802      	add	r0, sp, #8
   d8ce0:	f7ff fed8 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8ce4:	2200      	movs	r2, #0
   d8ce6:	4629      	mov	r1, r5
   d8ce8:	4803      	ldr	r0, [pc, #12]	; (d8cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8cea:	f7ff fd1d 	bl	d8728 <application_thread_invoke>
   d8cee:	e7b7      	b.n	d8c60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8cf0:	000d8b89 	.word	0x000d8b89
   d8cf4:	000d8e21 	.word	0x000d8e21
   d8cf8:	000d899b 	.word	0x000d899b

000d8cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8d00:	b08a      	sub	sp, #40	; 0x28
   d8d02:	4605      	mov	r5, r0
   d8d04:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8d08:	460c      	mov	r4, r1
   d8d0a:	4617      	mov	r7, r2
   d8d0c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8d0e:	f7ff fd49 	bl	d87a4 <spark_cloud_flag_connected>
   d8d12:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8d14:	4682      	mov	sl, r0
   d8d16:	bb38      	cbnz	r0, d8d68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8d18:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8d1c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8d1e:	a905      	add	r1, sp, #20
   d8d20:	4630      	mov	r0, r6
   d8d22:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8d26:	f7ff febe 	bl	d8aa6 <_ZN8particle5ErrorC1EOS0_>
   d8d2a:	2014      	movs	r0, #20
   d8d2c:	f7fb f9b3 	bl	d4096 <_Znwj>
   d8d30:	4604      	mov	r4, r0
   d8d32:	b148      	cbz	r0, d8d48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8d34:	2302      	movs	r3, #2
   d8d36:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8d38:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8d3a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8d3e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8d40:	4631      	mov	r1, r6
   d8d42:	300c      	adds	r0, #12
   d8d44:	f7ff feaf 	bl	d8aa6 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8d48:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8d4a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8d4c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8d50:	f7ff ff32 	bl	d8bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8d54:	4630      	mov	r0, r6
   d8d56:	f7ff feb3 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8d5a:	a805      	add	r0, sp, #20
   d8d5c:	f7ff feb0 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8d60:	4628      	mov	r0, r5
   d8d62:	b00a      	add	sp, #40	; 0x28
   d8d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8d68:	230c      	movs	r3, #12
   d8d6a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8d6e:	2014      	movs	r0, #20
   d8d70:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8d74:	9307      	str	r3, [sp, #28]
   d8d76:	f7fb f98e 	bl	d4096 <_Znwj>
   d8d7a:	4601      	mov	r1, r0
   d8d7c:	b128      	cbz	r0, d8d8a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8d7e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8d82:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8d86:	f880 a001 	strb.w	sl, [r0, #1]
   d8d8a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8d8c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8d8e:	f7ff ff13 	bl	d8bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8d92:	4b22      	ldr	r3, [pc, #136]	; (d8e1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8d94:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8d96:	2008      	movs	r0, #8
   d8d98:	f7fb f97d 	bl	d4096 <_Znwj>
   d8d9c:	4682      	mov	sl, r0
   d8d9e:	b128      	cbz	r0, d8dac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8da0:	9b03      	ldr	r3, [sp, #12]
   d8da2:	f840 3b04 	str.w	r3, [r0], #4
   d8da6:	a904      	add	r1, sp, #16
   d8da8:	f7ff fe0b 	bl	d89c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8dac:	9600      	str	r6, [sp, #0]
   d8dae:	fa5f f389 	uxtb.w	r3, r9
   d8db2:	4642      	mov	r2, r8
   d8db4:	4639      	mov	r1, r7
   d8db6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8db8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8dbc:	f7ff fcfa 	bl	d87b4 <spark_send_event>
   d8dc0:	b9b8      	cbnz	r0, d8df2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8dc2:	9b03      	ldr	r3, [sp, #12]
   d8dc4:	785b      	ldrb	r3, [r3, #1]
   d8dc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8dca:	b993      	cbnz	r3, d8df2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8dcc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8dd0:	a905      	add	r1, sp, #20
   d8dd2:	a803      	add	r0, sp, #12
   d8dd4:	9205      	str	r2, [sp, #20]
   d8dd6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8dda:	f7ff ff11 	bl	d8c00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8dde:	a805      	add	r0, sp, #20
   d8de0:	f7ff fe6e 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8de4:	a805      	add	r0, sp, #20
   d8de6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8de8:	f7ff fe94 	bl	d8b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8dec:	a806      	add	r0, sp, #24
   d8dee:	f7fd fc59 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8df2:	9b03      	ldr	r3, [sp, #12]
   d8df4:	9305      	str	r3, [sp, #20]
   d8df6:	a904      	add	r1, sp, #16
   d8df8:	a806      	add	r0, sp, #24
   d8dfa:	f7ff fde2 	bl	d89c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8dfe:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8e00:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8e02:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8e04:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8e06:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8e08:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8e0a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8e0c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8e0e:	f7fd fc49 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e12:	a804      	add	r0, sp, #16
   d8e14:	f7fd fc46 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8e18:	e7a2      	b.n	d8d60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8e1a:	bf00      	nop
   d8e1c:	000d8ee5 	.word	0x000d8ee5

000d8e20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8e20:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8e24:	4605      	mov	r5, r0
	  switch (__op)
   d8e26:	d007      	beq.n	d8e38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8e28:	2a03      	cmp	r2, #3
   d8e2a:	d018      	beq.n	d8e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8e2c:	2a01      	cmp	r2, #1
   d8e2e:	d101      	bne.n	d8e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8e30:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8e32:	6003      	str	r3, [r0, #0]
	}
   d8e34:	2000      	movs	r0, #0
   d8e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8e38:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8e3a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8e3c:	f7fb f92b 	bl	d4096 <_Znwj>
   d8e40:	4604      	mov	r4, r0
   d8e42:	b150      	cbz	r0, d8e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8e44:	4631      	mov	r1, r6
   d8e46:	f7ff fecb 	bl	d8be0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8e4a:	6930      	ldr	r0, [r6, #16]
   d8e4c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8e50:	b108      	cbz	r0, d8e56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8e52:	f002 ffb9 	bl	dbdc8 <strdup>
        type_(type) {
   d8e56:	6120      	str	r0, [r4, #16]
   d8e58:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8e5a:	602c      	str	r4, [r5, #0]
	}
   d8e5c:	e7ea      	b.n	d8e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8e5e:	6804      	ldr	r4, [r0, #0]
   d8e60:	2c00      	cmp	r4, #0
   d8e62:	d0e7      	beq.n	d8e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8e64:	f104 0010 	add.w	r0, r4, #16
   d8e68:	f7ff fe2a 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8e6c:	4620      	mov	r0, r4
   d8e6e:	f7ff fe11 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8e72:	2118      	movs	r1, #24
   d8e74:	4620      	mov	r0, r4
   d8e76:	f002 fab9 	bl	db3ec <_ZdlPvj>
   d8e7a:	e7db      	b.n	d8e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8e7c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8e7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8e7e:	2300      	movs	r3, #0
   d8e80:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8e82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8e84:	4604      	mov	r4, r0
   d8e86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8e88:	b12b      	cbz	r3, d8e96 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8e8a:	2202      	movs	r2, #2
   d8e8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8e8e:	68eb      	ldr	r3, [r5, #12]
   d8e90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8e92:	68ab      	ldr	r3, [r5, #8]
   d8e94:	60a3      	str	r3, [r4, #8]
    }
   d8e96:	4620      	mov	r0, r4
   d8e98:	bd38      	pop	{r3, r4, r5, pc}

000d8e9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8e9a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8e9c:	b570      	push	{r4, r5, r6, lr}
   d8e9e:	4604      	mov	r4, r0
	  switch (__op)
   d8ea0:	d007      	beq.n	d8eb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8ea2:	2a03      	cmp	r2, #3
   d8ea4:	d012      	beq.n	d8ecc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8ea6:	2a01      	cmp	r2, #1
   d8ea8:	d101      	bne.n	d8eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8eaa:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8eac:	6003      	str	r3, [r0, #0]
	}
   d8eae:	2000      	movs	r0, #0
   d8eb0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8eb2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8eb4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8eb6:	f7fb f8ee 	bl	d4096 <_Znwj>
   d8eba:	4605      	mov	r5, r0
   d8ebc:	b120      	cbz	r0, d8ec8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8ebe:	4631      	mov	r1, r6
   d8ec0:	f7ff ffdc 	bl	d8e7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8ec4:	7c33      	ldrb	r3, [r6, #16]
   d8ec6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8ec8:	6025      	str	r5, [r4, #0]
	}
   d8eca:	e7f0      	b.n	d8eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8ecc:	6804      	ldr	r4, [r0, #0]
   d8ece:	2c00      	cmp	r4, #0
   d8ed0:	d0ed      	beq.n	d8eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8ed2:	4620      	mov	r0, r4
   d8ed4:	f7ff fdde 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8ed8:	2114      	movs	r1, #20
   d8eda:	4620      	mov	r0, r4
   d8edc:	f002 fa86 	bl	db3ec <_ZdlPvj>
   d8ee0:	e7e5      	b.n	d8eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8ee4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ee6:	b089      	sub	sp, #36	; 0x24
   d8ee8:	4604      	mov	r4, r0
   d8eea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8eec:	a801      	add	r0, sp, #4
   d8eee:	4611      	mov	r1, r2
   d8ef0:	f7ff fe10 	bl	d8b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8ef4:	b1a4      	cbz	r4, d8f20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8ef6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8ef8:	b11d      	cbz	r5, d8f02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8efa:	4628      	mov	r0, r5
   d8efc:	f002 ff64 	bl	dbdc8 <strdup>
   d8f00:	4605      	mov	r5, r0
   d8f02:	a801      	add	r0, sp, #4
   d8f04:	a903      	add	r1, sp, #12
        type_(type) {
   d8f06:	9503      	str	r5, [sp, #12]
   d8f08:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8f0c:	f7ff fe78 	bl	d8c00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8f10:	a803      	add	r0, sp, #12
   d8f12:	f7ff fdd5 	bl	d8ac0 <_ZN8particle5ErrorD1Ev>
   d8f16:	a802      	add	r0, sp, #8
   d8f18:	f7fd fbc4 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8f1c:	b009      	add	sp, #36	; 0x24
   d8f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8f20:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8f22:	2301      	movs	r3, #1
   d8f24:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8f28:	2a00      	cmp	r2, #0
   d8f2a:	d103      	bne.n	d8f34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8f2c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8f30:	2900      	cmp	r1, #0
   d8f32:	d1f7      	bne.n	d8f24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8f34:	d1ef      	bne.n	d8f16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8f36:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8f38:	f3bf 8f5b 	dmb	ish
   d8f3c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8f3e:	1d2b      	adds	r3, r5, #4
   d8f40:	f3bf 8f5b 	dmb	ish
   d8f44:	e853 6f00 	ldrex	r6, [r3]
   d8f48:	e843 4200 	strex	r2, r4, [r3]
   d8f4c:	2a00      	cmp	r2, #0
   d8f4e:	d1f9      	bne.n	d8f44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8f50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8f54:	2e00      	cmp	r6, #0
   d8f56:	d0de      	beq.n	d8f16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8f58:	4620      	mov	r0, r4
   d8f5a:	f7ff fbdd 	bl	d8718 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8f5e:	4607      	mov	r7, r0
   d8f60:	b160      	cbz	r0, d8f7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8f62:	f105 010c 	add.w	r1, r5, #12
   d8f66:	4630      	mov	r0, r6
   d8f68:	f7ff fe15 	bl	d8b96 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8f6c:	4630      	mov	r0, r6
   d8f6e:	f7ff fd91 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8f72:	2110      	movs	r1, #16
   d8f74:	4630      	mov	r0, r6
   d8f76:	f002 fa39 	bl	db3ec <_ZdlPvj>
   d8f7a:	e7cc      	b.n	d8f16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8f7c:	4631      	mov	r1, r6
   d8f7e:	a803      	add	r0, sp, #12
   d8f80:	f7ff ff7c 	bl	d8e7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8f84:	7b2b      	ldrb	r3, [r5, #12]
   d8f86:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8f8a:	2010      	movs	r0, #16
   d8f8c:	f7fb f883 	bl	d4096 <_Znwj>
   d8f90:	4605      	mov	r5, r0
   d8f92:	b1d0      	cbz	r0, d8fca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8f94:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8f96:	2014      	movs	r0, #20
   d8f98:	f7fb f87d 	bl	d4096 <_Znwj>
   d8f9c:	4604      	mov	r4, r0
   d8f9e:	b178      	cbz	r0, d8fc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8fa0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8fa2:	4601      	mov	r1, r0
   d8fa4:	a803      	add	r0, sp, #12
   d8fa6:	f7ff fdd4 	bl	d8b52 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8faa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8fac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8fb0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8fb2:	9205      	str	r2, [sp, #20]
   d8fb4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fb6:	60e3      	str	r3, [r4, #12]
   d8fb8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8fbc:	9206      	str	r2, [sp, #24]
   d8fbe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8fc0:	4b06      	ldr	r3, [pc, #24]	; (d8fdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8fc2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8fc4:	4b06      	ldr	r3, [pc, #24]	; (d8fe0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8fc6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8fc8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8fca:	a803      	add	r0, sp, #12
   d8fcc:	f7ff fd62 	bl	d8a94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8fd0:	2200      	movs	r2, #0
   d8fd2:	4629      	mov	r1, r5
   d8fd4:	4803      	ldr	r0, [pc, #12]	; (d8fe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8fd6:	f7ff fba7 	bl	d8728 <application_thread_invoke>
   d8fda:	e7c7      	b.n	d8f6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8fdc:	000d8ba9 	.word	0x000d8ba9
   d8fe0:	000d8e9b 	.word	0x000d8e9b
   d8fe4:	000d899b 	.word	0x000d899b

000d8fe8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8fe8:	2200      	movs	r2, #0
   d8fea:	6840      	ldr	r0, [r0, #4]
   d8fec:	4611      	mov	r1, r2
   d8fee:	f7ff bc39 	b.w	d8864 <network_listening>

000d8ff2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8ff2:	2200      	movs	r2, #0
   d8ff4:	6840      	ldr	r0, [r0, #4]
   d8ff6:	4611      	mov	r1, r2
   d8ff8:	f7ff bc44 	b.w	d8884 <network_get_listen_timeout>

000d8ffc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8ffc:	6840      	ldr	r0, [r0, #4]
   d8ffe:	2200      	movs	r2, #0
   d9000:	f7ff bc38 	b.w	d8874 <network_set_listen_timeout>

000d9004 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9004:	6840      	ldr	r0, [r0, #4]
   d9006:	2200      	movs	r2, #0
   d9008:	f081 0101 	eor.w	r1, r1, #1
   d900c:	f7ff bc22 	b.w	d8854 <network_listen>

000d9010 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9010:	2300      	movs	r3, #0
   d9012:	6840      	ldr	r0, [r0, #4]
   d9014:	461a      	mov	r2, r3
   d9016:	4619      	mov	r1, r3
   d9018:	f7ff bc14 	b.w	d8844 <network_off>

000d901c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d901c:	2300      	movs	r3, #0
   d901e:	6840      	ldr	r0, [r0, #4]
   d9020:	461a      	mov	r2, r3
   d9022:	4619      	mov	r1, r3
   d9024:	f7ff bc06 	b.w	d8834 <network_on>

000d9028 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9028:	2200      	movs	r2, #0
   d902a:	6840      	ldr	r0, [r0, #4]
   d902c:	4611      	mov	r1, r2
   d902e:	f7ff bbf9 	b.w	d8824 <network_ready>

000d9032 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9032:	2200      	movs	r2, #0
   d9034:	6840      	ldr	r0, [r0, #4]
   d9036:	4611      	mov	r1, r2
   d9038:	f7ff bbe4 	b.w	d8804 <network_connecting>

000d903c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d903c:	6840      	ldr	r0, [r0, #4]
   d903e:	2200      	movs	r2, #0
   d9040:	2102      	movs	r1, #2
   d9042:	f7ff bbe7 	b.w	d8814 <network_disconnect>

000d9046 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9046:	2300      	movs	r3, #0
   d9048:	6840      	ldr	r0, [r0, #4]
   d904a:	461a      	mov	r2, r3
   d904c:	f7ff bbd2 	b.w	d87f4 <network_connect>

000d9050 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9050:	4b02      	ldr	r3, [pc, #8]	; (d905c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9052:	2203      	movs	r2, #3
   d9054:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9056:	4a02      	ldr	r2, [pc, #8]	; (d9060 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9058:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d905a:	4770      	bx	lr
   d905c:	2003e578 	.word	0x2003e578
   d9060:	000dc960 	.word	0x000dc960

000d9064 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d9064:	4770      	bx	lr

000d9066 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9068:	4606      	mov	r6, r0
   d906a:	4615      	mov	r5, r2
   d906c:	460c      	mov	r4, r1
   d906e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9070:	42bc      	cmp	r4, r7
   d9072:	d006      	beq.n	d9082 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9074:	6833      	ldr	r3, [r6, #0]
   d9076:	f814 1b01 	ldrb.w	r1, [r4], #1
   d907a:	689b      	ldr	r3, [r3, #8]
   d907c:	4630      	mov	r0, r6
   d907e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9080:	e7f6      	b.n	d9070 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9082:	4628      	mov	r0, r5
   d9084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9086 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9086:	7c00      	ldrb	r0, [r0, #16]
   d9088:	2200      	movs	r2, #0
   d908a:	f7ff b9ab 	b.w	d83e4 <hal_i2c_write>

000d908e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d908e:	7c00      	ldrb	r0, [r0, #16]
   d9090:	2100      	movs	r1, #0
   d9092:	f7ff b9af 	b.w	d83f4 <hal_i2c_available>

000d9096 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9096:	7c00      	ldrb	r0, [r0, #16]
   d9098:	2100      	movs	r1, #0
   d909a:	f7ff b9b3 	b.w	d8404 <hal_i2c_read>

000d909e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d909e:	7c00      	ldrb	r0, [r0, #16]
   d90a0:	2100      	movs	r1, #0
   d90a2:	f7ff b9b7 	b.w	d8414 <hal_i2c_peek>

000d90a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d90a6:	7c00      	ldrb	r0, [r0, #16]
   d90a8:	2100      	movs	r1, #0
   d90aa:	f7ff b9bb 	b.w	d8424 <hal_i2c_flush>

000d90ae <_ZN7TwoWireD0Ev>:
   d90ae:	b510      	push	{r4, lr}
   d90b0:	2114      	movs	r1, #20
   d90b2:	4604      	mov	r4, r0
   d90b4:	f002 f99a 	bl	db3ec <_ZdlPvj>
   d90b8:	4620      	mov	r0, r4
   d90ba:	bd10      	pop	{r4, pc}

000d90bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d90bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d90be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d90c2:	4604      	mov	r4, r0
   d90c4:	4608      	mov	r0, r1
   d90c6:	2100      	movs	r1, #0
   d90c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d90cc:	4b03      	ldr	r3, [pc, #12]	; (d90dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d90ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d90d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d90d2:	4611      	mov	r1, r2
   d90d4:	f7ff f9b6 	bl	d8444 <hal_i2c_init>
}
   d90d8:	4620      	mov	r0, r4
   d90da:	bd10      	pop	{r4, pc}
   d90dc:	000dc99c 	.word	0x000dc99c

000d90e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d90e0:	2300      	movs	r3, #0
   d90e2:	7c00      	ldrb	r0, [r0, #16]
   d90e4:	461a      	mov	r2, r3
   d90e6:	4619      	mov	r1, r3
   d90e8:	f7ff b964 	b.w	d83b4 <hal_i2c_begin>

000d90ec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d90ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d90ee:	2200      	movs	r2, #0
   d90f0:	2314      	movs	r3, #20
   d90f2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d90f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d90fa:	780b      	ldrb	r3, [r1, #0]
   d90fc:	f88d 3008 	strb.w	r3, [sp, #8]
   d9100:	684b      	ldr	r3, [r1, #4]
   d9102:	9303      	str	r3, [sp, #12]
   d9104:	68cb      	ldr	r3, [r1, #12]
   d9106:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9108:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d910a:	7a0b      	ldrb	r3, [r1, #8]
   d910c:	9305      	str	r3, [sp, #20]
   d910e:	a901      	add	r1, sp, #4
   d9110:	f7ff f9b0 	bl	d8474 <hal_i2c_request_ex>
}
   d9114:	b007      	add	sp, #28
   d9116:	f85d fb04 	ldr.w	pc, [sp], #4

000d911a <_ZN7TwoWire11requestFromEhjh>:
{
   d911a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d911c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d911e:	f88d 1000 	strb.w	r1, [sp]
   d9122:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9126:	9103      	str	r1, [sp, #12]
   d9128:	bf18      	it	ne
   d912a:	2301      	movne	r3, #1
   d912c:	4669      	mov	r1, sp
    size_ = size;
   d912e:	9201      	str	r2, [sp, #4]
   d9130:	f88d 3008 	strb.w	r3, [sp, #8]
   d9134:	f7ff ffda 	bl	d90ec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9138:	b005      	add	sp, #20
   d913a:	f85d fb04 	ldr.w	pc, [sp], #4

000d913e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d913e:	7c00      	ldrb	r0, [r0, #16]
   d9140:	2200      	movs	r2, #0
   d9142:	f7ff b93f 	b.w	d83c4 <hal_i2c_begin_transmission>

000d9146 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d9146:	b2c9      	uxtb	r1, r1
   d9148:	f7ff bff9 	b.w	d913e <_ZN7TwoWire17beginTransmissionEh>

000d914c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d914c:	7c00      	ldrb	r0, [r0, #16]
   d914e:	2200      	movs	r2, #0
   d9150:	f7ff b940 	b.w	d83d4 <hal_i2c_end_transmission>

000d9154 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9154:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d9156:	2100      	movs	r1, #0
   d9158:	7c00      	ldrb	r0, [r0, #16]
   d915a:	f7ff f97b 	bl	d8454 <hal_i2c_lock>
}
   d915e:	fab0 f080 	clz	r0, r0
   d9162:	0940      	lsrs	r0, r0, #5
   d9164:	bd08      	pop	{r3, pc}

000d9166 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d9166:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9168:	2100      	movs	r1, #0
   d916a:	7c00      	ldrb	r0, [r0, #16]
   d916c:	f7ff f97a 	bl	d8464 <hal_i2c_unlock>
}
   d9170:	fab0 f080 	clz	r0, r0
   d9174:	0940      	lsrs	r0, r0, #5
   d9176:	bd08      	pop	{r3, pc}

000d9178 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9178:	4700      	bx	r0
	...

000d917c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d917c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9180:	2400      	movs	r4, #0
{
   d9182:	461d      	mov	r5, r3
   d9184:	460f      	mov	r7, r1
   d9186:	4690      	mov	r8, r2
   d9188:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d918a:	f7ff f90b 	bl	d83a4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d918e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9190:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d9194:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9198:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d919c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d91a0:	bfa2      	ittt	ge
   d91a2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d91a6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d91aa:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d91ac:	4907      	ldr	r1, [pc, #28]	; (d91cc <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d91ae:	9400      	str	r4, [sp, #0]
   d91b0:	4643      	mov	r3, r8
   d91b2:	463a      	mov	r2, r7
   d91b4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d91b6:	bfa8      	it	ge
   d91b8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d91bc:	f7ff f8ea 	bl	d8394 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d91c0:	fab0 f080 	clz	r0, r0
   d91c4:	0940      	lsrs	r0, r0, #5
   d91c6:	b004      	add	sp, #16
   d91c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d91cc:	000d9179 	.word	0x000d9179

000d91d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d91d0:	4770      	bx	lr

000d91d2 <_ZN9IPAddressD0Ev>:
   d91d2:	b510      	push	{r4, lr}
   d91d4:	2118      	movs	r1, #24
   d91d6:	4604      	mov	r4, r0
   d91d8:	f002 f908 	bl	db3ec <_ZdlPvj>
   d91dc:	4620      	mov	r0, r4
   d91de:	bd10      	pop	{r4, pc}

000d91e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d91e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d91e2:	7d03      	ldrb	r3, [r0, #20]
   d91e4:	2b06      	cmp	r3, #6
{
   d91e6:	b08d      	sub	sp, #52	; 0x34
   d91e8:	460e      	mov	r6, r1
   d91ea:	f100 0704 	add.w	r7, r0, #4
   d91ee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d91f2:	d012      	beq.n	d921a <_ZNK9IPAddress7printToER5Print+0x3a>
   d91f4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d91f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d91fc:	220a      	movs	r2, #10
   d91fe:	4630      	mov	r0, r6
   d9200:	f001 faa3 	bl	da74a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9204:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9206:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9208:	d019      	beq.n	d923e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d920a:	2c00      	cmp	r4, #0
   d920c:	d0f4      	beq.n	d91f8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d920e:	212e      	movs	r1, #46	; 0x2e
   d9210:	4630      	mov	r0, r6
   d9212:	f001 fa8b 	bl	da72c <_ZN5Print5printEc>
   d9216:	4404      	add	r4, r0
   d9218:	e7ee      	b.n	d91f8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d921a:	232f      	movs	r3, #47	; 0x2f
   d921c:	466a      	mov	r2, sp
   d921e:	4639      	mov	r1, r7
   d9220:	200a      	movs	r0, #10
		buf[0] = 0;
   d9222:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9226:	f7ff f92d 	bl	d8484 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d922a:	4668      	mov	r0, sp
   d922c:	f002 fde9 	bl	dbe02 <strlen>
   d9230:	6833      	ldr	r3, [r6, #0]
   d9232:	4602      	mov	r2, r0
   d9234:	68db      	ldr	r3, [r3, #12]
   d9236:	4669      	mov	r1, sp
   d9238:	4630      	mov	r0, r6
   d923a:	4798      	blx	r3
   d923c:	4604      	mov	r4, r0
    }
    return n;
}
   d923e:	4620      	mov	r0, r4
   d9240:	b00d      	add	sp, #52	; 0x34
   d9242:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9244 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9244:	b510      	push	{r4, lr}
   d9246:	4b05      	ldr	r3, [pc, #20]	; (d925c <_ZN9IPAddressC1Ev+0x18>)
   d9248:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d924a:	2211      	movs	r2, #17
   d924c:	f840 3b04 	str.w	r3, [r0], #4
   d9250:	2100      	movs	r1, #0
   d9252:	f002 fd2f 	bl	dbcb4 <memset>
}
   d9256:	4620      	mov	r0, r4
   d9258:	bd10      	pop	{r4, pc}
   d925a:	bf00      	nop
   d925c:	000dc9c4 	.word	0x000dc9c4

000d9260 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9260:	4603      	mov	r3, r0
   d9262:	4a07      	ldr	r2, [pc, #28]	; (d9280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9264:	b510      	push	{r4, lr}
   d9266:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d926a:	f101 0210 	add.w	r2, r1, #16
   d926e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9272:	f843 4b04 	str.w	r4, [r3], #4
   d9276:	4291      	cmp	r1, r2
   d9278:	d1f9      	bne.n	d926e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d927a:	780a      	ldrb	r2, [r1, #0]
   d927c:	701a      	strb	r2, [r3, #0]
}
   d927e:	bd10      	pop	{r4, pc}
   d9280:	000dc9c4 	.word	0x000dc9c4

000d9284 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9284:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9286:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d928a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d928e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9292:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9296:	2304      	movs	r3, #4
   d9298:	6041      	str	r1, [r0, #4]
   d929a:	7503      	strb	r3, [r0, #20]
}
   d929c:	bd10      	pop	{r4, pc}

000d929e <_ZN9IPAddressaSEPKh>:
{
   d929e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d92a0:	78cb      	ldrb	r3, [r1, #3]
   d92a2:	9300      	str	r3, [sp, #0]
   d92a4:	788b      	ldrb	r3, [r1, #2]
   d92a6:	784a      	ldrb	r2, [r1, #1]
   d92a8:	7809      	ldrb	r1, [r1, #0]
   d92aa:	f7ff ffeb 	bl	d9284 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d92ae:	b002      	add	sp, #8
   d92b0:	bd10      	pop	{r4, pc}

000d92b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d92b2:	f100 0310 	add.w	r3, r0, #16
   d92b6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d92b8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d92bc:	2901      	cmp	r1, #1
   d92be:	4618      	mov	r0, r3
   d92c0:	d108      	bne.n	d92d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d92c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d92c6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d92ca:	3a01      	subs	r2, #1
   d92cc:	f103 0310 	add.w	r3, r3, #16
   d92d0:	d1f2      	bne.n	d92b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d92d2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d92d4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d92d6:	bf04      	itt	eq
   d92d8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d92dc:	1852      	addeq	r2, r2, r1
   d92de:	e7f4      	b.n	d92ca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d92e0 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d92e0:	b40e      	push	{r1, r2, r3}
   d92e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d92e4:	b088      	sub	sp, #32
   d92e6:	af00      	add	r7, sp, #0
   d92e8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d92ec:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d92ee:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d92f2:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d92f4:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d92f6:	462b      	mov	r3, r5
   d92f8:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d92fa:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d92fc:	f7ff fb0a 	bl	d8914 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9300:	280f      	cmp	r0, #15
   d9302:	687a      	ldr	r2, [r7, #4]
   d9304:	d91a      	bls.n	d933c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d9306:	f100 0308 	add.w	r3, r0, #8
   d930a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d930e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d9310:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9314:	1c41      	adds	r1, r0, #1
   d9316:	462b      	mov	r3, r5
   d9318:	4668      	mov	r0, sp
        va_start(args, fmt);
   d931a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d931c:	f7ff fafa 	bl	d8914 <vsnprintf>
        if (n > 0) {
   d9320:	1e02      	subs	r2, r0, #0
   d9322:	dd04      	ble.n	d932e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d9324:	6823      	ldr	r3, [r4, #0]
   d9326:	4669      	mov	r1, sp
   d9328:	689b      	ldr	r3, [r3, #8]
   d932a:	4620      	mov	r0, r4
   d932c:	4798      	blx	r3
   d932e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d9330:	3720      	adds	r7, #32
   d9332:	46bd      	mov	sp, r7
   d9334:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9338:	b003      	add	sp, #12
   d933a:	4770      	bx	lr
    } else if (n > 0) {
   d933c:	2800      	cmp	r0, #0
   d933e:	d0f7      	beq.n	d9330 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d9340:	6823      	ldr	r3, [r4, #0]
   d9342:	4602      	mov	r2, r0
   d9344:	689b      	ldr	r3, [r3, #8]
   d9346:	f107 0110 	add.w	r1, r7, #16
   d934a:	4620      	mov	r0, r4
   d934c:	4798      	blx	r3
}
   d934e:	e7ef      	b.n	d9330 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9350:	b510      	push	{r4, lr}
          _M_dispose();
   d9352:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9354:	4604      	mov	r4, r0
          _M_dispose();
   d9356:	689b      	ldr	r3, [r3, #8]
   d9358:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d935a:	68a3      	ldr	r3, [r4, #8]
   d935c:	3b01      	subs	r3, #1
   d935e:	60a3      	str	r3, [r4, #8]
   d9360:	b92b      	cbnz	r3, d936e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d9362:	6823      	ldr	r3, [r4, #0]
   d9364:	4620      	mov	r0, r4
   d9366:	68db      	ldr	r3, [r3, #12]
    }
   d9368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d936c:	4718      	bx	r3
    }
   d936e:	bd10      	pop	{r4, pc}

000d9370 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9370:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9372:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d9374:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9378:	689b      	ldr	r3, [r3, #8]
   d937a:	2201      	movs	r2, #1
   d937c:	f10d 0107 	add.w	r1, sp, #7
   d9380:	4798      	blx	r3
}
   d9382:	b003      	add	sp, #12
   d9384:	f85d fb04 	ldr.w	pc, [sp], #4

000d9388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d9388:	b538      	push	{r3, r4, r5, lr}
   d938a:	680b      	ldr	r3, [r1, #0]
   d938c:	6003      	str	r3, [r0, #0]
   d938e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9390:	6843      	ldr	r3, [r0, #4]
   d9392:	429d      	cmp	r5, r3
    class __shared_ptr
   d9394:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d9396:	d00c      	beq.n	d93b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d9398:	b115      	cbz	r5, d93a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d939a:	686b      	ldr	r3, [r5, #4]
   d939c:	3301      	adds	r3, #1
   d939e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d93a0:	6860      	ldr	r0, [r4, #4]
   d93a2:	b128      	cbz	r0, d93b0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d93a4:	6843      	ldr	r3, [r0, #4]
   d93a6:	3b01      	subs	r3, #1
   d93a8:	6043      	str	r3, [r0, #4]
   d93aa:	b90b      	cbnz	r3, d93b0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d93ac:	f7ff ffd0 	bl	d9350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d93b0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d93b2:	4620      	mov	r0, r4
   d93b4:	bd38      	pop	{r3, r4, r5, pc}

000d93b6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d93b6:	460b      	mov	r3, r1
   d93b8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d93ba:	2200      	movs	r2, #0
   d93bc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d93be:	e9c0 2200 	strd	r2, r2, [r0]
   d93c2:	4604      	mov	r4, r0
        t_ = t;
   d93c4:	6083      	str	r3, [r0, #8]
    if (t) {
   d93c6:	b90b      	cbnz	r3, d93cc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d93c8:	4620      	mov	r0, r4
   d93ca:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d93cc:	f7ff ffdc 	bl	d9388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d93d0:	e7fa      	b.n	d93c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d93d2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d93d2:	6883      	ldr	r3, [r0, #8]
   d93d4:	b1eb      	cbz	r3, d9412 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d93d6:	781a      	ldrb	r2, [r3, #0]
   d93d8:	2a03      	cmp	r2, #3
   d93da:	d81a      	bhi.n	d9412 <_ZNK5spark9JSONValue4typeEv+0x40>
   d93dc:	e8df f002 	tbb	[pc, r2]
   d93e0:	1b021704 	.word	0x1b021704
   d93e4:	2005      	movs	r0, #5
   d93e6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d93e8:	6802      	ldr	r2, [r0, #0]
   d93ea:	685b      	ldr	r3, [r3, #4]
   d93ec:	6852      	ldr	r2, [r2, #4]
   d93ee:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d93f0:	282d      	cmp	r0, #45	; 0x2d
   d93f2:	d012      	beq.n	d941a <_ZNK5spark9JSONValue4typeEv+0x48>
   d93f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d93f8:	2b09      	cmp	r3, #9
   d93fa:	d90e      	bls.n	d941a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d93fc:	2874      	cmp	r0, #116	; 0x74
   d93fe:	d00e      	beq.n	d941e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9400:	2866      	cmp	r0, #102	; 0x66
   d9402:	d00c      	beq.n	d941e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9404:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9408:	4258      	negs	r0, r3
   d940a:	4158      	adcs	r0, r3
   d940c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d940e:	2006      	movs	r0, #6
   d9410:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9412:	2000      	movs	r0, #0
   d9414:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9416:	2004      	movs	r0, #4
   d9418:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d941a:	2003      	movs	r0, #3
   d941c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d941e:	2002      	movs	r0, #2
}
   d9420:	4770      	bx	lr

000d9422 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d9422:	b510      	push	{r4, lr}
   d9424:	4604      	mov	r4, r0
    switch (type()) {
   d9426:	f7ff ffd4 	bl	d93d2 <_ZNK5spark9JSONValue4typeEv>
   d942a:	2802      	cmp	r0, #2
   d942c:	d00e      	beq.n	d944c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d942e:	1ec3      	subs	r3, r0, #3
   d9430:	b2db      	uxtb	r3, r3
   d9432:	2b01      	cmp	r3, #1
   d9434:	d814      	bhi.n	d9460 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d9436:	6822      	ldr	r2, [r4, #0]
   d9438:	68a3      	ldr	r3, [r4, #8]
   d943a:	6850      	ldr	r0, [r2, #4]
   d943c:	685b      	ldr	r3, [r3, #4]
}
   d943e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d9442:	220a      	movs	r2, #10
   d9444:	2100      	movs	r1, #0
   d9446:	4418      	add	r0, r3
   d9448:	f002 bdc2 	b.w	dbfd0 <strtol>
        const char* const s = d_->json + t_->start;
   d944c:	6822      	ldr	r2, [r4, #0]
   d944e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9450:	6852      	ldr	r2, [r2, #4]
   d9452:	685b      	ldr	r3, [r3, #4]
   d9454:	5cd0      	ldrb	r0, [r2, r3]
   d9456:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d945a:	4258      	negs	r0, r3
   d945c:	4158      	adcs	r0, r3
}
   d945e:	bd10      	pop	{r4, pc}
    switch (type()) {
   d9460:	2000      	movs	r0, #0
   d9462:	e7fc      	b.n	d945e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d9464 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9464:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9466:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9468:	e9c0 3300 	strd	r3, r3, [r0]
   d946c:	4604      	mov	r4, r0
        n_(0) {
   d946e:	480e      	ldr	r0, [pc, #56]	; (d94a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9470:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9474:	b1a9      	cbz	r1, d94a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d9476:	780b      	ldrb	r3, [r1, #0]
   d9478:	2b03      	cmp	r3, #3
   d947a:	d006      	beq.n	d948a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d947c:	b98b      	cbnz	r3, d94a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d947e:	6813      	ldr	r3, [r2, #0]
   d9480:	6858      	ldr	r0, [r3, #4]
   d9482:	684b      	ldr	r3, [r1, #4]
   d9484:	5cc3      	ldrb	r3, [r0, r3]
   d9486:	2b6e      	cmp	r3, #110	; 0x6e
   d9488:	d007      	beq.n	d949a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d948a:	6813      	ldr	r3, [r2, #0]
   d948c:	684d      	ldr	r5, [r1, #4]
   d948e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9490:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9492:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9494:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d9496:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9498:	60e3      	str	r3, [r4, #12]
   d949a:	4611      	mov	r1, r2
   d949c:	4620      	mov	r0, r4
   d949e:	f7ff ff73 	bl	d9388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d94a2:	4620      	mov	r0, r4
   d94a4:	bd38      	pop	{r3, r4, r5, pc}
   d94a6:	bf00      	nop
   d94a8:	000dca30 	.word	0x000dca30

000d94ac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d94ac:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d94ae:	2500      	movs	r5, #0
   d94b0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d94b2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d94b6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d94ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d94be:	4604      	mov	r4, r0
   d94c0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d94c2:	b14b      	cbz	r3, d94d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d94c4:	781a      	ldrb	r2, [r3, #0]
   d94c6:	2a01      	cmp	r2, #1
   d94c8:	d106      	bne.n	d94d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d94ca:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d94ce:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d94d0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d94d2:	6143      	str	r3, [r0, #20]
   d94d4:	f7ff ff58 	bl	d9388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d94d8:	4620      	mov	r0, r4
   d94da:	bd38      	pop	{r3, r4, r5, pc}

000d94dc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d94dc:	b510      	push	{r4, lr}
    if (!n_) {
   d94de:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d94e0:	4604      	mov	r4, r0
    if (!n_) {
   d94e2:	b163      	cbz	r3, d94fe <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d94e4:	6880      	ldr	r0, [r0, #8]
   d94e6:	60e0      	str	r0, [r4, #12]
    --n_;
   d94e8:	3b01      	subs	r3, #1
    ++t_;
   d94ea:	3010      	adds	r0, #16
   d94ec:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d94ee:	6120      	str	r0, [r4, #16]
    --n_;
   d94f0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d94f2:	b113      	cbz	r3, d94fa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d94f4:	f7ff fedd 	bl	d92b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d94f8:	60a0      	str	r0, [r4, #8]
    return true;
   d94fa:	2001      	movs	r0, #1
   d94fc:	e000      	b.n	d9500 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d94fe:	4618      	mov	r0, r3
}
   d9500:	bd10      	pop	{r4, pc}

000d9502 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9502:	b510      	push	{r4, lr}
    write('}');
   d9504:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9506:	4604      	mov	r4, r0
    write('}');
   d9508:	f7ff ff32 	bl	d9370 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d950c:	2301      	movs	r3, #1
   d950e:	7123      	strb	r3, [r4, #4]
}
   d9510:	4620      	mov	r0, r4
   d9512:	bd10      	pop	{r4, pc}

000d9514 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d9514:	b508      	push	{r3, lr}
    switch (state_) {
   d9516:	7903      	ldrb	r3, [r0, #4]
   d9518:	2b01      	cmp	r3, #1
   d951a:	d002      	beq.n	d9522 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d951c:	2b02      	cmp	r3, #2
   d951e:	d004      	beq.n	d952a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d9520:	bd08      	pop	{r3, pc}
        write(',');
   d9522:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d9524:	f7ff ff24 	bl	d9370 <_ZN5spark10JSONWriter5writeEc>
}
   d9528:	e7fa      	b.n	d9520 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d952a:	213a      	movs	r1, #58	; 0x3a
   d952c:	e7fa      	b.n	d9524 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d952e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d952e:	b510      	push	{r4, lr}
   d9530:	4604      	mov	r4, r0
    writeSeparator();
   d9532:	f7ff ffef 	bl	d9514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d9536:	4620      	mov	r0, r4
   d9538:	217b      	movs	r1, #123	; 0x7b
   d953a:	f7ff ff19 	bl	d9370 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d953e:	2300      	movs	r3, #0
   d9540:	7123      	strb	r3, [r4, #4]
}
   d9542:	4620      	mov	r0, r4
   d9544:	bd10      	pop	{r4, pc}
	...

000d9548 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9548:	b513      	push	{r0, r1, r4, lr}
   d954a:	4604      	mov	r4, r0
   d954c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d954e:	f7ff ffe1 	bl	d9514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9552:	6823      	ldr	r3, [r4, #0]
   d9554:	9a01      	ldr	r2, [sp, #4]
   d9556:	68db      	ldr	r3, [r3, #12]
   d9558:	4903      	ldr	r1, [pc, #12]	; (d9568 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d955a:	4620      	mov	r0, r4
   d955c:	4798      	blx	r3
    state_ = NEXT;
   d955e:	2301      	movs	r3, #1
}
   d9560:	4620      	mov	r0, r4
    state_ = NEXT;
   d9562:	7123      	strb	r3, [r4, #4]
}
   d9564:	b002      	add	sp, #8
   d9566:	bd10      	pop	{r4, pc}
   d9568:	000dc437 	.word	0x000dc437

000d956c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d956c:	b513      	push	{r0, r1, r4, lr}
   d956e:	4604      	mov	r4, r0
   d9570:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9572:	f7ff ffcf 	bl	d9514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d9576:	6823      	ldr	r3, [r4, #0]
   d9578:	9a01      	ldr	r2, [sp, #4]
   d957a:	68db      	ldr	r3, [r3, #12]
   d957c:	4903      	ldr	r1, [pc, #12]	; (d958c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d957e:	4620      	mov	r0, r4
   d9580:	4798      	blx	r3
    state_ = NEXT;
   d9582:	2301      	movs	r3, #1
}
   d9584:	4620      	mov	r0, r4
    state_ = NEXT;
   d9586:	7123      	strb	r3, [r4, #4]
}
   d9588:	b002      	add	sp, #8
   d958a:	bd10      	pop	{r4, pc}
   d958c:	000dc653 	.word	0x000dc653

000d9590 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9594:	460d      	mov	r5, r1
   d9596:	4617      	mov	r7, r2
    write('"');
   d9598:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d959a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d963c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d959e:	4604      	mov	r4, r0
    const char* const end = str + size;
   d95a0:	442f      	add	r7, r5
    write('"');
   d95a2:	f7ff fee5 	bl	d9370 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d95a6:	4629      	mov	r1, r5
    while (s != end) {
   d95a8:	42bd      	cmp	r5, r7
   d95aa:	462a      	mov	r2, r5
   d95ac:	d038      	beq.n	d9620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d95ae:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d95b2:	2e22      	cmp	r6, #34	; 0x22
   d95b4:	d003      	beq.n	d95be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d95b6:	2e5c      	cmp	r6, #92	; 0x5c
   d95b8:	d001      	beq.n	d95be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d95ba:	2e1f      	cmp	r6, #31
   d95bc:	d8f4      	bhi.n	d95a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d95be:	6823      	ldr	r3, [r4, #0]
   d95c0:	1a52      	subs	r2, r2, r1
   d95c2:	689b      	ldr	r3, [r3, #8]
   d95c4:	4620      	mov	r0, r4
   d95c6:	4798      	blx	r3
            write('\\');
   d95c8:	215c      	movs	r1, #92	; 0x5c
   d95ca:	4620      	mov	r0, r4
   d95cc:	f7ff fed0 	bl	d9370 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d95d0:	2e0d      	cmp	r6, #13
   d95d2:	d80a      	bhi.n	d95ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d95d4:	2e07      	cmp	r6, #7
   d95d6:	d91c      	bls.n	d9612 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d95d8:	f1a6 0308 	sub.w	r3, r6, #8
   d95dc:	2b05      	cmp	r3, #5
   d95de:	d818      	bhi.n	d9612 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d95e0:	e8df f003 	tbb	[pc, r3]
   d95e4:	17110f0d 	.word	0x17110f0d
   d95e8:	1513      	.short	0x1513
   d95ea:	2e22      	cmp	r6, #34	; 0x22
   d95ec:	d001      	beq.n	d95f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d95ee:	2e5c      	cmp	r6, #92	; 0x5c
   d95f0:	d10f      	bne.n	d9612 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d95f2:	4631      	mov	r1, r6
                write('b');
   d95f4:	4620      	mov	r0, r4
   d95f6:	f7ff febb 	bl	d9370 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d95fa:	4629      	mov	r1, r5
    while (s != end) {
   d95fc:	e7d4      	b.n	d95a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d95fe:	2162      	movs	r1, #98	; 0x62
   d9600:	e7f8      	b.n	d95f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d9602:	2174      	movs	r1, #116	; 0x74
   d9604:	e7f6      	b.n	d95f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d9606:	216e      	movs	r1, #110	; 0x6e
   d9608:	e7f4      	b.n	d95f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d960a:	2166      	movs	r1, #102	; 0x66
   d960c:	e7f2      	b.n	d95f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d960e:	2172      	movs	r1, #114	; 0x72
   d9610:	e7f0      	b.n	d95f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d9612:	6823      	ldr	r3, [r4, #0]
   d9614:	4632      	mov	r2, r6
   d9616:	68db      	ldr	r3, [r3, #12]
   d9618:	4641      	mov	r1, r8
   d961a:	4620      	mov	r0, r4
   d961c:	4798      	blx	r3
                break;
   d961e:	e7ec      	b.n	d95fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d9620:	428d      	cmp	r5, r1
   d9622:	d004      	beq.n	d962e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d9624:	6823      	ldr	r3, [r4, #0]
   d9626:	1a6a      	subs	r2, r5, r1
   d9628:	689b      	ldr	r3, [r3, #8]
   d962a:	4620      	mov	r0, r4
   d962c:	4798      	blx	r3
    }
    write('"');
   d962e:	2122      	movs	r1, #34	; 0x22
   d9630:	4620      	mov	r0, r4
   d9632:	f7ff fe9d 	bl	d9370 <_ZN5spark10JSONWriter5writeEc>
}
   d9636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d963a:	bf00      	nop
   d963c:	000dc9d0 	.word	0x000dc9d0

000d9640 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9640:	b513      	push	{r0, r1, r4, lr}
   d9642:	4604      	mov	r4, r0
   d9644:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9648:	f7ff ff64 	bl	d9514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d964c:	4620      	mov	r0, r4
   d964e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9652:	f7ff ff9d 	bl	d9590 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9656:	2302      	movs	r3, #2
}
   d9658:	4620      	mov	r0, r4
    state_ = VALUE;
   d965a:	7123      	strb	r3, [r4, #4]
}
   d965c:	b002      	add	sp, #8
   d965e:	bd10      	pop	{r4, pc}

000d9660 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9660:	b513      	push	{r0, r1, r4, lr}
   d9662:	4604      	mov	r4, r0
   d9664:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9668:	f7ff ff54 	bl	d9514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d966c:	4620      	mov	r0, r4
   d966e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9672:	f7ff ff8d 	bl	d9590 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9676:	2301      	movs	r3, #1
}
   d9678:	4620      	mov	r0, r4
    state_ = NEXT;
   d967a:	7123      	strb	r3, [r4, #4]
}
   d967c:	b002      	add	sp, #8
   d967e:	bd10      	pop	{r4, pc}

000d9680 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d9680:	6880      	ldr	r0, [r0, #8]
   d9682:	6803      	ldr	r3, [r0, #0]
   d9684:	68db      	ldr	r3, [r3, #12]
   d9686:	4718      	bx	r3

000d9688 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d9688:	4770      	bx	lr

000d968a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d968a:	4608      	mov	r0, r1
   d968c:	b111      	cbz	r1, d9694 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d968e:	680b      	ldr	r3, [r1, #0]
   d9690:	685b      	ldr	r3, [r3, #4]
   d9692:	4718      	bx	r3
}
   d9694:	4770      	bx	lr

000d9696 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d9696:	4770      	bx	lr

000d9698 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9698:	4770      	bx	lr

000d969a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d969a:	4770      	bx	lr

000d969c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d969c:	4770      	bx	lr

000d969e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d969e:	b538      	push	{r3, r4, r5, lr}
   d96a0:	4604      	mov	r4, r0
   d96a2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d96a4:	6800      	ldr	r0, [r0, #0]
   d96a6:	212e      	movs	r1, #46	; 0x2e
   d96a8:	f002 fb71 	bl	dbd8e <strchrnul>
    size = s - category;
   d96ac:	6823      	ldr	r3, [r4, #0]
   d96ae:	1ac3      	subs	r3, r0, r3
   d96b0:	602b      	str	r3, [r5, #0]
    if (size) {
   d96b2:	b123      	cbz	r3, d96be <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d96b4:	7803      	ldrb	r3, [r0, #0]
   d96b6:	b103      	cbz	r3, d96ba <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d96b8:	3001      	adds	r0, #1
   d96ba:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d96bc:	6020      	str	r0, [r4, #0]
}
   d96be:	4618      	mov	r0, r3
   d96c0:	bd38      	pop	{r3, r4, r5, pc}

000d96c2 <_ZN5spark16JSONStreamWriterD0Ev>:
   d96c2:	b510      	push	{r4, lr}
   d96c4:	210c      	movs	r1, #12
   d96c6:	4604      	mov	r4, r0
   d96c8:	f001 fe90 	bl	db3ec <_ZdlPvj>
   d96cc:	4620      	mov	r0, r4
   d96ce:	bd10      	pop	{r4, pc}

000d96d0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d96d0:	b510      	push	{r4, lr}
   d96d2:	2104      	movs	r1, #4
   d96d4:	4604      	mov	r4, r0
   d96d6:	f001 fe89 	bl	db3ec <_ZdlPvj>
   d96da:	4620      	mov	r0, r4
   d96dc:	bd10      	pop	{r4, pc}

000d96de <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d96de:	b510      	push	{r4, lr}
   d96e0:	2104      	movs	r1, #4
   d96e2:	4604      	mov	r4, r0
   d96e4:	f001 fe82 	bl	db3ec <_ZdlPvj>
   d96e8:	4620      	mov	r0, r4
   d96ea:	bd10      	pop	{r4, pc}

000d96ec <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d96ec:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d96ee:	f002 fb58 	bl	dbda2 <strcmp>
}
   d96f2:	fab0 f080 	clz	r0, r0
   d96f6:	0940      	lsrs	r0, r0, #5
   d96f8:	bd08      	pop	{r3, pc}

000d96fa <__tcf_1>:
   d96fa:	4770      	bx	lr

000d96fc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d96fc:	b510      	push	{r4, lr}
   d96fe:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d9700:	f001 fcfa 	bl	db0f8 <_Z16_fetch_usbserialv>
   d9704:	4284      	cmp	r4, r0
   d9706:	d010      	beq.n	d972a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d9708:	f001 fc6e 	bl	dafe8 <_Z22__fetch_global_Serial1v>
   d970c:	4284      	cmp	r4, r0
   d970e:	d105      	bne.n	d971c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d9710:	f001 fc6a 	bl	dafe8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d9714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d9718:	f001 bc63 	b.w	dafe2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d971c:	b12c      	cbz	r4, d972a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d971e:	6823      	ldr	r3, [r4, #0]
   d9720:	4620      	mov	r0, r4
   d9722:	685b      	ldr	r3, [r3, #4]
}
   d9724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9728:	4718      	bx	r3
   d972a:	bd10      	pop	{r4, pc}

000d972c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d972c:	b513      	push	{r0, r1, r4, lr}
   d972e:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d9730:	4608      	mov	r0, r1
   d9732:	9101      	str	r1, [sp, #4]
   d9734:	f002 fb65 	bl	dbe02 <strlen>
   d9738:	9901      	ldr	r1, [sp, #4]
   d973a:	4602      	mov	r2, r0
   d973c:	4620      	mov	r0, r4
}
   d973e:	b002      	add	sp, #8
   d9740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d9744:	f7ff bf8c 	b.w	d9660 <_ZN5spark10JSONWriter5valueEPKcj>

000d9748 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d9748:	b513      	push	{r0, r1, r4, lr}
   d974a:	4604      	mov	r4, r0
    write(str, strlen(str));
   d974c:	4608      	mov	r0, r1
   d974e:	9101      	str	r1, [sp, #4]
   d9750:	f002 fb57 	bl	dbe02 <strlen>
   d9754:	6823      	ldr	r3, [r4, #0]
   d9756:	9901      	ldr	r1, [sp, #4]
   d9758:	68db      	ldr	r3, [r3, #12]
   d975a:	4602      	mov	r2, r0
   d975c:	4620      	mov	r0, r4
}
   d975e:	b002      	add	sp, #8
   d9760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d9764:	4718      	bx	r3

000d9766 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d9766:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9768:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d976a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d976e:	68db      	ldr	r3, [r3, #12]
   d9770:	2201      	movs	r2, #1
   d9772:	f10d 0107 	add.w	r1, sp, #7
   d9776:	4798      	blx	r3
}
   d9778:	b003      	add	sp, #12
   d977a:	f85d fb04 	ldr.w	pc, [sp], #4

000d977e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d977e:	b40e      	push	{r1, r2, r3}
   d9780:	b503      	push	{r0, r1, lr}
   d9782:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d9784:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d9786:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d978a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d978c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d978e:	f000 fffa 	bl	da786 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d9792:	b002      	add	sp, #8
   d9794:	f85d eb04 	ldr.w	lr, [sp], #4
   d9798:	b003      	add	sp, #12
   d979a:	4770      	bx	lr

000d979c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d979c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d97a0:	e9d0 9500 	ldrd	r9, r5, [r0]
   d97a4:	f04f 0814 	mov.w	r8, #20
   d97a8:	fb08 f505 	mul.w	r5, r8, r5
   d97ac:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d97ae:	10ab      	asrs	r3, r5, #2
   d97b0:	4d18      	ldr	r5, [pc, #96]	; (d9814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d97b2:	4617      	mov	r7, r2
   d97b4:	435d      	muls	r5, r3
   d97b6:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d97b8:	2d00      	cmp	r5, #0
   d97ba:	dd23      	ble.n	d9804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d97bc:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d97be:	fb08 f006 	mul.w	r0, r8, r6
   d97c2:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d97c6:	463a      	mov	r2, r7
   d97c8:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d97cc:	5820      	ldr	r0, [r4, r0]
   d97ce:	9101      	str	r1, [sp, #4]
   d97d0:	455f      	cmp	r7, fp
   d97d2:	bf28      	it	cs
   d97d4:	465a      	movcs	r2, fp
   d97d6:	f002 fb1c 	bl	dbe12 <strncmp>
                if (cmp == 0) {
   d97da:	9901      	ldr	r1, [sp, #4]
   d97dc:	2301      	movs	r3, #1
   d97de:	b978      	cbnz	r0, d9800 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d97e0:	455f      	cmp	r7, fp
   d97e2:	d103      	bne.n	d97ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d97e4:	9a00      	ldr	r2, [sp, #0]
   d97e6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d97e8:	4635      	mov	r5, r6
   d97ea:	e7e5      	b.n	d97b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d97ec:	bf8c      	ite	hi
   d97ee:	2001      	movhi	r0, #1
   d97f0:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d97f2:	2800      	cmp	r0, #0
   d97f4:	d0f8      	beq.n	d97e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d97f6:	1bae      	subs	r6, r5, r6
	      ++__first;
   d97f8:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d97fc:	3e01      	subs	r6, #1
   d97fe:	e7f3      	b.n	d97e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d9800:	0fc0      	lsrs	r0, r0, #31
   d9802:	e7f6      	b.n	d97f2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d9804:	eba4 0409 	sub.w	r4, r4, r9
}
   d9808:	4802      	ldr	r0, [pc, #8]	; (d9814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d980a:	10a4      	asrs	r4, r4, #2
   d980c:	4360      	muls	r0, r4
   d980e:	b003      	add	sp, #12
   d9810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9814:	cccccccd 	.word	0xcccccccd

000d9818 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d981a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d981c:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d981e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d9820:	b30b      	cbz	r3, d9866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d9822:	b301      	cbz	r1, d9866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d9824:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d9826:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d982a:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d982c:	a903      	add	r1, sp, #12
   d982e:	a801      	add	r0, sp, #4
   d9830:	f7ff ff35 	bl	d969e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9834:	4601      	mov	r1, r0
   d9836:	b1b0      	cbz	r0, d9866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9838:	f10d 030b 	add.w	r3, sp, #11
   d983c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d983e:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9842:	4620      	mov	r0, r4
   d9844:	f7ff ffaa 	bl	d979c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d9848:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d984c:	b15b      	cbz	r3, d9866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d984e:	6824      	ldr	r4, [r4, #0]
   d9850:	2314      	movs	r3, #20
   d9852:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d9856:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d985a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d985e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d9860:	bfa8      	it	ge
   d9862:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d9864:	e7e2      	b.n	d982c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d9866:	4630      	mov	r0, r6
   d9868:	b004      	add	sp, #16
   d986a:	bd70      	pop	{r4, r5, r6, pc}

000d986c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d986c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d986e:	4c09      	ldr	r4, [pc, #36]	; (d9894 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d9870:	7823      	ldrb	r3, [r4, #0]
   d9872:	f3bf 8f5b 	dmb	ish
   d9876:	07db      	lsls	r3, r3, #31
   d9878:	d409      	bmi.n	d988e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d987a:	4620      	mov	r0, r4
   d987c:	f7fa fc1c 	bl	d40b8 <__cxa_guard_acquire>
   d9880:	b128      	cbz	r0, d988e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d9882:	4620      	mov	r0, r4
   d9884:	f7fa fc1d 	bl	d40c2 <__cxa_guard_release>
   d9888:	4803      	ldr	r0, [pc, #12]	; (d9898 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d988a:	f002 f9d3 	bl	dbc34 <atexit>
}
   d988e:	4803      	ldr	r0, [pc, #12]	; (d989c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d9890:	bd10      	pop	{r4, pc}
   d9892:	bf00      	nop
   d9894:	2003e584 	.word	0x2003e584
   d9898:	000d9697 	.word	0x000d9697
   d989c:	2003dd34 	.word	0x2003dd34

000d98a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d98a0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d98a2:	4c09      	ldr	r4, [pc, #36]	; (d98c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d98a4:	7823      	ldrb	r3, [r4, #0]
   d98a6:	f3bf 8f5b 	dmb	ish
   d98aa:	07db      	lsls	r3, r3, #31
   d98ac:	d409      	bmi.n	d98c2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d98ae:	4620      	mov	r0, r4
   d98b0:	f7fa fc02 	bl	d40b8 <__cxa_guard_acquire>
   d98b4:	b128      	cbz	r0, d98c2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d98b6:	4620      	mov	r0, r4
   d98b8:	f7fa fc03 	bl	d40c2 <__cxa_guard_release>
   d98bc:	4803      	ldr	r0, [pc, #12]	; (d98cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d98be:	f002 f9b9 	bl	dbc34 <atexit>
    return &factory;
}
   d98c2:	4803      	ldr	r0, [pc, #12]	; (d98d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d98c4:	bd10      	pop	{r4, pc}
   d98c6:	bf00      	nop
   d98c8:	2003e588 	.word	0x2003e588
   d98cc:	000d96fb 	.word	0x000d96fb
   d98d0:	2003dd38 	.word	0x2003dd38

000d98d4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d98d4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d98d6:	2500      	movs	r5, #0
   d98d8:	4604      	mov	r4, r0
   d98da:	e9c0 5500 	strd	r5, r5, [r0]
   d98de:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d98e2:	6085      	str	r5, [r0, #8]
   d98e4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d98e6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d98ea:	f7fe fcd3 	bl	d8294 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d98ee:	f7ff ffbd 	bl	d986c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d98f2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d98f4:	f7ff ffd4 	bl	d98a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d98f8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d98fa:	6220      	str	r0, [r4, #32]
}
   d98fc:	4620      	mov	r0, r4
   d98fe:	bd38      	pop	{r3, r4, r5, pc}

000d9900 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d9900:	b510      	push	{r4, lr}
    static LogManager mgr;
   d9902:	4c0a      	ldr	r4, [pc, #40]	; (d992c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d9904:	7823      	ldrb	r3, [r4, #0]
   d9906:	f3bf 8f5b 	dmb	ish
   d990a:	07db      	lsls	r3, r3, #31
   d990c:	d40c      	bmi.n	d9928 <_ZN5spark10LogManager8instanceEv+0x28>
   d990e:	4620      	mov	r0, r4
   d9910:	f7fa fbd2 	bl	d40b8 <__cxa_guard_acquire>
   d9914:	b140      	cbz	r0, d9928 <_ZN5spark10LogManager8instanceEv+0x28>
   d9916:	4806      	ldr	r0, [pc, #24]	; (d9930 <_ZN5spark10LogManager8instanceEv+0x30>)
   d9918:	f7ff ffdc 	bl	d98d4 <_ZN5spark10LogManagerC1Ev>
   d991c:	4620      	mov	r0, r4
   d991e:	f7fa fbd0 	bl	d40c2 <__cxa_guard_release>
   d9922:	4804      	ldr	r0, [pc, #16]	; (d9934 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9924:	f002 f986 	bl	dbc34 <atexit>
    return &mgr;
}
   d9928:	4801      	ldr	r0, [pc, #4]	; (d9930 <_ZN5spark10LogManager8instanceEv+0x30>)
   d992a:	bd10      	pop	{r4, pc}
   d992c:	2003e580 	.word	0x2003e580
   d9930:	2003e590 	.word	0x2003e590
   d9934:	000d9d69 	.word	0x000d9d69

000d9938 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d9938:	4a02      	ldr	r2, [pc, #8]	; (d9944 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d993a:	4903      	ldr	r1, [pc, #12]	; (d9948 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d993c:	4803      	ldr	r0, [pc, #12]	; (d994c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d993e:	2300      	movs	r3, #0
   d9940:	f7fe beb0 	b.w	d86a4 <log_set_callbacks>
   d9944:	000d9bf1 	.word	0x000d9bf1
   d9948:	000d9b7d 	.word	0x000d9b7d
   d994c:	000d9afd 	.word	0x000d9afd

000d9950 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d9950:	2300      	movs	r3, #0
   d9952:	461a      	mov	r2, r3
   d9954:	4619      	mov	r1, r3
   d9956:	4618      	mov	r0, r3
   d9958:	f7fe bea4 	b.w	d86a4 <log_set_callbacks>

000d995c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d995c:	b570      	push	{r4, r5, r6, lr}
   d995e:	b08a      	sub	sp, #40	; 0x28
   d9960:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d9962:	4601      	mov	r1, r0
   d9964:	a804      	add	r0, sp, #16
   d9966:	f7fc feb3 	bl	d66d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d996a:	4e14      	ldr	r6, [pc, #80]	; (d99bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d996c:	a804      	add	r0, sp, #16
   d996e:	f7ff fdb5 	bl	d94dc <_ZN5spark18JSONObjectIterator4nextEv>
   d9972:	b1e8      	cbz	r0, d99b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d9974:	a904      	add	r1, sp, #16
   d9976:	4668      	mov	r0, sp
   d9978:	f7fc febb 	bl	d66f2 <_ZNK5spark18JSONObjectIterator4nameEv>
   d997c:	9802      	ldr	r0, [sp, #8]
   d997e:	4631      	mov	r1, r6
   d9980:	f7ff feb4 	bl	d96ec <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d9984:	4604      	mov	r4, r0
   d9986:	b110      	cbz	r0, d998e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d9988:	1e2c      	subs	r4, r5, #0
   d998a:	bf18      	it	ne
   d998c:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   d998e:	a801      	add	r0, sp, #4
   d9990:	f7fc fe88 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9994:	2c00      	cmp	r4, #0
   d9996:	d0e9      	beq.n	d996c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d9998:	a904      	add	r1, sp, #16
   d999a:	4668      	mov	r0, sp
   d999c:	f7fc feba 	bl	d6714 <_ZNK5spark18JSONObjectIterator5valueEv>
   d99a0:	4668      	mov	r0, sp
   d99a2:	f7ff fd3e 	bl	d9422 <_ZNK5spark9JSONValue5toIntEv>
   d99a6:	6028      	str	r0, [r5, #0]
   d99a8:	a801      	add	r0, sp, #4
   d99aa:	f7fc fe7b 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d99ae:	e7dd      	b.n	d996c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d99b0:	a805      	add	r0, sp, #20
   d99b2:	f7fc fe77 	bl	d66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d99b6:	b00a      	add	sp, #40	; 0x28
   d99b8:	bd70      	pop	{r4, r5, r6, pc}
   d99ba:	bf00      	nop
   d99bc:	000dc9d6 	.word	0x000dc9d6

000d99c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d99c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d99c2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d99c4:	4620      	mov	r0, r4
   d99c6:	4912      	ldr	r1, [pc, #72]	; (d9a10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d99c8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d99ca:	f002 f9ea 	bl	dbda2 <strcmp>
   d99ce:	b948      	cbnz	r0, d99e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d99d0:	f001 fb92 	bl	db0f8 <_Z16_fetch_usbserialv>
   d99d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d99d8:	f001 fb7e 	bl	db0d8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d99dc:	f001 fb8c 	bl	db0f8 <_Z16_fetch_usbserialv>
}
   d99e0:	b003      	add	sp, #12
   d99e2:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d99e4:	490b      	ldr	r1, [pc, #44]	; (d9a14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d99e6:	4620      	mov	r0, r4
   d99e8:	f002 f9db 	bl	dbda2 <strcmp>
   d99ec:	b970      	cbnz	r0, d9a0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d99ee:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d99f2:	a901      	add	r1, sp, #4
   d99f4:	4628      	mov	r0, r5
        int baud = 9600;
   d99f6:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d99f8:	f7ff ffb0 	bl	d995c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d99fc:	f001 faf4 	bl	dafe8 <_Z22__fetch_global_Serial1v>
   d9a00:	9901      	ldr	r1, [sp, #4]
   d9a02:	f001 faeb 	bl	dafdc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d9a06:	f001 faef 	bl	dafe8 <_Z22__fetch_global_Serial1v>
   d9a0a:	e7e9      	b.n	d99e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d9a0c:	2000      	movs	r0, #0
   d9a0e:	e7e7      	b.n	d99e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d9a10:	000dc9db 	.word	0x000dc9db
   d9a14:	000dc9e2 	.word	0x000dc9e2

000d9a18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9a18:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9a1a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d9a1e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9a20:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9a22:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9a26:	42ae      	cmp	r6, r5
   d9a28:	d005      	beq.n	d9a36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d9a2a:	f105 0008 	add.w	r0, r5, #8
   d9a2e:	f7ff fff3 	bl	d9a18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9a32:	3514      	adds	r5, #20
   d9a34:	e7f7      	b.n	d9a26 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d9a36:	6820      	ldr	r0, [r4, #0]
   d9a38:	f7fe ff44 	bl	d88c4 <free>
}
   d9a3c:	4620      	mov	r0, r4
   d9a3e:	bd70      	pop	{r4, r5, r6, pc}

000d9a40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9a40:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9a42:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9a46:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9a48:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d9a4c:	42ae      	cmp	r6, r5
   d9a4e:	d004      	beq.n	d9a5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9a50:	4628      	mov	r0, r5
   d9a52:	f000 ffa5 	bl	da9a0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d9a56:	3510      	adds	r5, #16
   d9a58:	e7f8      	b.n	d9a4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d9a5a:	6820      	ldr	r0, [r4, #0]
   d9a5c:	f7fe ff32 	bl	d88c4 <free>
}
   d9a60:	4620      	mov	r0, r4
   d9a62:	bd70      	pop	{r4, r5, r6, pc}

000d9a64 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d9a64:	b510      	push	{r4, lr}
   d9a66:	4604      	mov	r4, r0
   d9a68:	300c      	adds	r0, #12
   d9a6a:	f7ff ffd5 	bl	d9a18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9a6e:	4620      	mov	r0, r4
   d9a70:	f7ff ffe6 	bl	d9a40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9a74:	4620      	mov	r0, r4
   d9a76:	bd10      	pop	{r4, pc}

000d9a78 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d9a78:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d9a7a:	4b04      	ldr	r3, [pc, #16]	; (d9a8c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d9a7c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d9a7e:	f840 3b04 	str.w	r3, [r0], #4
   d9a82:	f7ff ffef 	bl	d9a64 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d9a86:	4620      	mov	r0, r4
   d9a88:	bd10      	pop	{r4, pc}
   d9a8a:	bf00      	nop
   d9a8c:	000dc358 	.word	0x000dc358

000d9a90 <_ZN5spark16StreamLogHandlerD0Ev>:
   d9a90:	b510      	push	{r4, lr}
   d9a92:	4604      	mov	r4, r0
   d9a94:	f7ff fff0 	bl	d9a78 <_ZN5spark16StreamLogHandlerD1Ev>
   d9a98:	4620      	mov	r0, r4
   d9a9a:	2124      	movs	r1, #36	; 0x24
   d9a9c:	f001 fca6 	bl	db3ec <_ZdlPvj>
   d9aa0:	4620      	mov	r0, r4
   d9aa2:	bd10      	pop	{r4, pc}

000d9aa4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d9aa4:	b510      	push	{r4, lr}
   d9aa6:	4b03      	ldr	r3, [pc, #12]	; (d9ab4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d9aa8:	6003      	str	r3, [r0, #0]
   d9aaa:	4604      	mov	r4, r0
   d9aac:	f7ff ffe4 	bl	d9a78 <_ZN5spark16StreamLogHandlerD1Ev>
   d9ab0:	4620      	mov	r0, r4
   d9ab2:	bd10      	pop	{r4, pc}
   d9ab4:	000dca84 	.word	0x000dca84

000d9ab8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d9ab8:	b510      	push	{r4, lr}
   d9aba:	4604      	mov	r4, r0
   d9abc:	f7ff fff2 	bl	d9aa4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d9ac0:	4620      	mov	r0, r4
   d9ac2:	2124      	movs	r1, #36	; 0x24
   d9ac4:	f001 fc92 	bl	db3ec <_ZdlPvj>
   d9ac8:	4620      	mov	r0, r4
   d9aca:	bd10      	pop	{r4, pc}

000d9acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d9acc:	2200      	movs	r2, #0
   d9ace:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d9ad2:	b510      	push	{r4, lr}
        capacity_(0) {
   d9ad4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9ad6:	680c      	ldr	r4, [r1, #0]
   d9ad8:	6004      	str	r4, [r0, #0]
   d9ada:	684c      	ldr	r4, [r1, #4]
   d9adc:	6044      	str	r4, [r0, #4]
   d9ade:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9ae0:	600a      	str	r2, [r1, #0]
   d9ae2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9ae4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9ae6:	608a      	str	r2, [r1, #8]
}
   d9ae8:	bd10      	pop	{r4, pc}

000d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d9aea:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d9aec:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d9aee:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9af0:	6818      	ldr	r0, [r3, #0]
   d9af2:	f7fe fbe7 	bl	d82c4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9af6:	4620      	mov	r0, r4
   d9af8:	bd10      	pop	{r4, pc}
	...

000d9afc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b00:	b087      	sub	sp, #28
   d9b02:	4680      	mov	r8, r0
   d9b04:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9b06:	4b1c      	ldr	r3, [pc, #112]	; (d9b78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d9b08:	685b      	ldr	r3, [r3, #4]
   d9b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9b0e:	4689      	mov	r9, r1
   d9b10:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9b12:	b96b      	cbnz	r3, d9b30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d9b14:	f7ff fef4 	bl	d9900 <_ZN5spark10LogManager8instanceEv>
   d9b18:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9b1a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d9b1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9b20:	9305      	str	r3, [sp, #20]
   d9b22:	f7fe fbc7 	bl	d82b4 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d9b26:	7b23      	ldrb	r3, [r4, #12]
   d9b28:	b12b      	cbz	r3, d9b36 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d9b2a:	a805      	add	r0, sp, #20
   d9b2c:	f7ff ffdd 	bl	d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9b30:	b007      	add	sp, #28
   d9b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9b36:	2301      	movs	r3, #1
   d9b38:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d9b3a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9b3e:	fa5f f989 	uxtb.w	r9, r9
   d9b42:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9b46:	45aa      	cmp	sl, r5
   d9b48:	d012      	beq.n	d9b70 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d9b4a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9b4e:	4631      	mov	r1, r6
   d9b50:	1d38      	adds	r0, r7, #4
   d9b52:	f7ff fe61 	bl	d9818 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9b56:	4581      	cmp	r9, r0
   d9b58:	d3f5      	bcc.n	d9b46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d9b5a:	683b      	ldr	r3, [r7, #0]
   d9b5c:	9a03      	ldr	r2, [sp, #12]
   d9b5e:	9200      	str	r2, [sp, #0]
   d9b60:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d9b64:	464a      	mov	r2, r9
   d9b66:	4633      	mov	r3, r6
   d9b68:	4641      	mov	r1, r8
   d9b6a:	4638      	mov	r0, r7
   d9b6c:	47d8      	blx	fp
   d9b6e:	e7ea      	b.n	d9b46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d9b70:	2300      	movs	r3, #0
   d9b72:	7323      	strb	r3, [r4, #12]
   d9b74:	e7d9      	b.n	d9b2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d9b76:	bf00      	nop
   d9b78:	e000ed00 	.word	0xe000ed00

000d9b7c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b80:	469b      	mov	fp, r3
   d9b82:	4b1a      	ldr	r3, [pc, #104]	; (d9bec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d9b84:	685b      	ldr	r3, [r3, #4]
   d9b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9b8a:	4680      	mov	r8, r0
   d9b8c:	4689      	mov	r9, r1
   d9b8e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9b90:	b96b      	cbnz	r3, d9bae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d9b92:	f7ff feb5 	bl	d9900 <_ZN5spark10LogManager8instanceEv>
   d9b96:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9b98:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9b9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9b9e:	9301      	str	r3, [sp, #4]
   d9ba0:	f7fe fb88 	bl	d82b4 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d9ba4:	7b23      	ldrb	r3, [r4, #12]
   d9ba6:	b12b      	cbz	r3, d9bb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9ba8:	a801      	add	r0, sp, #4
   d9baa:	f7ff ff9e 	bl	d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9bae:	b003      	add	sp, #12
   d9bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d9bb4:	2301      	movs	r3, #1
   d9bb6:	7323      	strb	r3, [r4, #12]
   d9bb8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9bbc:	b2f6      	uxtb	r6, r6
   d9bbe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9bc2:	4555      	cmp	r5, sl
   d9bc4:	d00e      	beq.n	d9be4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9bc6:	f855 7b04 	ldr.w	r7, [r5], #4
   d9bca:	4659      	mov	r1, fp
   d9bcc:	1d38      	adds	r0, r7, #4
   d9bce:	f7ff fe23 	bl	d9818 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9bd2:	4286      	cmp	r6, r0
   d9bd4:	d3f5      	bcc.n	d9bc2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9bd6:	683b      	ldr	r3, [r7, #0]
   d9bd8:	464a      	mov	r2, r9
   d9bda:	68db      	ldr	r3, [r3, #12]
   d9bdc:	4641      	mov	r1, r8
   d9bde:	4638      	mov	r0, r7
   d9be0:	4798      	blx	r3
   d9be2:	e7ee      	b.n	d9bc2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9be4:	2300      	movs	r3, #0
   d9be6:	7323      	strb	r3, [r4, #12]
   d9be8:	e7de      	b.n	d9ba8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d9bea:	bf00      	nop
   d9bec:	e000ed00 	.word	0xe000ed00

000d9bf0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9bf4:	4b16      	ldr	r3, [pc, #88]	; (d9c50 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9bf6:	685b      	ldr	r3, [r3, #4]
   d9bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9bfc:	4605      	mov	r5, r0
   d9bfe:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9c00:	bb1b      	cbnz	r3, d9c4a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9c02:	f7ff fe7d 	bl	d9900 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d9c06:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d9c0a:	4604      	mov	r4, r0
   d9c0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9c0e:	9301      	str	r3, [sp, #4]
   d9c10:	f7fe fb50 	bl	d82b4 <os_mutex_recursive_lock>
   d9c14:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9c18:	2446      	movs	r4, #70	; 0x46
   d9c1a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9c1e:	45b0      	cmp	r8, r6
   d9c20:	d109      	bne.n	d9c36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9c22:	a801      	add	r0, sp, #4
   d9c24:	f7ff ff61 	bl	d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9c28:	42a5      	cmp	r5, r4
   d9c2a:	bfb4      	ite	lt
   d9c2c:	2000      	movlt	r0, #0
   d9c2e:	2001      	movge	r0, #1
}
   d9c30:	b002      	add	sp, #8
   d9c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d9c36:	f856 0b04 	ldr.w	r0, [r6], #4
   d9c3a:	4639      	mov	r1, r7
   d9c3c:	3004      	adds	r0, #4
   d9c3e:	f7ff fdeb 	bl	d9818 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9c42:	4284      	cmp	r4, r0
   d9c44:	bfa8      	it	ge
   d9c46:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9c48:	e7e9      	b.n	d9c1e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9c4a:	2000      	movs	r0, #0
   d9c4c:	e7f0      	b.n	d9c30 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9c4e:	bf00      	nop
   d9c50:	e000ed00 	.word	0xe000ed00

000d9c54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9c54:	b570      	push	{r4, r5, r6, lr}
   d9c56:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9c58:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9c5c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9c5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9c62:	4282      	cmp	r2, r0
   d9c64:	d007      	beq.n	d9c76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d9c66:	4601      	mov	r1, r0
            if (*p == value) {
   d9c68:	681d      	ldr	r5, [r3, #0]
   d9c6a:	f851 6b04 	ldr.w	r6, [r1], #4
   d9c6e:	42ae      	cmp	r6, r5
   d9c70:	d003      	beq.n	d9c7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9c72:	4608      	mov	r0, r1
   d9c74:	e7f5      	b.n	d9c62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d9c76:	2000      	movs	r0, #0
}
   d9c78:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9c7a:	1a52      	subs	r2, r2, r1
   d9c7c:	f002 f800 	bl	dbc80 <memmove>
    --size_;
   d9c80:	6863      	ldr	r3, [r4, #4]
   d9c82:	3b01      	subs	r3, #1
   d9c84:	6063      	str	r3, [r4, #4]
    return true;
   d9c86:	2001      	movs	r0, #1
   d9c88:	e7f6      	b.n	d9c78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9c8a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9c8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9c8c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9c90:	4604      	mov	r4, r0
   d9c92:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9c94:	9101      	str	r1, [sp, #4]
   d9c96:	9303      	str	r3, [sp, #12]
   d9c98:	f7fe fb0c 	bl	d82b4 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9c9c:	a901      	add	r1, sp, #4
   d9c9e:	4620      	mov	r0, r4
   d9ca0:	f7ff ffd8 	bl	d9c54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9ca4:	b118      	cbz	r0, d9cae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d9ca6:	6863      	ldr	r3, [r4, #4]
   d9ca8:	b90b      	cbnz	r3, d9cae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9caa:	f7ff fe51 	bl	d9950 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9cae:	a803      	add	r0, sp, #12
   d9cb0:	f7ff ff1b 	bl	d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9cb4:	b004      	add	sp, #16
   d9cb6:	bd10      	pop	{r4, pc}

000d9cb8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9cb8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9cba:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d9cbe:	2318      	movs	r3, #24
   d9cc0:	4604      	mov	r4, r0
   d9cc2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9cc6:	42ae      	cmp	r6, r5
   d9cc8:	d015      	beq.n	d9cf6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9cca:	f105 0110 	add.w	r1, r5, #16
   d9cce:	4620      	mov	r0, r4
   d9cd0:	f7ff ffc0 	bl	d9c54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9cd4:	6863      	ldr	r3, [r4, #4]
   d9cd6:	b90b      	cbnz	r3, d9cdc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9cd8:	f7ff fe3a 	bl	d9950 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d9cdc:	69e0      	ldr	r0, [r4, #28]
   d9cde:	6929      	ldr	r1, [r5, #16]
   d9ce0:	6803      	ldr	r3, [r0, #0]
   d9ce2:	68db      	ldr	r3, [r3, #12]
   d9ce4:	4798      	blx	r3
        if (h.stream) {
   d9ce6:	6969      	ldr	r1, [r5, #20]
   d9ce8:	b119      	cbz	r1, d9cf2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9cea:	6a20      	ldr	r0, [r4, #32]
   d9cec:	6803      	ldr	r3, [r0, #0]
   d9cee:	68db      	ldr	r3, [r3, #12]
   d9cf0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d9cf2:	3518      	adds	r5, #24
   d9cf4:	e7e7      	b.n	d9cc6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9cf6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9cfa:	2618      	movs	r6, #24
   d9cfc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9d00:	42ae      	cmp	r6, r5
   d9d02:	d004      	beq.n	d9d0e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9d04:	4628      	mov	r0, r5
   d9d06:	f000 fe4b 	bl	da9a0 <_ZN6StringD1Ev>
   d9d0a:	3518      	adds	r5, #24
   d9d0c:	e7f8      	b.n	d9d00 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9d0e:	2300      	movs	r3, #0
   d9d10:	6163      	str	r3, [r4, #20]
}
   d9d12:	bd70      	pop	{r4, r5, r6, pc}

000d9d14 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9d14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9d16:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9d18:	f7ff fe1a 	bl	d9950 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9d1c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9d20:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9d22:	9301      	str	r3, [sp, #4]
   d9d24:	f7fe fac6 	bl	d82b4 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9d28:	4620      	mov	r0, r4
   d9d2a:	f7ff ffc5 	bl	d9cb8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9d2e:	a801      	add	r0, sp, #4
   d9d30:	f7ff fedb 	bl	d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9d34:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9d36:	b108      	cbz	r0, d9d3c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9d38:	f7fe fab4 	bl	d82a4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9d3c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9d40:	2618      	movs	r6, #24
   d9d42:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9d46:	42ae      	cmp	r6, r5
   d9d48:	d004      	beq.n	d9d54 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9d4a:	4628      	mov	r0, r5
   d9d4c:	f000 fe28 	bl	da9a0 <_ZN6StringD1Ev>
   d9d50:	3518      	adds	r5, #24
   d9d52:	e7f8      	b.n	d9d46 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9d54:	6920      	ldr	r0, [r4, #16]
   d9d56:	f7fe fdb5 	bl	d88c4 <free>
   d9d5a:	6820      	ldr	r0, [r4, #0]
   d9d5c:	f7fe fdb2 	bl	d88c4 <free>
}
   d9d60:	4620      	mov	r0, r4
   d9d62:	b002      	add	sp, #8
   d9d64:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9d68 <__tcf_2>:
    static LogManager mgr;
   d9d68:	4801      	ldr	r0, [pc, #4]	; (d9d70 <__tcf_2+0x8>)
   d9d6a:	f7ff bfd3 	b.w	d9d14 <_ZN5spark10LogManagerD1Ev>
   d9d6e:	bf00      	nop
   d9d70:	2003e590 	.word	0x2003e590

000d9d74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9d74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9d78:	4606      	mov	r6, r0
   d9d7a:	460c      	mov	r4, r1
   d9d7c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9d7e:	d927      	bls.n	d9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9d80:	4290      	cmp	r0, r2
   d9d82:	d226      	bcs.n	d9dd2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9d84:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9d88:	1a6c      	subs	r4, r5, r1
   d9d8a:	f1a1 0714 	sub.w	r7, r1, #20
   d9d8e:	4404      	add	r4, r0
        capacity_(0) {
   d9d90:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9d92:	42af      	cmp	r7, r5
   d9d94:	d03d      	beq.n	d9e12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d9d96:	b1a4      	cbz	r4, d9dc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9d98:	682b      	ldr	r3, [r5, #0]
   d9d9a:	6023      	str	r3, [r4, #0]
   d9d9c:	88ab      	ldrh	r3, [r5, #4]
   d9d9e:	80a3      	strh	r3, [r4, #4]
   d9da0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d9da4:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d9da6:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9daa:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9dac:	68ab      	ldr	r3, [r5, #8]
   d9dae:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9db0:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9db2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9db4:	68ea      	ldr	r2, [r5, #12]
   d9db6:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9db8:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9dba:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9dbc:	692a      	ldr	r2, [r5, #16]
   d9dbe:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9dc0:	612b      	str	r3, [r5, #16]
   d9dc2:	f105 0008 	add.w	r0, r5, #8
   d9dc6:	f7ff fe27 	bl	d9a18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9dca:	3d14      	subs	r5, #20
   d9dcc:	3c14      	subs	r4, #20
   d9dce:	e7e0      	b.n	d9d92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9dd0:	d01f      	beq.n	d9e12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9dd2:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9dd4:	42ac      	cmp	r4, r5
   d9dd6:	d01c      	beq.n	d9e12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9dd8:	b1a6      	cbz	r6, d9e04 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9dda:	6823      	ldr	r3, [r4, #0]
   d9ddc:	6033      	str	r3, [r6, #0]
   d9dde:	88a3      	ldrh	r3, [r4, #4]
   d9de0:	80b3      	strh	r3, [r6, #4]
   d9de2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9de6:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9de8:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d9dec:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9dee:	68a3      	ldr	r3, [r4, #8]
   d9df0:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9df2:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9df4:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9df6:	68e2      	ldr	r2, [r4, #12]
   d9df8:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9dfa:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9dfc:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9dfe:	6922      	ldr	r2, [r4, #16]
   d9e00:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9e02:	6123      	str	r3, [r4, #16]
   d9e04:	f104 0008 	add.w	r0, r4, #8
   d9e08:	f7ff fe06 	bl	d9a18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9e0c:	3414      	adds	r4, #20
   d9e0e:	3614      	adds	r6, #20
   d9e10:	e7e0      	b.n	d9dd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9e14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9e16:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9e1a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9e1c:	4604      	mov	r4, r0
   d9e1e:	460e      	mov	r6, r1
   d9e20:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9e22:	db0d      	blt.n	d9e40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9e24:	3501      	adds	r5, #1
        if (n > 0) {
   d9e26:	2d00      	cmp	r5, #0
   d9e28:	6800      	ldr	r0, [r0, #0]
   d9e2a:	dd04      	ble.n	d9e36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9e2c:	00a9      	lsls	r1, r5, #2
   d9e2e:	f7fe fd51 	bl	d88d4 <realloc>
            if (!d) {
   d9e32:	b918      	cbnz	r0, d9e3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9e36:	f7fe fd45 	bl	d88c4 <free>
        T* d = nullptr;
   d9e3a:	2000      	movs	r0, #0
        data_ = d;
   d9e3c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9e3e:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9e40:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9e42:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9e44:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9e48:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9e4a:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9e4e:	1d08      	adds	r0, r1, #4
   d9e50:	f001 ff16 	bl	dbc80 <memmove>
    new(p) T(std::move(value));
   d9e54:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9e58:	6863      	ldr	r3, [r4, #4]
   d9e5a:	3301      	adds	r3, #1
   d9e5c:	6063      	str	r3, [r4, #4]
    return true;
   d9e5e:	2001      	movs	r0, #1
   d9e60:	e7e8      	b.n	d9e34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9e62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9e62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9e64:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9e68:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9e6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9e6c:	9301      	str	r3, [sp, #4]
   d9e6e:	460d      	mov	r5, r1
   d9e70:	f7fe fa20 	bl	d82b4 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9e74:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9e78:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9e7c:	4283      	cmp	r3, r0
   d9e7e:	461a      	mov	r2, r3
   d9e80:	d00b      	beq.n	d9e9a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9e82:	6812      	ldr	r2, [r2, #0]
   d9e84:	42aa      	cmp	r2, r5
   d9e86:	f103 0304 	add.w	r3, r3, #4
   d9e8a:	d1f7      	bne.n	d9e7c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9e8c:	a801      	add	r0, sp, #4
   d9e8e:	f7ff fe2c 	bl	d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9e92:	2500      	movs	r5, #0
}
   d9e94:	4628      	mov	r0, r5
   d9e96:	b003      	add	sp, #12
   d9e98:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9e9a:	462a      	mov	r2, r5
   d9e9c:	4620      	mov	r0, r4
   d9e9e:	f7ff ffb9 	bl	d9e14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d9ea2:	4605      	mov	r5, r0
   d9ea4:	2800      	cmp	r0, #0
   d9ea6:	d0f1      	beq.n	d9e8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9ea8:	6863      	ldr	r3, [r4, #4]
   d9eaa:	2b01      	cmp	r3, #1
   d9eac:	d101      	bne.n	d9eb2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9eae:	f7ff fd43 	bl	d9938 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9eb2:	a801      	add	r0, sp, #4
   d9eb4:	f7ff fe19 	bl	d9aea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9eb8:	e7ec      	b.n	d9e94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9eba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9eba:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9ebe:	4604      	mov	r4, r0
   d9ec0:	460d      	mov	r5, r1
   d9ec2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d9ec4:	d914      	bls.n	d9ef0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d9ec6:	4290      	cmp	r0, r2
   d9ec8:	d213      	bcs.n	d9ef2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9eca:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9ece:	1a75      	subs	r5, r6, r1
   d9ed0:	f1a1 0710 	sub.w	r7, r1, #16
   d9ed4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d9ed6:	42b7      	cmp	r7, r6
   d9ed8:	d018      	beq.n	d9f0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9eda:	b11c      	cbz	r4, d9ee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d9edc:	4631      	mov	r1, r6
   d9ede:	4620      	mov	r0, r4
   d9ee0:	f000 fdda 	bl	daa98 <_ZN6StringC1EOS_>
                end->~T();
   d9ee4:	4630      	mov	r0, r6
   d9ee6:	f000 fd5b 	bl	da9a0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d9eea:	3e10      	subs	r6, #16
   d9eec:	3c10      	subs	r4, #16
   d9eee:	e7f2      	b.n	d9ed6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d9ef0:	d00c      	beq.n	d9f0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d9ef2:	42b5      	cmp	r5, r6
   d9ef4:	d00a      	beq.n	d9f0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9ef6:	b11c      	cbz	r4, d9f00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9ef8:	4629      	mov	r1, r5
   d9efa:	4620      	mov	r0, r4
   d9efc:	f000 fdcc 	bl	daa98 <_ZN6StringC1EOS_>
                p->~T();
   d9f00:	4628      	mov	r0, r5
   d9f02:	f000 fd4d 	bl	da9a0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9f06:	3510      	adds	r5, #16
   d9f08:	3410      	adds	r4, #16
   d9f0a:	e7f2      	b.n	d9ef2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9f0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9f0e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9f10:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9f12:	4605      	mov	r5, r0
        if (n > 0) {
   d9f14:	dd11      	ble.n	d9f3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d9f16:	0130      	lsls	r0, r6, #4
   d9f18:	f7fe fccc 	bl	d88b4 <malloc>
            if (!d) {
   d9f1c:	4604      	mov	r4, r0
   d9f1e:	b158      	cbz	r0, d9f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9f20:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9f24:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d9f28:	f7ff ffc7 	bl	d9eba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9f2c:	6828      	ldr	r0, [r5, #0]
   d9f2e:	f7fe fcc9 	bl	d88c4 <free>
        data_ = d;
   d9f32:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9f34:	60ae      	str	r6, [r5, #8]
        return true;
   d9f36:	2001      	movs	r0, #1
    }
   d9f38:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9f3a:	2400      	movs	r4, #0
   d9f3c:	e7f6      	b.n	d9f2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9f3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9f42:	4691      	mov	r9, r2
   d9f44:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d9f46:	2300      	movs	r3, #0
   d9f48:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9f4a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9f4e:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9f50:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9f52:	4299      	cmp	r1, r3
        capacity_(0) {
   d9f54:	e9c0 3300 	strd	r3, r3, [r0]
   d9f58:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9f5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9f60:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9f64:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9f66:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9f68:	dc23      	bgt.n	d9fb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9f6a:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9f6e:	2314      	movs	r3, #20
   d9f70:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9f74:	42af      	cmp	r7, r5
   d9f76:	d03b      	beq.n	d9ff0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9f78:	4629      	mov	r1, r5
   d9f7a:	a80d      	add	r0, sp, #52	; 0x34
   d9f7c:	f000 fd8c 	bl	daa98 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9f80:	a90d      	add	r1, sp, #52	; 0x34
   d9f82:	a811      	add	r0, sp, #68	; 0x44
   d9f84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9f86:	f000 fd87 	bl	daa98 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9f8a:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9f8e:	4299      	cmp	r1, r3
   d9f90:	da1b      	bge.n	d9fca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d9f96:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9f9a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9f9e:	4631      	mov	r1, r6
   d9fa0:	f106 0010 	add.w	r0, r6, #16
   d9fa4:	f7ff ff89 	bl	d9eba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9fa8:	b9ee      	cbnz	r6, d9fe6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9fac:	3301      	adds	r3, #1
   d9fae:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9fb0:	e011      	b.n	d9fd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d9fb2:	a80a      	add	r0, sp, #40	; 0x28
   d9fb4:	f7ff ffab 	bl	d9f0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9fb8:	2800      	cmp	r0, #0
   d9fba:	d1d6      	bne.n	d9f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d9fbc:	a80a      	add	r0, sp, #40	; 0x28
   d9fbe:	f7ff fd3f 	bl	d9a40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9fc2:	4620      	mov	r0, r4
   d9fc4:	b017      	add	sp, #92	; 0x5c
   d9fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9fca:	3101      	adds	r1, #1
   d9fcc:	a80a      	add	r0, sp, #40	; 0x28
   d9fce:	f7ff ff9e 	bl	d9f0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9fd2:	2800      	cmp	r0, #0
   d9fd4:	d1dd      	bne.n	d9f92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d9fd6:	a811      	add	r0, sp, #68	; 0x44
   d9fd8:	f000 fce2 	bl	da9a0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d9fdc:	a80d      	add	r0, sp, #52	; 0x34
   d9fde:	f000 fcdf 	bl	da9a0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d9fe2:	3514      	adds	r5, #20
   d9fe4:	e7c6      	b.n	d9f74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d9fe6:	a911      	add	r1, sp, #68	; 0x44
   d9fe8:	4630      	mov	r0, r6
   d9fea:	f000 fd55 	bl	daa98 <_ZN6StringC1EOS_>
   d9fee:	e7dc      	b.n	d9faa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d9ff0:	2600      	movs	r6, #0
   d9ff2:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9ff6:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9ff8:	4637      	mov	r7, r6
   d9ffa:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9ffe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da002:	429e      	cmp	r6, r3
   da004:	f280 8097 	bge.w	da136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   da008:	0133      	lsls	r3, r6, #4
   da00a:	58d3      	ldr	r3, [r2, r3]
   da00c:	9308      	str	r3, [sp, #32]
        if (!category) {
   da00e:	b90b      	cbnz	r3, da014 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   da010:	3601      	adds	r6, #1
   da012:	e7f4      	b.n	d9ffe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   da014:	fb0a f306 	mul.w	r3, sl, r6
   da018:	9709      	str	r7, [sp, #36]	; 0x24
   da01a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   da01c:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   da01e:	a909      	add	r1, sp, #36	; 0x24
   da020:	a808      	add	r0, sp, #32
   da022:	f7ff fb3c 	bl	d969e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da026:	4683      	mov	fp, r0
   da028:	2800      	cmp	r0, #0
   da02a:	d0f1      	beq.n	da010 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   da02c:	4601      	mov	r1, r0
   da02e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   da030:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   da034:	f10d 031f 	add.w	r3, sp, #31
   da038:	4628      	mov	r0, r5
   da03a:	f7ff fbaf 	bl	d979c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da03e:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   da042:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da044:	f1b8 0f00 	cmp.w	r8, #0
   da048:	d166      	bne.n	da118 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   da04a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   da04e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   da052:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   da056:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da05a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   da05e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   da062:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da066:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   da06a:	4293      	cmp	r3, r2
   da06c:	db1a      	blt.n	da0a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   da06e:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   da072:	f1bb 0f00 	cmp.w	fp, #0
   da076:	dd4a      	ble.n	da10e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   da078:	fb0a f00b 	mul.w	r0, sl, fp
   da07c:	f7fe fc1a 	bl	d88b4 <malloc>
            if (!d) {
   da080:	9004      	str	r0, [sp, #16]
   da082:	2800      	cmp	r0, #0
   da084:	d045      	beq.n	da112 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   da086:	e9d5 1200 	ldrd	r1, r2, [r5]
   da08a:	fb0a 1202 	mla	r2, sl, r2, r1
   da08e:	f7ff fe71 	bl	d9d74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   da092:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   da094:	6828      	ldr	r0, [r5, #0]
   da096:	9304      	str	r3, [sp, #16]
   da098:	f7fe fc14 	bl	d88c4 <free>
        data_ = d;
   da09c:	9b04      	ldr	r3, [sp, #16]
   da09e:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   da0a0:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   da0a4:	9b01      	ldr	r3, [sp, #4]
   da0a6:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   da0aa:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   da0ac:	fb0a f303 	mul.w	r3, sl, r3
   da0b0:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   da0b4:	f101 0014 	add.w	r0, r1, #20
   da0b8:	fb0a b202 	mla	r2, sl, r2, fp
   da0bc:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   da0be:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   da0c0:	f7ff fe58 	bl	d9d74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   da0c4:	9904      	ldr	r1, [sp, #16]
   da0c6:	b1a9      	cbz	r1, da0f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   da0c8:	9b05      	ldr	r3, [sp, #20]
   da0ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da0cc:	f84b 2003 	str.w	r2, [fp, r3]
   da0d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   da0d4:	808b      	strh	r3, [r1, #4]
   da0d6:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   da0da:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   da0dc:	e9c1 7702 	strd	r7, r7, [r1, #8]
   da0e0:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   da0e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da0e4:	608b      	str	r3, [r1, #8]
   da0e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   da0e8:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   da0ea:	60cb      	str	r3, [r1, #12]
   da0ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   da0ee:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   da0f0:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da0f2:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   da0f4:	686b      	ldr	r3, [r5, #4]
   da0f6:	3301      	adds	r3, #1
   da0f8:	606b      	str	r3, [r5, #4]
   da0fa:	a813      	add	r0, sp, #76	; 0x4c
   da0fc:	f7ff fc8c 	bl	d9a18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da100:	f1b8 0f00 	cmp.w	r8, #0
   da104:	d008      	beq.n	da118 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   da106:	a80d      	add	r0, sp, #52	; 0x34
   da108:	f7ff fc86 	bl	d9a18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da10c:	e756      	b.n	d9fbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   da10e:	4643      	mov	r3, r8
   da110:	e7c0      	b.n	da094 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da112:	f04f 0801 	mov.w	r8, #1
   da116:	e7f0      	b.n	da0fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   da118:	9b01      	ldr	r3, [sp, #4]
   da11a:	682d      	ldr	r5, [r5, #0]
   da11c:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   da120:	9b08      	ldr	r3, [sp, #32]
   da122:	781b      	ldrb	r3, [r3, #0]
   da124:	b92b      	cbnz	r3, da132 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   da126:	f8d9 3000 	ldr.w	r3, [r9]
   da12a:	9a02      	ldr	r2, [sp, #8]
   da12c:	4413      	add	r3, r2
   da12e:	7c1b      	ldrb	r3, [r3, #16]
   da130:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   da132:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   da134:	e773      	b.n	da01e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da136:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da138:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da13a:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   da13c:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da13e:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da140:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   da142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   da144:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da146:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da148:	60a2      	str	r2, [r4, #8]
   da14a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   da14c:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da14e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da150:	60e2      	str	r2, [r4, #12]
   da152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   da154:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da156:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   da158:	6122      	str	r2, [r4, #16]
   da15a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   da15c:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   da15e:	9b03      	ldr	r3, [sp, #12]
   da160:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   da162:	6162      	str	r2, [r4, #20]
   da164:	7623      	strb	r3, [r4, #24]
   da166:	e7ce      	b.n	da106 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000da168 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   da16a:	4605      	mov	r5, r0
   da16c:	4b09      	ldr	r3, [pc, #36]	; (da194 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   da16e:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da172:	4604      	mov	r4, r0
   da174:	460e      	mov	r6, r1
        filter_(level, filters) {
   da176:	a801      	add	r0, sp, #4
   da178:	4611      	mov	r1, r2
   da17a:	f7fa fa8a 	bl	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da17e:	aa01      	add	r2, sp, #4
   da180:	4631      	mov	r1, r6
   da182:	4628      	mov	r0, r5
   da184:	f7ff fedb 	bl	d9f3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da188:	a801      	add	r0, sp, #4
   da18a:	f7fa fa41 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   da18e:	4620      	mov	r0, r4
   da190:	b004      	add	sp, #16
   da192:	bd70      	pop	{r4, r5, r6, pc}
   da194:	000dc358 	.word	0x000dc358

000da198 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   da198:	b5f0      	push	{r4, r5, r6, r7, lr}
   da19a:	460f      	mov	r7, r1
   da19c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da19e:	4926      	ldr	r1, [pc, #152]	; (da238 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   da1a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da1a2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   da1a4:	4616      	mov	r6, r2
   da1a6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da1a8:	f001 fdfb 	bl	dbda2 <strcmp>
   da1ac:	bb00      	cbnz	r0, da1f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   da1ae:	b1e4      	cbz	r4, da1ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   da1b0:	4629      	mov	r1, r5
   da1b2:	4668      	mov	r0, sp
   da1b4:	f7ff fc8a 	bl	d9acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da1b8:	4920      	ldr	r1, [pc, #128]	; (da23c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da1ba:	2024      	movs	r0, #36	; 0x24
   da1bc:	f001 f918 	bl	db3f0 <_ZnwjRKSt9nothrow_t>
   da1c0:	4605      	mov	r5, r0
   da1c2:	b170      	cbz	r0, da1e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da1c4:	4669      	mov	r1, sp
   da1c6:	a803      	add	r0, sp, #12
   da1c8:	f7fa fa63 	bl	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da1cc:	aa03      	add	r2, sp, #12
   da1ce:	4631      	mov	r1, r6
   da1d0:	4628      	mov	r0, r5
   da1d2:	f7ff ffc9 	bl	da168 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da1d6:	a803      	add	r0, sp, #12
   da1d8:	f7fa fa1a 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   da1dc:	4b18      	ldr	r3, [pc, #96]	; (da240 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   da1de:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   da1e0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da1e2:	4668      	mov	r0, sp
   da1e4:	f7fa fa14 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da1e8:	462c      	mov	r4, r5
}
   da1ea:	4620      	mov	r0, r4
   da1ec:	b007      	add	sp, #28
   da1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da1f0:	4914      	ldr	r1, [pc, #80]	; (da244 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   da1f2:	4638      	mov	r0, r7
   da1f4:	f001 fdd5 	bl	dbda2 <strcmp>
   da1f8:	b9e0      	cbnz	r0, da234 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   da1fa:	2c00      	cmp	r4, #0
   da1fc:	d0f5      	beq.n	da1ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da1fe:	4629      	mov	r1, r5
   da200:	4668      	mov	r0, sp
   da202:	f7ff fc63 	bl	d9acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da206:	490d      	ldr	r1, [pc, #52]	; (da23c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da208:	2024      	movs	r0, #36	; 0x24
   da20a:	f001 f8f1 	bl	db3f0 <_ZnwjRKSt9nothrow_t>
   da20e:	4605      	mov	r5, r0
   da210:	2800      	cmp	r0, #0
   da212:	d0e6      	beq.n	da1e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da214:	4669      	mov	r1, sp
   da216:	a803      	add	r0, sp, #12
   da218:	f7fa fa3b 	bl	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da21c:	aa03      	add	r2, sp, #12
   da21e:	4631      	mov	r1, r6
   da220:	4628      	mov	r0, r5
   da222:	f7ff ffa1 	bl	da168 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da226:	a803      	add	r0, sp, #12
   da228:	f7fa f9f2 	bl	d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da22c:	4b06      	ldr	r3, [pc, #24]	; (da248 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   da22e:	602b      	str	r3, [r5, #0]
   da230:	622c      	str	r4, [r5, #32]
}
   da232:	e7d6      	b.n	da1e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   da234:	2400      	movs	r4, #0
   da236:	e7d8      	b.n	da1ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   da238:	000dc9ea 	.word	0x000dc9ea
   da23c:	000dcbb4 	.word	0x000dcbb4
   da240:	000dca84 	.word	0x000dca84
   da244:	000dc9ee 	.word	0x000dc9ee
   da248:	000dca6c 	.word	0x000dca6c

000da24c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   da24c:	4b01      	ldr	r3, [pc, #4]	; (da254 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da24e:	4a02      	ldr	r2, [pc, #8]	; (da258 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da250:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   da252:	4770      	bx	lr
   da254:	2003e58c 	.word	0x2003e58c
   da258:	000dc9ff 	.word	0x000dc9ff

000da25c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da260:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   da262:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da266:	4604      	mov	r4, r0
   da268:	460e      	mov	r6, r1
   da26a:	4617      	mov	r7, r2
   da26c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   da26e:	f000 ff43 	bl	db0f8 <_Z16_fetch_usbserialv>
   da272:	4581      	cmp	r9, r0
   da274:	d04c      	beq.n	da310 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   da276:	792b      	ldrb	r3, [r5, #4]
   da278:	0719      	lsls	r1, r3, #28
   da27a:	d504      	bpl.n	da286 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   da27c:	696a      	ldr	r2, [r5, #20]
   da27e:	4954      	ldr	r1, [pc, #336]	; (da3d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da280:	4620      	mov	r0, r4
   da282:	f7ff fa7c 	bl	d977e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   da286:	f1b8 0f00 	cmp.w	r8, #0
   da28a:	d00d      	beq.n	da2a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   da28c:	215b      	movs	r1, #91	; 0x5b
   da28e:	4620      	mov	r0, r4
   da290:	f7ff fa69 	bl	d9766 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da294:	4641      	mov	r1, r8
   da296:	4620      	mov	r0, r4
   da298:	f7ff fa56 	bl	d9748 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da29c:	6823      	ldr	r3, [r4, #0]
   da29e:	494d      	ldr	r1, [pc, #308]	; (da3d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   da2a0:	68db      	ldr	r3, [r3, #12]
   da2a2:	2202      	movs	r2, #2
   da2a4:	4620      	mov	r0, r4
   da2a6:	4798      	blx	r3
    if (attr.has_file) {
   da2a8:	792b      	ldrb	r3, [r5, #4]
   da2aa:	07da      	lsls	r2, r3, #31
   da2ac:	d523      	bpl.n	da2f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   da2ae:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   da2b2:	212f      	movs	r1, #47	; 0x2f
   da2b4:	4640      	mov	r0, r8
   da2b6:	f001 fdd1 	bl	dbe5c <strrchr>
    if (s1) {
   da2ba:	b108      	cbz	r0, da2c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   da2bc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   da2c0:	4641      	mov	r1, r8
   da2c2:	4620      	mov	r0, r4
   da2c4:	f7ff fa40 	bl	d9748 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da2c8:	792b      	ldrb	r3, [r5, #4]
   da2ca:	079b      	lsls	r3, r3, #30
   da2cc:	d508      	bpl.n	da2e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   da2ce:	213a      	movs	r1, #58	; 0x3a
   da2d0:	4620      	mov	r0, r4
   da2d2:	f7ff fa48 	bl	d9766 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   da2d6:	68ea      	ldr	r2, [r5, #12]
   da2d8:	493f      	ldr	r1, [pc, #252]	; (da3d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   da2da:	4620      	mov	r0, r4
   da2dc:	f7ff fa4f 	bl	d977e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   da2e0:	792a      	ldrb	r2, [r5, #4]
   da2e2:	6823      	ldr	r3, [r4, #0]
   da2e4:	f012 0f04 	tst.w	r2, #4
   da2e8:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   da2ea:	bf14      	ite	ne
   da2ec:	493b      	ldrne	r1, [pc, #236]	; (da3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   da2ee:	493c      	ldreq	r1, [pc, #240]	; (da3e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   da2f0:	2202      	movs	r2, #2
            write(": ", 2);
   da2f2:	4620      	mov	r0, r4
   da2f4:	4798      	blx	r3
    if (attr.has_function) {
   da2f6:	792b      	ldrb	r3, [r5, #4]
   da2f8:	0758      	lsls	r0, r3, #29
   da2fa:	d51d      	bpl.n	da338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da2fc:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da2fe:	460b      	mov	r3, r1
   da300:	461a      	mov	r2, r3
    for (; *s; ++s) {
   da302:	f813 0b01 	ldrb.w	r0, [r3], #1
   da306:	b160      	cbz	r0, da322 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   da308:	2820      	cmp	r0, #32
   da30a:	d108      	bne.n	da31e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   da30c:	4619      	mov	r1, r3
   da30e:	e7f7      	b.n	da300 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   da310:	4834      	ldr	r0, [pc, #208]	; (da3e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da312:	f000 f966 	bl	da5e2 <_ZN5spark12NetworkClass9listeningEv>
   da316:	2800      	cmp	r0, #0
   da318:	d0ad      	beq.n	da276 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   da31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   da31e:	2828      	cmp	r0, #40	; 0x28
   da320:	d1ee      	bne.n	da300 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   da322:	6823      	ldr	r3, [r4, #0]
   da324:	1a52      	subs	r2, r2, r1
   da326:	68db      	ldr	r3, [r3, #12]
   da328:	4620      	mov	r0, r4
   da32a:	4798      	blx	r3
        write("(): ", 4);
   da32c:	6823      	ldr	r3, [r4, #0]
   da32e:	492e      	ldr	r1, [pc, #184]	; (da3e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da330:	68db      	ldr	r3, [r3, #12]
   da332:	2204      	movs	r2, #4
   da334:	4620      	mov	r0, r4
   da336:	4798      	blx	r3
    return log_level_name(level, nullptr);
   da338:	2100      	movs	r1, #0
   da33a:	4638      	mov	r0, r7
   da33c:	f7fe f9aa 	bl	d8694 <log_level_name>
   da340:	4601      	mov	r1, r0
    write(s);
   da342:	4620      	mov	r0, r4
   da344:	f7ff fa00 	bl	d9748 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da348:	6823      	ldr	r3, [r4, #0]
   da34a:	4925      	ldr	r1, [pc, #148]	; (da3e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da34c:	68db      	ldr	r3, [r3, #12]
   da34e:	2202      	movs	r2, #2
   da350:	4620      	mov	r0, r4
   da352:	4798      	blx	r3
    if (msg) {
   da354:	b11e      	cbz	r6, da35e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   da356:	4631      	mov	r1, r6
   da358:	4620      	mov	r0, r4
   da35a:	f7ff f9f5 	bl	d9748 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   da35e:	792b      	ldrb	r3, [r5, #4]
   da360:	f013 0f30 	tst.w	r3, #48	; 0x30
   da364:	d02c      	beq.n	da3c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   da366:	6823      	ldr	r3, [r4, #0]
   da368:	4920      	ldr	r1, [pc, #128]	; (da3ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da36a:	68db      	ldr	r3, [r3, #12]
   da36c:	2202      	movs	r2, #2
   da36e:	4620      	mov	r0, r4
   da370:	4798      	blx	r3
        if (attr.has_code) {
   da372:	792b      	ldrb	r3, [r5, #4]
   da374:	06d9      	lsls	r1, r3, #27
   da376:	d50a      	bpl.n	da38e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   da378:	6823      	ldr	r3, [r4, #0]
   da37a:	491d      	ldr	r1, [pc, #116]	; (da3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da37c:	68db      	ldr	r3, [r3, #12]
   da37e:	2207      	movs	r2, #7
   da380:	4620      	mov	r0, r4
   da382:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   da384:	69aa      	ldr	r2, [r5, #24]
   da386:	491b      	ldr	r1, [pc, #108]	; (da3f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da388:	4620      	mov	r0, r4
   da38a:	f7ff f9f8 	bl	d977e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   da38e:	792b      	ldrb	r3, [r5, #4]
   da390:	069a      	lsls	r2, r3, #26
   da392:	d511      	bpl.n	da3b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   da394:	06db      	lsls	r3, r3, #27
   da396:	d505      	bpl.n	da3a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   da398:	6823      	ldr	r3, [r4, #0]
   da39a:	4910      	ldr	r1, [pc, #64]	; (da3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   da39c:	68db      	ldr	r3, [r3, #12]
   da39e:	2202      	movs	r2, #2
   da3a0:	4620      	mov	r0, r4
   da3a2:	4798      	blx	r3
            write("details = ", 10);
   da3a4:	6823      	ldr	r3, [r4, #0]
   da3a6:	4914      	ldr	r1, [pc, #80]	; (da3f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da3a8:	68db      	ldr	r3, [r3, #12]
   da3aa:	4620      	mov	r0, r4
   da3ac:	220a      	movs	r2, #10
   da3ae:	4798      	blx	r3
            write(attr.details);
   da3b0:	69e9      	ldr	r1, [r5, #28]
   da3b2:	4620      	mov	r0, r4
   da3b4:	f7ff f9c8 	bl	d9748 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   da3b8:	215d      	movs	r1, #93	; 0x5d
   da3ba:	4620      	mov	r0, r4
   da3bc:	f7ff f9d3 	bl	d9766 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   da3c0:	6823      	ldr	r3, [r4, #0]
   da3c2:	490e      	ldr	r1, [pc, #56]	; (da3fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da3c4:	68db      	ldr	r3, [r3, #12]
   da3c6:	4620      	mov	r0, r4
   da3c8:	2202      	movs	r2, #2
}
   da3ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   da3ce:	4718      	bx	r3
   da3d0:	000dca03 	.word	0x000dca03
   da3d4:	000dca0a 	.word	0x000dca0a
   da3d8:	000dc437 	.word	0x000dc437
   da3dc:	000dca0d 	.word	0x000dca0d
   da3e0:	000dca12 	.word	0x000dca12
   da3e4:	2003e5b8 	.word	0x2003e5b8
   da3e8:	000dca10 	.word	0x000dca10
   da3ec:	000dca15 	.word	0x000dca15
   da3f0:	000dca18 	.word	0x000dca18
   da3f4:	000dca20 	.word	0x000dca20
   da3f8:	000dca23 	.word	0x000dca23
   da3fc:	000dca2e 	.word	0x000dca2e

000da400 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da404:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   da406:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da40a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da40c:	4605      	mov	r5, r0
   da40e:	460f      	mov	r7, r1
   da410:	4690      	mov	r8, r2
   da412:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   da414:	f000 fe70 	bl	db0f8 <_Z16_fetch_usbserialv>
   da418:	4581      	cmp	r9, r0
   da41a:	d105      	bne.n	da428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da41c:	4849      	ldr	r0, [pc, #292]	; (da544 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   da41e:	f000 f8e0 	bl	da5e2 <_ZN5spark12NetworkClass9listeningEv>
   da422:	2800      	cmp	r0, #0
   da424:	f040 808a 	bne.w	da53c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   da428:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   da42a:	4a47      	ldr	r2, [pc, #284]	; (da548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da42c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da42e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   da432:	a801      	add	r0, sp, #4
        strm_(stream) {
   da434:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   da436:	f88d 9008 	strb.w	r9, [sp, #8]
   da43a:	f7ff f878 	bl	d952e <_ZN5spark10JSONWriter11beginObjectEv>
   da43e:	4649      	mov	r1, r9
   da440:	4640      	mov	r0, r8
   da442:	f7fe f927 	bl	d8694 <log_level_name>
    json.name("l", 1).value(s);
   da446:	4941      	ldr	r1, [pc, #260]	; (da54c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da448:	4680      	mov	r8, r0
   da44a:	2201      	movs	r2, #1
   da44c:	a801      	add	r0, sp, #4
   da44e:	f7ff f8f7 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da452:	4641      	mov	r1, r8
   da454:	f7ff f96a 	bl	d972c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   da458:	b13f      	cbz	r7, da46a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da45a:	493d      	ldr	r1, [pc, #244]	; (da550 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da45c:	2201      	movs	r2, #1
   da45e:	a801      	add	r0, sp, #4
   da460:	f7ff f8ee 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da464:	4639      	mov	r1, r7
   da466:	f7ff f961 	bl	d972c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   da46a:	b13e      	cbz	r6, da47c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da46c:	4939      	ldr	r1, [pc, #228]	; (da554 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da46e:	2201      	movs	r2, #1
   da470:	a801      	add	r0, sp, #4
   da472:	f7ff f8e5 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da476:	4631      	mov	r1, r6
   da478:	f7ff f958 	bl	d972c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   da47c:	7923      	ldrb	r3, [r4, #4]
   da47e:	07df      	lsls	r7, r3, #31
   da480:	d50e      	bpl.n	da4a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da482:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   da484:	212f      	movs	r1, #47	; 0x2f
   da486:	4630      	mov	r0, r6
   da488:	f001 fce8 	bl	dbe5c <strrchr>
    if (s1) {
   da48c:	b100      	cbz	r0, da490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da48e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   da490:	4931      	ldr	r1, [pc, #196]	; (da558 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da492:	2201      	movs	r2, #1
   da494:	a801      	add	r0, sp, #4
   da496:	f7ff f8d3 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da49a:	4631      	mov	r1, r6
   da49c:	f7ff f946 	bl	d972c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   da4a0:	7923      	ldrb	r3, [r4, #4]
   da4a2:	079e      	lsls	r6, r3, #30
   da4a4:	d507      	bpl.n	da4b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da4a6:	492d      	ldr	r1, [pc, #180]	; (da55c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da4a8:	2202      	movs	r2, #2
   da4aa:	a801      	add	r0, sp, #4
   da4ac:	f7ff f8c8 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da4b0:	68e1      	ldr	r1, [r4, #12]
   da4b2:	f7ff f849 	bl	d9548 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   da4b6:	7923      	ldrb	r3, [r4, #4]
   da4b8:	0758      	lsls	r0, r3, #29
   da4ba:	d514      	bpl.n	da4e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da4bc:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da4be:	4633      	mov	r3, r6
   da4c0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   da4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   da4c6:	b12a      	cbz	r2, da4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   da4c8:	2a20      	cmp	r2, #32
   da4ca:	d101      	bne.n	da4d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da4cc:	461e      	mov	r6, r3
   da4ce:	e7f7      	b.n	da4c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   da4d0:	2a28      	cmp	r2, #40	; 0x28
   da4d2:	d1f5      	bne.n	da4c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   da4d4:	4922      	ldr	r1, [pc, #136]	; (da560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da4d6:	2202      	movs	r2, #2
   da4d8:	a801      	add	r0, sp, #4
   da4da:	f7ff f8b1 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da4de:	1bba      	subs	r2, r7, r6
   da4e0:	4631      	mov	r1, r6
   da4e2:	f7ff f8bd 	bl	d9660 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   da4e6:	7923      	ldrb	r3, [r4, #4]
   da4e8:	0719      	lsls	r1, r3, #28
   da4ea:	d507      	bpl.n	da4fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   da4ec:	491d      	ldr	r1, [pc, #116]	; (da564 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da4ee:	2201      	movs	r2, #1
   da4f0:	a801      	add	r0, sp, #4
   da4f2:	f7ff f8a5 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da4f6:	6961      	ldr	r1, [r4, #20]
   da4f8:	f7ff f838 	bl	d956c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   da4fc:	7923      	ldrb	r3, [r4, #4]
   da4fe:	06da      	lsls	r2, r3, #27
   da500:	d508      	bpl.n	da514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   da502:	2204      	movs	r2, #4
   da504:	4918      	ldr	r1, [pc, #96]	; (da568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da506:	eb0d 0002 	add.w	r0, sp, r2
   da50a:	f7ff f899 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da50e:	69a1      	ldr	r1, [r4, #24]
   da510:	f7ff f81a 	bl	d9548 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   da514:	7923      	ldrb	r3, [r4, #4]
   da516:	069b      	lsls	r3, r3, #26
   da518:	d507      	bpl.n	da52a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   da51a:	4914      	ldr	r1, [pc, #80]	; (da56c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da51c:	2206      	movs	r2, #6
   da51e:	a801      	add	r0, sp, #4
   da520:	f7ff f88e 	bl	d9640 <_ZN5spark10JSONWriter4nameEPKcj>
   da524:	69e1      	ldr	r1, [r4, #28]
   da526:	f7ff f901 	bl	d972c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   da52a:	a801      	add	r0, sp, #4
   da52c:	f7fe ffe9 	bl	d9502 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da530:	6a28      	ldr	r0, [r5, #32]
   da532:	490f      	ldr	r1, [pc, #60]	; (da570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da534:	6803      	ldr	r3, [r0, #0]
   da536:	2202      	movs	r2, #2
   da538:	68db      	ldr	r3, [r3, #12]
   da53a:	4798      	blx	r3
}
   da53c:	b005      	add	sp, #20
   da53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da542:	bf00      	nop
   da544:	2003e5b8 	.word	0x2003e5b8
   da548:	000dca54 	.word	0x000dca54
   da54c:	000dc9e0 	.word	0x000dc9e0
   da550:	000dca31 	.word	0x000dca31
   da554:	000dca33 	.word	0x000dca33
   da558:	000dca35 	.word	0x000dca35
   da55c:	000dca37 	.word	0x000dca37
   da560:	000dca3a 	.word	0x000dca3a
   da564:	000dc121 	.word	0x000dc121
   da568:	000dca3d 	.word	0x000dca3d
   da56c:	000dca42 	.word	0x000dca42
   da570:	000dca2e 	.word	0x000dca2e

000da574 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da574:	2300      	movs	r3, #0
   da576:	6840      	ldr	r0, [r0, #4]
   da578:	461a      	mov	r2, r3
   da57a:	f7fe b93b 	b.w	d87f4 <network_connect>

000da57e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da57e:	6840      	ldr	r0, [r0, #4]
   da580:	2200      	movs	r2, #0
   da582:	2102      	movs	r1, #2
   da584:	f7fe b946 	b.w	d8814 <network_disconnect>

000da588 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da588:	2200      	movs	r2, #0
   da58a:	6840      	ldr	r0, [r0, #4]
   da58c:	4611      	mov	r1, r2
   da58e:	f7fe b939 	b.w	d8804 <network_connecting>

000da592 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da592:	2200      	movs	r2, #0
   da594:	6840      	ldr	r0, [r0, #4]
   da596:	4611      	mov	r1, r2
   da598:	f7fe b944 	b.w	d8824 <network_ready>

000da59c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da59c:	2300      	movs	r3, #0
   da59e:	6840      	ldr	r0, [r0, #4]
   da5a0:	461a      	mov	r2, r3
   da5a2:	4619      	mov	r1, r3
   da5a4:	f7fe b946 	b.w	d8834 <network_on>

000da5a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da5a8:	2300      	movs	r3, #0
   da5aa:	6840      	ldr	r0, [r0, #4]
   da5ac:	461a      	mov	r2, r3
   da5ae:	4619      	mov	r1, r3
   da5b0:	f7fe b948 	b.w	d8844 <network_off>

000da5b4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   da5b4:	6840      	ldr	r0, [r0, #4]
   da5b6:	2100      	movs	r1, #0
   da5b8:	f7fe b96c 	b.w	d8894 <network_is_on>

000da5bc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   da5bc:	6840      	ldr	r0, [r0, #4]
   da5be:	2100      	movs	r1, #0
   da5c0:	f7fe b970 	b.w	d88a4 <network_is_off>

000da5c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da5c4:	6840      	ldr	r0, [r0, #4]
   da5c6:	2200      	movs	r2, #0
   da5c8:	f081 0101 	eor.w	r1, r1, #1
   da5cc:	f7fe b942 	b.w	d8854 <network_listen>

000da5d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da5d0:	6840      	ldr	r0, [r0, #4]
   da5d2:	2200      	movs	r2, #0
   da5d4:	f7fe b94e 	b.w	d8874 <network_set_listen_timeout>

000da5d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da5d8:	2200      	movs	r2, #0
   da5da:	6840      	ldr	r0, [r0, #4]
   da5dc:	4611      	mov	r1, r2
   da5de:	f7fe b951 	b.w	d8884 <network_get_listen_timeout>

000da5e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da5e2:	2200      	movs	r2, #0
   da5e4:	6840      	ldr	r0, [r0, #4]
   da5e6:	4611      	mov	r1, r2
   da5e8:	f7fe b93c 	b.w	d8864 <network_listening>

000da5ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da5f0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   da5f2:	b095      	sub	sp, #84	; 0x54
   da5f4:	4616      	mov	r6, r2
   da5f6:	460d      	mov	r5, r1
   da5f8:	4607      	mov	r7, r0
    IPAddress addr;
   da5fa:	f7fe fe23 	bl	d9244 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   da5fe:	4621      	mov	r1, r4
   da600:	2218      	movs	r2, #24
   da602:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   da604:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da606:	f001 fb55 	bl	dbcb4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da60a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   da60c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da610:	4621      	mov	r1, r4
   da612:	466b      	mov	r3, sp
   da614:	aa0c      	add	r2, sp, #48	; 0x30
   da616:	4630      	mov	r0, r6
   da618:	f7fd ff44 	bl	d84a4 <netdb_getaddrinfo>
    if (!r) {
   da61c:	4604      	mov	r4, r0
   da61e:	2800      	cmp	r0, #0
   da620:	d146      	bne.n	da6b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da622:	4602      	mov	r2, r0
   da624:	2101      	movs	r1, #1
   da626:	6868      	ldr	r0, [r5, #4]
   da628:	f7fe f8fc 	bl	d8824 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da62c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da62e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da630:	4622      	mov	r2, r4
   da632:	6868      	ldr	r0, [r5, #4]
   da634:	f7fe f8f6 	bl	d8824 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da638:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da63a:	4681      	mov	r9, r0
        bool ok = false;
   da63c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da63e:	2e00      	cmp	r6, #0
   da640:	d036      	beq.n	da6b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   da642:	2900      	cmp	r1, #0
   da644:	d134      	bne.n	da6b0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da646:	6873      	ldr	r3, [r6, #4]
   da648:	2b02      	cmp	r3, #2
   da64a:	d003      	beq.n	da654 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   da64c:	2b0a      	cmp	r3, #10
   da64e:	d00b      	beq.n	da668 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da650:	69f6      	ldr	r6, [r6, #28]
   da652:	e7f4      	b.n	da63e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   da654:	f1b8 0f00 	cmp.w	r8, #0
   da658:	d004      	beq.n	da664 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da65a:	6971      	ldr	r1, [r6, #20]
   da65c:	4638      	mov	r0, r7
   da65e:	3104      	adds	r1, #4
   da660:	f7fe fe1d 	bl	d929e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   da664:	4641      	mov	r1, r8
   da666:	e7f3      	b.n	da650 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   da668:	f1b9 0f00 	cmp.w	r9, #0
   da66c:	d101      	bne.n	da672 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   da66e:	4649      	mov	r1, r9
   da670:	e7ee      	b.n	da650 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da672:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da674:	2210      	movs	r2, #16
   da676:	a801      	add	r0, sp, #4
   da678:	f001 fb1c 	bl	dbcb4 <memset>
                    a.v = 6;
   da67c:	2306      	movs	r3, #6
   da67e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da682:	ad01      	add	r5, sp, #4
   da684:	f104 0308 	add.w	r3, r4, #8
   da688:	3418      	adds	r4, #24
   da68a:	6818      	ldr	r0, [r3, #0]
   da68c:	6859      	ldr	r1, [r3, #4]
   da68e:	462a      	mov	r2, r5
   da690:	c203      	stmia	r2!, {r0, r1}
   da692:	3308      	adds	r3, #8
   da694:	42a3      	cmp	r3, r4
   da696:	4615      	mov	r5, r2
   da698:	d1f7      	bne.n	da68a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   da69a:	a901      	add	r1, sp, #4
   da69c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   da69e:	ad07      	add	r5, sp, #28
   da6a0:	f7fe fdde 	bl	d9260 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da6a6:	1d3c      	adds	r4, r7, #4
   da6a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da6aa:	682b      	ldr	r3, [r5, #0]
   da6ac:	7023      	strb	r3, [r4, #0]
   da6ae:	e7de      	b.n	da66e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da6b0:	9800      	ldr	r0, [sp, #0]
   da6b2:	f7fd feef 	bl	d8494 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da6b6:	4638      	mov	r0, r7
   da6b8:	b015      	add	sp, #84	; 0x54
   da6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da6c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da6c0:	4b02      	ldr	r3, [pc, #8]	; (da6cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da6c2:	4a03      	ldr	r2, [pc, #12]	; (da6d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da6c4:	601a      	str	r2, [r3, #0]
   da6c6:	2200      	movs	r2, #0
   da6c8:	605a      	str	r2, [r3, #4]

} // spark
   da6ca:	4770      	bx	lr
   da6cc:	2003e5b8 	.word	0x2003e5b8
   da6d0:	000dcacc 	.word	0x000dcacc

000da6d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da6d6:	4606      	mov	r6, r0
   da6d8:	460d      	mov	r5, r1
  size_t n = 0;
   da6da:	188f      	adds	r7, r1, r2
   da6dc:	2400      	movs	r4, #0
  while (size--) {
   da6de:	42bd      	cmp	r5, r7
   da6e0:	d00c      	beq.n	da6fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da6e2:	6833      	ldr	r3, [r6, #0]
   da6e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   da6e8:	689b      	ldr	r3, [r3, #8]
   da6ea:	4630      	mov	r0, r6
   da6ec:	4798      	blx	r3
     if (chunk>=0)
   da6ee:	1e03      	subs	r3, r0, #0
   da6f0:	db01      	blt.n	da6f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da6f2:	441c      	add	r4, r3
  while (size--) {
   da6f4:	e7f3      	b.n	da6de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da6f6:	2c00      	cmp	r4, #0
   da6f8:	bf08      	it	eq
   da6fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da6fc:	4620      	mov	r0, r4
   da6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da700 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da700:	b513      	push	{r0, r1, r4, lr}
   da702:	4604      	mov	r4, r0
    }
   da704:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da706:	b159      	cbz	r1, da720 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da708:	9101      	str	r1, [sp, #4]
   da70a:	f001 fb7a 	bl	dbe02 <strlen>
   da70e:	6823      	ldr	r3, [r4, #0]
   da710:	9901      	ldr	r1, [sp, #4]
   da712:	68db      	ldr	r3, [r3, #12]
   da714:	4602      	mov	r2, r0
   da716:	4620      	mov	r0, r4
    }
   da718:	b002      	add	sp, #8
   da71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da71e:	4718      	bx	r3
    }
   da720:	b002      	add	sp, #8
   da722:	bd10      	pop	{r4, pc}

000da724 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   da724:	b508      	push	{r3, lr}
  return write(str);
   da726:	f7ff ffeb 	bl	da700 <_ZN5Print5writeEPKc>
}
   da72a:	bd08      	pop	{r3, pc}

000da72c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   da72c:	6803      	ldr	r3, [r0, #0]
   da72e:	689b      	ldr	r3, [r3, #8]
   da730:	4718      	bx	r3

000da732 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da732:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da734:	210d      	movs	r1, #13
{
   da736:	4605      	mov	r5, r0
  size_t n = print('\r');
   da738:	f7ff fff8 	bl	da72c <_ZN5Print5printEc>
  n += print('\n');
   da73c:	210a      	movs	r1, #10
  size_t n = print('\r');
   da73e:	4604      	mov	r4, r0
  n += print('\n');
   da740:	4628      	mov	r0, r5
   da742:	f7ff fff3 	bl	da72c <_ZN5Print5printEc>
  return n;
}
   da746:	4420      	add	r0, r4
   da748:	bd38      	pop	{r3, r4, r5, pc}

000da74a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da74a:	b530      	push	{r4, r5, lr}
   da74c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da74e:	2300      	movs	r3, #0
   da750:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da754:	2a01      	cmp	r2, #1
   da756:	bf98      	it	ls
   da758:	220a      	movls	r2, #10
   da75a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da75c:	460d      	mov	r5, r1
   da75e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da762:	fb01 5312 	mls	r3, r1, r2, r5
   da766:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da76a:	2b09      	cmp	r3, #9
   da76c:	bf94      	ite	ls
   da76e:	3330      	addls	r3, #48	; 0x30
   da770:	3337      	addhi	r3, #55	; 0x37
   da772:	b2db      	uxtb	r3, r3
  } while(n);
   da774:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da776:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da77a:	d9ef      	bls.n	da75c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da77c:	4621      	mov	r1, r4
   da77e:	f7ff ffbf 	bl	da700 <_ZN5Print5writeEPKc>
}
   da782:	b00b      	add	sp, #44	; 0x2c
   da784:	bd30      	pop	{r4, r5, pc}

000da786 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da78a:	b086      	sub	sp, #24
   da78c:	af00      	add	r7, sp, #0
   da78e:	4605      	mov	r5, r0
   da790:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da792:	1d38      	adds	r0, r7, #4
   da794:	2114      	movs	r1, #20
{
   da796:	4614      	mov	r4, r2
    va_copy(args2, args);
   da798:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da79a:	f7fe f8bb 	bl	d8914 <vsnprintf>

    if (n<bufsize)
   da79e:	2813      	cmp	r0, #19
   da7a0:	d80e      	bhi.n	da7c0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da7a2:	1d39      	adds	r1, r7, #4
   da7a4:	4628      	mov	r0, r5
   da7a6:	f7ff ffab 	bl	da700 <_ZN5Print5writeEPKc>
   da7aa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da7ac:	b11e      	cbz	r6, da7b6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da7ae:	4628      	mov	r0, r5
   da7b0:	f7ff ffbf 	bl	da732 <_ZN5Print7printlnEv>
   da7b4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da7b6:	4620      	mov	r0, r4
   da7b8:	3718      	adds	r7, #24
   da7ba:	46bd      	mov	sp, r7
   da7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da7c0:	f100 0308 	add.w	r3, r0, #8
   da7c4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da7c8:	46e8      	mov	r8, sp
        char bigger[n+1];
   da7ca:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da7ce:	4622      	mov	r2, r4
   da7d0:	1c41      	adds	r1, r0, #1
   da7d2:	683b      	ldr	r3, [r7, #0]
   da7d4:	4668      	mov	r0, sp
   da7d6:	f7fe f89d 	bl	d8914 <vsnprintf>
  return write(str);
   da7da:	4669      	mov	r1, sp
   da7dc:	4628      	mov	r0, r5
   da7de:	f7ff ff8f 	bl	da700 <_ZN5Print5writeEPKc>
   da7e2:	4604      	mov	r4, r0
   da7e4:	46c5      	mov	sp, r8
   da7e6:	e7e1      	b.n	da7ac <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000da7e8 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   da7e8:	b510      	push	{r4, lr}
  if (0 == max) {
   da7ea:	4604      	mov	r4, r0
   da7ec:	b128      	cbz	r0, da7fa <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   da7ee:	f001 fa8d 	bl	dbd0c <rand>
   da7f2:	fb90 f3f4 	sdiv	r3, r0, r4
   da7f6:	fb03 0414 	mls	r4, r3, r4, r0
}
   da7fa:	4620      	mov	r0, r4
   da7fc:	bd10      	pop	{r4, pc}

000da7fe <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   da7fe:	4288      	cmp	r0, r1
{
   da800:	b510      	push	{r4, lr}
   da802:	4604      	mov	r4, r0
  if (min >= max) {
   da804:	da03      	bge.n	da80e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   da806:	1a08      	subs	r0, r1, r0
   da808:	f7ff ffee 	bl	da7e8 <_Z6randomi>
   da80c:	4404      	add	r4, r0
}
   da80e:	4620      	mov	r0, r4
   da810:	bd10      	pop	{r4, pc}
	...

000da814 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da814:	4b01      	ldr	r3, [pc, #4]	; (da81c <_GLOBAL__sub_I_RGB+0x8>)
   da816:	2200      	movs	r2, #0
   da818:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   da81a:	4770      	bx	lr
   da81c:	2003e5c0 	.word	0x2003e5c0

000da820 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   da820:	2100      	movs	r1, #0
   da822:	f7fd be7f 	b.w	d8524 <hal_spi_acquire>

000da826 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   da826:	2100      	movs	r1, #0
   da828:	f7fd be84 	b.w	d8534 <hal_spi_release>

000da82c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   da82c:	b510      	push	{r4, lr}
   da82e:	4604      	mov	r4, r0
   da830:	4608      	mov	r0, r1
{
    _spi = spi;
   da832:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   da834:	f7fd fe56 	bl	d84e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   da838:	2300      	movs	r3, #0
   da83a:	6063      	str	r3, [r4, #4]
}
   da83c:	4620      	mov	r0, r4
   da83e:	bd10      	pop	{r4, pc}

000da840 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   da840:	b510      	push	{r4, lr}
   da842:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   da844:	7800      	ldrb	r0, [r0, #0]
   da846:	f7ff ffeb 	bl	da820 <_ZN8SPIClass4lockEv.isra.0>
   da84a:	b948      	cbnz	r0, da860 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   da84c:	7820      	ldrb	r0, [r4, #0]
   da84e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   da852:	f7fd fe2f 	bl	d84b4 <hal_spi_begin>
        unlock();
   da856:	7820      	ldrb	r0, [r4, #0]
    }
}
   da858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   da85c:	f7ff bfe3 	b.w	da826 <_ZN8SPIClass6unlockEv.isra.0>
}
   da860:	bd10      	pop	{r4, pc}

000da862 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   da862:	b510      	push	{r4, lr}
   da864:	4604      	mov	r4, r0
    if (!lock())
   da866:	7800      	ldrb	r0, [r0, #0]
   da868:	f7ff ffda 	bl	da820 <_ZN8SPIClass4lockEv.isra.0>
   da86c:	b938      	cbnz	r0, da87e <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   da86e:	7820      	ldrb	r0, [r4, #0]
   da870:	f7fd fe28 	bl	d84c4 <hal_spi_end>
        unlock();
   da874:	7820      	ldrb	r0, [r4, #0]
    }
}
   da876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   da87a:	f7ff bfd4 	b.w	da826 <_ZN8SPIClass6unlockEv.isra.0>
}
   da87e:	bd10      	pop	{r4, pc}

000da880 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   da880:	7800      	ldrb	r0, [r0, #0]
   da882:	f7ff bfd0 	b.w	da826 <_ZN8SPIClass6unlockEv.isra.0>
	...

000da888 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   da888:	0840      	lsrs	r0, r0, #1
{
   da88a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   da88c:	6018      	str	r0, [r3, #0]
   da88e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   da890:	6818      	ldr	r0, [r3, #0]
   da892:	4288      	cmp	r0, r1
   da894:	b2e5      	uxtb	r5, r4
   da896:	d906      	bls.n	da8a6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   da898:	3401      	adds	r4, #1
   da89a:	2c08      	cmp	r4, #8
   da89c:	d002      	beq.n	da8a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   da89e:	0840      	lsrs	r0, r0, #1
   da8a0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   da8a2:	e7f5      	b.n	da890 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   da8a4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   da8a6:	4b02      	ldr	r3, [pc, #8]	; (da8b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   da8a8:	5d5b      	ldrb	r3, [r3, r5]
   da8aa:	7013      	strb	r3, [r2, #0]
}
   da8ac:	bd30      	pop	{r4, r5, pc}
   da8ae:	bf00      	nop
   da8b0:	000dcb00 	.word	0x000dcb00

000da8b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   da8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da8b8:	4606      	mov	r6, r0
   da8ba:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   da8bc:	7800      	ldrb	r0, [r0, #0]
{
   da8be:	460c      	mov	r4, r1
    CHECK(lock());
   da8c0:	f7ff ffae 	bl	da820 <_ZN8SPIClass4lockEv.isra.0>
   da8c4:	2800      	cmp	r0, #0
   da8c6:	db1b      	blt.n	da900 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   da8c8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   da8ca:	2214      	movs	r2, #20
   da8cc:	2100      	movs	r1, #0
   da8ce:	a809      	add	r0, sp, #36	; 0x24
   da8d0:	f001 f9f0 	bl	dbcb4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   da8d4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   da8d6:	2200      	movs	r2, #0
   da8d8:	a909      	add	r1, sp, #36	; 0x24
   da8da:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   da8dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   da8e0:	f7fd fe10 	bl	d8504 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   da8e4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   da8e8:	b113      	cbz	r3, da8f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   da8ea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   da8ee:	b155      	cbz	r5, da906 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   da8f0:	2700      	movs	r7, #0
   da8f2:	46b9      	mov	r9, r7
   da8f4:	46b8      	mov	r8, r7
   da8f6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   da8f8:	7923      	ldrb	r3, [r4, #4]
   da8fa:	b15d      	cbz	r5, da914 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   da8fc:	b1c3      	cbz	r3, da930 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   da8fe:	2000      	movs	r0, #0
}
   da900:	b00f      	add	sp, #60	; 0x3c
   da902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   da906:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   da90a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   da90e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   da912:	e7f1      	b.n	da8f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   da914:	2b00      	cmp	r3, #0
   da916:	d135      	bne.n	da984 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   da918:	68a3      	ldr	r3, [r4, #8]
   da91a:	4543      	cmp	r3, r8
   da91c:	d108      	bne.n	da930 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   da91e:	f88d 9020 	strb.w	r9, [sp, #32]
   da922:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   da926:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   da92a:	89a3      	ldrh	r3, [r4, #12]
   da92c:	429a      	cmp	r2, r3
   da92e:	d0e6      	beq.n	da8fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   da930:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   da932:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   da934:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   da938:	980a      	ldr	r0, [sp, #40]	; 0x28
   da93a:	ab04      	add	r3, sp, #16
   da93c:	f10d 020f 	add.w	r2, sp, #15
   da940:	f7ff ffa2 	bl	da888 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   da944:	7921      	ldrb	r1, [r4, #4]
   da946:	b985      	cbnz	r5, da96a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   da948:	b989      	cbnz	r1, da96e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   da94a:	68a3      	ldr	r3, [r4, #8]
   da94c:	4543      	cmp	r3, r8
   da94e:	d30e      	bcc.n	da96e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   da950:	f88d 9020 	strb.w	r9, [sp, #32]
   da954:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   da958:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   da95c:	89a3      	ldrh	r3, [r4, #12]
   da95e:	429a      	cmp	r2, r3
   da960:	d105      	bne.n	da96e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   da962:	9b04      	ldr	r3, [sp, #16]
   da964:	4543      	cmp	r3, r8
   da966:	d102      	bne.n	da96e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   da968:	e7c9      	b.n	da8fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   da96a:	2900      	cmp	r1, #0
   da96c:	d1f9      	bne.n	da962 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   da96e:	2300      	movs	r3, #0
   da970:	9301      	str	r3, [sp, #4]
   da972:	7b63      	ldrb	r3, [r4, #13]
   da974:	9300      	str	r3, [sp, #0]
   da976:	f89d 200f 	ldrb.w	r2, [sp, #15]
   da97a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   da97c:	7830      	ldrb	r0, [r6, #0]
   da97e:	f7fd fdc9 	bl	d8514 <hal_spi_set_settings>
   da982:	e7bc      	b.n	da8fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   da984:	e9cd 5500 	strd	r5, r5, [sp]
   da988:	462b      	mov	r3, r5
   da98a:	462a      	mov	r2, r5
   da98c:	2101      	movs	r1, #1
   da98e:	e7f5      	b.n	da97c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000da990 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   da990:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   da992:	7800      	ldrb	r0, [r0, #0]
   da994:	f7fd fd9e 	bl	d84d4 <hal_spi_transfer>
}
   da998:	b2c0      	uxtb	r0, r0
   da99a:	bd08      	pop	{r3, pc}

000da99c <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   da99c:	4770      	bx	lr

000da99e <_ZN8SPIClass15detachInterruptEv>:
   da99e:	4770      	bx	lr

000da9a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da9a0:	b510      	push	{r4, lr}
   da9a2:	4604      	mov	r4, r0
{
	free(buffer);
   da9a4:	6800      	ldr	r0, [r0, #0]
   da9a6:	f7fd ff8d 	bl	d88c4 <free>
}
   da9aa:	4620      	mov	r0, r4
   da9ac:	bd10      	pop	{r4, pc}

000da9ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da9ae:	b510      	push	{r4, lr}
   da9b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da9b2:	6800      	ldr	r0, [r0, #0]
   da9b4:	b108      	cbz	r0, da9ba <_ZN6String10invalidateEv+0xc>
   da9b6:	f7fd ff85 	bl	d88c4 <free>
	buffer = NULL;
   da9ba:	2300      	movs	r3, #0
	capacity = len = 0;
   da9bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da9c0:	6023      	str	r3, [r4, #0]
}
   da9c2:	bd10      	pop	{r4, pc}

000da9c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da9c4:	b538      	push	{r3, r4, r5, lr}
   da9c6:	4604      	mov	r4, r0
   da9c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da9ca:	6800      	ldr	r0, [r0, #0]
   da9cc:	3101      	adds	r1, #1
   da9ce:	f7fd ff81 	bl	d88d4 <realloc>
	if (newbuffer) {
   da9d2:	b110      	cbz	r0, da9da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da9d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da9d8:	2001      	movs	r0, #1
	}
	return 0;
}
   da9da:	bd38      	pop	{r3, r4, r5, pc}

000da9dc <_ZN6String7reserveEj>:
{
   da9dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da9de:	6803      	ldr	r3, [r0, #0]
{
   da9e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da9e2:	b123      	cbz	r3, da9ee <_ZN6String7reserveEj+0x12>
   da9e4:	6843      	ldr	r3, [r0, #4]
   da9e6:	428b      	cmp	r3, r1
   da9e8:	d301      	bcc.n	da9ee <_ZN6String7reserveEj+0x12>
   da9ea:	2001      	movs	r0, #1
}
   da9ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da9ee:	4620      	mov	r0, r4
   da9f0:	f7ff ffe8 	bl	da9c4 <_ZN6String12changeBufferEj>
   da9f4:	2800      	cmp	r0, #0
   da9f6:	d0f9      	beq.n	da9ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da9f8:	68a3      	ldr	r3, [r4, #8]
   da9fa:	2b00      	cmp	r3, #0
   da9fc:	d1f5      	bne.n	da9ea <_ZN6String7reserveEj+0xe>
   da9fe:	6822      	ldr	r2, [r4, #0]
   daa00:	7013      	strb	r3, [r2, #0]
   daa02:	e7f2      	b.n	da9ea <_ZN6String7reserveEj+0xe>

000daa04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   daa04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   daa06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   daa08:	4611      	mov	r1, r2
   daa0a:	9201      	str	r2, [sp, #4]
{
   daa0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   daa0e:	f7ff ffe5 	bl	da9dc <_ZN6String7reserveEj>
   daa12:	9a01      	ldr	r2, [sp, #4]
   daa14:	b928      	cbnz	r0, daa22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   daa16:	4620      	mov	r0, r4
   daa18:	f7ff ffc9 	bl	da9ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   daa1c:	4620      	mov	r0, r4
   daa1e:	b003      	add	sp, #12
   daa20:	bd30      	pop	{r4, r5, pc}
	len = length;
   daa22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   daa24:	4629      	mov	r1, r5
   daa26:	6820      	ldr	r0, [r4, #0]
   daa28:	f001 f91c 	bl	dbc64 <memcpy>
	buffer[len] = 0;
   daa2c:	6822      	ldr	r2, [r4, #0]
   daa2e:	68a3      	ldr	r3, [r4, #8]
   daa30:	2100      	movs	r1, #0
   daa32:	54d1      	strb	r1, [r2, r3]
	return *this;
   daa34:	e7f2      	b.n	daa1c <_ZN6String4copyEPKcj+0x18>

000daa36 <_ZN6StringC1EPKc>:
	buffer = NULL;
   daa36:	2300      	movs	r3, #0
String::String(const char *cstr)
   daa38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   daa3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   daa3e:	4604      	mov	r4, r0
	len = 0;
   daa40:	6083      	str	r3, [r0, #8]
	flags = 0;
   daa42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   daa44:	b141      	cbz	r1, daa58 <_ZN6StringC1EPKc+0x22>
   daa46:	4608      	mov	r0, r1
   daa48:	9101      	str	r1, [sp, #4]
   daa4a:	f001 f9da 	bl	dbe02 <strlen>
   daa4e:	9901      	ldr	r1, [sp, #4]
   daa50:	4602      	mov	r2, r0
   daa52:	4620      	mov	r0, r4
   daa54:	f7ff ffd6 	bl	daa04 <_ZN6String4copyEPKcj>
}
   daa58:	4620      	mov	r0, r4
   daa5a:	b002      	add	sp, #8
   daa5c:	bd10      	pop	{r4, pc}

000daa5e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   daa5e:	b538      	push	{r3, r4, r5, lr}
   daa60:	4605      	mov	r5, r0
	if (buffer) {
   daa62:	6800      	ldr	r0, [r0, #0]
{
   daa64:	460c      	mov	r4, r1
	if (buffer) {
   daa66:	b168      	cbz	r0, daa84 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   daa68:	686a      	ldr	r2, [r5, #4]
   daa6a:	688b      	ldr	r3, [r1, #8]
   daa6c:	429a      	cmp	r2, r3
   daa6e:	d307      	bcc.n	daa80 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   daa70:	6809      	ldr	r1, [r1, #0]
   daa72:	f001 f9a0 	bl	dbdb6 <strcpy>
			len = rhs.len;
   daa76:	68a3      	ldr	r3, [r4, #8]
   daa78:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   daa7a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   daa7c:	60a3      	str	r3, [r4, #8]
}
   daa7e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   daa80:	f7fd ff20 	bl	d88c4 <free>
	buffer = rhs.buffer;
   daa84:	6823      	ldr	r3, [r4, #0]
   daa86:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   daa88:	6863      	ldr	r3, [r4, #4]
   daa8a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   daa8c:	68a3      	ldr	r3, [r4, #8]
   daa8e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   daa90:	2300      	movs	r3, #0
	rhs.capacity = 0;
   daa92:	e9c4 3300 	strd	r3, r3, [r4]
   daa96:	e7f1      	b.n	daa7c <_ZN6String4moveERS_+0x1e>

000daa98 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   daa98:	b510      	push	{r4, lr}
	buffer = NULL;
   daa9a:	2300      	movs	r3, #0
	capacity = 0;
   daa9c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   daaa0:	4604      	mov	r4, r0
	len = 0;
   daaa2:	6083      	str	r3, [r0, #8]
	flags = 0;
   daaa4:	7303      	strb	r3, [r0, #12]
	move(rval);
   daaa6:	f7ff ffda 	bl	daa5e <_ZN6String4moveERS_>
}
   daaaa:	4620      	mov	r0, r4
   daaac:	bd10      	pop	{r4, pc}

000daaae <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   daaae:	4288      	cmp	r0, r1
{
   daab0:	b510      	push	{r4, lr}
   daab2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   daab4:	d005      	beq.n	daac2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   daab6:	680b      	ldr	r3, [r1, #0]
   daab8:	b12b      	cbz	r3, daac6 <_ZN6StringaSERKS_+0x18>
   daaba:	688a      	ldr	r2, [r1, #8]
   daabc:	4619      	mov	r1, r3
   daabe:	f7ff ffa1 	bl	daa04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   daac2:	4620      	mov	r0, r4
   daac4:	bd10      	pop	{r4, pc}
	else invalidate();
   daac6:	f7ff ff72 	bl	da9ae <_ZN6String10invalidateEv>
   daaca:	e7fa      	b.n	daac2 <_ZN6StringaSERKS_+0x14>

000daacc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   daacc:	b510      	push	{r4, lr}
	buffer = NULL;
   daace:	2300      	movs	r3, #0
String::String(const String &value)
   daad0:	4604      	mov	r4, r0
	capacity = 0;
   daad2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   daad6:	6083      	str	r3, [r0, #8]
	flags = 0;
   daad8:	7303      	strb	r3, [r0, #12]
	*this = value;
   daada:	f7ff ffe8 	bl	daaae <_ZN6StringaSERKS_>
}
   daade:	4620      	mov	r0, r4
   daae0:	bd10      	pop	{r4, pc}

000daae2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   daae2:	b513      	push	{r0, r1, r4, lr}
   daae4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   daae6:	b159      	cbz	r1, dab00 <_ZN6StringaSEPKc+0x1e>
   daae8:	4608      	mov	r0, r1
   daaea:	9101      	str	r1, [sp, #4]
   daaec:	f001 f989 	bl	dbe02 <strlen>
   daaf0:	9901      	ldr	r1, [sp, #4]
   daaf2:	4602      	mov	r2, r0
   daaf4:	4620      	mov	r0, r4
   daaf6:	f7ff ff85 	bl	daa04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   daafa:	4620      	mov	r0, r4
   daafc:	b002      	add	sp, #8
   daafe:	bd10      	pop	{r4, pc}
	else invalidate();
   dab00:	f7ff ff55 	bl	da9ae <_ZN6String10invalidateEv>
   dab04:	e7f9      	b.n	daafa <_ZN6StringaSEPKc+0x18>
	...

000dab08 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dab08:	b40e      	push	{r1, r2, r3}
   dab0a:	b570      	push	{r4, r5, r6, lr}
   dab0c:	b087      	sub	sp, #28
   dab0e:	ad0b      	add	r5, sp, #44	; 0x2c
   dab10:	4604      	mov	r4, r0
   dab12:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dab16:	9201      	str	r2, [sp, #4]
   dab18:	462b      	mov	r3, r5
   dab1a:	2105      	movs	r1, #5
   dab1c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dab1e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dab20:	f7fd fef8 	bl	d8914 <vsnprintf>
    va_end(marker);

    String result;
   dab24:	490b      	ldr	r1, [pc, #44]	; (dab54 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dab26:	4606      	mov	r6, r0
    String result;
   dab28:	4620      	mov	r0, r4
   dab2a:	f7ff ff84 	bl	daa36 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dab2e:	4631      	mov	r1, r6
   dab30:	4620      	mov	r0, r4
   dab32:	f7ff ff53 	bl	da9dc <_ZN6String7reserveEj>
    if (result.buffer) {
   dab36:	6820      	ldr	r0, [r4, #0]
   dab38:	b130      	cbz	r0, dab48 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dab3a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dab3c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dab3e:	462b      	mov	r3, r5
   dab40:	1c71      	adds	r1, r6, #1
   dab42:	f7fd fee7 	bl	d8914 <vsnprintf>
        va_end(marker);
        result.len = n;
   dab46:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dab48:	4620      	mov	r0, r4
   dab4a:	b007      	add	sp, #28
   dab4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dab50:	b003      	add	sp, #12
   dab52:	4770      	bx	lr
   dab54:	000dca30 	.word	0x000dca30

000dab58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dab58:	b510      	push	{r4, lr}
   dab5a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dab5c:	6800      	ldr	r0, [r0, #0]
   dab5e:	b118      	cbz	r0, dab68 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dab60:	f7fd feb0 	bl	d88c4 <free>
            wakeupSource_ = nullptr;
   dab64:	2300      	movs	r3, #0
   dab66:	6023      	str	r3, [r4, #0]
        }
    }
   dab68:	bd10      	pop	{r4, pc}

000dab6a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dab6a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dab6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dab70:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dab72:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dab74:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dab76:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dab7a:	f8c0 2006 	str.w	r2, [r0, #6]
   dab7e:	889b      	ldrh	r3, [r3, #4]
   dab80:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dab82:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dab84:	f7ff ffe8 	bl	dab58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dab88:	682b      	ldr	r3, [r5, #0]
   dab8a:	b113      	cbz	r3, dab92 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dab8c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dab8e:	2300      	movs	r3, #0
   dab90:	602b      	str	r3, [r5, #0]
    }
   dab92:	4620      	mov	r0, r4
   dab94:	bd38      	pop	{r3, r4, r5, pc}
	...

000dab98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dab98:	b538      	push	{r3, r4, r5, lr}
   dab9a:	460c      	mov	r4, r1
   dab9c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dab9e:	f7ff ffdb 	bl	dab58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   daba2:	b144      	cbz	r4, dabb6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   daba4:	8820      	ldrh	r0, [r4, #0]
   daba6:	f7fd fe85 	bl	d88b4 <malloc>
   dabaa:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dabac:	b128      	cbz	r0, dabba <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dabae:	8822      	ldrh	r2, [r4, #0]
   dabb0:	4621      	mov	r1, r4
   dabb2:	f001 f857 	bl	dbc64 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dabb6:	2000      	movs	r0, #0
    }
   dabb8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dabba:	4801      	ldr	r0, [pc, #4]	; (dabc0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dabbc:	e7fc      	b.n	dabb8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dabbe:	bf00      	nop
   dabc0:	fffffefc 	.word	0xfffffefc

000dabc4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dabc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dabc6:	4d2d      	ldr	r5, [pc, #180]	; (dac7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dabc8:	7d0b      	ldrb	r3, [r1, #20]
   dabca:	4604      	mov	r4, r0
   dabcc:	b08b      	sub	sp, #44	; 0x2c
   dabce:	4608      	mov	r0, r1
   dabd0:	1daf      	adds	r7, r5, #6
   dabd2:	2b00      	cmp	r3, #0
   dabd4:	d038      	beq.n	dac48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dabd6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dabd8:	791b      	ldrb	r3, [r3, #4]
   dabda:	2b00      	cmp	r3, #0
   dabdc:	d034      	beq.n	dac48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dabde:	2200      	movs	r2, #0
    SleepResult() {}
   dabe0:	4b27      	ldr	r3, [pc, #156]	; (dac80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dabe2:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dabe4:	a902      	add	r1, sp, #8
   dabe6:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dabe8:	9202      	str	r2, [sp, #8]
   dabea:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dabee:	f88d 200e 	strb.w	r2, [sp, #14]
   dabf2:	f7fd fdc5 	bl	d8780 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dabf6:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dabfa:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dabfe:	b200      	sxth	r0, r0
   dac00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dac04:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dac08:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dac0a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dac0c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dac0e:	4628      	mov	r0, r5
   dac10:	f7ff ffc2 	bl	dab98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dac14:	a802      	add	r0, sp, #8
   dac16:	f7ff ff9f 	bl	dab58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dac1a:	2300      	movs	r3, #0
   dac1c:	6023      	str	r3, [r4, #0]
   dac1e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dac20:	71a3      	strb	r3, [r4, #6]
   dac22:	8123      	strh	r3, [r4, #8]
   dac24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dac28:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dac2a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dac2e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dac30:	683b      	ldr	r3, [r7, #0]
   dac32:	f8c4 3006 	str.w	r3, [r4, #6]
   dac36:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dac38:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dac3a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dac3c:	4620      	mov	r0, r4
   dac3e:	f7ff ffab 	bl	dab98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dac42:	4620      	mov	r0, r4
   dac44:	b00b      	add	sp, #44	; 0x2c
   dac46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dac48:	2600      	movs	r6, #0
   dac4a:	2320      	movs	r3, #32
   dac4c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dac50:	4b0c      	ldr	r3, [pc, #48]	; (dac84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dac52:	9300      	str	r3, [sp, #0]
   dac54:	490c      	ldr	r1, [pc, #48]	; (dac88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dac56:	4633      	mov	r3, r6
   dac58:	aa02      	add	r2, sp, #8
   dac5a:	2032      	movs	r0, #50	; 0x32
   dac5c:	f7fd fd0a 	bl	d8674 <log_message>
    SleepResult() {}
   dac60:	4b07      	ldr	r3, [pc, #28]	; (dac80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dac62:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dac64:	a902      	add	r1, sp, #8
        error_ = error;
   dac66:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dac6a:	4804      	ldr	r0, [pc, #16]	; (dac7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dac6c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dac6e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dac72:	f8ad 300c 	strh.w	r3, [sp, #12]
   dac76:	f7ff ff78 	bl	dab6a <_ZN17SystemSleepResultaSEOS_>
   dac7a:	e7cb      	b.n	dac14 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dac7c:	2003e5d0 	.word	0x2003e5d0
   dac80:	ffff0000 	.word	0xffff0000
   dac84:	000dcb0f 	.word	0x000dcb0f
   dac88:	000dcb08 	.word	0x000dcb08

000dac8c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dac8c:	4b05      	ldr	r3, [pc, #20]	; (daca4 <_GLOBAL__sub_I_System+0x18>)
   dac8e:	2202      	movs	r2, #2
   dac90:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dac92:	4b05      	ldr	r3, [pc, #20]	; (daca8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dac94:	4a05      	ldr	r2, [pc, #20]	; (dacac <_GLOBAL__sub_I_System+0x20>)
   dac96:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dac98:	2000      	movs	r0, #0
   dac9a:	6018      	str	r0, [r3, #0]
   dac9c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dac9e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   daca0:	f7fd bd1a 	b.w	d86d8 <set_system_mode>
   daca4:	2003e5dc 	.word	0x2003e5dc
   daca8:	2003e5d0 	.word	0x2003e5d0
   dacac:	ffff0000 	.word	0xffff0000

000dacb0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dacb0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dacb2:	2000      	movs	r0, #0
   dacb4:	f7fd fd86 	bl	d87c4 <spark_sync_time_pending>
   dacb8:	b128      	cbz	r0, dacc6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dacba:	f7fd fd73 	bl	d87a4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dacbe:	f080 0001 	eor.w	r0, r0, #1
   dacc2:	b2c0      	uxtb	r0, r0
    }
   dacc4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dacc6:	2001      	movs	r0, #1
   dacc8:	e7fc      	b.n	dacc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000dacca <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dacca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   daccc:	4602      	mov	r2, r0
   dacce:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dacd0:	4668      	mov	r0, sp
    struct timeval tv = {
   dacd2:	2100      	movs	r1, #0
    };
   dacd4:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dacd8:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dacdc:	f7fd fb32 	bl	d8344 <hal_rtc_set_time>
   dace0:	4602      	mov	r2, r0
   dace2:	b910      	cbnz	r0, dacea <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dace4:	4601      	mov	r1, r0
   dace6:	f7fd fd2f 	bl	d8748 <system_notify_time_changed>
    }
}
   dacea:	b005      	add	sp, #20
   dacec:	f85d fb04 	ldr.w	pc, [sp], #4

000dacf0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dacf0:	b530      	push	{r4, r5, lr}
   dacf2:	4604      	mov	r4, r0
    t += time_zone_cache;
   dacf4:	4818      	ldr	r0, [pc, #96]	; (dad58 <_ZN9TimeClass7timeStrEx+0x68>)
   dacf6:	e9d0 1000 	ldrd	r1, r0, [r0]
   dacfa:	1852      	adds	r2, r2, r1
   dacfc:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dad00:	4816      	ldr	r0, [pc, #88]	; (dad5c <_ZN9TimeClass7timeStrEx+0x6c>)
   dad02:	e9d0 1000 	ldrd	r1, r0, [r0]
   dad06:	1852      	adds	r2, r2, r1
{
   dad08:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dad0a:	eb40 0303 	adc.w	r3, r0, r3
   dad0e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dad12:	2224      	movs	r2, #36	; 0x24
   dad14:	eb0d 0002 	add.w	r0, sp, r2
   dad18:	2100      	movs	r1, #0
   dad1a:	f000 ffcb 	bl	dbcb4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dad1e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dad20:	a909      	add	r1, sp, #36	; 0x24
   dad22:	4668      	mov	r0, sp
   dad24:	f7fd fe1e 	bl	d8964 <localtime_r>
    char ascstr[26] = {};
   dad28:	2216      	movs	r2, #22
   dad2a:	4629      	mov	r1, r5
   dad2c:	a803      	add	r0, sp, #12
   dad2e:	9502      	str	r5, [sp, #8]
   dad30:	f000 ffc0 	bl	dbcb4 <memset>
    asctime_r(&calendar_time, ascstr);
   dad34:	a902      	add	r1, sp, #8
   dad36:	a809      	add	r0, sp, #36	; 0x24
   dad38:	f000 ff56 	bl	dbbe8 <asctime_r>
    int len = strlen(ascstr);
   dad3c:	a802      	add	r0, sp, #8
   dad3e:	f001 f860 	bl	dbe02 <strlen>
    ascstr[len-1] = 0; // remove final newline
   dad42:	ab12      	add	r3, sp, #72	; 0x48
   dad44:	4418      	add	r0, r3
    return String(ascstr);
   dad46:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dad48:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dad4c:	4620      	mov	r0, r4
   dad4e:	f7ff fe72 	bl	daa36 <_ZN6StringC1EPKc>
}
   dad52:	4620      	mov	r0, r4
   dad54:	b013      	add	sp, #76	; 0x4c
   dad56:	bd30      	pop	{r4, r5, pc}
   dad58:	2003e5f0 	.word	0x2003e5f0
   dad5c:	2003e5e8 	.word	0x2003e5e8

000dad60 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad64:	b0a5      	sub	sp, #148	; 0x94
   dad66:	4607      	mov	r7, r0
   dad68:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad6a:	a814      	add	r0, sp, #80	; 0x50
{
   dad6c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad6e:	223f      	movs	r2, #63	; 0x3f
{
   dad70:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad72:	f001 f860 	bl	dbe36 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dad76:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dad78:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dad7a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dad7e:	f001 f840 	bl	dbe02 <strlen>
   dad82:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dad84:	bb5d      	cbnz	r5, dadde <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dad86:	492a      	ldr	r1, [pc, #168]	; (dae30 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dad88:	a803      	add	r0, sp, #12
   dad8a:	f001 f814 	bl	dbdb6 <strcpy>
   dad8e:	ae14      	add	r6, sp, #80	; 0x50
{
   dad90:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dad92:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dad96:	45ab      	cmp	fp, r5
   dad98:	d936      	bls.n	dae08 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dad9a:	46b1      	mov	r9, r6
   dad9c:	f105 0a01 	add.w	sl, r5, #1
   dada0:	f819 3b01 	ldrb.w	r3, [r9], #1
   dada4:	2b25      	cmp	r3, #37	; 0x25
   dada6:	d117      	bne.n	dadd8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dada8:	7873      	ldrb	r3, [r6, #1]
   dadaa:	2b7a      	cmp	r3, #122	; 0x7a
   dadac:	d114      	bne.n	dadd8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dadae:	a803      	add	r0, sp, #12
   dadb0:	f001 f827 	bl	dbe02 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dadb4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dadb6:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dadb8:	1828      	adds	r0, r5, r0
   dadba:	4418      	add	r0, r3
   dadbc:	ebab 0205 	sub.w	r2, fp, r5
   dadc0:	1cb1      	adds	r1, r6, #2
   dadc2:	f000 ff4f 	bl	dbc64 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dadc6:	4622      	mov	r2, r4
   dadc8:	a903      	add	r1, sp, #12
   dadca:	4630      	mov	r0, r6
   dadcc:	f000 ff4a 	bl	dbc64 <memcpy>
            len = strlen(format_str);
   dadd0:	a814      	add	r0, sp, #80	; 0x50
   dadd2:	f001 f816 	bl	dbe02 <strlen>
   dadd6:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dadd8:	464e      	mov	r6, r9
   dadda:	4655      	mov	r5, sl
   daddc:	e7d9      	b.n	dad92 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dadde:	213c      	movs	r1, #60	; 0x3c
   dade0:	fb95 f3f1 	sdiv	r3, r5, r1
   dade4:	2b00      	cmp	r3, #0
   dade6:	bfb8      	it	lt
   dade8:	425b      	neglt	r3, r3
   dadea:	fbb3 f2f1 	udiv	r2, r3, r1
   dadee:	fb01 3312 	mls	r3, r1, r2, r3
   dadf2:	9300      	str	r3, [sp, #0]
   dadf4:	4a0f      	ldr	r2, [pc, #60]	; (dae34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dadf6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dadfa:	2110      	movs	r1, #16
   dadfc:	a803      	add	r0, sp, #12
   dadfe:	fb95 f3f3 	sdiv	r3, r5, r3
   dae02:	f7fd fd7f 	bl	d8904 <snprintf>
   dae06:	e7c2      	b.n	dad8e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dae08:	2100      	movs	r1, #0
   dae0a:	222e      	movs	r2, #46	; 0x2e
   dae0c:	a808      	add	r0, sp, #32
   dae0e:	9107      	str	r1, [sp, #28]
   dae10:	f000 ff50 	bl	dbcb4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dae14:	4643      	mov	r3, r8
   dae16:	aa14      	add	r2, sp, #80	; 0x50
   dae18:	2132      	movs	r1, #50	; 0x32
   dae1a:	a807      	add	r0, sp, #28
   dae1c:	f7fd fd9a 	bl	d8954 <strftime>
    return String(buf);
   dae20:	a907      	add	r1, sp, #28
   dae22:	4638      	mov	r0, r7
   dae24:	f7ff fe07 	bl	daa36 <_ZN6StringC1EPKc>
}
   dae28:	4638      	mov	r0, r7
   dae2a:	b025      	add	sp, #148	; 0x94
   dae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae30:	000dc5c3 	.word	0x000dc5c3
   dae34:	000dc5c5 	.word	0x000dc5c5

000dae38 <_ZN9TimeClass6formatExPKc>:
{
   dae38:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae3a:	b08d      	sub	sp, #52	; 0x34
   dae3c:	e9cd 2300 	strd	r2, r3, [sp]
   dae40:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dae42:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dae44:	b915      	cbnz	r5, dae4c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dae46:	4b19      	ldr	r3, [pc, #100]	; (daeac <_ZN9TimeClass6formatExPKc+0x74>)
   dae48:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dae4a:	b12d      	cbz	r5, dae58 <_ZN9TimeClass6formatExPKc+0x20>
   dae4c:	4b18      	ldr	r3, [pc, #96]	; (daeb0 <_ZN9TimeClass6formatExPKc+0x78>)
   dae4e:	4628      	mov	r0, r5
   dae50:	6819      	ldr	r1, [r3, #0]
   dae52:	f000 ffa6 	bl	dbda2 <strcmp>
   dae56:	b938      	cbnz	r0, dae68 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dae58:	e9dd 2300 	ldrd	r2, r3, [sp]
   dae5c:	4620      	mov	r0, r4
   dae5e:	f7ff ff47 	bl	dacf0 <_ZN9TimeClass7timeStrEx>
}
   dae62:	4620      	mov	r0, r4
   dae64:	b00d      	add	sp, #52	; 0x34
   dae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dae68:	4e12      	ldr	r6, [pc, #72]	; (daeb4 <_ZN9TimeClass6formatExPKc+0x7c>)
   dae6a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dae6c:	4f12      	ldr	r7, [pc, #72]	; (daeb8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dae6e:	e9d6 3200 	ldrd	r3, r2, [r6]
   dae72:	185b      	adds	r3, r3, r1
   dae74:	9901      	ldr	r1, [sp, #4]
   dae76:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dae7a:	e9d7 0100 	ldrd	r0, r1, [r7]
   dae7e:	181b      	adds	r3, r3, r0
   dae80:	eb41 0202 	adc.w	r2, r1, r2
   dae84:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dae88:	2100      	movs	r1, #0
   dae8a:	2224      	movs	r2, #36	; 0x24
   dae8c:	a803      	add	r0, sp, #12
   dae8e:	f000 ff11 	bl	dbcb4 <memset>
    localtime_r(&t, &calendar_time);
   dae92:	a903      	add	r1, sp, #12
   dae94:	4668      	mov	r0, sp
   dae96:	f7fd fd65 	bl	d8964 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dae9a:	6832      	ldr	r2, [r6, #0]
   dae9c:	683b      	ldr	r3, [r7, #0]
   dae9e:	a903      	add	r1, sp, #12
   daea0:	4413      	add	r3, r2
   daea2:	4620      	mov	r0, r4
   daea4:	462a      	mov	r2, r5
   daea6:	f7ff ff5b 	bl	dad60 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   daeaa:	e7da      	b.n	dae62 <_ZN9TimeClass6formatExPKc+0x2a>
   daeac:	2003e5e4 	.word	0x2003e5e4
   daeb0:	2003dd3c 	.word	0x2003dd3c
   daeb4:	2003e5f0 	.word	0x2003e5f0
   daeb8:	2003e5e8 	.word	0x2003e5e8

000daebc <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   daebc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   daebe:	2000      	movs	r0, #0
   daec0:	f7fd fa30 	bl	d8324 <hal_rtc_time_is_valid>
    if (rtcstate)
   daec4:	4604      	mov	r4, r0
   daec6:	b9a0      	cbnz	r0, daef2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   daec8:	f7fd fbfe 	bl	d86c8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   daecc:	2801      	cmp	r0, #1
   daece:	d110      	bne.n	daef2 <_ZN9TimeClass7isValidEv+0x36>
   daed0:	4620      	mov	r0, r4
   daed2:	f7fd fc31 	bl	d8738 <system_thread_get_state>
   daed6:	b960      	cbnz	r0, daef2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   daed8:	f7ff feea 	bl	dacb0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   daedc:	b910      	cbnz	r0, daee4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   daede:	f7fd fc59 	bl	d8794 <spark_process>
        while (_while() && !_condition()) {
   daee2:	e7f9      	b.n	daed8 <_ZN9TimeClass7isValidEv+0x1c>
   daee4:	f7ff fee4 	bl	dacb0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   daee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   daeec:	2000      	movs	r0, #0
   daeee:	f7fd ba19 	b.w	d8324 <hal_rtc_time_is_valid>
}
   daef2:	4620      	mov	r0, r4
   daef4:	bd10      	pop	{r4, pc}

000daef6 <_ZN9TimeClass3nowEv>:
{
   daef6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   daef8:	f7ff ffe0 	bl	daebc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   daefc:	2210      	movs	r2, #16
   daefe:	2100      	movs	r1, #0
   daf00:	4668      	mov	r0, sp
   daf02:	f000 fed7 	bl	dbcb4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   daf06:	2100      	movs	r1, #0
   daf08:	4668      	mov	r0, sp
   daf0a:	f7fd fa13 	bl	d8334 <hal_rtc_get_time>
}
   daf0e:	9800      	ldr	r0, [sp, #0]
   daf10:	b005      	add	sp, #20
   daf12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daf18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   daf18:	4b02      	ldr	r3, [pc, #8]	; (daf24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   daf1a:	681a      	ldr	r2, [r3, #0]
   daf1c:	4b02      	ldr	r3, [pc, #8]	; (daf28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   daf1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   daf20:	4770      	bx	lr
   daf22:	bf00      	nop
   daf24:	2003dd3c 	.word	0x2003dd3c
   daf28:	2003e5e4 	.word	0x2003e5e4

000daf2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   daf2c:	4770      	bx	lr

000daf2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   daf2e:	7441      	strb	r1, [r0, #17]
}
   daf30:	4770      	bx	lr

000daf32 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   daf32:	4770      	bx	lr

000daf34 <_ZN11USARTSerial17availableForWriteEv>:
{
   daf34:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   daf36:	7c00      	ldrb	r0, [r0, #16]
   daf38:	f7fd fb44 	bl	d85c4 <hal_usart_available_data_for_write>
}
   daf3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daf40:	bd08      	pop	{r3, pc}

000daf42 <_ZN11USARTSerial9availableEv>:
{
   daf42:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   daf44:	7c00      	ldrb	r0, [r0, #16]
   daf46:	f7fd fb15 	bl	d8574 <hal_usart_available>
}
   daf4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daf4e:	bd08      	pop	{r3, pc}

000daf50 <_ZN11USARTSerial4peekEv>:
{
   daf50:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   daf52:	7c00      	ldrb	r0, [r0, #16]
   daf54:	f7fd fb1e 	bl	d8594 <hal_usart_peek>
}
   daf58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daf5c:	bd08      	pop	{r3, pc}

000daf5e <_ZN11USARTSerial4readEv>:
{
   daf5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   daf60:	7c00      	ldrb	r0, [r0, #16]
   daf62:	f7fd fb0f 	bl	d8584 <hal_usart_read>
}
   daf66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daf6a:	bd08      	pop	{r3, pc}

000daf6c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   daf6c:	7c00      	ldrb	r0, [r0, #16]
   daf6e:	f7fd bb19 	b.w	d85a4 <hal_usart_flush>

000daf72 <_ZN11USARTSerial5writeEh>:
{
   daf72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daf74:	7c45      	ldrb	r5, [r0, #17]
{
   daf76:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daf78:	b12d      	cbz	r5, daf86 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   daf7a:	7c20      	ldrb	r0, [r4, #16]
}
   daf7c:	b003      	add	sp, #12
   daf7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   daf82:	f7fd baef 	b.w	d8564 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daf86:	7c00      	ldrb	r0, [r0, #16]
   daf88:	9101      	str	r1, [sp, #4]
   daf8a:	f7fd fb1b 	bl	d85c4 <hal_usart_available_data_for_write>
   daf8e:	2800      	cmp	r0, #0
   daf90:	9901      	ldr	r1, [sp, #4]
   daf92:	dcf2      	bgt.n	daf7a <_ZN11USARTSerial5writeEh+0x8>
}
   daf94:	4628      	mov	r0, r5
   daf96:	b003      	add	sp, #12
   daf98:	bd30      	pop	{r4, r5, pc}

000daf9a <_ZN11USARTSerialD0Ev>:
   daf9a:	b510      	push	{r4, lr}
   daf9c:	2114      	movs	r1, #20
   daf9e:	4604      	mov	r4, r0
   dafa0:	f000 fa24 	bl	db3ec <_ZdlPvj>
   dafa4:	4620      	mov	r0, r4
   dafa6:	bd10      	pop	{r4, pc}

000dafa8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dafa8:	b510      	push	{r4, lr}
   dafaa:	f04f 0c00 	mov.w	ip, #0
   dafae:	4604      	mov	r4, r0
   dafb0:	4608      	mov	r0, r1
   dafb2:	4611      	mov	r1, r2
   dafb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dafb8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dafbc:	4a04      	ldr	r2, [pc, #16]	; (dafd0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dafbe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dafc0:	2201      	movs	r2, #1
  _serial = serial;
   dafc2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dafc4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dafc6:	461a      	mov	r2, r3
   dafc8:	f7fd fabc 	bl	d8544 <hal_usart_init>
}
   dafcc:	4620      	mov	r0, r4
   dafce:	bd10      	pop	{r4, pc}
   dafd0:	000dcb5c 	.word	0x000dcb5c

000dafd4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dafd4:	7c00      	ldrb	r0, [r0, #16]
   dafd6:	2300      	movs	r3, #0
   dafd8:	f7fd bafc 	b.w	d85d4 <hal_usart_begin_config>

000dafdc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dafdc:	2200      	movs	r2, #0
   dafde:	f7ff bff9 	b.w	dafd4 <_ZN11USARTSerial5beginEmm>

000dafe2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dafe2:	7c00      	ldrb	r0, [r0, #16]
   dafe4:	f7fd bab6 	b.w	d8554 <hal_usart_end>

000dafe8 <_Z22__fetch_global_Serial1v>:
{
   dafe8:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dafea:	4c0d      	ldr	r4, [pc, #52]	; (db020 <_Z22__fetch_global_Serial1v+0x38>)
   dafec:	7821      	ldrb	r1, [r4, #0]
   dafee:	f3bf 8f5b 	dmb	ish
   daff2:	f011 0101 	ands.w	r1, r1, #1
   daff6:	d110      	bne.n	db01a <_Z22__fetch_global_Serial1v+0x32>
   daff8:	4620      	mov	r0, r4
   daffa:	9101      	str	r1, [sp, #4]
   daffc:	f7f9 f85c 	bl	d40b8 <__cxa_guard_acquire>
   db000:	9901      	ldr	r1, [sp, #4]
   db002:	b150      	cbz	r0, db01a <_Z22__fetch_global_Serial1v+0x32>
   db004:	4b07      	ldr	r3, [pc, #28]	; (db024 <_Z22__fetch_global_Serial1v+0x3c>)
   db006:	4a08      	ldr	r2, [pc, #32]	; (db028 <_Z22__fetch_global_Serial1v+0x40>)
   db008:	4808      	ldr	r0, [pc, #32]	; (db02c <_Z22__fetch_global_Serial1v+0x44>)
   db00a:	f7ff ffcd 	bl	dafa8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db00e:	4620      	mov	r0, r4
   db010:	f7f9 f857 	bl	d40c2 <__cxa_guard_release>
   db014:	4806      	ldr	r0, [pc, #24]	; (db030 <_Z22__fetch_global_Serial1v+0x48>)
   db016:	f000 fe0d 	bl	dbc34 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db01a:	4804      	ldr	r0, [pc, #16]	; (db02c <_Z22__fetch_global_Serial1v+0x44>)
   db01c:	b002      	add	sp, #8
   db01e:	bd10      	pop	{r4, pc}
   db020:	2003e5f8 	.word	0x2003e5f8
   db024:	2003e680 	.word	0x2003e680
   db028:	2003e5fc 	.word	0x2003e5fc
   db02c:	2003e704 	.word	0x2003e704
   db030:	000daf33 	.word	0x000daf33

000db034 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db034:	7441      	strb	r1, [r0, #17]
}
   db036:	4770      	bx	lr

000db038 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db038:	4770      	bx	lr

000db03a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db03a:	4770      	bx	lr

000db03c <_ZN9USBSerial4readEv>:
{
   db03c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db03e:	2100      	movs	r1, #0
   db040:	7c00      	ldrb	r0, [r0, #16]
   db042:	f7fd faf7 	bl	d8634 <HAL_USB_USART_Receive_Data>
}
   db046:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db04a:	bd08      	pop	{r3, pc}

000db04c <_ZN9USBSerial4peekEv>:
{
   db04c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db04e:	2101      	movs	r1, #1
   db050:	7c00      	ldrb	r0, [r0, #16]
   db052:	f7fd faef 	bl	d8634 <HAL_USB_USART_Receive_Data>
}
   db056:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db05a:	bd08      	pop	{r3, pc}

000db05c <_ZN9USBSerial17availableForWriteEv>:
{
   db05c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db05e:	7c00      	ldrb	r0, [r0, #16]
   db060:	f7fd fae0 	bl	d8624 <HAL_USB_USART_Available_Data_For_Write>
}
   db064:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db068:	bd08      	pop	{r3, pc}

000db06a <_ZN9USBSerial9availableEv>:
{
   db06a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db06c:	7c00      	ldrb	r0, [r0, #16]
   db06e:	f7fd fad1 	bl	d8614 <HAL_USB_USART_Available_Data>
}
   db072:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db076:	bd08      	pop	{r3, pc}

000db078 <_ZN9USBSerial5writeEh>:
{
   db078:	b513      	push	{r0, r1, r4, lr}
   db07a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db07c:	7c00      	ldrb	r0, [r0, #16]
{
   db07e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db080:	f7fd fad0 	bl	d8624 <HAL_USB_USART_Available_Data_For_Write>
   db084:	2800      	cmp	r0, #0
   db086:	9901      	ldr	r1, [sp, #4]
   db088:	dc01      	bgt.n	db08e <_ZN9USBSerial5writeEh+0x16>
   db08a:	7c60      	ldrb	r0, [r4, #17]
   db08c:	b120      	cbz	r0, db098 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db08e:	7c20      	ldrb	r0, [r4, #16]
   db090:	f7fd fad8 	bl	d8644 <HAL_USB_USART_Send_Data>
   db094:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db098:	b002      	add	sp, #8
   db09a:	bd10      	pop	{r4, pc}

000db09c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db09c:	7c00      	ldrb	r0, [r0, #16]
   db09e:	f7fd bad9 	b.w	d8654 <HAL_USB_USART_Flush_Data>

000db0a2 <_ZN9USBSerialD0Ev>:
   db0a2:	b510      	push	{r4, lr}
   db0a4:	2114      	movs	r1, #20
   db0a6:	4604      	mov	r4, r0
   db0a8:	f000 f9a0 	bl	db3ec <_ZdlPvj>
   db0ac:	4620      	mov	r0, r4
   db0ae:	bd10      	pop	{r4, pc}

000db0b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db0b0:	b510      	push	{r4, lr}
   db0b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db0b6:	4604      	mov	r4, r0
   db0b8:	4608      	mov	r0, r1
   db0ba:	2100      	movs	r1, #0
   db0bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db0c0:	4b04      	ldr	r3, [pc, #16]	; (db0d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db0c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db0c4:	2301      	movs	r3, #1
  _serial = serial;
   db0c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db0c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db0ca:	4611      	mov	r1, r2
   db0cc:	f7fd fa8a 	bl	d85e4 <HAL_USB_USART_Init>
}
   db0d0:	4620      	mov	r0, r4
   db0d2:	bd10      	pop	{r4, pc}
   db0d4:	000dcb8c 	.word	0x000dcb8c

000db0d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db0d8:	7c00      	ldrb	r0, [r0, #16]
   db0da:	2200      	movs	r2, #0
   db0dc:	f7fd ba8a 	b.w	d85f4 <HAL_USB_USART_Begin>

000db0e0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db0e0:	7c00      	ldrb	r0, [r0, #16]
   db0e2:	f7fd ba8f 	b.w	d8604 <HAL_USB_USART_End>

000db0e6 <_Z19acquireSerialBufferv>:
{
   db0e6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db0e8:	2214      	movs	r2, #20
{
   db0ea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db0ec:	2100      	movs	r1, #0
   db0ee:	f000 fde1 	bl	dbcb4 <memset>
}
   db0f2:	4620      	mov	r0, r4
   db0f4:	bd10      	pop	{r4, pc}
	...

000db0f8 <_Z16_fetch_usbserialv>:
{
   db0f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db0fa:	4c0f      	ldr	r4, [pc, #60]	; (db138 <_Z16_fetch_usbserialv+0x40>)
{
   db0fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db0fe:	a803      	add	r0, sp, #12
   db100:	f7ff fff1 	bl	db0e6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db104:	7821      	ldrb	r1, [r4, #0]
   db106:	f3bf 8f5b 	dmb	ish
   db10a:	f011 0101 	ands.w	r1, r1, #1
   db10e:	d10f      	bne.n	db130 <_Z16_fetch_usbserialv+0x38>
   db110:	4620      	mov	r0, r4
   db112:	9101      	str	r1, [sp, #4]
   db114:	f7f8 ffd0 	bl	d40b8 <__cxa_guard_acquire>
   db118:	9901      	ldr	r1, [sp, #4]
   db11a:	b148      	cbz	r0, db130 <_Z16_fetch_usbserialv+0x38>
   db11c:	aa03      	add	r2, sp, #12
   db11e:	4807      	ldr	r0, [pc, #28]	; (db13c <_Z16_fetch_usbserialv+0x44>)
   db120:	f7ff ffc6 	bl	db0b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db124:	4620      	mov	r0, r4
   db126:	f7f8 ffcc 	bl	d40c2 <__cxa_guard_release>
   db12a:	4805      	ldr	r0, [pc, #20]	; (db140 <_Z16_fetch_usbserialv+0x48>)
   db12c:	f000 fd82 	bl	dbc34 <atexit>
	return _usbserial;
}
   db130:	4802      	ldr	r0, [pc, #8]	; (db13c <_Z16_fetch_usbserialv+0x44>)
   db132:	b008      	add	sp, #32
   db134:	bd10      	pop	{r4, pc}
   db136:	bf00      	nop
   db138:	2003e718 	.word	0x2003e718
   db13c:	2003e71c 	.word	0x2003e71c
   db140:	000db039 	.word	0x000db039

000db144 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db144:	4b01      	ldr	r3, [pc, #4]	; (db14c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db146:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db148:	4770      	bx	lr
   db14a:	bf00      	nop
   db14c:	2003dd40 	.word	0x2003dd40

000db150 <serialEventRun>:
{
   db150:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db152:	4b0b      	ldr	r3, [pc, #44]	; (db180 <serialEventRun+0x30>)
   db154:	b143      	cbz	r3, db168 <serialEventRun+0x18>
   db156:	f7ff ffcf 	bl	db0f8 <_Z16_fetch_usbserialv>
   db15a:	6803      	ldr	r3, [r0, #0]
   db15c:	691b      	ldr	r3, [r3, #16]
   db15e:	4798      	blx	r3
   db160:	2800      	cmp	r0, #0
   db162:	dd01      	ble.n	db168 <serialEventRun+0x18>
        serialEvent();
   db164:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db168:	4b06      	ldr	r3, [pc, #24]	; (db184 <serialEventRun+0x34>)
   db16a:	b143      	cbz	r3, db17e <serialEventRun+0x2e>
   db16c:	f7ff ff3c 	bl	dafe8 <_Z22__fetch_global_Serial1v>
   db170:	6803      	ldr	r3, [r0, #0]
   db172:	691b      	ldr	r3, [r3, #16]
   db174:	4798      	blx	r3
   db176:	2800      	cmp	r0, #0
   db178:	dd01      	ble.n	db17e <serialEventRun+0x2e>
        serialEvent1();
   db17a:	f3af 8000 	nop.w
}
   db17e:	bd08      	pop	{r3, pc}
	...

000db188 <_post_loop>:
{
   db188:	b508      	push	{r3, lr}
	serialEventRun();
   db18a:	f7ff ffe1 	bl	db150 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db18e:	f7fd f8c1 	bl	d8314 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db192:	4b01      	ldr	r3, [pc, #4]	; (db198 <_post_loop+0x10>)
   db194:	6018      	str	r0, [r3, #0]
}
   db196:	bd08      	pop	{r3, pc}
   db198:	2003e738 	.word	0x2003e738

000db19c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db19c:	4805      	ldr	r0, [pc, #20]	; (db1b4 <_Z33system_initialize_user_backup_ramv+0x18>)
   db19e:	4a06      	ldr	r2, [pc, #24]	; (db1b8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   db1a0:	4906      	ldr	r1, [pc, #24]	; (db1bc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   db1a2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db1a4:	1a12      	subs	r2, r2, r0
   db1a6:	f000 fd5d 	bl	dbc64 <memcpy>
    __backup_sram_signature = signature;
   db1aa:	4b05      	ldr	r3, [pc, #20]	; (db1c0 <_Z33system_initialize_user_backup_ramv+0x24>)
   db1ac:	4a05      	ldr	r2, [pc, #20]	; (db1c4 <_Z33system_initialize_user_backup_ramv+0x28>)
   db1ae:	601a      	str	r2, [r3, #0]
}
   db1b0:	bd08      	pop	{r3, pc}
   db1b2:	bf00      	nop
   db1b4:	2003f400 	.word	0x2003f400
   db1b8:	2003f408 	.word	0x2003f408
   db1bc:	000dcd40 	.word	0x000dcd40
   db1c0:	2003f404 	.word	0x2003f404
   db1c4:	9a271c1e 	.word	0x9a271c1e

000db1c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db1c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db1ca:	2300      	movs	r3, #0
   db1cc:	9300      	str	r3, [sp, #0]
   db1ce:	461a      	mov	r2, r3
   db1d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db1d4:	f7fd faca 	bl	d876c <system_ctrl_set_result>
}
   db1d8:	b003      	add	sp, #12
   db1da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db1e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db1e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db1e2:	8843      	ldrh	r3, [r0, #2]
   db1e4:	2b0a      	cmp	r3, #10
   db1e6:	d008      	beq.n	db1fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db1e8:	2b50      	cmp	r3, #80	; 0x50
   db1ea:	d10b      	bne.n	db204 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db1ec:	4b09      	ldr	r3, [pc, #36]	; (db214 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db1ee:	681b      	ldr	r3, [r3, #0]
   db1f0:	b14b      	cbz	r3, db206 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db1f2:	b003      	add	sp, #12
   db1f4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db1f8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db1fa:	f7ff ffe5 	bl	db1c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db1fe:	b003      	add	sp, #12
   db200:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db204:	2300      	movs	r3, #0
   db206:	9300      	str	r3, [sp, #0]
   db208:	461a      	mov	r2, r3
   db20a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db20e:	f7fd faad 	bl	d876c <system_ctrl_set_result>
}
   db212:	e7f4      	b.n	db1fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db214:	2003e734 	.word	0x2003e734

000db218 <module_user_init_hook>:
{
   db218:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db21a:	4812      	ldr	r0, [pc, #72]	; (db264 <module_user_init_hook+0x4c>)
   db21c:	2100      	movs	r1, #0
   db21e:	f7fd fb91 	bl	d8944 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   db222:	4b11      	ldr	r3, [pc, #68]	; (db268 <module_user_init_hook+0x50>)
   db224:	681a      	ldr	r2, [r3, #0]
   db226:	4b11      	ldr	r3, [pc, #68]	; (db26c <module_user_init_hook+0x54>)
   db228:	429a      	cmp	r2, r3
   db22a:	4b11      	ldr	r3, [pc, #68]	; (db270 <module_user_init_hook+0x58>)
   db22c:	bf0c      	ite	eq
   db22e:	2201      	moveq	r2, #1
   db230:	2200      	movne	r2, #0
   db232:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db234:	d001      	beq.n	db23a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   db236:	f7ff ffb1 	bl	db19c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db23a:	f7fd f85b 	bl	d82f4 <HAL_RNG_GetRandomNumber>
   db23e:	4604      	mov	r4, r0
    srand(seed);
   db240:	f000 fd40 	bl	dbcc4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db244:	4b0b      	ldr	r3, [pc, #44]	; (db274 <module_user_init_hook+0x5c>)
   db246:	b113      	cbz	r3, db24e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   db248:	4620      	mov	r0, r4
   db24a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db24e:	2100      	movs	r1, #0
   db250:	4808      	ldr	r0, [pc, #32]	; (db274 <module_user_init_hook+0x5c>)
   db252:	f7fd fac7 	bl	d87e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db25a:	4807      	ldr	r0, [pc, #28]	; (db278 <module_user_init_hook+0x60>)
   db25c:	2100      	movs	r1, #0
   db25e:	f7fd ba7b 	b.w	d8758 <system_ctrl_set_app_request_handler>
   db262:	bf00      	nop
   db264:	000db145 	.word	0x000db145
   db268:	2003f404 	.word	0x2003f404
   db26c:	9a271c1e 	.word	0x9a271c1e
   db270:	2003e730 	.word	0x2003e730
   db274:	00000000 	.word	0x00000000
   db278:	000db1e1 	.word	0x000db1e1

000db27c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db27c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db27e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db280:	d902      	bls.n	db288 <pinAvailable+0xc>
    return false;
   db282:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db284:	b002      	add	sp, #8
   db286:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db288:	f1a0 030b 	sub.w	r3, r0, #11
   db28c:	2b02      	cmp	r3, #2
   db28e:	d81a      	bhi.n	db2c6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db290:	4c17      	ldr	r4, [pc, #92]	; (db2f0 <pinAvailable+0x74>)
   db292:	7821      	ldrb	r1, [r4, #0]
   db294:	f3bf 8f5b 	dmb	ish
   db298:	f011 0101 	ands.w	r1, r1, #1
   db29c:	d10b      	bne.n	db2b6 <pinAvailable+0x3a>
   db29e:	4620      	mov	r0, r4
   db2a0:	9101      	str	r1, [sp, #4]
   db2a2:	f7f8 ff09 	bl	d40b8 <__cxa_guard_acquire>
   db2a6:	9901      	ldr	r1, [sp, #4]
   db2a8:	b128      	cbz	r0, db2b6 <pinAvailable+0x3a>
   db2aa:	4812      	ldr	r0, [pc, #72]	; (db2f4 <pinAvailable+0x78>)
   db2ac:	f7ff fabe 	bl	da82c <_ZN8SPIClassC1E19hal_spi_interface_t>
   db2b0:	4620      	mov	r0, r4
   db2b2:	f7f8 ff06 	bl	d40c2 <__cxa_guard_release>
   db2b6:	4b0f      	ldr	r3, [pc, #60]	; (db2f4 <pinAvailable+0x78>)
   db2b8:	7818      	ldrb	r0, [r3, #0]
   db2ba:	f7fd f91b 	bl	d84f4 <hal_spi_is_enabled>
   db2be:	2800      	cmp	r0, #0
   db2c0:	d1df      	bne.n	db282 <pinAvailable+0x6>
  return true; // 'pin' is available
   db2c2:	2001      	movs	r0, #1
   db2c4:	e7de      	b.n	db284 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db2c6:	2801      	cmp	r0, #1
   db2c8:	d809      	bhi.n	db2de <pinAvailable+0x62>
   db2ca:	f000 f86b 	bl	db3a4 <_Z19__fetch_global_Wirev>
   db2ce:	2100      	movs	r1, #0
   db2d0:	7c00      	ldrb	r0, [r0, #16]
   db2d2:	f7fd f8af 	bl	d8434 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db2d6:	f080 0001 	eor.w	r0, r0, #1
   db2da:	b2c0      	uxtb	r0, r0
   db2dc:	e7d2      	b.n	db284 <pinAvailable+0x8>
   db2de:	3809      	subs	r0, #9
   db2e0:	2801      	cmp	r0, #1
   db2e2:	d8ee      	bhi.n	db2c2 <pinAvailable+0x46>
   db2e4:	f7ff fe80 	bl	dafe8 <_Z22__fetch_global_Serial1v>
   db2e8:	7c00      	ldrb	r0, [r0, #16]
   db2ea:	f7fd f963 	bl	d85b4 <hal_usart_is_enabled>
   db2ee:	e7f2      	b.n	db2d6 <pinAvailable+0x5a>
   db2f0:	2003e318 	.word	0x2003e318
   db2f4:	2003e31c 	.word	0x2003e31c

000db2f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db2f8:	2823      	cmp	r0, #35	; 0x23
{
   db2fa:	b538      	push	{r3, r4, r5, lr}
   db2fc:	4604      	mov	r4, r0
   db2fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db300:	d80a      	bhi.n	db318 <pinMode+0x20>
   db302:	29ff      	cmp	r1, #255	; 0xff
   db304:	d008      	beq.n	db318 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db306:	f7ff ffb9 	bl	db27c <pinAvailable>
   db30a:	b128      	cbz	r0, db318 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db30c:	4629      	mov	r1, r5
   db30e:	4620      	mov	r0, r4
}
   db310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db314:	f7fd b81e 	b.w	d8354 <HAL_Pin_Mode>
}
   db318:	bd38      	pop	{r3, r4, r5, pc}

000db31a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db31a:	b538      	push	{r3, r4, r5, lr}
   db31c:	4604      	mov	r4, r0
   db31e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db320:	f7fd f820 	bl	d8364 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db324:	28ff      	cmp	r0, #255	; 0xff
   db326:	d010      	beq.n	db34a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db328:	2806      	cmp	r0, #6
   db32a:	d804      	bhi.n	db336 <digitalWrite+0x1c>
   db32c:	234d      	movs	r3, #77	; 0x4d
   db32e:	fa23 f000 	lsr.w	r0, r3, r0
   db332:	07c3      	lsls	r3, r0, #31
   db334:	d409      	bmi.n	db34a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db336:	4620      	mov	r0, r4
   db338:	f7ff ffa0 	bl	db27c <pinAvailable>
   db33c:	b128      	cbz	r0, db34a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db33e:	4629      	mov	r1, r5
   db340:	4620      	mov	r0, r4
}
   db342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db346:	f7fd b815 	b.w	d8374 <HAL_GPIO_Write>
}
   db34a:	bd38      	pop	{r3, r4, r5, pc}

000db34c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db34c:	b510      	push	{r4, lr}
   db34e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db350:	f7fd f808 	bl	d8364 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   db354:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   db356:	b2db      	uxtb	r3, r3
   db358:	2b01      	cmp	r3, #1
   db35a:	d908      	bls.n	db36e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db35c:	4620      	mov	r0, r4
   db35e:	f7ff ff8d 	bl	db27c <pinAvailable>
   db362:	b120      	cbz	r0, db36e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db364:	4620      	mov	r0, r4
}
   db366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   db36a:	f7fd b80b 	b.w	d8384 <HAL_GPIO_Read>
}
   db36e:	2000      	movs	r0, #0
   db370:	bd10      	pop	{r4, pc}

000db372 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db372:	4770      	bx	lr

000db374 <_Z17acquireWireBufferv>:
{
   db374:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db376:	2300      	movs	r3, #0
   db378:	2520      	movs	r5, #32
   db37a:	8043      	strh	r3, [r0, #2]
   db37c:	2314      	movs	r3, #20
{
   db37e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db380:	8003      	strh	r3, [r0, #0]
   db382:	6085      	str	r5, [r0, #8]
   db384:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db386:	4906      	ldr	r1, [pc, #24]	; (db3a0 <_Z17acquireWireBufferv+0x2c>)
   db388:	4628      	mov	r0, r5
   db38a:	f000 f833 	bl	db3f4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db38e:	4904      	ldr	r1, [pc, #16]	; (db3a0 <_Z17acquireWireBufferv+0x2c>)
	};
   db390:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db392:	4628      	mov	r0, r5
   db394:	f000 f82e 	bl	db3f4 <_ZnajRKSt9nothrow_t>
	};
   db398:	60e0      	str	r0, [r4, #12]
}
   db39a:	4620      	mov	r0, r4
   db39c:	bd38      	pop	{r3, r4, r5, pc}
   db39e:	bf00      	nop
   db3a0:	000dcbb4 	.word	0x000dcbb4

000db3a4 <_Z19__fetch_global_Wirev>:
{
   db3a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db3a6:	4d0e      	ldr	r5, [pc, #56]	; (db3e0 <_Z19__fetch_global_Wirev+0x3c>)
   db3a8:	7829      	ldrb	r1, [r5, #0]
   db3aa:	f3bf 8f5b 	dmb	ish
   db3ae:	f011 0401 	ands.w	r4, r1, #1
{
   db3b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db3b4:	d111      	bne.n	db3da <_Z19__fetch_global_Wirev+0x36>
   db3b6:	4628      	mov	r0, r5
   db3b8:	f7f8 fe7e 	bl	d40b8 <__cxa_guard_acquire>
   db3bc:	b168      	cbz	r0, db3da <_Z19__fetch_global_Wirev+0x36>
   db3be:	a801      	add	r0, sp, #4
   db3c0:	f7ff ffd8 	bl	db374 <_Z17acquireWireBufferv>
   db3c4:	aa01      	add	r2, sp, #4
   db3c6:	4621      	mov	r1, r4
   db3c8:	4806      	ldr	r0, [pc, #24]	; (db3e4 <_Z19__fetch_global_Wirev+0x40>)
   db3ca:	f7fd fe77 	bl	d90bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db3ce:	4628      	mov	r0, r5
   db3d0:	f7f8 fe77 	bl	d40c2 <__cxa_guard_release>
   db3d4:	4804      	ldr	r0, [pc, #16]	; (db3e8 <_Z19__fetch_global_Wirev+0x44>)
   db3d6:	f000 fc2d 	bl	dbc34 <atexit>
	return wire;
}
   db3da:	4802      	ldr	r0, [pc, #8]	; (db3e4 <_Z19__fetch_global_Wirev+0x40>)
   db3dc:	b007      	add	sp, #28
   db3de:	bd30      	pop	{r4, r5, pc}
   db3e0:	2003e73c 	.word	0x2003e73c
   db3e4:	2003e740 	.word	0x2003e740
   db3e8:	000db373 	.word	0x000db373

000db3ec <_ZdlPvj>:
   db3ec:	f7f8 be57 	b.w	d409e <_ZdlPv>

000db3f0 <_ZnwjRKSt9nothrow_t>:
   db3f0:	f7f8 be51 	b.w	d4096 <_Znwj>

000db3f4 <_ZnajRKSt9nothrow_t>:
   db3f4:	f7f8 be51 	b.w	d409a <_Znaj>

000db3f8 <_ZSt17__throw_bad_allocv>:
   db3f8:	b508      	push	{r3, lr}
   db3fa:	f7fd fa93 	bl	d8924 <abort>

000db3fe <_ZSt20__throw_length_errorPKc>:
   db3fe:	b508      	push	{r3, lr}
   db400:	f7fd fa90 	bl	d8924 <abort>

000db404 <_ZSt25__throw_bad_function_callv>:
   db404:	b508      	push	{r3, lr}
   db406:	f7fd fa8d 	bl	d8924 <abort>
	...

000db40c <__aeabi_drsub>:
   db40c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db410:	e002      	b.n	db418 <__adddf3>
   db412:	bf00      	nop

000db414 <__aeabi_dsub>:
   db414:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db418 <__adddf3>:
   db418:	b530      	push	{r4, r5, lr}
   db41a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db41e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db422:	ea94 0f05 	teq	r4, r5
   db426:	bf08      	it	eq
   db428:	ea90 0f02 	teqeq	r0, r2
   db42c:	bf1f      	itttt	ne
   db42e:	ea54 0c00 	orrsne.w	ip, r4, r0
   db432:	ea55 0c02 	orrsne.w	ip, r5, r2
   db436:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db43a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db43e:	f000 80e2 	beq.w	db606 <__adddf3+0x1ee>
   db442:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db446:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db44a:	bfb8      	it	lt
   db44c:	426d      	neglt	r5, r5
   db44e:	dd0c      	ble.n	db46a <__adddf3+0x52>
   db450:	442c      	add	r4, r5
   db452:	ea80 0202 	eor.w	r2, r0, r2
   db456:	ea81 0303 	eor.w	r3, r1, r3
   db45a:	ea82 0000 	eor.w	r0, r2, r0
   db45e:	ea83 0101 	eor.w	r1, r3, r1
   db462:	ea80 0202 	eor.w	r2, r0, r2
   db466:	ea81 0303 	eor.w	r3, r1, r3
   db46a:	2d36      	cmp	r5, #54	; 0x36
   db46c:	bf88      	it	hi
   db46e:	bd30      	pophi	{r4, r5, pc}
   db470:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db474:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db478:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db47c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db480:	d002      	beq.n	db488 <__adddf3+0x70>
   db482:	4240      	negs	r0, r0
   db484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db488:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db48c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db490:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db494:	d002      	beq.n	db49c <__adddf3+0x84>
   db496:	4252      	negs	r2, r2
   db498:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db49c:	ea94 0f05 	teq	r4, r5
   db4a0:	f000 80a7 	beq.w	db5f2 <__adddf3+0x1da>
   db4a4:	f1a4 0401 	sub.w	r4, r4, #1
   db4a8:	f1d5 0e20 	rsbs	lr, r5, #32
   db4ac:	db0d      	blt.n	db4ca <__adddf3+0xb2>
   db4ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   db4b2:	fa22 f205 	lsr.w	r2, r2, r5
   db4b6:	1880      	adds	r0, r0, r2
   db4b8:	f141 0100 	adc.w	r1, r1, #0
   db4bc:	fa03 f20e 	lsl.w	r2, r3, lr
   db4c0:	1880      	adds	r0, r0, r2
   db4c2:	fa43 f305 	asr.w	r3, r3, r5
   db4c6:	4159      	adcs	r1, r3
   db4c8:	e00e      	b.n	db4e8 <__adddf3+0xd0>
   db4ca:	f1a5 0520 	sub.w	r5, r5, #32
   db4ce:	f10e 0e20 	add.w	lr, lr, #32
   db4d2:	2a01      	cmp	r2, #1
   db4d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   db4d8:	bf28      	it	cs
   db4da:	f04c 0c02 	orrcs.w	ip, ip, #2
   db4de:	fa43 f305 	asr.w	r3, r3, r5
   db4e2:	18c0      	adds	r0, r0, r3
   db4e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db4e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db4ec:	d507      	bpl.n	db4fe <__adddf3+0xe6>
   db4ee:	f04f 0e00 	mov.w	lr, #0
   db4f2:	f1dc 0c00 	rsbs	ip, ip, #0
   db4f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   db4fa:	eb6e 0101 	sbc.w	r1, lr, r1
   db4fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db502:	d31b      	bcc.n	db53c <__adddf3+0x124>
   db504:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db508:	d30c      	bcc.n	db524 <__adddf3+0x10c>
   db50a:	0849      	lsrs	r1, r1, #1
   db50c:	ea5f 0030 	movs.w	r0, r0, rrx
   db510:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db514:	f104 0401 	add.w	r4, r4, #1
   db518:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db51c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db520:	f080 809a 	bcs.w	db658 <__adddf3+0x240>
   db524:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db528:	bf08      	it	eq
   db52a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db52e:	f150 0000 	adcs.w	r0, r0, #0
   db532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db536:	ea41 0105 	orr.w	r1, r1, r5
   db53a:	bd30      	pop	{r4, r5, pc}
   db53c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db540:	4140      	adcs	r0, r0
   db542:	eb41 0101 	adc.w	r1, r1, r1
   db546:	3c01      	subs	r4, #1
   db548:	bf28      	it	cs
   db54a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db54e:	d2e9      	bcs.n	db524 <__adddf3+0x10c>
   db550:	f091 0f00 	teq	r1, #0
   db554:	bf04      	itt	eq
   db556:	4601      	moveq	r1, r0
   db558:	2000      	moveq	r0, #0
   db55a:	fab1 f381 	clz	r3, r1
   db55e:	bf08      	it	eq
   db560:	3320      	addeq	r3, #32
   db562:	f1a3 030b 	sub.w	r3, r3, #11
   db566:	f1b3 0220 	subs.w	r2, r3, #32
   db56a:	da0c      	bge.n	db586 <__adddf3+0x16e>
   db56c:	320c      	adds	r2, #12
   db56e:	dd08      	ble.n	db582 <__adddf3+0x16a>
   db570:	f102 0c14 	add.w	ip, r2, #20
   db574:	f1c2 020c 	rsb	r2, r2, #12
   db578:	fa01 f00c 	lsl.w	r0, r1, ip
   db57c:	fa21 f102 	lsr.w	r1, r1, r2
   db580:	e00c      	b.n	db59c <__adddf3+0x184>
   db582:	f102 0214 	add.w	r2, r2, #20
   db586:	bfd8      	it	le
   db588:	f1c2 0c20 	rsble	ip, r2, #32
   db58c:	fa01 f102 	lsl.w	r1, r1, r2
   db590:	fa20 fc0c 	lsr.w	ip, r0, ip
   db594:	bfdc      	itt	le
   db596:	ea41 010c 	orrle.w	r1, r1, ip
   db59a:	4090      	lslle	r0, r2
   db59c:	1ae4      	subs	r4, r4, r3
   db59e:	bfa2      	ittt	ge
   db5a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db5a4:	4329      	orrge	r1, r5
   db5a6:	bd30      	popge	{r4, r5, pc}
   db5a8:	ea6f 0404 	mvn.w	r4, r4
   db5ac:	3c1f      	subs	r4, #31
   db5ae:	da1c      	bge.n	db5ea <__adddf3+0x1d2>
   db5b0:	340c      	adds	r4, #12
   db5b2:	dc0e      	bgt.n	db5d2 <__adddf3+0x1ba>
   db5b4:	f104 0414 	add.w	r4, r4, #20
   db5b8:	f1c4 0220 	rsb	r2, r4, #32
   db5bc:	fa20 f004 	lsr.w	r0, r0, r4
   db5c0:	fa01 f302 	lsl.w	r3, r1, r2
   db5c4:	ea40 0003 	orr.w	r0, r0, r3
   db5c8:	fa21 f304 	lsr.w	r3, r1, r4
   db5cc:	ea45 0103 	orr.w	r1, r5, r3
   db5d0:	bd30      	pop	{r4, r5, pc}
   db5d2:	f1c4 040c 	rsb	r4, r4, #12
   db5d6:	f1c4 0220 	rsb	r2, r4, #32
   db5da:	fa20 f002 	lsr.w	r0, r0, r2
   db5de:	fa01 f304 	lsl.w	r3, r1, r4
   db5e2:	ea40 0003 	orr.w	r0, r0, r3
   db5e6:	4629      	mov	r1, r5
   db5e8:	bd30      	pop	{r4, r5, pc}
   db5ea:	fa21 f004 	lsr.w	r0, r1, r4
   db5ee:	4629      	mov	r1, r5
   db5f0:	bd30      	pop	{r4, r5, pc}
   db5f2:	f094 0f00 	teq	r4, #0
   db5f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db5fa:	bf06      	itte	eq
   db5fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db600:	3401      	addeq	r4, #1
   db602:	3d01      	subne	r5, #1
   db604:	e74e      	b.n	db4a4 <__adddf3+0x8c>
   db606:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db60a:	bf18      	it	ne
   db60c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db610:	d029      	beq.n	db666 <__adddf3+0x24e>
   db612:	ea94 0f05 	teq	r4, r5
   db616:	bf08      	it	eq
   db618:	ea90 0f02 	teqeq	r0, r2
   db61c:	d005      	beq.n	db62a <__adddf3+0x212>
   db61e:	ea54 0c00 	orrs.w	ip, r4, r0
   db622:	bf04      	itt	eq
   db624:	4619      	moveq	r1, r3
   db626:	4610      	moveq	r0, r2
   db628:	bd30      	pop	{r4, r5, pc}
   db62a:	ea91 0f03 	teq	r1, r3
   db62e:	bf1e      	ittt	ne
   db630:	2100      	movne	r1, #0
   db632:	2000      	movne	r0, #0
   db634:	bd30      	popne	{r4, r5, pc}
   db636:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db63a:	d105      	bne.n	db648 <__adddf3+0x230>
   db63c:	0040      	lsls	r0, r0, #1
   db63e:	4149      	adcs	r1, r1
   db640:	bf28      	it	cs
   db642:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db646:	bd30      	pop	{r4, r5, pc}
   db648:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db64c:	bf3c      	itt	cc
   db64e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db652:	bd30      	popcc	{r4, r5, pc}
   db654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db658:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db65c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db660:	f04f 0000 	mov.w	r0, #0
   db664:	bd30      	pop	{r4, r5, pc}
   db666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db66a:	bf1a      	itte	ne
   db66c:	4619      	movne	r1, r3
   db66e:	4610      	movne	r0, r2
   db670:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db674:	bf1c      	itt	ne
   db676:	460b      	movne	r3, r1
   db678:	4602      	movne	r2, r0
   db67a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db67e:	bf06      	itte	eq
   db680:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db684:	ea91 0f03 	teqeq	r1, r3
   db688:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db68c:	bd30      	pop	{r4, r5, pc}
   db68e:	bf00      	nop

000db690 <__aeabi_ui2d>:
   db690:	f090 0f00 	teq	r0, #0
   db694:	bf04      	itt	eq
   db696:	2100      	moveq	r1, #0
   db698:	4770      	bxeq	lr
   db69a:	b530      	push	{r4, r5, lr}
   db69c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db6a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db6a4:	f04f 0500 	mov.w	r5, #0
   db6a8:	f04f 0100 	mov.w	r1, #0
   db6ac:	e750      	b.n	db550 <__adddf3+0x138>
   db6ae:	bf00      	nop

000db6b0 <__aeabi_i2d>:
   db6b0:	f090 0f00 	teq	r0, #0
   db6b4:	bf04      	itt	eq
   db6b6:	2100      	moveq	r1, #0
   db6b8:	4770      	bxeq	lr
   db6ba:	b530      	push	{r4, r5, lr}
   db6bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db6c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db6c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db6c8:	bf48      	it	mi
   db6ca:	4240      	negmi	r0, r0
   db6cc:	f04f 0100 	mov.w	r1, #0
   db6d0:	e73e      	b.n	db550 <__adddf3+0x138>
   db6d2:	bf00      	nop

000db6d4 <__aeabi_f2d>:
   db6d4:	0042      	lsls	r2, r0, #1
   db6d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db6da:	ea4f 0131 	mov.w	r1, r1, rrx
   db6de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db6e2:	bf1f      	itttt	ne
   db6e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db6e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db6ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db6f0:	4770      	bxne	lr
   db6f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db6f6:	bf08      	it	eq
   db6f8:	4770      	bxeq	lr
   db6fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db6fe:	bf04      	itt	eq
   db700:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db704:	4770      	bxeq	lr
   db706:	b530      	push	{r4, r5, lr}
   db708:	f44f 7460 	mov.w	r4, #896	; 0x380
   db70c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db714:	e71c      	b.n	db550 <__adddf3+0x138>
   db716:	bf00      	nop

000db718 <__aeabi_ul2d>:
   db718:	ea50 0201 	orrs.w	r2, r0, r1
   db71c:	bf08      	it	eq
   db71e:	4770      	bxeq	lr
   db720:	b530      	push	{r4, r5, lr}
   db722:	f04f 0500 	mov.w	r5, #0
   db726:	e00a      	b.n	db73e <__aeabi_l2d+0x16>

000db728 <__aeabi_l2d>:
   db728:	ea50 0201 	orrs.w	r2, r0, r1
   db72c:	bf08      	it	eq
   db72e:	4770      	bxeq	lr
   db730:	b530      	push	{r4, r5, lr}
   db732:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db736:	d502      	bpl.n	db73e <__aeabi_l2d+0x16>
   db738:	4240      	negs	r0, r0
   db73a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db73e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db742:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db746:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db74a:	f43f aed8 	beq.w	db4fe <__adddf3+0xe6>
   db74e:	f04f 0203 	mov.w	r2, #3
   db752:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db756:	bf18      	it	ne
   db758:	3203      	addne	r2, #3
   db75a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db75e:	bf18      	it	ne
   db760:	3203      	addne	r2, #3
   db762:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db766:	f1c2 0320 	rsb	r3, r2, #32
   db76a:	fa00 fc03 	lsl.w	ip, r0, r3
   db76e:	fa20 f002 	lsr.w	r0, r0, r2
   db772:	fa01 fe03 	lsl.w	lr, r1, r3
   db776:	ea40 000e 	orr.w	r0, r0, lr
   db77a:	fa21 f102 	lsr.w	r1, r1, r2
   db77e:	4414      	add	r4, r2
   db780:	e6bd      	b.n	db4fe <__adddf3+0xe6>
   db782:	bf00      	nop

000db784 <__aeabi_dmul>:
   db784:	b570      	push	{r4, r5, r6, lr}
   db786:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db78a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db78e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db792:	bf1d      	ittte	ne
   db794:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db798:	ea94 0f0c 	teqne	r4, ip
   db79c:	ea95 0f0c 	teqne	r5, ip
   db7a0:	f000 f8de 	bleq	db960 <__aeabi_dmul+0x1dc>
   db7a4:	442c      	add	r4, r5
   db7a6:	ea81 0603 	eor.w	r6, r1, r3
   db7aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db7ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db7b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db7b6:	bf18      	it	ne
   db7b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db7bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db7c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db7c4:	d038      	beq.n	db838 <__aeabi_dmul+0xb4>
   db7c6:	fba0 ce02 	umull	ip, lr, r0, r2
   db7ca:	f04f 0500 	mov.w	r5, #0
   db7ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   db7d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db7d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   db7da:	f04f 0600 	mov.w	r6, #0
   db7de:	fbe1 5603 	umlal	r5, r6, r1, r3
   db7e2:	f09c 0f00 	teq	ip, #0
   db7e6:	bf18      	it	ne
   db7e8:	f04e 0e01 	orrne.w	lr, lr, #1
   db7ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db7f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db7f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db7f8:	d204      	bcs.n	db804 <__aeabi_dmul+0x80>
   db7fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db7fe:	416d      	adcs	r5, r5
   db800:	eb46 0606 	adc.w	r6, r6, r6
   db804:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db808:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db80c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db810:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db814:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db818:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db81c:	bf88      	it	hi
   db81e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db822:	d81e      	bhi.n	db862 <__aeabi_dmul+0xde>
   db824:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db828:	bf08      	it	eq
   db82a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db82e:	f150 0000 	adcs.w	r0, r0, #0
   db832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db836:	bd70      	pop	{r4, r5, r6, pc}
   db838:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db83c:	ea46 0101 	orr.w	r1, r6, r1
   db840:	ea40 0002 	orr.w	r0, r0, r2
   db844:	ea81 0103 	eor.w	r1, r1, r3
   db848:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db84c:	bfc2      	ittt	gt
   db84e:	ebd4 050c 	rsbsgt	r5, r4, ip
   db852:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db856:	bd70      	popgt	{r4, r5, r6, pc}
   db858:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db85c:	f04f 0e00 	mov.w	lr, #0
   db860:	3c01      	subs	r4, #1
   db862:	f300 80ab 	bgt.w	db9bc <__aeabi_dmul+0x238>
   db866:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db86a:	bfde      	ittt	le
   db86c:	2000      	movle	r0, #0
   db86e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db872:	bd70      	pople	{r4, r5, r6, pc}
   db874:	f1c4 0400 	rsb	r4, r4, #0
   db878:	3c20      	subs	r4, #32
   db87a:	da35      	bge.n	db8e8 <__aeabi_dmul+0x164>
   db87c:	340c      	adds	r4, #12
   db87e:	dc1b      	bgt.n	db8b8 <__aeabi_dmul+0x134>
   db880:	f104 0414 	add.w	r4, r4, #20
   db884:	f1c4 0520 	rsb	r5, r4, #32
   db888:	fa00 f305 	lsl.w	r3, r0, r5
   db88c:	fa20 f004 	lsr.w	r0, r0, r4
   db890:	fa01 f205 	lsl.w	r2, r1, r5
   db894:	ea40 0002 	orr.w	r0, r0, r2
   db898:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db89c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db8a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db8a4:	fa21 f604 	lsr.w	r6, r1, r4
   db8a8:	eb42 0106 	adc.w	r1, r2, r6
   db8ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db8b0:	bf08      	it	eq
   db8b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db8b6:	bd70      	pop	{r4, r5, r6, pc}
   db8b8:	f1c4 040c 	rsb	r4, r4, #12
   db8bc:	f1c4 0520 	rsb	r5, r4, #32
   db8c0:	fa00 f304 	lsl.w	r3, r0, r4
   db8c4:	fa20 f005 	lsr.w	r0, r0, r5
   db8c8:	fa01 f204 	lsl.w	r2, r1, r4
   db8cc:	ea40 0002 	orr.w	r0, r0, r2
   db8d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db8d8:	f141 0100 	adc.w	r1, r1, #0
   db8dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db8e0:	bf08      	it	eq
   db8e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db8e6:	bd70      	pop	{r4, r5, r6, pc}
   db8e8:	f1c4 0520 	rsb	r5, r4, #32
   db8ec:	fa00 f205 	lsl.w	r2, r0, r5
   db8f0:	ea4e 0e02 	orr.w	lr, lr, r2
   db8f4:	fa20 f304 	lsr.w	r3, r0, r4
   db8f8:	fa01 f205 	lsl.w	r2, r1, r5
   db8fc:	ea43 0302 	orr.w	r3, r3, r2
   db900:	fa21 f004 	lsr.w	r0, r1, r4
   db904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db908:	fa21 f204 	lsr.w	r2, r1, r4
   db90c:	ea20 0002 	bic.w	r0, r0, r2
   db910:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db914:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db918:	bf08      	it	eq
   db91a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db91e:	bd70      	pop	{r4, r5, r6, pc}
   db920:	f094 0f00 	teq	r4, #0
   db924:	d10f      	bne.n	db946 <__aeabi_dmul+0x1c2>
   db926:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db92a:	0040      	lsls	r0, r0, #1
   db92c:	eb41 0101 	adc.w	r1, r1, r1
   db930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db934:	bf08      	it	eq
   db936:	3c01      	subeq	r4, #1
   db938:	d0f7      	beq.n	db92a <__aeabi_dmul+0x1a6>
   db93a:	ea41 0106 	orr.w	r1, r1, r6
   db93e:	f095 0f00 	teq	r5, #0
   db942:	bf18      	it	ne
   db944:	4770      	bxne	lr
   db946:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db94a:	0052      	lsls	r2, r2, #1
   db94c:	eb43 0303 	adc.w	r3, r3, r3
   db950:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db954:	bf08      	it	eq
   db956:	3d01      	subeq	r5, #1
   db958:	d0f7      	beq.n	db94a <__aeabi_dmul+0x1c6>
   db95a:	ea43 0306 	orr.w	r3, r3, r6
   db95e:	4770      	bx	lr
   db960:	ea94 0f0c 	teq	r4, ip
   db964:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db968:	bf18      	it	ne
   db96a:	ea95 0f0c 	teqne	r5, ip
   db96e:	d00c      	beq.n	db98a <__aeabi_dmul+0x206>
   db970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db974:	bf18      	it	ne
   db976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db97a:	d1d1      	bne.n	db920 <__aeabi_dmul+0x19c>
   db97c:	ea81 0103 	eor.w	r1, r1, r3
   db980:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db984:	f04f 0000 	mov.w	r0, #0
   db988:	bd70      	pop	{r4, r5, r6, pc}
   db98a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db98e:	bf06      	itte	eq
   db990:	4610      	moveq	r0, r2
   db992:	4619      	moveq	r1, r3
   db994:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db998:	d019      	beq.n	db9ce <__aeabi_dmul+0x24a>
   db99a:	ea94 0f0c 	teq	r4, ip
   db99e:	d102      	bne.n	db9a6 <__aeabi_dmul+0x222>
   db9a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db9a4:	d113      	bne.n	db9ce <__aeabi_dmul+0x24a>
   db9a6:	ea95 0f0c 	teq	r5, ip
   db9aa:	d105      	bne.n	db9b8 <__aeabi_dmul+0x234>
   db9ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db9b0:	bf1c      	itt	ne
   db9b2:	4610      	movne	r0, r2
   db9b4:	4619      	movne	r1, r3
   db9b6:	d10a      	bne.n	db9ce <__aeabi_dmul+0x24a>
   db9b8:	ea81 0103 	eor.w	r1, r1, r3
   db9bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db9c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db9c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db9c8:	f04f 0000 	mov.w	r0, #0
   db9cc:	bd70      	pop	{r4, r5, r6, pc}
   db9ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db9d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db9d6:	bd70      	pop	{r4, r5, r6, pc}

000db9d8 <__aeabi_ddiv>:
   db9d8:	b570      	push	{r4, r5, r6, lr}
   db9da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db9de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db9e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db9e6:	bf1d      	ittte	ne
   db9e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db9ec:	ea94 0f0c 	teqne	r4, ip
   db9f0:	ea95 0f0c 	teqne	r5, ip
   db9f4:	f000 f8a7 	bleq	dbb46 <__aeabi_ddiv+0x16e>
   db9f8:	eba4 0405 	sub.w	r4, r4, r5
   db9fc:	ea81 0e03 	eor.w	lr, r1, r3
   dba00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dba04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dba08:	f000 8088 	beq.w	dbb1c <__aeabi_ddiv+0x144>
   dba0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dba10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dba14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dba18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dba1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dba20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dba24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dba28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dba2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dba30:	429d      	cmp	r5, r3
   dba32:	bf08      	it	eq
   dba34:	4296      	cmpeq	r6, r2
   dba36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dba3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dba3e:	d202      	bcs.n	dba46 <__aeabi_ddiv+0x6e>
   dba40:	085b      	lsrs	r3, r3, #1
   dba42:	ea4f 0232 	mov.w	r2, r2, rrx
   dba46:	1ab6      	subs	r6, r6, r2
   dba48:	eb65 0503 	sbc.w	r5, r5, r3
   dba4c:	085b      	lsrs	r3, r3, #1
   dba4e:	ea4f 0232 	mov.w	r2, r2, rrx
   dba52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dba56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dba5a:	ebb6 0e02 	subs.w	lr, r6, r2
   dba5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dba62:	bf22      	ittt	cs
   dba64:	1ab6      	subcs	r6, r6, r2
   dba66:	4675      	movcs	r5, lr
   dba68:	ea40 000c 	orrcs.w	r0, r0, ip
   dba6c:	085b      	lsrs	r3, r3, #1
   dba6e:	ea4f 0232 	mov.w	r2, r2, rrx
   dba72:	ebb6 0e02 	subs.w	lr, r6, r2
   dba76:	eb75 0e03 	sbcs.w	lr, r5, r3
   dba7a:	bf22      	ittt	cs
   dba7c:	1ab6      	subcs	r6, r6, r2
   dba7e:	4675      	movcs	r5, lr
   dba80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dba84:	085b      	lsrs	r3, r3, #1
   dba86:	ea4f 0232 	mov.w	r2, r2, rrx
   dba8a:	ebb6 0e02 	subs.w	lr, r6, r2
   dba8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dba92:	bf22      	ittt	cs
   dba94:	1ab6      	subcs	r6, r6, r2
   dba96:	4675      	movcs	r5, lr
   dba98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dba9c:	085b      	lsrs	r3, r3, #1
   dba9e:	ea4f 0232 	mov.w	r2, r2, rrx
   dbaa2:	ebb6 0e02 	subs.w	lr, r6, r2
   dbaa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbaaa:	bf22      	ittt	cs
   dbaac:	1ab6      	subcs	r6, r6, r2
   dbaae:	4675      	movcs	r5, lr
   dbab0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbab4:	ea55 0e06 	orrs.w	lr, r5, r6
   dbab8:	d018      	beq.n	dbaec <__aeabi_ddiv+0x114>
   dbaba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbabe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbac2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbac6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbaca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbace:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbad2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbad6:	d1c0      	bne.n	dba5a <__aeabi_ddiv+0x82>
   dbad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbadc:	d10b      	bne.n	dbaf6 <__aeabi_ddiv+0x11e>
   dbade:	ea41 0100 	orr.w	r1, r1, r0
   dbae2:	f04f 0000 	mov.w	r0, #0
   dbae6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbaea:	e7b6      	b.n	dba5a <__aeabi_ddiv+0x82>
   dbaec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbaf0:	bf04      	itt	eq
   dbaf2:	4301      	orreq	r1, r0
   dbaf4:	2000      	moveq	r0, #0
   dbaf6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbafa:	bf88      	it	hi
   dbafc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbb00:	f63f aeaf 	bhi.w	db862 <__aeabi_dmul+0xde>
   dbb04:	ebb5 0c03 	subs.w	ip, r5, r3
   dbb08:	bf04      	itt	eq
   dbb0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbb0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbb12:	f150 0000 	adcs.w	r0, r0, #0
   dbb16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbb1a:	bd70      	pop	{r4, r5, r6, pc}
   dbb1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbb20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbb24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbb28:	bfc2      	ittt	gt
   dbb2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbb2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbb32:	bd70      	popgt	{r4, r5, r6, pc}
   dbb34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbb38:	f04f 0e00 	mov.w	lr, #0
   dbb3c:	3c01      	subs	r4, #1
   dbb3e:	e690      	b.n	db862 <__aeabi_dmul+0xde>
   dbb40:	ea45 0e06 	orr.w	lr, r5, r6
   dbb44:	e68d      	b.n	db862 <__aeabi_dmul+0xde>
   dbb46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbb4a:	ea94 0f0c 	teq	r4, ip
   dbb4e:	bf08      	it	eq
   dbb50:	ea95 0f0c 	teqeq	r5, ip
   dbb54:	f43f af3b 	beq.w	db9ce <__aeabi_dmul+0x24a>
   dbb58:	ea94 0f0c 	teq	r4, ip
   dbb5c:	d10a      	bne.n	dbb74 <__aeabi_ddiv+0x19c>
   dbb5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbb62:	f47f af34 	bne.w	db9ce <__aeabi_dmul+0x24a>
   dbb66:	ea95 0f0c 	teq	r5, ip
   dbb6a:	f47f af25 	bne.w	db9b8 <__aeabi_dmul+0x234>
   dbb6e:	4610      	mov	r0, r2
   dbb70:	4619      	mov	r1, r3
   dbb72:	e72c      	b.n	db9ce <__aeabi_dmul+0x24a>
   dbb74:	ea95 0f0c 	teq	r5, ip
   dbb78:	d106      	bne.n	dbb88 <__aeabi_ddiv+0x1b0>
   dbb7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbb7e:	f43f aefd 	beq.w	db97c <__aeabi_dmul+0x1f8>
   dbb82:	4610      	mov	r0, r2
   dbb84:	4619      	mov	r1, r3
   dbb86:	e722      	b.n	db9ce <__aeabi_dmul+0x24a>
   dbb88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbb8c:	bf18      	it	ne
   dbb8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbb92:	f47f aec5 	bne.w	db920 <__aeabi_dmul+0x19c>
   dbb96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dbb9a:	f47f af0d 	bne.w	db9b8 <__aeabi_dmul+0x234>
   dbb9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dbba2:	f47f aeeb 	bne.w	db97c <__aeabi_dmul+0x1f8>
   dbba6:	e712      	b.n	db9ce <__aeabi_dmul+0x24a>

000dbba8 <__aeabi_d2uiz>:
   dbba8:	004a      	lsls	r2, r1, #1
   dbbaa:	d211      	bcs.n	dbbd0 <__aeabi_d2uiz+0x28>
   dbbac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbbb0:	d211      	bcs.n	dbbd6 <__aeabi_d2uiz+0x2e>
   dbbb2:	d50d      	bpl.n	dbbd0 <__aeabi_d2uiz+0x28>
   dbbb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbbb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbbbc:	d40e      	bmi.n	dbbdc <__aeabi_d2uiz+0x34>
   dbbbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbbc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbbc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbbca:	fa23 f002 	lsr.w	r0, r3, r2
   dbbce:	4770      	bx	lr
   dbbd0:	f04f 0000 	mov.w	r0, #0
   dbbd4:	4770      	bx	lr
   dbbd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbbda:	d102      	bne.n	dbbe2 <__aeabi_d2uiz+0x3a>
   dbbdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbbe0:	4770      	bx	lr
   dbbe2:	f04f 0000 	mov.w	r0, #0
   dbbe6:	4770      	bx	lr

000dbbe8 <asctime_r>:
   dbbe8:	b510      	push	{r4, lr}
   dbbea:	460c      	mov	r4, r1
   dbbec:	6941      	ldr	r1, [r0, #20]
   dbbee:	6903      	ldr	r3, [r0, #16]
   dbbf0:	6982      	ldr	r2, [r0, #24]
   dbbf2:	b086      	sub	sp, #24
   dbbf4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dbbf8:	9104      	str	r1, [sp, #16]
   dbbfa:	6801      	ldr	r1, [r0, #0]
   dbbfc:	9103      	str	r1, [sp, #12]
   dbbfe:	6841      	ldr	r1, [r0, #4]
   dbc00:	9102      	str	r1, [sp, #8]
   dbc02:	6881      	ldr	r1, [r0, #8]
   dbc04:	9101      	str	r1, [sp, #4]
   dbc06:	68c1      	ldr	r1, [r0, #12]
   dbc08:	9100      	str	r1, [sp, #0]
   dbc0a:	4907      	ldr	r1, [pc, #28]	; (dbc28 <asctime_r+0x40>)
   dbc0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dbc10:	440b      	add	r3, r1
   dbc12:	4906      	ldr	r1, [pc, #24]	; (dbc2c <asctime_r+0x44>)
   dbc14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dbc18:	440a      	add	r2, r1
   dbc1a:	4620      	mov	r0, r4
   dbc1c:	4904      	ldr	r1, [pc, #16]	; (dbc30 <asctime_r+0x48>)
   dbc1e:	f7fc fe61 	bl	d88e4 <siprintf>
   dbc22:	4620      	mov	r0, r4
   dbc24:	b006      	add	sp, #24
   dbc26:	bd10      	pop	{r4, pc}
   dbc28:	000dcbea 	.word	0x000dcbea
   dbc2c:	000dcbd5 	.word	0x000dcbd5
   dbc30:	000dcbb5 	.word	0x000dcbb5

000dbc34 <atexit>:
   dbc34:	2300      	movs	r3, #0
   dbc36:	4601      	mov	r1, r0
   dbc38:	461a      	mov	r2, r3
   dbc3a:	4618      	mov	r0, r3
   dbc3c:	f000 b9d2 	b.w	dbfe4 <__register_exitproc>

000dbc40 <gmtime>:
   dbc40:	b538      	push	{r3, r4, r5, lr}
   dbc42:	4b07      	ldr	r3, [pc, #28]	; (dbc60 <gmtime+0x20>)
   dbc44:	681d      	ldr	r5, [r3, #0]
   dbc46:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dbc48:	4604      	mov	r4, r0
   dbc4a:	b91b      	cbnz	r3, dbc54 <gmtime+0x14>
   dbc4c:	2024      	movs	r0, #36	; 0x24
   dbc4e:	f7fc fe31 	bl	d88b4 <malloc>
   dbc52:	63e8      	str	r0, [r5, #60]	; 0x3c
   dbc54:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dbc56:	4620      	mov	r0, r4
   dbc58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbc5c:	f7fc be8a 	b.w	d8974 <gmtime_r>
   dbc60:	2003dd40 	.word	0x2003dd40

000dbc64 <memcpy>:
   dbc64:	440a      	add	r2, r1
   dbc66:	4291      	cmp	r1, r2
   dbc68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbc6c:	d100      	bne.n	dbc70 <memcpy+0xc>
   dbc6e:	4770      	bx	lr
   dbc70:	b510      	push	{r4, lr}
   dbc72:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbc76:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbc7a:	4291      	cmp	r1, r2
   dbc7c:	d1f9      	bne.n	dbc72 <memcpy+0xe>
   dbc7e:	bd10      	pop	{r4, pc}

000dbc80 <memmove>:
   dbc80:	4288      	cmp	r0, r1
   dbc82:	b510      	push	{r4, lr}
   dbc84:	eb01 0402 	add.w	r4, r1, r2
   dbc88:	d902      	bls.n	dbc90 <memmove+0x10>
   dbc8a:	4284      	cmp	r4, r0
   dbc8c:	4623      	mov	r3, r4
   dbc8e:	d807      	bhi.n	dbca0 <memmove+0x20>
   dbc90:	1e43      	subs	r3, r0, #1
   dbc92:	42a1      	cmp	r1, r4
   dbc94:	d008      	beq.n	dbca8 <memmove+0x28>
   dbc96:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbc9a:	f803 2f01 	strb.w	r2, [r3, #1]!
   dbc9e:	e7f8      	b.n	dbc92 <memmove+0x12>
   dbca0:	4402      	add	r2, r0
   dbca2:	4601      	mov	r1, r0
   dbca4:	428a      	cmp	r2, r1
   dbca6:	d100      	bne.n	dbcaa <memmove+0x2a>
   dbca8:	bd10      	pop	{r4, pc}
   dbcaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbcae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dbcb2:	e7f7      	b.n	dbca4 <memmove+0x24>

000dbcb4 <memset>:
   dbcb4:	4402      	add	r2, r0
   dbcb6:	4603      	mov	r3, r0
   dbcb8:	4293      	cmp	r3, r2
   dbcba:	d100      	bne.n	dbcbe <memset+0xa>
   dbcbc:	4770      	bx	lr
   dbcbe:	f803 1b01 	strb.w	r1, [r3], #1
   dbcc2:	e7f9      	b.n	dbcb8 <memset+0x4>

000dbcc4 <srand>:
   dbcc4:	b538      	push	{r3, r4, r5, lr}
   dbcc6:	4b0d      	ldr	r3, [pc, #52]	; (dbcfc <srand+0x38>)
   dbcc8:	681d      	ldr	r5, [r3, #0]
   dbcca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbccc:	4604      	mov	r4, r0
   dbcce:	b97b      	cbnz	r3, dbcf0 <srand+0x2c>
   dbcd0:	2018      	movs	r0, #24
   dbcd2:	f7fc fdef 	bl	d88b4 <malloc>
   dbcd6:	4a0a      	ldr	r2, [pc, #40]	; (dbd00 <srand+0x3c>)
   dbcd8:	4b0a      	ldr	r3, [pc, #40]	; (dbd04 <srand+0x40>)
   dbcda:	63a8      	str	r0, [r5, #56]	; 0x38
   dbcdc:	e9c0 2300 	strd	r2, r3, [r0]
   dbce0:	4b09      	ldr	r3, [pc, #36]	; (dbd08 <srand+0x44>)
   dbce2:	6083      	str	r3, [r0, #8]
   dbce4:	230b      	movs	r3, #11
   dbce6:	8183      	strh	r3, [r0, #12]
   dbce8:	2201      	movs	r2, #1
   dbcea:	2300      	movs	r3, #0
   dbcec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbcf0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbcf2:	2200      	movs	r2, #0
   dbcf4:	611c      	str	r4, [r3, #16]
   dbcf6:	615a      	str	r2, [r3, #20]
   dbcf8:	bd38      	pop	{r3, r4, r5, pc}
   dbcfa:	bf00      	nop
   dbcfc:	2003dd40 	.word	0x2003dd40
   dbd00:	abcd330e 	.word	0xabcd330e
   dbd04:	e66d1234 	.word	0xe66d1234
   dbd08:	0005deec 	.word	0x0005deec

000dbd0c <rand>:
   dbd0c:	4b13      	ldr	r3, [pc, #76]	; (dbd5c <rand+0x50>)
   dbd0e:	b510      	push	{r4, lr}
   dbd10:	681c      	ldr	r4, [r3, #0]
   dbd12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dbd14:	b97b      	cbnz	r3, dbd36 <rand+0x2a>
   dbd16:	2018      	movs	r0, #24
   dbd18:	f7fc fdcc 	bl	d88b4 <malloc>
   dbd1c:	4a10      	ldr	r2, [pc, #64]	; (dbd60 <rand+0x54>)
   dbd1e:	4b11      	ldr	r3, [pc, #68]	; (dbd64 <rand+0x58>)
   dbd20:	63a0      	str	r0, [r4, #56]	; 0x38
   dbd22:	e9c0 2300 	strd	r2, r3, [r0]
   dbd26:	4b10      	ldr	r3, [pc, #64]	; (dbd68 <rand+0x5c>)
   dbd28:	6083      	str	r3, [r0, #8]
   dbd2a:	230b      	movs	r3, #11
   dbd2c:	8183      	strh	r3, [r0, #12]
   dbd2e:	2201      	movs	r2, #1
   dbd30:	2300      	movs	r3, #0
   dbd32:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbd36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   dbd38:	480c      	ldr	r0, [pc, #48]	; (dbd6c <rand+0x60>)
   dbd3a:	690a      	ldr	r2, [r1, #16]
   dbd3c:	694b      	ldr	r3, [r1, #20]
   dbd3e:	4c0c      	ldr	r4, [pc, #48]	; (dbd70 <rand+0x64>)
   dbd40:	4350      	muls	r0, r2
   dbd42:	fb04 0003 	mla	r0, r4, r3, r0
   dbd46:	fba2 3404 	umull	r3, r4, r2, r4
   dbd4a:	1c5a      	adds	r2, r3, #1
   dbd4c:	4404      	add	r4, r0
   dbd4e:	f144 0000 	adc.w	r0, r4, #0
   dbd52:	e9c1 2004 	strd	r2, r0, [r1, #16]
   dbd56:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   dbd5a:	bd10      	pop	{r4, pc}
   dbd5c:	2003dd40 	.word	0x2003dd40
   dbd60:	abcd330e 	.word	0xabcd330e
   dbd64:	e66d1234 	.word	0xe66d1234
   dbd68:	0005deec 	.word	0x0005deec
   dbd6c:	5851f42d 	.word	0x5851f42d
   dbd70:	4c957f2d 	.word	0x4c957f2d

000dbd74 <strchr>:
   dbd74:	b2c9      	uxtb	r1, r1
   dbd76:	4603      	mov	r3, r0
   dbd78:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbd7c:	b11a      	cbz	r2, dbd86 <strchr+0x12>
   dbd7e:	428a      	cmp	r2, r1
   dbd80:	d1f9      	bne.n	dbd76 <strchr+0x2>
   dbd82:	4618      	mov	r0, r3
   dbd84:	4770      	bx	lr
   dbd86:	2900      	cmp	r1, #0
   dbd88:	bf18      	it	ne
   dbd8a:	2300      	movne	r3, #0
   dbd8c:	e7f9      	b.n	dbd82 <strchr+0xe>

000dbd8e <strchrnul>:
   dbd8e:	b510      	push	{r4, lr}
   dbd90:	4604      	mov	r4, r0
   dbd92:	f7ff ffef 	bl	dbd74 <strchr>
   dbd96:	b918      	cbnz	r0, dbda0 <strchrnul+0x12>
   dbd98:	4620      	mov	r0, r4
   dbd9a:	f000 f832 	bl	dbe02 <strlen>
   dbd9e:	4420      	add	r0, r4
   dbda0:	bd10      	pop	{r4, pc}

000dbda2 <strcmp>:
   dbda2:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbda6:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbdaa:	2a01      	cmp	r2, #1
   dbdac:	bf28      	it	cs
   dbdae:	429a      	cmpcs	r2, r3
   dbdb0:	d0f7      	beq.n	dbda2 <strcmp>
   dbdb2:	1ad0      	subs	r0, r2, r3
   dbdb4:	4770      	bx	lr

000dbdb6 <strcpy>:
   dbdb6:	4603      	mov	r3, r0
   dbdb8:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbdbc:	f803 2b01 	strb.w	r2, [r3], #1
   dbdc0:	2a00      	cmp	r2, #0
   dbdc2:	d1f9      	bne.n	dbdb8 <strcpy+0x2>
   dbdc4:	4770      	bx	lr
	...

000dbdc8 <strdup>:
   dbdc8:	4b02      	ldr	r3, [pc, #8]	; (dbdd4 <strdup+0xc>)
   dbdca:	4601      	mov	r1, r0
   dbdcc:	6818      	ldr	r0, [r3, #0]
   dbdce:	f000 b803 	b.w	dbdd8 <_strdup_r>
   dbdd2:	bf00      	nop
   dbdd4:	2003dd40 	.word	0x2003dd40

000dbdd8 <_strdup_r>:
   dbdd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dbdda:	4604      	mov	r4, r0
   dbddc:	4608      	mov	r0, r1
   dbdde:	460d      	mov	r5, r1
   dbde0:	f000 f80f 	bl	dbe02 <strlen>
   dbde4:	1c42      	adds	r2, r0, #1
   dbde6:	4611      	mov	r1, r2
   dbde8:	4620      	mov	r0, r4
   dbdea:	9201      	str	r2, [sp, #4]
   dbdec:	f7fc fda2 	bl	d8934 <_malloc_r>
   dbdf0:	4604      	mov	r4, r0
   dbdf2:	b118      	cbz	r0, dbdfc <_strdup_r+0x24>
   dbdf4:	9a01      	ldr	r2, [sp, #4]
   dbdf6:	4629      	mov	r1, r5
   dbdf8:	f7ff ff34 	bl	dbc64 <memcpy>
   dbdfc:	4620      	mov	r0, r4
   dbdfe:	b003      	add	sp, #12
   dbe00:	bd30      	pop	{r4, r5, pc}

000dbe02 <strlen>:
   dbe02:	4603      	mov	r3, r0
   dbe04:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbe08:	2a00      	cmp	r2, #0
   dbe0a:	d1fb      	bne.n	dbe04 <strlen+0x2>
   dbe0c:	1a18      	subs	r0, r3, r0
   dbe0e:	3801      	subs	r0, #1
   dbe10:	4770      	bx	lr

000dbe12 <strncmp>:
   dbe12:	b510      	push	{r4, lr}
   dbe14:	b16a      	cbz	r2, dbe32 <strncmp+0x20>
   dbe16:	3901      	subs	r1, #1
   dbe18:	1884      	adds	r4, r0, r2
   dbe1a:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbe1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dbe22:	4293      	cmp	r3, r2
   dbe24:	d103      	bne.n	dbe2e <strncmp+0x1c>
   dbe26:	42a0      	cmp	r0, r4
   dbe28:	d001      	beq.n	dbe2e <strncmp+0x1c>
   dbe2a:	2b00      	cmp	r3, #0
   dbe2c:	d1f5      	bne.n	dbe1a <strncmp+0x8>
   dbe2e:	1a98      	subs	r0, r3, r2
   dbe30:	bd10      	pop	{r4, pc}
   dbe32:	4610      	mov	r0, r2
   dbe34:	e7fc      	b.n	dbe30 <strncmp+0x1e>

000dbe36 <strncpy>:
   dbe36:	b510      	push	{r4, lr}
   dbe38:	3901      	subs	r1, #1
   dbe3a:	4603      	mov	r3, r0
   dbe3c:	b132      	cbz	r2, dbe4c <strncpy+0x16>
   dbe3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbe42:	f803 4b01 	strb.w	r4, [r3], #1
   dbe46:	3a01      	subs	r2, #1
   dbe48:	2c00      	cmp	r4, #0
   dbe4a:	d1f7      	bne.n	dbe3c <strncpy+0x6>
   dbe4c:	441a      	add	r2, r3
   dbe4e:	2100      	movs	r1, #0
   dbe50:	4293      	cmp	r3, r2
   dbe52:	d100      	bne.n	dbe56 <strncpy+0x20>
   dbe54:	bd10      	pop	{r4, pc}
   dbe56:	f803 1b01 	strb.w	r1, [r3], #1
   dbe5a:	e7f9      	b.n	dbe50 <strncpy+0x1a>

000dbe5c <strrchr>:
   dbe5c:	b538      	push	{r3, r4, r5, lr}
   dbe5e:	4603      	mov	r3, r0
   dbe60:	460c      	mov	r4, r1
   dbe62:	b969      	cbnz	r1, dbe80 <strrchr+0x24>
   dbe64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbe68:	f7ff bf84 	b.w	dbd74 <strchr>
   dbe6c:	1c43      	adds	r3, r0, #1
   dbe6e:	4605      	mov	r5, r0
   dbe70:	4621      	mov	r1, r4
   dbe72:	4618      	mov	r0, r3
   dbe74:	f7ff ff7e 	bl	dbd74 <strchr>
   dbe78:	2800      	cmp	r0, #0
   dbe7a:	d1f7      	bne.n	dbe6c <strrchr+0x10>
   dbe7c:	4628      	mov	r0, r5
   dbe7e:	bd38      	pop	{r3, r4, r5, pc}
   dbe80:	2500      	movs	r5, #0
   dbe82:	e7f5      	b.n	dbe70 <strrchr+0x14>

000dbe84 <__strtok_r>:
   dbe84:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbe86:	b908      	cbnz	r0, dbe8c <__strtok_r+0x8>
   dbe88:	6810      	ldr	r0, [r2, #0]
   dbe8a:	b188      	cbz	r0, dbeb0 <__strtok_r+0x2c>
   dbe8c:	4604      	mov	r4, r0
   dbe8e:	4620      	mov	r0, r4
   dbe90:	f814 5b01 	ldrb.w	r5, [r4], #1
   dbe94:	460f      	mov	r7, r1
   dbe96:	f817 6b01 	ldrb.w	r6, [r7], #1
   dbe9a:	b91e      	cbnz	r6, dbea4 <__strtok_r+0x20>
   dbe9c:	b965      	cbnz	r5, dbeb8 <__strtok_r+0x34>
   dbe9e:	6015      	str	r5, [r2, #0]
   dbea0:	4628      	mov	r0, r5
   dbea2:	e005      	b.n	dbeb0 <__strtok_r+0x2c>
   dbea4:	42b5      	cmp	r5, r6
   dbea6:	d1f6      	bne.n	dbe96 <__strtok_r+0x12>
   dbea8:	2b00      	cmp	r3, #0
   dbeaa:	d1f0      	bne.n	dbe8e <__strtok_r+0xa>
   dbeac:	6014      	str	r4, [r2, #0]
   dbeae:	7003      	strb	r3, [r0, #0]
   dbeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbeb2:	461c      	mov	r4, r3
   dbeb4:	e00c      	b.n	dbed0 <__strtok_r+0x4c>
   dbeb6:	b915      	cbnz	r5, dbebe <__strtok_r+0x3a>
   dbeb8:	f814 3b01 	ldrb.w	r3, [r4], #1
   dbebc:	460e      	mov	r6, r1
   dbebe:	f816 5b01 	ldrb.w	r5, [r6], #1
   dbec2:	42ab      	cmp	r3, r5
   dbec4:	d1f7      	bne.n	dbeb6 <__strtok_r+0x32>
   dbec6:	2b00      	cmp	r3, #0
   dbec8:	d0f3      	beq.n	dbeb2 <__strtok_r+0x2e>
   dbeca:	2300      	movs	r3, #0
   dbecc:	f804 3c01 	strb.w	r3, [r4, #-1]
   dbed0:	6014      	str	r4, [r2, #0]
   dbed2:	e7ed      	b.n	dbeb0 <__strtok_r+0x2c>

000dbed4 <strtok_r>:
   dbed4:	2301      	movs	r3, #1
   dbed6:	f7ff bfd5 	b.w	dbe84 <__strtok_r>
	...

000dbedc <_strtol_l.isra.0>:
   dbedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbee0:	4e3a      	ldr	r6, [pc, #232]	; (dbfcc <_strtol_l.isra.0+0xf0>)
   dbee2:	4686      	mov	lr, r0
   dbee4:	468c      	mov	ip, r1
   dbee6:	4660      	mov	r0, ip
   dbee8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbeec:	5da5      	ldrb	r5, [r4, r6]
   dbeee:	f015 0508 	ands.w	r5, r5, #8
   dbef2:	d1f8      	bne.n	dbee6 <_strtol_l.isra.0+0xa>
   dbef4:	2c2d      	cmp	r4, #45	; 0x2d
   dbef6:	d133      	bne.n	dbf60 <_strtol_l.isra.0+0x84>
   dbef8:	f89c 4000 	ldrb.w	r4, [ip]
   dbefc:	f04f 0801 	mov.w	r8, #1
   dbf00:	f100 0c02 	add.w	ip, r0, #2
   dbf04:	2b00      	cmp	r3, #0
   dbf06:	d05c      	beq.n	dbfc2 <_strtol_l.isra.0+0xe6>
   dbf08:	2b10      	cmp	r3, #16
   dbf0a:	d10c      	bne.n	dbf26 <_strtol_l.isra.0+0x4a>
   dbf0c:	2c30      	cmp	r4, #48	; 0x30
   dbf0e:	d10a      	bne.n	dbf26 <_strtol_l.isra.0+0x4a>
   dbf10:	f89c 0000 	ldrb.w	r0, [ip]
   dbf14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbf18:	2858      	cmp	r0, #88	; 0x58
   dbf1a:	d14d      	bne.n	dbfb8 <_strtol_l.isra.0+0xdc>
   dbf1c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dbf20:	2310      	movs	r3, #16
   dbf22:	f10c 0c02 	add.w	ip, ip, #2
   dbf26:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dbf2a:	3f01      	subs	r7, #1
   dbf2c:	2600      	movs	r6, #0
   dbf2e:	fbb7 f9f3 	udiv	r9, r7, r3
   dbf32:	4630      	mov	r0, r6
   dbf34:	fb03 7a19 	mls	sl, r3, r9, r7
   dbf38:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dbf3c:	2d09      	cmp	r5, #9
   dbf3e:	d818      	bhi.n	dbf72 <_strtol_l.isra.0+0x96>
   dbf40:	462c      	mov	r4, r5
   dbf42:	42a3      	cmp	r3, r4
   dbf44:	dd24      	ble.n	dbf90 <_strtol_l.isra.0+0xb4>
   dbf46:	1c75      	adds	r5, r6, #1
   dbf48:	d007      	beq.n	dbf5a <_strtol_l.isra.0+0x7e>
   dbf4a:	4581      	cmp	r9, r0
   dbf4c:	d31d      	bcc.n	dbf8a <_strtol_l.isra.0+0xae>
   dbf4e:	d101      	bne.n	dbf54 <_strtol_l.isra.0+0x78>
   dbf50:	45a2      	cmp	sl, r4
   dbf52:	db1a      	blt.n	dbf8a <_strtol_l.isra.0+0xae>
   dbf54:	fb00 4003 	mla	r0, r0, r3, r4
   dbf58:	2601      	movs	r6, #1
   dbf5a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbf5e:	e7eb      	b.n	dbf38 <_strtol_l.isra.0+0x5c>
   dbf60:	2c2b      	cmp	r4, #43	; 0x2b
   dbf62:	bf08      	it	eq
   dbf64:	f89c 4000 	ldrbeq.w	r4, [ip]
   dbf68:	46a8      	mov	r8, r5
   dbf6a:	bf08      	it	eq
   dbf6c:	f100 0c02 	addeq.w	ip, r0, #2
   dbf70:	e7c8      	b.n	dbf04 <_strtol_l.isra.0+0x28>
   dbf72:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dbf76:	2d19      	cmp	r5, #25
   dbf78:	d801      	bhi.n	dbf7e <_strtol_l.isra.0+0xa2>
   dbf7a:	3c37      	subs	r4, #55	; 0x37
   dbf7c:	e7e1      	b.n	dbf42 <_strtol_l.isra.0+0x66>
   dbf7e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dbf82:	2d19      	cmp	r5, #25
   dbf84:	d804      	bhi.n	dbf90 <_strtol_l.isra.0+0xb4>
   dbf86:	3c57      	subs	r4, #87	; 0x57
   dbf88:	e7db      	b.n	dbf42 <_strtol_l.isra.0+0x66>
   dbf8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbf8e:	e7e4      	b.n	dbf5a <_strtol_l.isra.0+0x7e>
   dbf90:	1c73      	adds	r3, r6, #1
   dbf92:	d106      	bne.n	dbfa2 <_strtol_l.isra.0+0xc6>
   dbf94:	2322      	movs	r3, #34	; 0x22
   dbf96:	f8ce 3000 	str.w	r3, [lr]
   dbf9a:	4638      	mov	r0, r7
   dbf9c:	b942      	cbnz	r2, dbfb0 <_strtol_l.isra.0+0xd4>
   dbf9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbfa2:	f1b8 0f00 	cmp.w	r8, #0
   dbfa6:	d000      	beq.n	dbfaa <_strtol_l.isra.0+0xce>
   dbfa8:	4240      	negs	r0, r0
   dbfaa:	2a00      	cmp	r2, #0
   dbfac:	d0f7      	beq.n	dbf9e <_strtol_l.isra.0+0xc2>
   dbfae:	b10e      	cbz	r6, dbfb4 <_strtol_l.isra.0+0xd8>
   dbfb0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dbfb4:	6011      	str	r1, [r2, #0]
   dbfb6:	e7f2      	b.n	dbf9e <_strtol_l.isra.0+0xc2>
   dbfb8:	2430      	movs	r4, #48	; 0x30
   dbfba:	2b00      	cmp	r3, #0
   dbfbc:	d1b3      	bne.n	dbf26 <_strtol_l.isra.0+0x4a>
   dbfbe:	2308      	movs	r3, #8
   dbfc0:	e7b1      	b.n	dbf26 <_strtol_l.isra.0+0x4a>
   dbfc2:	2c30      	cmp	r4, #48	; 0x30
   dbfc4:	d0a4      	beq.n	dbf10 <_strtol_l.isra.0+0x34>
   dbfc6:	230a      	movs	r3, #10
   dbfc8:	e7ad      	b.n	dbf26 <_strtol_l.isra.0+0x4a>
   dbfca:	bf00      	nop
   dbfcc:	000dcc0f 	.word	0x000dcc0f

000dbfd0 <strtol>:
   dbfd0:	4613      	mov	r3, r2
   dbfd2:	460a      	mov	r2, r1
   dbfd4:	4601      	mov	r1, r0
   dbfd6:	4802      	ldr	r0, [pc, #8]	; (dbfe0 <strtol+0x10>)
   dbfd8:	6800      	ldr	r0, [r0, #0]
   dbfda:	f7ff bf7f 	b.w	dbedc <_strtol_l.isra.0>
   dbfde:	bf00      	nop
   dbfe0:	2003dd40 	.word	0x2003dd40

000dbfe4 <__register_exitproc>:
   dbfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbfe8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dc0a4 <__register_exitproc+0xc0>
   dbfec:	4606      	mov	r6, r0
   dbfee:	f8d8 0000 	ldr.w	r0, [r8]
   dbff2:	461f      	mov	r7, r3
   dbff4:	460d      	mov	r5, r1
   dbff6:	4691      	mov	r9, r2
   dbff8:	f000 f856 	bl	dc0a8 <__retarget_lock_acquire_recursive>
   dbffc:	4b25      	ldr	r3, [pc, #148]	; (dc094 <__register_exitproc+0xb0>)
   dbffe:	681c      	ldr	r4, [r3, #0]
   dc000:	b934      	cbnz	r4, dc010 <__register_exitproc+0x2c>
   dc002:	4c25      	ldr	r4, [pc, #148]	; (dc098 <__register_exitproc+0xb4>)
   dc004:	601c      	str	r4, [r3, #0]
   dc006:	4b25      	ldr	r3, [pc, #148]	; (dc09c <__register_exitproc+0xb8>)
   dc008:	b113      	cbz	r3, dc010 <__register_exitproc+0x2c>
   dc00a:	681b      	ldr	r3, [r3, #0]
   dc00c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dc010:	6863      	ldr	r3, [r4, #4]
   dc012:	2b1f      	cmp	r3, #31
   dc014:	dd07      	ble.n	dc026 <__register_exitproc+0x42>
   dc016:	f8d8 0000 	ldr.w	r0, [r8]
   dc01a:	f000 f847 	bl	dc0ac <__retarget_lock_release_recursive>
   dc01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc026:	b34e      	cbz	r6, dc07c <__register_exitproc+0x98>
   dc028:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dc02c:	b988      	cbnz	r0, dc052 <__register_exitproc+0x6e>
   dc02e:	4b1c      	ldr	r3, [pc, #112]	; (dc0a0 <__register_exitproc+0xbc>)
   dc030:	b923      	cbnz	r3, dc03c <__register_exitproc+0x58>
   dc032:	f8d8 0000 	ldr.w	r0, [r8]
   dc036:	f000 f838 	bl	dc0aa <__retarget_lock_release>
   dc03a:	e7f0      	b.n	dc01e <__register_exitproc+0x3a>
   dc03c:	f44f 7084 	mov.w	r0, #264	; 0x108
   dc040:	f7fc fc38 	bl	d88b4 <malloc>
   dc044:	2800      	cmp	r0, #0
   dc046:	d0f4      	beq.n	dc032 <__register_exitproc+0x4e>
   dc048:	2300      	movs	r3, #0
   dc04a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dc04e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dc052:	6863      	ldr	r3, [r4, #4]
   dc054:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dc058:	2201      	movs	r2, #1
   dc05a:	409a      	lsls	r2, r3
   dc05c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dc060:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dc064:	4313      	orrs	r3, r2
   dc066:	2e02      	cmp	r6, #2
   dc068:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dc06c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dc070:	bf02      	ittt	eq
   dc072:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dc076:	431a      	orreq	r2, r3
   dc078:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dc07c:	6863      	ldr	r3, [r4, #4]
   dc07e:	f8d8 0000 	ldr.w	r0, [r8]
   dc082:	1c5a      	adds	r2, r3, #1
   dc084:	3302      	adds	r3, #2
   dc086:	6062      	str	r2, [r4, #4]
   dc088:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dc08c:	f000 f80e 	bl	dc0ac <__retarget_lock_release_recursive>
   dc090:	2000      	movs	r0, #0
   dc092:	e7c6      	b.n	dc022 <__register_exitproc+0x3e>
   dc094:	2003e7e0 	.word	0x2003e7e0
   dc098:	2003e754 	.word	0x2003e754
   dc09c:	00000000 	.word	0x00000000
   dc0a0:	000d88b5 	.word	0x000d88b5
   dc0a4:	2003dda4 	.word	0x2003dda4

000dc0a8 <__retarget_lock_acquire_recursive>:
   dc0a8:	4770      	bx	lr

000dc0aa <__retarget_lock_release>:
   dc0aa:	4770      	bx	lr

000dc0ac <__retarget_lock_release_recursive>:
   dc0ac:	4770      	bx	lr

000dc0ae <link_code_end>:
	...

000dc0b0 <dynalib_user>:
   dc0b0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc0c0:	0000 0000 7246 6d6f 2520 2073 6f74 2520     ....From %s to %
   dc0d0:	0073 7453 7461 2065 7254 6e61 6973 6974     s.State Transiti
   dc0e0:	6e6f 7500 736e 6375 6563 7373 7566 006c     on.unsuccessful.
   dc0f0:	6553 646e 6e69 2067 6f74 4720 7461 7765     Sending to Gatew
   dc100:	7961 7300 6e65 6964 676e 6d20 7365 6173     ay.sending messa
   dc110:	6567 2520 0064 654d 7373 6761 2065 6573     ge %d.Message se
   dc120:	746e 5200 7365 6f70 736e 3a65 3020 2578     nt.Response: 0x%
   dc130:	3230 2078 7372 6973 253d 2064 202d 6564     02x rssi=%d - de
   dc140:	696c 6576 7972 2520 0073 6954 656d 6920     livery %s.Time i
   dc150:	3a73 2520 756c 5400 6d69 2065 6573 2074     s: %lu.Time set 
   dc160:	6f74 2520 756c 6c20 636f 6c61 7420 6d69     to %lu local tim
   dc170:	2065 7369 2520 0073 654e 7478 7220 7065     e is %s.Next rep
   dc180:	726f 2074 6e69 2520 2075 696d 756e 6574     ort in %u minute
   dc190:	0073 3630 303a 3a30 3030 3200 3a32 3935     s.06:00:00.22:59
   dc1a0:	353a 0039 6f4e 7220 7065 796c 202c 7261     :59.No reply, ar
   dc1b0:	2065 6874 2065 6167 6574 6177 7379 7220     e the gateways r
   dc1c0:	6e75 696e 676e 003f 6573 646e 6f74 6157     unning?.sendtoWa
   dc1d0:	7469 6620 6961 656c 2e64 6120 6572 7420     it failed. are t
   dc1e0:	6568 6720 7461 7765 7961 2073 7572 6e6e     he gateways runn
   dc1f0:	6e69 3f67 6e00 746f 7620 6c61 6469 6900     ing?.not valid.i
   dc200:	696e 2074 6166 6c69 6465 4500 6172 6973     nit failed.Erasi
   dc210:	676e 4620 4152 004d 6f4c 6461 6e69 2067     ng FRAM.Loading 
   dc220:	6874 2065 7973 5373 6174 7574 2073 7261     the sysStatus ar
   dc230:	6172 0079 7453 7261 7574 2070 6f63 706d     ray.Startup comp
   dc240:	656c 6574 2d20 6220 7461 6574 7972 2520     lete - battery %
   dc250:	2e34 6632 2525 202c 6c63 636f 206b 7369     4.2f%%, clock is
   dc260:	2520 0073 5345 3554 4445 2c54 334d 322e      %s.EST5EDT,M3.2
   dc270:	302e 322f 303a 3a30 3030 4d2c 3131 312e     .0/2:00:00,M11.1
   dc280:	302e 322f 303a 3a30 3030 6c00 636f 6c61     .0/2:00:00.local
   dc290:	7420 6d69 3a65 2520 0073 6974 656d 6f20      time: %s.time o
   dc2a0:	2066 656e 7478 6520 6576 746e 6920 3a73     f next event is:
   dc2b0:	2520 2073 6877 6369 2068 7369 2520 756c      %s which is %lu
   dc2c0:	7320 6365 6e6f 7364 6120 6177 0079 6f47      seconds away.Go
   dc2d0:	6e69 2067 6f74 7220 7065 726f 6974 676e     ing to reporting
   dc2e0:	6220 7361 6465 6f20 206e 6373 6568 7564      based on schedu
   dc2f0:	656c 4700 696f 676e 7420 206f 6572 6f70     le.Going to repo
   dc300:	7472 6e69 2067 6e6f 7220 7365 7563 2065     rting on rescue 
   dc310:	6f6d 6564 5300 656c 7065 6620 726f 2520     mode.Sleep for %
   dc320:	2069 6573 6f63 646e 0073 6441 6964 676e     i seconds.Adding
   dc330:	6120 7220 6e61 6f64 206d 6564 616c 2079      a random delay 
   dc340:	666f 2520 2069 6573 6f63 646e 0073 0000     of %i seconds...

000dc350 <_ZTVN5spark10LogHandlerE>:
	...
   dc360:	40a5 000d 40c9 000d                         .@...@..

000dc368 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dc370:	4115 000d 4149 000d a25d 000d 40cb 000d     .A..IA..]....@..

000dc380 <_ZTV8MB85RC64>:
	...
   dc388:	40ed 000d 4101 000d 6bfd 000d 6c93 000d     .@...A...k...l..
   dc398:	6d15 000d                                   .m..

000dc39c <_ZL17FRAMversionNumber>:
   dc39c:	0001 0000 6166 6c69 6465 7420 206f 6572     ....failed to re
   dc3ac:	6461 7220 6765 6441 7264 253d 3230 2078     ad regAddr=%02x 
   dc3bc:	6f63 6e75 3d74 7525 6600 6961 656c 2064     count=%u.failed 
   dc3cc:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   dc3dc:	3025 7832 7320 6174 3d74 6425 4600 554f     %02x stat=%d.FOU
   dc3ec:	2054 6964 2064 6f6e 2074 6f67 4820 4749     T did not go HIG
   dc3fc:	0048 6f6e 2074 6564 6574 7463 6465 6600     H.not detected.f
   dc40c:	6961 656c 2064 6f74 7720 6972 6574 7220     ailed to write r
   dc41c:	6765 6441 7264 253d 3230 2078 7473 7461     egAddr=%02x stat
   dc42c:	253d 0064 6573 5774 5444 2520 0064 6177     =%d.setWDT %d.wa
   dc43c:	6374 6468 676f 6320 656c 7261 6465 6220     tchdog cleared b
   dc44c:	6552 7573 746c 253d 0064 6177 6374 6468     Result=%d.watchd
   dc45c:	676f 7320 7465 6620 756f 5372 6365 3d73     og set fourSecs=
   dc46c:	6425 6220 6552 7573 746c 253d 0064 4157     %d bResult=%d.WA
   dc47c:	4354 4448 474f 4400 4545 5f50 4f50 4557     TCHDOG.DEEP_POWE
   dc48c:	5f52 4f44 4e57 4300 554f 544e 4f44 4e57     R_DOWN.COUNTDOWN
   dc49c:	545f 4d49 5245 4100 414c 4d52 6600 6961     _TIMER.ALARM.fai
   dc4ac:	756c 6572 6920 206e 7075 6164 6574 6157     lure in updateWa
   dc4bc:	656b 6552 7361 6e6f 2520 0064 6177 656b     keReason %d.wake
   dc4cc:	7220 6165 6f73 206e 203d 7325 2500 3430      reason = %s.%04
   dc4dc:	2d64 3025 6432 252d 3230 2064 3025 6432     d-%02d-%02d %02d
   dc4ec:	253a 3230 3a64 3025 6432 6700 7465 7452     :%02d:%02d.getRt
   dc4fc:	4163 5473 206d 7325 7300 7465 7320 7379     cAsTm %s.set sys
   dc50c:	6574 206d 6c63 636f 206b 7266 6d6f 5220     tem clock from R
   dc51c:	4354 2520 0073 6166 6c69 6465 7420 206f     TC %s.failed to 
   dc52c:	6564 6574 7463 4120 3142 3038 0035 6573     detect AB1805.se
   dc53c:	5274 6374 7341 6d54 2520 0073 6166 6c69     tRtcAsTm %s.fail
   dc54c:	7275 2065 6e69 7320 7465 7452 4663 6f72     ure in setRtcFro
   dc55c:	546d 206d 6425 7300 7465 5220 4354 6620     mTm %d.set RTC f
   dc56c:	6f72 206d 6c63 756f 2064 7325 6100 7070     rom cloud %s.app
   dc57c:	612e 3162 3038 0035                         .ab1805.

000dc584 <_ZTV6AB1805>:
	...
   dc58c:	4d29 000d 4d2b 000d 518b 000d 5211 000d     )M..+M...Q...R..
   dc59c:	6425 253a 3a64 6425 3000 3a30 3030 303a     %d:%d:%d.00:00:0
   dc5ac:	0030 3332 353a 3a39 3935 4d00 6425 252e     0.23:59:59.M%d.%
   dc5bc:	2e64 6425 2c00 5a00 2500 302b 6433 253a     d.%d.,.Z.%+03d:%
   dc5cc:	3230 0075 6576 7463 726f 3a3a 4d5f 725f     02u.vector::_M_r
   dc5dc:	6165 6c6c 636f 695f 736e 7265 0074 0000     ealloc_insert...

000dc5ec <_ZTV9LocalTime>:
	...
   dc5f4:	567d 000d 5695 000d                         }V...V..

000dc5fc <_ZTV12LocalTimeHMS>:
	...
   dc604:	561d 000d 562f 000d                         .V../V..

000dc60c <_ZTV15LocalTimeChange>:
	...
   dc614:	561f 000d 563d 000d                         .V..=V..

000dc61c <_ZTV22LocalTimePosixTimezone>:
	...
   dc624:	564d 000d 5669 000d 7277 7469 4465 7461     MV..iV..writeDat
   dc634:	2061 6166 6c69 6465 6420 7275 6e69 2067     a failed during 
   dc644:	7265 7361 2065 7266 6d61 6441 7264 253d     erase framAddr=%
   dc654:	0075 0000                                   u...

000dc658 <_ZTV6MB85RC>:
	...
   dc660:	6b4b 000d 6b4d 000d 6bfd 000d 6c93 000d     Kk..Mk...k...l..
   dc670:	6d15 000d                                   .m..

000dc674 <_ZTV15RHGenericDriver>:
	...
   dc684:	6ecd 000d 40a5 000d 40a5 000d 40a5 000d     .n...@...@...@..
   dc694:	40a5 000d 6f2f 000d 6ed1 000d 6f7f 000d     .@../o...n...o..
   dc6a4:	6f4d 000d 6fa3 000d 6edb 000d 6ee3 000d     Mo...o...n...n..
   dc6b4:	6ee7 000d 6eeb 000d 6eef 000d 6ef3 000d     .n...n...n...n..
   dc6c4:	6edf 000d 6eff 000d 6f03 000d 6f07 000d     .n...n...o...o..
   dc6d4:	6f0b 000d 6f0f 000d 6f15 000d 6f19 000d     .o...o...o...o..
   dc6e4:	6edb 000d 6f1d 000d 6f23 000d 6f29 000d     .n...o..#o..)o..

000dc6f4 <_ZTV12RHGenericSPI>:
	...
   dc6fc:	40a5 000d 7001 000d 7003 000d 40a5 000d     .@...p...p...@..
   dc70c:	40a5 000d 700b 000d 700f 000d 7013 000d     .@...p...p...p..
   dc71c:	7005 000d 7007 000d 7009 000d 6564 6166     .p...p...p..defa
   dc72c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   dc73c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   dc74c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   dc75c:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000dc76c <_ZTVN8particle11SPISettingsE>:
	...
   dc774:	7059 000d 702d 000d 702f 000d               Yp..-p../p..

000dc780 <_ZTV13RHHardwareSPI>:
	...
   dc788:	710d 000d 7121 000d 712f 000d 713d 000d     .q..!q../q..=q..
   dc798:	71a9 000d 700b 000d 700f 000d 7013 000d     .q...p...p...p..
   dc7a8:	71b7 000d 71cb 000d 71d9 000d               .q...q...q..

000dc7b4 <_ZTV6RHMesh>:
	...
   dc7bc:	72a9 000d 75b1 000d 7205 000d 71f1 000d     .r...u...r...q..

000dc7cc <_ZTV8RHRouter>:
	...
   dc7d4:	7817 000d 785b 000d                         .x..[x..

000dc7dc <_ZTV11RHSPIDriver>:
	...
   dc7ec:	7af9 000d 40a5 000d 40a5 000d 40a5 000d     .z...@...@...@..
   dc7fc:	40a5 000d 6f2f 000d 6ed1 000d 6f7f 000d     .@../o...n...o..
   dc80c:	6f4d 000d 6fa3 000d 6edb 000d 6ee3 000d     Mo...o...n...n..
   dc81c:	6ee7 000d 6eeb 000d 6eef 000d 6ef3 000d     .n...n...n...n..
   dc82c:	6edf 000d 6eff 000d 6f03 000d 6f07 000d     .n...n...o...o..
   dc83c:	6f0b 000d 6f0f 000d 6f15 000d 6f19 000d     .o...o...o...o..
   dc84c:	6edb 000d 6f1d 000d 6f23 000d 6f29 000d     .n...o..#o..)o..
   dc85c:	7b25 000d 7b2f 000d                         %{../{..

000dc864 <_ZL18MODEM_CONFIG_TABLE>:
   dc864:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000dc874 <_ZTV7RH_RF95>:
	...
   dc87c:	7c97 000d 7ccf 000d 8191 000d 7ff7 000d     .|...|..........
   dc88c:	7d05 000d 803f 000d 7c93 000d 6f2f 000d     .}..?....|../o..
   dc89c:	6ed1 000d 6f7f 000d 6f4d 000d 6fa3 000d     .n...o..Mo...o..
   dc8ac:	7c99 000d 6ee3 000d 6ee7 000d 6eeb 000d     .|...n...n...n..
   dc8bc:	6eef 000d 6ef3 000d 6edf 000d 6eff 000d     .n...n...n...n..
   dc8cc:	6f03 000d 6f07 000d 6f0b 000d 6f0f 000d     .o...o...o...o..
   dc8dc:	6f15 000d 6f19 000d 7cdf 000d 6f1d 000d     .o...o...|...o..
   dc8ec:	6f23 000d 6f29 000d 7b25 000d 7b2f 000d     #o..)o..%{../{..
   dc8fc:	7c8f 000d                                   .|..

000dc900 <_ZTVN5spark13CellularClassE>:
	...
   dc908:	8a3f 000d 8a35 000d 8a2b 000d 89e1 000d     ?...5...+.......
   dc918:	8a1f 000d 8a13 000d a5b5 000d a5bd 000d     ................
   dc928:	8a07 000d 89ff 000d 89f5 000d 89eb 000d     ................
   dc938:	a5ed 000d                                   ....

000dc93c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc944:	8a79 000d 8a7f 000d 8acf 000d 8a8d 000d     y...............
   dc954:	8a7b 000d                                   {...

000dc958 <_ZTVN5spark13EthernetClassE>:
	...
   dc960:	9047 000d 903d 000d 9033 000d 9029 000d     G...=...3...)...
   dc970:	901d 000d 9011 000d a5b5 000d a5bd 000d     ................
   dc980:	9005 000d 8ffd 000d 8ff3 000d 8fe9 000d     ................
   dc990:	a5ed 000d                                   ....

000dc994 <_ZTV7TwoWire>:
	...
   dc99c:	9065 000d 90af 000d 9087 000d 9067 000d     e...........g...
   dc9ac:	908f 000d 9097 000d 909f 000d 90a7 000d     ................

000dc9bc <_ZTV9IPAddress>:
	...
   dc9c4:	91e1 000d 91d1 000d 91d3 000d 2575 3430     ............u%04
   dc9d4:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   dc9e4:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   dc9f4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dca04:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   dca14:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   dca24:	7465 6961 736c 3d20 0020 0a0d 6d00 6300     etails = ....m.c
   dca34:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   dca44:	6174 6c69 0000 0000                         tail....

000dca4c <_ZTVN5spark16JSONStreamWriterE>:
	...
   dca54:	969d 000d 96c3 000d 9681 000d 92e1 000d     ................

000dca64 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dca6c:	9a79 000d 9a91 000d a25d 000d 40cb 000d     y.......]....@..

000dca7c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dca84:	9aa5 000d 9ab9 000d a401 000d 9689 000d     ................

000dca94 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dca9c:	969b 000d 96d1 000d a199 000d 968b 000d     ................

000dcaac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dcab4:	9699 000d 96df 000d 99c1 000d 96fd 000d     ................

000dcac4 <_ZTVN5spark12NetworkClassE>:
	...
   dcacc:	a575 000d a57f 000d a589 000d a593 000d     u...............
   dcadc:	a59d 000d a5a9 000d a5b5 000d a5bd 000d     ................
   dcaec:	a5c5 000d a5d1 000d a5d9 000d a5e3 000d     ................
   dcafc:	a5ed 000d                                   ....

000dcb00 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dcb00:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   dcb10:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   dcb20:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   dcb30:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   dcb40:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   dcb50:	0065 0000                                   e...

000dcb54 <_ZTV11USARTSerial>:
	...
   dcb5c:	af2d 000d af9b 000d af73 000d a6d5 000d     -.......s.......
   dcb6c:	af43 000d af5f 000d af51 000d af6d 000d     C..._...Q...m...
   dcb7c:	af2f 000d af35 000d                         /...5...

000dcb84 <_ZTV9USBSerial>:
	...
   dcb8c:	b03b 000d b0a3 000d b079 000d a6d5 000d     ;.......y.......
   dcb9c:	b06b 000d b03d 000d b04d 000d b09d 000d     k...=...M.......
   dcbac:	b05d 000d b035 000d                         ]...5...

000dcbb4 <_ZSt7nothrow>:
   dcbb4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   dcbc4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000dcbd5 <day_name.6145>:
   dcbd5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dcbe5:	6972 6153                                    riSat

000dcbea <mon_name.6146>:
   dcbea:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dcbfa:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dcc0a:	4476 6365                                   vDec

000dcc0e <_ctype_>:
   dcc0e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dcc1e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dcc2e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dcc3e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dcc4e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dcc5e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dcc6e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dcc7e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dcc8e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dcd0f <link_const_variable_data_end>:
	...

000dcd10 <link_constructors_location>:
   dcd10:	000d46f9 	.word	0x000d46f9
   dcd14:	000d560d 	.word	0x000d560d
   dcd18:	000d71e1 	.word	0x000d71e1
   dcd1c:	000d89d1 	.word	0x000d89d1
   dcd20:	000d8a49 	.word	0x000d8a49
   dcd24:	000d9051 	.word	0x000d9051
   dcd28:	000da24d 	.word	0x000da24d
   dcd2c:	000da6c1 	.word	0x000da6c1
   dcd30:	000da815 	.word	0x000da815
   dcd34:	000dac8d 	.word	0x000dac8d
   dcd38:	000daf19 	.word	0x000daf19

000dcd3c <link_constructors_end>:
   dcd3c:	00000000 	.word	0x00000000
