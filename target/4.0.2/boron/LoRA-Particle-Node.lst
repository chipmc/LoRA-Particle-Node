
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.2/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ba60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bfa80  000bfa80  0000fa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bfaa4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000018c  2003defc  000bfaa8  0002defc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000768  2003e088  2003e088  0003e088  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bfc34  000bfc34  0002fc34  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bfc60  000bfc60  0002fc60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001f7928  00000000  00000000  0002fc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00023d04  00000000  00000000  0022758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004ff38  00000000  00000000  0024b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004128  00000000  00000000  0029b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e1e0  00000000  00000000  0029f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00053e95  00000000  00000000  002ad4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00075481  00000000  00000000  00301365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d765  00000000  00000000  003767e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bd14  00000000  00000000  004c3f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 ff0d 	bl	bde50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 ff2f 	bl	bdea0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003defc 	.word	0x2003defc
   b404c:	000bfaa8 	.word	0x000bfaa8
   b4050:	2003e088 	.word	0x2003e088
   b4054:	2003e088 	.word	0x2003e088
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 ff75 	bl	bbf50 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bfa44 	.word	0x000bfa44
   b4080:	000bfa7c 	.word	0x000bfa7c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bff8 	b.w	b5078 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9df 	bl	b444c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 bf15 	b.w	bbec0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 ba91 	b.w	b95bc <malloc>

000b409a <_Znaj>:
   b409a:	f005 ba8f 	b.w	b95bc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 ba95 	b.w	b95cc <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 f928 	bl	b9300 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8f51 	.word	0x000b8f51
   b40b8:	000be258 	.word	0x000be258

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z18outOfMemoryHandleryi+0x8>)
   b40da:	601a      	str	r2, [r3, #0]
}
   b40dc:	4770      	bx	lr
   b40de:	bf00      	nop
   b40e0:	2003defc 	.word	0x2003defc

000b40e4 <_Z21transmitDelayTimerISRv>:

void transmitDelayTimerISR() {
	state = LoRA_TRANSMISSION_STATE;										// Time for our node to transmit
   b40e4:	4b01      	ldr	r3, [pc, #4]	; (b40ec <_Z21transmitDelayTimerISRv+0x8>)
   b40e6:	2204      	movs	r2, #4
   b40e8:	701a      	strb	r2, [r3, #0]
}
   b40ea:	4770      	bx	lr
   b40ec:	2003e12e 	.word	0x2003e12e

000b40f0 <_Z13userSwitchISRv>:
	LoRA_Functions::instance().sleepLoRaRadio();							// Done with the radio - shut it off
	state = SLEEPING_STATE;													// Go back to sleep
}

void userSwitchISR() {
	userSwitchDectected = true;
   b40f0:	4b01      	ldr	r3, [pc, #4]	; (b40f8 <_Z13userSwitchISRv+0x8>)
   b40f2:	2201      	movs	r2, #1
   b40f4:	701a      	strb	r2, [r3, #0]
}
   b40f6:	4770      	bx	lr
   b40f8:	2003e14c 	.word	0x2003e14c

000b40fc <_Z9sensorISRv>:

void sensorISR()
{
   b40fc:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b40fe:	4c08      	ldr	r4, [pc, #32]	; (b4120 <_Z9sensorISRv+0x24>)
   b4100:	7823      	ldrb	r3, [r4, #0]
   b4102:	b12b      	cbz	r3, b4110 <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b4104:	4b07      	ldr	r3, [pc, #28]	; (b4124 <_Z9sensorISRv+0x28>)
   b4106:	2201      	movs	r2, #1
   b4108:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b410a:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b410c:	7023      	strb	r3, [r4, #0]
}
   b410e:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b4110:	f001 fe82 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4114:	f001 ff76 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
   b4118:	2801      	cmp	r0, #1
   b411a:	d0f3      	beq.n	b4104 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b411c:	2301      	movs	r3, #1
   b411e:	e7f5      	b.n	b410c <_Z9sensorISRv+0x10>
   b4120:	2003e0b0 	.word	0x2003e0b0
   b4124:	2003e12d 	.word	0x2003e12d

000b4128 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4128:	6943      	ldr	r3, [r0, #20]
   b412a:	b113      	cbz	r3, b4132 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b412c:	6983      	ldr	r3, [r0, #24]
   b412e:	300c      	adds	r0, #12
   b4130:	4718      	bx	r3
            callback();
        }
    }
   b4132:	4770      	bx	lr

000b4134 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4134:	b530      	push	{r4, r5, lr}
   b4136:	b085      	sub	sp, #20
   b4138:	4604      	mov	r4, r0
   b413a:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b413c:	b160      	cbz	r0, b4158 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b413e:	6840      	ldr	r0, [r0, #4]
   b4140:	b150      	cbz	r0, b4158 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4142:	6885      	ldr	r5, [r0, #8]
   b4144:	b145      	cbz	r5, b4158 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4146:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b414a:	e9cd 2300 	strd	r2, r3, [sp]
   b414e:	68c4      	ldr	r4, [r0, #12]
   b4150:	ab01      	add	r3, sp, #4
   b4152:	466a      	mov	r2, sp
   b4154:	a902      	add	r1, sp, #8
   b4156:	47a0      	blx	r4
    }
   b4158:	b005      	add	sp, #20
   b415a:	bd30      	pop	{r4, r5, pc}

000b415c <_Z25listeningDurationTimerISRv>:
void listeningDurationTimerISR() {
   b415c:	b508      	push	{r3, lr}
	LoRA_Functions::instance().sleepLoRaRadio();							// Done with the radio - shut it off
   b415e:	f001 f8e1 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b4162:	f001 f901 	bl	b5368 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
	state = SLEEPING_STATE;													// Go back to sleep
   b4166:	4b02      	ldr	r3, [pc, #8]	; (b4170 <_Z25listeningDurationTimerISRv+0x14>)
   b4168:	2203      	movs	r2, #3
   b416a:	701a      	strb	r2, [r3, #0]
}
   b416c:	bd08      	pop	{r3, pc}
   b416e:	bf00      	nop
   b4170:	2003e12e 	.word	0x2003e12e

000b4174 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4174:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4176:	2100      	movs	r1, #0
   b4178:	4604      	mov	r4, r0
   b417a:	4608      	mov	r0, r1
   b417c:	f004 fe78 	bl	b8e70 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4180:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4182:	4620      	mov	r0, r4
   b4184:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4186:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4188:	f004 fe8a 	bl	b8ea0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b418c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b418e:	b10c      	cbz	r4, b4194 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4190:	2301      	movs	r3, #1
   b4192:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4194:	2100      	movs	r1, #0
   b4196:	2001      	movs	r0, #1
   b4198:	f004 fe6a 	bl	b8e70 <os_thread_scheduling>
            }
        }
        if (t) {
   b419c:	b12c      	cbz	r4, b41aa <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b419e:	6823      	ldr	r3, [r4, #0]
   b41a0:	4620      	mov	r0, r4
   b41a2:	689b      	ldr	r3, [r3, #8]
   b41a4:	4798      	blx	r3
            t->running = false;
   b41a6:	2300      	movs	r3, #0
   b41a8:	7123      	strb	r3, [r4, #4]
        }
    }
   b41aa:	b002      	add	sp, #8
   b41ac:	bd10      	pop	{r4, pc}

000b41ae <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b41ae:	b530      	push	{r4, r5, lr}
   b41b0:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b41b2:	6800      	ldr	r0, [r0, #0]
   b41b4:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b41b6:	9301      	str	r3, [sp, #4]
   b41b8:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b41bc:	6883      	ldr	r3, [r0, #8]
   b41be:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b41c2:	b90b      	cbnz	r3, b41c8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b41c4:	f008 f862 	bl	bc28c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41c8:	68c3      	ldr	r3, [r0, #12]
   b41ca:	aa01      	add	r2, sp, #4
   b41cc:	a902      	add	r1, sp, #8
   b41ce:	4798      	blx	r3
      }
   b41d0:	b005      	add	sp, #20
   b41d2:	bd30      	pop	{r4, r5, pc}

000b41d4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41d4:	2a01      	cmp	r2, #1
   b41d6:	d102      	bne.n	b41de <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41d8:	6001      	str	r1, [r0, #0]
      }
   b41da:	2000      	movs	r0, #0
   b41dc:	4770      	bx	lr
	  switch (__op)
   b41de:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41e0:	bf04      	itt	eq
   b41e2:	680b      	ldreq	r3, [r1, #0]
   b41e4:	6003      	streq	r3, [r0, #0]
	      break;
   b41e6:	e7f8      	b.n	b41da <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41e8 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41e8:	6803      	ldr	r3, [r0, #0]
   b41ea:	6812      	ldr	r2, [r2, #0]
   b41ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   b41f0:	4718      	bx	r3

000b41f2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41f2:	2a01      	cmp	r2, #1
   b41f4:	d102      	bne.n	b41fc <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41f6:	6001      	str	r1, [r0, #0]
      }
   b41f8:	2000      	movs	r0, #0
   b41fa:	4770      	bx	lr
	  switch (__op)
   b41fc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41fe:	bf04      	itt	eq
   b4200:	680b      	ldreq	r3, [r1, #0]
   b4202:	6003      	streq	r3, [r0, #0]
	      break;
   b4204:	e7f8      	b.n	b41f8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4206 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
   b4206:	6803      	ldr	r3, [r0, #0]
   b4208:	4718      	bx	r3

000b420a <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b420a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b420c:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b420e:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4210:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4212:	b130      	cbz	r0, b4222 <_ZN5Timer5startEj.isra.0+0x18>
   b4214:	2300      	movs	r3, #0
   b4216:	e9cd 3300 	strd	r3, r3, [sp]
   b421a:	461a      	mov	r2, r3
   b421c:	2102      	movs	r1, #2
   b421e:	f004 fe47 	bl	b8eb0 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4222:	68a0      	ldr	r0, [r4, #8]
   b4224:	b130      	cbz	r0, b4234 <_ZN5Timer5startEj.isra.0+0x2a>
   b4226:	2300      	movs	r3, #0
   b4228:	e9cd 5300 	strd	r5, r3, [sp]
   b422c:	461a      	mov	r2, r3
   b422e:	4619      	mov	r1, r3
   b4230:	f004 fe3e 	bl	b8eb0 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4234:	b003      	add	sp, #12
   b4236:	bd30      	pop	{r4, r5, pc}

000b4238 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4238:	4b0a      	ldr	r3, [pc, #40]	; (b4264 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b423a:	b510      	push	{r4, lr}
   b423c:	4604      	mov	r4, r0
   b423e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4240:	f006 f8ee 	bl	ba420 <_ZN5spark10LogManager8instanceEv>
   b4244:	4621      	mov	r1, r4
   b4246:	f006 fb26 	bl	ba896 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b424a:	f007 fdf1 	bl	bbe30 <_Z16_fetch_usbserialv>
   b424e:	f007 fde1 	bl	bbe14 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4252:	4620      	mov	r0, r4
   b4254:	4b04      	ldr	r3, [pc, #16]	; (b4268 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4256:	f840 3b04 	str.w	r3, [r0], #4
   b425a:	f006 f9b7 	bl	ba5cc <_ZN5spark6detail9LogFilterD1Ev>
    }
   b425e:	4620      	mov	r0, r4
   b4260:	bd10      	pop	{r4, pc}
   b4262:	bf00      	nop
   b4264:	000be7c0 	.word	0x000be7c0
   b4268:	000be7a8 	.word	0x000be7a8

000b426c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b426c:	b510      	push	{r4, lr}
   b426e:	4604      	mov	r4, r0
    }
   b4270:	f7ff ffe2 	bl	b4238 <_ZN5spark16SerialLogHandlerD1Ev>
   b4274:	4620      	mov	r0, r4
   b4276:	2124      	movs	r1, #36	; 0x24
   b4278:	f7ff ff11 	bl	b409e <_ZdlPvj>
   b427c:	4620      	mov	r0, r4
   b427e:	bd10      	pop	{r4, pc}

000b4280 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4280:	b510      	push	{r4, lr}
      if (_M_manager)
   b4282:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4284:	4604      	mov	r4, r0
      if (_M_manager)
   b4286:	b113      	cbz	r3, b428e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4288:	2203      	movs	r2, #3
   b428a:	4601      	mov	r1, r0
   b428c:	4798      	blx	r3
    }
   b428e:	4620      	mov	r0, r4
   b4290:	bd10      	pop	{r4, pc}

000b4292 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4292:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4294:	4604      	mov	r4, r0
   b4296:	b138      	cbz	r0, b42a8 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4298:	f7ff fff2 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
   b429c:	4620      	mov	r0, r4
   b429e:	2110      	movs	r1, #16
        };
   b42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b42a4:	f7ff befb 	b.w	b409e <_ZdlPvj>
        };
   b42a8:	bd10      	pop	{r4, pc}
	...

000b42ac <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b42ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ae:	4b13      	ldr	r3, [pc, #76]	; (b42fc <_ZN5TimerD1Ev+0x50>)
   b42b0:	6003      	str	r3, [r0, #0]
   b42b2:	4604      	mov	r4, r0
        if (handle) {
   b42b4:	6880      	ldr	r0, [r0, #8]
   b42b6:	b1c8      	cbz	r0, b42ec <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42b8:	2500      	movs	r5, #0
   b42ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b42be:	e9cd 3500 	strd	r3, r5, [sp]
   b42c2:	2102      	movs	r1, #2
   b42c4:	462b      	mov	r3, r5
   b42c6:	462a      	mov	r2, r5
   b42c8:	f004 fdf2 	bl	b8eb0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b42cc:	68a0      	ldr	r0, [r4, #8]
   b42ce:	4629      	mov	r1, r5
   b42d0:	f004 fe1e 	bl	b8f10 <os_timer_set_id>
            while (running) {
   b42d4:	7923      	ldrb	r3, [r4, #4]
   b42d6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b42da:	b113      	cbz	r3, b42e2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b42dc:	f004 fdc0 	bl	b8e60 <os_thread_yield>
            while (running) {
   b42e0:	e7f8      	b.n	b42d4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b42e2:	68a0      	ldr	r0, [r4, #8]
   b42e4:	4629      	mov	r1, r5
   b42e6:	f004 fdd3 	bl	b8e90 <os_timer_destroy>
            handle = nullptr;
   b42ea:	60a5      	str	r5, [r4, #8]
   b42ec:	f104 000c 	add.w	r0, r4, #12
   b42f0:	f7ff ffc6 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
    }
   b42f4:	4620      	mov	r0, r4
   b42f6:	b003      	add	sp, #12
   b42f8:	bd30      	pop	{r4, r5, pc}
   b42fa:	bf00      	nop
   b42fc:	000be794 	.word	0x000be794

000b4300 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4300:	b510      	push	{r4, lr}
   b4302:	4604      	mov	r4, r0
    }
   b4304:	f7ff ffd2 	bl	b42ac <_ZN5TimerD1Ev>
   b4308:	4620      	mov	r0, r4
   b430a:	211c      	movs	r1, #28
   b430c:	f7ff fec7 	bl	b409e <_ZdlPvj>
   b4310:	4620      	mov	r0, r4
   b4312:	bd10      	pop	{r4, pc}

000b4314 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b4316:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4318:	4605      	mov	r5, r0
   b431a:	460f      	mov	r7, r1
   b431c:	4616      	mov	r6, r2
        if (valid_) {
   b431e:	b18b      	cbz	r3, b4344 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4320:	6803      	ldr	r3, [r0, #0]
   b4322:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4324:	b183      	cbz	r3, b4348 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4326:	889a      	ldrh	r2, [r3, #4]
   b4328:	2a01      	cmp	r2, #1
   b432a:	d006      	beq.n	b433a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b432c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b432e:	e7f9      	b.n	b4324 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4330:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4332:	b14b      	cbz	r3, b4348 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4334:	889a      	ldrh	r2, [r3, #4]
   b4336:	2a01      	cmp	r2, #1
   b4338:	d1fa      	bne.n	b4330 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b433a:	b12b      	cbz	r3, b4348 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b433c:	899a      	ldrh	r2, [r3, #12]
   b433e:	42ba      	cmp	r2, r7
   b4340:	d1f6      	bne.n	b4330 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b4342:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b4344:	4628      	mov	r0, r5
   b4346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4348:	490a      	ldr	r1, [pc, #40]	; (b4374 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b434a:	2010      	movs	r0, #16
   b434c:	f007 ff9a 	bl	bc284 <_ZnwjRKSt9nothrow_t>
   b4350:	4604      	mov	r4, r0
   b4352:	b168      	cbz	r0, b4370 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b4354:	2210      	movs	r2, #16
   b4356:	2100      	movs	r1, #0
   b4358:	f009 fda2 	bl	bdea0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b435c:	4b06      	ldr	r3, [pc, #24]	; (b4378 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b435e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4360:	2301      	movs	r3, #1
   b4362:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4364:	692b      	ldr	r3, [r5, #16]
   b4366:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4368:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b436a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b436c:	612c      	str	r4, [r5, #16]
   b436e:	e7e9      	b.n	b4344 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4370:	7528      	strb	r0, [r5, #20]
                return *this;
   b4372:	e7e7      	b.n	b4344 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b4374:	000bf804 	.word	0x000bf804
   b4378:	00030010 	.word	0x00030010

000b437c <_ZN11SystemClass6millisEv>:
        return hal_timer_millis(nullptr);
   b437c:	2000      	movs	r0, #0
   b437e:	f004 bdff 	b.w	b8f80 <hal_timer_millis>
	...

000b4384 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b4384:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4386:	f004 fdeb 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b438a:	4b03      	ldr	r3, [pc, #12]	; (b4398 <_ZN10CloudClass7processEv+0x14>)
   b438c:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b438e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b4392:	f005 b873 	b.w	b947c <spark_process>
   b4396:	bf00      	nop
   b4398:	2003e710 	.word	0x2003e710

000b439c <_ZNK5Timer8isActiveEv>:
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   b439c:	b508      	push	{r3, lr}
    bool isValid() const { return handle!=nullptr; }
   b439e:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   b43a0:	b128      	cbz	r0, b43ae <_ZNK5Timer8isActiveEv+0x12>
   b43a2:	2100      	movs	r1, #0
   b43a4:	f004 fdac 	bl	b8f00 <os_timer_is_active>
   b43a8:	3800      	subs	r0, #0
   b43aa:	bf18      	it	ne
   b43ac:	2001      	movne	r0, #1
   b43ae:	bd08      	pop	{r3, pc}

000b43b0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b43b0:	b40e      	push	{r1, r2, r3}
   b43b2:	b500      	push	{lr}
   b43b4:	b08c      	sub	sp, #48	; 0x30
   b43b6:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b43b8:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b43bc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b43c0:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b43c2:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b43c6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b43c8:	6801      	ldr	r1, [r0, #0]
   b43ca:	aa04      	add	r2, sp, #16
   b43cc:	201e      	movs	r0, #30
    attr.flags = 0;
   b43ce:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b43d2:	f004 ffa5 	bl	b9320 <log_message_v>
}
   b43d6:	b00c      	add	sp, #48	; 0x30
   b43d8:	f85d eb04 	ldr.w	lr, [sp], #4
   b43dc:	b003      	add	sp, #12
   b43de:	4770      	bx	lr

000b43e0 <_Z22publishStateTransitionv>:
{
   b43e0:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b43e2:	4d14      	ldr	r5, [pc, #80]	; (b4434 <_Z22publishStateTransitionv+0x54>)
   b43e4:	4c14      	ldr	r4, [pc, #80]	; (b4438 <_Z22publishStateTransitionv+0x58>)
   b43e6:	782b      	ldrb	r3, [r5, #0]
   b43e8:	4e14      	ldr	r6, [pc, #80]	; (b443c <_Z22publishStateTransitionv+0x5c>)
   b43ea:	2b02      	cmp	r3, #2
{
   b43ec:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b43ee:	d117      	bne.n	b4420 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b43f0:	f007 fc1a 	bl	bbc28 <_ZN9TimeClass7isValidEv>
   b43f4:	782a      	ldrb	r2, [r5, #0]
   b43f6:	7833      	ldrb	r3, [r6, #0]
   b43f8:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b43fc:	9200      	str	r2, [sp, #0]
   b43fe:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4402:	b9a0      	cbnz	r0, b442e <_Z22publishStateTransitionv+0x4e>
   b4404:	4a0e      	ldr	r2, [pc, #56]	; (b4440 <_Z22publishStateTransitionv+0x60>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4406:	f44f 7180 	mov.w	r1, #256	; 0x100
   b440a:	a802      	add	r0, sp, #8
   b440c:	f005 f8f6 	bl	b95fc <snprintf>
	oldState = state;
   b4410:	782b      	ldrb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4412:	480c      	ldr	r0, [pc, #48]	; (b4444 <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b4414:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4416:	a902      	add	r1, sp, #8
   b4418:	f7ff ffca 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
}
   b441c:	b042      	add	sp, #264	; 0x108
   b441e:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4420:	782a      	ldrb	r2, [r5, #0]
   b4422:	7833      	ldrb	r3, [r6, #0]
   b4424:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4428:	9200      	str	r2, [sp, #0]
   b442a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b442e:	4a06      	ldr	r2, [pc, #24]	; (b4448 <_Z22publishStateTransitionv+0x68>)
   b4430:	e7e9      	b.n	b4406 <_Z22publishStateTransitionv+0x26>
   b4432:	bf00      	nop
   b4434:	2003e12e 	.word	0x2003e12e
   b4438:	2003df00 	.word	0x2003df00
   b443c:	2003e12c 	.word	0x2003e12c
   b4440:	000be26d 	.word	0x000be26d
   b4444:	2003e654 	.word	0x2003e654
   b4448:	000be28d 	.word	0x000be28d

000b444c <loop>:
void loop() {
   b444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b4450:	4ca1      	ldr	r4, [pc, #644]	; (b46d8 <loop+0x28c>)
   b4452:	7823      	ldrb	r3, [r4, #0]
   b4454:	3b01      	subs	r3, #1
void loop() {
   b4456:	b08c      	sub	sp, #48	; 0x30
   b4458:	2b05      	cmp	r3, #5
   b445a:	f200 80e9 	bhi.w	b4630 <loop+0x1e4>
   b445e:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4462:	0282      	.short	0x0282
   b4464:	00170006 	.word	0x00170006
   b4468:	016b01e8 	.word	0x016b01e8
   b446c:	025e      	.short	0x025e
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b446e:	4a9b      	ldr	r2, [pc, #620]	; (b46dc <loop+0x290>)
   b4470:	7823      	ldrb	r3, [r4, #0]
   b4472:	7812      	ldrb	r2, [r2, #0]
   b4474:	429a      	cmp	r2, r3
   b4476:	d001      	beq.n	b447c <loop+0x30>
   b4478:	f7ff ffb2 	bl	b43e0 <_Z22publishStateTransitionv>
			if (sysStatus.get_alertCodeNode() != 0) state = ERROR_STATE;	// Error - let's handle this first
   b447c:	f001 fccc 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4480:	f001 fdbb 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4484:	2800      	cmp	r0, #0
   b4486:	f000 81ea 	beq.w	b485e <loop+0x412>
					state = ERROR_STATE;									// Likely radio is locked up - reset the device and radio
   b448a:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b448c:	7023      	strb	r3, [r4, #0]
			break;
   b448e:	e0cf      	b.n	b4630 <loop+0x1e4>
			publishStateTransition();              							// Publish state transition
   b4490:	f7ff ffa6 	bl	b43e0 <_Z22publishStateTransitionv>
			if (Time.isValid()) {
   b4494:	f007 fbc8 	bl	bbc28 <_ZN9TimeClass7isValidEv>
   b4498:	253c      	movs	r5, #60	; 0x3c
   b449a:	2800      	cmp	r0, #0
   b449c:	d064      	beq.n	b4568 <loop+0x11c>
				wakeBoundary = (sysStatus.get_frequencyMinutes() * 60UL);
   b449e:	f001 fcbb 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b44a2:	f001 fe2d 	bl	b6100 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44a6:	fb05 f600 	mul.w	r6, r5, r0
				wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b44aa:	f007 fbda 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b44ae:	fbb0 f5f6 	udiv	r5, r0, r6
   b44b2:	fb05 0516 	mls	r5, r5, r6, r0
   b44b6:	1b75      	subs	r5, r6, r5
   b44b8:	42b5      	cmp	r5, r6
   b44ba:	bf28      	it	cs
   b44bc:	4635      	movcs	r5, r6
				time = Time.now() + wakeInSeconds;
   b44be:	f007 fbd0 	bl	bbc62 <_ZN9TimeClass3nowEv>
				Log.info("Sleep for %lu seconds until next event at %s with sensor %s", wakeInSeconds, Time.format(time, "%T").c_str(), (sysStatus.get_openHours()) ? "on" : "off");
   b44c2:	4b87      	ldr	r3, [pc, #540]	; (b46e0 <loop+0x294>)
   b44c4:	4987      	ldr	r1, [pc, #540]	; (b46e4 <loop+0x298>)
   b44c6:	9300      	str	r3, [sp, #0]
   b44c8:	1942      	adds	r2, r0, r5
   b44ca:	2300      	movs	r3, #0
   b44cc:	a808      	add	r0, sp, #32
   b44ce:	f007 fb69 	bl	bbba4 <_ZN9TimeClass6formatExPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b44d2:	9b08      	ldr	r3, [sp, #32]
   b44d4:	9303      	str	r3, [sp, #12]
   b44d6:	f001 fc9f 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b44da:	f001 fcc3 	bl	b5e64 <_ZNK13sysStatusData13get_openHoursEv>
   b44de:	4982      	ldr	r1, [pc, #520]	; (b46e8 <loop+0x29c>)
   b44e0:	4a82      	ldr	r2, [pc, #520]	; (b46ec <loop+0x2a0>)
   b44e2:	9b03      	ldr	r3, [sp, #12]
   b44e4:	2800      	cmp	r0, #0
   b44e6:	bf08      	it	eq
   b44e8:	460a      	moveq	r2, r1
   b44ea:	9200      	str	r2, [sp, #0]
   b44ec:	4880      	ldr	r0, [pc, #512]	; (b46f0 <loop+0x2a4>)
   b44ee:	4981      	ldr	r1, [pc, #516]	; (b46f4 <loop+0x2a8>)
   b44f0:	462a      	mov	r2, r5
   b44f2:	f7ff ff5d 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b44f6:	a808      	add	r0, sp, #32
   b44f8:	f007 f8a2 	bl	bb640 <_ZN6StringD1Ev>
			if (!sysStatus.get_openHours()) if (sysStatus.get_openHours()) sensorControl(sysStatus.get_sensorType(),false);
   b44fc:	f001 fc8c 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4500:	f001 fcb0 	bl	b5e64 <_ZNK13sysStatusData13get_openHoursEv>
   b4504:	4606      	mov	r6, r0
   b4506:	b958      	cbnz	r0, b4520 <loop+0xd4>
   b4508:	f001 fc86 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b450c:	f001 fcaa 	bl	b5e64 <_ZNK13sysStatusData13get_openHoursEv>
   b4510:	b130      	cbz	r0, b4520 <loop+0xd4>
   b4512:	f001 fc81 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4516:	f001 fd75 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
   b451a:	4631      	mov	r1, r6
   b451c:	f001 ffde 	bl	b64dc <_Z13sensorControlib>
        if (valid_) {
   b4520:	4b75      	ldr	r3, [pc, #468]	; (b46f8 <loop+0x2ac>)
   b4522:	7d1a      	ldrb	r2, [r3, #20]
   b4524:	b10a      	cbz	r2, b452a <loop+0xde>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4526:	2202      	movs	r2, #2
   b4528:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b452a:	4b74      	ldr	r3, [pc, #464]	; (b46fc <loop+0x2b0>)
   b452c:	4872      	ldr	r0, [pc, #456]	; (b46f8 <loop+0x2ac>)
   b452e:	f8b3 9000 	ldrh.w	r9, [r3]
   b4532:	2200      	movs	r2, #0
   b4534:	4649      	mov	r1, r9
   b4536:	f7ff feed 	bl	b4314 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b453a:	4b71      	ldr	r3, [pc, #452]	; (b4700 <loop+0x2b4>)
   b453c:	f8b3 a000 	ldrh.w	sl, [r3]
   b4540:	2201      	movs	r2, #1
   b4542:	4651      	mov	r1, sl
   b4544:	f7ff fee6 	bl	b4314 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4548:	7d03      	ldrb	r3, [r0, #20]
   b454a:	4607      	mov	r7, r0
   b454c:	b32b      	cbz	r3, b459a <loop+0x14e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b454e:	6803      	ldr	r3, [r0, #0]
				.duration((wakeInSeconds) * 1000L);							// Configuring sleep
   b4550:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4554:	68db      	ldr	r3, [r3, #12]
   b4556:	fb08 f805 	mul.w	r8, r8, r5
        if (!start) {
   b455a:	b153      	cbz	r3, b4572 <loop+0x126>
            if (start->type == type) {
   b455c:	889a      	ldrh	r2, [r3, #4]
   b455e:	2a04      	cmp	r2, #4
   b4560:	f000 82e4 	beq.w	b4b2c <loop+0x6e0>
            start = start->next;
   b4564:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4566:	e7f8      	b.n	b455a <loop+0x10e>
				Log.info("Time not valid, sleeping for 60 seconds");
   b4568:	4966      	ldr	r1, [pc, #408]	; (b4704 <loop+0x2b8>)
   b456a:	4861      	ldr	r0, [pc, #388]	; (b46f0 <loop+0x2a4>)
   b456c:	f7ff ff20 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b4570:	e7c4      	b.n	b44fc <loop+0xb0>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4572:	4965      	ldr	r1, [pc, #404]	; (b4708 <loop+0x2bc>)
   b4574:	2010      	movs	r0, #16
   b4576:	f007 fe85 	bl	bc284 <_ZnwjRKSt9nothrow_t>
   b457a:	4606      	mov	r6, r0
   b457c:	2800      	cmp	r0, #0
   b457e:	f000 82d3 	beq.w	b4b28 <loop+0x6dc>
   b4582:	2210      	movs	r2, #16
   b4584:	2100      	movs	r1, #0
   b4586:	f009 fc8b 	bl	bdea0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b458a:	4b60      	ldr	r3, [pc, #384]	; (b470c <loop+0x2c0>)
   b458c:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b458e:	2304      	movs	r3, #4
   b4590:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4592:	693b      	ldr	r3, [r7, #16]
            wakeupSource->ms = ms;
   b4594:	e9c6 3802 	strd	r3, r8, [r6, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4598:	613e      	str	r6, [r7, #16]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b459a:	2100      	movs	r1, #0
   b459c:	485c      	ldr	r0, [pc, #368]	; (b4710 <loop+0x2c4>)
   b459e:	f002 faff 	bl	b6ba0 <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b45a2:	4955      	ldr	r1, [pc, #340]	; (b46f8 <loop+0x2ac>)
   b45a4:	a805      	add	r0, sp, #20
   b45a6:	f007 f97d 	bl	bb8a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b45aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b45ae:	4858      	ldr	r0, [pc, #352]	; (b4710 <loop+0x2c4>)
   b45b0:	f002 faf6 	bl	b6ba0 <_ZN6AB18056setWDTEi>
			sensorControl(sysStatus.get_sensorType(),true);					// Enable the sensor
   b45b4:	f001 fc30 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b45b8:	f001 fd24 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
   b45bc:	2101      	movs	r1, #1
   b45be:	f001 ff8d 	bl	b64dc <_Z13sensorControlib>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b45c2:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b45c4:	b1db      	cbz	r3, b45fe <loop+0x1b2>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b45c6:	889a      	ldrh	r2, [r3, #4]
   b45c8:	2a01      	cmp	r2, #1
   b45ca:	d118      	bne.n	b45fe <loop+0x1b2>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b45cc:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b45ce:	4599      	cmp	r9, r3
   b45d0:	d122      	bne.n	b4618 <loop+0x1cc>
        const system_tick_t start = millis();
   b45d2:	f7ff fed3 	bl	b437c <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b45d6:	f242 7610 	movw	r6, #10000	; 0x2710
        const system_tick_t start = millis();
   b45da:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b45dc:	f7ff fece 	bl	b437c <_ZN11SystemClass6millisEv>
   b45e0:	1b40      	subs	r0, r0, r5
   b45e2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b45e6:	42b0      	cmp	r0, r6
   b45e8:	f171 0300 	sbcs.w	r3, r1, #0
   b45ec:	d20a      	bcs.n	b4604 <loop+0x1b8>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b45ee:	f007 fc1f 	bl	bbe30 <_Z16_fetch_usbserialv>
   b45f2:	f007 fc12 	bl	bbe1a <_ZN9USBSerial11isConnectedEv>
   b45f6:	b928      	cbnz	r0, b4604 <loop+0x1b8>
            spark_process();
   b45f8:	f004 ff40 	bl	b947c <spark_process>
        while (_while() && !_condition()) {
   b45fc:	e7ee      	b.n	b45dc <loop+0x190>
            return std::numeric_limits<pin_t>::max();
   b45fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4602:	e7e4      	b.n	b45ce <loop+0x182>
   b4604:	f007 fc14 	bl	bbe30 <_Z16_fetch_usbserialv>
   b4608:	f007 fc07 	bl	bbe1a <_ZN9USBSerial11isConnectedEv>
				Log.info("Woke with user button");
   b460c:	4941      	ldr	r1, [pc, #260]	; (b4714 <loop+0x2c8>)
   b460e:	4838      	ldr	r0, [pc, #224]	; (b46f0 <loop+0x2a4>)
   b4610:	f7ff fece 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				state = IDLE_STATE;
   b4614:	2302      	movs	r3, #2
   b4616:	e006      	b.n	b4626 <loop+0x1da>
			else if (result.wakeupPin() == INT_PIN) {
   b4618:	459a      	cmp	sl, r3
   b461a:	d144      	bne.n	b46a6 <loop+0x25a>
				Log.info("Woke with sensor interrupt");						// Will count at the bottom of the main loop
   b461c:	493e      	ldr	r1, [pc, #248]	; (b4718 <loop+0x2cc>)
   b461e:	4834      	ldr	r0, [pc, #208]	; (b46f0 <loop+0x2a4>)
   b4620:	f7ff fec6 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				state = SLEEPING_STATE;										// This is the normal behaviour
   b4624:	2303      	movs	r3, #3
        if (wakeupSource_) {
   b4626:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b4628:	7023      	strb	r3, [r4, #0]
   b462a:	b108      	cbz	r0, b4630 <loop+0x1e4>
            free(wakeupSource_);
   b462c:	f004 ffce 	bl	b95cc <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4630:	4837      	ldr	r0, [pc, #220]	; (b4710 <loop+0x2c4>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b4632:	4d3a      	ldr	r5, [pc, #232]	; (b471c <loop+0x2d0>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4634:	f002 fe60 	bl	b72f8 <_ZN6AB18054loopEv>
	current.loop();
   b4638:	f001 fc60 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b463c:	f001 fc7b 	bl	b5f36 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4640:	f001 fbea 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4644:	f001 fc05 	bl	b5e52 <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b4648:	782b      	ldrb	r3, [r5, #0]
   b464a:	b123      	cbz	r3, b4656 <loop+0x20a>
		if (recordCount()) sensorDetect = false;
   b464c:	f002 f82a 	bl	b66a4 <_Z11recordCountv>
   b4650:	b108      	cbz	r0, b4656 <loop+0x20a>
   b4652:	2300      	movs	r3, #0
   b4654:	702b      	strb	r3, [r5, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b4656:	4b32      	ldr	r3, [pc, #200]	; (b4720 <loop+0x2d4>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	2b00      	cmp	r3, #0
   b465c:	db09      	blt.n	b4672 <loop+0x226>
		Log.info("Resetting due to low memory");
   b465e:	4931      	ldr	r1, [pc, #196]	; (b4724 <loop+0x2d8>)
   b4660:	4823      	ldr	r0, [pc, #140]	; (b46f0 <loop+0x2a4>)
   b4662:	f7ff fea5 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b4666:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b466a:	f005 f823 	bl	b96b4 <delay>
		System.reset();
   b466e:	f007 f916 	bl	bb89e <_ZN11SystemClass5resetEv>
	if (userSwitchDectected) {
   b4672:	4d2d      	ldr	r5, [pc, #180]	; (b4728 <loop+0x2dc>)
   b4674:	782b      	ldrb	r3, [r5, #0]
   b4676:	b19b      	cbz	r3, b46a0 <loop+0x254>
		delay(100);									// Debounce the button press
   b4678:	2064      	movs	r0, #100	; 0x64
   b467a:	f005 f81b 	bl	b96b4 <delay>
		userSwitchDectected = false;				// Clear the interrupt flag
   b467e:	2300      	movs	r3, #0
		if (!listeningDurationTimer.isActive()) listeningDurationTimer.start();				// Don't reset timer if it is already running
   b4680:	482a      	ldr	r0, [pc, #168]	; (b472c <loop+0x2e0>)
		userSwitchDectected = false;				// Clear the interrupt flag
   b4682:	702b      	strb	r3, [r5, #0]
		if (!listeningDurationTimer.isActive()) listeningDurationTimer.start();				// Don't reset timer if it is already running
   b4684:	f7ff fe8a 	bl	b439c <_ZNK5Timer8isActiveEv>
   b4688:	b920      	cbnz	r0, b4694 <loop+0x248>
   b468a:	4828      	ldr	r0, [pc, #160]	; (b472c <loop+0x2e0>)
   b468c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4690:	f7ff fdbb 	bl	b420a <_ZN5Timer5startEj.isra.0>
		Log.info("Detected button press");
   b4694:	4926      	ldr	r1, [pc, #152]	; (b4730 <loop+0x2e4>)
   b4696:	4816      	ldr	r0, [pc, #88]	; (b46f0 <loop+0x2a4>)
   b4698:	f7ff fe8a 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		state = LoRA_TRANSMISSION_STATE;
   b469c:	2304      	movs	r3, #4
   b469e:	7023      	strb	r3, [r4, #0]
}
   b46a0:	b00c      	add	sp, #48	; 0x30
   b46a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				Log.info("Time is up at %s with %li free memory", Time.format((Time.now()+wakeInSeconds), "%T").c_str(), System.freeMemory());
   b46a6:	f007 fadc 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b46aa:	4b0d      	ldr	r3, [pc, #52]	; (b46e0 <loop+0x294>)
   b46ac:	490d      	ldr	r1, [pc, #52]	; (b46e4 <loop+0x298>)
   b46ae:	9300      	str	r3, [sp, #0]
   b46b0:	1942      	adds	r2, r0, r5
   b46b2:	2300      	movs	r3, #0
   b46b4:	a808      	add	r0, sp, #32
   b46b6:	f007 fa75 	bl	bbba4 <_ZN9TimeClass6formatExPKc>
   b46ba:	9a08      	ldr	r2, [sp, #32]
   b46bc:	9203      	str	r2, [sp, #12]
   b46be:	f007 f951 	bl	bb964 <_ZN11SystemClass10freeMemoryEv>
   b46c2:	9a03      	ldr	r2, [sp, #12]
   b46c4:	491b      	ldr	r1, [pc, #108]	; (b4734 <loop+0x2e8>)
   b46c6:	4603      	mov	r3, r0
   b46c8:	4809      	ldr	r0, [pc, #36]	; (b46f0 <loop+0x2a4>)
   b46ca:	f7ff fe71 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b46ce:	a808      	add	r0, sp, #32
   b46d0:	f006 ffb6 	bl	bb640 <_ZN6StringD1Ev>
   b46d4:	e79e      	b.n	b4614 <loop+0x1c8>
   b46d6:	bf00      	nop
   b46d8:	2003e12e 	.word	0x2003e12e
   b46dc:	2003e12c 	.word	0x2003e12c
   b46e0:	000be29f 	.word	0x000be29f
   b46e4:	2003e6ac 	.word	0x2003e6ac
   b46e8:	000be29b 	.word	0x000be29b
   b46ec:	000be59c 	.word	0x000be59c
   b46f0:	2003e654 	.word	0x2003e654
   b46f4:	000be2a2 	.word	0x000be2a2
   b46f8:	2003e0d4 	.word	0x2003e0d4
   b46fc:	000bedea 	.word	0x000bedea
   b4700:	000bedec 	.word	0x000bedec
   b4704:	000be2de 	.word	0x000be2de
   b4708:	000bf804 	.word	0x000bf804
   b470c:	00030010 	.word	0x00030010
   b4710:	2003e0b4 	.word	0x2003e0b4
   b4714:	000be306 	.word	0x000be306
   b4718:	000be31c 	.word	0x000be31c
   b471c:	2003e12d 	.word	0x2003e12d
   b4720:	2003defc 	.word	0x2003defc
   b4724:	000be544 	.word	0x000be544
   b4728:	2003e14c 	.word	0x2003e14c
   b472c:	2003e0ec 	.word	0x2003e0ec
   b4730:	000be560 	.word	0x000be560
   b4734:	000be337 	.word	0x000be337
			static int lastReportingHour = Time.hour();
   b4738:	4da3      	ldr	r5, [pc, #652]	; (b49c8 <loop+0x57c>)
   b473a:	782b      	ldrb	r3, [r5, #0]
   b473c:	f3bf 8f5b 	dmb	ish
   b4740:	07db      	lsls	r3, r3, #31
   b4742:	d40a      	bmi.n	b475a <loop+0x30e>
   b4744:	4628      	mov	r0, r5
   b4746:	f7ff fcb9 	bl	b40bc <__cxa_guard_acquire>
   b474a:	b130      	cbz	r0, b475a <loop+0x30e>
   b474c:	f007 fa9a 	bl	bbc84 <_ZN9TimeClass4hourEv>
   b4750:	4b9e      	ldr	r3, [pc, #632]	; (b49cc <loop+0x580>)
   b4752:	6018      	str	r0, [r3, #0]
   b4754:	4628      	mov	r0, r5
   b4756:	f7ff fcb6 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) {
   b475a:	4b9d      	ldr	r3, [pc, #628]	; (b49d0 <loop+0x584>)
   b475c:	7822      	ldrb	r2, [r4, #0]
   b475e:	781b      	ldrb	r3, [r3, #0]
   b4760:	429a      	cmp	r2, r3
   b4762:	d025      	beq.n	b47b0 <loop+0x364>
				if (oldState != LoRA_TRANSMISSION_STATE) {
   b4764:	2b04      	cmp	r3, #4
   b4766:	d021      	beq.n	b47ac <loop+0x360>
					if (!listeningDurationTimer.isActive()) listeningDurationTimer.start();				// Don't reset timer if it is already running
   b4768:	489a      	ldr	r0, [pc, #616]	; (b49d4 <loop+0x588>)
   b476a:	f7ff fe17 	bl	b439c <_ZNK5Timer8isActiveEv>
   b476e:	b920      	cbnz	r0, b477a <loop+0x32e>
   b4770:	4898      	ldr	r0, [pc, #608]	; (b49d4 <loop+0x588>)
   b4772:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4776:	f7ff fd48 	bl	b420a <_ZN5Timer5startEj.isra.0>
					if (sysStatus.get_nodeNumber() < 11) transmitDelayTimer.changePeriod(sysStatus.get_nodeNumber()*NODENUMBEROFFSET);		// Wait a beat before transmitting
   b477a:	f001 fb4d 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b477e:	f001 fc32 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4782:	280a      	cmp	r0, #10
   b4784:	d849      	bhi.n	b481a <loop+0x3ce>
   b4786:	f001 fb47 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b478a:	f001 fc2c 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b478e:	4b92      	ldr	r3, [pc, #584]	; (b49d8 <loop+0x58c>)
   b4790:	689d      	ldr	r5, [r3, #8]
   b4792:	b15d      	cbz	r5, b47ac <loop+0x360>
   b4794:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4798:	2200      	movs	r2, #0
   b479a:	e9cd 3200 	strd	r3, r2, [sp]
   b479e:	f242 7310 	movw	r3, #10000	; 0x2710
   b47a2:	4343      	muls	r3, r0
   b47a4:	2103      	movs	r1, #3
   b47a6:	4628      	mov	r0, r5
   b47a8:	f004 fb82 	bl	b8eb0 <os_timer_change>
				publishStateTransition();                   										// Publish state transition
   b47ac:	f7ff fe18 	bl	b43e0 <_Z22publishStateTransitionv>
			if (LoRA_Functions::instance().listenForLoRAMessageNode()) {							// Listen for LoRA signals - could be an acknowledgement or a message to relay to another node
   b47b0:	f000 fdb8 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b47b4:	f000 ffc0 	bl	b5738 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b47b8:	2800      	cmp	r0, #0
   b47ba:	f43f af39 	beq.w	b4630 <loop+0x1e4>
				sysStatus.set_lastConnection(Time.now());											// Came back as true - message was for our node
   b47be:	f001 fb2b 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b47c2:	4605      	mov	r5, r0
   b47c4:	f007 fa4d 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b47c8:	4602      	mov	r2, r0
   b47ca:	17c3      	asrs	r3, r0, #31
   b47cc:	4628      	mov	r0, r5
   b47ce:	f001 fd82 	bl	b62d6 <_ZN13sysStatusData18set_lastConnectionEx>
				randomSeed(sysStatus.get_lastConnection() * sysStatus.get_nodeNumber());			// Done so we can genrate rando numbers later
   b47d2:	f001 fb21 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b47d6:	f001 fd5b 	bl	b6290 <_ZNK13sysStatusData18get_lastConnectionEv>
   b47da:	4605      	mov	r5, r0
   b47dc:	f001 fb1c 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b47e0:	f001 fc01 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b47e4:	4368      	muls	r0, r5
   b47e6:	f006 fe5c 	bl	bb4a2 <_Z10randomSeedj>
				ab1805.setRtcFromTime(Time.now());
   b47ea:	f007 fa3a 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b47ee:	2501      	movs	r5, #1
   b47f0:	17c3      	asrs	r3, r0, #31
   b47f2:	4602      	mov	r2, r0
				if (Time.hour() != lastReportingHour) {
   b47f4:	4e75      	ldr	r6, [pc, #468]	; (b49cc <loop+0x580>)
				ab1805.setRtcFromTime(Time.now());
   b47f6:	4879      	ldr	r0, [pc, #484]	; (b49dc <loop+0x590>)
   b47f8:	9500      	str	r5, [sp, #0]
   b47fa:	f002 fd6d 	bl	b72d8 <_ZN6AB180514setRtcFromTimeExb>
				if (Time.hour() != lastReportingHour) {
   b47fe:	f007 fa41 	bl	bbc84 <_ZN9TimeClass4hourEv>
   b4802:	6833      	ldr	r3, [r6, #0]
   b4804:	4298      	cmp	r0, r3
   b4806:	d00b      	beq.n	b4820 <loop+0x3d4>
					current.set_hourlyCount(0);					    								// Zero the hourly count
   b4808:	f001 fb78 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b480c:	2100      	movs	r1, #0
   b480e:	f001 fd1c 	bl	b624a <_ZN17currentStatusData15set_hourlyCountEt>
					lastReportingHour = Time.hour();
   b4812:	f007 fa37 	bl	bbc84 <_ZN9TimeClass4hourEv>
   b4816:	6030      	str	r0, [r6, #0]
   b4818:	e70a      	b.n	b4630 <loop+0x1e4>
					else state = LoRA_TRANSMISSION_STATE;
   b481a:	2304      	movs	r3, #4
   b481c:	7023      	strb	r3, [r4, #0]
   b481e:	e7c5      	b.n	b47ac <loop+0x360>
				else if (sysStatus.get_alertCodeNode() != 0) state = ERROR_STATE;					// Need to resolve alert before listening for others
   b4820:	f001 fafa 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4824:	f001 fbe9 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4828:	2800      	cmp	r0, #0
   b482a:	f43f af01 	beq.w	b4630 <loop+0x1e4>
   b482e:	7025      	strb	r5, [r4, #0]
   b4830:	e6fe      	b.n	b4630 <loop+0x1e4>
			publishStateTransition();                   					// Let everyone know we are changing state
   b4832:	f7ff fdd5 	bl	b43e0 <_Z22publishStateTransitionv>
			takeMeasurements();												// Taking measurements now should allow for accurate battery measurements
   b4836:	f002 f855 	bl	b68e4 <_Z16takeMeasurementsv>
			LoRA_Functions::instance().clearBuffer();
   b483a:	f000 fd73 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b483e:	f000 fd83 	bl	b5348 <_ZN14LoRA_Functions11clearBufferEv>
			if (sysStatus.get_alertCodeNode() == 0) result = LoRA_Functions::instance().composeDataReportNode();
   b4842:	f001 fae9 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4846:	f001 fbd8 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b484a:	b950      	cbnz	r0, b4862 <loop+0x416>
   b484c:	f000 fd6a 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b4850:	f001 f83e 	bl	b58d0 <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b4854:	4e62      	ldr	r6, [pc, #392]	; (b49e0 <loop+0x594>)
			else if (sysStatus.get_alertCodeNode() == 1 || sysStatus.get_alertCodeNode() == 2) result = LoRA_Functions::instance().composeJoinRequesttNode();
   b4856:	4605      	mov	r5, r0
			if (result) {
   b4858:	b1f0      	cbz	r0, b4898 <loop+0x44c>
				retryCount = 0;												// Successful transmission - go listen for response
   b485a:	2300      	movs	r3, #0
   b485c:	6033      	str	r3, [r6, #0]
				state = LoRA_LISTENING_STATE;								// Once we clear the counts we can go back to listening
   b485e:	2305      	movs	r3, #5
   b4860:	e614      	b.n	b448c <loop+0x40>
			else if (sysStatus.get_alertCodeNode() == 1 || sysStatus.get_alertCodeNode() == 2) result = LoRA_Functions::instance().composeJoinRequesttNode();
   b4862:	f001 fad9 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4866:	f001 fbc8 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b486a:	2801      	cmp	r0, #1
   b486c:	d104      	bne.n	b4878 <loop+0x42c>
   b486e:	f000 fd59 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b4872:	f001 f987 	bl	b5b84 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b4876:	e7ed      	b.n	b4854 <loop+0x408>
   b4878:	f001 face 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b487c:	f001 fbbd 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4880:	2802      	cmp	r0, #2
   b4882:	d0f4      	beq.n	b486e <loop+0x422>
				Log.info("Alert code = %d",sysStatus.get_alertCodeNode());
   b4884:	f001 fac8 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4888:	f001 fbb7 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b488c:	4955      	ldr	r1, [pc, #340]	; (b49e4 <loop+0x598>)
   b488e:	4602      	mov	r2, r0
   b4890:	4855      	ldr	r0, [pc, #340]	; (b49e8 <loop+0x59c>)
   b4892:	f7ff fd8d 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				state = ERROR_STATE;
   b4896:	e5f8      	b.n	b448a <loop+0x3e>
			else if (retryCount >= 3) {
   b4898:	6832      	ldr	r2, [r6, #0]
   b489a:	2a02      	cmp	r2, #2
   b489c:	dd37      	ble.n	b490e <loop+0x4c2>
				Log.info("Too many retries - giving up for this period");
   b489e:	4953      	ldr	r1, [pc, #332]	; (b49ec <loop+0x5a0>)
   b48a0:	4851      	ldr	r0, [pc, #324]	; (b49e8 <loop+0x59c>)
   b48a2:	f7ff fd85 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				retryCount = 0;
   b48a6:	6035      	str	r5, [r6, #0]
				if ((Time.now() - sysStatus.get_lastConnection() > 2 * sysStatus.get_frequencyMinutes() * 60UL)) { 	// Device has not connected for two reporting periods
   b48a8:	f007 f9db 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b48ac:	4606      	mov	r6, r0
   b48ae:	f001 fab3 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b48b2:	f001 fced 	bl	b6290 <_ZNK13sysStatusData18get_lastConnectionEv>
   b48b6:	17f3      	asrs	r3, r6, #31
   b48b8:	1a36      	subs	r6, r6, r0
   b48ba:	eb63 0701 	sbc.w	r7, r3, r1
   b48be:	f001 faab 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b48c2:	f001 fc1d 	bl	b6100 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b48c6:	2378      	movs	r3, #120	; 0x78
   b48c8:	4358      	muls	r0, r3
   b48ca:	42b0      	cmp	r0, r6
   b48cc:	eb75 0307 	sbcs.w	r3, r5, r7
   b48d0:	dac5      	bge.n	b485e <loop+0x412>
					Log.info("Nothing for two reporting periods - power cycle after current cycle");
   b48d2:	4947      	ldr	r1, [pc, #284]	; (b49f0 <loop+0x5a4>)
   b48d4:	4844      	ldr	r0, [pc, #272]	; (b49e8 <loop+0x59c>)
   b48d6:	f7ff fd6b 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(3);							// This will trigger a power cycle reset
   b48da:	f001 fa9d 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b48de:	2103      	movs	r1, #3
   b48e0:	f001 fbd3 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());		
   b48e4:	f001 fa98 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b48e8:	4605      	mov	r5, r0
   b48ea:	f007 f9ba 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b48ee:	4602      	mov	r2, r0
   b48f0:	17c3      	asrs	r3, r0, #31
   b48f2:	4628      	mov	r0, r5
   b48f4:	f001 fcf4 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
					sysStatus.set_lastConnection(Time.now());				// Prevents cyclical resets
   b48f8:	f001 fa8e 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b48fc:	4605      	mov	r5, r0
   b48fe:	f007 f9b0 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b4902:	4602      	mov	r2, r0
   b4904:	17c3      	asrs	r3, r0, #31
   b4906:	4628      	mov	r0, r5
   b4908:	f001 fce5 	bl	b62d6 <_ZN13sysStatusData18set_lastConnectionEx>
   b490c:	e5bd      	b.n	b448a <loop+0x3e>
				Log.info("Transmission failed - retry number %d",retryCount++);
   b490e:	1c53      	adds	r3, r2, #1
   b4910:	4938      	ldr	r1, [pc, #224]	; (b49f4 <loop+0x5a8>)
   b4912:	4835      	ldr	r0, [pc, #212]	; (b49e8 <loop+0x59c>)
   b4914:	6033      	str	r3, [r6, #0]
   b4916:	f7ff fd4b 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_RETRY_WAIT_STATE;
   b491a:	2306      	movs	r3, #6
   b491c:	e5b6      	b.n	b448c <loop+0x40>
			if (state != oldState) {
   b491e:	4a2c      	ldr	r2, [pc, #176]	; (b49d0 <loop+0x584>)
   b4920:	7823      	ldrb	r3, [r4, #0]
   b4922:	7812      	ldrb	r2, [r2, #0]
   b4924:	4d34      	ldr	r5, [pc, #208]	; (b49f8 <loop+0x5ac>)
   b4926:	4e35      	ldr	r6, [pc, #212]	; (b49fc <loop+0x5b0>)
   b4928:	429a      	cmp	r2, r3
   b492a:	d012      	beq.n	b4952 <loop+0x506>
				publishStateTransition();                   				// Publish state transition
   b492c:	f7ff fd58 	bl	b43e0 <_Z22publishStateTransitionv>
				variableDelay = random(20000);								// a random delay up to 20 seconds
   b4930:	f644 6020 	movw	r0, #20000	; 0x4e20
   b4934:	f006 fda0 	bl	bb478 <_Z6randomi>
   b4938:	6028      	str	r0, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b493a:	f004 fb11 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
				Log.info("Going to retry in %lu seconds", variableDelay/1000UL);
   b493e:	682a      	ldr	r2, [r5, #0]
				startDelay = millis();
   b4940:	6030      	str	r0, [r6, #0]
				Log.info("Going to retry in %lu seconds", variableDelay/1000UL);
   b4942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4946:	492e      	ldr	r1, [pc, #184]	; (b4a00 <loop+0x5b4>)
   b4948:	4827      	ldr	r0, [pc, #156]	; (b49e8 <loop+0x59c>)
   b494a:	fbb2 f2f3 	udiv	r2, r2, r3
   b494e:	f7ff fd2f 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b4952:	f004 fb05 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
			if (millis() >= startDelay + variableDelay) state = LoRA_TRANSMISSION_STATE;
   b4956:	6833      	ldr	r3, [r6, #0]
   b4958:	682a      	ldr	r2, [r5, #0]
   b495a:	4413      	add	r3, r2
   b495c:	4283      	cmp	r3, r0
   b495e:	f63f ae67 	bhi.w	b4630 <loop+0x1e4>
   b4962:	2304      	movs	r3, #4
   b4964:	e592      	b.n	b448c <loop+0x40>
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4966:	4a1a      	ldr	r2, [pc, #104]	; (b49d0 <loop+0x584>)
   b4968:	7823      	ldrb	r3, [r4, #0]
   b496a:	7812      	ldrb	r2, [r2, #0]
   b496c:	429a      	cmp	r2, r3
   b496e:	d001      	beq.n	b4974 <loop+0x528>
   b4970:	f7ff fd36 	bl	b43e0 <_Z22publishStateTransitionv>
			switch (sysStatus.get_alertCodeNode()) {
   b4974:	f001 fa50 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4978:	f001 fb3f 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b497c:	3801      	subs	r0, #1
   b497e:	2805      	cmp	r0, #5
   b4980:	f200 80c8 	bhi.w	b4b14 <loop+0x6c8>
   b4984:	e8df f000 	tbb	[pc, r0]
   b4988:	7f421a03 	.word	0x7f421a03
   b498c:	c1a7      	.short	0xc1a7
				sysStatus.set_nodeNumber(11);
   b498e:	f001 fa43 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4992:	210b      	movs	r1, #11
   b4994:	f001 fb67 	bl	b6066 <_ZN13sysStatusData14set_nodeNumberEh>
				Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", sysStatus.get_nodeNumber(), System.deviceID().c_str());
   b4998:	f001 fa3e 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b499c:	f001 fb23 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b49a0:	9003      	str	r0, [sp, #12]
        return spark_deviceID();
   b49a2:	a808      	add	r0, sp, #32
   b49a4:	f004 fd82 	bl	b94ac <spark_deviceID>
   b49a8:	9b08      	ldr	r3, [sp, #32]
   b49aa:	9a03      	ldr	r2, [sp, #12]
   b49ac:	4915      	ldr	r1, [pc, #84]	; (b4a04 <loop+0x5b8>)
   b49ae:	480e      	ldr	r0, [pc, #56]	; (b49e8 <loop+0x59c>)
   b49b0:	f7ff fcfe 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b49b4:	a808      	add	r0, sp, #32
   b49b6:	f006 fe43 	bl	bb640 <_ZN6StringD1Ev>
				state = LoRA_LISTENING_STATE;							// Sends the alert and clears alert code
   b49ba:	e750      	b.n	b485e <loop+0x412>
				Log.info("Alert 2- Time is not valid going to join again");
   b49bc:	4912      	ldr	r1, [pc, #72]	; (b4a08 <loop+0x5bc>)
				Log.info("Full Reset and Re-Join Network");
   b49be:	480a      	ldr	r0, [pc, #40]	; (b49e8 <loop+0x59c>)
   b49c0:	f7ff fcf6 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_LISTENING_STATE;							// Sends the alert and clears alert code
   b49c4:	e74b      	b.n	b485e <loop+0x412>
   b49c6:	bf00      	nop
   b49c8:	2003e098 	.word	0x2003e098
   b49cc:	2003e0ac 	.word	0x2003e0ac
   b49d0:	2003e12c 	.word	0x2003e12c
   b49d4:	2003e0ec 	.word	0x2003e0ec
   b49d8:	2003e130 	.word	0x2003e130
   b49dc:	2003e0b4 	.word	0x2003e0b4
   b49e0:	2003e09c 	.word	0x2003e09c
   b49e4:	000be35d 	.word	0x000be35d
   b49e8:	2003e654 	.word	0x2003e654
   b49ec:	000be36d 	.word	0x000be36d
   b49f0:	000be39a 	.word	0x000be39a
   b49f4:	000be3de 	.word	0x000be3de
   b49f8:	2003e0a8 	.word	0x2003e0a8
   b49fc:	2003e0a0 	.word	0x2003e0a0
   b4a00:	000be404 	.word	0x000be404
   b4a04:	000be422 	.word	0x000be422
   b4a08:	000be469 	.word	0x000be469
				static system_tick_t enteredState = millis();
   b4a0c:	4d49      	ldr	r5, [pc, #292]	; (b4b34 <loop+0x6e8>)
   b4a0e:	4e4a      	ldr	r6, [pc, #296]	; (b4b38 <loop+0x6ec>)
   b4a10:	782b      	ldrb	r3, [r5, #0]
   b4a12:	f3bf 8f5b 	dmb	ish
   b4a16:	f013 0f01 	tst.w	r3, #1
   b4a1a:	d109      	bne.n	b4a30 <loop+0x5e4>
   b4a1c:	4628      	mov	r0, r5
   b4a1e:	f7ff fb4d 	bl	b40bc <__cxa_guard_acquire>
   b4a22:	b128      	cbz	r0, b4a30 <loop+0x5e4>
   b4a24:	f004 fa9c 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b4a28:	6030      	str	r0, [r6, #0]
   b4a2a:	4628      	mov	r0, r5
   b4a2c:	f7ff fb4b 	bl	b40c6 <__cxa_guard_release>
   b4a30:	f004 fa96 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b4a34:	6833      	ldr	r3, [r6, #0]
   b4a36:	1ac0      	subs	r0, r0, r3
   b4a38:	f247 5330 	movw	r3, #30000	; 0x7530
   b4a3c:	4298      	cmp	r0, r3
   b4a3e:	f67f adf7 	bls.w	b4630 <loop+0x1e4>
					Log.info("Alert 3 - Resetting device");
   b4a42:	493e      	ldr	r1, [pc, #248]	; (b4b3c <loop+0x6f0>)
   b4a44:	483e      	ldr	r0, [pc, #248]	; (b4b40 <loop+0x6f4>)
   b4a46:	f7ff fcb3 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(0);							// Need to clear so we don't get in a retry cycle
   b4a4a:	f001 f9e5 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4a4e:	2100      	movs	r1, #0
   b4a50:	f001 fb1b 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());
   b4a54:	f001 f9e0 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4a58:	4605      	mov	r5, r0
   b4a5a:	f007 f902 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b4a5e:	4602      	mov	r2, r0
   b4a60:	17c3      	asrs	r3, r0, #31
   b4a62:	4628      	mov	r0, r5
   b4a64:	f001 fc3c 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
					sysStatus.flush(true);									// All this is required as we are done trainsiting loop
   b4a68:	f001 f9d6 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4a6c:	6803      	ldr	r3, [r0, #0]
   b4a6e:	2101      	movs	r1, #1
   b4a70:	68db      	ldr	r3, [r3, #12]
   b4a72:	4798      	blx	r3
					delay(2000);
   b4a74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4a78:	f004 fe1c 	bl	b96b4 <delay>
					ab1805.deepPowerDown();
   b4a7c:	211e      	movs	r1, #30
   b4a7e:	4831      	ldr	r0, [pc, #196]	; (b4b44 <loop+0x6f8>)
   b4a80:	f002 f9e8 	bl	b6e54 <_ZN6AB180513deepPowerDownEi>
   b4a84:	e5d4      	b.n	b4630 <loop+0x1e4>
				Log.info("Initialize LoRA radio");
   b4a86:	4930      	ldr	r1, [pc, #192]	; (b4b48 <loop+0x6fc>)
   b4a88:	482d      	ldr	r0, [pc, #180]	; (b4b40 <loop+0x6f4>)
   b4a8a:	f7ff fc91 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				if(LoRA_Functions::instance().initializeRadio()) {
   b4a8e:	f000 fc49 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b4a92:	f000 fc6f 	bl	b5374 <_ZN14LoRA_Functions15initializeRadioEv>
   b4a96:	b148      	cbz	r0, b4aac <loop+0x660>
					Log.info("Initialization successful");	
   b4a98:	492c      	ldr	r1, [pc, #176]	; (b4b4c <loop+0x700>)
   b4a9a:	4829      	ldr	r0, [pc, #164]	; (b4b40 <loop+0x6f4>)
   b4a9c:	f7ff fc88 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(0);
   b4aa0:	f001 f9ba 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4aa4:	2100      	movs	r1, #0
   b4aa6:	f001 faf0 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4aaa:	e6d8      	b.n	b485e <loop+0x412>
					Log.info(("Initialization not successful - power cycle"));
   b4aac:	4928      	ldr	r1, [pc, #160]	; (b4b50 <loop+0x704>)
   b4aae:	4824      	ldr	r0, [pc, #144]	; (b4b40 <loop+0x6f4>)
   b4ab0:	f7ff fc7e 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(3);							// Next time through - will transition to power cycle
   b4ab4:	f001 f9b0 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4ab8:	2103      	movs	r1, #3
   b4aba:	f001 fae6 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());
   b4abe:	f001 f9ab 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4ac2:	4605      	mov	r5, r0
   b4ac4:	f007 f8cd 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b4ac8:	4602      	mov	r2, r0
   b4aca:	17c3      	asrs	r3, r0, #31
   b4acc:	4628      	mov	r0, r5
   b4ace:	f001 fc07 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				state = IDLE_STATE;
   b4ad2:	2302      	movs	r3, #2
   b4ad4:	e4da      	b.n	b448c <loop+0x40>
				sysStatus.initialize();										// Resets the sysStatus values to factory default
   b4ad6:	f001 f99f 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4ada:	6803      	ldr	r3, [r0, #0]
   b4adc:	699b      	ldr	r3, [r3, #24]
   b4ade:	4798      	blx	r3
				current.resetEverything();									// Resets the node counts
   b4ae0:	f001 fa0c 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b4ae4:	f001 fc49 	bl	b637a <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b4ae8:	f001 f996 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4aec:	2101      	movs	r1, #1
   b4aee:	f001 facc 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());			
   b4af2:	f001 f991 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4af6:	4605      	mov	r5, r0
   b4af8:	f007 f8b3 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b4afc:	4602      	mov	r2, r0
   b4afe:	17c3      	asrs	r3, r0, #31
   b4b00:	4628      	mov	r0, r5
   b4b02:	f001 fbed 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				Log.info("Full Reset and Re-Join Network");
   b4b06:	4913      	ldr	r1, [pc, #76]	; (b4b54 <loop+0x708>)
   b4b08:	e759      	b.n	b49be <loop+0x572>
				current.resetEverything();
   b4b0a:	f001 f9f7 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b4b0e:	f001 fc34 	bl	b637a <_ZN17currentStatusData15resetEverythingEv>
   b4b12:	e7c5      	b.n	b4aa0 <loop+0x654>
				Log.info("Undefined Error State");
   b4b14:	4910      	ldr	r1, [pc, #64]	; (b4b58 <loop+0x70c>)
   b4b16:	480a      	ldr	r0, [pc, #40]	; (b4b40 <loop+0x6f4>)
   b4b18:	f7ff fc4a 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(0);
   b4b1c:	f001 f97c 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b4b20:	2100      	movs	r1, #0
   b4b22:	f001 fab2 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4b26:	e7d4      	b.n	b4ad2 <loop+0x686>
                valid_ = false;
   b4b28:	7538      	strb	r0, [r7, #20]
                return *this;
   b4b2a:	e536      	b.n	b459a <loop+0x14e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4b2c:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4b30:	e533      	b.n	b459a <loop+0x14e>
   b4b32:	bf00      	nop
   b4b34:	2003e094 	.word	0x2003e094
   b4b38:	2003e0a4 	.word	0x2003e0a4
   b4b3c:	000be498 	.word	0x000be498
   b4b40:	2003e654 	.word	0x2003e654
   b4b44:	2003e0b4 	.word	0x2003e0b4
   b4b48:	000be4b3 	.word	0x000be4b3
   b4b4c:	000be4c9 	.word	0x000be4c9
   b4b50:	000be4e3 	.word	0x000be4e3
   b4b54:	000be50f 	.word	0x000be50f
   b4b58:	000be52e 	.word	0x000be52e

000b4b5c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4b5c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4b5e:	2300      	movs	r3, #0
   b4b60:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4b62:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4b64:	4604      	mov	r4, r0
   b4b66:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4b68:	b12b      	cbz	r3, b4b76 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4b6a:	2202      	movs	r2, #2
   b4b6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4b6e:	68eb      	ldr	r3, [r5, #12]
   b4b70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4b72:	68ab      	ldr	r3, [r5, #8]
   b4b74:	60a3      	str	r3, [r4, #8]
    }
   b4b76:	4620      	mov	r0, r4
   b4b78:	bd38      	pop	{r3, r4, r5, pc}

000b4b7a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4b7a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4b7e:	4604      	mov	r4, r0
	switch (__op)
   b4b80:	d104      	bne.n	b4b8c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4b82:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b84:	6003      	str	r3, [r0, #0]
      }
   b4b86:	2000      	movs	r0, #0
   b4b88:	b003      	add	sp, #12
   b4b8a:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4b8c:	2a02      	cmp	r2, #2
   b4b8e:	d00c      	beq.n	b4baa <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4b90:	2a03      	cmp	r2, #3
   b4b92:	d1f8      	bne.n	b4b86 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4b94:	6804      	ldr	r4, [r0, #0]
   b4b96:	2c00      	cmp	r4, #0
   b4b98:	d0f5      	beq.n	b4b86 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	f7ff fb70 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4ba0:	2110      	movs	r1, #16
   b4ba2:	4620      	mov	r0, r4
   b4ba4:	f7ff fa7b 	bl	b409e <_ZdlPvj>
   b4ba8:	e7ed      	b.n	b4b86 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4baa:	6809      	ldr	r1, [r1, #0]
   b4bac:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4bae:	2010      	movs	r0, #16
   b4bb0:	f7ff fa71 	bl	b4096 <_Znwj>
   b4bb4:	4605      	mov	r5, r0
   b4bb6:	b110      	cbz	r0, b4bbe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4bb8:	9901      	ldr	r1, [sp, #4]
   b4bba:	f7ff ffcf 	bl	b4b5c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4bbe:	6025      	str	r5, [r4, #0]
	}
   b4bc0:	e7e1      	b.n	b4b86 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4bc2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4bc4:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4bc8:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4bca:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4bcc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4bd0:	42ae      	cmp	r6, r5
   b4bd2:	d004      	beq.n	b4bde <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4bd4:	4628      	mov	r0, r5
   b4bd6:	f006 fd33 	bl	bb640 <_ZN6StringD1Ev>
   b4bda:	3514      	adds	r5, #20
   b4bdc:	e7f8      	b.n	b4bd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4bde:	6820      	ldr	r0, [r4, #0]
   b4be0:	f004 fcf4 	bl	b95cc <free>
    AllocatorT::free(data_);
}
   b4be4:	4620      	mov	r0, r4
   b4be6:	bd70      	pop	{r4, r5, r6, pc}

000b4be8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4be8:	b513      	push	{r0, r1, r4, lr}
   b4bea:	460b      	mov	r3, r1
   b4bec:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4bee:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4bf2:	466c      	mov	r4, sp
   b4bf4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4bf8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4bfc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4c00:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4c04:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4c08:	b002      	add	sp, #8
   b4c0a:	bd10      	pop	{r4, pc}

000b4c0c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4c10:	4604      	mov	r4, r0
   b4c12:	4615      	mov	r5, r2
   b4c14:	2600      	movs	r6, #0
   b4c16:	4698      	mov	r8, r3
   b4c18:	4b0f      	ldr	r3, [pc, #60]	; (b4c58 <_ZN5TimerC1EjSt8functionIFvvEEb+0x4c>)
   b4c1a:	6003      	str	r3, [r0, #0]
   b4c1c:	460f      	mov	r7, r1
   b4c1e:	7106      	strb	r6, [r0, #4]
   b4c20:	6086      	str	r6, [r0, #8]
    _Function_base() : _M_manager(nullptr) { }
   b4c22:	6146      	str	r6, [r0, #20]
	std::swap(_M_functor, __x._M_functor);
   b4c24:	f100 010c 	add.w	r1, r0, #12
   b4c28:	4610      	mov	r0, r2
   b4c2a:	f7ff ffdd 	bl	b4be8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c2e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4c30:	6962      	ldr	r2, [r4, #20]
   b4c32:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4c34:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4c36:	69a2      	ldr	r2, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c38:	68eb      	ldr	r3, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4c3a:	61a3      	str	r3, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4c3c:	60ea      	str	r2, [r5, #12]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4c3e:	e9cd 8600 	strd	r8, r6, [sp]
   b4c42:	4a06      	ldr	r2, [pc, #24]	; (b4c5c <_ZN5TimerC1EjSt8functionIFvvEEb+0x50>)
   b4c44:	4623      	mov	r3, r4
   b4c46:	4639      	mov	r1, r7
   b4c48:	f104 0008 	add.w	r0, r4, #8
   b4c4c:	f004 f918 	bl	b8e80 <os_timer_create>
    }
   b4c50:	4620      	mov	r0, r4
   b4c52:	b002      	add	sp, #8
   b4c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4c58:	000be794 	.word	0x000be794
   b4c5c:	000b4175 	.word	0x000b4175

000b4c60 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c64:	b094      	sub	sp, #80	; 0x50
   b4c66:	4605      	mov	r5, r0
        };
   b4c68:	991a      	ldr	r1, [sp, #104]	; 0x68
   b4c6a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4c6c:	4617      	mov	r7, r2
   b4c6e:	461e      	mov	r6, r3
        };
   b4c70:	f7ff ff74 	bl	b4b5c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4c74:	a904      	add	r1, sp, #16
   b4c76:	a808      	add	r0, sp, #32
   b4c78:	f7ff ff70 	bl	b4b5c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4c7c:	a908      	add	r1, sp, #32
   b4c7e:	a80c      	add	r0, sp, #48	; 0x30
   b4c80:	f7ff ff6c 	bl	b4b5c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4c84:	f04f 0800 	mov.w	r8, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4c88:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4c8a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4c8e:	f7ff fa02 	bl	b4096 <_Znwj>
   b4c92:	4604      	mov	r4, r0
   b4c94:	b168      	cbz	r0, b4cb2 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x52>
    _Function_base() : _M_manager(nullptr) { }
   b4c96:	f8c0 8008 	str.w	r8, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4c9a:	4601      	mov	r1, r0
   b4c9c:	a80c      	add	r0, sp, #48	; 0x30
   b4c9e:	f7ff ffa3 	bl	b4be8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4ca4:	68a2      	ldr	r2, [r4, #8]
   b4ca6:	920e      	str	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   b4ca8:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4caa:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4cae:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4cb0:	920f      	str	r2, [sp, #60]	; 0x3c
	    _M_invoker = &_My_handler::_M_invoke;
   b4cb2:	4b24      	ldr	r3, [pc, #144]	; (b4d44 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe4>)
   b4cb4:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4cb6:	4b24      	ldr	r3, [pc, #144]	; (b4d48 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>)
   b4cb8:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4cba:	2200      	movs	r2, #0
   b4cbc:	2300      	movs	r3, #0
   b4cbe:	f04f 0800 	mov.w	r8, #0
   b4cc2:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4cc6:	4b21      	ldr	r3, [pc, #132]	; (b4d4c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xec>)
              callable_(callable) {
   b4cc8:	f8c5 8008 	str.w	r8, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4ccc:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4cce:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4cd0:	e9cd 3801 	strd	r3, r8, [sp, #4]
   b4cd4:	f8cd 800c 	str.w	r8, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4cd8:	f7ff f9dd 	bl	b4096 <_Znwj>
   b4cdc:	4604      	mov	r4, r0
   b4cde:	b1d8      	cbz	r0, b4d18 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
    bool _M_empty() const { return !_M_manager; }
   b4ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4ce2:	f8c0 8008 	str.w	r8, [r0, #8]
      if (static_cast<bool>(__x))
   b4ce6:	b133      	cbz	r3, b4cf6 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x96>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4ce8:	2202      	movs	r2, #2
   b4cea:	a910      	add	r1, sp, #64	; 0x40
   b4cec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4cee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4cf0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4cf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4cf4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4cf6:	4b16      	ldr	r3, [pc, #88]	; (b4d50 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf0>)
   b4cf8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4cfa:	4a16      	ldr	r2, [pc, #88]	; (b4d54 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
        context.callable = wrapper;
   b4cfc:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4cfe:	ab01      	add	r3, sp, #4
   b4d00:	4638      	mov	r0, r7
   b4d02:	4631      	mov	r1, r6
   b4d04:	f004 fb60 	bl	b93c8 <system_subscribe_event>
        if (r) {
   b4d08:	b1b0      	cbz	r0, b4d38 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xd8>
    class function<_Res(_ArgTypes...)>
   b4d0a:	4620      	mov	r0, r4
   b4d0c:	f7ff fab8 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4d10:	2110      	movs	r1, #16
   b4d12:	4620      	mov	r0, r4
   b4d14:	f7ff f9c3 	bl	b409e <_ZdlPvj>
   b4d18:	a810      	add	r0, sp, #64	; 0x40
   b4d1a:	f7ff fab1 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
   b4d1e:	a80c      	add	r0, sp, #48	; 0x30
   b4d20:	f7ff faae 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
   b4d24:	a808      	add	r0, sp, #32
   b4d26:	f7ff faab 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
   b4d2a:	a804      	add	r0, sp, #16
   b4d2c:	f7ff faa8 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
    }
   b4d30:	4628      	mov	r0, r5
   b4d32:	b014      	add	sp, #80	; 0x50
   b4d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4d38:	9b02      	ldr	r3, [sp, #8]
   b4d3a:	60ab      	str	r3, [r5, #8]
   b4d3c:	e9c5 7600 	strd	r7, r6, [r5]
   b4d40:	e7ea      	b.n	b4d18 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
   b4d42:	bf00      	nop
   b4d44:	000b41af 	.word	0x000b41af
   b4d48:	000b4b7b 	.word	0x000b4b7b
   b4d4c:	000c0002 	.word	0x000c0002
   b4d50:	000b4293 	.word	0x000b4293
   b4d54:	000b4135 	.word	0x000b4135

000b4d58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4d58:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d5c:	4604      	mov	r4, r0
   b4d5e:	460d      	mov	r5, r1
   b4d60:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4d62:	d916      	bls.n	b4d92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4d64:	4290      	cmp	r0, r2
   b4d66:	d215      	bcs.n	b4d94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4d68:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4d6c:	1a75      	subs	r5, r6, r1
   b4d6e:	f1a1 0714 	sub.w	r7, r1, #20
   b4d72:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4d74:	42b7      	cmp	r7, r6
   b4d76:	d01c      	beq.n	b4db2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4d78:	b12c      	cbz	r4, b4d86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4d7a:	4631      	mov	r1, r6
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	f006 fcdb 	bl	bb738 <_ZN6StringC1EOS_>
   b4d82:	7c33      	ldrb	r3, [r6, #16]
   b4d84:	7423      	strb	r3, [r4, #16]
   b4d86:	4630      	mov	r0, r6
   b4d88:	f006 fc5a 	bl	bb640 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4d8c:	3e14      	subs	r6, #20
   b4d8e:	3c14      	subs	r4, #20
   b4d90:	e7f0      	b.n	b4d74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4d92:	d00e      	beq.n	b4db2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4d94:	42b5      	cmp	r5, r6
   b4d96:	d00c      	beq.n	b4db2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4d98:	b12c      	cbz	r4, b4da6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4d9a:	4629      	mov	r1, r5
   b4d9c:	4620      	mov	r0, r4
   b4d9e:	f006 fccb 	bl	bb738 <_ZN6StringC1EOS_>
   b4da2:	7c2b      	ldrb	r3, [r5, #16]
   b4da4:	7423      	strb	r3, [r4, #16]
   b4da6:	4628      	mov	r0, r5
   b4da8:	f006 fc4a 	bl	bb640 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4dac:	3514      	adds	r5, #20
   b4dae:	3414      	adds	r4, #20
   b4db0:	e7f0      	b.n	b4d94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4db8:	2300      	movs	r3, #0
   b4dba:	e9c0 3300 	strd	r3, r3, [r0]
   b4dbe:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4dc0:	684f      	ldr	r7, [r1, #4]
   b4dc2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4dc4:	4604      	mov	r4, r0
   b4dc6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4dc8:	dd23      	ble.n	b4e12 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4dca:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4dce:	fb08 f007 	mul.w	r0, r8, r7
   b4dd2:	f004 fbf3 	bl	b95bc <malloc>
            if (!d) {
   b4dd6:	4605      	mov	r5, r0
   b4dd8:	b1d8      	cbz	r0, b4e12 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4dda:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4dde:	fb08 1202 	mla	r2, r8, r2, r1
   b4de2:	f7ff ffb9 	bl	b4d58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4de6:	6820      	ldr	r0, [r4, #0]
   b4de8:	f004 fbf0 	bl	b95cc <free>
        data_ = d;
   b4dec:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4dee:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4df0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4df4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4df8:	45b8      	cmp	r8, r7
   b4dfa:	d008      	beq.n	b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4dfc:	4639      	mov	r1, r7
   b4dfe:	4628      	mov	r0, r5
   b4e00:	f006 fcb4 	bl	bb76c <_ZN6StringC1ERKS_>
   b4e04:	7c3b      	ldrb	r3, [r7, #16]
   b4e06:	742b      	strb	r3, [r5, #16]
   b4e08:	3714      	adds	r7, #20
   b4e0a:	3514      	adds	r5, #20
   b4e0c:	e7f4      	b.n	b4df8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4e0e:	6873      	ldr	r3, [r6, #4]
   b4e10:	6063      	str	r3, [r4, #4]
}
   b4e12:	4620      	mov	r0, r4
   b4e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4e18 <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
}
   b4e18:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4e1a:	4b44      	ldr	r3, [pc, #272]	; (b4f2c <_GLOBAL__sub_I_SystemMode+0x114>)
    SleepResult() {}
   b4e1c:	4a44      	ldr	r2, [pc, #272]	; (b4f30 <_GLOBAL__sub_I_SystemMode+0x118>)
   b4e1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e20:	2400      	movs	r4, #0
   b4e22:	b08f      	sub	sp, #60	; 0x3c
   b4e24:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4e28:	2003      	movs	r0, #3
   b4e2a:	f004 fabd 	bl	b93a8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b4e2e:	4621      	mov	r1, r4
   b4e30:	2001      	movs	r0, #1
   b4e32:	f004 fad1 	bl	b93d8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b4e36:	2101      	movs	r1, #1
   b4e38:	2004      	movs	r0, #4
   b4e3a:	f004 f879 	bl	b8f30 <HAL_Feature_Set>
        capacity_(0) {
   b4e3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4e42:	9403      	str	r4, [sp, #12]
            StreamLogHandler(Serial, level, filters) {
   b4e44:	f006 fff4 	bl	bbe30 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4e48:	4d3a      	ldr	r5, [pc, #232]	; (b4f34 <_GLOBAL__sub_I_SystemMode+0x11c>)
   b4e4a:	4606      	mov	r6, r0
   b4e4c:	a901      	add	r1, sp, #4
   b4e4e:	a804      	add	r0, sp, #16
   b4e50:	f7ff ffb0 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e54:	462f      	mov	r7, r5
        stream_(&stream) {
   b4e56:	a904      	add	r1, sp, #16
   b4e58:	a807      	add	r0, sp, #28
   b4e5a:	f7ff ffab 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4e5e:	4b36      	ldr	r3, [pc, #216]	; (b4f38 <_GLOBAL__sub_I_SystemMode+0x120>)
   b4e60:	f847 3b04 	str.w	r3, [r7], #4
   b4e64:	a907      	add	r1, sp, #28
   b4e66:	a80a      	add	r0, sp, #40	; 0x28
   b4e68:	f7ff ffa4 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e6c:	aa0a      	add	r2, sp, #40	; 0x28
   b4e6e:	211e      	movs	r1, #30
   b4e70:	4638      	mov	r0, r7
   b4e72:	f005 fdf3 	bl	baa5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4e76:	a80a      	add	r0, sp, #40	; 0x28
   b4e78:	f7ff fea3 	bl	b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4e7c:	a807      	add	r0, sp, #28
   b4e7e:	f7ff fea0 	bl	b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e82:	4b2e      	ldr	r3, [pc, #184]	; (b4f3c <_GLOBAL__sub_I_SystemMode+0x124>)
   b4e84:	602b      	str	r3, [r5, #0]
   b4e86:	622e      	str	r6, [r5, #32]
   b4e88:	a804      	add	r0, sp, #16
   b4e8a:	f7ff fe9a 	bl	b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e8e:	4b2c      	ldr	r3, [pc, #176]	; (b4f40 <_GLOBAL__sub_I_SystemMode+0x128>)
   b4e90:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4e92:	f006 ffcd 	bl	bbe30 <_Z16_fetch_usbserialv>
   b4e96:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e9a:	f006 ffb7 	bl	bbe0c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4e9e:	f005 fabf 	bl	ba420 <_ZN5spark10LogManager8instanceEv>
   b4ea2:	4629      	mov	r1, r5
   b4ea4:	f005 fcb0 	bl	ba808 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b4ea8:	a801      	add	r0, sp, #4
   b4eaa:	f7ff fe8a 	bl	b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4eae:	f007 f881 	bl	bbfb4 <spark_protocol_instance>
   b4eb2:	4623      	mov	r3, r4
   b4eb4:	4622      	mov	r2, r4
   b4eb6:	210a      	movs	r1, #10
   b4eb8:	f007 f88c 	bl	bbfd4 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4ebc:	f007 f87a 	bl	bbfb4 <spark_protocol_instance>
   b4ec0:	4623      	mov	r3, r4
   b4ec2:	4622      	mov	r2, r4
   b4ec4:	210d      	movs	r1, #13
   b4ec6:	f007 f87d 	bl	bbfc4 <spark_protocol_set_product_id>
        : config_(config) {
   b4eca:	4a1e      	ldr	r2, [pc, #120]	; (b4f44 <_GLOBAL__sub_I_SystemMode+0x12c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b4ecc:	4e1e      	ldr	r6, [pc, #120]	; (b4f48 <_GLOBAL__sub_I_SystemMode+0x130>)
              valid_(true) {
   b4ece:	6114      	str	r4, [r2, #16]
        : config_(config) {
   b4ed0:	1d13      	adds	r3, r2, #4
              valid_(true) {
   b4ed2:	e9c2 4402 	strd	r4, r4, [r2, #8]
        : config_(config) {
   b4ed6:	6013      	str	r3, [r2, #0]
              valid_(true) {
   b4ed8:	2401      	movs	r4, #1
        config_.size = sizeof(hal_sleep_config_t);
   b4eda:	4b1c      	ldr	r3, [pc, #112]	; (b4f4c <_GLOBAL__sub_I_SystemMode+0x134>)
   b4edc:	6053      	str	r3, [r2, #4]
              valid_(true) {
   b4ede:	7514      	strb	r4, [r2, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4ee0:	f007 f948 	bl	bc174 <_Z19__fetch_global_Wirev>
   b4ee4:	2269      	movs	r2, #105	; 0x69
   b4ee6:	4601      	mov	r1, r0
   b4ee8:	4819      	ldr	r0, [pc, #100]	; (b4f50 <_GLOBAL__sub_I_SystemMode+0x138>)
	    _M_manager = &_My_handler::_M_manager;
   b4eea:	4d1a      	ldr	r5, [pc, #104]	; (b4f54 <_GLOBAL__sub_I_SystemMode+0x13c>)
   b4eec:	f001 fd5a 	bl	b69a4 <_ZN6AB1805C1ER7TwoWireh>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4ef0:	4b19      	ldr	r3, [pc, #100]	; (b4f58 <_GLOBAL__sub_I_SystemMode+0x140>)
   b4ef2:	930a      	str	r3, [sp, #40]	; 0x28
Timer transmitDelayTimer(10000,transmitDelayTimerISR,true);
   b4ef4:	aa0a      	add	r2, sp, #40	; 0x28
   b4ef6:	4623      	mov	r3, r4
   b4ef8:	f242 7110 	movw	r1, #10000	; 0x2710
   b4efc:	4817      	ldr	r0, [pc, #92]	; (b4f5c <_GLOBAL__sub_I_SystemMode+0x144>)
	    _M_invoker = &_My_handler::_M_invoke;
   b4efe:	960d      	str	r6, [sp, #52]	; 0x34
	    _M_manager = &_My_handler::_M_manager;
   b4f00:	950c      	str	r5, [sp, #48]	; 0x30
   b4f02:	f7ff fe83 	bl	b4c0c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b4f06:	a80a      	add	r0, sp, #40	; 0x28
   b4f08:	f7ff f9ba 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4f0c:	4b14      	ldr	r3, [pc, #80]	; (b4f60 <_GLOBAL__sub_I_SystemMode+0x148>)
Timer listeningDurationTimer(300000,listeningDurationTimerISR,true);
   b4f0e:	4915      	ldr	r1, [pc, #84]	; (b4f64 <_GLOBAL__sub_I_SystemMode+0x14c>)
   b4f10:	930a      	str	r3, [sp, #40]	; 0x28
   b4f12:	aa0a      	add	r2, sp, #40	; 0x28
   b4f14:	4623      	mov	r3, r4
   b4f16:	4814      	ldr	r0, [pc, #80]	; (b4f68 <_GLOBAL__sub_I_SystemMode+0x150>)
	    _M_manager = &_My_handler::_M_manager;
   b4f18:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
   b4f1c:	f7ff fe76 	bl	b4c0c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b4f20:	a80a      	add	r0, sp, #40	; 0x28
   b4f22:	f7ff f9ad 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
}
   b4f26:	b00f      	add	sp, #60	; 0x3c
   b4f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4f2a:	bf00      	nop
   b4f2c:	2003e088 	.word	0x2003e088
   b4f30:	ffff0000 	.word	0xffff0000
   b4f34:	2003e108 	.word	0x2003e108
   b4f38:	000be7a8 	.word	0x000be7a8
   b4f3c:	000bf6a4 	.word	0x000bf6a4
   b4f40:	000be7c0 	.word	0x000be7c0
   b4f44:	2003e0d4 	.word	0x2003e0d4
   b4f48:	000b4207 	.word	0x000b4207
   b4f4c:	00030010 	.word	0x00030010
   b4f50:	2003e0b4 	.word	0x2003e0b4
   b4f54:	000b41f3 	.word	0x000b41f3
   b4f58:	000b40e5 	.word	0x000b40e5
   b4f5c:	2003e130 	.word	0x2003e130
   b4f60:	000b415d 	.word	0x000b415d
   b4f64:	000493e0 	.word	0x000493e0
   b4f68:	2003e0ec 	.word	0x2003e0ec

000b4f6c <_Z22disconnectFromParticlev>:
{
   b4f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  time_t startTime = Time.now();
   b4f70:	f006 fe77 	bl	bbc62 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b4f74:	4939      	ldr	r1, [pc, #228]	; (b505c <_Z22disconnectFromParticlev+0xf0>)
  time_t startTime = Time.now();
   b4f76:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b4f78:	4839      	ldr	r0, [pc, #228]	; (b5060 <_Z22disconnectFromParticlev+0xf4>)
   b4f7a:	f7ff fa19 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4f7e:	2300      	movs	r3, #0
  Particle.disconnect();                                               		// Disconnect from Particle
   b4f80:	a801      	add	r0, sp, #4
   b4f82:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b4f86:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4f8a:	f004 fce9 	bl	b9960 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   b4f8e:	f7ff f9f5 	bl	b437c <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b4f92:	f643 2698 	movw	r6, #15000	; 0x3a98
        const system_tick_t start = millis();
   b4f96:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4f98:	f7ff f9f0 	bl	b437c <_ZN11SystemClass6millisEv>
   b4f9c:	1b03      	subs	r3, r0, r4
   b4f9e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4fa2:	42b3      	cmp	r3, r6
   b4fa4:	f171 0300 	sbcs.w	r3, r1, #0
   b4fa8:	d205      	bcs.n	b4fb6 <_Z22disconnectFromParticlev+0x4a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4faa:	f004 fa77 	bl	b949c <spark_cloud_flag_connected>
   b4fae:	b110      	cbz	r0, b4fb6 <_Z22disconnectFromParticlev+0x4a>
            spark_process();
   b4fb0:	f004 fa64 	bl	b947c <spark_process>
        while (_while() && !_condition()) {
   b4fb4:	e7f0      	b.n	b4f98 <_Z22disconnectFromParticlev+0x2c>
   b4fb6:	f004 fa71 	bl	b949c <spark_cloud_flag_connected>
  Particle.process();
   b4fba:	f7ff f9e3 	bl	b4384 <_ZN10CloudClass7processEv>
   b4fbe:	f004 fa6d 	bl	b949c <spark_cloud_flag_connected>
  if (Particle.connected()) {                      							// As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b4fc2:	4604      	mov	r4, r0
   b4fc4:	b140      	cbz	r0, b4fd8 <_Z22disconnectFromParticlev+0x6c>
    Log.info("Failed to disconnect from Particle");
   b4fc6:	4927      	ldr	r1, [pc, #156]	; (b5064 <_Z22disconnectFromParticlev+0xf8>)
   b4fc8:	4825      	ldr	r0, [pc, #148]	; (b5060 <_Z22disconnectFromParticlev+0xf4>)
   b4fca:	f7ff f9f1 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b4fce:	2400      	movs	r4, #0
}
   b4fd0:	4620      	mov	r0, r4
   b4fd2:	b004      	add	sp, #16
   b4fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b4fd8:	f006 fe43 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b4fdc:	4922      	ldr	r1, [pc, #136]	; (b5068 <_Z22disconnectFromParticlev+0xfc>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4fde:	4f23      	ldr	r7, [pc, #140]	; (b506c <_Z22disconnectFromParticlev+0x100>)
   b4fe0:	1b42      	subs	r2, r0, r5
   b4fe2:	481f      	ldr	r0, [pc, #124]	; (b5060 <_Z22disconnectFromParticlev+0xf4>)
   b4fe4:	f7ff f9e4 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b4fe8:	f006 fe3b 	bl	bbc62 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4fec:	4622      	mov	r2, r4
   b4fee:	2102      	movs	r1, #2
   b4ff0:	4606      	mov	r6, r0
   b4ff2:	6878      	ldr	r0, [r7, #4]
   b4ff4:	f004 fa92 	bl	b951c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b4ff8:	6878      	ldr	r0, [r7, #4]
   b4ffa:	4623      	mov	r3, r4
   b4ffc:	4622      	mov	r2, r4
   b4ffe:	4621      	mov	r1, r4
   b5000:	f004 faa4 	bl	b954c <network_off>
        const system_tick_t start = millis();
   b5004:	f7ff f9ba 	bl	b437c <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b5008:	f247 5830 	movw	r8, #30000	; 0x7530
        const system_tick_t start = millis();
   b500c:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b500e:	f7ff f9b5 	bl	b437c <_ZN11SystemClass6millisEv>
   b5012:	1b43      	subs	r3, r0, r5
   b5014:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5018:	4543      	cmp	r3, r8
   b501a:	f171 0300 	sbcs.w	r3, r1, #0
   b501e:	d206      	bcs.n	b502e <_Z22disconnectFromParticlev+0xc2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b5020:	4638      	mov	r0, r7
   b5022:	f006 f839 	bl	bb098 <_ZN5spark12NetworkClass5isOffEv>
   b5026:	b910      	cbnz	r0, b502e <_Z22disconnectFromParticlev+0xc2>
            spark_process();
   b5028:	f004 fa28 	bl	b947c <spark_process>
        while (_while() && !_condition()) {
   b502c:	e7ef      	b.n	b500e <_Z22disconnectFromParticlev+0xa2>
   b502e:	480f      	ldr	r0, [pc, #60]	; (b506c <_Z22disconnectFromParticlev+0x100>)
   b5030:	f006 f832 	bl	bb098 <_ZN5spark12NetworkClass5isOffEv>
  Particle.process();
   b5034:	f7ff f9a6 	bl	b4384 <_ZN10CloudClass7processEv>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b5038:	480c      	ldr	r0, [pc, #48]	; (b506c <_Z22disconnectFromParticlev+0x100>)
   b503a:	f006 f829 	bl	bb090 <_ZN5spark12NetworkClass4isOnEv>
   b503e:	b120      	cbz	r0, b504a <_Z22disconnectFromParticlev+0xde>
    Log.info("Failed to turn off the Cellular modem");
   b5040:	490b      	ldr	r1, [pc, #44]	; (b5070 <_Z22disconnectFromParticlev+0x104>)
   b5042:	4807      	ldr	r0, [pc, #28]	; (b5060 <_Z22disconnectFromParticlev+0xf4>)
   b5044:	f7ff f9b4 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b5048:	e7c2      	b.n	b4fd0 <_Z22disconnectFromParticlev+0x64>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b504a:	f006 fe0a 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b504e:	4909      	ldr	r1, [pc, #36]	; (b5074 <_Z22disconnectFromParticlev+0x108>)
   b5050:	1b82      	subs	r2, r0, r6
   b5052:	4803      	ldr	r0, [pc, #12]	; (b5060 <_Z22disconnectFromParticlev+0xf4>)
   b5054:	f7ff f9ac 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b5058:	2401      	movs	r4, #1
   b505a:	e7b9      	b.n	b4fd0 <_Z22disconnectFromParticlev+0x64>
   b505c:	000be576 	.word	0x000be576
   b5060:	2003e654 	.word	0x2003e654
   b5064:	000be59f 	.word	0x000be59f
   b5068:	000be5c2 	.word	0x000be5c2
   b506c:	2003e610 	.word	0x2003e610
   b5070:	000be5eb 	.word	0x000be5eb
   b5074:	000be611 	.word	0x000be611

000b5078 <setup>:
void setup() {
   b5078:	b5f0      	push	{r4, r5, r6, r7, lr}
   b507a:	b08d      	sub	sp, #52	; 0x34
        const system_tick_t start = millis();
   b507c:	f7ff f97e 	bl	b437c <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b5080:	f242 7510 	movw	r5, #10000	; 0x2710
        const system_tick_t start = millis();
   b5084:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5086:	f7ff f979 	bl	b437c <_ZN11SystemClass6millisEv>
   b508a:	1b00      	subs	r0, r0, r4
   b508c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5090:	42a8      	cmp	r0, r5
   b5092:	f171 0300 	sbcs.w	r3, r1, #0
   b5096:	d207      	bcs.n	b50a8 <setup+0x30>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5098:	f006 feca 	bl	bbe30 <_Z16_fetch_usbserialv>
   b509c:	f006 febd 	bl	bbe1a <_ZN9USBSerial11isConnectedEv>
   b50a0:	b910      	cbnz	r0, b50a8 <setup+0x30>
            spark_process();
   b50a2:	f004 f9eb 	bl	b947c <spark_process>
        while (_while() && !_condition()) {
   b50a6:	e7ee      	b.n	b5086 <setup+0xe>
   b50a8:	f006 fec2 	bl	bbe30 <_Z16_fetch_usbserialv>
   b50ac:	f006 feb5 	bl	bbe1a <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b50b0:	f001 f9f0 	bl	b6494 <_Z18initializePinModesv>
    initializePowerCfg(true);                       // Sets the power configuration for solar - default is charging enabled
   b50b4:	2001      	movs	r0, #1
   b50b6:	f001 fa27 	bl	b6508 <_Z18initializePowerCfgb>
	sysStatus.setup();								// Initialize persistent storage
   b50ba:	f000 fead 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b50be:	6803      	ldr	r3, [r0, #0]
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	4798      	blx	r3
	current.setup();
   b50c4:	f000 ff1a 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b50c8:	6803      	ldr	r3, [r0, #0]
   b50ca:	681b      	ldr	r3, [r3, #0]
   b50cc:	4798      	blx	r3
	if (!digitalRead(BUTTON_PIN)) {											// We will use this to connect in order to get an update only
   b50ce:	4b6f      	ldr	r3, [pc, #444]	; (b528c <setup+0x214>)
   b50d0:	881e      	ldrh	r6, [r3, #0]
   b50d2:	4630      	mov	r0, r6
   b50d4:	f006 ffee 	bl	bc0b4 <digitalRead>
   b50d8:	4604      	mov	r4, r0
   b50da:	bb28      	cbnz	r0, b5128 <setup+0xb0>
		Log.info("User button pressed at startup - attempt to connect");
   b50dc:	496c      	ldr	r1, [pc, #432]	; (b5290 <setup+0x218>)
   b50de:	486d      	ldr	r0, [pc, #436]	; (b5294 <setup+0x21c>)
   b50e0:	4f6d      	ldr	r7, [pc, #436]	; (b5298 <setup+0x220>)
   b50e2:	f7ff f965 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
        spark_cloud_flag_connect();
   b50e6:	f004 f9d1 	bl	b948c <spark_cloud_flag_connect>
        const system_tick_t start = millis();
   b50ea:	f7ff f947 	bl	b437c <_ZN11SystemClass6millisEv>
   b50ee:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b50f0:	f7ff f944 	bl	b437c <_ZN11SystemClass6millisEv>
   b50f4:	1b40      	subs	r0, r0, r5
   b50f6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b50fa:	4287      	cmp	r7, r0
   b50fc:	eb74 0301 	sbcs.w	r3, r4, r1
   b5100:	d305      	bcc.n	b510e <setup+0x96>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5102:	f004 f9cb 	bl	b949c <spark_cloud_flag_connected>
   b5106:	b910      	cbnz	r0, b510e <setup+0x96>
            spark_process();
   b5108:	f004 f9b8 	bl	b947c <spark_process>
        while (_while() && !_condition()) {
   b510c:	e7f0      	b.n	b50f0 <setup+0x78>
   b510e:	f004 f9c5 	bl	b949c <spark_cloud_flag_connected>
		if (!waitFor(Particle.connected,600000)) {
   b5112:	2800      	cmp	r0, #0
   b5114:	f040 8089 	bne.w	b522a <setup+0x1b2>
			Log.info("Connection timeout - disconnect and reset");
   b5118:	4960      	ldr	r1, [pc, #384]	; (b529c <setup+0x224>)
   b511a:	485e      	ldr	r0, [pc, #376]	; (b5294 <setup+0x21c>)
   b511c:	f7ff f948 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
			disconnectFromParticle();
   b5120:	f7ff ff24 	bl	b4f6c <_Z22disconnectFromParticlev>
			System.reset();        				// You won't reach this point if there is an update but we need to reset to take the device back off-line
   b5124:	f006 fbbb 	bl	bb89e <_ZN11SystemClass5resetEv>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5128:	485d      	ldr	r0, [pc, #372]	; (b52a0 <setup+0x228>)
   b512a:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// The carrier board has D8 connected to FOUT for wake interrupts
   b512c:	2101      	movs	r1, #1
   b512e:	8143      	strh	r3, [r0, #10]
   b5130:	f002 f934 	bl	b739c <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b5134:	217c      	movs	r1, #124	; 0x7c
   b5136:	485a      	ldr	r0, [pc, #360]	; (b52a0 <setup+0x228>)
   b5138:	f001 fd32 	bl	b6ba0 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b513c:	4b59      	ldr	r3, [pc, #356]	; (b52a4 <setup+0x22c>)
   b513e:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b5140:	4b59      	ldr	r3, [pc, #356]	; (b52a8 <setup+0x230>)
   b5142:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5144:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b5146:	4b59      	ldr	r3, [pc, #356]	; (b52ac <setup+0x234>)
   b5148:	930a      	str	r3, [sp, #40]	; 0x28
   b514a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b514e:	2300      	movs	r3, #0
   b5150:	a804      	add	r0, sp, #16
   b5152:	9400      	str	r4, [sp, #0]
   b5154:	f7ff fd84 	bl	b4c60 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5158:	4620      	mov	r0, r4
   b515a:	f7ff f891 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b515e:	f000 f8e1 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b5162:	2100      	movs	r1, #0
   b5164:	f000 f948 	bl	b53f8 <_ZN14LoRA_Functions5setupEb>
   b5168:	2800      	cmp	r0, #0
   b516a:	d16f      	bne.n	b524c <setup+0x1d4>
		sysStatus.set_alertCodeNode(3);										// Initialization failure
   b516c:	f000 fe54 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5170:	2103      	movs	r1, #3
   b5172:	f000 ff8a 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b5176:	f000 fe4f 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b517a:	4605      	mov	r5, r0
   b517c:	f006 fd71 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b5180:	4602      	mov	r2, r0
   b5182:	17c3      	asrs	r3, r0, #31
   b5184:	4628      	mov	r0, r5
   b5186:	f001 f8ab 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", sysStatus.get_alertCodeNode());
   b518a:	f000 fe45 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b518e:	f000 ff34 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5192:	4947      	ldr	r1, [pc, #284]	; (b52b0 <setup+0x238>)
   b5194:	4602      	mov	r2, r0
   b5196:	483f      	ldr	r0, [pc, #252]	; (b5294 <setup+0x21c>)
   b5198:	f7ff f90a 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b519c:	f001 fba2 	bl	b68e4 <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b51a0:	4844      	ldr	r0, [pc, #272]	; (b52b4 <setup+0x23c>)
   b51a2:	4945      	ldr	r1, [pc, #276]	; (b52b8 <setup+0x240>)
   b51a4:	8800      	ldrh	r0, [r0, #0]
   b51a6:	2500      	movs	r5, #0
   b51a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b51ac:	2201      	movs	r2, #1
   b51ae:	9500      	str	r5, [sp, #0]
   b51b0:	f004 fd38 	bl	b9c24 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,FALLING); 						// We may need to monitor the user switch to change behaviours / modes
   b51b4:	4941      	ldr	r1, [pc, #260]	; (b52bc <setup+0x244>)
   b51b6:	9500      	str	r5, [sp, #0]
   b51b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b51bc:	2202      	movs	r2, #2
   b51be:	4630      	mov	r0, r6
   b51c0:	f004 fd30 	bl	b9c24 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (sysStatus.get_openHours()) sensorControl(sysStatus.get_sensorType(),true); // Turn the sensor on during open hours
   b51c4:	f000 fe28 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b51c8:	f000 fe4c 	bl	b5e64 <_ZNK13sysStatusData13get_openHoursEv>
   b51cc:	b130      	cbz	r0, b51dc <setup+0x164>
   b51ce:	f000 fe23 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b51d2:	f000 ff17 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
   b51d6:	2101      	movs	r1, #1
   b51d8:	f001 f980 	bl	b64dc <_Z13sensorControlib>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b51dc:	4b38      	ldr	r3, [pc, #224]	; (b52c0 <setup+0x248>)
   b51de:	781a      	ldrb	r2, [r3, #0]
   b51e0:	b90a      	cbnz	r2, b51e6 <setup+0x16e>
   b51e2:	2203      	movs	r2, #3
   b51e4:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d and last connect %s", sysStatus.get_alertCodeNode(), Time.format(sysStatus.get_lastConnection(), "%T").c_str());
   b51e6:	f000 fe17 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b51ea:	f000 ff06 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b51ee:	4605      	mov	r5, r0
   b51f0:	f000 fe12 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b51f4:	f001 f84c 	bl	b6290 <_ZNK13sysStatusData18get_lastConnectionEv>
   b51f8:	460b      	mov	r3, r1
   b51fa:	4932      	ldr	r1, [pc, #200]	; (b52c4 <setup+0x24c>)
   b51fc:	9100      	str	r1, [sp, #0]
   b51fe:	4602      	mov	r2, r0
   b5200:	4931      	ldr	r1, [pc, #196]	; (b52c8 <setup+0x250>)
   b5202:	4620      	mov	r0, r4
   b5204:	f006 fcce 	bl	bbba4 <_ZN9TimeClass6formatExPKc>
   b5208:	9b08      	ldr	r3, [sp, #32]
   b520a:	4930      	ldr	r1, [pc, #192]	; (b52cc <setup+0x254>)
   b520c:	4821      	ldr	r0, [pc, #132]	; (b5294 <setup+0x21c>)
   b520e:	462a      	mov	r2, r5
   b5210:	f7ff f8ce 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b5214:	4620      	mov	r0, r4
   b5216:	f006 fa13 	bl	bb640 <_ZN6StringD1Ev>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b521a:	4b2d      	ldr	r3, [pc, #180]	; (b52d0 <setup+0x258>)
   b521c:	8818      	ldrh	r0, [r3, #0]
   b521e:	2100      	movs	r1, #0
}
   b5220:	b00d      	add	sp, #52	; 0x34
   b5222:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b5226:	f006 bf2c 	b.w	bc082 <digitalWrite>
			Log.info("Connected - staying online for update");
   b522a:	492a      	ldr	r1, [pc, #168]	; (b52d4 <setup+0x25c>)
   b522c:	4819      	ldr	r0, [pc, #100]	; (b5294 <setup+0x21c>)
			while (millis() - start < (120 * 1000)) {							// Stay on-line for two minutes
   b522e:	4d2a      	ldr	r5, [pc, #168]	; (b52d8 <setup+0x260>)
			Log.info("Connected - staying online for update");
   b5230:	f7ff f8be 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b5234:	f003 fe94 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b5238:	4604      	mov	r4, r0
   b523a:	f003 fe91 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
			while (millis() - start < (120 * 1000)) {							// Stay on-line for two minutes
   b523e:	1b00      	subs	r0, r0, r4
   b5240:	42a8      	cmp	r0, r5
   b5242:	f63f af6d 	bhi.w	b5120 <setup+0xa8>
				Particle.process();
   b5246:	f7ff f89d 	bl	b4384 <_ZN10CloudClass7processEv>
			while (millis() - start < (120 * 1000)) {							// Stay on-line for two minutes
   b524a:	e7f6      	b.n	b523a <setup+0x1c2>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b524c:	f000 fde4 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5250:	f000 fec9 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5254:	280a      	cmp	r0, #10
   b5256:	d914      	bls.n	b5282 <setup+0x20a>
		sysStatus.set_alertCodeNode(1); 									// Will initiate a join request
   b5258:	f000 fdde 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b525c:	2101      	movs	r1, #1
   b525e:	f000 ff14 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", sysStatus.get_nodeNumber(), sysStatus.get_alertCodeNode());
   b5262:	f000 fdd9 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5266:	f000 febe 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b526a:	9003      	str	r0, [sp, #12]
   b526c:	f000 fdd4 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5270:	f000 fec3 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5274:	9a03      	ldr	r2, [sp, #12]
   b5276:	4919      	ldr	r1, [pc, #100]	; (b52dc <setup+0x264>)
   b5278:	4603      	mov	r3, r0
   b527a:	4806      	ldr	r0, [pc, #24]	; (b5294 <setup+0x21c>)
   b527c:	f7ff f898 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b5280:	e78c      	b.n	b519c <setup+0x124>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b5282:	f006 fcd1 	bl	bbc28 <_ZN9TimeClass7isValidEv>
   b5286:	2800      	cmp	r0, #0
   b5288:	d0e6      	beq.n	b5258 <setup+0x1e0>
   b528a:	e787      	b.n	b519c <setup+0x124>
   b528c:	000bedea 	.word	0x000bedea
   b5290:	000be63d 	.word	0x000be63d
   b5294:	2003e654 	.word	0x2003e654
   b5298:	000927bf 	.word	0x000927bf
   b529c:	000be671 	.word	0x000be671
   b52a0:	2003e0b4 	.word	0x2003e0b4
   b52a4:	000b40d9 	.word	0x000b40d9
   b52a8:	000b41e9 	.word	0x000b41e9
   b52ac:	000b41d5 	.word	0x000b41d5
   b52b0:	000be6c1 	.word	0x000be6c1
   b52b4:	000bedec 	.word	0x000bedec
   b52b8:	000b40fd 	.word	0x000b40fd
   b52bc:	000b40f1 	.word	0x000b40f1
   b52c0:	2003e12e 	.word	0x2003e12e
   b52c4:	000be29f 	.word	0x000be29f
   b52c8:	2003e6ac 	.word	0x2003e6ac
   b52cc:	000be746 	.word	0x000be746
   b52d0:	000bede8 	.word	0x000bede8
   b52d4:	000be69b 	.word	0x000be69b
   b52d8:	0001d4bf 	.word	0x0001d4bf
   b52dc:	000be6ff 	.word	0x000be6ff

000b52e0 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b52e0:	4770      	bx	lr

000b52e2 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b52e2:	4770      	bx	lr

000b52e4 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b52e4:	b510      	push	{r4, lr}
}
   b52e6:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b52e8:	4604      	mov	r4, r0
}
   b52ea:	f7fe fed8 	bl	b409e <_ZdlPvj>
   b52ee:	4620      	mov	r0, r4
   b52f0:	bd10      	pop	{r4, pc}
	...

000b52f4 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b52f4:	b510      	push	{r4, lr}
   b52f6:	4b05      	ldr	r3, [pc, #20]	; (b530c <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b52f8:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b52fa:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b52fc:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b52fe:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b5302:	f004 f835 	bl	b9370 <led_set_status_active>
}
   b5306:	4620      	mov	r0, r4
   b5308:	bd10      	pop	{r4, pc}
   b530a:	bf00      	nop
   b530c:	000bec44 	.word	0x000bec44

000b5310 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b5310:	b510      	push	{r4, lr}
   b5312:	4604      	mov	r4, r0
}
   b5314:	f7ff ffee 	bl	b52f4 <_ZN8particle9LEDStatusD1Ev>
   b5318:	4620      	mov	r0, r4
   b531a:	2120      	movs	r1, #32
   b531c:	f7fe febf 	bl	b409e <_ZdlPvj>
   b5320:	4620      	mov	r0, r4
   b5322:	bd10      	pop	{r4, pc}

000b5324 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b5324:	b510      	push	{r4, lr}
    if (!_instance) {
   b5326:	4c06      	ldr	r4, [pc, #24]	; (b5340 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b5328:	6823      	ldr	r3, [r4, #0]
   b532a:	b933      	cbnz	r3, b533a <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b532c:	2004      	movs	r0, #4
   b532e:	f7fe feb2 	bl	b4096 <_Znwj>
   b5332:	b108      	cbz	r0, b5338 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b5334:	4b03      	ldr	r3, [pc, #12]	; (b5344 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b5336:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b5338:	6020      	str	r0, [r4, #0]
}
   b533a:	6820      	ldr	r0, [r4, #0]
   b533c:	bd10      	pop	{r4, pc}
   b533e:	bf00      	nop
   b5340:	2003e150 	.word	0x2003e150
   b5344:	000bec58 	.word	0x000bec58

000b5348 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b5348:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b534a:	4c06      	ldr	r4, [pc, #24]	; (b5364 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b534c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b534e:	f10d 0203 	add.w	r2, sp, #3
   b5352:	a901      	add	r1, sp, #4
   b5354:	4620      	mov	r0, r4
   b5356:	f003 f8fb 	bl	b8550 <_ZN7RH_RF954recvEPhS0_>
   b535a:	2800      	cmp	r0, #0
   b535c:	d1f7      	bne.n	b534e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b535e:	b040      	add	sp, #256	; 0x100
   b5360:	bd10      	pop	{r4, pc}
   b5362:	bf00      	nop
   b5364:	2003e1d0 	.word	0x2003e1d0

000b5368 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b5368:	4801      	ldr	r0, [pc, #4]	; (b5370 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b536a:	f003 b8de 	b.w	b852a <_ZN7RH_RF955sleepEv>
   b536e:	bf00      	nop
   b5370:	2003e1d0 	.word	0x2003e1d0

000b5374 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b5374:	4b19      	ldr	r3, [pc, #100]	; (b53dc <_ZN14LoRA_Functions15initializeRadioEv+0x68>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b5376:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b5378:	881c      	ldrh	r4, [r3, #0]
   b537a:	2100      	movs	r1, #0
   b537c:	4620      	mov	r0, r4
   b537e:	f006 fe80 	bl	bc082 <digitalWrite>
	delay(10);
   b5382:	200a      	movs	r0, #10
   b5384:	f004 f996 	bl	b96b4 <delay>
	digitalWrite(RFM95_RST,HIGH);
   b5388:	2101      	movs	r1, #1
   b538a:	4620      	mov	r0, r4
   b538c:	f006 fe79 	bl	bc082 <digitalWrite>
	delay(10);
   b5390:	200a      	movs	r0, #10
   b5392:	f004 f98f 	bl	b96b4 <delay>

	if (!manager.init()) {
   b5396:	4812      	ldr	r0, [pc, #72]	; (b53e0 <_ZN14LoRA_Functions15initializeRadioEv+0x6c>)
   b5398:	f002 fe65 	bl	b8066 <_ZN8RHRouter4initEv>
   b539c:	4604      	mov	r4, r0
   b539e:	b928      	cbnz	r0, b53ac <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b53a0:	4910      	ldr	r1, [pc, #64]	; (b53e4 <_ZN14LoRA_Functions15initializeRadioEv+0x70>)
   b53a2:	4811      	ldr	r0, [pc, #68]	; (b53e8 <_ZN14LoRA_Functions15initializeRadioEv+0x74>)
   b53a4:	f7ff f804 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
	driver.setModemConfig(RH_RF95::Bw125Cr45Sf2048);
	//driver.setModemConfig(RH_RF95::Bw125Cr48Sf4096);	// This optimized the radio for long range - https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html
	driver.setLowDatarate();						// https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#a8e2df6a6d2cb192b13bd572a7005da67
	manager.setTimeout(1000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html
return true;
}
   b53a8:	4620      	mov	r0, r4
   b53aa:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b53ac:	ed9f 0a0f 	vldr	s0, [pc, #60]	; b53ec <_ZN14LoRA_Functions15initializeRadioEv+0x78>
   b53b0:	480f      	ldr	r0, [pc, #60]	; (b53f0 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b53b2:	f003 f951 	bl	b8658 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b53b6:	2200      	movs	r2, #0
   b53b8:	480d      	ldr	r0, [pc, #52]	; (b53f0 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b53ba:	2117      	movs	r1, #23
   b53bc:	f003 fac6 	bl	b894c <_ZN7RH_RF9510setTxPowerEab>
	driver.setModemConfig(RH_RF95::Bw125Cr45Sf2048);
   b53c0:	2104      	movs	r1, #4
   b53c2:	480b      	ldr	r0, [pc, #44]	; (b53f0 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b53c4:	f003 faee 	bl	b89a4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
	driver.setLowDatarate();						// https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#a8e2df6a6d2cb192b13bd572a7005da67
   b53c8:	4809      	ldr	r0, [pc, #36]	; (b53f0 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b53ca:	f003 fb99 	bl	b8b00 <_ZN7RH_RF9514setLowDatarateEv>
	manager.setTimeout(1000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html
   b53ce:	4809      	ldr	r0, [pc, #36]	; (b53f4 <_ZN14LoRA_Functions15initializeRadioEv+0x80>)
   b53d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b53d4:	f002 fd55 	bl	b7e82 <_ZN18RHReliableDatagram10setTimeoutEt>
return true;
   b53d8:	e7e6      	b.n	b53a8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b53da:	bf00      	nop
   b53dc:	000bedf2 	.word	0x000bedf2
   b53e0:	2003e300 	.word	0x2003e300
   b53e4:	000be7d0 	.word	0x000be7d0
   b53e8:	2003e654 	.word	0x2003e654
   b53ec:	4467b5c3 	.word	0x4467b5c3
   b53f0:	2003e1d0 	.word	0x2003e1d0
   b53f4:	2003e304 	.word	0x2003e304

000b53f8 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b53f8:	b510      	push	{r4, lr}
   b53fa:	b088      	sub	sp, #32
   b53fc:	460c      	mov	r4, r1
	LoRA_Functions::initializeRadio();
   b53fe:	f7ff ffb9 	bl	b5374 <_ZN14LoRA_Functions15initializeRadioEv>
	Log.info("in LoRA setup - node number %d",sysStatus.get_nodeNumber());
   b5402:	f000 fd09 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5406:	f000 fdee 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b540a:	492e      	ldr	r1, [pc, #184]	; (b54c4 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b540c:	4602      	mov	r2, r0
   b540e:	482e      	ldr	r0, [pc, #184]	; (b54c8 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b5410:	f7fe ffce 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
	if (gatewayID == true) {
   b5414:	b194      	cbz	r4, b543c <_ZN14LoRA_Functions5setupEb+0x44>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b5416:	f000 fcff 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b541a:	2100      	movs	r1, #0
   b541c:	f000 fe23 	bl	b6066 <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b5420:	a804      	add	r0, sp, #16
   b5422:	f004 f843 	bl	b94ac <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b5426:	9a04      	ldr	r2, [sp, #16]
   b5428:	4928      	ldr	r1, [pc, #160]	; (b54cc <_ZN14LoRA_Functions5setupEb+0xd4>)
   b542a:	4827      	ldr	r0, [pc, #156]	; (b54c8 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b542c:	f7fe ffc0 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s and alert code %d", manager.thisAddress(), System.deviceID().c_str(), sysStatus.get_alertCodeNode());
   b5430:	a804      	add	r0, sp, #16
   b5432:	f006 f905 	bl	bb640 <_ZN6StringD1Ev>
}
   b5436:	2001      	movs	r0, #1
   b5438:	b008      	add	sp, #32
   b543a:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b543c:	f000 fcec 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5440:	f000 fdd1 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5444:	b1d8      	cbz	r0, b547e <_ZN14LoRA_Functions5setupEb+0x86>
   b5446:	f000 fce7 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b544a:	f000 fdcc 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b544e:	280a      	cmp	r0, #10
   b5450:	d815      	bhi.n	b547e <_ZN14LoRA_Functions5setupEb+0x86>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b5452:	f000 fce1 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5456:	f000 fdc6 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b545a:	4601      	mov	r1, r0
   b545c:	481c      	ldr	r0, [pc, #112]	; (b54d0 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b545e:	f002 f92c 	bl	b76ba <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5462:	481b      	ldr	r0, [pc, #108]	; (b54d0 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b5464:	f002 f90f 	bl	b7686 <_ZN10RHDatagram11thisAddressEv>
   b5468:	9002      	str	r0, [sp, #8]
   b546a:	a804      	add	r0, sp, #16
   b546c:	f004 f81e 	bl	b94ac <spark_deviceID>
   b5470:	9b04      	ldr	r3, [sp, #16]
   b5472:	9a02      	ldr	r2, [sp, #8]
   b5474:	4917      	ldr	r1, [pc, #92]	; (b54d4 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b5476:	4814      	ldr	r0, [pc, #80]	; (b54c8 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b5478:	f7fe ff9a 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b547c:	e7d8      	b.n	b5430 <_ZN14LoRA_Functions5setupEb+0x38>
		sysStatus.set_nodeNumber(11);
   b547e:	f000 fccb 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5482:	210b      	movs	r1, #11
   b5484:	f000 fdef 	bl	b6066 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b5488:	210b      	movs	r1, #11
   b548a:	4811      	ldr	r0, [pc, #68]	; (b54d0 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b548c:	f002 f915 	bl	b76ba <_ZN10RHDatagram14setThisAddressEh>
		sysStatus.set_alertCodeNode(1);															// Join request required
   b5490:	f000 fcc2 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5494:	2101      	movs	r1, #1
   b5496:	f000 fdf8 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s and alert code %d", manager.thisAddress(), System.deviceID().c_str(), sysStatus.get_alertCodeNode());
   b549a:	480d      	ldr	r0, [pc, #52]	; (b54d0 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b549c:	f002 f8f3 	bl	b7686 <_ZN10RHDatagram11thisAddressEv>
   b54a0:	9003      	str	r0, [sp, #12]
   b54a2:	a804      	add	r0, sp, #16
   b54a4:	f004 f802 	bl	b94ac <spark_deviceID>
   b54a8:	9b04      	ldr	r3, [sp, #16]
   b54aa:	9302      	str	r3, [sp, #8]
   b54ac:	f000 fcb4 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b54b0:	f000 fda3 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b54b4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b54b8:	9000      	str	r0, [sp, #0]
   b54ba:	4907      	ldr	r1, [pc, #28]	; (b54d8 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b54bc:	4802      	ldr	r0, [pc, #8]	; (b54c8 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b54be:	f7fe ff77 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b54c2:	e7b5      	b.n	b5430 <_ZN14LoRA_Functions5setupEb+0x38>
   b54c4:	000be7dc 	.word	0x000be7dc
   b54c8:	2003e654 	.word	0x2003e654
   b54cc:	000be7fb 	.word	0x000be7fb
   b54d0:	2003e304 	.word	0x2003e304
   b54d4:	000be835 	.word	0x000be835
   b54d8:	000be86c 	.word	0x000be86c

000b54dc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b54dc:	b530      	push	{r4, r5, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b54de:	2200      	movs	r2, #0
   b54e0:	b08d      	sub	sp, #52	; 0x34
   b54e2:	2114      	movs	r1, #20
   b54e4:	2002      	movs	r0, #2
   b54e6:	f003 ff8f 	bl	b9408 <led_pattern_period>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	// contents of response for 1-7 handled in common function above
	sysStatus.set_alertCodeNode(buf[8]);
   b54ea:	4c53      	ldr	r4, [pc, #332]	; (b5638 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x15c>)
   b54ec:	221e      	movs	r2, #30
   b54ee:	2101      	movs	r1, #1
   b54f0:	4603      	mov	r3, r0
   b54f2:	e9cd 2100 	strd	r2, r1, [sp]
   b54f6:	a804      	add	r0, sp, #16
   b54f8:	2202      	movs	r2, #2
   b54fa:	21ff      	movs	r1, #255	; 0xff
   b54fc:	f004 fe12 	bl	ba124 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b5500:	f000 fc8a 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5504:	7a21      	ldrb	r1, [r4, #8]
   b5506:	f000 fdc0 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>

	if (sysStatus.get_alertCodeNode() == 7) {		// This alert triggers an update to the sensor type on the node - handle it here
   b550a:	f000 fc85 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b550e:	f000 fd74 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5512:	2807      	cmp	r0, #7
   b5514:	d16f      	bne.n	b55f6 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x11a>
		Log.info("The gatway is updating sensor type from %d to %d", sysStatus.get_sensorType(), buf[9]);
   b5516:	f000 fc7f 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b551a:	f000 fd73 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
   b551e:	7a63      	ldrb	r3, [r4, #9]
   b5520:	4946      	ldr	r1, [pc, #280]	; (b563c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x160>)
   b5522:	4602      	mov	r2, r0
   b5524:	4846      	ldr	r0, [pc, #280]	; (b5640 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x164>)
   b5526:	f7fe ff43 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_sensorType(buf[9]);
   b552a:	f000 fc75 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b552e:	7a61      	ldrb	r1, [r4, #9]
   b5530:	f000 fdb1 	bl	b6096 <_ZN13sysStatusData14set_sensorTypeEh>
		sysStatus.set_alertCodeNode(0);				// Sensor updated - clear alert
   b5534:	f000 fc70 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5538:	2100      	movs	r1, #0
   b553a:	f000 fda6 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
	else if (sysStatus.get_alertCodeNode()) {
		Log.info("The gateway set an alert %d", sysStatus.get_alertCodeNode());
		sysStatus.set_alertTimestampNode(Time.now());	
	}

	sysStatus.set_openHours(buf[10]);				// The Gateway tells us whether the park is open or closed
   b553e:	f000 fc6b 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5542:	7aa1      	ldrb	r1, [r4, #10]
   b5544:	3900      	subs	r1, #0
   b5546:	bf18      	it	ne
   b5548:	2101      	movne	r1, #1
   b554a:	f000 fc9d 	bl	b5e88 <_ZN13sysStatusData13set_openHoursEb>

	if (sysStatus.get_openHours() == 0) {			// Open Hours Processing
   b554e:	f000 fc63 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5552:	f000 fc87 	bl	b5e64 <_ZNK13sysStatusData13get_openHoursEv>
   b5556:	2800      	cmp	r0, #0
   b5558:	d167      	bne.n	b562a <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x14e>
		current.resetEverything();
   b555a:	f000 fccf 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b555e:	f000 ff0c 	bl	b637a <_ZN17currentStatusData15resetEverythingEv>
		Log.info("Park is closed - reset everything");
   b5562:	4938      	ldr	r1, [pc, #224]	; (b5644 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x168>)
   b5564:	4836      	ldr	r0, [pc, #216]	; (b5640 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x164>)
   b5566:	f7fe ff23 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
	}
	else sysStatus.set_openHours(true);

	Log.info("Data report acknowledged %s alert for message %d park is %s and alert code is %d", (sysStatus.get_alertCodeNode()) ? "with":"without", buf[11], (buf[10] ==1) ? "open":"closed", sysStatus.get_alertCodeNode());
   b556a:	f000 fc55 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b556e:	f000 fd44 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5572:	4b35      	ldr	r3, [pc, #212]	; (b5648 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x16c>)
   b5574:	4a35      	ldr	r2, [pc, #212]	; (b564c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x170>)
   b5576:	4936      	ldr	r1, [pc, #216]	; (b5650 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x174>)
   b5578:	2800      	cmp	r0, #0
   b557a:	bf08      	it	eq
   b557c:	461a      	moveq	r2, r3
   b557e:	7ae3      	ldrb	r3, [r4, #11]
   b5580:	7aa0      	ldrb	r0, [r4, #10]
   b5582:	4c34      	ldr	r4, [pc, #208]	; (b5654 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x178>)
   b5584:	9203      	str	r2, [sp, #12]
   b5586:	2801      	cmp	r0, #1
   b5588:	bf18      	it	ne
   b558a:	460c      	movne	r4, r1
   b558c:	9302      	str	r3, [sp, #8]
   b558e:	f000 fc43 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5592:	f000 fd32 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5596:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b559a:	e9cd 4000 	strd	r4, r0, [sp]
   b559e:	492e      	ldr	r1, [pc, #184]	; (b5658 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x17c>)
   b55a0:	4827      	ldr	r0, [pc, #156]	; (b5640 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x164>)
   b55a2:	f7fe ff05 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    led_set_status_active(&d_, active, nullptr);
   b55a6:	2200      	movs	r2, #0
   b55a8:	2101      	movs	r1, #1
   b55aa:	a805      	add	r0, sp, #20
   b55ac:	f003 fee0 	bl	b9370 <led_set_status_active>
	
	blinkBlue.setActive(true);
	unsigned long strength = (unsigned long)(map(current.get_RSSI(),-10,-140,3000,100));
   b55b0:	f000 fca4 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b55b4:	f000 ff2e 	bl	b6414 <_ZNK17currentStatusData8get_RSSIEv>
   b55b8:	2364      	movs	r3, #100	; 0x64
   b55ba:	9300      	str	r3, [sp, #0]
   b55bc:	f06f 028b 	mvn.w	r2, #139	; 0x8b
   b55c0:	f06f 0109 	mvn.w	r1, #9
   b55c4:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b55c8:	f004 f868 	bl	b969c <_Z3mapiiiii>
	strength = constrain(strength,100UL,3000UL);
    delay(strength);
   b55cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b55d0:	4298      	cmp	r0, r3
   b55d2:	bf28      	it	cs
   b55d4:	4618      	movcs	r0, r3
   b55d6:	2864      	cmp	r0, #100	; 0x64
   b55d8:	bf38      	it	cc
   b55da:	2064      	movcc	r0, #100	; 0x64
   b55dc:	f004 f86a 	bl	b96b4 <delay>
   b55e0:	2200      	movs	r2, #0
   b55e2:	4611      	mov	r1, r2
   b55e4:	a805      	add	r0, sp, #20
   b55e6:	f003 fec3 	bl	b9370 <led_set_status_active>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b55ea:	a804      	add	r0, sp, #16
   b55ec:	f7ff fe82 	bl	b52f4 <_ZN8particle9LEDStatusD1Ev>
    blinkBlue.setActive(false);

	return true;
}
   b55f0:	2001      	movs	r0, #1
   b55f2:	b00d      	add	sp, #52	; 0x34
   b55f4:	bd30      	pop	{r4, r5, pc}
	else if (sysStatus.get_alertCodeNode()) {
   b55f6:	f000 fc0f 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b55fa:	f000 fcfe 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b55fe:	2800      	cmp	r0, #0
   b5600:	d09d      	beq.n	b553e <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x62>
		Log.info("The gateway set an alert %d", sysStatus.get_alertCodeNode());
   b5602:	f000 fc09 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5606:	f000 fcf8 	bl	b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b560a:	4914      	ldr	r1, [pc, #80]	; (b565c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x180>)
   b560c:	4602      	mov	r2, r0
   b560e:	480c      	ldr	r0, [pc, #48]	; (b5640 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x164>)
   b5610:	f7fe fece 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_alertTimestampNode(Time.now());	
   b5614:	f000 fc00 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5618:	4605      	mov	r5, r0
   b561a:	f006 fb22 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b561e:	4602      	mov	r2, r0
   b5620:	17c3      	asrs	r3, r0, #31
   b5622:	4628      	mov	r0, r5
   b5624:	f000 fe5c 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
   b5628:	e789      	b.n	b553e <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x62>
	else sysStatus.set_openHours(true);
   b562a:	f000 fbf5 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b562e:	2101      	movs	r1, #1
   b5630:	f000 fc2a 	bl	b5e88 <_ZN13sysStatusData13set_openHoursEb>
   b5634:	e799      	b.n	b556a <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x8e>
   b5636:	bf00      	nop
   b5638:	2003e154 	.word	0x2003e154
   b563c:	000be8de 	.word	0x000be8de
   b5640:	2003e654 	.word	0x2003e654
   b5644:	000be92b 	.word	0x000be92b
   b5648:	000be8ca 	.word	0x000be8ca
   b564c:	000be8c5 	.word	0x000be8c5
   b5650:	000be8d7 	.word	0x000be8d7
   b5654:	000be8d2 	.word	0x000be8d2
   b5658:	000be94d 	.word	0x000be94d
   b565c:	000be90f 	.word	0x000be90f

000b5660 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:
		Log.info("Join request to Gateway failed");
		return false;
	}
}

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b5660:	b510      	push	{r4, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5662:	2200      	movs	r2, #0
   b5664:	b08c      	sub	sp, #48	; 0x30
   b5666:	2114      	movs	r1, #20
   b5668:	2002      	movs	r0, #2
   b566a:	f003 fecd 	bl	b9408 <led_pattern_period>
   b566e:	221e      	movs	r2, #30
   b5670:	2101      	movs	r1, #1
   b5672:	4603      	mov	r3, r0
   b5674:	e9cd 2100 	strd	r2, r1, [sp]
   b5678:	a804      	add	r0, sp, #16
   b567a:	492a      	ldr	r1, [pc, #168]	; (b5724 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc4>)
   b567c:	4c2a      	ldr	r4, [pc, #168]	; (b5728 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc8>)
   b567e:	2202      	movs	r2, #2
   b5680:	f004 fd50 	bl	ba124 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	if (sysStatus.get_nodeNumber() > 10) sysStatus.set_nodeNumber(buf[9]);
   b5684:	f000 fbc8 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5688:	f000 fcad 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b568c:	280a      	cmp	r0, #10
   b568e:	d904      	bls.n	b569a <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x3a>
   b5690:	f000 fbc2 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5694:	7a61      	ldrb	r1, [r4, #9]
   b5696:	f000 fce6 	bl	b6066 <_ZN13sysStatusData14set_nodeNumberEh>
	sysStatus.set_sensorType(buf[10]);
   b569a:	f000 fbbd 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b569e:	7aa1      	ldrb	r1, [r4, #10]
   b56a0:	f000 fcf9 	bl	b6096 <_ZN13sysStatusData14set_sensorTypeEh>
	Log.info("Node %d Join request acknowledged and sensor set to %d", sysStatus.get_nodeNumber(), sysStatus.get_sensorType());
   b56a4:	f000 fbb8 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b56a8:	f000 fc9d 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b56ac:	9003      	str	r0, [sp, #12]
   b56ae:	f000 fbb3 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b56b2:	f000 fca7 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
   b56b6:	9a03      	ldr	r2, [sp, #12]
   b56b8:	491c      	ldr	r1, [pc, #112]	; (b572c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xcc>)
   b56ba:	4603      	mov	r3, r0
   b56bc:	481c      	ldr	r0, [pc, #112]	; (b5730 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xd0>)
   b56be:	f7fe fe77 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());
   b56c2:	f000 fba9 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b56c6:	f000 fc8e 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b56ca:	4601      	mov	r1, r0
   b56cc:	4819      	ldr	r0, [pc, #100]	; (b5734 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xd4>)
   b56ce:	f001 fff4 	bl	b76ba <_ZN10RHDatagram14setThisAddressEh>
    led_set_status_active(&d_, active, nullptr);
   b56d2:	2200      	movs	r2, #0
   b56d4:	2101      	movs	r1, #1
   b56d6:	a805      	add	r0, sp, #20
   b56d8:	f003 fe4a 	bl	b9370 <led_set_status_active>

    blinkOrange.setActive(true);
	unsigned long strength = (unsigned long)(map(current.get_RSSI(),-10,-140,3000,100));
   b56dc:	f000 fc0e 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b56e0:	f000 fe98 	bl	b6414 <_ZNK17currentStatusData8get_RSSIEv>
   b56e4:	2364      	movs	r3, #100	; 0x64
   b56e6:	9300      	str	r3, [sp, #0]
   b56e8:	f06f 028b 	mvn.w	r2, #139	; 0x8b
   b56ec:	f06f 0109 	mvn.w	r1, #9
   b56f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b56f4:	f003 ffd2 	bl	b969c <_Z3mapiiiii>
	strength = constrain(strength,100UL,3000UL);
    delay(strength);
   b56f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b56fc:	4298      	cmp	r0, r3
   b56fe:	bf28      	it	cs
   b5700:	4618      	movcs	r0, r3
   b5702:	2864      	cmp	r0, #100	; 0x64
   b5704:	bf38      	it	cc
   b5706:	2064      	movcc	r0, #100	; 0x64
   b5708:	f003 ffd4 	bl	b96b4 <delay>
   b570c:	2200      	movs	r2, #0
   b570e:	4611      	mov	r1, r2
   b5710:	a805      	add	r0, sp, #20
   b5712:	f003 fe2d 	bl	b9370 <led_set_status_active>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b5716:	a804      	add	r0, sp, #16
   b5718:	f7ff fdec 	bl	b52f4 <_ZN8particle9LEDStatusD1Ev>
    blinkOrange.setActive(false);

	return true;
}
   b571c:	2001      	movs	r0, #1
   b571e:	b00c      	add	sp, #48	; 0x30
   b5720:	bd10      	pop	{r4, pc}
   b5722:	bf00      	nop
   b5724:	00ff6000 	.word	0x00ff6000
   b5728:	2003e154 	.word	0x2003e154
   b572c:	000be99e 	.word	0x000be99e
   b5730:	2003e654 	.word	0x2003e654
   b5734:	2003e304 	.word	0x2003e304

000b5738 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b5738:	b5f0      	push	{r4, r5, r6, r7, lr}
   b573a:	b08d      	sub	sp, #52	; 0x34
	uint8_t len = sizeof(buf);
   b573c:	2379      	movs	r3, #121	; 0x79
   b573e:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b5742:	f10d 031f 	add.w	r3, sp, #31
   b5746:	9303      	str	r3, [sp, #12]
   b5748:	f10d 031e 	add.w	r3, sp, #30
   b574c:	9302      	str	r3, [sp, #8]
   b574e:	4d45      	ldr	r5, [pc, #276]	; (b5864 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x12c>)
   b5750:	f10d 031d 	add.w	r3, sp, #29
   b5754:	9301      	str	r3, [sp, #4]
   b5756:	ab07      	add	r3, sp, #28
   b5758:	9300      	str	r3, [sp, #0]
bool LoRA_Functions::listenForLoRAMessageNode() {
   b575a:	4606      	mov	r6, r0
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b575c:	f10d 031b 	add.w	r3, sp, #27
   b5760:	4841      	ldr	r0, [pc, #260]	; (b5868 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x130>)
   b5762:	f10d 021a 	add.w	r2, sp, #26
   b5766:	4629      	mov	r1, r5
   b5768:	f002 fa74 	bl	b7c54 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b576c:	4604      	mov	r4, r0
   b576e:	2800      	cmp	r0, #0
   b5770:	d074      	beq.n	b585c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x124>
		buf[len] = 0;
   b5772:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b5776:	2400      	movs	r4, #0
   b5778:	54ec      	strb	r4, [r5, r3]
		if ((buf[0] << 8 | buf[1]) != sysStatus.get_magicNumber()) {
   b577a:	882e      	ldrh	r6, [r5, #0]
   b577c:	f000 fb4c 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5780:	f000 fcb9 	bl	b60f6 <_ZNK13sysStatusData15get_magicNumberEv>
   b5784:	ba76      	rev16	r6, r6
   b5786:	b2b6      	uxth	r6, r6
   b5788:	42b0      	cmp	r0, r6
   b578a:	d004      	beq.n	b5796 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x5e>
			Log.info("Magic Number mismatch - ignoring message");
   b578c:	4937      	ldr	r1, [pc, #220]	; (b586c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
		else {Log.info("Invaled LoRA message flag"); return false;}
   b578e:	4838      	ldr	r0, [pc, #224]	; (b5870 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b5790:	f7fe fe0e 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b5794:	e056      	b.n	b5844 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10c>
		lora_state = (LoRA_State)messageFlag;
   b5796:	4e37      	ldr	r6, [pc, #220]	; (b5874 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x13c>)
   b5798:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with RSSI / SNR of %d / %d - a %s message with %d hops", from, driver.lastRssi(), driver.lastSNR(), loraStateNames[lora_state], hops);
   b579c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b57a0:	4835      	ldr	r0, [pc, #212]	; (b5878 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x140>)
		lora_state = (LoRA_State)messageFlag;
   b57a2:	7033      	strb	r3, [r6, #0]
		Log.info("Received from node %d with RSSI / SNR of %d / %d - a %s message with %d hops", from, driver.lastRssi(), driver.lastSNR(), loraStateNames[lora_state], hops);
   b57a4:	9205      	str	r2, [sp, #20]
   b57a6:	f002 f806 	bl	b77b6 <_ZN15RHGenericDriver8lastRssiEv>
   b57aa:	9004      	str	r0, [sp, #16]
   b57ac:	4832      	ldr	r0, [pc, #200]	; (b5878 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x140>)
   b57ae:	f003 f9a3 	bl	b8af8 <_ZN7RH_RF957lastSNREv>
   b57b2:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b57b6:	9102      	str	r1, [sp, #8]
   b57b8:	7837      	ldrb	r7, [r6, #0]
   b57ba:	4930      	ldr	r1, [pc, #192]	; (b587c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x144>)
   b57bc:	eb01 1107 	add.w	r1, r1, r7, lsl #4
   b57c0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b57c4:	e9cd 0100 	strd	r0, r1, [sp]
   b57c8:	492d      	ldr	r1, [pc, #180]	; (b5880 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x148>)
   b57ca:	4829      	ldr	r0, [pc, #164]	; (b5870 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b57cc:	f7fe fdf0 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[2] << 24) | (buf[3] << 16) | (buf[4] << 8) | buf[5]));  // Set time based on response from gateway
   b57d0:	f8d5 0002 	ldr.w	r0, [r5, #2]
   b57d4:	ba00      	rev	r0, r0
   b57d6:	17c1      	asrs	r1, r0, #31
   b57d8:	f006 f92b 	bl	bba32 <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[6] << 8 | buf[7]));			// Frequency of reporting set by Gateway
   b57dc:	f000 fb1c 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b57e0:	88e9      	ldrh	r1, [r5, #6]
   b57e2:	ba49      	rev16	r1, r1
   b57e4:	b289      	uxth	r1, r1
   b57e6:	f000 fd2a 	bl	b623e <_ZN13sysStatusData20set_frequencyMinutesEt>
		sysStatus.set_alertCodeNode(buf[8]);
   b57ea:	f000 fb15 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b57ee:	7a29      	ldrb	r1, [r5, #8]
   b57f0:	f000 fc4b 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b57f4:	f000 fb10 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b57f8:	4605      	mov	r5, r0
   b57fa:	f006 fa32 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b57fe:	4602      	mov	r2, r0
   b5800:	17c3      	asrs	r3, r0, #31
   b5802:	4628      	mov	r0, r5
   b5804:	f000 fd6c 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b5808:	f006 fa2b 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b580c:	17c3      	asrs	r3, r0, #31
   b580e:	4602      	mov	r2, r0
   b5810:	a808      	add	r0, sp, #32
   b5812:	f006 f921 	bl	bba58 <_ZN9TimeClass7timeStrEx>
   b5816:	9a08      	ldr	r2, [sp, #32]
   b5818:	9204      	str	r2, [sp, #16]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b581a:	f000 fafd 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b581e:	f000 fc6f 	bl	b6100 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5822:	9a04      	ldr	r2, [sp, #16]
   b5824:	4917      	ldr	r1, [pc, #92]	; (b5884 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x14c>)
   b5826:	4603      	mov	r3, r0
   b5828:	4811      	ldr	r0, [pc, #68]	; (b5870 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b582a:	f7fe fdc1 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b582e:	a808      	add	r0, sp, #32
   b5830:	f005 ff06 	bl	bb640 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5834:	7833      	ldrb	r3, [r6, #0]
   b5836:	2b04      	cmp	r3, #4
   b5838:	d107      	bne.n	b584a <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x112>
   b583a:	f7ff fd73 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b583e:	f7ff fe4d 	bl	b54dc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b5842:	4604      	mov	r4, r0
}
   b5844:	4620      	mov	r0, r4
   b5846:	b00d      	add	sp, #52	; 0x34
   b5848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b584a:	2b02      	cmp	r3, #2
   b584c:	d104      	bne.n	b5858 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x120>
   b584e:	f7ff fd69 	bl	b5324 <_ZN14LoRA_Functions8instanceEv>
   b5852:	f7ff ff05 	bl	b5660 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b5856:	e7f4      	b.n	b5842 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10a>
		else {Log.info("Invaled LoRA message flag"); return false;}
   b5858:	490b      	ldr	r1, [pc, #44]	; (b5888 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x150>)
   b585a:	e798      	b.n	b578e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x56>
	else LoRA_Functions::clearBuffer();
   b585c:	4630      	mov	r0, r6
   b585e:	f7ff fd73 	bl	b5348 <_ZN14LoRA_Functions11clearBufferEv>
   b5862:	e7ef      	b.n	b5844 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10c>
   b5864:	2003e154 	.word	0x2003e154
   b5868:	2003e300 	.word	0x2003e300
   b586c:	000be9d5 	.word	0x000be9d5
   b5870:	2003e654 	.word	0x2003e654
   b5874:	2003e14d 	.word	0x2003e14d
   b5878:	2003e1d0 	.word	0x2003e1d0
   b587c:	2003dfa0 	.word	0x2003dfa0
   b5880:	000be9fe 	.word	0x000be9fe
   b5884:	000bea4b 	.word	0x000bea4b
   b5888:	000bea7e 	.word	0x000bea7e

000b588c <_ZN14LoRA_Functions14stringCheckSumE6String>:


int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b588c:	b570      	push	{r4, r5, r6, lr}
    int result = 0;
    for(unsigned int i = 0; i < str.length(); i++){
   b588e:	2500      	movs	r5, #0
int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b5890:	460e      	mov	r6, r1
    int result = 0;
   b5892:	462c      	mov	r4, r5
    for(unsigned int i = 0; i < str.length(); i++){
   b5894:	68b3      	ldr	r3, [r6, #8]
   b5896:	429d      	cmp	r5, r3
   b5898:	d218      	bcs.n	b58cc <_ZN14LoRA_Functions14stringCheckSumE6String+0x40>
      int asciiCode = (int)str[i];
   b589a:	4629      	mov	r1, r5
   b589c:	4630      	mov	r0, r6
   b589e:	f005 ff71 	bl	bb784 <_ZN6StringixEj>
   b58a2:	7803      	ldrb	r3, [r0, #0]

      if (asciiCode >=48 && asciiCode <58) {              // 0-9
   b58a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b58a8:	2a09      	cmp	r2, #9
   b58aa:	d802      	bhi.n	b58b2 <_ZN14LoRA_Functions14stringCheckSumE6String+0x26>
        result += asciiCode - 48;
   b58ac:	4414      	add	r4, r2
    for(unsigned int i = 0; i < str.length(); i++){
   b58ae:	3501      	adds	r5, #1
   b58b0:	e7f0      	b.n	b5894 <_ZN14LoRA_Functions14stringCheckSumE6String+0x8>
      } 
      else if (asciiCode >=65 && asciiCode < 71) {        // A-F
   b58b2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   b58b6:	2a05      	cmp	r2, #5
   b58b8:	d802      	bhi.n	b58c0 <_ZN14LoRA_Functions14stringCheckSumE6String+0x34>
        result += 10 + asciiCode -65;
   b58ba:	3b37      	subs	r3, #55	; 0x37
      }
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
        result += 10 + asciiCode -97;
   b58bc:	441c      	add	r4, r3
   b58be:	e7f6      	b.n	b58ae <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
   b58c0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   b58c4:	2a05      	cmp	r2, #5
   b58c6:	d8f2      	bhi.n	b58ae <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
        result += 10 + asciiCode -97;
   b58c8:	3b57      	subs	r3, #87	; 0x57
   b58ca:	e7f7      	b.n	b58bc <_ZN14LoRA_Functions14stringCheckSumE6String+0x30>
      }
    }
    return result;
}
   b58cc:	4620      	mov	r0, r4
   b58ce:	bd70      	pop	{r4, r5, r6, pc}

000b58d0 <_ZN14LoRA_Functions21composeDataReportNodeEv>:
bool LoRA_Functions::composeDataReportNode() {
   b58d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58d2:	ed2d 8b02 	vpush	{d8}
   b58d6:	b08b      	sub	sp, #44	; 0x2c
   b58d8:	4604      	mov	r4, r0
	if (current.get_messageCount()==0) {		// 8-bit number so need to protect against divide by zero on reset or wrap around
   b58da:	f000 fb0f 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b58de:	f000 fba0 	bl	b6022 <_ZNK17currentStatusData16get_messageCountEv>
   b58e2:	9005      	str	r0, [sp, #20]
   b58e4:	2800      	cmp	r0, #0
   b58e6:	f040 80d8 	bne.w	b5a9a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ca>
		current.set_messageCount(0);
   b58ea:	f000 fb07 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b58ee:	9905      	ldr	r1, [sp, #20]
   b58f0:	f000 fbe3 	bl	b60ba <_ZN17currentStatusData16set_messageCountEh>
		current.set_successCount(0);
   b58f4:	f000 fb02 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b58f8:	9905      	ldr	r1, [sp, #20]
   b58fa:	f000 fbe4 	bl	b60c6 <_ZN17currentStatusData16set_successCountEh>
		successPercent = 0.0;	
   b58fe:	2500      	movs	r5, #0
	current.set_messageCount(current.get_messageCount()+1);
   b5900:	f000 fafc 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5904:	4606      	mov	r6, r0
   b5906:	f000 faf9 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b590a:	f000 fb8a 	bl	b6022 <_ZNK17currentStatusData16get_messageCountEv>
   b590e:	3001      	adds	r0, #1
   b5910:	b2c1      	uxtb	r1, r0
   b5912:	4630      	mov	r0, r6
   b5914:	f000 fbd1 	bl	b60ba <_ZN17currentStatusData16set_messageCountEh>
	digitalWrite(BLUE_LED,HIGH);
   b5918:	4b8f      	ldr	r3, [pc, #572]	; (b5b58 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x288>)
   b591a:	881f      	ldrh	r7, [r3, #0]
   b591c:	2101      	movs	r1, #1
   b591e:	4638      	mov	r0, r7
   b5920:	f006 fbaf 	bl	bc082 <digitalWrite>
   b5924:	a806      	add	r0, sp, #24
   b5926:	f003 fdc1 	bl	b94ac <spark_deviceID>
	int deviceIDCheckSum = stringCheckSum(System.deviceID());
   b592a:	a906      	add	r1, sp, #24
   b592c:	4620      	mov	r0, r4
   b592e:	f7ff ffad 	bl	b588c <_ZN14LoRA_Functions14stringCheckSumE6String>
   b5932:	4606      	mov	r6, r0
   b5934:	a806      	add	r0, sp, #24
   b5936:	f005 fe83 	bl	bb640 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());
   b593a:	f000 fa6d 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b593e:	f000 fbda 	bl	b60f6 <_ZNK13sysStatusData15get_magicNumberEv>
   b5942:	4c86      	ldr	r4, [pc, #536]	; (b5b5c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x28c>)
   b5944:	0a00      	lsrs	r0, r0, #8
   b5946:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b5948:	f000 fa66 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b594c:	f000 fbd3 	bl	b60f6 <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = highByte(deviceIDCheckSum);
   b5950:	1233      	asrs	r3, r6, #8
   b5952:	70a3      	strb	r3, [r4, #2]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b5954:	7060      	strb	r0, [r4, #1]
	buf[3] = lowByte(deviceIDCheckSum);
   b5956:	70e6      	strb	r6, [r4, #3]
	buf[4] = highByte(current.get_hourlyCount());
   b5958:	f000 fad0 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b595c:	f000 fc18 	bl	b6190 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5960:	0a00      	lsrs	r0, r0, #8
   b5962:	7120      	strb	r0, [r4, #4]
	buf[5] = lowByte(current.get_hourlyCount()); 
   b5964:	f000 faca 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5968:	f000 fc12 	bl	b6190 <_ZNK17currentStatusData15get_hourlyCountEv>
   b596c:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(current.get_dailyCount());
   b596e:	f000 fac5 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5972:	f000 fc41 	bl	b61f8 <_ZNK17currentStatusData14get_dailyCountEv>
   b5976:	0a00      	lsrs	r0, r0, #8
   b5978:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(current.get_dailyCount()); 
   b597a:	f000 fabf 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b597e:	f000 fc3b 	bl	b61f8 <_ZNK17currentStatusData14get_dailyCountEv>
   b5982:	71e0      	strb	r0, [r4, #7]
	buf[8] = sysStatus.get_sensorType();
   b5984:	f000 fa48 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5988:	f000 fb3c 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
   b598c:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_internalTempC();
   b598e:	f000 fab5 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5992:	f000 fb3c 	bl	b600e <_ZNK17currentStatusData17get_internalTempCEv>
   b5996:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_stateOfCharge();
   b5998:	f000 fab0 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b599c:	f000 fad4 	bl	b5f48 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b59a0:	ec51 0b10 	vmov	r0, r1, d0
   b59a4:	f008 f992 	bl	bdccc <__aeabi_d2uiz>
   b59a8:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_batteryState();	
   b59aa:	f000 faa7 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b59ae:	f000 fb33 	bl	b6018 <_ZNK17currentStatusData16get_batteryStateEv>
   b59b2:	72e0      	strb	r0, [r4, #11]
	buf[12] = sysStatus.get_resetCount();
   b59b4:	f000 fa30 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b59b8:	f000 fb1a 	bl	b5ff0 <_ZNK13sysStatusData14get_resetCountEv>
   b59bc:	7320      	strb	r0, [r4, #12]
	buf[13] = current.get_messageCount();
   b59be:	f000 fa9d 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b59c2:	f000 fb2e 	bl	b6022 <_ZNK17currentStatusData16get_messageCountEv>
   b59c6:	7360      	strb	r0, [r4, #13]
	buf[14] = current.get_successCount();
   b59c8:	f000 fa98 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b59cc:	f000 fb2e 	bl	b602c <_ZNK17currentStatusData16get_successCountEv>
   b59d0:	73a0      	strb	r0, [r4, #14]
	buf[15] = highByte(current.get_RSSI());
   b59d2:	f000 fa93 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b59d6:	f000 fd1d 	bl	b6414 <_ZNK17currentStatusData8get_RSSIEv>
   b59da:	1200      	asrs	r0, r0, #8
   b59dc:	73e0      	strb	r0, [r4, #15]
	buf[16] = lowByte(current.get_RSSI());
   b59de:	f000 fa8d 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b59e2:	f000 fd17 	bl	b6414 <_ZNK17currentStatusData8get_RSSIEv>
   b59e6:	7420      	strb	r0, [r4, #16]
	buf[17] = highByte(current.get_SNR());
   b59e8:	f000 fa88 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b59ec:	f000 fd17 	bl	b641e <_ZNK17currentStatusData7get_SNREv>
   b59f0:	1200      	asrs	r0, r0, #8
   b59f2:	7460      	strb	r0, [r4, #17]
	buf[18] = lowByte(current.get_SNR());
   b59f4:	f000 fa82 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b59f8:	f000 fd11 	bl	b641e <_ZNK17currentStatusData7get_SNREv>
	unsigned char result = manager.sendtoWait(buf, 19, GATEWAY_ADDRESS, DATA_RPT);
   b59fc:	2303      	movs	r3, #3
	buf[18] = lowByte(current.get_SNR());
   b59fe:	74a0      	strb	r0, [r4, #18]
	unsigned char result = manager.sendtoWait(buf, 19, GATEWAY_ADDRESS, DATA_RPT);
   b5a00:	4621      	mov	r1, r4
   b5a02:	9300      	str	r3, [sp, #0]
   b5a04:	4856      	ldr	r0, [pc, #344]	; (b5b60 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x290>)
   b5a06:	2300      	movs	r3, #0
   b5a08:	2213      	movs	r2, #19
   b5a0a:	f002 f8ef 	bl	b7bec <_ZN6RHMesh10sendtoWaitEPhhhh>
	if ( result == RH_ROUTER_ERROR_NONE) {
   b5a0e:	4604      	mov	r4, r0
   b5a10:	2800      	cmp	r0, #0
   b5a12:	d16a      	bne.n	b5aea <_ZN14LoRA_Functions21composeDataReportNodeEv+0x21a>
		current.set_successCount(current.get_successCount()+1);
   b5a14:	f000 fa72 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5a18:	4606      	mov	r6, r0
   b5a1a:	f000 fa6f 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5a1e:	f000 fb05 	bl	b602c <_ZNK17currentStatusData16get_successCountEv>
   b5a22:	3001      	adds	r0, #1
   b5a24:	b2c1      	uxtb	r1, r0
   b5a26:	4630      	mov	r0, r6
   b5a28:	f000 fb4d 	bl	b60c6 <_ZN17currentStatusData16set_successCountEh>
		current.set_RSSI(driver.lastRssi());				// Set these here - will send on next data report
   b5a2c:	f000 fa66 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5a30:	4606      	mov	r6, r0
   b5a32:	484c      	ldr	r0, [pc, #304]	; (b5b64 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x294>)
   b5a34:	f001 febf 	bl	b77b6 <_ZN15RHGenericDriver8lastRssiEv>
   b5a38:	4601      	mov	r1, r0
   b5a3a:	4630      	mov	r0, r6
   b5a3c:	f000 fd0c 	bl	b6458 <_ZN17currentStatusData8set_RSSIEs>
		current.set_SNR(driver.lastSNR());
   b5a40:	f000 fa5c 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5a44:	4606      	mov	r6, r0
   b5a46:	4847      	ldr	r0, [pc, #284]	; (b5b64 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x294>)
   b5a48:	f003 f856 	bl	b8af8 <_ZN7RH_RF957lastSNREv>
   b5a4c:	b201      	sxth	r1, r0
   b5a4e:	4630      	mov	r0, r6
   b5a50:	f000 fd08 	bl	b6464 <_ZN17currentStatusData7set_SNREs>
		Log.info("Node %d data report delivered - success rate %4.2f and  RSSI/SNR of %d / %d ",sysStatus.get_nodeNumber(),successPercent,current.get_RSSI(), current.get_SNR());
   b5a54:	f000 f9e0 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5a58:	f000 fac5 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5a5c:	9005      	str	r0, [sp, #20]
   b5a5e:	f000 fa4d 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5a62:	f000 fcd7 	bl	b6414 <_ZNK17currentStatusData8get_RSSIEv>
   b5a66:	4606      	mov	r6, r0
   b5a68:	f000 fa48 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5a6c:	f000 fcd7 	bl	b641e <_ZNK17currentStatusData7get_SNREv>
   b5a70:	e9cd 6002 	strd	r6, r0, [sp, #8]
   b5a74:	4628      	mov	r0, r5
   b5a76:	f007 fdf9 	bl	bd66c <__aeabi_f2d>
   b5a7a:	9a05      	ldr	r2, [sp, #20]
   b5a7c:	e9cd 0100 	strd	r0, r1, [sp]
   b5a80:	4939      	ldr	r1, [pc, #228]	; (b5b68 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x298>)
   b5a82:	483a      	ldr	r0, [pc, #232]	; (b5b6c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x29c>)
   b5a84:	f7fe fc94 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5a88:	4638      	mov	r0, r7
   b5a8a:	4621      	mov	r1, r4
   b5a8c:	f006 faf9 	bl	bc082 <digitalWrite>
		return true;
   b5a90:	2001      	movs	r0, #1
}
   b5a92:	b00b      	add	sp, #44	; 0x2c
   b5a94:	ecbd 8b02 	vpop	{d8}
   b5a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else successPercent = ((current.get_successCount()+1.0)/(float)current.get_messageCount()) * 100.0;  // Add one to success because we are receving the message
   b5a9a:	f000 fa2f 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5a9e:	f000 fac5 	bl	b602c <_ZNK17currentStatusData16get_successCountEv>
   b5aa2:	4605      	mov	r5, r0
   b5aa4:	f000 fa2a 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5aa8:	f000 fabb 	bl	b6022 <_ZNK17currentStatusData16get_messageCountEv>
   b5aac:	ee08 0a10 	vmov	s16, r0
   b5ab0:	4628      	mov	r0, r5
   b5ab2:	f007 fdc9 	bl	bd648 <__aeabi_i2d>
   b5ab6:	4b2e      	ldr	r3, [pc, #184]	; (b5b70 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x2a0>)
   b5ab8:	2200      	movs	r2, #0
   b5aba:	f007 fc79 	bl	bd3b0 <__adddf3>
   b5abe:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b5ac2:	4606      	mov	r6, r0
   b5ac4:	ee17 0a90 	vmov	r0, s15
   b5ac8:	460f      	mov	r7, r1
   b5aca:	f007 fdcf 	bl	bd66c <__aeabi_f2d>
   b5ace:	4602      	mov	r2, r0
   b5ad0:	460b      	mov	r3, r1
   b5ad2:	4630      	mov	r0, r6
   b5ad4:	4639      	mov	r1, r7
   b5ad6:	f007 ff4b 	bl	bd970 <__aeabi_ddiv>
   b5ada:	4b26      	ldr	r3, [pc, #152]	; (b5b74 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x2a4>)
   b5adc:	2200      	movs	r2, #0
   b5ade:	f007 fe1d 	bl	bd71c <__aeabi_dmul>
   b5ae2:	f008 f913 	bl	bdd0c <__aeabi_d2f>
   b5ae6:	4605      	mov	r5, r0
   b5ae8:	e70a      	b.n	b5900 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x30>
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b5aea:	2802      	cmp	r0, #2
   b5aec:	d115      	bne.n	b5b1a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x24a>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, successPercent);
   b5aee:	f000 f993 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5af2:	f000 fa78 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5af6:	9005      	str	r0, [sp, #20]
   b5af8:	4628      	mov	r0, r5
   b5afa:	f007 fdb7 	bl	bd66c <__aeabi_f2d>
   b5afe:	9a05      	ldr	r2, [sp, #20]
   b5b00:	e9cd 0100 	strd	r0, r1, [sp]
   b5b04:	491c      	ldr	r1, [pc, #112]	; (b5b78 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x2a8>)
   b5b06:	2300      	movs	r3, #0
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,successPercent);
   b5b08:	4818      	ldr	r0, [pc, #96]	; (b5b6c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x29c>)
   b5b0a:	f7fe fc51 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b5b0e:	4638      	mov	r0, r7
   b5b10:	2100      	movs	r1, #0
   b5b12:	f006 fab6 	bl	bc082 <digitalWrite>
	return false;
   b5b16:	2000      	movs	r0, #0
   b5b18:	e7bb      	b.n	b5a92 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c2>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b5b1a:	2805      	cmp	r0, #5
   b5b1c:	d10d      	bne.n	b5b3a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x26a>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,successPercent);
   b5b1e:	f000 f97b 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5b22:	f000 fa60 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5b26:	9005      	str	r0, [sp, #20]
   b5b28:	4628      	mov	r0, r5
   b5b2a:	f007 fd9f 	bl	bd66c <__aeabi_f2d>
   b5b2e:	9a05      	ldr	r2, [sp, #20]
   b5b30:	e9cd 0100 	strd	r0, r1, [sp]
   b5b34:	2300      	movs	r3, #0
   b5b36:	4911      	ldr	r1, [pc, #68]	; (b5b7c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x2ac>)
   b5b38:	e7e6      	b.n	b5b08 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x238>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,successPercent);
   b5b3a:	f000 f96d 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5b3e:	f000 fa52 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5b42:	9005      	str	r0, [sp, #20]
   b5b44:	4628      	mov	r0, r5
   b5b46:	f007 fd91 	bl	bd66c <__aeabi_f2d>
   b5b4a:	9a05      	ldr	r2, [sp, #20]
   b5b4c:	e9cd 0100 	strd	r0, r1, [sp]
   b5b50:	2300      	movs	r3, #0
   b5b52:	490b      	ldr	r1, [pc, #44]	; (b5b80 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x2b0>)
   b5b54:	e7d8      	b.n	b5b08 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x238>
   b5b56:	bf00      	nop
   b5b58:	000bede8 	.word	0x000bede8
   b5b5c:	2003e154 	.word	0x2003e154
   b5b60:	2003e300 	.word	0x2003e300
   b5b64:	2003e1d0 	.word	0x2003e1d0
   b5b68:	000bea98 	.word	0x000bea98
   b5b6c:	2003e654 	.word	0x2003e654
   b5b70:	3ff00000 	.word	0x3ff00000
   b5b74:	40590000 	.word	0x40590000
   b5b78:	000beae5 	.word	0x000beae5
   b5b7c:	000beb35 	.word	0x000beb35
   b5b80:	000beb8e 	.word	0x000beb8e

000b5b84 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:
bool LoRA_Functions::composeJoinRequesttNode() {
   b5b84:	b570      	push	{r4, r5, r6, lr}
   b5b86:	b090      	sub	sp, #64	; 0x40
   b5b88:	4604      	mov	r4, r0
   b5b8a:	a805      	add	r0, sp, #20
   b5b8c:	f003 fc8e 	bl	b94ac <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5b90:	2300      	movs	r3, #0
   b5b92:	2219      	movs	r2, #25
   b5b94:	a909      	add	r1, sp, #36	; 0x24
   b5b96:	a805      	add	r0, sp, #20
   b5b98:	f005 fe02 	bl	bb7a0 <_ZNK6String8getBytesEPhjj>
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long
   b5b9c:	a805      	add	r0, sp, #20
   b5b9e:	f005 fd4f 	bl	bb640 <_ZN6StringD1Ev>
   b5ba2:	a805      	add	r0, sp, #20
   b5ba4:	f003 fc82 	bl	b94ac <spark_deviceID>
	int deviceIDCheckSum = stringCheckSum(System.deviceID());
   b5ba8:	a905      	add	r1, sp, #20
   b5baa:	4620      	mov	r0, r4
   b5bac:	f7ff fe6e 	bl	b588c <_ZN14LoRA_Functions14stringCheckSumE6String>
   b5bb0:	4605      	mov	r5, r0
   b5bb2:	a805      	add	r0, sp, #20
   b5bb4:	f005 fd44 	bl	bb640 <_ZN6StringD1Ev>
	manager.setThisAddress(sysStatus.get_nodeNumber());				// Join with the right node number
   b5bb8:	f000 f92e 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5bbc:	f000 fa13 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5bc0:	4601      	mov	r1, r0
   b5bc2:	4832      	ldr	r0, [pc, #200]	; (b5c8c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x108>)
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5bc4:	4c32      	ldr	r4, [pc, #200]	; (b5c90 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x10c>)
	manager.setThisAddress(sysStatus.get_nodeNumber());				// Join with the right node number
   b5bc6:	f001 fd78 	bl	b76ba <_ZN10RHDatagram14setThisAddressEh>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5bca:	f000 f925 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5bce:	f000 fa92 	bl	b60f6 <_ZNK13sysStatusData15get_magicNumberEv>
   b5bd2:	0a00      	lsrs	r0, r0, #8
   b5bd4:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5bd6:	f000 f91f 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5bda:	f000 fa8c 	bl	b60f6 <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = highByte(deviceIDCheckSum);
   b5bde:	122b      	asrs	r3, r5, #8
   b5be0:	70a3      	strb	r3, [r4, #2]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5be2:	7060      	strb	r0, [r4, #1]
	buf[3] = lowByte(deviceIDCheckSum);
   b5be4:	70e5      	strb	r5, [r4, #3]
		buf[i+4] = deviceID[i];
   b5be6:	ab09      	add	r3, sp, #36	; 0x24
   b5be8:	1d22      	adds	r2, r4, #4
   b5bea:	ae0f      	add	r6, sp, #60	; 0x3c
   b5bec:	461d      	mov	r5, r3
   b5bee:	cd03      	ldmia	r5!, {r0, r1}
   b5bf0:	42b5      	cmp	r5, r6
   b5bf2:	6010      	str	r0, [r2, #0]
   b5bf4:	6051      	str	r1, [r2, #4]
   b5bf6:	462b      	mov	r3, r5
   b5bf8:	f102 0208 	add.w	r2, r2, #8
   b5bfc:	d1f6      	bne.n	b5bec <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x68>
   b5bfe:	782b      	ldrb	r3, [r5, #0]
   b5c00:	7013      	strb	r3, [r2, #0]
	buf[29] = sysStatus.get_sensorType();
   b5c02:	f000 f909 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5c06:	f000 f9fd 	bl	b6004 <_ZNK13sysStatusData14get_sensorTypeEv>
	digitalWrite(BLUE_LED,HIGH);
   b5c0a:	4b22      	ldr	r3, [pc, #136]	; (b5c94 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x110>)
	buf[29] = sysStatus.get_sensorType();
   b5c0c:	7760      	strb	r0, [r4, #29]
	digitalWrite(BLUE_LED,HIGH);
   b5c0e:	881e      	ldrh	r6, [r3, #0]
   b5c10:	2101      	movs	r1, #1
   b5c12:	4630      	mov	r0, r6
	unsigned char result = manager.sendtoWait(buf, 30, GATEWAY_ADDRESS, JOIN_REQ);
   b5c14:	2401      	movs	r4, #1
	digitalWrite(BLUE_LED,HIGH);
   b5c16:	f006 fa34 	bl	bc082 <digitalWrite>
	unsigned char result = manager.sendtoWait(buf, 30, GATEWAY_ADDRESS, JOIN_REQ);
   b5c1a:	491d      	ldr	r1, [pc, #116]	; (b5c90 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x10c>)
   b5c1c:	481e      	ldr	r0, [pc, #120]	; (b5c98 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x114>)
   b5c1e:	9400      	str	r4, [sp, #0]
   b5c20:	2300      	movs	r3, #0
   b5c22:	221e      	movs	r2, #30
   b5c24:	f001 ffe2 	bl	b7bec <_ZN6RHMesh10sendtoWaitEPhhhh>
	digitalWrite(BLUE_LED, LOW);
   b5c28:	2100      	movs	r1, #0
	unsigned char result = manager.sendtoWait(buf, 30, GATEWAY_ADDRESS, JOIN_REQ);
   b5c2a:	4605      	mov	r5, r0
	digitalWrite(BLUE_LED, LOW);
   b5c2c:	4630      	mov	r0, r6
   b5c2e:	f006 fa28 	bl	bc082 <digitalWrite>
	if (result == RH_ROUTER_ERROR_NONE) {					// It has been reliably delivered to the next node.
   b5c32:	bb2d      	cbnz	r5, b5c80 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xfc>
		current.set_RSSI(driver.lastRssi());				// Set these here - will send on next data report
   b5c34:	f000 f962 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5c38:	4605      	mov	r5, r0
   b5c3a:	4818      	ldr	r0, [pc, #96]	; (b5c9c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x118>)
   b5c3c:	f001 fdbb 	bl	b77b6 <_ZN15RHGenericDriver8lastRssiEv>
   b5c40:	4601      	mov	r1, r0
   b5c42:	4628      	mov	r0, r5
   b5c44:	f000 fc08 	bl	b6458 <_ZN17currentStatusData8set_RSSIEs>
		current.set_SNR(driver.lastSNR());
   b5c48:	f000 f958 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5c4c:	4605      	mov	r5, r0
   b5c4e:	4813      	ldr	r0, [pc, #76]	; (b5c9c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x118>)
   b5c50:	f002 ff52 	bl	b8af8 <_ZN7RH_RF957lastSNREv>
   b5c54:	b201      	sxth	r1, r0
   b5c56:	4628      	mov	r0, r5
   b5c58:	f000 fc04 	bl	b6464 <_ZN17currentStatusData7set_SNREs>
		Log.info("Join request sent to gateway successfully RSSI/SNR of %d / %d ",current.get_RSSI(), current.get_SNR());
   b5c5c:	f000 f94e 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5c60:	f000 fbd8 	bl	b6414 <_ZNK17currentStatusData8get_RSSIEv>
   b5c64:	9003      	str	r0, [sp, #12]
   b5c66:	f000 f949 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5c6a:	f000 fbd8 	bl	b641e <_ZNK17currentStatusData7get_SNREv>
   b5c6e:	9a03      	ldr	r2, [sp, #12]
   b5c70:	490b      	ldr	r1, [pc, #44]	; (b5ca0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x11c>)
   b5c72:	4603      	mov	r3, r0
   b5c74:	480b      	ldr	r0, [pc, #44]	; (b5ca4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x120>)
   b5c76:	f7fe fb9b 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		return true;
   b5c7a:	4620      	mov	r0, r4
}
   b5c7c:	b010      	add	sp, #64	; 0x40
   b5c7e:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Join request to Gateway failed");
   b5c80:	4808      	ldr	r0, [pc, #32]	; (b5ca4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x120>)
   b5c82:	4909      	ldr	r1, [pc, #36]	; (b5ca8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x124>)
   b5c84:	f7fe fb94 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
		return false;
   b5c88:	2000      	movs	r0, #0
   b5c8a:	e7f7      	b.n	b5c7c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf8>
   b5c8c:	2003e304 	.word	0x2003e304
   b5c90:	2003e154 	.word	0x2003e154
   b5c94:	000bede8 	.word	0x000bede8
   b5c98:	2003e300 	.word	0x2003e300
   b5c9c:	2003e1d0 	.word	0x2003e1d0
   b5ca0:	000bebde 	.word	0x000bebde
   b5ca4:	2003e654 	.word	0x2003e654
   b5ca8:	000bec1d 	.word	0x000bec1d

000b5cac <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b5cac:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b5cae:	4a08      	ldr	r2, [pc, #32]	; (b5cd0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b5cb0:	4c08      	ldr	r4, [pc, #32]	; (b5cd4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b5cb2:	4909      	ldr	r1, [pc, #36]	; (b5cd8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b5cb4:	7812      	ldrb	r2, [r2, #0]
   b5cb6:	7809      	ldrb	r1, [r1, #0]
   b5cb8:	4b08      	ldr	r3, [pc, #32]	; (b5cdc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b5cba:	4620      	mov	r0, r4
   b5cbc:	f002 fc8e 	bl	b85dc <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5cc0:	4621      	mov	r1, r4
   b5cc2:	4807      	ldr	r0, [pc, #28]	; (b5ce0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b5cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5cc8:	2200      	movs	r2, #0
   b5cca:	f001 bf85 	b.w	b7bd8 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b5cce:	bf00      	nop
   b5cd0:	000bedf0 	.word	0x000bedf0
   b5cd4:	2003e1d0 	.word	0x2003e1d0
   b5cd8:	000bedee 	.word	0x000bedee
   b5cdc:	2003e4ec 	.word	0x2003e4ec
   b5ce0:	2003e300 	.word	0x2003e300

000b5ce4 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5ce4:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b5ce6:	4b04      	ldr	r3, [pc, #16]	; (b5cf8 <_ZN17currentStatusDataD1Ev+0x14>)
   b5ce8:	6003      	str	r3, [r0, #0]
   b5cea:	4604      	mov	r4, r0
            if (handle_) {
   b5cec:	6840      	ldr	r0, [r0, #4]
   b5cee:	b108      	cbz	r0, b5cf4 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5cf0:	f003 f8ee 	bl	b8ed0 <os_mutex_recursive_destroy>
}
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	bd10      	pop	{r4, pc}
   b5cf8:	000bf508 	.word	0x000bf508

000b5cfc <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5cfc:	b510      	push	{r4, lr}
   b5cfe:	4604      	mov	r4, r0
}
   b5d00:	f7ff fff0 	bl	b5ce4 <_ZN17currentStatusDataD1Ev>
   b5d04:	4620      	mov	r0, r4
   b5d06:	2178      	movs	r1, #120	; 0x78
   b5d08:	f7fe f9c9 	bl	b409e <_ZdlPvj>
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	bd10      	pop	{r4, pc}

000b5d10 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5d10:	b510      	push	{r4, lr}
   b5d12:	4b03      	ldr	r3, [pc, #12]	; (b5d20 <_ZN8MB85RC64D1Ev+0x10>)
   b5d14:	6003      	str	r3, [r0, #0]
   b5d16:	4604      	mov	r4, r0
   b5d18:	f001 fba2 	bl	b7460 <_ZN6MB85RCD1Ev>
   b5d1c:	4620      	mov	r0, r4
   b5d1e:	bd10      	pop	{r4, pc}
   b5d20:	000bed48 	.word	0x000bed48

000b5d24 <_ZN8MB85RC64D0Ev>:
   b5d24:	b510      	push	{r4, lr}
   b5d26:	4604      	mov	r4, r0
   b5d28:	f7ff fff2 	bl	b5d10 <_ZN8MB85RC64D1Ev>
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	2110      	movs	r1, #16
   b5d30:	f7fe f9b5 	bl	b409e <_ZdlPvj>
   b5d34:	4620      	mov	r0, r4
   b5d36:	bd10      	pop	{r4, pc}

000b5d38 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b5d38:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5d3a:	4b04      	ldr	r3, [pc, #16]	; (b5d4c <_ZN13sysStatusDataD1Ev+0x14>)
   b5d3c:	6003      	str	r3, [r0, #0]
   b5d3e:	4604      	mov	r4, r0
            if (handle_) {
   b5d40:	6840      	ldr	r0, [r0, #4]
   b5d42:	b108      	cbz	r0, b5d48 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5d44:	f003 f8c4 	bl	b8ed0 <os_mutex_recursive_destroy>
}
   b5d48:	4620      	mov	r0, r4
   b5d4a:	bd10      	pop	{r4, pc}
   b5d4c:	000bf508 	.word	0x000bf508

000b5d50 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5d50:	b510      	push	{r4, lr}
   b5d52:	4604      	mov	r4, r0
}
   b5d54:	f7ff fff0 	bl	b5d38 <_ZN13sysStatusDataD1Ev>
   b5d58:	4620      	mov	r0, r4
   b5d5a:	2168      	movs	r1, #104	; 0x68
   b5d5c:	f7fe f99f 	bl	b409e <_ZdlPvj>
   b5d60:	4620      	mov	r0, r4
   b5d62:	bd10      	pop	{r4, pc}

000b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5d64:	b510      	push	{r4, lr}
            if (!handle_) {
   b5d66:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5d68:	4604      	mov	r4, r0
            if (!handle_) {
   b5d6a:	b90b      	cbnz	r3, b5d70 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5d6c:	f003 f8a8 	bl	b8ec0 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5d70:	6820      	ldr	r0, [r4, #0]
        }
   b5d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5d76:	f003 b8b3 	b.w	b8ee0 <os_mutex_recursive_lock>

000b5d7a <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5d7a:	b538      	push	{r3, r4, r5, lr}
   b5d7c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5d7e:	3004      	adds	r0, #4
   b5d80:	f7ff fff0 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5d84:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5d88:	6803      	ldr	r3, [r0, #0]
   b5d8a:	68dd      	ldr	r5, [r3, #12]
   b5d8c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5d90:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5d92:	6860      	ldr	r0, [r4, #4]
   b5d94:	f003 f8ac 	bl	b8ef0 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b5d98:	4620      	mov	r0, r4
        } 
   b5d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b5d9e:	f002 bf43 	b.w	b8c28 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b5da2 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5da2:	b538      	push	{r3, r4, r5, lr}
   b5da4:	4604      	mov	r4, r0
   b5da6:	3004      	adds	r0, #4
   b5da8:	f7ff ffdc 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5dac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5dae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5db0:	6803      	ldr	r3, [r0, #0]
   b5db2:	689d      	ldr	r5, [r3, #8]
   b5db4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5db8:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5dba:	68a2      	ldr	r2, [r4, #8]
   b5dbc:	6823      	ldr	r3, [r4, #0]
   b5dbe:	88d1      	ldrh	r1, [r2, #6]
   b5dc0:	695b      	ldr	r3, [r3, #20]
   b5dc2:	4620      	mov	r0, r4
   b5dc4:	4798      	blx	r3
   b5dc6:	b918      	cbnz	r0, b5dd0 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5dc8:	6823      	ldr	r3, [r4, #0]
   b5dca:	4620      	mov	r0, r4
   b5dcc:	699b      	ldr	r3, [r3, #24]
   b5dce:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5dd0:	6860      	ldr	r0, [r4, #4]
   b5dd2:	f003 f88d 	bl	b8ef0 <os_mutex_recursive_unlock>
        }
   b5dd6:	2001      	movs	r0, #1
   b5dd8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5ddc <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5ddc:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5de0:	6081      	str	r1, [r0, #8]
   b5de2:	490a      	ldr	r1, [pc, #40]	; (b5e0c <_ZN13sysStatusDataC1Ev+0x30>)
   b5de4:	f04f 0c38 	mov.w	ip, #56	; 0x38
   b5de8:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5dec:	2102      	movs	r1, #2
   b5dee:	8281      	strh	r1, [r0, #20]
   b5df0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5df4:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5df6:	4906      	ldr	r1, [pc, #24]	; (b5e10 <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5df8:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5dfa:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b5dfe:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5e00:	6182      	str	r2, [r0, #24]
   b5e02:	f880 2020 	strb.w	r2, [r0, #32]
   b5e06:	4a03      	ldr	r2, [pc, #12]	; (b5e14 <_ZN13sysStatusDataC1Ev+0x38>)
   b5e08:	6002      	str	r2, [r0, #0]
};
   b5e0a:	4770      	bx	lr
   b5e0c:	20a99e75 	.word	0x20a99e75
   b5e10:	2003e4b8 	.word	0x2003e4b8
   b5e14:	000bed64 	.word	0x000bed64

000b5e18 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5e18:	b510      	push	{r4, lr}
    if (!_instance) {
   b5e1a:	4c06      	ldr	r4, [pc, #24]	; (b5e34 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5e1c:	6823      	ldr	r3, [r4, #0]
   b5e1e:	b93b      	cbnz	r3, b5e30 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5e20:	2068      	movs	r0, #104	; 0x68
   b5e22:	f7fe f938 	bl	b4096 <_Znwj>
   b5e26:	4603      	mov	r3, r0
   b5e28:	b108      	cbz	r0, b5e2e <_ZN13sysStatusData8instanceEv+0x16>
   b5e2a:	f7ff ffd7 	bl	b5ddc <_ZN13sysStatusDataC1Ev>
   b5e2e:	6023      	str	r3, [r4, #0]
}
   b5e30:	6820      	ldr	r0, [r4, #0]
   b5e32:	bd10      	pop	{r4, pc}
   b5e34:	2003e4b0 	.word	0x2003e4b0

000b5e38 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5e38:	b510      	push	{r4, lr}
    fram.begin();
   b5e3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5e3c:	f001 fb26 	bl	b748c <_ZN6MB85RC5beginEv>
    sysStatus
   b5e40:	f7ff ffea 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b5e44:	2264      	movs	r2, #100	; 0x64
        .load();
   b5e46:	6803      	ldr	r3, [r0, #0]
   b5e48:	61c2      	str	r2, [r0, #28]
}
   b5e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5e4e:	685b      	ldr	r3, [r3, #4]
   b5e50:	4718      	bx	r3

000b5e52 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5e52:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5e54:	f7ff ffe0 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b5e58:	6803      	ldr	r3, [r0, #0]
}
   b5e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5e5e:	68db      	ldr	r3, [r3, #12]
   b5e60:	2100      	movs	r1, #0
   b5e62:	4718      	bx	r3

000b5e64 <_ZNK13sysStatusData13get_openHoursEv>:
bool sysStatusData::get_openHours() const {
   b5e64:	b538      	push	{r3, r4, r5, lr}
   b5e66:	4604      	mov	r4, r0
   b5e68:	3004      	adds	r0, #4
   b5e6a:	f7ff ff7b 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e6e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5e70:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e72:	3b01      	subs	r3, #1
   b5e74:	2b30      	cmp	r3, #48	; 0x30
                    result = *(const T *)p;
   b5e76:	bf86      	itte	hi
   b5e78:	68a3      	ldrhi	r3, [r4, #8]
   b5e7a:	f893 5031 	ldrbhi.w	r5, [r3, #49]	; 0x31
            T result = 0;
   b5e7e:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5e80:	f003 f836 	bl	b8ef0 <os_mutex_recursive_unlock>
}
   b5e84:	4628      	mov	r0, r5
   b5e86:	bd38      	pop	{r3, r4, r5, pc}

000b5e88 <_ZN13sysStatusData13set_openHoursEb>:
void sysStatusData::set_openHours(bool value) {
   b5e88:	b538      	push	{r3, r4, r5, lr}
   b5e8a:	4604      	mov	r4, r0
   b5e8c:	3004      	adds	r0, #4
   b5e8e:	460d      	mov	r5, r1
   b5e90:	f7ff ff68 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e94:	68e3      	ldr	r3, [r4, #12]
   b5e96:	3b01      	subs	r3, #1
   b5e98:	2b30      	cmp	r3, #48	; 0x30
   b5e9a:	d909      	bls.n	b5eb0 <_ZN13sysStatusData13set_openHoursEb+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5e9c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5e9e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
   b5ea2:	42aa      	cmp	r2, r5
   b5ea4:	d004      	beq.n	b5eb0 <_ZN13sysStatusData13set_openHoursEb+0x28>
                        *(T *)p = value;
   b5ea6:	f883 5031 	strb.w	r5, [r3, #49]	; 0x31
                        updateHash();
   b5eaa:	4620      	mov	r0, r4
   b5eac:	f002 ff48 	bl	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5eb0:	6860      	ldr	r0, [r4, #4]
}
   b5eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5eb6:	f003 b81b 	b.w	b8ef0 <os_mutex_recursive_unlock>
	...

000b5ebc <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5ebc:	f100 0130 	add.w	r1, r0, #48	; 0x30
        CustomRecursiveMutex() : handle_(nullptr) {
   b5ec0:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ec2:	6081      	str	r1, [r0, #8]
   b5ec4:	490a      	ldr	r1, [pc, #40]	; (b5ef0 <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5ec6:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ec8:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b5ecc:	6182      	str	r2, [r0, #24]
   b5ece:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ed2:	4a08      	ldr	r2, [pc, #32]	; (b5ef4 <_ZN17currentStatusDataC1Ev+0x38>)
   b5ed4:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ed6:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5eda:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5edc:	2103      	movs	r1, #3
   b5ede:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ee0:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ee2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5ee6:	4a04      	ldr	r2, [pc, #16]	; (b5ef8 <_ZN17currentStatusDataC1Ev+0x3c>)
   b5ee8:	61c1      	str	r1, [r0, #28]
   b5eea:	6002      	str	r2, [r0, #0]
};
   b5eec:	4770      	bx	lr
   b5eee:	bf00      	nop
   b5ef0:	20a99e80 	.word	0x20a99e80
   b5ef4:	2003e4b8 	.word	0x2003e4b8
   b5ef8:	000bed90 	.word	0x000bed90

000b5efc <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5efc:	b510      	push	{r4, lr}
    if (!_instance) {
   b5efe:	4c06      	ldr	r4, [pc, #24]	; (b5f18 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5f00:	6823      	ldr	r3, [r4, #0]
   b5f02:	b93b      	cbnz	r3, b5f14 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5f04:	2078      	movs	r0, #120	; 0x78
   b5f06:	f7fe f8c6 	bl	b4096 <_Znwj>
   b5f0a:	4603      	mov	r3, r0
   b5f0c:	b108      	cbz	r0, b5f12 <_ZN17currentStatusData8instanceEv+0x16>
   b5f0e:	f7ff ffd5 	bl	b5ebc <_ZN17currentStatusDataC1Ev>
   b5f12:	6023      	str	r3, [r4, #0]
}
   b5f14:	6820      	ldr	r0, [r4, #0]
   b5f16:	bd10      	pop	{r4, pc}
   b5f18:	2003e4b4 	.word	0x2003e4b4

000b5f1c <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5f1c:	b510      	push	{r4, lr}
    fram.begin();
   b5f1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5f20:	f001 fab4 	bl	b748c <_ZN6MB85RC5beginEv>

    current
   b5f24:	f7ff ffea 	bl	b5efc <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b5f28:	22fa      	movs	r2, #250	; 0xfa
    //    .withLogData(true)
        .withSaveDelayMs(250)
        .load();
   b5f2a:	6803      	ldr	r3, [r0, #0]
   b5f2c:	61c2      	str	r2, [r0, #28]
}
   b5f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5f32:	685b      	ldr	r3, [r3, #4]
   b5f34:	4718      	bx	r3

000b5f36 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5f36:	b510      	push	{r4, lr}
    current.flush(false);
   b5f38:	f7ff ffe0 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b5f3c:	6803      	ldr	r3, [r0, #0]
}
   b5f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b5f42:	68db      	ldr	r3, [r3, #12]
   b5f44:	2100      	movs	r1, #0
   b5f46:	4718      	bx	r3

000b5f48 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5f48:	b510      	push	{r4, lr}
   b5f4a:	4604      	mov	r4, r0
   b5f4c:	ed2d 8b02 	vpush	{d8}
   b5f50:	3004      	adds	r0, #4
   b5f52:	f7ff ff07 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f56:	68e3      	ldr	r3, [r4, #12]
   b5f58:	3b08      	subs	r3, #8
   b5f5a:	2b17      	cmp	r3, #23
   b5f5c:	d90c      	bls.n	b5f78 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5f5e:	68a3      	ldr	r3, [r4, #8]
   b5f60:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5f64:	6860      	ldr	r0, [r4, #4]
   b5f66:	f002 ffc3 	bl	b8ef0 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5f6a:	eeb0 0a48 	vmov.f32	s0, s16
   b5f6e:	eef0 0a68 	vmov.f32	s1, s17
   b5f72:	ecbd 8b02 	vpop	{d8}
   b5f76:	bd10      	pop	{r4, pc}
            T result = 0;
   b5f78:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5f80 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5f7c:	e7f2      	b.n	b5f64 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5f7e:	bf00      	nop
	...

000b5f88 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f8a:	4604      	mov	r4, r0
   b5f8c:	3004      	adds	r0, #4
   b5f8e:	ec57 6b10 	vmov	r6, r7, d0
   b5f92:	f7ff fee7 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f96:	68e3      	ldr	r3, [r4, #12]
   b5f98:	3b08      	subs	r3, #8
   b5f9a:	2b17      	cmp	r3, #23
   b5f9c:	d90c      	bls.n	b5fb8 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5f9e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5fa0:	4630      	mov	r0, r6
   b5fa2:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5fa6:	4639      	mov	r1, r7
   b5fa8:	f007 fe20 	bl	bdbec <__aeabi_dcmpeq>
   b5fac:	b920      	cbnz	r0, b5fb8 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                        *(T *)p = value;
   b5fae:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        updateHash();
   b5fb2:	4620      	mov	r0, r4
   b5fb4:	f002 fec4 	bl	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5fb8:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5fbe:	f002 bf97 	b.w	b8ef0 <os_mutex_recursive_unlock>

000b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5fc2:	b538      	push	{r3, r4, r5, lr}
   b5fc4:	4604      	mov	r4, r0
   b5fc6:	3004      	adds	r0, #4
   b5fc8:	460d      	mov	r5, r1
   b5fca:	f7ff fecb 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fce:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5fd0:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fd2:	3b01      	subs	r3, #1
   b5fd4:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5fd6:	bf26      	itte	cs
   b5fd8:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5fda:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5fdc:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5fde:	f002 ff87 	bl	b8ef0 <os_mutex_recursive_unlock>
        }
   b5fe2:	4628      	mov	r0, r5
   b5fe4:	bd38      	pop	{r3, r4, r5, pc}

000b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5fe6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5fe8:	2110      	movs	r1, #16
   b5fea:	f7ff ffea 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5fee:	bd08      	pop	{r3, pc}

000b5ff0 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5ff0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5ff2:	2117      	movs	r1, #23
   b5ff4:	f7ff ffe5 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ff8:	bd08      	pop	{r3, pc}

000b5ffa <_ZNK13sysStatusData17get_alertCodeNodeEv>:
uint8_t sysStatusData::get_alertCodeNode() const {
   b5ffa:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeNode));
   b5ffc:	2122      	movs	r1, #34	; 0x22
   b5ffe:	f7ff ffe0 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6002:	bd08      	pop	{r3, pc}

000b6004 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b6004:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b6006:	2130      	movs	r1, #48	; 0x30
   b6008:	f7ff ffdb 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b600c:	bd08      	pop	{r3, pc}

000b600e <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b600e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b6010:	2110      	movs	r1, #16
   b6012:	f7ff ffd6 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6016:	bd08      	pop	{r3, pc}

000b6018 <_ZNK17currentStatusData16get_batteryStateEv>:

uint8_t currentStatusData::get_batteryState() const {
   b6018:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b601a:	2120      	movs	r1, #32
   b601c:	f7ff ffd1 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6020:	bd08      	pop	{r3, pc}

000b6022 <_ZNK17currentStatusData16get_messageCountEv>:

void currentStatusData::set_SNR(int16_t value) {
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
}

uint8_t currentStatusData::get_messageCount() const {
   b6022:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b6024:	2134      	movs	r1, #52	; 0x34
   b6026:	f7ff ffcc 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b602a:	bd08      	pop	{r3, pc}

000b602c <_ZNK17currentStatusData16get_successCountEv>:

void currentStatusData::set_messageCount(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
}

uint8_t currentStatusData::get_successCount() const {
   b602c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b602e:	2135      	movs	r1, #53	; 0x35
   b6030:	f7ff ffc7 	bl	b5fc2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6034:	bd08      	pop	{r3, pc}

000b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6036:	b570      	push	{r4, r5, r6, lr}
   b6038:	4604      	mov	r4, r0
   b603a:	3004      	adds	r0, #4
   b603c:	460d      	mov	r5, r1
   b603e:	4616      	mov	r6, r2
   b6040:	f7ff fe90 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6044:	68e3      	ldr	r3, [r4, #12]
   b6046:	3b01      	subs	r3, #1
   b6048:	42ab      	cmp	r3, r5
   b604a:	d307      	bcc.n	b605c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b604c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b604e:	5d5a      	ldrb	r2, [r3, r5]
   b6050:	42b2      	cmp	r2, r6
   b6052:	d003      	beq.n	b605c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b6054:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6056:	4620      	mov	r0, r4
   b6058:	f002 fe72 	bl	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b605c:	6860      	ldr	r0, [r4, #4]
        }
   b605e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6062:	f002 bf45 	b.w	b8ef0 <os_mutex_recursive_unlock>

000b6066 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b6066:	b508      	push	{r3, lr}
   b6068:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b606a:	2110      	movs	r1, #16
   b606c:	f7ff ffe3 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6070:	bd08      	pop	{r3, pc}

000b6072 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b6072:	b508      	push	{r3, lr}
   b6074:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b6076:	2112      	movs	r1, #18
   b6078:	f7ff ffdd 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b607c:	bd08      	pop	{r3, pc}

000b607e <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b607e:	b508      	push	{r3, lr}
   b6080:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b6082:	2117      	movs	r1, #23
   b6084:	f7ff ffd7 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6088:	bd08      	pop	{r3, pc}

000b608a <_ZN13sysStatusData17set_alertCodeNodeEh>:
void sysStatusData::set_alertCodeNode(uint8_t value) {
   b608a:	b508      	push	{r3, lr}
   b608c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeNode), value);
   b608e:	2122      	movs	r1, #34	; 0x22
   b6090:	f7ff ffd1 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6094:	bd08      	pop	{r3, pc}

000b6096 <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b6096:	b508      	push	{r3, lr}
   b6098:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b609a:	2130      	movs	r1, #48	; 0x30
   b609c:	f7ff ffcb 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60a0:	bd08      	pop	{r3, pc}

000b60a2 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b60a2:	b508      	push	{r3, lr}
   b60a4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b60a6:	2110      	movs	r1, #16
   b60a8:	f7ff ffc5 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60ac:	bd08      	pop	{r3, pc}

000b60ae <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b60ae:	b508      	push	{r3, lr}
   b60b0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b60b2:	2120      	movs	r1, #32
   b60b4:	f7ff ffbf 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60b8:	bd08      	pop	{r3, pc}

000b60ba <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b60ba:	b508      	push	{r3, lr}
   b60bc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b60be:	2134      	movs	r1, #52	; 0x34
   b60c0:	f7ff ffb9 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60c4:	bd08      	pop	{r3, pc}

000b60c6 <_ZN17currentStatusData16set_successCountEh>:

void currentStatusData::set_successCount(uint8_t value) {
   b60c6:	b508      	push	{r3, lr}
   b60c8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b60ca:	2135      	movs	r1, #53	; 0x35
   b60cc:	f7ff ffb3 	bl	b6036 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b60d0:	bd08      	pop	{r3, pc}

000b60d2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b60d2:	b538      	push	{r3, r4, r5, lr}
   b60d4:	4604      	mov	r4, r0
   b60d6:	3004      	adds	r0, #4
   b60d8:	460d      	mov	r5, r1
   b60da:	f7ff fe43 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b60de:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b60e0:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b60e2:	3b02      	subs	r3, #2
   b60e4:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b60e6:	bf26      	itte	cs
   b60e8:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b60ea:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b60ec:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b60ee:	f002 feff 	bl	b8ef0 <os_mutex_recursive_unlock>
        }
   b60f2:	4628      	mov	r0, r5
   b60f4:	bd38      	pop	{r3, r4, r5, pc}

000b60f6 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b60f6:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b60f8:	2114      	movs	r1, #20
   b60fa:	f7ff ffea 	bl	b60d2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b60fe:	bd08      	pop	{r3, pc}

000b6100 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b6100:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b6102:	2120      	movs	r1, #32
   b6104:	f7ff ffe5 	bl	b60d2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6108:	bd08      	pop	{r3, pc}
	...

000b610c <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b610c:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b610e:	f002 fe23 	bl	b8d58 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b6112:	4604      	mov	r4, r0
   b6114:	b170      	cbz	r0, b6134 <_ZN13sysStatusData8validateEj+0x28>
        if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b6116:	f7ff fe7f 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b611a:	f7ff fff1 	bl	b6100 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b611e:	b958      	cbnz	r0, b6138 <_ZN13sysStatusData8validateEj+0x2c>
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencyMinutes());
   b6120:	f7ff fe7a 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6124:	f7ff ffec 	bl	b6100 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6128:	4913      	ldr	r1, [pc, #76]	; (b6178 <_ZN13sysStatusData8validateEj+0x6c>)
   b612a:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b612c:	4813      	ldr	r0, [pc, #76]	; (b617c <_ZN13sysStatusData8validateEj+0x70>)
   b612e:	f7fe f93f 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b6132:	2400      	movs	r4, #0
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b6134:	4a12      	ldr	r2, [pc, #72]	; (b6180 <_ZN13sysStatusData8validateEj+0x74>)
   b6136:	e018      	b.n	b616a <_ZN13sysStatusData8validateEj+0x5e>
        if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b6138:	f7ff fe6e 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b613c:	f7ff ffe0 	bl	b6100 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6140:	283c      	cmp	r0, #60	; 0x3c
   b6142:	d8ed      	bhi.n	b6120 <_ZN13sysStatusData8validateEj+0x14>
        else if (sysStatus.get_nodeNumber() < 1 || sysStatus.get_nodeNumber() > 11) {
   b6144:	f7ff fe68 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6148:	f7ff ff4d 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b614c:	b930      	cbnz	r0, b615c <_ZN13sysStatusData8validateEj+0x50>
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b614e:	f7ff fe63 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6152:	f7ff ff48 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6156:	490b      	ldr	r1, [pc, #44]	; (b6184 <_ZN13sysStatusData8validateEj+0x78>)
   b6158:	4602      	mov	r2, r0
   b615a:	e7e7      	b.n	b612c <_ZN13sysStatusData8validateEj+0x20>
        else if (sysStatus.get_nodeNumber() < 1 || sysStatus.get_nodeNumber() > 11) {
   b615c:	f7ff fe5c 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6160:	f7ff ff41 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6164:	280b      	cmp	r0, #11
   b6166:	d8f2      	bhi.n	b614e <_ZN13sysStatusData8validateEj+0x42>
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b6168:	4a07      	ldr	r2, [pc, #28]	; (b6188 <_ZN13sysStatusData8validateEj+0x7c>)
   b616a:	4908      	ldr	r1, [pc, #32]	; (b618c <_ZN13sysStatusData8validateEj+0x80>)
   b616c:	4803      	ldr	r0, [pc, #12]	; (b617c <_ZN13sysStatusData8validateEj+0x70>)
   b616e:	f7fe f91f 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
}
   b6172:	4620      	mov	r0, r4
   b6174:	bd10      	pop	{r4, pc}
   b6176:	bf00      	nop
   b6178:	000bec6a 	.word	0x000bec6a
   b617c:	2003e654 	.word	0x2003e654
   b6180:	000bec60 	.word	0x000bec60
   b6184:	000bec8f 	.word	0x000bec8f
   b6188:	000bec64 	.word	0x000bec64
   b618c:	000becae 	.word	0x000becae

000b6190 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b6190:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b6192:	2140      	movs	r1, #64	; 0x40
   b6194:	f7ff ff9d 	bl	b60d2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6198:	bd08      	pop	{r3, pc}
	...

000b619c <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b619c:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b619e:	f002 fddb 	bl	b8d58 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b61a2:	4604      	mov	r4, r0
   b61a4:	b1a0      	cbz	r0, b61d0 <_ZN17currentStatusData8validateEj+0x34>
        if (current.get_hourlyCount() < 0 || current.get_hourlyCount()  > 1024) {
   b61a6:	f7ff fea9 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b61aa:	f7ff fff1 	bl	b6190 <_ZNK17currentStatusData15get_hourlyCountEv>
   b61ae:	f7ff fea5 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b61b2:	f7ff ffed 	bl	b6190 <_ZNK17currentStatusData15get_hourlyCountEv>
   b61b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b61ba:	d910      	bls.n	b61de <_ZN17currentStatusData8validateEj+0x42>
            Log.info("current data not valid hourlyCount=%d" , current.get_hourlyCount());
   b61bc:	f7ff fe9e 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b61c0:	f7ff ffe6 	bl	b6190 <_ZNK17currentStatusData15get_hourlyCountEv>
   b61c4:	4907      	ldr	r1, [pc, #28]	; (b61e4 <_ZN17currentStatusData8validateEj+0x48>)
   b61c6:	4602      	mov	r2, r0
   b61c8:	4807      	ldr	r0, [pc, #28]	; (b61e8 <_ZN17currentStatusData8validateEj+0x4c>)
   b61ca:	f7fe f8f1 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b61ce:	2400      	movs	r4, #0
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b61d0:	4a06      	ldr	r2, [pc, #24]	; (b61ec <_ZN17currentStatusData8validateEj+0x50>)
   b61d2:	4907      	ldr	r1, [pc, #28]	; (b61f0 <_ZN17currentStatusData8validateEj+0x54>)
   b61d4:	4804      	ldr	r0, [pc, #16]	; (b61e8 <_ZN17currentStatusData8validateEj+0x4c>)
   b61d6:	f7fe f8eb 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
}
   b61da:	4620      	mov	r0, r4
   b61dc:	bd10      	pop	{r4, pc}
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b61de:	4a05      	ldr	r2, [pc, #20]	; (b61f4 <_ZN17currentStatusData8validateEj+0x58>)
   b61e0:	e7f7      	b.n	b61d2 <_ZN17currentStatusData8validateEj+0x36>
   b61e2:	bf00      	nop
   b61e4:	000becc3 	.word	0x000becc3
   b61e8:	2003e654 	.word	0x2003e654
   b61ec:	000bec60 	.word	0x000bec60
   b61f0:	000bece9 	.word	0x000bece9
   b61f4:	000bec64 	.word	0x000bec64

000b61f8 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b61f8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b61fa:	2142      	movs	r1, #66	; 0x42
   b61fc:	f7ff ff69 	bl	b60d2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6200:	bd08      	pop	{r3, pc}

000b6202 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6202:	b570      	push	{r4, r5, r6, lr}
   b6204:	4604      	mov	r4, r0
   b6206:	3004      	adds	r0, #4
   b6208:	460d      	mov	r5, r1
   b620a:	4616      	mov	r6, r2
   b620c:	f7ff fdaa 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6210:	68e3      	ldr	r3, [r4, #12]
   b6212:	3b02      	subs	r3, #2
   b6214:	42ab      	cmp	r3, r5
   b6216:	d307      	bcc.n	b6228 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6218:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b621a:	5b5a      	ldrh	r2, [r3, r5]
   b621c:	42b2      	cmp	r2, r6
   b621e:	d003      	beq.n	b6228 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b6220:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6222:	4620      	mov	r0, r4
   b6224:	f002 fd8c 	bl	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6228:	6860      	ldr	r0, [r4, #4]
        }
   b622a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b622e:	f002 be5f 	b.w	b8ef0 <os_mutex_recursive_unlock>

000b6232 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b6232:	b508      	push	{r3, lr}
   b6234:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b6236:	2114      	movs	r1, #20
   b6238:	f7ff ffe3 	bl	b6202 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b623c:	bd08      	pop	{r3, pc}

000b623e <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b623e:	b508      	push	{r3, lr}
   b6240:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b6242:	2120      	movs	r1, #32
   b6244:	f7ff ffdd 	bl	b6202 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6248:	bd08      	pop	{r3, pc}

000b624a <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b624a:	b508      	push	{r3, lr}
   b624c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b624e:	2140      	movs	r1, #64	; 0x40
   b6250:	f7ff ffd7 	bl	b6202 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6254:	bd08      	pop	{r3, pc}

000b6256 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b6256:	b508      	push	{r3, lr}
   b6258:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b625a:	2142      	movs	r1, #66	; 0x42
   b625c:	f7ff ffd1 	bl	b6202 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6260:	bd08      	pop	{r3, pc}

000b6262 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b6262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6264:	4604      	mov	r4, r0
   b6266:	3004      	adds	r0, #4
   b6268:	460d      	mov	r5, r1
   b626a:	f7ff fd7b 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b626e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6270:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6272:	3b08      	subs	r3, #8
   b6274:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6276:	bf23      	ittte	cs
   b6278:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b627a:	1949      	addcs	r1, r1, r5
   b627c:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b6280:	2600      	movcc	r6, #0
   b6282:	bf38      	it	cc
   b6284:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6286:	f002 fe33 	bl	b8ef0 <os_mutex_recursive_unlock>
        }
   b628a:	4630      	mov	r0, r6
   b628c:	4639      	mov	r1, r7
   b628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6290 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b6290:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b6292:	2118      	movs	r1, #24
   b6294:	f7ff ffe5 	bl	b6262 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6298:	bd08      	pop	{r3, pc}

000b629a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b629a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b629c:	4604      	mov	r4, r0
   b629e:	3004      	adds	r0, #4
   b62a0:	460d      	mov	r5, r1
   b62a2:	461e      	mov	r6, r3
   b62a4:	4617      	mov	r7, r2
   b62a6:	f7ff fd5d 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b62aa:	68e3      	ldr	r3, [r4, #12]
   b62ac:	3b08      	subs	r3, #8
   b62ae:	42ab      	cmp	r3, r5
   b62b0:	d30c      	bcc.n	b62cc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b62b2:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b62b4:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b62b6:	5958      	ldr	r0, [r3, r5]
   b62b8:	6851      	ldr	r1, [r2, #4]
   b62ba:	42b1      	cmp	r1, r6
   b62bc:	bf08      	it	eq
   b62be:	42b8      	cmpeq	r0, r7
   b62c0:	d004      	beq.n	b62cc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b62c2:	515f      	str	r7, [r3, r5]
                        updateHash();
   b62c4:	4620      	mov	r0, r4
                        *(T *)p = value;
   b62c6:	6056      	str	r6, [r2, #4]
                        updateHash();
   b62c8:	f002 fd3a 	bl	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b62cc:	6860      	ldr	r0, [r4, #4]
        }
   b62ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b62d2:	f002 be0d 	b.w	b8ef0 <os_mutex_recursive_unlock>

000b62d6 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b62d6:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b62d8:	2118      	movs	r1, #24
   b62da:	f7ff ffde 	bl	b629a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b62de:	bd08      	pop	{r3, pc}

000b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>:
void sysStatusData::set_alertTimestampNode(time_t value) {
   b62e0:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampNode), value);
   b62e2:	2128      	movs	r1, #40	; 0x28
   b62e4:	f7ff ffd9 	bl	b629a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b62e8:	bd08      	pop	{r3, pc}
	...

000b62ec <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b62ec:	b510      	push	{r4, lr}
   b62ee:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b62f0:	f002 fd98 	bl	b8e24 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b62f4:	481b      	ldr	r0, [pc, #108]	; (b6364 <_ZN13sysStatusData10initializeEv+0x78>)
   b62f6:	491c      	ldr	r1, [pc, #112]	; (b6368 <_ZN13sysStatusData10initializeEv+0x7c>)
   b62f8:	f7fe f85a 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b62fc:	491b      	ldr	r1, [pc, #108]	; (b636c <_ZN13sysStatusData10initializeEv+0x80>)
   b62fe:	4819      	ldr	r0, [pc, #100]	; (b6364 <_ZN13sysStatusData10initializeEv+0x78>)
   b6300:	f7fe f856 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(11);
   b6304:	f7ff fd88 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6308:	210b      	movs	r1, #11
   b630a:	f7ff feac 	bl	b6066 <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b630e:	f7ff fd83 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6312:	2101      	movs	r1, #1
   b6314:	f7ff fead 	bl	b6072 <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b6318:	f7ff fd7e 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b631c:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6320:	f7ff ff87 	bl	b6232 <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_resetCount(0);
   b6324:	f7ff fd78 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6328:	2100      	movs	r1, #0
   b632a:	f7ff fea8 	bl	b607e <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_frequencyMinutes(60);
   b632e:	f7ff fd73 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6332:	213c      	movs	r1, #60	; 0x3c
   b6334:	f7ff ff83 	bl	b623e <_ZN13sysStatusData20set_frequencyMinutesEt>
    sysStatus.set_alertCodeNode(1);
   b6338:	f7ff fd6e 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b633c:	2101      	movs	r1, #1
   b633e:	f7ff fea4 	bl	b608a <_ZN13sysStatusData17set_alertCodeNodeEh>
    sysStatus.set_alertTimestampNode(0);
   b6342:	f7ff fd69 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6346:	2200      	movs	r2, #0
   b6348:	2300      	movs	r3, #0
   b634a:	f7ff ffc9 	bl	b62e0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
    sysStatus.set_openHours(true);
   b634e:	f7ff fd63 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6352:	2101      	movs	r1, #1
   b6354:	f7ff fd98 	bl	b5e88 <_ZN13sysStatusData13set_openHoursEb>
    updateHash();
   b6358:	4620      	mov	r0, r4
}
   b635a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b635e:	f002 bcef 	b.w	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6362:	bf00      	nop
   b6364:	2003e654 	.word	0x2003e654
   b6368:	000becfc 	.word	0x000becfc
   b636c:	000bed0d 	.word	0x000bed0d

000b6370 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6370:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6372:	2138      	movs	r1, #56	; 0x38
   b6374:	f7ff ff91 	bl	b629a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6378:	bd08      	pop	{r3, pc}

000b637a <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b637a:	b510      	push	{r4, lr}
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b637c:	f7ff fdbe 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b6380:	2100      	movs	r1, #0
   b6382:	f7ff ff68 	bl	b6256 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6386:	f7ff fdb9 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b638a:	2100      	movs	r1, #0
   b638c:	f7ff ff5d 	bl	b624a <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b6390:	f7ff fdb4 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b6394:	4604      	mov	r4, r0
   b6396:	f005 fc64 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b639a:	4602      	mov	r2, r0
   b639c:	17c3      	asrs	r3, r0, #31
   b639e:	4620      	mov	r0, r4
   b63a0:	f7ff ffe6 	bl	b6370 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b63a4:	f7ff fd38 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b63a8:	2100      	movs	r1, #0
   b63aa:	f7ff fe68 	bl	b607e <_ZN13sysStatusData14set_resetCountEh>
  current.set_messageCount(0);
   b63ae:	f7ff fda5 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b63b2:	2100      	movs	r1, #0
   b63b4:	f7ff fe81 	bl	b60ba <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b63b8:	f7ff fda0 	bl	b5efc <_ZN17currentStatusData8instanceEv>
}
   b63bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  current.set_successCount(0);
   b63c0:	2100      	movs	r1, #0
   b63c2:	f7ff be80 	b.w	b60c6 <_ZN17currentStatusData16set_successCountEh>
	...

000b63c8 <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b63c8:	b510      	push	{r4, lr}
   b63ca:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b63cc:	f002 fd2a 	bl	b8e24 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b63d0:	4905      	ldr	r1, [pc, #20]	; (b63e8 <_ZN17currentStatusData10initializeEv+0x20>)
   b63d2:	4806      	ldr	r0, [pc, #24]	; (b63ec <_ZN17currentStatusData10initializeEv+0x24>)
   b63d4:	f7fd ffec 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b63d8:	4620      	mov	r0, r4
   b63da:	f7ff ffce 	bl	b637a <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b63de:	4620      	mov	r0, r4
}
   b63e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b63e4:	f002 bcac 	b.w	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b63e8:	000bed25 	.word	0x000bed25
   b63ec:	2003e654 	.word	0x2003e654

000b63f0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>:
        T getValue(size_t offset) const {
   b63f0:	b538      	push	{r3, r4, r5, lr}
   b63f2:	4604      	mov	r4, r0
   b63f4:	3004      	adds	r0, #4
   b63f6:	460d      	mov	r5, r1
   b63f8:	f7ff fcb4 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b63fc:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b63fe:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6400:	3b02      	subs	r3, #2
   b6402:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6404:	bf26      	itte	cs
   b6406:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6408:	5f5d      	ldrshcs	r5, [r3, r5]
            T result = 0;
   b640a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b640c:	f002 fd70 	bl	b8ef0 <os_mutex_recursive_unlock>
        }
   b6410:	4628      	mov	r0, r5
   b6412:	bd38      	pop	{r3, r4, r5, pc}

000b6414 <_ZNK17currentStatusData8get_RSSIEv>:
int16_t currentStatusData::get_RSSI() const {
   b6414:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, RSSI));
   b6416:	2130      	movs	r1, #48	; 0x30
   b6418:	f7ff ffea 	bl	b63f0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b641c:	bd08      	pop	{r3, pc}

000b641e <_ZNK17currentStatusData7get_SNREv>:
int16_t currentStatusData::get_SNR() const {
   b641e:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, SNR));
   b6420:	2132      	movs	r1, #50	; 0x32
   b6422:	f7ff ffe5 	bl	b63f0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b6426:	bd08      	pop	{r3, pc}

000b6428 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6428:	b570      	push	{r4, r5, r6, lr}
   b642a:	4604      	mov	r4, r0
   b642c:	3004      	adds	r0, #4
   b642e:	460d      	mov	r5, r1
   b6430:	4616      	mov	r6, r2
   b6432:	f7ff fc97 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6436:	68e3      	ldr	r3, [r4, #12]
   b6438:	3b02      	subs	r3, #2
   b643a:	42ab      	cmp	r3, r5
   b643c:	d307      	bcc.n	b644e <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b643e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6440:	5f5a      	ldrsh	r2, [r3, r5]
   b6442:	42b2      	cmp	r2, r6
   b6444:	d003      	beq.n	b644e <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                        *(T *)p = value;
   b6446:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6448:	4620      	mov	r0, r4
   b644a:	f002 fc79 	bl	b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b644e:	6860      	ldr	r0, [r4, #4]
        }
   b6450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6454:	f002 bd4c 	b.w	b8ef0 <os_mutex_recursive_unlock>

000b6458 <_ZN17currentStatusData8set_RSSIEs>:
void currentStatusData::set_RSSI(int16_t value) {
   b6458:	b508      	push	{r3, lr}
   b645a:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
   b645c:	2130      	movs	r1, #48	; 0x30
   b645e:	f7ff ffe3 	bl	b6428 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b6462:	bd08      	pop	{r3, pc}

000b6464 <_ZN17currentStatusData7set_SNREs>:
void currentStatusData::set_SNR(int16_t value) {
   b6464:	b508      	push	{r3, lr}
   b6466:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
   b6468:	2132      	movs	r1, #50	; 0x32
   b646a:	f7ff ffdd 	bl	b6428 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b646e:	bd08      	pop	{r3, pc}

000b6470 <_GLOBAL__sub_I_fram>:
}
   b6470:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);  
   b6472:	f005 fe7f 	bl	bc174 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6476:	4c05      	ldr	r4, [pc, #20]	; (b648c <_GLOBAL__sub_I_fram+0x1c>)
   b6478:	4601      	mov	r1, r0
   b647a:	2300      	movs	r3, #0
   b647c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6480:	4620      	mov	r0, r4
   b6482:	f000 fff9 	bl	b7478 <_ZN6MB85RCC1ER7TwoWireji>
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <_GLOBAL__sub_I_fram+0x20>)
   b6488:	6023      	str	r3, [r4, #0]
}
   b648a:	bd10      	pop	{r4, pc}
   b648c:	2003e4b8 	.word	0x2003e4b8
   b6490:	000bed48 	.word	0x000bed48

000b6494 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b6494:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b6496:	490f      	ldr	r1, [pc, #60]	; (b64d4 <_Z18initializePinModesv+0x40>)
   b6498:	480f      	ldr	r0, [pc, #60]	; (b64d8 <_Z18initializePinModesv+0x44>)
   b649a:	f7fd ff89 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT);               // User button on the carrier board - active LOW
   b649e:	2100      	movs	r1, #0
   b64a0:	2004      	movs	r0, #4
   b64a2:	f005 fddd 	bl	bc060 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b64a6:	2100      	movs	r1, #0
   b64a8:	2008      	movs	r0, #8
   b64aa:	f005 fdd9 	bl	bc060 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b64ae:	2101      	movs	r1, #1
   b64b0:	2007      	movs	r0, #7
   b64b2:	f005 fdd5 	bl	bc060 <pinMode>
    pinMode(INT_PIN, INPUT);
   b64b6:	2100      	movs	r1, #0
   b64b8:	2012      	movs	r0, #18
   b64ba:	f005 fdd1 	bl	bc060 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b64be:	2101      	movs	r1, #1
   b64c0:	2011      	movs	r0, #17
   b64c2:	f005 fdcd 	bl	bc060 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b64c6:	2101      	movs	r1, #1
   b64c8:	2010      	movs	r0, #16
   b64ca:	f005 fdc9 	bl	bc060 <pinMode>
    return true;
}
   b64ce:	2001      	movs	r0, #1
   b64d0:	bd08      	pop	{r3, pc}
   b64d2:	bf00      	nop
   b64d4:	000bedb4 	.word	0x000bedb4
   b64d8:	2003e654 	.word	0x2003e654

000b64dc <_Z13sensorControlib>:

void sensorControl(int sensorType, bool enableSensor) { // What is the sensor type - 0-Pressure Sensor, 1-PIR Sensor
   b64dc:	b510      	push	{r4, lr}
   b64de:	4604      	mov	r4, r0

  if (enableSensor) {
   b64e0:	b151      	cbz	r1, b64f8 <_Z13sensorControlib+0x1c>
    digitalWrite(MODULE_POWER_PIN,false);           // Enable or disable the sensor
   b64e2:	2100      	movs	r1, #0
   b64e4:	2011      	movs	r0, #17
   b64e6:	f005 fdcc 	bl	bc082 <digitalWrite>

    if (sensorType == 0) {                          // This is the pressure sensor and we are enabling it
   b64ea:	b95c      	cbnz	r4, b6504 <_Z13sensorControlib+0x28>
        digitalWrite(LED_POWER_PIN,HIGH);        // For the pressure sensor, this is how you activate it
   b64ec:	2101      	movs	r1, #1
    else {
        digitalWrite(LED_POWER_PIN,HIGH);        // Turns off the LED on the PIR sensor board
    }
  }

}
   b64ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(LED_POWER_PIN,LOW);         // Turns on the LED on the PIR sensor board
   b64f2:	2010      	movs	r0, #16
   b64f4:	f005 bdc5 	b.w	bc082 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,true);
   b64f8:	2101      	movs	r1, #1
   b64fa:	2011      	movs	r0, #17
   b64fc:	f005 fdc1 	bl	bc082 <digitalWrite>
    if (sensorType == 0) {                          // This is the pressure sensor and we are enabling it
   b6500:	2c00      	cmp	r4, #0
   b6502:	d1f3      	bne.n	b64ec <_Z13sensorControlib+0x10>
        digitalWrite(LED_POWER_PIN,LOW);         // Turns on the LED on the PIR sensor board
   b6504:	2100      	movs	r1, #0
   b6506:	e7f2      	b.n	b64ee <_Z13sensorControlib+0x12>

000b6508 <_Z18initializePowerCfgb>:


bool initializePowerCfg(bool enableCharging) {
   b6508:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Power Config");
   b650a:	491b      	ldr	r1, [pc, #108]	; (b6578 <_Z18initializePowerCfgb+0x70>)
bool initializePowerCfg(bool enableCharging) {
   b650c:	b091      	sub	sp, #68	; 0x44

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b650e:	2420      	movs	r4, #32
   b6510:	4605      	mov	r5, r0
    Log.info("Initializing Power Config");
   b6512:	481a      	ldr	r0, [pc, #104]	; (b657c <_Z18initializePowerCfgb+0x74>)
   b6514:	f7fd ff4c 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b6518:	4622      	mov	r2, r4
   b651a:	2100      	movs	r1, #0
   b651c:	4668      	mov	r0, sp
   b651e:	f007 fcbf 	bl	bdea0 <memset>
   b6522:	4622      	mov	r2, r4
   b6524:	2100      	movs	r1, #0
   b6526:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b652a:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b652e:	f007 fcb7 	bl	bdea0 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b6532:	2100      	movs	r1, #0
   b6534:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6538:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b653c:	f002 ff80 	bl	b9440 <system_power_management_set_config>
    const int maxCurrentFromPanel = 900;            // Not currently used (100,150,500,900,1200,2000 - will pick closest) (550mA for 3.5W Panel, 340 for 2W panel)
    SystemPowerConfiguration conf;
    System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

    if (!enableCharging) {
   b6540:	9b00      	ldr	r3, [sp, #0]
   b6542:	b95d      	cbnz	r5, b655c <_Z18initializePowerCfgb+0x54>
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b6544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   b6548:	2100      	movs	r1, #0
   b654a:	4668      	mov	r0, sp
   b654c:	9300      	str	r3, [sp, #0]
   b654e:	f002 ff77 	bl	b9440 <system_power_management_set_config>
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    }
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b6552:	3800      	subs	r0, #0
   b6554:	bf18      	it	ne
   b6556:	2001      	movne	r0, #1
   b6558:	b011      	add	sp, #68	; 0x44
   b655a:	bd30      	pop	{r4, r5, pc}
        conf_.vin_min_voltage = voltage;
   b655c:	f241 32d8 	movw	r2, #5080	; 0x13d8
   b6560:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.vin_max_current = current;
   b6564:	4a06      	ldr	r2, [pc, #24]	; (b6580 <_Z18initializePowerCfgb+0x78>)
   b6566:	9202      	str	r2, [sp, #8]
        conf_.termination_voltage = voltage;
   b6568:	f241 0270 	movw	r2, #4208	; 0x1070
   b656c:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.flags |= f.value();
   b6570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b6574:	e7e8      	b.n	b6548 <_Z18initializePowerCfgb+0x40>
   b6576:	bf00      	nop
   b6578:	000bedcd 	.word	0x000bedcd
   b657c:	2003e654 	.word	0x2003e654
   b6580:	03840384 	.word	0x03840384

000b6584 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b6584:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b6586:	6803      	ldr	r3, [r0, #0]
   b6588:	2b2f      	cmp	r3, #47	; 0x2f
{
   b658a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b658c:	d904      	bls.n	b6598 <nrf_gpio_pin_port_decode+0x14>
   b658e:	4a07      	ldr	r2, [pc, #28]	; (b65ac <nrf_gpio_pin_port_decode+0x28>)
   b6590:	4907      	ldr	r1, [pc, #28]	; (b65b0 <nrf_gpio_pin_port_decode+0x2c>)
   b6592:	200a      	movs	r0, #10
   b6594:	f002 feb4 	bl	b9300 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b6598:	6823      	ldr	r3, [r4, #0]
   b659a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b659c:	bf83      	ittte	hi
   b659e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b65a2:	4804      	ldrhi	r0, [pc, #16]	; (b65b4 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b65a4:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b65a6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b65aa:	bd10      	pop	{r4, pc}
   b65ac:	000b8f51 	.word	0x000b8f51
   b65b0:	000bee6f 	.word	0x000bee6f
   b65b4:	50000300 	.word	0x50000300

000b65b8 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b65b8:	ee07 0a90 	vmov	s15, r0
   b65bc:	ed9f 7a09 	vldr	s14, [pc, #36]	; b65e4 <_Z17tmp36TemperatureCi+0x2c>
   b65c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b65c4:	ee67 7a87 	vmul.f32	s15, s15, s14
   b65c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; b65e8 <_Z17tmp36TemperatureCi+0x30>
   b65cc:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b65d0:	eddf 7a06 	vldr	s15, [pc, #24]	; b65ec <_Z17tmp36TemperatureCi+0x34>
   b65d4:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b65d8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b65dc:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b65e0:	4770      	bx	lr
   b65e2:	bf00      	nop
   b65e4:	454e4000 	.word	0x454e4000
   b65e8:	457ff000 	.word	0x457ff000
   b65ec:	43fa0000 	.word	0x43fa0000

000b65f0 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b65f0:	b508      	push	{r3, lr}

  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b65f2:	f7ff fc83 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b65f6:	f7ff fd0a 	bl	b600e <_ZNK17currentStatusData17get_internalTempCEv>
   b65fa:	f7ff fc7f 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b65fe:	f7ff fd06 	bl	b600e <_ZNK17currentStatusData17get_internalTempCEv>
   b6602:	2825      	cmp	r0, #37	; 0x25
   b6604:	d909      	bls.n	b661a <_Z16isItSafeToChargev+0x2a>
    initializePowerCfg(false);                      // Disable charging if the temperature is outside of the safe range
   b6606:	2000      	movs	r0, #0
   b6608:	f7ff ff7e 	bl	b6508 <_Z18initializePowerCfgb>
    current.set_batteryState(1);                    // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b660c:	f7ff fc76 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b6610:	2101      	movs	r1, #1
   b6612:	f7ff fd4c 	bl	b60ae <_ZN17currentStatusData16set_batteryStateEh>
   b6616:	2000      	movs	r0, #0
  }
  else {
    initializePowerCfg(true);                       // Enable charging if the temperature is within the safe range
    return true;
  }
}
   b6618:	bd08      	pop	{r3, pc}
    initializePowerCfg(true);                       // Enable charging if the temperature is within the safe range
   b661a:	2001      	movs	r0, #1
   b661c:	f7ff ff74 	bl	b6508 <_Z18initializePowerCfgb>
    return true;
   b6620:	2001      	movs	r0, #1
   b6622:	e7f9      	b.n	b6618 <_Z16isItSafeToChargev+0x28>

000b6624 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b6624:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6626:	4d1b      	ldr	r5, [pc, #108]	; (b6694 <_Z17getSignalStrengthv+0x70>)
   b6628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b662a:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b662c:	ac10      	add	r4, sp, #64	; 0x40
   b662e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6634:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6638:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b663c:	4916      	ldr	r1, [pc, #88]	; (b6698 <_Z17getSignalStrengthv+0x74>)
   b663e:	a808      	add	r0, sp, #32
   b6640:	f003 f8a6 	bl	b9790 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6644:	a808      	add	r0, sp, #32
   b6646:	f003 f8e6 	bl	b9816 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b664a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b664c:	a808      	add	r0, sp, #32
   b664e:	f003 f91b 	bl	b9888 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b6652:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b6654:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6658:	f003 f946 	bl	b98e8 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b665c:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b665e:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6662:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6666:	f007 f801 	bl	bd66c <__aeabi_f2d>
   b666a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b666e:	4628      	mov	r0, r5
   b6670:	f006 fffc 	bl	bd66c <__aeabi_f2d>
   b6674:	e9cd 0100 	strd	r0, r1, [sp]
   b6678:	2110      	movs	r1, #16
   b667a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b667e:	4a07      	ldr	r2, [pc, #28]	; (b669c <_Z17getSignalStrengthv+0x78>)
   b6680:	eb0d 0001 	add.w	r0, sp, r1
   b6684:	f002 ffba 	bl	b95fc <snprintf>
  Log.info(signalStr);
   b6688:	4805      	ldr	r0, [pc, #20]	; (b66a0 <_Z17getSignalStrengthv+0x7c>)
   b668a:	a904      	add	r1, sp, #16
   b668c:	f7fd fe90 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
}
   b6690:	b01b      	add	sp, #108	; 0x6c
   b6692:	bd30      	pop	{r4, r5, pc}
   b6694:	000beef0 	.word	0x000beef0
   b6698:	2003e610 	.word	0x2003e610
   b669c:	000bee93 	.word	0x000bee93
   b66a0:	2003e654 	.word	0x2003e654

000b66a4 <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b66a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b66a6:	4e50      	ldr	r6, [pc, #320]	; (b67e8 <_Z11recordCountv+0x144>)
   b66a8:	4c50      	ldr	r4, [pc, #320]	; (b67ec <_Z11recordCountv+0x148>)
   b66aa:	7833      	ldrb	r3, [r6, #0]
   b66ac:	f3bf 8f5b 	dmb	ish
   b66b0:	f013 0f01 	tst.w	r3, #1
   b66b4:	b085      	sub	sp, #20
   b66b6:	d109      	bne.n	b66cc <_Z11recordCountv+0x28>
   b66b8:	4630      	mov	r0, r6
   b66ba:	f7fd fcff 	bl	b40bc <__cxa_guard_acquire>
   b66be:	b128      	cbz	r0, b66cc <_Z11recordCountv+0x28>
   b66c0:	f002 fc76 	bl	b8fb0 <HAL_Pin_Map>
   b66c4:	6020      	str	r0, [r4, #0]
   b66c6:	4630      	mov	r0, r6
   b66c8:	f7fd fcfd 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b66cc:	4b48      	ldr	r3, [pc, #288]	; (b67f0 <_Z11recordCountv+0x14c>)
   b66ce:	881d      	ldrh	r5, [r3, #0]
   b66d0:	6823      	ldr	r3, [r4, #0]
   b66d2:	012d      	lsls	r5, r5, #4
   b66d4:	5d5b      	ldrb	r3, [r3, r5]
   b66d6:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b66d8:	7833      	ldrb	r3, [r6, #0]
   b66da:	f3bf 8f5b 	dmb	ish
   b66de:	07d9      	lsls	r1, r3, #31
   b66e0:	d409      	bmi.n	b66f6 <_Z11recordCountv+0x52>
   b66e2:	4841      	ldr	r0, [pc, #260]	; (b67e8 <_Z11recordCountv+0x144>)
   b66e4:	f7fd fcea 	bl	b40bc <__cxa_guard_acquire>
   b66e8:	b128      	cbz	r0, b66f6 <_Z11recordCountv+0x52>
   b66ea:	f002 fc61 	bl	b8fb0 <HAL_Pin_Map>
   b66ee:	6020      	str	r0, [r4, #0]
   b66f0:	483d      	ldr	r0, [pc, #244]	; (b67e8 <_Z11recordCountv+0x144>)
   b66f2:	f7fd fce8 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b66f6:	6823      	ldr	r3, [r4, #0]
   b66f8:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b66fa:	a803      	add	r0, sp, #12
   b66fc:	785b      	ldrb	r3, [r3, #1]
   b66fe:	f003 031f 	and.w	r3, r3, #31
   b6702:	433b      	orrs	r3, r7
   b6704:	9303      	str	r3, [sp, #12]
   b6706:	f7ff ff3d 	bl	b6584 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b670a:	9a03      	ldr	r2, [sp, #12]
   b670c:	2301      	movs	r3, #1
   b670e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b6710:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b6714:	f7ff fbf2 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b6718:	4607      	mov	r7, r0
   b671a:	f005 faa2 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b671e:	4602      	mov	r2, r0
   b6720:	17c3      	asrs	r3, r0, #31
   b6722:	4638      	mov	r0, r7
   b6724:	f7ff fe24 	bl	b6370 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b6728:	f7ff fbe8 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b672c:	4607      	mov	r7, r0
   b672e:	f7ff fbe5 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b6732:	f7ff fd2d 	bl	b6190 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6736:	3001      	adds	r0, #1
   b6738:	b281      	uxth	r1, r0
   b673a:	4638      	mov	r0, r7
   b673c:	f7ff fd85 	bl	b624a <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b6740:	f7ff fbdc 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b6744:	4607      	mov	r7, r0
   b6746:	f7ff fbd9 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b674a:	f7ff fd55 	bl	b61f8 <_ZNK17currentStatusData14get_dailyCountEv>
   b674e:	3001      	adds	r0, #1
   b6750:	b281      	uxth	r1, r0
   b6752:	4638      	mov	r0, r7
   b6754:	f7ff fd7f 	bl	b6256 <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b6758:	f7ff fbd0 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b675c:	f7ff fd18 	bl	b6190 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6760:	9001      	str	r0, [sp, #4]
   b6762:	f7ff fbcb 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b6766:	f7ff fd47 	bl	b61f8 <_ZNK17currentStatusData14get_dailyCountEv>
   b676a:	9a01      	ldr	r2, [sp, #4]
   b676c:	4921      	ldr	r1, [pc, #132]	; (b67f4 <_Z11recordCountv+0x150>)
   b676e:	4603      	mov	r3, r0
   b6770:	4821      	ldr	r0, [pc, #132]	; (b67f8 <_Z11recordCountv+0x154>)
   b6772:	f7fd fe1d 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
  
  delay(500);
   b6776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b677a:	f002 ff9b 	bl	b96b4 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b677e:	7833      	ldrb	r3, [r6, #0]
   b6780:	f3bf 8f5b 	dmb	ish
   b6784:	07da      	lsls	r2, r3, #31
   b6786:	d409      	bmi.n	b679c <_Z11recordCountv+0xf8>
   b6788:	4817      	ldr	r0, [pc, #92]	; (b67e8 <_Z11recordCountv+0x144>)
   b678a:	f7fd fc97 	bl	b40bc <__cxa_guard_acquire>
   b678e:	b128      	cbz	r0, b679c <_Z11recordCountv+0xf8>
   b6790:	f002 fc0e 	bl	b8fb0 <HAL_Pin_Map>
   b6794:	6020      	str	r0, [r4, #0]
   b6796:	4814      	ldr	r0, [pc, #80]	; (b67e8 <_Z11recordCountv+0x144>)
   b6798:	f7fd fc95 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b679c:	6823      	ldr	r3, [r4, #0]
   b679e:	5d5b      	ldrb	r3, [r3, r5]
   b67a0:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b67a2:	7833      	ldrb	r3, [r6, #0]
   b67a4:	f3bf 8f5b 	dmb	ish
   b67a8:	07db      	lsls	r3, r3, #31
   b67aa:	d409      	bmi.n	b67c0 <_Z11recordCountv+0x11c>
   b67ac:	480e      	ldr	r0, [pc, #56]	; (b67e8 <_Z11recordCountv+0x144>)
   b67ae:	f7fd fc85 	bl	b40bc <__cxa_guard_acquire>
   b67b2:	b128      	cbz	r0, b67c0 <_Z11recordCountv+0x11c>
   b67b4:	f002 fbfc 	bl	b8fb0 <HAL_Pin_Map>
   b67b8:	6020      	str	r0, [r4, #0]
   b67ba:	480b      	ldr	r0, [pc, #44]	; (b67e8 <_Z11recordCountv+0x144>)
   b67bc:	f7fd fc83 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b67c0:	6823      	ldr	r3, [r4, #0]
   b67c2:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b67c4:	a803      	add	r0, sp, #12
   b67c6:	786b      	ldrb	r3, [r5, #1]
   b67c8:	f003 031f 	and.w	r3, r3, #31
   b67cc:	433b      	orrs	r3, r7
   b67ce:	9303      	str	r3, [sp, #12]
   b67d0:	f7ff fed8 	bl	b6584 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b67d4:	9b03      	ldr	r3, [sp, #12]
   b67d6:	2201      	movs	r2, #1
   b67d8:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b67dc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
}
   b67e0:	4610      	mov	r0, r2
   b67e2:	b005      	add	sp, #20
   b67e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b67e6:	bf00      	nop
   b67e8:	2003e4c8 	.word	0x2003e4c8
   b67ec:	2003e4cc 	.word	0x2003e4cc
   b67f0:	000bede8 	.word	0x000bede8
   b67f4:	000beeac 	.word	0x000beeac
   b67f8:	2003e654 	.word	0x2003e654

000b67fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b67fc:	b530      	push	{r4, r5, lr}
   b67fe:	b085      	sub	sp, #20
   b6800:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6802:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6804:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6806:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6808:	f002 fdbc 	bl	b9384 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b680c:	b990      	cbnz	r0, b6834 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b680e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6810:	b10c      	cbz	r4, b6816 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6812:	6923      	ldr	r3, [r4, #16]
   b6814:	b923      	cbnz	r3, b6820 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6816:	4a08      	ldr	r2, [pc, #32]	; (b6838 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6818:	4908      	ldr	r1, [pc, #32]	; (b683c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b681a:	200a      	movs	r0, #10
   b681c:	f002 fd70 	bl	b9300 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6820:	230c      	movs	r3, #12
   b6822:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6826:	2304      	movs	r3, #4
   b6828:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b682a:	aa01      	add	r2, sp, #4
   b682c:	6923      	ldr	r3, [r4, #16]
   b682e:	2101      	movs	r1, #1
   b6830:	4620      	mov	r0, r4
   b6832:	4798      	blx	r3
}
   b6834:	b005      	add	sp, #20
   b6836:	bd30      	pop	{r4, r5, pc}
   b6838:	000b8f51 	.word	0x000b8f51
   b683c:	000beec9 	.word	0x000beec9

000b6840 <_Z12batteryStatev>:
bool batteryState() {
   b6840:	b537      	push	{r0, r1, r2, r4, r5, lr}
  fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b6842:	4825      	ldr	r0, [pc, #148]	; (b68d8 <_Z12batteryStatev+0x98>)
   b6844:	4d25      	ldr	r5, [pc, #148]	; (b68dc <_Z12batteryStatev+0x9c>)
   b6846:	f003 f933 	bl	b9ab0 <_ZN9FuelGauge10quickStartEv>
   b684a:	f002 fb89 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b684e:	4604      	mov	r4, r0
   b6850:	f002 fb86 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b6854:	1b00      	subs	r0, r0, r4
   b6856:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b685a:	d205      	bcs.n	b6868 <_Z12batteryStatev+0x28>
		return HAL_Timer_Get_Milli_Seconds();
   b685c:	f002 fb80 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6860:	6028      	str	r0, [r5, #0]
    		spark_process();
   b6862:	f002 fe0b 	bl	b947c <spark_process>
    }
   b6866:	e7f3      	b.n	b6850 <_Z12batteryStatev+0x10>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6868:	f7ff fb48 	bl	b5efc <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b686c:	a901      	add	r1, sp, #4
   b686e:	4604      	mov	r4, r0
   b6870:	2003      	movs	r0, #3
   b6872:	f7ff ffc3 	bl	b67fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6876:	bb58      	cbnz	r0, b68d0 <_Z12batteryStatev+0x90>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6878:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b687c:	ee07 3a90 	vmov	s15, r3
   b6880:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6884:	ee17 0a90 	vmov	r0, s15
   b6888:	f006 fef0 	bl	bd66c <__aeabi_f2d>
   b688c:	ec41 0b10 	vmov	d0, r0, r1
   b6890:	4620      	mov	r0, r4
   b6892:	f7ff fb79 	bl	b5f88 <_ZN17currentStatusData17set_stateOfChargeEd>
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6896:	f7ff fb31 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b689a:	a901      	add	r1, sp, #4
   b689c:	4604      	mov	r4, r0
   b689e:	2007      	movs	r0, #7
   b68a0:	f7ff ffac 	bl	b67fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b68a4:	1e01      	subs	r1, r0, #0
        return val;
   b68a6:	bfa8      	it	ge
   b68a8:	9901      	ldrge	r1, [sp, #4]
   b68aa:	4620      	mov	r0, r4
   b68ac:	b2c9      	uxtb	r1, r1
   b68ae:	f7ff fbfe 	bl	b60ae <_ZN17currentStatusData16set_batteryStateEh>
  if (current.get_stateOfCharge() > 60) return true;
   b68b2:	f7ff fb23 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b68b6:	f7ff fb47 	bl	b5f48 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b68ba:	4b09      	ldr	r3, [pc, #36]	; (b68e0 <_Z12batteryStatev+0xa0>)
   b68bc:	ec51 0b10 	vmov	r0, r1, d0
   b68c0:	2200      	movs	r2, #0
   b68c2:	f007 f9bb 	bl	bdc3c <__aeabi_dcmpgt>
}
   b68c6:	3800      	subs	r0, #0
   b68c8:	bf18      	it	ne
   b68ca:	2001      	movne	r0, #1
   b68cc:	b003      	add	sp, #12
   b68ce:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   b68d0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b68d4:	e7d6      	b.n	b6884 <_Z12batteryStatev+0x44>
   b68d6:	bf00      	nop
   b68d8:	2003e4d0 	.word	0x2003e4d0
   b68dc:	2003e710 	.word	0x2003e710
   b68e0:	404e0000 	.word	0x404e0000

000b68e4 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b68e4:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b68e6:	f7ff fb09 	bl	b5efc <_ZN17currentStatusData8instanceEv>
   b68ea:	4b0f      	ldr	r3, [pc, #60]	; (b6928 <_Z16takeMeasurementsv+0x44>)
   b68ec:	4604      	mov	r4, r0
   b68ee:	8818      	ldrh	r0, [r3, #0]
   b68f0:	f005 fbf3 	bl	bc0da <analogRead>
   b68f4:	f7ff fe60 	bl	b65b8 <_Z17tmp36TemperatureCi>
   b68f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b68fc:	4620      	mov	r0, r4
   b68fe:	edcd 7a01 	vstr	s15, [sp, #4]
   b6902:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6906:	f7ff fbcc 	bl	b60a2 <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b690a:	f7ff ff99 	bl	b6840 <_Z12batteryStatev>
    isItSafeToCharge();
   b690e:	f7ff fe6f 	bl	b65f0 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b6912:	f7ff fa81 	bl	b5e18 <_ZN13sysStatusData8instanceEv>
   b6916:	f7ff fb66 	bl	b5fe6 <_ZNK13sysStatusData14get_nodeNumberEv>
   b691a:	b908      	cbnz	r0, b6920 <_Z16takeMeasurementsv+0x3c>
   b691c:	f7ff fe82 	bl	b6624 <_Z17getSignalStrengthv>
}
   b6920:	2001      	movs	r0, #1
   b6922:	b002      	add	sp, #8
   b6924:	bd10      	pop	{r4, pc}
   b6926:	bf00      	nop
   b6928:	000bedf4 	.word	0x000bedf4

000b692c <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b692c:	4801      	ldr	r0, [pc, #4]	; (b6934 <_GLOBAL__sub_I_batteryContext+0x8>)
   b692e:	2100      	movs	r1, #0
   b6930:	f003 b87a 	b.w	b9a28 <_ZN9FuelGaugeC1Eb>
   b6934:	2003e4d0 	.word	0x2003e4d0

000b6938 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6938:	4770      	bx	lr

000b693a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b693a:	b510      	push	{r4, lr}
}
   b693c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b693e:	4604      	mov	r4, r0
}
   b6940:	f7fd fbad 	bl	b409e <_ZdlPvj>
   b6944:	4620      	mov	r0, r4
   b6946:	bd10      	pop	{r4, pc}

000b6948 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6948:	b510      	push	{r4, lr}
   b694a:	4604      	mov	r4, r0
   b694c:	b08a      	sub	sp, #40	; 0x28
   b694e:	4608      	mov	r0, r1
    attr.flags = 0;
   b6950:	f04f 0c20 	mov.w	ip, #32
   b6954:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6956:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b695a:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b695e:	460b      	mov	r3, r1
   b6960:	aa02      	add	r2, sp, #8
   b6962:	6821      	ldr	r1, [r4, #0]
   b6964:	f002 fcdc 	bl	b9320 <log_message_v>
}
   b6968:	b00a      	add	sp, #40	; 0x28
   b696a:	bd10      	pop	{r4, pc}

000b696c <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b696c:	b40e      	push	{r1, r2, r3}
   b696e:	b503      	push	{r0, r1, lr}
   b6970:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6972:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6974:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6978:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b697a:	f7ff ffe5 	bl	b6948 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b697e:	b002      	add	sp, #8
   b6980:	f85d eb04 	ldr.w	lr, [sp], #4
   b6984:	b003      	add	sp, #12
   b6986:	4770      	bx	lr

000b6988 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6988:	b40e      	push	{r1, r2, r3}
   b698a:	b503      	push	{r0, r1, lr}
   b698c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b698e:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6990:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6994:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6996:	f7ff ffd7 	bl	b6948 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b699a:	b002      	add	sp, #8
   b699c:	f85d eb04 	ldr.w	lr, [sp], #4
   b69a0:	b003      	add	sp, #12
   b69a2:	4770      	bx	lr

000b69a4 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b69a4:	b510      	push	{r4, lr}
   b69a6:	7202      	strb	r2, [r0, #8]
   b69a8:	22ff      	movs	r2, #255	; 0xff
   b69aa:	8142      	strh	r2, [r0, #10]
   b69ac:	2200      	movs	r2, #0
   b69ae:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b69b2:	6142      	str	r2, [r0, #20]
   b69b4:	7602      	strb	r2, [r0, #24]
   b69b6:	61c2      	str	r2, [r0, #28]
    instance = this;
   b69b8:	4a02      	ldr	r2, [pc, #8]	; (b69c4 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b69ba:	4c03      	ldr	r4, [pc, #12]	; (b69c8 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b69bc:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b69be:	e9c0 4100 	strd	r4, r1, [r0]
}
   b69c2:	bd10      	pop	{r4, pc}
   b69c4:	2003e4dc 	.word	0x2003e4dc
   b69c8:	000bf168 	.word	0x000bf168

000b69cc <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b69cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b69d0:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b69d4:	4604      	mov	r4, r0
   b69d6:	4689      	mov	r9, r1
   b69d8:	4616      	mov	r6, r2
   b69da:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b69dc:	f1b8 0f00 	cmp.w	r8, #0
   b69e0:	d002      	beq.n	b69e8 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b69e2:	6840      	ldr	r0, [r0, #4]
   b69e4:	f003 f90a 	bl	b9bfc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b69e8:	7a21      	ldrb	r1, [r4, #8]
   b69ea:	6860      	ldr	r0, [r4, #4]
   b69ec:	f003 f8e3 	bl	b9bb6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b69f0:	6860      	ldr	r0, [r4, #4]
   b69f2:	6803      	ldr	r3, [r0, #0]
   b69f4:	4649      	mov	r1, r9
   b69f6:	689b      	ldr	r3, [r3, #8]
   b69f8:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b69fa:	6860      	ldr	r0, [r4, #4]
   b69fc:	2100      	movs	r1, #0
   b69fe:	f003 f8f9 	bl	b9bf4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6a02:	4605      	mov	r5, r0
   b6a04:	bb00      	cbnz	r0, b6a48 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6a06:	2301      	movs	r3, #1
   b6a08:	7a21      	ldrb	r1, [r4, #8]
   b6a0a:	6860      	ldr	r0, [r4, #4]
   b6a0c:	463a      	mov	r2, r7
   b6a0e:	f003 f8c0 	bl	b9b92 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6a12:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6a14:	4603      	mov	r3, r0
        if (count == num) {
   b6a16:	d109      	bne.n	b6a2c <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6a18:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6a1a:	42be      	cmp	r6, r7
   b6a1c:	d01c      	beq.n	b6a58 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6a1e:	6860      	ldr	r0, [r4, #4]
   b6a20:	6803      	ldr	r3, [r0, #0]
   b6a22:	695b      	ldr	r3, [r3, #20]
   b6a24:	4798      	blx	r3
   b6a26:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6a2a:	e7f6      	b.n	b6a1a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6a2c:	490b      	ldr	r1, [pc, #44]	; (b6a5c <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6a2e:	480c      	ldr	r0, [pc, #48]	; (b6a60 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6a30:	464a      	mov	r2, r9
   b6a32:	f7ff ff9b 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6a36:	f1b8 0f00 	cmp.w	r8, #0
   b6a3a:	d002      	beq.n	b6a42 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6a3c:	6860      	ldr	r0, [r4, #4]
   b6a3e:	f003 f8e6 	bl	b9c0e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b6a42:	4628      	mov	r0, r5
   b6a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6a48:	4603      	mov	r3, r0
   b6a4a:	4906      	ldr	r1, [pc, #24]	; (b6a64 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6a4c:	4804      	ldr	r0, [pc, #16]	; (b6a60 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6a4e:	464a      	mov	r2, r9
   b6a50:	f7ff ff8c 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6a54:	2500      	movs	r5, #0
   b6a56:	e7ee      	b.n	b6a36 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6a58:	2501      	movs	r5, #1
   b6a5a:	e7ec      	b.n	b6a36 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6a5c:	000bef18 	.word	0x000bef18
   b6a60:	2003e4d8 	.word	0x2003e4d8
   b6a64:	000bef3d 	.word	0x000bef3d

000b6a68 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6a68:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6a6a:	9300      	str	r3, [sp, #0]
   b6a6c:	2301      	movs	r3, #1
   b6a6e:	f7ff ffad 	bl	b69cc <_ZN6AB180513readRegistersEhPhjb>
}
   b6a72:	b003      	add	sp, #12
   b6a74:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a78 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6a7a:	8943      	ldrh	r3, [r0, #10]
   b6a7c:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6a7e:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6a80:	d010      	beq.n	b6aa4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6a82:	4e19      	ldr	r6, [pc, #100]	; (b6ae8 <_ZN6AB180510detectChipEv+0x70>)
   b6a84:	4d19      	ldr	r5, [pc, #100]	; (b6aec <_ZN6AB180510detectChipEv+0x74>)
   b6a86:	f002 fa6b 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6a8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6a8e:	d209      	bcs.n	b6aa4 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6a90:	8960      	ldrh	r0, [r4, #10]
   b6a92:	f005 fb0f 	bl	bc0b4 <digitalRead>
   b6a96:	2801      	cmp	r0, #1
   b6a98:	d004      	beq.n	b6aa4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6a9a:	4631      	mov	r1, r6
   b6a9c:	4628      	mov	r0, r5
   b6a9e:	f7fd fc87 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b6aa2:	e7f0      	b.n	b6a86 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6aa4:	2301      	movs	r3, #1
   b6aa6:	f10d 0207 	add.w	r2, sp, #7
   b6aaa:	2128      	movs	r1, #40	; 0x28
   b6aac:	4620      	mov	r0, r4
   b6aae:	f7ff ffdb 	bl	b6a68 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6ab2:	b930      	cbnz	r0, b6ac2 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6ab4:	480d      	ldr	r0, [pc, #52]	; (b6aec <_ZN6AB180510detectChipEv+0x74>)
   b6ab6:	490e      	ldr	r1, [pc, #56]	; (b6af0 <_ZN6AB180510detectChipEv+0x78>)
   b6ab8:	f7fd fc7a 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b6abc:	2000      	movs	r0, #0
}
   b6abe:	b002      	add	sp, #8
   b6ac0:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6ac6:	2b18      	cmp	r3, #24
   b6ac8:	d1f4      	bne.n	b6ab4 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6aca:	2301      	movs	r3, #1
   b6acc:	f10d 0207 	add.w	r2, sp, #7
   b6ad0:	2129      	movs	r1, #41	; 0x29
   b6ad2:	4620      	mov	r0, r4
   b6ad4:	f7ff ffc8 	bl	b6a68 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6ad8:	2800      	cmp	r0, #0
   b6ada:	d0eb      	beq.n	b6ab4 <_ZN6AB180510detectChipEv+0x3c>
   b6adc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6ae0:	2b05      	cmp	r3, #5
   b6ae2:	d1e7      	bne.n	b6ab4 <_ZN6AB180510detectChipEv+0x3c>
   b6ae4:	e7eb      	b.n	b6abe <_ZN6AB180510detectChipEv+0x46>
   b6ae6:	bf00      	nop
   b6ae8:	000bef61 	.word	0x000bef61
   b6aec:	2003e4d8 	.word	0x2003e4d8
   b6af0:	000bef76 	.word	0x000bef76

000b6af4 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6af4:	b507      	push	{r0, r1, r2, lr}
   b6af6:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6af8:	2200      	movs	r2, #0
   b6afa:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6afe:	f10d 0207 	add.w	r2, sp, #7
   b6b02:	f7ff ffb1 	bl	b6a68 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6b06:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6b0a:	b003      	add	sp, #12
   b6b0c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b10 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b14:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6b18:	4604      	mov	r4, r0
   b6b1a:	460f      	mov	r7, r1
   b6b1c:	4615      	mov	r5, r2
   b6b1e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6b20:	f1b8 0f00 	cmp.w	r8, #0
   b6b24:	d002      	beq.n	b6b2c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6b26:	6840      	ldr	r0, [r0, #4]
   b6b28:	f003 f868 	bl	b9bfc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6b2c:	7a21      	ldrb	r1, [r4, #8]
   b6b2e:	6860      	ldr	r0, [r4, #4]
   b6b30:	f003 f841 	bl	b9bb6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6b34:	6860      	ldr	r0, [r4, #4]
   b6b36:	6803      	ldr	r3, [r0, #0]
   b6b38:	4639      	mov	r1, r7
   b6b3a:	689b      	ldr	r3, [r3, #8]
   b6b3c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6b3e:	442e      	add	r6, r5
   b6b40:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6b42:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6b44:	d005      	beq.n	b6b52 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6b46:	6803      	ldr	r3, [r0, #0]
   b6b48:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6b4c:	689b      	ldr	r3, [r3, #8]
   b6b4e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6b50:	e7f6      	b.n	b6b40 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6b52:	2101      	movs	r1, #1
   b6b54:	f003 f84e 	bl	b9bf4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6b58:	4603      	mov	r3, r0
   b6b5a:	b170      	cbz	r0, b6b7a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6b5c:	4908      	ldr	r1, [pc, #32]	; (b6b80 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6b5e:	4809      	ldr	r0, [pc, #36]	; (b6b84 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6b60:	463a      	mov	r2, r7
   b6b62:	f7ff ff03 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6b66:	2500      	movs	r5, #0
    }

    if (lock) {
   b6b68:	f1b8 0f00 	cmp.w	r8, #0
   b6b6c:	d002      	beq.n	b6b74 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6b6e:	6860      	ldr	r0, [r4, #4]
   b6b70:	f003 f84d 	bl	b9c0e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6b74:	4628      	mov	r0, r5
   b6b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6b7a:	2501      	movs	r5, #1
   b6b7c:	e7f4      	b.n	b6b68 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6b7e:	bf00      	nop
   b6b80:	000bef83 	.word	0x000bef83
   b6b84:	2003e4d8 	.word	0x2003e4d8

000b6b88 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6b8a:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6b8e:	9300      	str	r3, [sp, #0]
   b6b90:	f10d 020f 	add.w	r2, sp, #15
   b6b94:	2301      	movs	r3, #1
   b6b96:	f7ff ffbb 	bl	b6b10 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6b9a:	b005      	add	sp, #20
   b6b9c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ba0 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6ba2:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6ba4:	460c      	mov	r4, r1
   b6ba6:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6ba8:	491a      	ldr	r1, [pc, #104]	; (b6c14 <_ZN6AB18056setWDTEi+0x74>)
   b6baa:	481b      	ldr	r0, [pc, #108]	; (b6c18 <_ZN6AB18056setWDTEi+0x78>)
   b6bac:	f7fd fc00 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6bb0:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6bb2:	bfb8      	it	lt
   b6bb4:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6bb6:	b97c      	cbnz	r4, b6bd8 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6bb8:	2301      	movs	r3, #1
   b6bba:	4622      	mov	r2, r4
   b6bbc:	211b      	movs	r1, #27
   b6bbe:	4628      	mov	r0, r5
   b6bc0:	f7ff ffe2 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6bc4:	4915      	ldr	r1, [pc, #84]	; (b6c1c <_ZN6AB18056setWDTEi+0x7c>)
   b6bc6:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6bc8:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6bca:	4813      	ldr	r0, [pc, #76]	; (b6c18 <_ZN6AB18056setWDTEi+0x78>)
   b6bcc:	f7ff fedc 	bl	b6988 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6bd0:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6bd2:	616c      	str	r4, [r5, #20]
}
   b6bd4:	4630      	mov	r0, r6
   b6bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6bd8:	2c03      	cmp	r4, #3
   b6bda:	dd19      	ble.n	b6c10 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6bdc:	10a7      	asrs	r7, r4, #2
   b6bde:	2f1f      	cmp	r7, #31
   b6be0:	bfa8      	it	ge
   b6be2:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6be4:	00ba      	lsls	r2, r7, #2
   b6be6:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6bea:	2301      	movs	r3, #1
   b6bec:	b2d2      	uxtb	r2, r2
   b6bee:	211b      	movs	r1, #27
   b6bf0:	4628      	mov	r0, r5
   b6bf2:	f7ff ffc9 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6bf6:	463a      	mov	r2, r7
   b6bf8:	4603      	mov	r3, r0
   b6bfa:	4909      	ldr	r1, [pc, #36]	; (b6c20 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6bfc:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6bfe:	4806      	ldr	r0, [pc, #24]	; (b6c18 <_ZN6AB18056setWDTEi+0x78>)
   b6c00:	f7ff fec2 	bl	b6988 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6c04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6c08:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6c0a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6c0c:	616f      	str	r7, [r5, #20]
   b6c0e:	e7e1      	b.n	b6bd4 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6c10:	2701      	movs	r7, #1
   b6c12:	e7e7      	b.n	b6be4 <_ZN6AB18056setWDTEi+0x44>
   b6c14:	000befa8 	.word	0x000befa8
   b6c18:	2003e4d8 	.word	0x2003e4d8
   b6c1c:	000befb2 	.word	0x000befb2
   b6c20:	000befce 	.word	0x000befce

000b6c24 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6c24:	4b06      	ldr	r3, [pc, #24]	; (b6c40 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6c26:	681a      	ldr	r2, [r3, #0]
   b6c28:	b14a      	cbz	r2, b6c3e <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6c2a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6c2e:	430b      	orrs	r3, r1
   b6c30:	d105      	bne.n	b6c3e <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6c32:	68d3      	ldr	r3, [r2, #12]
   b6c34:	b11b      	cbz	r3, b6c3e <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6c36:	2100      	movs	r1, #0
   b6c38:	4610      	mov	r0, r2
   b6c3a:	f7ff bfb1 	b.w	b6ba0 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6c3e:	4770      	bx	lr
   b6c40:	2003e4dc 	.word	0x2003e4dc

000b6c44 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6c44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6c48:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6c4c:	4605      	mov	r5, r0
   b6c4e:	4616      	mov	r6, r2
   b6c50:	461f      	mov	r7, r3
    if (lock) {
   b6c52:	f1b8 0f00 	cmp.w	r8, #0
   b6c56:	d004      	beq.n	b6c62 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6c58:	6840      	ldr	r0, [r0, #4]
   b6c5a:	9101      	str	r1, [sp, #4]
   b6c5c:	f002 ffce 	bl	b9bfc <_ZN7TwoWire4lockEv>
   b6c60:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6c62:	9101      	str	r1, [sp, #4]
   b6c64:	2300      	movs	r3, #0
   b6c66:	f10d 020f 	add.w	r2, sp, #15
   b6c6a:	4628      	mov	r0, r5
   b6c6c:	f7ff fefc 	bl	b6a68 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6c70:	4604      	mov	r4, r0
   b6c72:	b160      	cbz	r0, b6c8e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6c74:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6c78:	ea03 0206 	and.w	r2, r3, r6
   b6c7c:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6c7e:	4293      	cmp	r3, r2
   b6c80:	d005      	beq.n	b6c8e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6c82:	9901      	ldr	r1, [sp, #4]
   b6c84:	2300      	movs	r3, #0
   b6c86:	4628      	mov	r0, r5
   b6c88:	f7ff ff7e 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
   b6c8c:	4604      	mov	r4, r0
    if (lock) {
   b6c8e:	f1b8 0f00 	cmp.w	r8, #0
   b6c92:	d002      	beq.n	b6c9a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6c94:	6868      	ldr	r0, [r5, #4]
   b6c96:	f002 ffba 	bl	b9c0e <_ZN7TwoWire6unlockEv>
}
   b6c9a:	4620      	mov	r0, r4
   b6c9c:	b004      	add	sp, #16
   b6c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6ca2 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6ca2:	b513      	push	{r0, r1, r4, lr}
   b6ca4:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6ca6:	f10d 0207 	add.w	r2, sp, #7
   b6caa:	f7ff fedd 	bl	b6a68 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6cae:	b128      	cbz	r0, b6cbc <_ZN6AB180510isBitClearEhhb+0x1a>
   b6cb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6cb4:	421c      	tst	r4, r3
   b6cb6:	bf0c      	ite	eq
   b6cb8:	2001      	moveq	r0, #1
   b6cba:	2000      	movne	r0, #0
}
   b6cbc:	b002      	add	sp, #8
   b6cbe:	bd10      	pop	{r4, pc}

000b6cc0 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6cc0:	b513      	push	{r0, r1, r4, lr}
   b6cc2:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6cc4:	f10d 0207 	add.w	r2, sp, #7
   b6cc8:	f7ff fece 	bl	b6a68 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6ccc:	b128      	cbz	r0, b6cda <_ZN6AB18058isBitSetEhhb+0x1a>
   b6cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6cd2:	421c      	tst	r4, r3
   b6cd4:	bf14      	ite	ne
   b6cd6:	2001      	movne	r0, #1
   b6cd8:	2000      	moveq	r0, #0
}
   b6cda:	b002      	add	sp, #8
   b6cdc:	bd10      	pop	{r4, pc}

000b6cde <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6cde:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6ce0:	43d2      	mvns	r2, r2
   b6ce2:	9300      	str	r3, [sp, #0]
   b6ce4:	b2d2      	uxtb	r2, r2
   b6ce6:	2300      	movs	r3, #0
   b6ce8:	f7ff ffac 	bl	b6c44 <_ZN6AB180512maskRegisterEhhhb>
}
   b6cec:	b003      	add	sp, #12
   b6cee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6cf4 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6cf6:	2301      	movs	r3, #1
   b6cf8:	f10d 0207 	add.w	r2, sp, #7
   b6cfc:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6cfe:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6d00:	f7ff feb2 	bl	b6a68 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6d04:	4605      	mov	r5, r0
   b6d06:	b938      	cbnz	r0, b6d18 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6d08:	491e      	ldr	r1, [pc, #120]	; (b6d84 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6d0a:	481f      	ldr	r0, [pc, #124]	; (b6d88 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6d0c:	22ad      	movs	r2, #173	; 0xad
   b6d0e:	f7ff fe2d 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
}
   b6d12:	4628      	mov	r0, r5
   b6d14:	b003      	add	sp, #12
   b6d16:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6d18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6d1c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6d20:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6d24:	d00b      	beq.n	b6d3e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6d26:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6d28:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6d2a:	210f      	movs	r1, #15
   b6d2c:	4620      	mov	r0, r4
   b6d2e:	f7ff ffd6 	bl	b6cde <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b6d32:	4a16      	ldr	r2, [pc, #88]	; (b6d8c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6d34:	4916      	ldr	r1, [pc, #88]	; (b6d90 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6d36:	4814      	ldr	r0, [pc, #80]	; (b6d88 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6d38:	f7fd fb3a 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b6d3c:	e7e9      	b.n	b6d12 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6d3e:	2208      	movs	r2, #8
   b6d40:	2117      	movs	r1, #23
   b6d42:	4620      	mov	r0, r4
   b6d44:	f7ff ffbc 	bl	b6cc0 <_ZN6AB18058isBitSetEhhb>
   b6d48:	b118      	cbz	r0, b6d52 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6d4a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6d4c:	4a11      	ldr	r2, [pc, #68]	; (b6d94 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6d4e:	61e3      	str	r3, [r4, #28]
   b6d50:	e7f0      	b.n	b6d34 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6d52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6d56:	071a      	lsls	r2, r3, #28
   b6d58:	d509      	bpl.n	b6d6e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6d5a:	2303      	movs	r3, #3
   b6d5c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6d5e:	2208      	movs	r2, #8
   b6d60:	2301      	movs	r3, #1
   b6d62:	210f      	movs	r1, #15
   b6d64:	4620      	mov	r0, r4
   b6d66:	f7ff ffba 	bl	b6cde <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6d6a:	4a0b      	ldr	r2, [pc, #44]	; (b6d98 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6d6c:	e7e2      	b.n	b6d34 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6d6e:	075b      	lsls	r3, r3, #29
   b6d70:	d5cf      	bpl.n	b6d12 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6d72:	2204      	movs	r2, #4
   b6d74:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6d76:	2301      	movs	r3, #1
   b6d78:	210f      	movs	r1, #15
   b6d7a:	4620      	mov	r0, r4
   b6d7c:	f7ff ffaf 	bl	b6cde <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6d80:	4a06      	ldr	r2, [pc, #24]	; (b6d9c <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6d82:	e7d7      	b.n	b6d34 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6d84:	000bf021 	.word	0x000bf021
   b6d88:	2003e4d8 	.word	0x2003e4d8
   b6d8c:	000beff2 	.word	0x000beff2
   b6d90:	000bf040 	.word	0x000bf040
   b6d94:	000beffb 	.word	0x000beffb
   b6d98:	000bf00b 	.word	0x000bf00b
   b6d9c:	000bf01b 	.word	0x000bf01b

000b6da0 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6da0:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6da2:	9300      	str	r3, [sp, #0]
   b6da4:	4613      	mov	r3, r2
   b6da6:	22ff      	movs	r2, #255	; 0xff
   b6da8:	f7ff ff4c 	bl	b6c44 <_ZN6AB180512maskRegisterEhhhb>
}
   b6dac:	b003      	add	sp, #12
   b6dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6db4 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6db6:	460f      	mov	r7, r1
   b6db8:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6dba:	2301      	movs	r3, #1
   b6dbc:	2200      	movs	r2, #0
   b6dbe:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6dc0:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6dc2:	f7ff fee1 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6dc6:	4604      	mov	r4, r0
   b6dc8:	b938      	cbnz	r0, b6dda <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6dca:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6dce:	491f      	ldr	r1, [pc, #124]	; (b6e4c <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6dd0:	481f      	ldr	r0, [pc, #124]	; (b6e50 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6dd2:	f7ff fdcb 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
}
   b6dd6:	4620      	mov	r0, r4
   b6dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6dda:	2301      	movs	r3, #1
   b6ddc:	2223      	movs	r2, #35	; 0x23
   b6dde:	2118      	movs	r1, #24
   b6de0:	4628      	mov	r0, r5
   b6de2:	f7ff fed1 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6de6:	4604      	mov	r4, r0
   b6de8:	b910      	cbnz	r0, b6df0 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6dea:	f240 229b 	movw	r2, #667	; 0x29b
   b6dee:	e7ee      	b.n	b6dce <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6df0:	2fff      	cmp	r7, #255	; 0xff
   b6df2:	bfa8      	it	ge
   b6df4:	27ff      	movge	r7, #255	; 0xff
   b6df6:	2f01      	cmp	r7, #1
   b6df8:	bfb8      	it	lt
   b6dfa:	2701      	movlt	r7, #1
   b6dfc:	2301      	movs	r3, #1
   b6dfe:	b2fa      	uxtb	r2, r7
   b6e00:	2119      	movs	r1, #25
   b6e02:	4628      	mov	r0, r5
   b6e04:	f7ff fec0 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6e08:	4604      	mov	r4, r0
   b6e0a:	b910      	cbnz	r0, b6e12 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6e0c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6e10:	e7dd      	b.n	b6dce <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b6e12:	2301      	movs	r3, #1
   b6e14:	2208      	movs	r2, #8
   b6e16:	2112      	movs	r1, #18
   b6e18:	4628      	mov	r0, r5
   b6e1a:	f7ff ffc1 	bl	b6da0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6e1e:	4604      	mov	r4, r0
   b6e20:	b910      	cbnz	r0, b6e28 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b6e22:	f240 22af 	movw	r2, #687	; 0x2af
   b6e26:	e7d2      	b.n	b6dce <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6e28:	2e00      	cmp	r6, #0
   b6e2a:	bf14      	ite	ne
   b6e2c:	2203      	movne	r2, #3
   b6e2e:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6e30:	2301      	movs	r3, #1
   b6e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6e36:	2118      	movs	r1, #24
   b6e38:	4628      	mov	r0, r5
   b6e3a:	f7ff fea5 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6e3e:	4604      	mov	r4, r0
   b6e40:	2800      	cmp	r0, #0
   b6e42:	d1c8      	bne.n	b6dd6 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6e44:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6e48:	e7c1      	b.n	b6dce <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6e4a:	bf00      	nop
   b6e4c:	000bf051 	.word	0x000bf051
   b6e50:	2003e4d8 	.word	0x2003e4d8

000b6e54 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6e58:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6e5a:	4605      	mov	r5, r0
   b6e5c:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6e5e:	484f      	ldr	r0, [pc, #316]	; (b6f9c <_ZN6AB180513deepPowerDownEi+0x148>)
   b6e60:	494f      	ldr	r1, [pc, #316]	; (b6fa0 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6e62:	f7fd faa5 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b6e66:	2100      	movs	r1, #0
   b6e68:	4628      	mov	r0, r5
   b6e6a:	f7ff fe99 	bl	b6ba0 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6e6e:	4604      	mov	r4, r0
   b6e70:	b948      	cbnz	r0, b6e86 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6e72:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6e76:	494b      	ldr	r1, [pc, #300]	; (b6fa4 <_ZN6AB180513deepPowerDownEi+0x150>)
   b6e78:	4848      	ldr	r0, [pc, #288]	; (b6f9c <_ZN6AB180513deepPowerDownEi+0x148>)
   b6e7a:	f7ff fd77 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
}
   b6e7e:	4620      	mov	r0, r4
   b6e80:	b003      	add	sp, #12
   b6e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b6e86:	2301      	movs	r3, #1
   b6e88:	461a      	mov	r2, r3
   b6e8a:	2130      	movs	r1, #48	; 0x30
   b6e8c:	4628      	mov	r0, r5
   b6e8e:	f7ff ff87 	bl	b6da0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6e92:	4604      	mov	r4, r0
   b6e94:	b910      	cbnz	r0, b6e9c <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b6e96:	f240 2205 	movw	r2, #517	; 0x205
   b6e9a:	e7ec      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6e9c:	2210      	movs	r2, #16
   b6e9e:	2301      	movs	r3, #1
   b6ea0:	4611      	mov	r1, r2
   b6ea2:	4628      	mov	r0, r5
   b6ea4:	f7ff ff1b 	bl	b6cde <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b6ea8:	4604      	mov	r4, r0
   b6eaa:	b910      	cbnz	r0, b6eb2 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6eac:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6eb0:	e7e1      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6eb2:	2301      	movs	r3, #1
   b6eb4:	2226      	movs	r2, #38	; 0x26
   b6eb6:	2113      	movs	r1, #19
   b6eb8:	4628      	mov	r0, r5
   b6eba:	f7ff fe65 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6ebe:	4604      	mov	r4, r0
   b6ec0:	b910      	cbnz	r0, b6ec8 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6ec2:	f240 2213 	movw	r2, #531	; 0x213
   b6ec6:	e7d6      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6ec8:	2601      	movs	r6, #1
   b6eca:	9600      	str	r6, [sp, #0]
   b6ecc:	4633      	mov	r3, r6
   b6ece:	22fc      	movs	r2, #252	; 0xfc
   b6ed0:	2111      	movs	r1, #17
   b6ed2:	4628      	mov	r0, r5
   b6ed4:	f7ff feb6 	bl	b6c44 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6ed8:	4604      	mov	r4, r0
   b6eda:	b910      	cbnz	r0, b6ee2 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6edc:	f240 221b 	movw	r2, #539	; 0x21b
   b6ee0:	e7c9      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6ee2:	2200      	movs	r2, #0
   b6ee4:	4639      	mov	r1, r7
   b6ee6:	4628      	mov	r0, r5
   b6ee8:	f7ff ff64 	bl	b6db4 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6eec:	4604      	mov	r4, r0
   b6eee:	b910      	cbnz	r0, b6ef6 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6ef0:	f240 2222 	movw	r2, #546	; 0x222
   b6ef4:	e7bf      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6ef6:	9600      	str	r6, [sp, #0]
   b6ef8:	2302      	movs	r3, #2
   b6efa:	2277      	movs	r2, #119	; 0x77
   b6efc:	2110      	movs	r1, #16
   b6efe:	4628      	mov	r0, r5
   b6f00:	f7ff fea0 	bl	b6c44 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6f04:	4604      	mov	r4, r0
   b6f06:	b910      	cbnz	r0, b6f0e <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6f08:	f240 222b 	movw	r2, #555	; 0x22b
   b6f0c:	e7b3      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6f0e:	4633      	mov	r3, r6
   b6f10:	2204      	movs	r2, #4
   b6f12:	211c      	movs	r1, #28
   b6f14:	4628      	mov	r0, r5
   b6f16:	f7ff ff43 	bl	b6da0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6f1a:	4604      	mov	r4, r0
   b6f1c:	b910      	cbnz	r0, b6f24 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6f1e:	f240 2232 	movw	r2, #562	; 0x232
   b6f22:	e7a8      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6f24:	9600      	str	r6, [sp, #0]
   b6f26:	2318      	movs	r3, #24
   b6f28:	22e3      	movs	r2, #227	; 0xe3
   b6f2a:	2111      	movs	r1, #17
   b6f2c:	4628      	mov	r0, r5
   b6f2e:	f7ff fe89 	bl	b6c44 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6f32:	4604      	mov	r4, r0
   b6f34:	b910      	cbnz	r0, b6f3c <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6f36:	f240 2239 	movw	r2, #569	; 0x239
   b6f3a:	e79c      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6f3c:	4633      	mov	r3, r6
   b6f3e:	22c0      	movs	r2, #192	; 0xc0
   b6f40:	2117      	movs	r1, #23
   b6f42:	4628      	mov	r0, r5
   b6f44:	f7ff fe20 	bl	b6b88 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6f48:	4604      	mov	r4, r0
   b6f4a:	b910      	cbnz	r0, b6f52 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6f4c:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6f50:	e791      	b.n	b6e76 <_ZN6AB180513deepPowerDownEi+0x22>
   b6f52:	f002 f805 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6f56:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6fac <_ZN6AB180513deepPowerDownEi+0x158>
   b6f5a:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6f9c <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6f5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6f62:	4606      	mov	r6, r0
   b6f64:	434f      	muls	r7, r1
   b6f66:	f001 fffb 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b6f6a:	1b80      	subs	r0, r0, r6
   b6f6c:	42b8      	cmp	r0, r7
   b6f6e:	d20e      	bcs.n	b6f8e <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6f70:	2201      	movs	r2, #1
   b6f72:	2117      	movs	r1, #23
   b6f74:	4628      	mov	r0, r5
   b6f76:	f7ff fdbd 	bl	b6af4 <_ZN6AB180512readRegisterEhb>
   b6f7a:	4649      	mov	r1, r9
   b6f7c:	4602      	mov	r2, r0
   b6f7e:	4640      	mov	r0, r8
   b6f80:	f7fd fa16 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6f88:	f002 fb94 	bl	b96b4 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6f8c:	e7eb      	b.n	b6f66 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6f8e:	4906      	ldr	r1, [pc, #24]	; (b6fa8 <_ZN6AB180513deepPowerDownEi+0x154>)
   b6f90:	4802      	ldr	r0, [pc, #8]	; (b6f9c <_ZN6AB180513deepPowerDownEi+0x148>)
   b6f92:	f7ff fceb 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6f96:	f004 fc82 	bl	bb89e <_ZN11SystemClass5resetEv>
    return true;
   b6f9a:	e770      	b.n	b6e7e <_ZN6AB180513deepPowerDownEi+0x2a>
   b6f9c:	2003e4d8 	.word	0x2003e4d8
   b6fa0:	000bf07c 	.word	0x000bf07c
   b6fa4:	000bf071 	.word	0x000bf071
   b6fa8:	000bf0a2 	.word	0x000bf0a2
   b6fac:	000bf08d 	.word	0x000bf08d

000b6fb0 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6fb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6fb4:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6fb8:	4605      	mov	r5, r0
   b6fba:	460c      	mov	r4, r1
   b6fbc:	4691      	mov	r9, r2
   b6fbe:	461f      	mov	r7, r3
    if (lock) {
   b6fc0:	f1ba 0f00 	cmp.w	sl, #0
   b6fc4:	d002      	beq.n	b6fcc <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6fc6:	6840      	ldr	r0, [r0, #4]
   b6fc8:	f002 fe18 	bl	b9bfc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6fcc:	b307      	cbz	r7, b7010 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6fce:	2f20      	cmp	r7, #32
   b6fd0:	463e      	mov	r6, r7
   b6fd2:	bf28      	it	cs
   b6fd4:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6fd6:	2c7f      	cmp	r4, #127	; 0x7f
   b6fd8:	d826      	bhi.n	b7028 <_ZN6AB18057readRamEjPhjb+0x78>
   b6fda:	1933      	adds	r3, r6, r4
   b6fdc:	2b80      	cmp	r3, #128	; 0x80
   b6fde:	d901      	bls.n	b6fe4 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6fe0:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6fe4:	2301      	movs	r3, #1
   b6fe6:	2204      	movs	r2, #4
   b6fe8:	213f      	movs	r1, #63	; 0x3f
   b6fea:	4628      	mov	r0, r5
   b6fec:	f7ff fe77 	bl	b6cde <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6ff0:	2300      	movs	r3, #0
   b6ff2:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6ff6:	9300      	str	r3, [sp, #0]
   b6ff8:	464a      	mov	r2, r9
   b6ffa:	4633      	mov	r3, r6
   b6ffc:	b2c9      	uxtb	r1, r1
   b6ffe:	4628      	mov	r0, r5
   b7000:	f7ff fce4 	bl	b69cc <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b7004:	4680      	mov	r8, r0
   b7006:	b128      	cbz	r0, b7014 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b7008:	4434      	add	r4, r6
        dataLen -= count;
   b700a:	1bbf      	subs	r7, r7, r6
        data += count;
   b700c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b700e:	e7dd      	b.n	b6fcc <_ZN6AB18057readRamEjPhjb+0x1c>
   b7010:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7014:	f1ba 0f00 	cmp.w	sl, #0
   b7018:	d002      	beq.n	b7020 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b701a:	6868      	ldr	r0, [r5, #4]
   b701c:	f002 fdf7 	bl	b9c0e <_ZN7TwoWire6unlockEv>
}
   b7020:	4640      	mov	r0, r8
   b7022:	b002      	add	sp, #8
   b7024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7028:	2301      	movs	r3, #1
   b702a:	2204      	movs	r2, #4
   b702c:	213f      	movs	r1, #63	; 0x3f
   b702e:	4628      	mov	r0, r5
   b7030:	f7ff feb6 	bl	b6da0 <_ZN6AB180514setRegisterBitEhhb>
   b7034:	e7dc      	b.n	b6ff0 <_ZN6AB18057readRamEjPhjb+0x40>

000b7036 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b7036:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b703a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b703e:	4605      	mov	r5, r0
   b7040:	460c      	mov	r4, r1
   b7042:	4691      	mov	r9, r2
   b7044:	461f      	mov	r7, r3
    if (lock) {
   b7046:	f1ba 0f00 	cmp.w	sl, #0
   b704a:	d002      	beq.n	b7052 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b704c:	6840      	ldr	r0, [r0, #4]
   b704e:	f002 fdd5 	bl	b9bfc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7052:	b307      	cbz	r7, b7096 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b7054:	2f1f      	cmp	r7, #31
   b7056:	463e      	mov	r6, r7
   b7058:	bf28      	it	cs
   b705a:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b705c:	2c7f      	cmp	r4, #127	; 0x7f
   b705e:	d826      	bhi.n	b70ae <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7060:	1933      	adds	r3, r6, r4
   b7062:	2b80      	cmp	r3, #128	; 0x80
   b7064:	d901      	bls.n	b706a <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b7066:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b706a:	2301      	movs	r3, #1
   b706c:	2204      	movs	r2, #4
   b706e:	213f      	movs	r1, #63	; 0x3f
   b7070:	4628      	mov	r0, r5
   b7072:	f7ff fe34 	bl	b6cde <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7076:	2300      	movs	r3, #0
   b7078:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b707c:	9300      	str	r3, [sp, #0]
   b707e:	464a      	mov	r2, r9
   b7080:	4633      	mov	r3, r6
   b7082:	b2c9      	uxtb	r1, r1
   b7084:	4628      	mov	r0, r5
   b7086:	f7ff fd43 	bl	b6b10 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b708a:	4680      	mov	r8, r0
   b708c:	b128      	cbz	r0, b709a <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b708e:	4434      	add	r4, r6
        dataLen -= count;
   b7090:	1bbf      	subs	r7, r7, r6
        data += count;
   b7092:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7094:	e7dd      	b.n	b7052 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b7096:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b709a:	f1ba 0f00 	cmp.w	sl, #0
   b709e:	d002      	beq.n	b70a6 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b70a0:	6868      	ldr	r0, [r5, #4]
   b70a2:	f002 fdb4 	bl	b9c0e <_ZN7TwoWire6unlockEv>
}
   b70a6:	4640      	mov	r0, r8
   b70a8:	b002      	add	sp, #8
   b70aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b70ae:	2301      	movs	r3, #1
   b70b0:	2204      	movs	r2, #4
   b70b2:	213f      	movs	r1, #63	; 0x3f
   b70b4:	4628      	mov	r0, r5
   b70b6:	f7ff fe73 	bl	b6da0 <_ZN6AB180514setRegisterBitEhhb>
   b70ba:	e7dc      	b.n	b7076 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b70bc <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b70bc:	b530      	push	{r4, r5, lr}
   b70be:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b70c0:	680d      	ldr	r5, [r1, #0]
   b70c2:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b70c6:	9503      	str	r5, [sp, #12]
   b70c8:	684d      	ldr	r5, [r1, #4]
   b70ca:	9502      	str	r5, [sp, #8]
   b70cc:	688d      	ldr	r5, [r1, #8]
   b70ce:	9501      	str	r5, [sp, #4]
   b70d0:	68c9      	ldr	r1, [r1, #12]
   b70d2:	9100      	str	r1, [sp, #0]
   b70d4:	3301      	adds	r3, #1
   b70d6:	4904      	ldr	r1, [pc, #16]	; (b70e8 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b70d8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b70dc:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b70de:	f004 fb77 	bl	bb7d0 <_ZN6String6formatEPKcz>
}
   b70e2:	4620      	mov	r0, r4
   b70e4:	b005      	add	sp, #20
   b70e6:	bd30      	pop	{r4, r5, pc}
   b70e8:	000bf0b4 	.word	0x000bf0b4

000b70ec <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b70ec:	0903      	lsrs	r3, r0, #4
}
   b70ee:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b70f0:	f000 000f 	and.w	r0, r0, #15
}
   b70f4:	fb02 0003 	mla	r0, r2, r3, r0
   b70f8:	4770      	bx	lr

000b70fa <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b70fa:	b538      	push	{r3, r4, r5, lr}
   b70fc:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b70fe:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7100:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b7102:	f7ff fff3 	bl	b70ec <_ZN6AB180510bcdToValueEh>
   b7106:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b7108:	7860      	ldrb	r0, [r4, #1]
   b710a:	f7ff ffef 	bl	b70ec <_ZN6AB180510bcdToValueEh>
   b710e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b7110:	78a0      	ldrb	r0, [r4, #2]
   b7112:	f7ff ffeb 	bl	b70ec <_ZN6AB180510bcdToValueEh>
   b7116:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7118:	78e0      	ldrb	r0, [r4, #3]
   b711a:	f7ff ffe7 	bl	b70ec <_ZN6AB180510bcdToValueEh>
   b711e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7120:	7920      	ldrb	r0, [r4, #4]
   b7122:	f7ff ffe3 	bl	b70ec <_ZN6AB180510bcdToValueEh>
   b7126:	3801      	subs	r0, #1
   b7128:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b712a:	b92d      	cbnz	r5, b7138 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b712c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b712e:	7828      	ldrb	r0, [r5, #0]
   b7130:	f7ff ffdc 	bl	b70ec <_ZN6AB180510bcdToValueEh>
   b7134:	6188      	str	r0, [r1, #24]
}
   b7136:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7138:	7960      	ldrb	r0, [r4, #5]
   b713a:	f7ff ffd7 	bl	b70ec <_ZN6AB180510bcdToValueEh>
   b713e:	3064      	adds	r0, #100	; 0x64
   b7140:	1da5      	adds	r5, r4, #6
   b7142:	6148      	str	r0, [r1, #20]
   b7144:	e7f3      	b.n	b712e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7148 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7148:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b714a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b714c:	b088      	sub	sp, #32
   b714e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7150:	461a      	mov	r2, r3
   b7152:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7154:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7156:	f7ff fda4 	bl	b6ca2 <_ZN6AB180510isBitClearEhhb>
   b715a:	b1f0      	cbz	r0, b719a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b715c:	2308      	movs	r3, #8
   b715e:	2601      	movs	r6, #1
   b7160:	4620      	mov	r0, r4
   b7162:	9600      	str	r6, [sp, #0]
   b7164:	eb0d 0203 	add.w	r2, sp, r3
   b7168:	2100      	movs	r1, #0
   b716a:	f7ff fc2f 	bl	b69cc <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b716e:	4604      	mov	r4, r0
   b7170:	b198      	cbz	r0, b719a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b7172:	4632      	mov	r2, r6
   b7174:	4629      	mov	r1, r5
   b7176:	f10d 0009 	add.w	r0, sp, #9
   b717a:	f7ff ffbe 	bl	b70fa <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b717e:	a804      	add	r0, sp, #16
   b7180:	f7ff ff9c 	bl	b70bc <_ZN6AB180510tmToStringEPK2tm>
   b7184:	4808      	ldr	r0, [pc, #32]	; (b71a8 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b7186:	9a04      	ldr	r2, [sp, #16]
   b7188:	4908      	ldr	r1, [pc, #32]	; (b71ac <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b718a:	f7fd f911 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b718e:	a804      	add	r0, sp, #16
   b7190:	f004 fa56 	bl	bb640 <_ZN6StringD1Ev>
}
   b7194:	4620      	mov	r0, r4
   b7196:	b008      	add	sp, #32
   b7198:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b719a:	2224      	movs	r2, #36	; 0x24
   b719c:	2100      	movs	r1, #0
   b719e:	4628      	mov	r0, r5
   b71a0:	f006 fe7e 	bl	bdea0 <memset>
   b71a4:	2400      	movs	r4, #0
   b71a6:	e7f5      	b.n	b7194 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b71a8:	2003e4d8 	.word	0x2003e4d8
   b71ac:	000bf0d2 	.word	0x000bf0d2

000b71b0 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b71b0:	b530      	push	{r4, r5, lr}
   b71b2:	b08b      	sub	sp, #44	; 0x2c
   b71b4:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b71b6:	a901      	add	r1, sp, #4
   b71b8:	f7ff ffc6 	bl	b7148 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b71bc:	4604      	mov	r4, r0
   b71be:	b120      	cbz	r0, b71ca <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b71c0:	a801      	add	r0, sp, #4
   b71c2:	f002 fa63 	bl	b968c <mktime>
   b71c6:	e9c5 0100 	strd	r0, r1, [r5]
}
   b71ca:	4620      	mov	r0, r4
   b71cc:	b00b      	add	sp, #44	; 0x2c
   b71ce:	bd30      	pop	{r4, r5, pc}

000b71d0 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b71d0:	230a      	movs	r3, #10
   b71d2:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b71d6:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b71da:	fb91 f2f3 	sdiv	r2, r1, r3
   b71de:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b71e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b71e6:	b2c0      	uxtb	r0, r0
   b71e8:	4770      	bx	lr

000b71ea <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b71ea:	b570      	push	{r4, r5, r6, lr}
   b71ec:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b71ee:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b71f0:	460c      	mov	r4, r1
   b71f2:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b71f4:	f7ff ffec 	bl	b71d0 <_ZN6AB180510valueToBcdEi>
   b71f8:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b71fa:	6868      	ldr	r0, [r5, #4]
   b71fc:	f7ff ffe8 	bl	b71d0 <_ZN6AB180510valueToBcdEi>
   b7200:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b7202:	68a8      	ldr	r0, [r5, #8]
   b7204:	f7ff ffe4 	bl	b71d0 <_ZN6AB180510valueToBcdEi>
   b7208:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b720a:	68e8      	ldr	r0, [r5, #12]
   b720c:	f7ff ffe0 	bl	b71d0 <_ZN6AB180510valueToBcdEi>
   b7210:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b7212:	6928      	ldr	r0, [r5, #16]
   b7214:	3001      	adds	r0, #1
   b7216:	f7ff ffdb 	bl	b71d0 <_ZN6AB180510valueToBcdEi>
   b721a:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b721c:	b92e      	cbnz	r6, b722a <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b721e:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b7220:	69a8      	ldr	r0, [r5, #24]
   b7222:	f7ff ffd5 	bl	b71d0 <_ZN6AB180510valueToBcdEi>
   b7226:	7030      	strb	r0, [r6, #0]
}
   b7228:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b722a:	696a      	ldr	r2, [r5, #20]
   b722c:	2364      	movs	r3, #100	; 0x64
   b722e:	fb92 f0f3 	sdiv	r0, r2, r3
   b7232:	fb03 2010 	mls	r0, r3, r0, r2
   b7236:	f7ff ffcb 	bl	b71d0 <_ZN6AB180510valueToBcdEi>
   b723a:	1da6      	adds	r6, r4, #6
   b723c:	7160      	strb	r0, [r4, #5]
   b723e:	e7ef      	b.n	b7220 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b7240 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7240:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7242:	b087      	sub	sp, #28
   b7244:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7246:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7248:	4616      	mov	r6, r2
   b724a:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b724c:	f7ff ff36 	bl	b70bc <_ZN6AB180510tmToStringEPK2tm>
   b7250:	481e      	ldr	r0, [pc, #120]	; (b72cc <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b7252:	9a02      	ldr	r2, [sp, #8]
   b7254:	491e      	ldr	r1, [pc, #120]	; (b72d0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b7256:	f7fd f8ab 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b725a:	a802      	add	r0, sp, #8
   b725c:	f004 f9f0 	bl	bb640 <_ZN6StringD1Ev>
    if (lock) {
   b7260:	b116      	cbz	r6, b7268 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b7262:	6868      	ldr	r0, [r5, #4]
   b7264:	f002 fcca 	bl	b9bfc <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7268:	4620      	mov	r0, r4
   b726a:	2201      	movs	r2, #1
   b726c:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b7270:	2700      	movs	r7, #0
   b7272:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b7276:	f7ff ffb8 	bl	b71ea <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b727a:	2301      	movs	r3, #1
   b727c:	461a      	mov	r2, r3
   b727e:	2110      	movs	r1, #16
   b7280:	4628      	mov	r0, r5
   b7282:	f7ff fd8d 	bl	b6da0 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b7286:	4604      	mov	r4, r0
   b7288:	b1e8      	cbz	r0, b72c6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b728a:	2308      	movs	r3, #8
   b728c:	9700      	str	r7, [sp, #0]
   b728e:	eb0d 0203 	add.w	r2, sp, r3
   b7292:	4639      	mov	r1, r7
   b7294:	4628      	mov	r0, r5
   b7296:	f7ff fc3b 	bl	b6b10 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b729a:	4604      	mov	r4, r0
   b729c:	b160      	cbz	r0, b72b8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b729e:	2301      	movs	r3, #1
   b72a0:	461a      	mov	r2, r3
   b72a2:	2110      	movs	r1, #16
   b72a4:	4628      	mov	r0, r5
   b72a6:	f7ff fd1a 	bl	b6cde <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b72aa:	b116      	cbz	r6, b72b2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b72ac:	6868      	ldr	r0, [r5, #4]
   b72ae:	f002 fcae 	bl	b9c0e <_ZN7TwoWire6unlockEv>
}
   b72b2:	4620      	mov	r0, r4
   b72b4:	b007      	add	sp, #28
   b72b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b72b8:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b72bc:	4905      	ldr	r1, [pc, #20]	; (b72d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b72be:	4803      	ldr	r0, [pc, #12]	; (b72cc <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b72c0:	f7ff fb54 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
   b72c4:	e7f1      	b.n	b72aa <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b72c6:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b72ca:	e7f7      	b.n	b72bc <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b72cc:	2003e4d8 	.word	0x2003e4d8
   b72d0:	000bf0e0 	.word	0x000bf0e0
   b72d4:	000bf0ee 	.word	0x000bf0ee

000b72d8 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b72d8:	b513      	push	{r0, r1, r4, lr}
   b72da:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b72dc:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b72de:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b72e2:	f006 fd8f 	bl	bde04 <gmtime>
    return setRtcFromTm(tm, lock);
   b72e6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b72ea:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b72ec:	4620      	mov	r0, r4
   b72ee:	f7ff ffa7 	bl	b7240 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b72f2:	b002      	add	sp, #8
   b72f4:	bd10      	pop	{r4, pc}
	...

000b72f8 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b72f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b72fa:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b72fc:	b089      	sub	sp, #36	; 0x24
   b72fe:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7300:	bb75      	cbnz	r5, b7360 <_ZN6AB18054loopEv+0x68>
   b7302:	f004 fc91 	bl	bbc28 <_ZN9TimeClass7isValidEv>
   b7306:	b358      	cbz	r0, b7360 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b7308:	2600      	movs	r6, #0
   b730a:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b730c:	a904      	add	r1, sp, #16
   b730e:	4628      	mov	r0, r5
        tm = 0;
   b7310:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b7314:	f002 f8da 	bl	b94cc <spark_sync_time_last>
   b7318:	b310      	cbz	r0, b7360 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b731a:	2501      	movs	r5, #1
   b731c:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b731e:	f004 fca0 	bl	bbc62 <_ZN9TimeClass3nowEv>
   b7322:	17c3      	asrs	r3, r0, #31
   b7324:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b7328:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b732a:	9500      	str	r5, [sp, #0]
   b732c:	4620      	mov	r0, r4
   b732e:	f7ff ffd3 	bl	b72d8 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b7332:	a902      	add	r1, sp, #8
   b7334:	4620      	mov	r0, r4
        time = 0;
   b7336:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b733a:	f7ff ff39 	bl	b71b0 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b733e:	4b13      	ldr	r3, [pc, #76]	; (b738c <_ZN6AB18054loopEv+0x94>)
   b7340:	4913      	ldr	r1, [pc, #76]	; (b7390 <_ZN6AB18054loopEv+0x98>)
   b7342:	681b      	ldr	r3, [r3, #0]
   b7344:	9300      	str	r3, [sp, #0]
   b7346:	a804      	add	r0, sp, #16
   b7348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b734c:	f004 fc2a 	bl	bbba4 <_ZN9TimeClass6formatExPKc>
   b7350:	4810      	ldr	r0, [pc, #64]	; (b7394 <_ZN6AB18054loopEv+0x9c>)
   b7352:	9a04      	ldr	r2, [sp, #16]
   b7354:	4910      	ldr	r1, [pc, #64]	; (b7398 <_ZN6AB18054loopEv+0xa0>)
   b7356:	f7fd f82b 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b735a:	a804      	add	r0, sp, #16
   b735c:	f004 f970 	bl	bb640 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b7360:	6963      	ldr	r3, [r4, #20]
   b7362:	b18b      	cbz	r3, b7388 <_ZN6AB18054loopEv+0x90>
   b7364:	f001 fdfc 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7368:	6923      	ldr	r3, [r4, #16]
   b736a:	1ac0      	subs	r0, r0, r3
   b736c:	6963      	ldr	r3, [r4, #20]
   b736e:	4298      	cmp	r0, r3
   b7370:	d30a      	bcc.n	b7388 <_ZN6AB18054loopEv+0x90>
   b7372:	f001 fdf5 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b7376:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b737a:	6120      	str	r0, [r4, #16]
            setWDT();
   b737c:	4620      	mov	r0, r4
}
   b737e:	b009      	add	sp, #36	; 0x24
   b7380:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b7384:	f7ff bc0c 	b.w	b6ba0 <_ZN6AB18056setWDTEi>
}
   b7388:	b009      	add	sp, #36	; 0x24
   b738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b738c:	2003e018 	.word	0x2003e018
   b7390:	2003e6ac 	.word	0x2003e6ac
   b7394:	2003e4d8 	.word	0x2003e4d8
   b7398:	000bf109 	.word	0x000bf109

000b739c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b739c:	b530      	push	{r4, r5, lr}
   b739e:	4604      	mov	r4, r0
   b73a0:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b73a2:	b111      	cbz	r1, b73aa <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b73a4:	6840      	ldr	r0, [r0, #4]
   b73a6:	f002 fbd7 	bl	b9b58 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b73aa:	4620      	mov	r0, r4
   b73ac:	f7ff fb64 	bl	b6a78 <_ZN6AB180510detectChipEv>
   b73b0:	ad06      	add	r5, sp, #24
   b73b2:	2800      	cmp	r0, #0
   b73b4:	d037      	beq.n	b7426 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b73b6:	4620      	mov	r0, r4
   b73b8:	f7ff fc9c 	bl	b6cf4 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b73bc:	2301      	movs	r3, #1
   b73be:	461a      	mov	r2, r3
   b73c0:	2110      	movs	r1, #16
   b73c2:	4620      	mov	r0, r4
   b73c4:	f7ff fc6d 	bl	b6ca2 <_ZN6AB180510isBitClearEhhb>
   b73c8:	b1d8      	cbz	r0, b7402 <_ZN6AB18055setupEb+0x66>
   b73ca:	f004 fc2d 	bl	bbc28 <_ZN9TimeClass7isValidEv>
   b73ce:	b9c0      	cbnz	r0, b7402 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b73d0:	a902      	add	r1, sp, #8
   b73d2:	4620      	mov	r0, r4
   b73d4:	f7ff feec 	bl	b71b0 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b73d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b73dc:	f004 fb29 	bl	bba32 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b73e0:	4b13      	ldr	r3, [pc, #76]	; (b7430 <_ZN6AB18055setupEb+0x94>)
   b73e2:	4914      	ldr	r1, [pc, #80]	; (b7434 <_ZN6AB18055setupEb+0x98>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	9300      	str	r3, [sp, #0]
   b73e8:	4628      	mov	r0, r5
   b73ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b73ee:	f004 fbd9 	bl	bbba4 <_ZN9TimeClass6formatExPKc>
   b73f2:	4811      	ldr	r0, [pc, #68]	; (b7438 <_ZN6AB18055setupEb+0x9c>)
   b73f4:	9a06      	ldr	r2, [sp, #24]
   b73f6:	4911      	ldr	r1, [pc, #68]	; (b743c <_ZN6AB18055setupEb+0xa0>)
   b73f8:	f7fc ffda 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
   b73fc:	4628      	mov	r0, r5
   b73fe:	f004 f91f 	bl	bb640 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7402:	4b0f      	ldr	r3, [pc, #60]	; (b7440 <_ZN6AB18055setupEb+0xa4>)
   b7404:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b7406:	4b0f      	ldr	r3, [pc, #60]	; (b7444 <_ZN6AB18055setupEb+0xa8>)
   b7408:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b740a:	4b0f      	ldr	r3, [pc, #60]	; (b7448 <_ZN6AB18055setupEb+0xac>)
   b740c:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b740e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b7412:	2300      	movs	r3, #0
   b7414:	a802      	add	r0, sp, #8
   b7416:	9500      	str	r5, [sp, #0]
   b7418:	f7fd fc22 	bl	b4c60 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b741c:	4628      	mov	r0, r5
   b741e:	f7fc ff2f 	bl	b4280 <_ZNSt14_Function_baseD1Ev>
}
   b7422:	b00b      	add	sp, #44	; 0x2c
   b7424:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b7426:	4909      	ldr	r1, [pc, #36]	; (b744c <_ZN6AB18055setupEb+0xb0>)
   b7428:	4803      	ldr	r0, [pc, #12]	; (b7438 <_ZN6AB18055setupEb+0x9c>)
   b742a:	f7ff fa9f 	bl	b696c <_ZNK5spark6Logger5errorEPKcz>
   b742e:	e7e8      	b.n	b7402 <_ZN6AB18055setupEb+0x66>
   b7430:	2003e018 	.word	0x2003e018
   b7434:	2003e6ac 	.word	0x2003e6ac
   b7438:	2003e4d8 	.word	0x2003e4d8
   b743c:	000bf11f 	.word	0x000bf11f
   b7440:	000b6c25 	.word	0x000b6c25
   b7444:	000b41e9 	.word	0x000b41e9
   b7448:	000b41d5 	.word	0x000b41d5
   b744c:	000bf13c 	.word	0x000bf13c

000b7450 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7450:	4b01      	ldr	r3, [pc, #4]	; (b7458 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b7452:	4a02      	ldr	r2, [pc, #8]	; (b745c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b7454:	601a      	str	r2, [r3, #0]
}
   b7456:	4770      	bx	lr
   b7458:	2003e4d8 	.word	0x2003e4d8
   b745c:	000bf154 	.word	0x000bf154

000b7460 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b7460:	4770      	bx	lr

000b7462 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b7462:	b510      	push	{r4, lr}
}
   b7464:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b7466:	4604      	mov	r4, r0
}
   b7468:	f7fc fe19 	bl	b409e <_ZdlPvj>
   b746c:	4620      	mov	r0, r4
   b746e:	bd10      	pop	{r4, pc}

000b7470 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b7470:	6803      	ldr	r3, [r0, #0]
   b7472:	b2c9      	uxtb	r1, r1
   b7474:	689b      	ldr	r3, [r3, #8]
   b7476:	4718      	bx	r3

000b7478 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b7478:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b747a:	4d03      	ldr	r5, [pc, #12]	; (b7488 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b747c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b7480:	e9c0 5100 	strd	r5, r1, [r0]
}
   b7484:	bd30      	pop	{r4, r5, pc}
   b7486:	bf00      	nop
   b7488:	000bf180 	.word	0x000bf180

000b748c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b748c:	6840      	ldr	r0, [r0, #4]
   b748e:	f002 bb63 	b.w	b9b58 <_ZN7TwoWire5beginEv>

000b7492 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b7492:	b510      	push	{r4, lr}
   b7494:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b7496:	6800      	ldr	r0, [r0, #0]
   b7498:	f002 fbb9 	bl	b9c0e <_ZN7TwoWire6unlockEv>
   b749c:	4620      	mov	r0, r4
   b749e:	bd10      	pop	{r4, pc}

000b74a0 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b74a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b74a4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b74a6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b74a8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b74aa:	460d      	mov	r5, r1
   b74ac:	4616      	mov	r6, r2
   b74ae:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b74b0:	f002 fba4 	bl	b9bfc <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b74b4:	b1a7      	cbz	r7, b74e0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b74b6:	68e1      	ldr	r1, [r4, #12]
   b74b8:	6860      	ldr	r0, [r4, #4]
   b74ba:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b74be:	f002 fb7e 	bl	b9bbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b74c2:	0a29      	lsrs	r1, r5, #8
   b74c4:	6860      	ldr	r0, [r4, #4]
   b74c6:	f7ff ffd3 	bl	b7470 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b74ca:	4629      	mov	r1, r5
   b74cc:	6860      	ldr	r0, [r4, #4]
   b74ce:	f7ff ffcf 	bl	b7470 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b74d2:	6860      	ldr	r0, [r4, #4]
   b74d4:	2100      	movs	r1, #0
   b74d6:	f002 fb8d 	bl	b9bf4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b74da:	b148      	cbz	r0, b74f0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b74dc:	2400      	movs	r4, #0
   b74de:	e000      	b.n	b74e2 <_ZN6MB85RC8readDataEjPhj+0x42>
   b74e0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b74e2:	a801      	add	r0, sp, #4
   b74e4:	f7ff ffd5 	bl	b7492 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b74e8:	4620      	mov	r0, r4
   b74ea:	b003      	add	sp, #12
   b74ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b74f0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b74f2:	7b21      	ldrb	r1, [r4, #12]
   b74f4:	6860      	ldr	r0, [r4, #4]
   b74f6:	46b8      	mov	r8, r7
   b74f8:	bf28      	it	cs
   b74fa:	f04f 0820 	movcs.w	r8, #32
   b74fe:	2301      	movs	r3, #1
   b7500:	4642      	mov	r2, r8
   b7502:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7506:	f002 fb44 	bl	b9b92 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b750a:	f004 fe33 	bl	bc174 <_Z19__fetch_global_Wirev>
   b750e:	6803      	ldr	r3, [r0, #0]
   b7510:	691b      	ldr	r3, [r3, #16]
   b7512:	4798      	blx	r3
   b7514:	4540      	cmp	r0, r8
   b7516:	dbe1      	blt.n	b74dc <_ZN6MB85RC8readDataEjPhj+0x3c>
   b7518:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b751c:	f004 fe2a 	bl	bc174 <_Z19__fetch_global_Wirev>
   b7520:	6803      	ldr	r3, [r0, #0]
   b7522:	695b      	ldr	r3, [r3, #20]
   b7524:	4798      	blx	r3
   b7526:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b752a:	454e      	cmp	r6, r9
   b752c:	d1f6      	bne.n	b751c <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b752e:	4445      	add	r5, r8
				dataLen--;
   b7530:	eba7 0708 	sub.w	r7, r7, r8
   b7534:	e7be      	b.n	b74b4 <_ZN6MB85RC8readDataEjPhj+0x14>

000b7536 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7536:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b753a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b753c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b753e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7540:	460e      	mov	r6, r1
   b7542:	4690      	mov	r8, r2
   b7544:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b7546:	f002 fb59 	bl	b9bfc <_ZN7TwoWire4lockEv>
   b754a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b754e:	f1b9 0f00 	cmp.w	r9, #0
   b7552:	d02a      	beq.n	b75aa <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b7554:	b34d      	cbz	r5, b75aa <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7556:	68e1      	ldr	r1, [r4, #12]
   b7558:	6860      	ldr	r0, [r4, #4]
   b755a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b755e:	f002 fb2e 	bl	b9bbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7562:	0a31      	lsrs	r1, r6, #8
   b7564:	6860      	ldr	r0, [r4, #4]
   b7566:	f7ff ff83 	bl	b7470 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b756a:	6860      	ldr	r0, [r4, #4]
   b756c:	4631      	mov	r1, r6
   b756e:	f7ff ff7f 	bl	b7470 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7572:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b7576:	4647      	mov	r7, r8
   b7578:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b757c:	6860      	ldr	r0, [r4, #4]
   b757e:	f817 1b01 	ldrb.w	r1, [r7], #1
   b7582:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b7584:	3d01      	subs	r5, #1
				wire.write(*data);
   b7586:	689b      	ldr	r3, [r3, #8]
   b7588:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b758a:	4555      	cmp	r5, sl
   b758c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b7590:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7592:	d001      	beq.n	b7598 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b7594:	2d00      	cmp	r5, #0
   b7596:	d1f1      	bne.n	b757c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b7598:	6860      	ldr	r0, [r4, #4]
   b759a:	2101      	movs	r1, #1
   b759c:	f002 fb2a 	bl	b9bf4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b75a0:	2800      	cmp	r0, #0
   b75a2:	d0d7      	beq.n	b7554 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b75a4:	f04f 0900 	mov.w	r9, #0
   b75a8:	e7d1      	b.n	b754e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b75aa:	a801      	add	r0, sp, #4
   b75ac:	f7ff ff71 	bl	b7492 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b75b0:	4648      	mov	r0, r9
   b75b2:	b003      	add	sp, #12
   b75b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b75b8 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b75b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b75bc:	b08b      	sub	sp, #44	; 0x2c
   b75be:	460e      	mov	r6, r1
   b75c0:	4615      	mov	r5, r2
   b75c2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b75c4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b75c6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b75c8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b75ca:	f002 fb17 	bl	b9bfc <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b75ce:	42ae      	cmp	r6, r5
   b75d0:	d229      	bcs.n	b7626 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b75d2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b75d4:	4425      	add	r5, r4
			while(numBytes > 0) {
   b75d6:	b18c      	cbz	r4, b75fc <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b75d8:	2c1e      	cmp	r4, #30
   b75da:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b75dc:	f8d8 3000 	ldr.w	r3, [r8]
   b75e0:	bf28      	it	cs
   b75e2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b75e4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b75e6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b75ea:	aa02      	add	r2, sp, #8
   b75ec:	463b      	mov	r3, r7
   b75ee:	4631      	mov	r1, r6
   b75f0:	4640      	mov	r0, r8
				framAddrTo -= count;
   b75f2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b75f4:	47c8      	blx	r9
				if (!result) {
   b75f6:	b948      	cbnz	r0, b760c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b75f8:	2400      	movs	r4, #0
   b75fa:	e000      	b.n	b75fe <_ZN6MB85RC8moveDataEjjj+0x46>
   b75fc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b75fe:	a801      	add	r0, sp, #4
   b7600:	f7ff ff47 	bl	b7492 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b7604:	4620      	mov	r0, r4
   b7606:	b00b      	add	sp, #44	; 0x2c
   b7608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b760c:	f8d8 3000 	ldr.w	r3, [r8]
   b7610:	aa02      	add	r2, sp, #8
   b7612:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7616:	4629      	mov	r1, r5
   b7618:	463b      	mov	r3, r7
   b761a:	4640      	mov	r0, r8
   b761c:	47c8      	blx	r9
				if (!result) {
   b761e:	2800      	cmp	r0, #0
   b7620:	d0ea      	beq.n	b75f8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b7622:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7624:	e7d7      	b.n	b75d6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b7626:	d9e9      	bls.n	b75fc <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b7628:	2c00      	cmp	r4, #0
   b762a:	d0e7      	beq.n	b75fc <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b762c:	f8d8 3000 	ldr.w	r3, [r8]
   b7630:	2c1e      	cmp	r4, #30
   b7632:	4627      	mov	r7, r4
   b7634:	bf28      	it	cs
   b7636:	271e      	movcs	r7, #30
   b7638:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b763c:	aa02      	add	r2, sp, #8
   b763e:	463b      	mov	r3, r7
   b7640:	4631      	mov	r1, r6
   b7642:	4640      	mov	r0, r8
   b7644:	47c8      	blx	r9
				if (!result) {
   b7646:	2800      	cmp	r0, #0
   b7648:	d0d6      	beq.n	b75f8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b764a:	f8d8 3000 	ldr.w	r3, [r8]
   b764e:	aa02      	add	r2, sp, #8
   b7650:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7654:	4629      	mov	r1, r5
   b7656:	463b      	mov	r3, r7
   b7658:	4640      	mov	r0, r8
   b765a:	47c8      	blx	r9
				if (!result) {
   b765c:	2800      	cmp	r0, #0
   b765e:	d0cb      	beq.n	b75f8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b7660:	443e      	add	r6, r7
				framAddrTo += count;
   b7662:	443d      	add	r5, r7
				numBytes -= count;
   b7664:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7666:	e7df      	b.n	b7628 <_ZN6MB85RC8moveDataEjjj+0x70>

000b7668 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b7668:	6001      	str	r1, [r0, #0]
   b766a:	7102      	strb	r2, [r0, #4]
{
}
   b766c:	4770      	bx	lr

000b766e <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b766e:	6800      	ldr	r0, [r0, #0]
   b7670:	6803      	ldr	r3, [r0, #0]
   b7672:	68db      	ldr	r3, [r3, #12]
   b7674:	4718      	bx	r3

000b7676 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b7676:	6800      	ldr	r0, [r0, #0]
   b7678:	6803      	ldr	r3, [r0, #0]
   b767a:	6a1b      	ldr	r3, [r3, #32]
   b767c:	4718      	bx	r3

000b767e <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b767e:	6800      	ldr	r0, [r0, #0]
   b7680:	6803      	ldr	r3, [r0, #0]
   b7682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7684:	4718      	bx	r3

000b7686 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b7686:	7900      	ldrb	r0, [r0, #4]
   b7688:	4770      	bx	lr

000b768a <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b768a:	6800      	ldr	r0, [r0, #0]
   b768c:	6803      	ldr	r3, [r0, #0]
   b768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7690:	4718      	bx	r3

000b7692 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b7692:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7694:	4605      	mov	r5, r0
   b7696:	460c      	mov	r4, r1
    setHeaderTo(address);
   b7698:	4619      	mov	r1, r3
{
   b769a:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b769c:	f7ff fff5 	bl	b768a <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b76a0:	6828      	ldr	r0, [r5, #0]
   b76a2:	9a01      	ldr	r2, [sp, #4]
   b76a4:	6803      	ldr	r3, [r0, #0]
   b76a6:	695b      	ldr	r3, [r3, #20]
   b76a8:	4621      	mov	r1, r4
}
   b76aa:	b003      	add	sp, #12
   b76ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b76b0:	4718      	bx	r3

000b76b2 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b76b2:	6800      	ldr	r0, [r0, #0]
   b76b4:	6803      	ldr	r3, [r0, #0]
   b76b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b76b8:	4718      	bx	r3

000b76ba <_ZN10RHDatagram14setThisAddressEh>:
{
   b76ba:	b538      	push	{r3, r4, r5, lr}
   b76bc:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b76be:	6800      	ldr	r0, [r0, #0]
   b76c0:	6803      	ldr	r3, [r0, #0]
{
   b76c2:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b76c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b76c6:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b76c8:	4629      	mov	r1, r5
   b76ca:	4620      	mov	r0, r4
   b76cc:	f7ff fff1 	bl	b76b2 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b76d0:	7125      	strb	r5, [r4, #4]
}
   b76d2:	bd38      	pop	{r3, r4, r5, pc}

000b76d4 <_ZN10RHDatagram4initEv>:
{
   b76d4:	b538      	push	{r3, r4, r5, lr}
   b76d6:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b76d8:	6800      	ldr	r0, [r0, #0]
   b76da:	6803      	ldr	r3, [r0, #0]
   b76dc:	689b      	ldr	r3, [r3, #8]
   b76de:	4798      	blx	r3
    if (ret)
   b76e0:	4605      	mov	r5, r0
   b76e2:	b118      	cbz	r0, b76ec <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b76e4:	7921      	ldrb	r1, [r4, #4]
   b76e6:	4620      	mov	r0, r4
   b76e8:	f7ff ffe7 	bl	b76ba <_ZN10RHDatagram14setThisAddressEh>
}
   b76ec:	4628      	mov	r0, r5
   b76ee:	bd38      	pop	{r3, r4, r5, pc}

000b76f0 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b76f0:	6800      	ldr	r0, [r0, #0]
   b76f2:	6803      	ldr	r3, [r0, #0]
   b76f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b76f6:	4718      	bx	r3

000b76f8 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b76f8:	6800      	ldr	r0, [r0, #0]
   b76fa:	6803      	ldr	r3, [r0, #0]
   b76fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b76fe:	4718      	bx	r3

000b7700 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b7700:	6800      	ldr	r0, [r0, #0]
   b7702:	6803      	ldr	r3, [r0, #0]
   b7704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7706:	4718      	bx	r3

000b7708 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b7708:	6800      	ldr	r0, [r0, #0]
   b770a:	6803      	ldr	r3, [r0, #0]
   b770c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b770e:	4718      	bx	r3

000b7710 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b7710:	6800      	ldr	r0, [r0, #0]
   b7712:	6803      	ldr	r3, [r0, #0]
   b7714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7716:	4718      	bx	r3

000b7718 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b7718:	6800      	ldr	r0, [r0, #0]
   b771a:	6803      	ldr	r3, [r0, #0]
   b771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b771e:	4718      	bx	r3

000b7720 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b7720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7724:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b7726:	6800      	ldr	r0, [r0, #0]
{
   b7728:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b772a:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b772c:	6803      	ldr	r3, [r0, #0]
   b772e:	691b      	ldr	r3, [r3, #16]
{
   b7730:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b7734:	4798      	blx	r3
   b7736:	4605      	mov	r5, r0
   b7738:	b1c8      	cbz	r0, b776e <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b773a:	b11e      	cbz	r6, b7744 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b773c:	4620      	mov	r0, r4
   b773e:	f7ff ffe3 	bl	b7708 <_ZN10RHDatagram10headerFromEv>
   b7742:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b7744:	f1b9 0f00 	cmp.w	r9, #0
   b7748:	d004      	beq.n	b7754 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b774a:	4620      	mov	r0, r4
   b774c:	f7ff ffd8 	bl	b7700 <_ZN10RHDatagram8headerToEv>
   b7750:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b7754:	f1b8 0f00 	cmp.w	r8, #0
   b7758:	d004      	beq.n	b7764 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b775a:	4620      	mov	r0, r4
   b775c:	f7ff ffd8 	bl	b7710 <_ZN10RHDatagram8headerIdEv>
   b7760:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b7764:	b11f      	cbz	r7, b776e <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b7766:	4620      	mov	r0, r4
   b7768:	f7ff ffd6 	bl	b7718 <_ZN10RHDatagram11headerFlagsEv>
   b776c:	7038      	strb	r0, [r7, #0]
}
   b776e:	4628      	mov	r0, r5
   b7770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7774 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b7774:	2001      	movs	r0, #1
   b7776:	4770      	bx	lr

000b7778 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b7778:	7903      	ldrb	r3, [r0, #4]
   b777a:	2b03      	cmp	r3, #3
   b777c:	d0fc      	beq.n	b7778 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b777e:	2001      	movs	r0, #1
   b7780:	4770      	bx	lr

000b7782 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b7782:	2000      	movs	r0, #0
   b7784:	4770      	bx	lr

000b7786 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b7786:	7181      	strb	r1, [r0, #6]
}
   b7788:	4770      	bx	lr

000b778a <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b778a:	7141      	strb	r1, [r0, #5]
}
   b778c:	4770      	bx	lr

000b778e <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b778e:	72c1      	strb	r1, [r0, #11]
}
   b7790:	4770      	bx	lr

000b7792 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b7792:	7301      	strb	r1, [r0, #12]
}
   b7794:	4770      	bx	lr

000b7796 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b7796:	7341      	strb	r1, [r0, #13]
}
   b7798:	4770      	bx	lr

000b779a <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b779a:	7b83      	ldrb	r3, [r0, #14]
   b779c:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b77a0:	4311      	orrs	r1, r2
   b77a2:	7381      	strb	r1, [r0, #14]
}
   b77a4:	4770      	bx	lr

000b77a6 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b77a6:	79c0      	ldrb	r0, [r0, #7]
}
   b77a8:	4770      	bx	lr

000b77aa <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b77aa:	7a00      	ldrb	r0, [r0, #8]
}
   b77ac:	4770      	bx	lr

000b77ae <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b77ae:	7a40      	ldrb	r0, [r0, #9]
}
   b77b0:	4770      	bx	lr

000b77b2 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b77b2:	7a80      	ldrb	r0, [r0, #10]
}
   b77b4:	4770      	bx	lr

000b77b6 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b77b6:	8a00      	ldrh	r0, [r0, #16]
}
   b77b8:	b200      	sxth	r0, r0
   b77ba:	4770      	bx	lr

000b77bc <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b77bc:	7900      	ldrb	r0, [r0, #4]
}
   b77be:	4770      	bx	lr

000b77c0 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b77c0:	7101      	strb	r1, [r0, #4]
}
   b77c2:	4770      	bx	lr

000b77c4 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b77c4:	8a40      	ldrh	r0, [r0, #18]
}
   b77c6:	b280      	uxth	r0, r0
   b77c8:	4770      	bx	lr

000b77ca <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b77ca:	8a80      	ldrh	r0, [r0, #20]
}
   b77cc:	b280      	uxth	r0, r0
   b77ce:	4770      	bx	lr

000b77d0 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b77d0:	8ac0      	ldrh	r0, [r0, #22]
}
   b77d2:	b280      	uxth	r0, r0
   b77d4:	4770      	bx	lr

000b77d6 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b77d6:	b538      	push	{r3, r4, r5, lr}
   b77d8:	4605      	mov	r5, r0
   b77da:	460c      	mov	r4, r1
    while (!available())
   b77dc:	682b      	ldr	r3, [r5, #0]
   b77de:	4628      	mov	r0, r5
   b77e0:	68db      	ldr	r3, [r3, #12]
   b77e2:	4798      	blx	r3
   b77e4:	b928      	cbnz	r0, b77f2 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b77e6:	2c00      	cmp	r4, #0
   b77e8:	d0f8      	beq.n	b77dc <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b77ea:	4620      	mov	r0, r4
   b77ec:	f001 ff62 	bl	b96b4 <delay>
   b77f0:	e7f4      	b.n	b77dc <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b77f2:	bd38      	pop	{r3, r4, r5, pc}

000b77f4 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b77f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77f6:	4605      	mov	r5, r0
   b77f8:	460f      	mov	r7, r1
   b77fa:	4614      	mov	r4, r2
   b77fc:	f001 fbb0 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b7800:	4606      	mov	r6, r0
   b7802:	f001 fbad 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b7806:	1b80      	subs	r0, r0, r6
   b7808:	42b8      	cmp	r0, r7
   b780a:	d20a      	bcs.n	b7822 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b780c:	682b      	ldr	r3, [r5, #0]
   b780e:	4628      	mov	r0, r5
   b7810:	68db      	ldr	r3, [r3, #12]
   b7812:	4798      	blx	r3
   b7814:	b930      	cbnz	r0, b7824 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b7816:	2c00      	cmp	r4, #0
   b7818:	d0f3      	beq.n	b7802 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b781a:	4620      	mov	r0, r4
   b781c:	f001 ff4a 	bl	b96b4 <delay>
   b7820:	e7ef      	b.n	b7802 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b7822:	2000      	movs	r0, #0
}
   b7824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7826 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b7826:	b570      	push	{r4, r5, r6, lr}
   b7828:	4604      	mov	r4, r0
   b782a:	460e      	mov	r6, r1
   b782c:	f001 fb98 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b7830:	4605      	mov	r5, r0
   b7832:	f001 fb95 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b7836:	1b40      	subs	r0, r0, r5
   b7838:	42b0      	cmp	r0, r6
   b783a:	d204      	bcs.n	b7846 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b783c:	7923      	ldrb	r3, [r4, #4]
   b783e:	2b03      	cmp	r3, #3
   b7840:	d0f7      	beq.n	b7832 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b7842:	2001      	movs	r0, #1
}
   b7844:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b7846:	2000      	movs	r0, #0
   b7848:	e7fc      	b.n	b7844 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b784a <_ZN15RHGenericDriver7waitCADEv>:
{
   b784a:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b784c:	69c3      	ldr	r3, [r0, #28]
{
   b784e:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b7850:	b1b3      	cbz	r3, b7880 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b7852:	f001 fb85 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b7856:	2664      	movs	r6, #100	; 0x64
   b7858:	4605      	mov	r5, r0
    while (isChannelActive())
   b785a:	6823      	ldr	r3, [r4, #0]
   b785c:	4620      	mov	r0, r4
   b785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7860:	4798      	blx	r3
   b7862:	b168      	cbz	r0, b7880 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b7864:	f001 fb7c 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b7868:	69e3      	ldr	r3, [r4, #28]
   b786a:	1b40      	subs	r0, r0, r5
   b786c:	4298      	cmp	r0, r3
   b786e:	d809      	bhi.n	b7884 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b7870:	210a      	movs	r1, #10
   b7872:	2001      	movs	r0, #1
   b7874:	f003 fe0b 	bl	bb48e <_Z6randomii>
   b7878:	4370      	muls	r0, r6
   b787a:	f001 ff1b 	bl	b96b4 <delay>
    while (isChannelActive())
   b787e:	e7ec      	b.n	b785a <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b7880:	2001      	movs	r0, #1
}
   b7882:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b7884:	2000      	movs	r0, #0
   b7886:	e7fc      	b.n	b7882 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b7888 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b7888:	4a06      	ldr	r2, [pc, #24]	; (b78a4 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b788a:	6002      	str	r2, [r0, #0]
   b788c:	21ff      	movs	r1, #255	; 0xff
   b788e:	2200      	movs	r2, #0
   b7890:	7102      	strb	r2, [r0, #4]
   b7892:	7141      	strb	r1, [r0, #5]
   b7894:	8242      	strh	r2, [r0, #18]
   b7896:	72c1      	strb	r1, [r0, #11]
   b7898:	8282      	strh	r2, [r0, #20]
   b789a:	8181      	strh	r1, [r0, #12]
   b789c:	7382      	strb	r2, [r0, #14]
   b789e:	82c2      	strh	r2, [r0, #22]
   b78a0:	61c2      	str	r2, [r0, #28]
}
   b78a2:	4770      	bx	lr
   b78a4:	000bf19c 	.word	0x000bf19c

000b78a8 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b78a8:	4770      	bx	lr

000b78aa <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b78aa:	4770      	bx	lr

000b78ac <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b78ac:	4770      	bx	lr

000b78ae <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b78ae:	4770      	bx	lr

000b78b0 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b78b0:	4770      	bx	lr

000b78b2 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b78b2:	7141      	strb	r1, [r0, #5]
}
   b78b4:	4770      	bx	lr

000b78b6 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b78b6:	7181      	strb	r1, [r0, #6]
}
   b78b8:	4770      	bx	lr

000b78ba <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b78ba:	7101      	strb	r1, [r0, #4]
}
   b78bc:	4770      	bx	lr
	...

000b78c0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b78c0:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b78c2:	4d03      	ldr	r5, [pc, #12]	; (b78d0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b78c4:	6005      	str	r5, [r0, #0]
   b78c6:	7101      	strb	r1, [r0, #4]
   b78c8:	7142      	strb	r2, [r0, #5]
   b78ca:	7183      	strb	r3, [r0, #6]
}
   b78cc:	bd30      	pop	{r4, r5, pc}
   b78ce:	bf00      	nop
   b78d0:	000bf21c 	.word	0x000bf21c

000b78d4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b78d4:	4770      	bx	lr

000b78d6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b78d6:	b510      	push	{r4, lr}
  }
   b78d8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b78da:	4604      	mov	r4, r0
  }
   b78dc:	f7fc fbdf 	bl	b409e <_ZdlPvj>
   b78e0:	4620      	mov	r0, r4
   b78e2:	bd10      	pop	{r4, pc}

000b78e4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b78e4:	b40e      	push	{r1, r2, r3}
   b78e6:	b503      	push	{r0, r1, lr}
   b78e8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b78ea:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b78ec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b78f0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b78f2:	f003 fd90 	bl	bb416 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b78f6:	b002      	add	sp, #8
   b78f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b78fc:	b003      	add	sp, #12
   b78fe:	4770      	bx	lr

000b7900 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b7900:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7902:	4604      	mov	r4, r0
   b7904:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b7906:	7922      	ldrb	r2, [r4, #4]
   b7908:	68a3      	ldr	r3, [r4, #8]
   b790a:	b132      	cbz	r2, b791a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b790c:	b9a3      	cbnz	r3, b7938 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b790e:	490b      	ldr	r1, [pc, #44]	; (b793c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b7910:	b002      	add	sp, #8
   b7912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b7916:	f003 bc75 	b.w	bb204 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b791a:	4a09      	ldr	r2, [pc, #36]	; (b7940 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b791c:	7b26      	ldrb	r6, [r4, #12]
   b791e:	4d09      	ldr	r5, [pc, #36]	; (b7944 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b7920:	4909      	ldr	r1, [pc, #36]	; (b7948 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b7922:	7b64      	ldrb	r4, [r4, #13]
   b7924:	2e01      	cmp	r6, #1
   b7926:	bf18      	it	ne
   b7928:	4629      	movne	r1, r5
   b792a:	e9cd 1400 	strd	r1, r4, [sp]
   b792e:	4907      	ldr	r1, [pc, #28]	; (b794c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b7930:	f7ff ffd8 	bl	b78e4 <_ZN5Print6printfEPKcz>
  }
   b7934:	b002      	add	sp, #8
   b7936:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7938:	4a05      	ldr	r2, [pc, #20]	; (b7950 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b793a:	e7ef      	b.n	b791c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b793c:	000bf259 	.word	0x000bf259
   b7940:	000bf671 	.word	0x000bf671
   b7944:	000bf255 	.word	0x000bf255
   b7948:	000bf251 	.word	0x000bf251
   b794c:	000bf26f 	.word	0x000bf26f
   b7950:	000bf248 	.word	0x000bf248

000b7954 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b7954:	b510      	push	{r4, lr}
   b7956:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b7958:	f7ff ffb2 	bl	b78c0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b795c:	4b05      	ldr	r3, [pc, #20]	; (b7974 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b795e:	6023      	str	r3, [r4, #0]
  {
   b7960:	4b05      	ldr	r3, [pc, #20]	; (b7978 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b7962:	60a3      	str	r3, [r4, #8]
   b7964:	2301      	movs	r3, #1
   b7966:	7323      	strb	r3, [r4, #12]
   b7968:	2300      	movs	r3, #0
   b796a:	6123      	str	r3, [r4, #16]
   b796c:	82a3      	strh	r3, [r4, #20]
{
}
   b796e:	4620      	mov	r0, r4
   b7970:	bd10      	pop	{r4, pc}
   b7972:	bf00      	nop
   b7974:	000bf2a8 	.word	0x000bf2a8
   b7978:	000bf294 	.word	0x000bf294

000b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b797c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b797e:	4c0b      	ldr	r4, [pc, #44]	; (b79ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b7980:	7821      	ldrb	r1, [r4, #0]
   b7982:	f3bf 8f5b 	dmb	ish
   b7986:	f011 0101 	ands.w	r1, r1, #1
   b798a:	d10b      	bne.n	b79a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b798c:	4620      	mov	r0, r4
   b798e:	9101      	str	r1, [sp, #4]
   b7990:	f7fc fb94 	bl	b40bc <__cxa_guard_acquire>
   b7994:	9901      	ldr	r1, [sp, #4]
   b7996:	b128      	cbz	r0, b79a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7998:	4805      	ldr	r0, [pc, #20]	; (b79b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b799a:	f003 fd91 	bl	bb4c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b799e:	4620      	mov	r0, r4
   b79a0:	f7fc fb91 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b79a4:	4802      	ldr	r0, [pc, #8]	; (b79b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b79a6:	b002      	add	sp, #8
   b79a8:	bd10      	pop	{r4, pc}
   b79aa:	bf00      	nop
   b79ac:	2003e4e0 	.word	0x2003e4e0
   b79b0:	2003e4e4 	.word	0x2003e4e4

000b79b4 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b79b4:	b507      	push	{r0, r1, r2, lr}
   b79b6:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b79b8:	f7ff ffe0 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b79bc:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b79be:	b003      	add	sp, #12
   b79c0:	f85d eb04 	ldr.w	lr, [sp], #4
   b79c4:	f003 be34 	b.w	bb630 <_ZN8SPIClass8transferEh>

000b79c8 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b79c8:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b79ca:	f7ff ffd7 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b79ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b79d2:	f003 be33 	b.w	bb63c <_ZN8SPIClass15attachInterruptEv>

000b79d6 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b79d6:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b79d8:	f7ff ffd0 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b79dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b79e0:	f003 be2d 	b.w	bb63e <_ZN8SPIClass15detachInterruptEv>

000b79e4 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b79e4:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b79e6:	7903      	ldrb	r3, [r0, #4]
   b79e8:	2b04      	cmp	r3, #4
   b79ea:	d020      	beq.n	b7a2e <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b79ec:	2b03      	cmp	r3, #3
   b79ee:	d020      	beq.n	b7a32 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b79f0:	2b02      	cmp	r3, #2
   b79f2:	d020      	beq.n	b7a36 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b79f4:	4a11      	ldr	r2, [pc, #68]	; (b7a3c <_ZN13RHHardwareSPI5beginEv+0x58>)
   b79f6:	4912      	ldr	r1, [pc, #72]	; (b7a40 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b79f8:	2b01      	cmp	r3, #1
   b79fa:	bf18      	it	ne
   b79fc:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b79fe:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b7a00:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b7a02:	3901      	subs	r1, #1
   b7a04:	bf18      	it	ne
   b7a06:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b7a08:	b133      	cbz	r3, b7a18 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b7a0a:	2b01      	cmp	r3, #1
   b7a0c:	d004      	beq.n	b7a18 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b7a0e:	2b02      	cmp	r3, #2
   b7a10:	d002      	beq.n	b7a18 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b7a12:	2b03      	cmp	r3, #3
   b7a14:	bf18      	it	ne
   b7a16:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b7a18:	2400      	movs	r4, #0
   b7a1a:	7304      	strb	r4, [r0, #12]
   b7a1c:	6102      	str	r2, [r0, #16]
   b7a1e:	7501      	strb	r1, [r0, #20]
   b7a20:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b7a22:	f7ff ffab 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b7a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7a2a:	f003 bd53 	b.w	bb4d4 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b7a2e:	4a05      	ldr	r2, [pc, #20]	; (b7a44 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b7a30:	e7e5      	b.n	b79fe <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b7a32:	4a05      	ldr	r2, [pc, #20]	; (b7a48 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b7a34:	e7e3      	b.n	b79fe <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b7a36:	4a05      	ldr	r2, [pc, #20]	; (b7a4c <_ZN13RHHardwareSPI5beginEv+0x68>)
   b7a38:	e7e1      	b.n	b79fe <_ZN13RHHardwareSPI5beginEv+0x1a>
   b7a3a:	bf00      	nop
   b7a3c:	001e8480 	.word	0x001e8480
   b7a40:	000f4240 	.word	0x000f4240
   b7a44:	00f42400 	.word	0x00f42400
   b7a48:	007a1200 	.word	0x007a1200
   b7a4c:	003d0900 	.word	0x003d0900

000b7a50 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b7a50:	b508      	push	{r3, lr}
        instance().end();
   b7a52:	f7ff ff93 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b7a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7a5a:	f003 bd4f 	b.w	bb4fc <_ZN8SPIClass3endEv>

000b7a5e <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b7a5e:	b510      	push	{r4, lr}
   b7a60:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b7a62:	f7ff ff8b 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7a66:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b7a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7a6e:	f003 bd71 	b.w	bb554 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7a72 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b7a72:	b508      	push	{r3, lr}
        instance().endTransaction();
   b7a74:	f7ff ff82 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b7a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7a7c:	f003 bd50 	b.w	bb520 <_ZN8SPIClass14endTransactionEv>

000b7a80 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b7a80:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b7a82:	f7ff ff7b 	bl	b797c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b7a86:	bd08      	pop	{r3, pc}

000b7a88 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b7a88:	2300      	movs	r3, #0
   b7a8a:	4802      	ldr	r0, [pc, #8]	; (b7a94 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b7a8c:	461a      	mov	r2, r3
   b7a8e:	4619      	mov	r1, r3
   b7a90:	f7ff bf60 	b.w	b7954 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b7a94:	2003e4ec 	.word	0x2003e4ec

000b7a98 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b7a98:	2a01      	cmp	r2, #1
   b7a9a:	d105      	bne.n	b7aa8 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b7a9c:	7a00      	ldrb	r0, [r0, #8]
   b7a9e:	780b      	ldrb	r3, [r1, #0]
   b7aa0:	1a1b      	subs	r3, r3, r0
   b7aa2:	4258      	negs	r0, r3
   b7aa4:	4158      	adcs	r0, r3
   b7aa6:	4770      	bx	lr
   b7aa8:	2000      	movs	r0, #0
}
   b7aaa:	4770      	bx	lr

000b7aac <_ZN6RHMesh5doArpEh>:
{
   b7aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b7ab0:	4c25      	ldr	r4, [pc, #148]	; (b7b48 <_ZN6RHMesh5doArpEh+0x9c>)
   b7ab2:	2301      	movs	r3, #1
{
   b7ab4:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b7ab6:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b7ab8:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7aba:	2300      	movs	r3, #0
{
   b7abc:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b7abe:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7ac0:	9300      	str	r3, [sp, #0]
   b7ac2:	2203      	movs	r2, #3
   b7ac4:	23ff      	movs	r3, #255	; 0xff
   b7ac6:	4621      	mov	r1, r4
{
   b7ac8:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7aca:	f000 fbb9 	bl	b8240 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b7ace:	b120      	cbz	r0, b7ada <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b7ad0:	2500      	movs	r5, #0
}
   b7ad2:	4628      	mov	r0, r5
   b7ad4:	b006      	add	sp, #24
   b7ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b7ada:	237a      	movs	r3, #122	; 0x7a
   b7adc:	f88d 3017 	strb.w	r3, [sp, #23]
   b7ae0:	f001 fa3e 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b7ae4:	f106 0904 	add.w	r9, r6, #4
   b7ae8:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b7aea:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b7aee:	f001 fa37 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b7af2:	1a29      	subs	r1, r5, r0
   b7af4:	2900      	cmp	r1, #0
   b7af6:	ddeb      	ble.n	b7ad0 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b7af8:	2200      	movs	r2, #0
   b7afa:	b289      	uxth	r1, r1
   b7afc:	4648      	mov	r0, r9
   b7afe:	f7ff fdbe 	bl	b767e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7b02:	2800      	cmp	r0, #0
   b7b04:	d0f3      	beq.n	b7aee <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b7b06:	2300      	movs	r3, #0
   b7b08:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7b0c:	e9cd 3300 	strd	r3, r3, [sp]
   b7b10:	f10d 0217 	add.w	r2, sp, #23
   b7b14:	4621      	mov	r1, r4
   b7b16:	4630      	mov	r0, r6
   b7b18:	f000 fb9c 	bl	b8254 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7b1c:	4605      	mov	r5, r0
   b7b1e:	2800      	cmp	r0, #0
   b7b20:	d0e3      	beq.n	b7aea <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b7b22:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b7b26:	2b01      	cmp	r3, #1
   b7b28:	d9df      	bls.n	b7aea <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7b2a:	f894 a000 	ldrb.w	sl, [r4]
   b7b2e:	f1ba 0f02 	cmp.w	sl, #2
   b7b32:	d1da      	bne.n	b7aea <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b7b34:	4648      	mov	r0, r9
   b7b36:	f7ff fde7 	bl	b7708 <_ZN10RHDatagram10headerFromEv>
   b7b3a:	4653      	mov	r3, sl
   b7b3c:	4602      	mov	r2, r0
   b7b3e:	4639      	mov	r1, r7
   b7b40:	4630      	mov	r0, r6
   b7b42:	f000 faf5 	bl	b8130 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b7b46:	e7c4      	b.n	b7ad2 <_ZN6RHMesh5doArpEh+0x26>
   b7b48:	2003e504 	.word	0x2003e504

000b7b4c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7b4c:	2a01      	cmp	r2, #1
{
   b7b4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7b52:	4607      	mov	r7, r0
   b7b54:	460e      	mov	r6, r1
   b7b56:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b7b58:	d93b      	bls.n	b7bd2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7b5a:	794d      	ldrb	r5, [r1, #5]
   b7b5c:	2d02      	cmp	r5, #2
   b7b5e:	d130      	bne.n	b7bc2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b7b60:	f100 0804 	add.w	r8, r0, #4
   b7b64:	79c9      	ldrb	r1, [r1, #7]
   b7b66:	9101      	str	r1, [sp, #4]
   b7b68:	4640      	mov	r0, r8
   b7b6a:	f7ff fdcd 	bl	b7708 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7b6e:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b7b70:	462b      	mov	r3, r5
   b7b72:	4602      	mov	r2, r0
   b7b74:	9901      	ldr	r1, [sp, #4]
   b7b76:	4638      	mov	r0, r7
   b7b78:	f000 fada 	bl	b8130 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7b7c:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b7b7e:	f106 0308 	add.w	r3, r6, #8
   b7b82:	2400      	movs	r4, #0
   b7b84:	4622      	mov	r2, r4
   b7b86:	4295      	cmp	r5, r2
   b7b88:	f104 0401 	add.w	r4, r4, #1
   b7b8c:	b2e4      	uxtb	r4, r4
   b7b8e:	d904      	bls.n	b7b9a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b7b90:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7b94:	7a39      	ldrb	r1, [r7, #8]
   b7b96:	4291      	cmp	r1, r2
   b7b98:	d1f4      	bne.n	b7b84 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b7b9a:	f104 0108 	add.w	r1, r4, #8
   b7b9e:	440e      	add	r6, r1
	while (i < numRoutes)
   b7ba0:	42a5      	cmp	r5, r4
   b7ba2:	d916      	bls.n	b7bd2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b7ba4:	f816 1b01 	ldrb.w	r1, [r6], #1
   b7ba8:	9101      	str	r1, [sp, #4]
   b7baa:	4640      	mov	r0, r8
   b7bac:	f7ff fdac 	bl	b7708 <_ZN10RHDatagram10headerFromEv>
   b7bb0:	3401      	adds	r4, #1
   b7bb2:	4602      	mov	r2, r0
   b7bb4:	9901      	ldr	r1, [sp, #4]
   b7bb6:	2302      	movs	r3, #2
   b7bb8:	4638      	mov	r0, r7
   b7bba:	b2e4      	uxtb	r4, r4
   b7bbc:	f000 fab8 	bl	b8130 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b7bc0:	e7ee      	b.n	b7ba0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b7bc2:	2d03      	cmp	r5, #3
   b7bc4:	d105      	bne.n	b7bd2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b7bc6:	7989      	ldrb	r1, [r1, #6]
}
   b7bc8:	b002      	add	sp, #8
   b7bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b7bce:	f000 ba98 	b.w	b8102 <_ZN8RHRouter13deleteRouteToEh>
}
   b7bd2:	b002      	add	sp, #8
   b7bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7bd8 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b7bd8:	b510      	push	{r4, lr}
   b7bda:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7bdc:	f000 fae8 	bl	b81b0 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b7be0:	4b01      	ldr	r3, [pc, #4]	; (b7be8 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b7be2:	6023      	str	r3, [r4, #0]
}
   b7be4:	4620      	mov	r0, r4
   b7be6:	bd10      	pop	{r4, pc}
   b7be8:	000bf2dc 	.word	0x000bf2dc

000b7bec <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7bf0:	2a79      	cmp	r2, #121	; 0x79
{
   b7bf2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b7bf6:	4606      	mov	r6, r0
   b7bf8:	460f      	mov	r7, r1
   b7bfa:	4614      	mov	r4, r2
   b7bfc:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7bfe:	d825      	bhi.n	b7c4c <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b7c00:	2bff      	cmp	r3, #255	; 0xff
   b7c02:	d114      	bne.n	b7c2e <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7c04:	f8df 8048 	ldr.w	r8, [pc, #72]	; b7c50 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b7c08:	4640      	mov	r0, r8
   b7c0a:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7c0c:	4622      	mov	r2, r4
   b7c0e:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7c10:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b7c14:	f006 f91c 	bl	bde50 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7c18:	1c62      	adds	r2, r4, #1
   b7c1a:	f8cd 9020 	str.w	r9, [sp, #32]
   b7c1e:	462b      	mov	r3, r5
   b7c20:	4641      	mov	r1, r8
   b7c22:	4630      	mov	r0, r6
   b7c24:	b2d2      	uxtb	r2, r2
}
   b7c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7c2a:	f000 bb09 	b.w	b8240 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b7c2e:	4619      	mov	r1, r3
   b7c30:	f000 fa23 	bl	b807a <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b7c34:	2800      	cmp	r0, #0
   b7c36:	d1e5      	bne.n	b7c04 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b7c38:	6833      	ldr	r3, [r6, #0]
   b7c3a:	4629      	mov	r1, r5
   b7c3c:	689b      	ldr	r3, [r3, #8]
   b7c3e:	4630      	mov	r0, r6
   b7c40:	4798      	blx	r3
   b7c42:	2800      	cmp	r0, #0
   b7c44:	d1de      	bne.n	b7c04 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7c46:	2002      	movs	r0, #2
}
   b7c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7c4c:	2001      	movs	r0, #1
   b7c4e:	e7fb      	b.n	b7c48 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b7c50:	2003e504 	.word	0x2003e504

000b7c54 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b7c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c58:	b089      	sub	sp, #36	; 0x24
   b7c5a:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7c5c:	237a      	movs	r3, #122	; 0x7a
   b7c5e:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7c62:	f10d 031f 	add.w	r3, sp, #31
   b7c66:	9303      	str	r3, [sp, #12]
   b7c68:	f10d 031e 	add.w	r3, sp, #30
   b7c6c:	9302      	str	r3, [sp, #8]
   b7c6e:	4e5d      	ldr	r6, [pc, #372]	; (b7de4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7c70:	f10d 031d 	add.w	r3, sp, #29
   b7c74:	9301      	str	r3, [sp, #4]
   b7c76:	ab07      	add	r3, sp, #28
   b7c78:	9300      	str	r3, [sp, #0]
{     
   b7c7a:	4689      	mov	r9, r1
   b7c7c:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7c7e:	f10d 031b 	add.w	r3, sp, #27
   b7c82:	f10d 021a 	add.w	r2, sp, #26
   b7c86:	4631      	mov	r1, r6
{     
   b7c88:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b7c8c:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7c8e:	f000 fae1 	bl	b8254 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7c92:	4604      	mov	r4, r0
   b7c94:	b920      	cbnz	r0, b7ca0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b7c96:	2400      	movs	r4, #0
}
   b7c98:	4620      	mov	r0, r4
   b7c9a:	b009      	add	sp, #36	; 0x24
   b7c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b7ca0:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b7ca4:	b373      	cbz	r3, b7d04 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b7ca6:	7832      	ldrb	r2, [r6, #0]
   b7ca8:	bb62      	cbnz	r2, b7d04 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b7caa:	f1b8 0f00 	cmp.w	r8, #0
   b7cae:	d003      	beq.n	b7cb8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b7cb0:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b7cb4:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b7cb8:	f1bb 0f00 	cmp.w	fp, #0
   b7cbc:	d003      	beq.n	b7cc6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b7cbe:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7cc2:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b7cc6:	f1ba 0f00 	cmp.w	sl, #0
   b7cca:	d003      	beq.n	b7cd4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b7ccc:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b7cd0:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b7cd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7cd6:	b11a      	cbz	r2, b7ce0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b7cd8:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7cda:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7cde:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b7ce0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b7ce2:	b11a      	cbz	r2, b7cec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b7ce4:	9915      	ldr	r1, [sp, #84]	; 0x54
   b7ce6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7cea:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7cec:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7cee:	493e      	ldr	r1, [pc, #248]	; (b7de8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b7cf0:	3b01      	subs	r3, #1
   b7cf2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7cf4:	429a      	cmp	r2, r3
		*len = msgLen;
   b7cf6:	bf88      	it	hi
   b7cf8:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7cfa:	783a      	ldrb	r2, [r7, #0]
   b7cfc:	4648      	mov	r0, r9
   b7cfe:	f006 f8a7 	bl	bde50 <memcpy>
	    return true;
   b7d02:	e7c9      	b.n	b7c98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b7d04:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7d08:	2aff      	cmp	r2, #255	; 0xff
   b7d0a:	d1c4      	bne.n	b7c96 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7d0c:	2b01      	cmp	r3, #1
   b7d0e:	d9c2      	bls.n	b7c96 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b7d10:	7832      	ldrb	r2, [r6, #0]
   b7d12:	2a01      	cmp	r2, #1
   b7d14:	d1bf      	bne.n	b7c96 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b7d16:	7a2a      	ldrb	r2, [r5, #8]
   b7d18:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7d1c:	42a2      	cmp	r2, r4
   b7d1e:	d0ba      	beq.n	b7c96 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b7d20:	1edf      	subs	r7, r3, #3
   b7d22:	4932      	ldr	r1, [pc, #200]	; (b7dec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b7d24:	b2ff      	uxtb	r7, r7
   b7d26:	2300      	movs	r3, #0
   b7d28:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7d2c:	4547      	cmp	r7, r8
   b7d2e:	d906      	bls.n	b7d3e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b7d30:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7d34:	4282      	cmp	r2, r0
   b7d36:	f103 0301 	add.w	r3, r3, #1
   b7d3a:	d1f5      	bne.n	b7d28 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7d3c:	e7ab      	b.n	b7c96 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b7d3e:	f105 0904 	add.w	r9, r5, #4
   b7d42:	4648      	mov	r0, r9
   b7d44:	f7ff fce0 	bl	b7708 <_ZN10RHDatagram10headerFromEv>
   b7d48:	2302      	movs	r3, #2
   b7d4a:	4602      	mov	r2, r0
   b7d4c:	4621      	mov	r1, r4
   b7d4e:	4628      	mov	r0, r5
   b7d50:	f000 f9ee 	bl	b8130 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b7d54:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7d58:	b193      	cbz	r3, b7d80 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b7d5a:	4c22      	ldr	r4, [pc, #136]	; (b7de4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7d5c:	1ba3      	subs	r3, r4, r6
   b7d5e:	b2db      	uxtb	r3, r3
   b7d60:	429f      	cmp	r7, r3
   b7d62:	d90c      	bls.n	b7d7e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b7d64:	78e1      	ldrb	r1, [r4, #3]
   b7d66:	9105      	str	r1, [sp, #20]
   b7d68:	4648      	mov	r0, r9
   b7d6a:	f7ff fccd 	bl	b7708 <_ZN10RHDatagram10headerFromEv>
   b7d6e:	9905      	ldr	r1, [sp, #20]
   b7d70:	4602      	mov	r2, r0
   b7d72:	2302      	movs	r3, #2
   b7d74:	4628      	mov	r0, r5
   b7d76:	f000 f9db 	bl	b8130 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b7d7a:	3401      	adds	r4, #1
   b7d7c:	e7ee      	b.n	b7d5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b7d7e:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b7d80:	682b      	ldr	r3, [r5, #0]
   b7d82:	7872      	ldrb	r2, [r6, #1]
   b7d84:	68db      	ldr	r3, [r3, #12]
   b7d86:	491a      	ldr	r1, [pc, #104]	; (b7df0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b7d88:	4628      	mov	r0, r5
   b7d8a:	4798      	blx	r3
   b7d8c:	4604      	mov	r4, r0
   b7d8e:	b160      	cbz	r0, b7daa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7d90:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b7d92:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7d94:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b7d96:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b7d9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7d9e:	4911      	ldr	r1, [pc, #68]	; (b7de4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7da0:	9400      	str	r4, [sp, #0]
   b7da2:	4628      	mov	r0, r5
   b7da4:	f000 fa4c 	bl	b8240 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7da8:	e776      	b.n	b7c98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b7daa:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b7dae:	4543      	cmp	r3, r8
   b7db0:	f67f af71 	bls.w	b7c96 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b7db4:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7db8:	2b00      	cmp	r3, #0
   b7dba:	f43f af6c 	beq.w	b7c96 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b7dbe:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b7dc2:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7dc4:	4907      	ldr	r1, [pc, #28]	; (b7de4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b7dc6:	443e      	add	r6, r7
		tmpMessageLen++;
   b7dc8:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b7dca:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7dcc:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7dd0:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b7dd2:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7dd4:	9300      	str	r3, [sp, #0]
   b7dd6:	4628      	mov	r0, r5
   b7dd8:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b7dda:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7dde:	f000 f9f9 	bl	b81d4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b7de2:	e759      	b.n	b7c98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b7de4:	2003e504 	.word	0x2003e504
   b7de8:	2003e505 	.word	0x2003e505
   b7dec:	2003e507 	.word	0x2003e507
   b7df0:	2003e506 	.word	0x2003e506

000b7df4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b7df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7df6:	b085      	sub	sp, #20
   b7df8:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7dfa:	3004      	adds	r0, #4
{
   b7dfc:	460e      	mov	r6, r1
   b7dfe:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7e00:	f7ff fc82 	bl	b7708 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b7e04:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7e06:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b7e08:	4631      	mov	r1, r6
   b7e0a:	4628      	mov	r0, r5
   b7e0c:	f000 f94c 	bl	b80a8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7e10:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b7e12:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7e14:	d001      	beq.n	b7e1a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b7e16:	2805      	cmp	r0, #5
   b7e18:	d11b      	bne.n	b7e52 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b7e1a:	7831      	ldrb	r1, [r6, #0]
   b7e1c:	4628      	mov	r0, r5
   b7e1e:	f000 f970 	bl	b8102 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b7e22:	7872      	ldrb	r2, [r6, #1]
   b7e24:	7a2b      	ldrb	r3, [r5, #8]
   b7e26:	429a      	cmp	r2, r3
   b7e28:	d013      	beq.n	b7e52 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b7e2a:	4c0b      	ldr	r4, [pc, #44]	; (b7e58 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7e2c:	2303      	movs	r3, #3
   b7e2e:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b7e30:	7833      	ldrb	r3, [r6, #0]
   b7e32:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7e34:	7871      	ldrb	r1, [r6, #1]
   b7e36:	2302      	movs	r3, #2
   b7e38:	463a      	mov	r2, r7
   b7e3a:	4628      	mov	r0, r5
   b7e3c:	f000 f978 	bl	b8130 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b7e40:	2300      	movs	r3, #0
   b7e42:	9300      	str	r3, [sp, #0]
   b7e44:	4621      	mov	r1, r4
   b7e46:	7873      	ldrb	r3, [r6, #1]
   b7e48:	2202      	movs	r2, #2
   b7e4a:	4628      	mov	r0, r5
   b7e4c:	f000 f9f8 	bl	b8240 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7e50:	4604      	mov	r4, r0
}
   b7e52:	4620      	mov	r0, r4
   b7e54:	b005      	add	sp, #20
   b7e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7e58:	2003e504 	.word	0x2003e504

000b7e5c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7e5c:	b510      	push	{r4, lr}
   b7e5e:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7e60:	f7ff fc02 	bl	b7668 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7e64:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b7e66:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b7e68:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b7e6a:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7e6c:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b7e6e:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7e70:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b7e72:	f44f 7280 	mov.w	r2, #256	; 0x100
   b7e76:	f104 0011 	add.w	r0, r4, #17
   b7e7a:	f006 f811 	bl	bdea0 <memset>
}
   b7e7e:	4620      	mov	r0, r4
   b7e80:	bd10      	pop	{r4, pc}

000b7e82 <_ZN18RHReliableDatagram10setTimeoutEt>:

////////////////////////////////////////////////////////////////////
// Public methods
void RHReliableDatagram::setTimeout(uint16_t timeout)
{
    _timeout = timeout;
   b7e82:	81c1      	strh	r1, [r0, #14]
}
   b7e84:	4770      	bx	lr

000b7e86 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b7e86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7e88:	4604      	mov	r4, r0
   b7e8a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b7e8c:	f7ff fc30 	bl	b76f0 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b7e90:	4620      	mov	r0, r4
   b7e92:	2200      	movs	r2, #0
   b7e94:	2180      	movs	r1, #128	; 0x80
   b7e96:	f7ff fc2f 	bl	b76f8 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b7e9a:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b7e9c:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b7e9e:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b7ea2:	f10d 010f 	add.w	r1, sp, #15
   b7ea6:	2201      	movs	r2, #1
   b7ea8:	4620      	mov	r0, r4
   b7eaa:	f7ff fbf2 	bl	b7692 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b7eae:	4620      	mov	r0, r4
   b7eb0:	f7ff fbe1 	bl	b7676 <_ZN10RHDatagram14waitPacketSentEv>
}
   b7eb4:	b004      	add	sp, #16
   b7eb6:	bd10      	pop	{r4, pc}

000b7eb8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7ebc:	7b05      	ldrb	r5, [r0, #12]
   b7ebe:	3501      	adds	r5, #1
   b7ec0:	b2ed      	uxtb	r5, r5
{
   b7ec2:	b087      	sub	sp, #28
   b7ec4:	4604      	mov	r4, r0
   b7ec6:	4689      	mov	r9, r1
   b7ec8:	4692      	mov	sl, r2
   b7eca:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7ecc:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b7ece:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b7ed0:	7c22      	ldrb	r2, [r4, #16]
   b7ed2:	463b      	mov	r3, r7
   b7ed4:	429a      	cmp	r2, r3
   b7ed6:	f107 0701 	add.w	r7, r7, #1
   b7eda:	b2ff      	uxtb	r7, r7
   b7edc:	d36b      	bcc.n	b7fb6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b7ede:	4629      	mov	r1, r5
   b7ee0:	4620      	mov	r0, r4
   b7ee2:	f7ff fc05 	bl	b76f0 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b7ee6:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b7ee8:	bf0d      	iteet	eq
   b7eea:	22c0      	moveq	r2, #192	; 0xc0
   b7eec:	2280      	movne	r2, #128	; 0x80
   b7eee:	2140      	movne	r1, #64	; 0x40
   b7ef0:	2100      	moveq	r1, #0
   b7ef2:	4620      	mov	r0, r4
   b7ef4:	f7ff fc00 	bl	b76f8 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b7ef8:	4643      	mov	r3, r8
   b7efa:	4652      	mov	r2, sl
   b7efc:	4649      	mov	r1, r9
   b7efe:	4620      	mov	r0, r4
   b7f00:	f7ff fbc7 	bl	b7692 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b7f04:	4620      	mov	r0, r4
   b7f06:	f7ff fbb6 	bl	b7676 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b7f0a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7f0e:	d054      	beq.n	b7fba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b7f10:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b7f12:	bf82      	ittt	hi
   b7f14:	68a3      	ldrhi	r3, [r4, #8]
   b7f16:	3301      	addhi	r3, #1
   b7f18:	60a3      	strhi	r3, [r4, #8]
   b7f1a:	f001 f821 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b7f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b7f22:	4683      	mov	fp, r0
   b7f24:	2000      	movs	r0, #0
   b7f26:	89e6      	ldrh	r6, [r4, #14]
   b7f28:	f003 fab1 	bl	bb48e <_Z6randomii>
   b7f2c:	4370      	muls	r0, r6
   b7f2e:	bf48      	it	mi
   b7f30:	30ff      	addmi	r0, #255	; 0xff
   b7f32:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b7f36:	fa1b f686 	uxtah	r6, fp, r6
   b7f3a:	f001 f811 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
   b7f3e:	1a30      	subs	r0, r6, r0
   b7f40:	2800      	cmp	r0, #0
   b7f42:	ddc5      	ble.n	b7ed0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7f44:	b281      	uxth	r1, r0
   b7f46:	2200      	movs	r2, #0
   b7f48:	4620      	mov	r0, r4
   b7f4a:	f7ff fb98 	bl	b767e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7f4e:	2800      	cmp	r0, #0
   b7f50:	d0f3      	beq.n	b7f3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7f52:	f10d 0317 	add.w	r3, sp, #23
   b7f56:	9302      	str	r3, [sp, #8]
   b7f58:	f10d 0316 	add.w	r3, sp, #22
   b7f5c:	9301      	str	r3, [sp, #4]
   b7f5e:	2200      	movs	r2, #0
   b7f60:	f10d 0315 	add.w	r3, sp, #21
   b7f64:	9300      	str	r3, [sp, #0]
   b7f66:	4611      	mov	r1, r2
   b7f68:	ab05      	add	r3, sp, #20
   b7f6a:	4620      	mov	r0, r4
   b7f6c:	f7ff fbd8 	bl	b7720 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7f70:	2800      	cmp	r0, #0
   b7f72:	d0e2      	beq.n	b7f3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7f74:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7f78:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b7f7c:	4542      	cmp	r2, r8
   b7f7e:	d10e      	bne.n	b7f9e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7f80:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7f84:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7f88:	458c      	cmp	ip, r1
   b7f8a:	d108      	bne.n	b7f9e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b7f8c:	2b00      	cmp	r3, #0
   b7f8e:	da08      	bge.n	b7fa2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b7f90:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7f94:	42ab      	cmp	r3, r5
   b7f96:	d1d0      	bne.n	b7f3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7f98:	b007      	add	sp, #28
   b7f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b7f9e:	2b00      	cmp	r3, #0
   b7fa0:	dbcb      	blt.n	b7f3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b7fa2:	18a1      	adds	r1, r4, r2
   b7fa4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7fa8:	7c49      	ldrb	r1, [r1, #17]
   b7faa:	4299      	cmp	r1, r3
   b7fac:	d1c5      	bne.n	b7f3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b7fae:	4620      	mov	r0, r4
   b7fb0:	f7ff ff69 	bl	b7e86 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b7fb4:	e7c1      	b.n	b7f3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b7fb6:	2000      	movs	r0, #0
   b7fb8:	e7ee      	b.n	b7f98 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7fba:	2001      	movs	r0, #1
   b7fbc:	e7ec      	b.n	b7f98 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b7fbe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b7fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7fc2:	b089      	sub	sp, #36	; 0x24
   b7fc4:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7fc8:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7fcc:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7fce:	4604      	mov	r4, r0
   b7fd0:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7fd2:	f7ff fb4c 	bl	b766e <_ZN10RHDatagram9availableEv>
   b7fd6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b7fda:	b920      	cbnz	r0, b7fe6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7fdc:	2500      	movs	r5, #0
}
   b7fde:	4628      	mov	r0, r5
   b7fe0:	b009      	add	sp, #36	; 0x24
   b7fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7fe6:	f10d 031f 	add.w	r3, sp, #31
   b7fea:	9302      	str	r3, [sp, #8]
   b7fec:	f10d 031e 	add.w	r3, sp, #30
   b7ff0:	9301      	str	r3, [sp, #4]
   b7ff2:	f10d 031d 	add.w	r3, sp, #29
   b7ff6:	9300      	str	r3, [sp, #0]
   b7ff8:	4620      	mov	r0, r4
   b7ffa:	ab07      	add	r3, sp, #28
   b7ffc:	f7ff fb90 	bl	b7720 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b8000:	4605      	mov	r5, r0
   b8002:	2800      	cmp	r0, #0
   b8004:	d0ea      	beq.n	b7fdc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b8006:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b800a:	2b00      	cmp	r3, #0
   b800c:	dbe6      	blt.n	b7fdc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b800e:	7922      	ldrb	r2, [r4, #4]
   b8010:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b8014:	429a      	cmp	r2, r3
   b8016:	d106      	bne.n	b8026 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b8018:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b801c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b8020:	4620      	mov	r0, r4
   b8022:	f7ff ff30 	bl	b7e86 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b8026:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b802a:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b802e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b8032:	f012 0f40 	tst.w	r2, #64	; 0x40
   b8036:	440c      	add	r4, r1
   b8038:	d002      	beq.n	b8040 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b803a:	7c60      	ldrb	r0, [r4, #17]
   b803c:	4298      	cmp	r0, r3
   b803e:	d0cd      	beq.n	b7fdc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b8040:	b106      	cbz	r6, b8044 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b8042:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b8044:	f1b9 0f00 	cmp.w	r9, #0
   b8048:	d003      	beq.n	b8052 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b804a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b804e:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b8052:	f1b8 0f00 	cmp.w	r8, #0
   b8056:	d001      	beq.n	b805c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b8058:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b805c:	b107      	cbz	r7, b8060 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b805e:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b8060:	7463      	strb	r3, [r4, #17]
		return true;
   b8062:	e7bc      	b.n	b7fde <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b8064 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b8064:	4770      	bx	lr

000b8066 <_ZN8RHRouter4initEv>:
{
   b8066:	b510      	push	{r4, lr}
   b8068:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b806a:	3004      	adds	r0, #4
   b806c:	f7ff fb32 	bl	b76d4 <_ZN10RHDatagram4initEv>
    if (ret)
   b8070:	b110      	cbz	r0, b8078 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b8072:	231e      	movs	r3, #30
   b8074:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b8078:	bd10      	pop	{r4, pc}

000b807a <_ZN8RHRouter10getRouteToEh>:
{
   b807a:	b510      	push	{r4, lr}
   b807c:	4602      	mov	r2, r0
   b807e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b8080:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b8084:	428c      	cmp	r4, r1
   b8086:	d108      	bne.n	b809a <_ZN8RHRouter10getRouteToEh+0x20>
   b8088:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b808c:	b12c      	cbz	r4, b809a <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b808e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8092:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b8096:	4418      	add	r0, r3
}
   b8098:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b809a:	3301      	adds	r3, #1
   b809c:	2b32      	cmp	r3, #50	; 0x32
   b809e:	f102 0203 	add.w	r2, r2, #3
   b80a2:	d1ed      	bne.n	b8080 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b80a4:	2000      	movs	r0, #0
   b80a6:	e7f7      	b.n	b8098 <_ZN8RHRouter10getRouteToEh+0x1e>

000b80a8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b80a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b80aa:	780b      	ldrb	r3, [r1, #0]
   b80ac:	2bff      	cmp	r3, #255	; 0xff
{
   b80ae:	4605      	mov	r5, r0
   b80b0:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b80b2:	d006      	beq.n	b80c2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b80b4:	4619      	mov	r1, r3
   b80b6:	9201      	str	r2, [sp, #4]
   b80b8:	f7ff ffdf 	bl	b807a <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b80bc:	b158      	cbz	r0, b80d6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b80be:	7843      	ldrb	r3, [r0, #1]
   b80c0:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b80c2:	4621      	mov	r1, r4
   b80c4:	1d28      	adds	r0, r5, #4
   b80c6:	f7ff fef7 	bl	b7eb8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b80ca:	2800      	cmp	r0, #0
   b80cc:	bf14      	ite	ne
   b80ce:	2000      	movne	r0, #0
   b80d0:	2005      	moveq	r0, #5
}
   b80d2:	b003      	add	sp, #12
   b80d4:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b80d6:	2002      	movs	r0, #2
   b80d8:	e7fb      	b.n	b80d2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b80da <_ZN8RHRouter11deleteRouteEh>:
{
   b80da:	b510      	push	{r4, lr}
   b80dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b80e0:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b80e2:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b80e6:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b80ea:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b80ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b80f2:	4421      	add	r1, r4
   b80f4:	4420      	add	r0, r4
   b80f6:	f005 feab 	bl	bde50 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b80fa:	2300      	movs	r3, #0
   b80fc:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b8100:	bd10      	pop	{r4, pc}

000b8102 <_ZN8RHRouter13deleteRouteToEh>:
{
   b8102:	b538      	push	{r3, r4, r5, lr}
   b8104:	460a      	mov	r2, r1
   b8106:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b8108:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b810c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b8110:	b2d9      	uxtb	r1, r3
   b8112:	5d65      	ldrb	r5, [r4, r5]
   b8114:	4295      	cmp	r5, r2
   b8116:	d103      	bne.n	b8120 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b8118:	f7ff ffdf 	bl	b80da <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b811c:	2001      	movs	r0, #1
}
   b811e:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b8120:	3301      	adds	r3, #1
   b8122:	2b32      	cmp	r3, #50	; 0x32
   b8124:	d1f2      	bne.n	b810c <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b8126:	2000      	movs	r0, #0
   b8128:	e7f9      	b.n	b811e <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b812a <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b812a:	2100      	movs	r1, #0
   b812c:	f7ff bfd5 	b.w	b80da <_ZN8RHRouter11deleteRouteEh>

000b8130 <_ZN8RHRouter10addRouteToEhhh>:
{
   b8130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8132:	4616      	mov	r6, r2
   b8134:	461f      	mov	r7, r3
   b8136:	4604      	mov	r4, r0
   b8138:	460d      	mov	r5, r1
   b813a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b813c:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b8140:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b8144:	5c11      	ldrb	r1, [r2, r0]
   b8146:	42a9      	cmp	r1, r5
   b8148:	d105      	bne.n	b8156 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b814a:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b814c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b8150:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b8154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b8156:	3301      	adds	r3, #1
   b8158:	2b32      	cmp	r3, #50	; 0x32
   b815a:	d1f1      	bne.n	b8140 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b815c:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b815e:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b8162:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b8166:	5c11      	ldrb	r1, [r2, r0]
   b8168:	b919      	cbnz	r1, b8172 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b816a:	4420      	add	r0, r4
   b816c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b8170:	e7ec      	b.n	b814c <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b8172:	3301      	adds	r3, #1
   b8174:	2b32      	cmp	r3, #50	; 0x32
   b8176:	d1f4      	bne.n	b8162 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b8178:	4620      	mov	r0, r4
   b817a:	f7ff ffd6 	bl	b812a <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b817e:	4620      	mov	r0, r4
   b8180:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b8184:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b8188:	b92a      	cbnz	r2, b8196 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b818a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b818e:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b8192:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b8196:	3003      	adds	r0, #3
   b8198:	4298      	cmp	r0, r3
   b819a:	d1f3      	bne.n	b8184 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b819c:	e7da      	b.n	b8154 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b819e <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b819e:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b81a2:	2200      	movs	r2, #0
   b81a4:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b81a8:	3003      	adds	r0, #3
   b81aa:	4298      	cmp	r0, r3
   b81ac:	d1fa      	bne.n	b81a4 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b81ae:	4770      	bx	lr

000b81b0 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b81b0:	b510      	push	{r4, lr}
   b81b2:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b81b4:	3004      	adds	r0, #4
   b81b6:	f7ff fe51 	bl	b7e5c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b81ba:	4b05      	ldr	r3, [pc, #20]	; (b81d0 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b81bc:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b81be:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b81c2:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b81c4:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b81c8:	f7ff ffe9 	bl	b819e <_ZN8RHRouter17clearRoutingTableEv>
}
   b81cc:	4620      	mov	r0, r4
   b81ce:	bd10      	pop	{r4, pc}
   b81d0:	000bf2f4 	.word	0x000bf2f4

000b81d4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b81d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b81d8:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b81da:	6840      	ldr	r0, [r0, #4]
{
   b81dc:	9101      	str	r1, [sp, #4]
   b81de:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b81e0:	6803      	ldr	r3, [r0, #0]
{
   b81e2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b81e6:	699b      	ldr	r3, [r3, #24]
{
   b81e8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b81ec:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b81ee:	4798      	blx	r3
   b81f0:	f106 0805 	add.w	r8, r6, #5
   b81f4:	4580      	cmp	r8, r0
   b81f6:	d81c      	bhi.n	b8232 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b81f8:	4d10      	ldr	r5, [pc, #64]	; (b823c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b81fa:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b81fc:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b8200:	2300      	movs	r3, #0
   b8202:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b8204:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b8208:	70eb      	strb	r3, [r5, #3]
   b820a:	1c5a      	adds	r2, r3, #1
   b820c:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b8210:	1d68      	adds	r0, r5, #5
   b8212:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b8214:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b8216:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b821a:	f005 fe19 	bl	bde50 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b821e:	6823      	ldr	r3, [r4, #0]
   b8220:	685b      	ldr	r3, [r3, #4]
   b8222:	fa5f f288 	uxtb.w	r2, r8
   b8226:	4629      	mov	r1, r5
   b8228:	4620      	mov	r0, r4
}
   b822a:	b002      	add	sp, #8
   b822c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b8230:	4718      	bx	r3
}
   b8232:	2001      	movs	r0, #1
   b8234:	b002      	add	sp, #8
   b8236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b823a:	bf00      	nop
   b823c:	2003e57e 	.word	0x2003e57e

000b8240 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b8240:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b8242:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b8246:	9401      	str	r4, [sp, #4]
   b8248:	7a04      	ldrb	r4, [r0, #8]
   b824a:	9400      	str	r4, [sp, #0]
   b824c:	f7ff ffc2 	bl	b81d4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b8250:	b002      	add	sp, #8
   b8252:	bd10      	pop	{r4, pc}

000b8254 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b8254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8258:	b087      	sub	sp, #28
   b825a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b825c:	237f      	movs	r3, #127	; 0x7f
   b825e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b8262:	f10d 0317 	add.w	r3, sp, #23
   b8266:	9302      	str	r3, [sp, #8]
   b8268:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b833c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b826c:	f10d 0316 	add.w	r3, sp, #22
   b8270:	9301      	str	r3, [sp, #4]
   b8272:	f10d 0315 	add.w	r3, sp, #21
   b8276:	9300      	str	r3, [sp, #0]
{  
   b8278:	4604      	mov	r4, r0
   b827a:	4688      	mov	r8, r1
   b827c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b827e:	ab05      	add	r3, sp, #20
   b8280:	f10d 0213 	add.w	r2, sp, #19
   b8284:	4649      	mov	r1, r9
   b8286:	3004      	adds	r0, #4
{  
   b8288:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b828c:	f7ff fe97 	bl	b7fbe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b8290:	4605      	mov	r5, r0
   b8292:	b908      	cbnz	r0, b8298 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b8294:	2500      	movs	r5, #0
   b8296:	e038      	b.n	b830a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b8298:	6823      	ldr	r3, [r4, #0]
   b829a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b829e:	681b      	ldr	r3, [r3, #0]
   b82a0:	4649      	mov	r1, r9
   b82a2:	4620      	mov	r0, r4
   b82a4:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b82a6:	f899 3000 	ldrb.w	r3, [r9]
   b82aa:	7a22      	ldrb	r2, [r4, #8]
   b82ac:	429a      	cmp	r2, r3
   b82ae:	d001      	beq.n	b82b4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b82b0:	2bff      	cmp	r3, #255	; 0xff
   b82b2:	d12e      	bne.n	b8312 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b82b4:	b117      	cbz	r7, b82bc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b82b6:	4b21      	ldr	r3, [pc, #132]	; (b833c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b82b8:	785b      	ldrb	r3, [r3, #1]
   b82ba:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b82bc:	f1bb 0f00 	cmp.w	fp, #0
   b82c0:	d003      	beq.n	b82ca <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b82c2:	4b1e      	ldr	r3, [pc, #120]	; (b833c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b82c4:	781b      	ldrb	r3, [r3, #0]
   b82c6:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b82ca:	f1ba 0f00 	cmp.w	sl, #0
   b82ce:	d003      	beq.n	b82d8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b82d0:	4b1a      	ldr	r3, [pc, #104]	; (b833c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b82d2:	78db      	ldrb	r3, [r3, #3]
   b82d4:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b82d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b82da:	b11b      	cbz	r3, b82e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b82dc:	4b17      	ldr	r3, [pc, #92]	; (b833c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b82de:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b82e0:	791b      	ldrb	r3, [r3, #4]
   b82e2:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b82e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b82e6:	b11b      	cbz	r3, b82f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b82e8:	4b14      	ldr	r3, [pc, #80]	; (b833c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b82ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b82ec:	789b      	ldrb	r3, [r3, #2]
   b82ee:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b82f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b82f4:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b82f6:	4912      	ldr	r1, [pc, #72]	; (b8340 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b82f8:	3b05      	subs	r3, #5
   b82fa:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b82fc:	429a      	cmp	r2, r3
		*len = msgLen;
   b82fe:	bf88      	it	hi
   b8300:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b8302:	7832      	ldrb	r2, [r6, #0]
   b8304:	4640      	mov	r0, r8
   b8306:	f005 fda3 	bl	bde50 <memcpy>
}
   b830a:	4628      	mov	r0, r5
   b830c:	b007      	add	sp, #28
   b830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b8312:	f899 3002 	ldrb.w	r3, [r9, #2]
   b8316:	1c5a      	adds	r2, r3, #1
   b8318:	f889 2002 	strb.w	r2, [r9, #2]
   b831c:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b8320:	429a      	cmp	r2, r3
   b8322:	d9b7      	bls.n	b8294 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b8324:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b8328:	2b00      	cmp	r3, #0
   b832a:	d0b3      	beq.n	b8294 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b832c:	6823      	ldr	r3, [r4, #0]
   b832e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b8332:	685b      	ldr	r3, [r3, #4]
   b8334:	4649      	mov	r1, r9
   b8336:	4620      	mov	r0, r4
   b8338:	4798      	blx	r3
   b833a:	e7ab      	b.n	b8294 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b833c:	2003e57e 	.word	0x2003e57e
   b8340:	2003e583 	.word	0x2003e583

000b8344 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b8344:	b510      	push	{r4, lr}
   b8346:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b8348:	6a00      	ldr	r0, [r0, #32]
   b834a:	6803      	ldr	r3, [r0, #0]
   b834c:	68db      	ldr	r3, [r3, #12]
   b834e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b8350:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b8354:	28ff      	cmp	r0, #255	; 0xff
   b8356:	d002      	beq.n	b835e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b8358:	2101      	movs	r1, #1
   b835a:	f003 fe81 	bl	bc060 <pinMode>

    deselectSlave();
   b835e:	6823      	ldr	r3, [r4, #0]
   b8360:	4620      	mov	r0, r4
   b8362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8364:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b8366:	2064      	movs	r0, #100	; 0x64
   b8368:	f001 f9a4 	bl	b96b4 <delay>
#endif
    
    return true;
}
   b836c:	2001      	movs	r0, #1
   b836e:	bd10      	pop	{r4, pc}

000b8370 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b8370:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b8374:	2100      	movs	r1, #0
   b8376:	f003 be84 	b.w	bc082 <digitalWrite>

000b837a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b837a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b837e:	2101      	movs	r1, #1
   b8380:	f003 be7f 	b.w	bc082 <digitalWrite>

000b8384 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b8384:	b570      	push	{r4, r5, r6, lr}
   b8386:	4604      	mov	r4, r0
   b8388:	460d      	mov	r5, r1
   b838a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b838c:	f7ff fa7c 	bl	b7888 <_ZN15RHGenericDriverC1Ev>
   b8390:	4b03      	ldr	r3, [pc, #12]	; (b83a0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b8392:	6023      	str	r3, [r4, #0]
   b8394:	6226      	str	r6, [r4, #32]
   b8396:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b839a:	4620      	mov	r0, r4
   b839c:	bd70      	pop	{r4, r5, r6, pc}
   b839e:	bf00      	nop
   b83a0:	000bf304 	.word	0x000bf304

000b83a4 <_ZN11RHSPIDriver7spiReadEh>:
{
   b83a4:	b538      	push	{r3, r4, r5, lr}
   b83a6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b83a8:	6a00      	ldr	r0, [r0, #32]
   b83aa:	6803      	ldr	r3, [r0, #0]
   b83ac:	6a1b      	ldr	r3, [r3, #32]
{
   b83ae:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b83b0:	4798      	blx	r3
    selectSlave();
   b83b2:	6823      	ldr	r3, [r4, #0]
   b83b4:	4620      	mov	r0, r4
   b83b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b83b8:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b83ba:	6a20      	ldr	r0, [r4, #32]
   b83bc:	6803      	ldr	r3, [r0, #0]
   b83be:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b83c2:	681b      	ldr	r3, [r3, #0]
   b83c4:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b83c6:	6a20      	ldr	r0, [r4, #32]
   b83c8:	6803      	ldr	r3, [r0, #0]
   b83ca:	2100      	movs	r1, #0
   b83cc:	681b      	ldr	r3, [r3, #0]
   b83ce:	4798      	blx	r3
    deselectSlave();
   b83d0:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b83d2:	4605      	mov	r5, r0
    deselectSlave();
   b83d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b83d6:	4620      	mov	r0, r4
   b83d8:	4798      	blx	r3
    _spi.endTransaction();
   b83da:	6a20      	ldr	r0, [r4, #32]
   b83dc:	6803      	ldr	r3, [r0, #0]
   b83de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b83e0:	4798      	blx	r3
}
   b83e2:	4628      	mov	r0, r5
   b83e4:	bd38      	pop	{r3, r4, r5, pc}

000b83e6 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b83e6:	b570      	push	{r4, r5, r6, lr}
   b83e8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b83ea:	6a00      	ldr	r0, [r0, #32]
   b83ec:	6803      	ldr	r3, [r0, #0]
   b83ee:	6a1b      	ldr	r3, [r3, #32]
{
   b83f0:	4616      	mov	r6, r2
   b83f2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b83f4:	4798      	blx	r3
    selectSlave();
   b83f6:	6823      	ldr	r3, [r4, #0]
   b83f8:	4620      	mov	r0, r4
   b83fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b83fc:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b83fe:	6a20      	ldr	r0, [r4, #32]
   b8400:	6803      	ldr	r3, [r0, #0]
   b8402:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b8406:	681b      	ldr	r3, [r3, #0]
   b8408:	4798      	blx	r3
   b840a:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b840c:	6a20      	ldr	r0, [r4, #32]
   b840e:	6803      	ldr	r3, [r0, #0]
   b8410:	4631      	mov	r1, r6
   b8412:	681b      	ldr	r3, [r3, #0]
   b8414:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b8416:	2001      	movs	r0, #1
   b8418:	f000 fd9a 	bl	b8f50 <HAL_Delay_Microseconds>
    deselectSlave();
   b841c:	6823      	ldr	r3, [r4, #0]
   b841e:	4620      	mov	r0, r4
   b8420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8422:	4798      	blx	r3
    _spi.endTransaction();
   b8424:	6a20      	ldr	r0, [r4, #32]
   b8426:	6803      	ldr	r3, [r0, #0]
   b8428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b842a:	4798      	blx	r3
}
   b842c:	4628      	mov	r0, r5
   b842e:	bd70      	pop	{r4, r5, r6, pc}

000b8430 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b8430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8432:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b8434:	6a00      	ldr	r0, [r0, #32]
{
   b8436:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b8438:	6803      	ldr	r3, [r0, #0]
   b843a:	6a1b      	ldr	r3, [r3, #32]
{
   b843c:	460f      	mov	r7, r1
   b843e:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b8440:	4798      	blx	r3
    selectSlave();
   b8442:	6823      	ldr	r3, [r4, #0]
   b8444:	4620      	mov	r0, r4
   b8446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8448:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b844a:	6a20      	ldr	r0, [r4, #32]
   b844c:	6803      	ldr	r3, [r0, #0]
   b844e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b8452:	681b      	ldr	r3, [r3, #0]
   b8454:	4798      	blx	r3
   b8456:	442e      	add	r6, r5
   b8458:	4607      	mov	r7, r0
    while (len--)
   b845a:	42b5      	cmp	r5, r6
   b845c:	d007      	beq.n	b846e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b845e:	6a20      	ldr	r0, [r4, #32]
   b8460:	6803      	ldr	r3, [r0, #0]
   b8462:	2100      	movs	r1, #0
   b8464:	681b      	ldr	r3, [r3, #0]
   b8466:	4798      	blx	r3
   b8468:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b846c:	e7f5      	b.n	b845a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b846e:	6823      	ldr	r3, [r4, #0]
   b8470:	4620      	mov	r0, r4
   b8472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8474:	4798      	blx	r3
    _spi.endTransaction();
   b8476:	6a20      	ldr	r0, [r4, #32]
   b8478:	6803      	ldr	r3, [r0, #0]
   b847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b847c:	4798      	blx	r3
}
   b847e:	4638      	mov	r0, r7
   b8480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8482 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b8482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8484:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b8486:	6a00      	ldr	r0, [r0, #32]
{
   b8488:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b848a:	6803      	ldr	r3, [r0, #0]
   b848c:	6a1b      	ldr	r3, [r3, #32]
{
   b848e:	460f      	mov	r7, r1
   b8490:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b8492:	4798      	blx	r3
    selectSlave();
   b8494:	6823      	ldr	r3, [r4, #0]
   b8496:	4620      	mov	r0, r4
   b8498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b849a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b849c:	6a20      	ldr	r0, [r4, #32]
   b849e:	6803      	ldr	r3, [r0, #0]
   b84a0:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b84a4:	681b      	ldr	r3, [r3, #0]
   b84a6:	4798      	blx	r3
   b84a8:	442e      	add	r6, r5
   b84aa:	4607      	mov	r7, r0
    while (len--)
   b84ac:	42b5      	cmp	r5, r6
   b84ae:	d006      	beq.n	b84be <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b84b0:	6a20      	ldr	r0, [r4, #32]
   b84b2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b84b6:	6803      	ldr	r3, [r0, #0]
   b84b8:	681b      	ldr	r3, [r3, #0]
   b84ba:	4798      	blx	r3
    while (len--)
   b84bc:	e7f6      	b.n	b84ac <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b84be:	6823      	ldr	r3, [r4, #0]
   b84c0:	4620      	mov	r0, r4
   b84c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b84c4:	4798      	blx	r3
    _spi.endTransaction();
   b84c6:	6a20      	ldr	r0, [r4, #32]
   b84c8:	6803      	ldr	r3, [r0, #0]
   b84ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b84cc:	4798      	blx	r3
}
   b84ce:	4638      	mov	r0, r7
   b84d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b84d2 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b84d2:	6a00      	ldr	r0, [r0, #32]
   b84d4:	6803      	ldr	r3, [r0, #0]
   b84d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b84d8:	4718      	bx	r3

000b84da <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b84da:	2001      	movs	r0, #1
   b84dc:	4770      	bx	lr

000b84de <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b84de:	20fb      	movs	r0, #251	; 0xfb
   b84e0:	4770      	bx	lr

000b84e2 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b84e2:	4770      	bx	lr

000b84e4 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b84e4:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b84e6:	7903      	ldrb	r3, [r0, #4]
   b84e8:	2b05      	cmp	r3, #5
{
   b84ea:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b84ec:	d010      	beq.n	b8510 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b84ee:	6803      	ldr	r3, [r0, #0]
   b84f0:	2105      	movs	r1, #5
   b84f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b84f6:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b84f8:	2207      	movs	r2, #7
   b84fa:	2101      	movs	r1, #1
   b84fc:	4620      	mov	r0, r4
   b84fe:	f7ff ff72 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b8502:	2280      	movs	r2, #128	; 0x80
   b8504:	2140      	movs	r1, #64	; 0x40
   b8506:	4620      	mov	r0, r4
   b8508:	f7ff ff6d 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b850c:	2305      	movs	r3, #5
   b850e:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b8510:	7923      	ldrb	r3, [r4, #4]
   b8512:	2b05      	cmp	r3, #5
   b8514:	d0fc      	beq.n	b8510 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b8516:	7e20      	ldrb	r0, [r4, #24]
}
   b8518:	bd10      	pop	{r4, pc}

000b851a <_ZN7RH_RF95D0Ev>:
   b851a:	b510      	push	{r4, lr}
   b851c:	f44f 7198 	mov.w	r1, #304	; 0x130
   b8520:	4604      	mov	r4, r0
   b8522:	f7fb fdbc 	bl	b409e <_ZdlPvj>
   b8526:	4620      	mov	r0, r4
   b8528:	bd10      	pop	{r4, pc}

000b852a <_ZN7RH_RF955sleepEv>:
{
   b852a:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b852c:	7903      	ldrb	r3, [r0, #4]
   b852e:	2b01      	cmp	r3, #1
{
   b8530:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b8532:	d00b      	beq.n	b854c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b8534:	6803      	ldr	r3, [r0, #0]
   b8536:	2101      	movs	r1, #1
   b8538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b853c:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b853e:	2200      	movs	r2, #0
   b8540:	2101      	movs	r1, #1
   b8542:	4620      	mov	r0, r4
   b8544:	f7ff ff4f 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b8548:	2301      	movs	r3, #1
   b854a:	7123      	strb	r3, [r4, #4]
}
   b854c:	2001      	movs	r0, #1
   b854e:	bd10      	pop	{r4, pc}

000b8550 <_ZN7RH_RF954recvEPhS0_>:
{
   b8550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b8552:	6803      	ldr	r3, [r0, #0]
   b8554:	68db      	ldr	r3, [r3, #12]
{
   b8556:	4604      	mov	r4, r0
   b8558:	460f      	mov	r7, r1
   b855a:	4615      	mov	r5, r2
    if (!available())
   b855c:	4798      	blx	r3
   b855e:	4606      	mov	r6, r0
   b8560:	b1b0      	cbz	r0, b8590 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b8562:	b187      	cbz	r7, b8586 <_ZN7RH_RF954recvEPhS0_+0x36>
   b8564:	b17d      	cbz	r5, b8586 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b8566:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b856a:	782a      	ldrb	r2, [r5, #0]
   b856c:	3b03      	subs	r3, #3
   b856e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b8570:	bfde      	ittt	le
   b8572:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b8576:	3b04      	suble	r3, #4
   b8578:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b857a:	782a      	ldrb	r2, [r5, #0]
   b857c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b8580:	4638      	mov	r0, r7
   b8582:	f005 fc65 	bl	bde50 <memcpy>
    _rxBufValid = false;
   b8586:	2300      	movs	r3, #0
   b8588:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b858c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b8590:	4630      	mov	r0, r6
   b8592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8594 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b8594:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b8596:	b538      	push	{r3, r4, r5, lr}
   b8598:	4605      	mov	r5, r0
   b859a:	460c      	mov	r4, r1
	if (power > 20)
   b859c:	dc14      	bgt.n	b85c8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b859e:	2901      	cmp	r1, #1
   b85a0:	dd14      	ble.n	b85cc <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b85a2:	2911      	cmp	r1, #17
   b85a4:	dd13      	ble.n	b85ce <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b85a6:	2207      	movs	r2, #7
   b85a8:	214d      	movs	r1, #77	; 0x4d
   b85aa:	4628      	mov	r0, r5
   b85ac:	f7ff ff1b 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b85b0:	3c03      	subs	r4, #3
   b85b2:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b85b4:	1ea2      	subs	r2, r4, #2
   b85b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b85ba:	4628      	mov	r0, r5
   b85bc:	b2d2      	uxtb	r2, r2
}
   b85be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b85c2:	2109      	movs	r1, #9
   b85c4:	f7ff bf0f 	b.w	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b85c8:	2414      	movs	r4, #20
   b85ca:	e7ec      	b.n	b85a6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b85cc:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b85ce:	2204      	movs	r2, #4
   b85d0:	214d      	movs	r1, #77	; 0x4d
   b85d2:	4628      	mov	r0, r5
   b85d4:	f7ff ff07 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
   b85d8:	e7ec      	b.n	b85b4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b85dc <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b85dc:	b538      	push	{r3, r4, r5, lr}
   b85de:	4604      	mov	r4, r0
   b85e0:	4615      	mov	r5, r2
    _rxBufValid(0)
   b85e2:	461a      	mov	r2, r3
   b85e4:	f7ff fece 	bl	b8384 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b85e8:	4b09      	ldr	r3, [pc, #36]	; (b8610 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b85ea:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b85ec:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b85ee:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b85f0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b85f4:	2201      	movs	r2, #1
    _rxBufValid(0)
   b85f6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b85fa:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b85fe:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b8602:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b8606:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b860a:	4620      	mov	r0, r4
   b860c:	bd38      	pop	{r3, r4, r5, pc}
   b860e:	bf00      	nop
   b8610:	000bf3ec 	.word	0x000bf3ec

000b8614 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b8614:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b8618:	2b03      	cmp	r3, #3
   b861a:	d91b      	bls.n	b8654 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b861c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b8620:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b8622:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b8626:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b8628:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b862c:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b862e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b8632:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b8634:	7983      	ldrb	r3, [r0, #6]
   b8636:	b933      	cbnz	r3, b8646 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b8638:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b863a:	7942      	ldrb	r2, [r0, #5]
   b863c:	429a      	cmp	r2, r3
   b863e:	d002      	beq.n	b8646 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b8640:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b8642:	2bff      	cmp	r3, #255	; 0xff
   b8644:	d106      	bne.n	b8654 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b8646:	8a83      	ldrh	r3, [r0, #20]
   b8648:	3301      	adds	r3, #1
   b864a:	b29b      	uxth	r3, r3
   b864c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b864e:	2301      	movs	r3, #1
   b8650:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b8654:	4770      	bx	lr
	...

000b8658 <_ZN7RH_RF9512setFrequencyEf>:
{
   b8658:	b538      	push	{r3, r4, r5, lr}
   b865a:	4604      	mov	r4, r0
   b865c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8660:	ee10 0a10 	vmov	r0, s0
{
   b8664:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8668:	f005 f800 	bl	bd66c <__aeabi_f2d>
   b866c:	a317      	add	r3, pc, #92	; (adr r3, b86cc <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b866e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8672:	f005 f853 	bl	bd71c <__aeabi_dmul>
   b8676:	a317      	add	r3, pc, #92	; (adr r3, b86d4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b8678:	e9d3 2300 	ldrd	r2, r3, [r3]
   b867c:	f005 f978 	bl	bd970 <__aeabi_ddiv>
   b8680:	f005 fb24 	bl	bdccc <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b8684:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8686:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b8688:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b868c:	4620      	mov	r0, r4
   b868e:	f7ff feaa 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b8692:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b8696:	2107      	movs	r1, #7
   b8698:	4620      	mov	r0, r4
   b869a:	f7ff fea4 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b869e:	b2ea      	uxtb	r2, r5
   b86a0:	2108      	movs	r1, #8
   b86a2:	4620      	mov	r0, r4
   b86a4:	f7ff fe9f 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b86a8:	eddf 7a07 	vldr	s15, [pc, #28]	; b86c8 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b86ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b86b0:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b86b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b86b8:	bfac      	ite	ge
   b86ba:	2301      	movge	r3, #1
   b86bc:	2300      	movlt	r3, #0
}
   b86be:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b86c0:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b86c4:	bd38      	pop	{r3, r4, r5, pc}
   b86c6:	bf00      	nop
   b86c8:	4442c000 	.word	0x4442c000
   b86cc:	00000000 	.word	0x00000000
   b86d0:	412e8480 	.word	0x412e8480
   b86d4:	00000000 	.word	0x00000000
   b86d8:	404e8480 	.word	0x404e8480

000b86dc <_ZN7RH_RF9511setModeIdleEv>:
{
   b86dc:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b86de:	7903      	ldrb	r3, [r0, #4]
   b86e0:	2b02      	cmp	r3, #2
{
   b86e2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b86e4:	d00b      	beq.n	b86fe <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b86e6:	6803      	ldr	r3, [r0, #0]
   b86e8:	2102      	movs	r1, #2
   b86ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b86ee:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b86f0:	2201      	movs	r2, #1
   b86f2:	4611      	mov	r1, r2
   b86f4:	4620      	mov	r0, r4
   b86f6:	f7ff fe76 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b86fa:	2302      	movs	r3, #2
   b86fc:	7123      	strb	r3, [r4, #4]
}
   b86fe:	bd10      	pop	{r4, pc}

000b8700 <_ZN7RH_RF9515handleInterruptEv>:
{
   b8700:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b8702:	2112      	movs	r1, #18
{
   b8704:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b8706:	f7ff fe4d 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b870a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b870c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b870e:	4620      	mov	r0, r4
   b8710:	f7ff fe48 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8714:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b8716:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8718:	2112      	movs	r1, #18
   b871a:	4620      	mov	r0, r4
   b871c:	f7ff fe63 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b8720:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b8722:	2b04      	cmp	r3, #4
   b8724:	d107      	bne.n	b8736 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b8726:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b872a:	d117      	bne.n	b875c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b872c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b8730:	b10b      	cbz	r3, b8736 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b8732:	0670      	lsls	r0, r6, #25
   b8734:	d512      	bpl.n	b875c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b8736:	7923      	ldrb	r3, [r4, #4]
   b8738:	2b04      	cmp	r3, #4
   b873a:	d101      	bne.n	b8740 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b873c:	0669      	lsls	r1, r5, #25
   b873e:	d422      	bmi.n	b8786 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b8740:	7923      	ldrb	r3, [r4, #4]
   b8742:	2b03      	cmp	r3, #3
   b8744:	d101      	bne.n	b874a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b8746:	072a      	lsls	r2, r5, #28
   b8748:	d468      	bmi.n	b881c <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b874a:	7923      	ldrb	r3, [r4, #4]
   b874c:	2b05      	cmp	r3, #5
   b874e:	d10e      	bne.n	b876e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b8750:	076b      	lsls	r3, r5, #29
   b8752:	d50c      	bpl.n	b876e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b8754:	f005 0501 	and.w	r5, r5, #1
   b8758:	7625      	strb	r5, [r4, #24]
   b875a:	e063      	b.n	b8824 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b875c:	8a63      	ldrh	r3, [r4, #18]
   b875e:	3301      	adds	r3, #1
   b8760:	b29b      	uxth	r3, r3
   b8762:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b8764:	2300      	movs	r3, #0
   b8766:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b876a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b876e:	22ff      	movs	r2, #255	; 0xff
   b8770:	2112      	movs	r1, #18
   b8772:	4620      	mov	r0, r4
   b8774:	f7ff fe37 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8778:	4620      	mov	r0, r4
   b877a:	22ff      	movs	r2, #255	; 0xff
}
   b877c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8780:	2112      	movs	r1, #18
   b8782:	f7ff be30 	b.w	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b8786:	2113      	movs	r1, #19
   b8788:	4620      	mov	r0, r4
   b878a:	f7ff fe0b 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b878e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b8790:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b8792:	4620      	mov	r0, r4
   b8794:	f7ff fe06 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
   b8798:	210d      	movs	r1, #13
   b879a:	4602      	mov	r2, r0
   b879c:	4620      	mov	r0, r4
   b879e:	f7ff fe22 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b87a2:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b87a6:	462b      	mov	r3, r5
   b87a8:	2100      	movs	r1, #0
   b87aa:	4620      	mov	r0, r4
   b87ac:	f7ff fe40 	bl	b8430 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b87b0:	2119      	movs	r1, #25
	_bufLen = len;
   b87b2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b87b6:	4620      	mov	r0, r4
   b87b8:	f7ff fdf4 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
   b87bc:	b240      	sxtb	r0, r0
   b87be:	2800      	cmp	r0, #0
   b87c0:	bfb8      	it	lt
   b87c2:	3003      	addlt	r0, #3
   b87c4:	1080      	asrs	r0, r0, #2
   b87c6:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b87ca:	211a      	movs	r1, #26
   b87cc:	4620      	mov	r0, r4
   b87ce:	f7ff fde9 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b87d2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b87d6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b87d8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b87da:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b87dc:	bfa9      	itett	ge
   b87de:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b87e0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b87e2:	b21b      	sxthge	r3, r3
   b87e4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b87e6:	bfb2      	itee	lt
   b87e8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b87ea:	220f      	movge	r2, #15
   b87ec:	fb93 f3f2 	sdivge	r3, r3, r2
   b87f0:	b21b      	sxth	r3, r3
   b87f2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b87f4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b87f8:	b16b      	cbz	r3, b8816 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b87fa:	8a23      	ldrh	r3, [r4, #16]
   b87fc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b87fe:	b21b      	sxth	r3, r3
   b8800:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b8802:	4620      	mov	r0, r4
   b8804:	f7ff ff06 	bl	b8614 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b8808:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b880c:	2b00      	cmp	r3, #0
   b880e:	d0ae      	beq.n	b876e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b8810:	f7ff ff64 	bl	b86dc <_ZN7RH_RF9511setModeIdleEv>
   b8814:	e7ab      	b.n	b876e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b8816:	8a23      	ldrh	r3, [r4, #16]
   b8818:	3ba4      	subs	r3, #164	; 0xa4
   b881a:	e7f0      	b.n	b87fe <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b881c:	8ae3      	ldrh	r3, [r4, #22]
   b881e:	3301      	adds	r3, #1
   b8820:	b29b      	uxth	r3, r3
   b8822:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b8824:	4620      	mov	r0, r4
   b8826:	e7f3      	b.n	b8810 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b8828 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b8828:	4b02      	ldr	r3, [pc, #8]	; (b8834 <_ZN7RH_RF954isr0Ev+0xc>)
   b882a:	6818      	ldr	r0, [r3, #0]
   b882c:	b108      	cbz	r0, b8832 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b882e:	f7ff bf67 	b.w	b8700 <_ZN7RH_RF9515handleInterruptEv>
}
   b8832:	4770      	bx	lr
   b8834:	2003e600 	.word	0x2003e600

000b8838 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b8838:	4b02      	ldr	r3, [pc, #8]	; (b8844 <_ZN7RH_RF954isr1Ev+0xc>)
   b883a:	6858      	ldr	r0, [r3, #4]
   b883c:	b108      	cbz	r0, b8842 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b883e:	f7ff bf5f 	b.w	b8700 <_ZN7RH_RF9515handleInterruptEv>
}
   b8842:	4770      	bx	lr
   b8844:	2003e600 	.word	0x2003e600

000b8848 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b8848:	4b02      	ldr	r3, [pc, #8]	; (b8854 <_ZN7RH_RF954isr2Ev+0xc>)
   b884a:	6898      	ldr	r0, [r3, #8]
   b884c:	b108      	cbz	r0, b8852 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b884e:	f7ff bf57 	b.w	b8700 <_ZN7RH_RF9515handleInterruptEv>
}
   b8852:	4770      	bx	lr
   b8854:	2003e600 	.word	0x2003e600

000b8858 <_ZN7RH_RF959setModeRxEv>:
{
   b8858:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b885a:	7903      	ldrb	r3, [r0, #4]
   b885c:	2b04      	cmp	r3, #4
{
   b885e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b8860:	d010      	beq.n	b8884 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b8862:	6803      	ldr	r3, [r0, #0]
   b8864:	2104      	movs	r1, #4
   b8866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b886a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b886c:	2205      	movs	r2, #5
   b886e:	2101      	movs	r1, #1
   b8870:	4620      	mov	r0, r4
   b8872:	f7ff fdb8 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b8876:	2200      	movs	r2, #0
   b8878:	2140      	movs	r1, #64	; 0x40
   b887a:	4620      	mov	r0, r4
   b887c:	f7ff fdb3 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b8880:	2304      	movs	r3, #4
   b8882:	7123      	strb	r3, [r4, #4]
}
   b8884:	bd10      	pop	{r4, pc}

000b8886 <_ZN7RH_RF959availableEv>:
{
   b8886:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b8888:	7903      	ldrb	r3, [r0, #4]
   b888a:	2b03      	cmp	r3, #3
{
   b888c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b888e:	d005      	beq.n	b889c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b8890:	f7ff ffe2 	bl	b8858 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b8894:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b8898:	b2c0      	uxtb	r0, r0
}
   b889a:	bd10      	pop	{r4, pc}
	return false;
   b889c:	2000      	movs	r0, #0
   b889e:	e7fc      	b.n	b889a <_ZN7RH_RF959availableEv+0x14>

000b88a0 <_ZN7RH_RF959setModeTxEv>:
{
   b88a0:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b88a2:	7903      	ldrb	r3, [r0, #4]
   b88a4:	2b03      	cmp	r3, #3
{
   b88a6:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b88a8:	d010      	beq.n	b88cc <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b88aa:	6803      	ldr	r3, [r0, #0]
   b88ac:	2103      	movs	r1, #3
   b88ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b88b2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b88b4:	2203      	movs	r2, #3
   b88b6:	2101      	movs	r1, #1
   b88b8:	4620      	mov	r0, r4
   b88ba:	f7ff fd94 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b88be:	2240      	movs	r2, #64	; 0x40
   b88c0:	4611      	mov	r1, r2
   b88c2:	4620      	mov	r0, r4
   b88c4:	f7ff fd8f 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b88c8:	2303      	movs	r3, #3
   b88ca:	7123      	strb	r3, [r4, #4]
}
   b88cc:	bd10      	pop	{r4, pc}

000b88ce <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b88ce:	2afb      	cmp	r2, #251	; 0xfb
{
   b88d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b88d2:	4604      	mov	r4, r0
   b88d4:	460f      	mov	r7, r1
   b88d6:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b88d8:	d902      	bls.n	b88e0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b88da:	2600      	movs	r6, #0
}
   b88dc:	4630      	mov	r0, r6
   b88de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b88e0:	6803      	ldr	r3, [r0, #0]
   b88e2:	6a1b      	ldr	r3, [r3, #32]
   b88e4:	4798      	blx	r3
    setModeIdle();
   b88e6:	4620      	mov	r0, r4
   b88e8:	f7ff fef8 	bl	b86dc <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b88ec:	6823      	ldr	r3, [r4, #0]
   b88ee:	4620      	mov	r0, r4
   b88f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b88f2:	4798      	blx	r3
   b88f4:	4606      	mov	r6, r0
   b88f6:	2800      	cmp	r0, #0
   b88f8:	d0ef      	beq.n	b88da <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b88fa:	2200      	movs	r2, #0
   b88fc:	210d      	movs	r1, #13
   b88fe:	4620      	mov	r0, r4
   b8900:	f7ff fd71 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b8904:	7ae2      	ldrb	r2, [r4, #11]
   b8906:	2100      	movs	r1, #0
   b8908:	4620      	mov	r0, r4
   b890a:	f7ff fd6c 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b890e:	7b22      	ldrb	r2, [r4, #12]
   b8910:	2100      	movs	r1, #0
   b8912:	4620      	mov	r0, r4
   b8914:	f7ff fd67 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b8918:	7b62      	ldrb	r2, [r4, #13]
   b891a:	2100      	movs	r1, #0
   b891c:	4620      	mov	r0, r4
   b891e:	f7ff fd62 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b8922:	7ba2      	ldrb	r2, [r4, #14]
   b8924:	2100      	movs	r1, #0
   b8926:	4620      	mov	r0, r4
   b8928:	f7ff fd5d 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b892c:	462b      	mov	r3, r5
   b892e:	463a      	mov	r2, r7
   b8930:	2100      	movs	r1, #0
   b8932:	4620      	mov	r0, r4
   b8934:	f7ff fda5 	bl	b8482 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b8938:	1d2a      	adds	r2, r5, #4
   b893a:	b2d2      	uxtb	r2, r2
   b893c:	2122      	movs	r1, #34	; 0x22
   b893e:	4620      	mov	r0, r4
   b8940:	f7ff fd51 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b8944:	4620      	mov	r0, r4
   b8946:	f7ff ffab 	bl	b88a0 <_ZN7RH_RF959setModeTxEv>
    return true;
   b894a:	e7c7      	b.n	b88dc <_ZN7RH_RF954sendEPKhh+0xe>

000b894c <_ZN7RH_RF9510setTxPowerEab>:
{
   b894c:	b510      	push	{r4, lr}
   b894e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b8950:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b8954:	b172      	cbz	r2, b8974 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b8956:	f381 0204 	usat	r2, #4, r1
   b895a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b895e:	b2d2      	uxtb	r2, r2
   b8960:	2109      	movs	r1, #9
   b8962:	f7ff fd40 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b8966:	4620      	mov	r0, r4
   b8968:	2204      	movs	r2, #4
}
   b896a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b896e:	214d      	movs	r1, #77	; 0x4d
   b8970:	f7ff bd39 	b.w	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
}
   b8974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8978:	f7ff be0c 	b.w	b8594 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b897c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b897c:	b538      	push	{r3, r4, r5, lr}
   b897e:	460c      	mov	r4, r1
   b8980:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b8982:	780a      	ldrb	r2, [r1, #0]
   b8984:	211d      	movs	r1, #29
   b8986:	f7ff fd2e 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b898a:	7862      	ldrb	r2, [r4, #1]
   b898c:	211e      	movs	r1, #30
   b898e:	4628      	mov	r0, r5
   b8990:	f7ff fd29 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b8994:	78a2      	ldrb	r2, [r4, #2]
   b8996:	4628      	mov	r0, r5
   b8998:	2126      	movs	r1, #38	; 0x26
}
   b899a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b899e:	f7ff bd22 	b.w	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b89a4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b89a4:	2905      	cmp	r1, #5
{
   b89a6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b89a8:	d80f      	bhi.n	b89ca <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b89aa:	4b09      	ldr	r3, [pc, #36]	; (b89d0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b89ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b89b0:	185c      	adds	r4, r3, r1
   b89b2:	5a5a      	ldrh	r2, [r3, r1]
   b89b4:	78a3      	ldrb	r3, [r4, #2]
   b89b6:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b89ba:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b89bc:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b89c0:	f7ff ffdc 	bl	b897c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b89c4:	2001      	movs	r0, #1
}
   b89c6:	b002      	add	sp, #8
   b89c8:	bd10      	pop	{r4, pc}
        return false;
   b89ca:	2000      	movs	r0, #0
   b89cc:	e7fb      	b.n	b89c6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b89ce:	bf00      	nop
   b89d0:	000bf3d4 	.word	0x000bf3d4

000b89d4 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b89d4:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b89d6:	0a0a      	lsrs	r2, r1, #8
{
   b89d8:	4605      	mov	r5, r0
   b89da:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b89dc:	2120      	movs	r1, #32
   b89de:	f7ff fd02 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b89e2:	b2e2      	uxtb	r2, r4
   b89e4:	4628      	mov	r0, r5
   b89e6:	2121      	movs	r1, #33	; 0x21
}
   b89e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b89ec:	f7ff bcfb 	b.w	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>

000b89f0 <_ZN7RH_RF954initEv>:
{
   b89f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b89f2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b89f4:	f7ff fca6 	bl	b8344 <_ZN11RHSPIDriver4initEv>
   b89f8:	4606      	mov	r6, r0
   b89fa:	b918      	cbnz	r0, b8a04 <_ZN7RH_RF954initEv+0x14>
	return false;
   b89fc:	2600      	movs	r6, #0
}
   b89fe:	4630      	mov	r0, r6
   b8a00:	b002      	add	sp, #8
   b8a02:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b8a04:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b8a08:	2dff      	cmp	r5, #255	; 0xff
   b8a0a:	d054      	beq.n	b8ab6 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b8a0c:	4629      	mov	r1, r5
   b8a0e:	4620      	mov	r0, r4
   b8a10:	f7ff fd5f 	bl	b84d2 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b8a14:	2280      	movs	r2, #128	; 0x80
   b8a16:	2101      	movs	r1, #1
   b8a18:	4620      	mov	r0, r4
   b8a1a:	f7ff fce4 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b8a1e:	200a      	movs	r0, #10
   b8a20:	f000 fe48 	bl	b96b4 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b8a24:	2101      	movs	r1, #1
   b8a26:	4620      	mov	r0, r4
   b8a28:	f7ff fcbc 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
   b8a2c:	2880      	cmp	r0, #128	; 0x80
   b8a2e:	d1e5      	bne.n	b89fc <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b8a30:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b8a34:	28ff      	cmp	r0, #255	; 0xff
   b8a36:	d01c      	beq.n	b8a72 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b8a38:	2100      	movs	r1, #0
   b8a3a:	f003 fb11 	bl	bc060 <pinMode>
	if (_myInterruptIndex == 0xff)
   b8a3e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b8a42:	2bff      	cmp	r3, #255	; 0xff
   b8a44:	d107      	bne.n	b8a56 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b8a46:	4a26      	ldr	r2, [pc, #152]	; (b8ae0 <_ZN7RH_RF954initEv+0xf0>)
   b8a48:	7813      	ldrb	r3, [r2, #0]
   b8a4a:	2b03      	cmp	r3, #3
   b8a4c:	d8d6      	bhi.n	b89fc <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b8a4e:	1c59      	adds	r1, r3, #1
   b8a50:	7011      	strb	r1, [r2, #0]
   b8a52:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b8a56:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b8a5a:	4b22      	ldr	r3, [pc, #136]	; (b8ae4 <_ZN7RH_RF954initEv+0xf4>)
   b8a5c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b8a60:	bb62      	cbnz	r2, b8abc <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b8a62:	4921      	ldr	r1, [pc, #132]	; (b8ae8 <_ZN7RH_RF954initEv+0xf8>)
   b8a64:	9200      	str	r2, [sp, #0]
   b8a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8a6a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b8a6c:	b2a8      	uxth	r0, r5
   b8a6e:	f001 f8d9 	bl	b9c24 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b8a72:	2200      	movs	r2, #0
   b8a74:	210e      	movs	r1, #14
   b8a76:	4620      	mov	r0, r4
   b8a78:	f7ff fcb5 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b8a7c:	2200      	movs	r2, #0
   b8a7e:	210f      	movs	r1, #15
   b8a80:	4620      	mov	r0, r4
   b8a82:	f7ff fcb0 	bl	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b8a86:	4620      	mov	r0, r4
   b8a88:	f7ff fe28 	bl	b86dc <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b8a8c:	2100      	movs	r1, #0
   b8a8e:	4620      	mov	r0, r4
   b8a90:	f7ff ff88 	bl	b89a4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b8a94:	2108      	movs	r1, #8
   b8a96:	4620      	mov	r0, r4
   b8a98:	f7ff ff9c 	bl	b89d4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b8a9c:	ed9f 0a13 	vldr	s0, [pc, #76]	; b8aec <_ZN7RH_RF954initEv+0xfc>
   b8aa0:	4620      	mov	r0, r4
   b8aa2:	f7ff fdd9 	bl	b8658 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b8aa6:	2300      	movs	r3, #0
   b8aa8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b8aac:	210d      	movs	r1, #13
   b8aae:	4620      	mov	r0, r4
   b8ab0:	f7ff fd70 	bl	b8594 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b8ab4:	e7a3      	b.n	b89fe <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b8ab6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b8aba:	e7ab      	b.n	b8a14 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b8abc:	2a01      	cmp	r2, #1
   b8abe:	f04f 0300 	mov.w	r3, #0
   b8ac2:	d104      	bne.n	b8ace <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b8ac4:	9300      	str	r3, [sp, #0]
   b8ac6:	490a      	ldr	r1, [pc, #40]	; (b8af0 <_ZN7RH_RF954initEv+0x100>)
   b8ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8acc:	e7ce      	b.n	b8a6c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b8ace:	2a02      	cmp	r2, #2
   b8ad0:	d194      	bne.n	b89fc <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b8ad2:	9300      	str	r3, [sp, #0]
   b8ad4:	4907      	ldr	r1, [pc, #28]	; (b8af4 <_ZN7RH_RF954initEv+0x104>)
   b8ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8ada:	2201      	movs	r2, #1
   b8adc:	e7c6      	b.n	b8a6c <_ZN7RH_RF954initEv+0x7c>
   b8ade:	bf00      	nop
   b8ae0:	2003e5fd 	.word	0x2003e5fd
   b8ae4:	2003e600 	.word	0x2003e600
   b8ae8:	000b8829 	.word	0x000b8829
   b8aec:	43d90000 	.word	0x43d90000
   b8af0:	000b8839 	.word	0x000b8839
   b8af4:	000b8849 	.word	0x000b8849

000b8af8 <_ZN7RH_RF957lastSNREv>:
}

int RH_RF95::lastSNR()
{
    return _lastSNR;
}
   b8af8:	f990 012a 	ldrsb.w	r0, [r0, #298]	; 0x12a
   b8afc:	4770      	bx	lr
	...

000b8b00 <_ZN7RH_RF9514setLowDatarateEv>:
    // CR is bits 3..1 of RH_RF95_REG_1D_MODEM_CONFIG1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1, (spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) & ~RH_RF95_CODING_RATE) | cr);
}
 
void RH_RF95::setLowDatarate()
{
   b8b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // "To avoid issues surrounding  drift  of  the  crystal  reference  oscillator  due  to  either  temperature  change  
    // or  motion,the  low  data  rate optimization  bit  is  used. Specifically for 125  kHz  bandwidth  and  SF  =  11  and  12,  
    // this  adds  a  small  overhead  to increase robustness to reference frequency variations over the timescale of the LoRa packet."
 
    // read current value for BW and SF
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   b8b04:	211d      	movs	r1, #29
{
   b8b06:	b08b      	sub	sp, #44	; 0x2c
   b8b08:	4607      	mov	r7, r0
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   b8b0a:	f7ff fc4b 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   b8b0e:	211e      	movs	r1, #30
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   b8b10:	4606      	mov	r6, r0
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   b8b12:	4638      	mov	r0, r7
   b8b14:	f7ff fc46 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
   
    // calculate symbol time (see Semtech AN1200.22 section 4)
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   b8b18:	4d27      	ldr	r5, [pc, #156]	; (b8bb8 <_ZN7RH_RF9514setLowDatarateEv+0xb8>)
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   b8b1a:	4684      	mov	ip, r0
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   b8b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b1e:	466c      	mov	r4, sp
   b8b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8b26:	e895 0003 	ldmia.w	r5, {r0, r1}
   
    float bandwidth = bw_tab[BW];
   b8b2a:	ab0a      	add	r3, sp, #40	; 0x28
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   b8b2c:	e884 0003 	stmia.w	r4, {r0, r1}
    float bandwidth = bw_tab[BW];
   b8b30:	f3c6 1607 	ubfx	r6, r6, #4, #8
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b8b34:	f3cc 1007 	ubfx	r0, ip, #4, #8
   b8b38:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   b8b3c:	f004 fd74 	bl	bd628 <__aeabi_ui2d>
   b8b40:	ed9f 0b1b 	vldr	d0, [pc, #108]	; b8bb0 <_ZN7RH_RF9514setLowDatarateEv+0xb0>
   b8b44:	ec41 0b11 	vmov	d1, r0, r1
   b8b48:	f856 5c28 	ldr.w	r5, [r6, #-40]
   b8b4c:	f003 fba4 	bl	bc298 <pow>
    // https://www.thethingsnetwork.org/forum/t/a-point-to-note-lora-low-data-rate-optimisation-flag/12007
    // the LDR bit should be set if the Symbol Time is > 16ms
    // So the threshold used here is 16.0ms
 
    // the LDR is bit 3 of RH_RF95_REG_26_MODEM_CONFIG3
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
   b8b50:	2126      	movs	r1, #38	; 0x26
   b8b52:	4638      	mov	r0, r7
   b8b54:	ec59 8b10 	vmov	r8, r9, d0
   b8b58:	f7ff fc24 	bl	b83a4 <_ZN11RHSPIDriver7spiReadEh>
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
   b8b5c:	4b17      	ldr	r3, [pc, #92]	; (b8bbc <_ZN7RH_RF9514setLowDatarateEv+0xbc>)
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
   b8b5e:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
   b8b62:	2200      	movs	r2, #0
   b8b64:	4640      	mov	r0, r8
   b8b66:	4649      	mov	r1, r9
   b8b68:	f004 fdd8 	bl	bd71c <__aeabi_dmul>
   b8b6c:	4680      	mov	r8, r0
   b8b6e:	4628      	mov	r0, r5
   b8b70:	4689      	mov	r9, r1
   b8b72:	f004 fd7b 	bl	bd66c <__aeabi_f2d>
   b8b76:	4602      	mov	r2, r0
   b8b78:	460b      	mov	r3, r1
   b8b7a:	4640      	mov	r0, r8
   b8b7c:	4649      	mov	r1, r9
   b8b7e:	f004 fef7 	bl	bd970 <__aeabi_ddiv>
   b8b82:	f005 f8c3 	bl	bdd0c <__aeabi_d2f>
    if (symbolTime > 16.0)
   b8b86:	ee07 0a10 	vmov	s14, r0
   b8b8a:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   b8b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b8b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current | RH_RF95_LOW_DATA_RATE_OPTIMIZE);
   b8b96:	bfcc      	ite	gt
   b8b98:	f044 0208 	orrgt.w	r2, r4, #8
    else
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
   b8b9c:	4622      	movle	r2, r4
   b8b9e:	2126      	movs	r1, #38	; 0x26
   b8ba0:	4638      	mov	r0, r7
   
}
   b8ba2:	b00b      	add	sp, #44	; 0x2c
   b8ba4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
   b8ba8:	f7ff bc1d 	b.w	b83e6 <_ZN11RHSPIDriver8spiWriteEhh>
   b8bac:	f3af 8000 	nop.w
   b8bb0:	00000000 	.word	0x00000000
   b8bb4:	40000000 	.word	0x40000000
   b8bb8:	000bf3ac 	.word	0x000bf3ac
   b8bbc:	408f4000 	.word	0x408f4000

000b8bc0 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b8bc0:	6803      	ldr	r3, [r0, #0]
   b8bc2:	685b      	ldr	r3, [r3, #4]
   b8bc4:	4718      	bx	r3

000b8bc6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8bc6:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b8bc8:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8bca:	4604      	mov	r4, r0
    if (lastUpdate) {
   b8bcc:	b133      	cbz	r3, b8bdc <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8bce:	b131      	cbz	r1, b8bde <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b8bd0:	6823      	ldr	r3, [r4, #0]
   b8bd2:	4620      	mov	r0, r4
   b8bd4:	689b      	ldr	r3, [r3, #8]
   b8bd6:	4798      	blx	r3
            lastUpdate = 0;
   b8bd8:	2300      	movs	r3, #0
   b8bda:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b8bdc:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8bde:	f000 f9bf 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8be2:	69a3      	ldr	r3, [r4, #24]
   b8be4:	1ac0      	subs	r0, r0, r3
   b8be6:	69e3      	ldr	r3, [r4, #28]
   b8be8:	4298      	cmp	r0, r3
   b8bea:	d2f1      	bcs.n	b8bd0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b8bec:	e7f6      	b.n	b8bdc <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b8bee <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8bee:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b8bf0:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8bf2:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b8bf4:	b11b      	cbz	r3, b8bfe <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8bf6:	f000 f9b3 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b8bfa:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b8bfc:	bd10      	pop	{r4, pc}
        save();
   b8bfe:	6803      	ldr	r3, [r0, #0]
}
   b8c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b8c04:	689b      	ldr	r3, [r3, #8]
   b8c06:	4718      	bx	r3

000b8c08 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   b8c08:	f000 b972 	b.w	b8ef0 <os_mutex_recursive_unlock>

000b8c0c <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b8c0c:	b507      	push	{r0, r1, r2, lr}
   b8c0e:	4613      	mov	r3, r2
    if (data) {
   b8c10:	b139      	cbz	r1, b8c22 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b8c12:	2200      	movs	r2, #0
   b8c14:	e9cd 2200 	strd	r2, r2, [sp]
   b8c18:	460a      	mov	r2, r1
   b8c1a:	6801      	ldr	r1, [r0, #0]
   b8c1c:	201e      	movs	r0, #30
   b8c1e:	f000 fb8f 	bl	b9340 <log_dump>
}
   b8c22:	b003      	add	sp, #12
   b8c24:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c28 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   b8c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   b8c2a:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   b8c2e:	4604      	mov	r4, r0
    if (logData) {
   b8c30:	b19b      	cbz	r3, b8c5a <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b8c32:	6883      	ldr	r3, [r0, #8]
   b8c34:	4d0a      	ldr	r5, [pc, #40]	; (b8c60 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   b8c36:	88da      	ldrh	r2, [r3, #6]
   b8c38:	490a      	ldr	r1, [pc, #40]	; (b8c64 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   b8c3a:	4628      	mov	r0, r5
   b8c3c:	f7fb fbb8 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b8c40:	68a1      	ldr	r1, [r4, #8]
   b8c42:	4628      	mov	r0, r5
   b8c44:	88ca      	ldrh	r2, [r1, #6]
   b8c46:	f7ff ffe1 	bl	b8c0c <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b8c4a:	2300      	movs	r3, #0
   b8c4c:	9300      	str	r3, [sp, #0]
   b8c4e:	4a06      	ldr	r2, [pc, #24]	; (b8c68 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b8c50:	6829      	ldr	r1, [r5, #0]
   b8c52:	2301      	movs	r3, #1
   b8c54:	201e      	movs	r0, #30
   b8c56:	f000 fb6b 	bl	b9330 <log_write>
        Log.print("\n");
    }
}
   b8c5a:	b003      	add	sp, #12
   b8c5c:	bd30      	pop	{r4, r5, pc}
   b8c5e:	bf00      	nop
   b8c60:	2003e654 	.word	0x2003e654
   b8c64:	000bf470 	.word	0x000bf470
   b8c68:	000bf670 	.word	0x000bf670

000b8c6c <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b8c6c:	b510      	push	{r4, lr}
   b8c6e:	4604      	mov	r4, r0
   b8c70:	3004      	adds	r0, #4
   b8c72:	f7fd f877 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8c76:	6823      	ldr	r3, [r4, #0]
   b8c78:	68e1      	ldr	r1, [r4, #12]
   b8c7a:	695b      	ldr	r3, [r3, #20]
   b8c7c:	4620      	mov	r0, r4
   b8c7e:	4798      	blx	r3
   b8c80:	b918      	cbnz	r0, b8c8a <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b8c82:	6823      	ldr	r3, [r4, #0]
   b8c84:	4620      	mov	r0, r4
   b8c86:	699b      	ldr	r3, [r3, #24]
   b8c88:	4798      	blx	r3
      { _M_device.unlock(); }
   b8c8a:	6860      	ldr	r0, [r4, #4]
   b8c8c:	f7ff ffbc 	bl	b8c08 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8c90:	2001      	movs	r0, #1
   b8c92:	bd10      	pop	{r4, pc}

000b8c94 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c96:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b8c9a:	4f18      	ldr	r7, [pc, #96]	; (b8cfc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8c9c:	4e18      	ldr	r6, [pc, #96]	; (b8d00 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b8c9e:	4d19      	ldr	r5, [pc, #100]	; (b8d04 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b8ca0:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b8ca2:	42a0      	cmp	r0, r4
   b8ca4:	d00c      	beq.n	b8cc0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8ca6:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b8caa:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8cac:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b8cb0:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b8cb2:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8cb4:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b8cb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b8cbc:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b8cbe:	e7f0      	b.n	b8ca2 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b8cc0:	f001 0403 	and.w	r4, r1, #3
   b8cc4:	4404      	add	r4, r0
    k = 0;
   b8cc6:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b8cc8:	42a0      	cmp	r0, r4
   b8cca:	d004      	beq.n	b8cd6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b8ccc:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b8cd0:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8cd4:	e7f8      	b.n	b8cc8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b8cd6:	4809      	ldr	r0, [pc, #36]	; (b8cfc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b8cd8:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b8cda:	4809      	ldr	r0, [pc, #36]	; (b8d00 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8cdc:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b8ce0:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b8ce2:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8ce4:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b8ce6:	4b08      	ldr	r3, [pc, #32]	; (b8d08 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b8ce8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b8cec:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b8cee:	4b07      	ldr	r3, [pc, #28]	; (b8d0c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b8cf0:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b8cf4:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b8cf6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b8cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8cfc:	cc9e2d51 	.word	0xcc9e2d51
   b8d00:	1b873593 	.word	0x1b873593
   b8d04:	e6546b64 	.word	0xe6546b64
   b8d08:	85ebca6b 	.word	0x85ebca6b
   b8d0c:	c2b2ae35 	.word	0xc2b2ae35

000b8d10 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b8d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d12:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8d14:	3004      	adds	r0, #4
   b8d16:	f7fd f825 	bl	b5d64 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b8d1a:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b8d1c:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b8d1e:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b8d20:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8d22:	68a6      	ldr	r6, [r4, #8]
   b8d24:	4a05      	ldr	r2, [pc, #20]	; (b8d3c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b8d26:	88f1      	ldrh	r1, [r6, #6]
   b8d28:	4630      	mov	r0, r6
   b8d2a:	f7ff ffb3 	bl	b8c94 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b8d2e:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8d30:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b8d32:	6860      	ldr	r0, [r4, #4]
   b8d34:	f7ff ff68 	bl	b8c08 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8d38:	4628      	mov	r0, r5
   b8d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8d3c:	851c2a3f 	.word	0x851c2a3f

000b8d40 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b8d40:	b570      	push	{r4, r5, r6, lr}
   b8d42:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b8d44:	6885      	ldr	r5, [r0, #8]
   b8d46:	f7ff ffe3 	bl	b8d10 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8d4a:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b8d4c:	6823      	ldr	r3, [r4, #0]
   b8d4e:	4620      	mov	r0, r4
   b8d50:	691b      	ldr	r3, [r3, #16]
}
   b8d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b8d56:	4718      	bx	r3

000b8d58 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b8d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8d5a:	4604      	mov	r4, r0
   b8d5c:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   b8d5e:	f7ff ffd7 	bl	b8d10 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   b8d62:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   b8d66:	4606      	mov	r6, r0
    if (logData) {
   b8d68:	b193      	cbz	r3, b8d90 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   b8d6a:	4f29      	ldr	r7, [pc, #164]	; (b8e10 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b8d6c:	4929      	ldr	r1, [pc, #164]	; (b8e14 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   b8d6e:	462a      	mov	r2, r5
   b8d70:	4638      	mov	r0, r7
   b8d72:	f7fb fb1d 	bl	b43b0 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b8d76:	68a1      	ldr	r1, [r4, #8]
   b8d78:	462a      	mov	r2, r5
   b8d7a:	4638      	mov	r0, r7
   b8d7c:	f7ff ff46 	bl	b8c0c <_ZNK5spark6Logger4dumpEPKvj>
   b8d80:	2300      	movs	r3, #0
   b8d82:	9300      	str	r3, [sp, #0]
   b8d84:	4a24      	ldr	r2, [pc, #144]	; (b8e18 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   b8d86:	6839      	ldr	r1, [r7, #0]
   b8d88:	2301      	movs	r3, #1
   b8d8a:	201e      	movs	r0, #30
   b8d8c:	f000 fad0 	bl	b9330 <log_write>
    if (dataSize >= 12 && 
   b8d90:	2d0b      	cmp	r5, #11
   b8d92:	d923      	bls.n	b8ddc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   b8d94:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b8d96:	6922      	ldr	r2, [r4, #16]
   b8d98:	6819      	ldr	r1, [r3, #0]
   b8d9a:	4291      	cmp	r1, r2
   b8d9c:	d11f      	bne.n	b8dde <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   b8d9e:	8899      	ldrh	r1, [r3, #4]
   b8da0:	8aa2      	ldrh	r2, [r4, #20]
   b8da2:	4291      	cmp	r1, r2
   b8da4:	d11b      	bne.n	b8dde <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   b8da6:	88d9      	ldrh	r1, [r3, #6]
   b8da8:	b2aa      	uxth	r2, r5
   b8daa:	4291      	cmp	r1, r2
   b8dac:	d817      	bhi.n	b8dde <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b8dae:	689a      	ldr	r2, [r3, #8]
   b8db0:	42b2      	cmp	r2, r6
   b8db2:	d114      	bne.n	b8dde <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   b8db4:	68e2      	ldr	r2, [r4, #12]
   b8db6:	42aa      	cmp	r2, r5
   b8db8:	d905      	bls.n	b8dc6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   b8dba:	2100      	movs	r1, #0
   b8dbc:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b8dbe:	68e2      	ldr	r2, [r4, #12]
   b8dc0:	3501      	adds	r5, #1
   b8dc2:	42aa      	cmp	r2, r5
   b8dc4:	d8fa      	bhi.n	b8dbc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8dc6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b8dca:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8dcc:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b8dce:	68a5      	ldr	r5, [r4, #8]
   b8dd0:	f7ff ff9e 	bl	b8d10 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8dd4:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b8dd6:	2001      	movs	r0, #1
}
   b8dd8:	b003      	add	sp, #12
   b8dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8ddc:	b19d      	cbz	r5, b8e06 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   b8dde:	68a1      	ldr	r1, [r4, #8]
   b8de0:	680a      	ldr	r2, [r1, #0]
   b8de2:	b192      	cbz	r2, b8e0a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b8de4:	6888      	ldr	r0, [r1, #8]
   b8de6:	888b      	ldrh	r3, [r1, #4]
   b8de8:	9001      	str	r0, [sp, #4]
   b8dea:	88c9      	ldrh	r1, [r1, #6]
   b8dec:	4808      	ldr	r0, [pc, #32]	; (b8e10 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b8dee:	9100      	str	r1, [sp, #0]
   b8df0:	490a      	ldr	r1, [pc, #40]	; (b8e1c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b8df2:	f7fd fdc9 	bl	b6988 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b8df6:	e9cd 5600 	strd	r5, r6, [sp]
   b8dfa:	8aa3      	ldrh	r3, [r4, #20]
   b8dfc:	6922      	ldr	r2, [r4, #16]
   b8dfe:	4908      	ldr	r1, [pc, #32]	; (b8e20 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b8e00:	4803      	ldr	r0, [pc, #12]	; (b8e10 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b8e02:	f7fd fdc1 	bl	b6988 <_ZNK5spark6Logger5traceEPKcz>
   b8e06:	2000      	movs	r0, #0
   b8e08:	e7e6      	b.n	b8dd8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b8e0a:	4610      	mov	r0, r2
   b8e0c:	e7e4      	b.n	b8dd8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b8e0e:	bf00      	nop
   b8e10:	2003e654 	.word	0x2003e654
   b8e14:	000bf484 	.word	0x000bf484
   b8e18:	000bf670 	.word	0x000bf670
   b8e1c:	000bf49c 	.word	0x000bf49c
   b8e20:	000bf4cd 	.word	0x000bf4cd

000b8e24 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b8e24:	b538      	push	{r3, r4, r5, lr}
   b8e26:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8e28:	68c2      	ldr	r2, [r0, #12]
   b8e2a:	6880      	ldr	r0, [r0, #8]
   b8e2c:	2100      	movs	r1, #0
   b8e2e:	f005 f837 	bl	bdea0 <memset>
    savedDataHeader->magic = savedDataMagic;
   b8e32:	68a3      	ldr	r3, [r4, #8]
   b8e34:	6922      	ldr	r2, [r4, #16]
   b8e36:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8e38:	68a3      	ldr	r3, [r4, #8]
   b8e3a:	8aa2      	ldrh	r2, [r4, #20]
   b8e3c:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8e3e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b8e42:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8e44:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b8e46:	68a5      	ldr	r5, [r4, #8]
   b8e48:	f7ff ff62 	bl	b8d10 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8e4c:	60a8      	str	r0, [r5, #8]
}
   b8e4e:	bd38      	pop	{r3, r4, r5, pc}

000b8e50 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b8e50:	b508      	push	{r3, lr}
   b8e52:	4b02      	ldr	r3, [pc, #8]	; (b8e5c <cellular_signal+0xc>)
   b8e54:	681b      	ldr	r3, [r3, #0]
   b8e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8e58:	9301      	str	r3, [sp, #4]
   b8e5a:	bd08      	pop	{r3, pc}
   b8e5c:	00030274 	.word	0x00030274

000b8e60 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b8e60:	b508      	push	{r3, lr}
   b8e62:	4b02      	ldr	r3, [pc, #8]	; (b8e6c <os_thread_yield+0xc>)
   b8e64:	681b      	ldr	r3, [r3, #0]
   b8e66:	68db      	ldr	r3, [r3, #12]
   b8e68:	9301      	str	r3, [sp, #4]
   b8e6a:	bd08      	pop	{r3, pc}
   b8e6c:	00030248 	.word	0x00030248

000b8e70 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b8e70:	b508      	push	{r3, lr}
   b8e72:	4b02      	ldr	r3, [pc, #8]	; (b8e7c <os_thread_scheduling+0xc>)
   b8e74:	681b      	ldr	r3, [r3, #0]
   b8e76:	69db      	ldr	r3, [r3, #28]
   b8e78:	9301      	str	r3, [sp, #4]
   b8e7a:	bd08      	pop	{r3, pc}
   b8e7c:	00030248 	.word	0x00030248

000b8e80 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b8e80:	b508      	push	{r3, lr}
   b8e82:	4b02      	ldr	r3, [pc, #8]	; (b8e8c <os_timer_create+0xc>)
   b8e84:	681b      	ldr	r3, [r3, #0]
   b8e86:	6a1b      	ldr	r3, [r3, #32]
   b8e88:	9301      	str	r3, [sp, #4]
   b8e8a:	bd08      	pop	{r3, pc}
   b8e8c:	00030248 	.word	0x00030248

000b8e90 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b8e90:	b508      	push	{r3, lr}
   b8e92:	4b02      	ldr	r3, [pc, #8]	; (b8e9c <os_timer_destroy+0xc>)
   b8e94:	681b      	ldr	r3, [r3, #0]
   b8e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8e98:	9301      	str	r3, [sp, #4]
   b8e9a:	bd08      	pop	{r3, pc}
   b8e9c:	00030248 	.word	0x00030248

000b8ea0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b8ea0:	b508      	push	{r3, lr}
   b8ea2:	4b02      	ldr	r3, [pc, #8]	; (b8eac <os_timer_get_id+0xc>)
   b8ea4:	681b      	ldr	r3, [r3, #0]
   b8ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8ea8:	9301      	str	r3, [sp, #4]
   b8eaa:	bd08      	pop	{r3, pc}
   b8eac:	00030248 	.word	0x00030248

000b8eb0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b8eb0:	b508      	push	{r3, lr}
   b8eb2:	4b02      	ldr	r3, [pc, #8]	; (b8ebc <os_timer_change+0xc>)
   b8eb4:	681b      	ldr	r3, [r3, #0]
   b8eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8eb8:	9301      	str	r3, [sp, #4]
   b8eba:	bd08      	pop	{r3, pc}
   b8ebc:	00030248 	.word	0x00030248

000b8ec0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8ec0:	b508      	push	{r3, lr}
   b8ec2:	4b02      	ldr	r3, [pc, #8]	; (b8ecc <os_mutex_recursive_create+0xc>)
   b8ec4:	681b      	ldr	r3, [r3, #0]
   b8ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ec8:	9301      	str	r3, [sp, #4]
   b8eca:	bd08      	pop	{r3, pc}
   b8ecc:	00030248 	.word	0x00030248

000b8ed0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b8ed0:	b508      	push	{r3, lr}
   b8ed2:	4b02      	ldr	r3, [pc, #8]	; (b8edc <os_mutex_recursive_destroy+0xc>)
   b8ed4:	681b      	ldr	r3, [r3, #0]
   b8ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8ed8:	9301      	str	r3, [sp, #4]
   b8eda:	bd08      	pop	{r3, pc}
   b8edc:	00030248 	.word	0x00030248

000b8ee0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8ee0:	b508      	push	{r3, lr}
   b8ee2:	4b02      	ldr	r3, [pc, #8]	; (b8eec <os_mutex_recursive_lock+0xc>)
   b8ee4:	681b      	ldr	r3, [r3, #0]
   b8ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8ee8:	9301      	str	r3, [sp, #4]
   b8eea:	bd08      	pop	{r3, pc}
   b8eec:	00030248 	.word	0x00030248

000b8ef0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8ef0:	b508      	push	{r3, lr}
   b8ef2:	4b02      	ldr	r3, [pc, #8]	; (b8efc <os_mutex_recursive_unlock+0xc>)
   b8ef4:	681b      	ldr	r3, [r3, #0]
   b8ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8ef8:	9301      	str	r3, [sp, #4]
   b8efa:	bd08      	pop	{r3, pc}
   b8efc:	00030248 	.word	0x00030248

000b8f00 <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   b8f00:	b508      	push	{r3, lr}
   b8f02:	4b02      	ldr	r3, [pc, #8]	; (b8f0c <os_timer_is_active+0xc>)
   b8f04:	681b      	ldr	r3, [r3, #0]
   b8f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8f08:	9301      	str	r3, [sp, #4]
   b8f0a:	bd08      	pop	{r3, pc}
   b8f0c:	00030248 	.word	0x00030248

000b8f10 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b8f10:	b508      	push	{r3, lr}
   b8f12:	4b02      	ldr	r3, [pc, #8]	; (b8f1c <os_timer_set_id+0xc>)
   b8f14:	681b      	ldr	r3, [r3, #0]
   b8f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8f18:	9301      	str	r3, [sp, #4]
   b8f1a:	bd08      	pop	{r3, pc}
   b8f1c:	00030248 	.word	0x00030248

000b8f20 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8f20:	b508      	push	{r3, lr}
   b8f22:	4b02      	ldr	r3, [pc, #8]	; (b8f2c <HAL_Core_Runtime_Info+0xc>)
   b8f24:	681b      	ldr	r3, [r3, #0]
   b8f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8f28:	9301      	str	r3, [sp, #4]
   b8f2a:	bd08      	pop	{r3, pc}
   b8f2c:	00030234 	.word	0x00030234

000b8f30 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8f30:	b508      	push	{r3, lr}
   b8f32:	4b02      	ldr	r3, [pc, #8]	; (b8f3c <HAL_Feature_Set+0xc>)
   b8f34:	681b      	ldr	r3, [r3, #0]
   b8f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8f38:	9301      	str	r3, [sp, #4]
   b8f3a:	bd08      	pop	{r3, pc}
   b8f3c:	00030234 	.word	0x00030234

000b8f40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8f40:	b508      	push	{r3, lr}
   b8f42:	4b02      	ldr	r3, [pc, #8]	; (b8f4c <HAL_RNG_GetRandomNumber+0xc>)
   b8f44:	681b      	ldr	r3, [r3, #0]
   b8f46:	685b      	ldr	r3, [r3, #4]
   b8f48:	9301      	str	r3, [sp, #4]
   b8f4a:	bd08      	pop	{r3, pc}
   b8f4c:	00030218 	.word	0x00030218

000b8f50 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8f50:	b508      	push	{r3, lr}
   b8f52:	4b02      	ldr	r3, [pc, #8]	; (b8f5c <HAL_Delay_Microseconds+0xc>)
   b8f54:	681b      	ldr	r3, [r3, #0]
   b8f56:	68db      	ldr	r3, [r3, #12]
   b8f58:	9301      	str	r3, [sp, #4]
   b8f5a:	bd08      	pop	{r3, pc}
   b8f5c:	00030218 	.word	0x00030218

000b8f60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8f60:	b508      	push	{r3, lr}
   b8f62:	4b02      	ldr	r3, [pc, #8]	; (b8f6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8f64:	681b      	ldr	r3, [r3, #0]
   b8f66:	695b      	ldr	r3, [r3, #20]
   b8f68:	9301      	str	r3, [sp, #4]
   b8f6a:	bd08      	pop	{r3, pc}
   b8f6c:	00030218 	.word	0x00030218

000b8f70 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8f70:	b508      	push	{r3, lr}
   b8f72:	4b02      	ldr	r3, [pc, #8]	; (b8f7c <hal_rtc_time_is_valid+0xc>)
   b8f74:	681b      	ldr	r3, [r3, #0]
   b8f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8f78:	9301      	str	r3, [sp, #4]
   b8f7a:	bd08      	pop	{r3, pc}
   b8f7c:	00030218 	.word	0x00030218

000b8f80 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8f80:	b508      	push	{r3, lr}
   b8f82:	4b02      	ldr	r3, [pc, #8]	; (b8f8c <hal_timer_millis+0xc>)
   b8f84:	681b      	ldr	r3, [r3, #0]
   b8f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8f88:	9301      	str	r3, [sp, #4]
   b8f8a:	bd08      	pop	{r3, pc}
   b8f8c:	00030218 	.word	0x00030218

000b8f90 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8f90:	b508      	push	{r3, lr}
   b8f92:	4b02      	ldr	r3, [pc, #8]	; (b8f9c <hal_rtc_get_time+0xc>)
   b8f94:	681b      	ldr	r3, [r3, #0]
   b8f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8f98:	9301      	str	r3, [sp, #4]
   b8f9a:	bd08      	pop	{r3, pc}
   b8f9c:	00030218 	.word	0x00030218

000b8fa0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8fa0:	b508      	push	{r3, lr}
   b8fa2:	4b02      	ldr	r3, [pc, #8]	; (b8fac <hal_rtc_set_time+0xc>)
   b8fa4:	681b      	ldr	r3, [r3, #0]
   b8fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8fa8:	9301      	str	r3, [sp, #4]
   b8faa:	bd08      	pop	{r3, pc}
   b8fac:	00030218 	.word	0x00030218

000b8fb0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8fb0:	b508      	push	{r3, lr}
   b8fb2:	4b02      	ldr	r3, [pc, #8]	; (b8fbc <HAL_Pin_Map+0xc>)
   b8fb4:	681b      	ldr	r3, [r3, #0]
   b8fb6:	681b      	ldr	r3, [r3, #0]
   b8fb8:	9301      	str	r3, [sp, #4]
   b8fba:	bd08      	pop	{r3, pc}
   b8fbc:	0003022c 	.word	0x0003022c

000b8fc0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8fc0:	b508      	push	{r3, lr}
   b8fc2:	4b02      	ldr	r3, [pc, #8]	; (b8fcc <HAL_Validate_Pin_Function+0xc>)
   b8fc4:	681b      	ldr	r3, [r3, #0]
   b8fc6:	685b      	ldr	r3, [r3, #4]
   b8fc8:	9301      	str	r3, [sp, #4]
   b8fca:	bd08      	pop	{r3, pc}
   b8fcc:	0003022c 	.word	0x0003022c

000b8fd0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8fd0:	b508      	push	{r3, lr}
   b8fd2:	4b02      	ldr	r3, [pc, #8]	; (b8fdc <HAL_Pin_Mode+0xc>)
   b8fd4:	681b      	ldr	r3, [r3, #0]
   b8fd6:	689b      	ldr	r3, [r3, #8]
   b8fd8:	9301      	str	r3, [sp, #4]
   b8fda:	bd08      	pop	{r3, pc}
   b8fdc:	0003022c 	.word	0x0003022c

000b8fe0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8fe0:	b508      	push	{r3, lr}
   b8fe2:	4b02      	ldr	r3, [pc, #8]	; (b8fec <HAL_Get_Pin_Mode+0xc>)
   b8fe4:	681b      	ldr	r3, [r3, #0]
   b8fe6:	68db      	ldr	r3, [r3, #12]
   b8fe8:	9301      	str	r3, [sp, #4]
   b8fea:	bd08      	pop	{r3, pc}
   b8fec:	0003022c 	.word	0x0003022c

000b8ff0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8ff0:	b508      	push	{r3, lr}
   b8ff2:	4b02      	ldr	r3, [pc, #8]	; (b8ffc <HAL_GPIO_Write+0xc>)
   b8ff4:	681b      	ldr	r3, [r3, #0]
   b8ff6:	691b      	ldr	r3, [r3, #16]
   b8ff8:	9301      	str	r3, [sp, #4]
   b8ffa:	bd08      	pop	{r3, pc}
   b8ffc:	0003022c 	.word	0x0003022c

000b9000 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b9000:	b508      	push	{r3, lr}
   b9002:	4b02      	ldr	r3, [pc, #8]	; (b900c <HAL_GPIO_Read+0xc>)
   b9004:	681b      	ldr	r3, [r3, #0]
   b9006:	695b      	ldr	r3, [r3, #20]
   b9008:	9301      	str	r3, [sp, #4]
   b900a:	bd08      	pop	{r3, pc}
   b900c:	0003022c 	.word	0x0003022c

000b9010 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b9010:	b508      	push	{r3, lr}
   b9012:	4b02      	ldr	r3, [pc, #8]	; (b901c <HAL_Interrupts_Attach+0xc>)
   b9014:	681b      	ldr	r3, [r3, #0]
   b9016:	699b      	ldr	r3, [r3, #24]
   b9018:	9301      	str	r3, [sp, #4]
   b901a:	bd08      	pop	{r3, pc}
   b901c:	0003022c 	.word	0x0003022c

000b9020 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9020:	b508      	push	{r3, lr}
   b9022:	4b02      	ldr	r3, [pc, #8]	; (b902c <HAL_Interrupts_Detach+0xc>)
   b9024:	681b      	ldr	r3, [r3, #0]
   b9026:	69db      	ldr	r3, [r3, #28]
   b9028:	9301      	str	r3, [sp, #4]
   b902a:	bd08      	pop	{r3, pc}
   b902c:	0003022c 	.word	0x0003022c

000b9030 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9030:	b508      	push	{r3, lr}
   b9032:	4b02      	ldr	r3, [pc, #8]	; (b903c <hal_adc_read+0xc>)
   b9034:	681b      	ldr	r3, [r3, #0]
   b9036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9038:	9301      	str	r3, [sp, #4]
   b903a:	bd08      	pop	{r3, pc}
   b903c:	0003022c 	.word	0x0003022c

000b9040 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9040:	b508      	push	{r3, lr}
   b9042:	4b02      	ldr	r3, [pc, #8]	; (b904c <hal_i2c_begin+0xc>)
   b9044:	681b      	ldr	r3, [r3, #0]
   b9046:	68db      	ldr	r3, [r3, #12]
   b9048:	9301      	str	r3, [sp, #4]
   b904a:	bd08      	pop	{r3, pc}
   b904c:	00030228 	.word	0x00030228

000b9050 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9050:	b508      	push	{r3, lr}
   b9052:	4b02      	ldr	r3, [pc, #8]	; (b905c <hal_i2c_begin_transmission+0xc>)
   b9054:	681b      	ldr	r3, [r3, #0]
   b9056:	699b      	ldr	r3, [r3, #24]
   b9058:	9301      	str	r3, [sp, #4]
   b905a:	bd08      	pop	{r3, pc}
   b905c:	00030228 	.word	0x00030228

000b9060 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9060:	b508      	push	{r3, lr}
   b9062:	4b02      	ldr	r3, [pc, #8]	; (b906c <hal_i2c_end_transmission+0xc>)
   b9064:	681b      	ldr	r3, [r3, #0]
   b9066:	69db      	ldr	r3, [r3, #28]
   b9068:	9301      	str	r3, [sp, #4]
   b906a:	bd08      	pop	{r3, pc}
   b906c:	00030228 	.word	0x00030228

000b9070 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9070:	b508      	push	{r3, lr}
   b9072:	4b02      	ldr	r3, [pc, #8]	; (b907c <hal_i2c_write+0xc>)
   b9074:	681b      	ldr	r3, [r3, #0]
   b9076:	6a1b      	ldr	r3, [r3, #32]
   b9078:	9301      	str	r3, [sp, #4]
   b907a:	bd08      	pop	{r3, pc}
   b907c:	00030228 	.word	0x00030228

000b9080 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9080:	b508      	push	{r3, lr}
   b9082:	4b02      	ldr	r3, [pc, #8]	; (b908c <hal_i2c_available+0xc>)
   b9084:	681b      	ldr	r3, [r3, #0]
   b9086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9088:	9301      	str	r3, [sp, #4]
   b908a:	bd08      	pop	{r3, pc}
   b908c:	00030228 	.word	0x00030228

000b9090 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9090:	b508      	push	{r3, lr}
   b9092:	4b02      	ldr	r3, [pc, #8]	; (b909c <hal_i2c_read+0xc>)
   b9094:	681b      	ldr	r3, [r3, #0]
   b9096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9098:	9301      	str	r3, [sp, #4]
   b909a:	bd08      	pop	{r3, pc}
   b909c:	00030228 	.word	0x00030228

000b90a0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b90a0:	b508      	push	{r3, lr}
   b90a2:	4b02      	ldr	r3, [pc, #8]	; (b90ac <hal_i2c_peek+0xc>)
   b90a4:	681b      	ldr	r3, [r3, #0]
   b90a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b90a8:	9301      	str	r3, [sp, #4]
   b90aa:	bd08      	pop	{r3, pc}
   b90ac:	00030228 	.word	0x00030228

000b90b0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b90b0:	b508      	push	{r3, lr}
   b90b2:	4b02      	ldr	r3, [pc, #8]	; (b90bc <hal_i2c_flush+0xc>)
   b90b4:	681b      	ldr	r3, [r3, #0]
   b90b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b90b8:	9301      	str	r3, [sp, #4]
   b90ba:	bd08      	pop	{r3, pc}
   b90bc:	00030228 	.word	0x00030228

000b90c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b90c0:	b508      	push	{r3, lr}
   b90c2:	4b02      	ldr	r3, [pc, #8]	; (b90cc <hal_i2c_is_enabled+0xc>)
   b90c4:	681b      	ldr	r3, [r3, #0]
   b90c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b90c8:	9301      	str	r3, [sp, #4]
   b90ca:	bd08      	pop	{r3, pc}
   b90cc:	00030228 	.word	0x00030228

000b90d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b90d0:	b508      	push	{r3, lr}
   b90d2:	4b02      	ldr	r3, [pc, #8]	; (b90dc <hal_i2c_init+0xc>)
   b90d4:	681b      	ldr	r3, [r3, #0]
   b90d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b90d8:	9301      	str	r3, [sp, #4]
   b90da:	bd08      	pop	{r3, pc}
   b90dc:	00030228 	.word	0x00030228

000b90e0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b90e0:	b508      	push	{r3, lr}
   b90e2:	4b02      	ldr	r3, [pc, #8]	; (b90ec <hal_i2c_lock+0xc>)
   b90e4:	681b      	ldr	r3, [r3, #0]
   b90e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b90e8:	9301      	str	r3, [sp, #4]
   b90ea:	bd08      	pop	{r3, pc}
   b90ec:	00030228 	.word	0x00030228

000b90f0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b90f0:	b508      	push	{r3, lr}
   b90f2:	4b02      	ldr	r3, [pc, #8]	; (b90fc <hal_i2c_unlock+0xc>)
   b90f4:	681b      	ldr	r3, [r3, #0]
   b90f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b90f8:	9301      	str	r3, [sp, #4]
   b90fa:	bd08      	pop	{r3, pc}
   b90fc:	00030228 	.word	0x00030228

000b9100 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b9100:	b508      	push	{r3, lr}
   b9102:	4b02      	ldr	r3, [pc, #8]	; (b910c <hal_i2c_request_ex+0xc>)
   b9104:	681b      	ldr	r3, [r3, #0]
   b9106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9108:	9301      	str	r3, [sp, #4]
   b910a:	bd08      	pop	{r3, pc}
   b910c:	00030228 	.word	0x00030228

000b9110 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9110:	b508      	push	{r3, lr}
   b9112:	4b02      	ldr	r3, [pc, #8]	; (b911c <inet_inet_ntop+0xc>)
   b9114:	681b      	ldr	r3, [r3, #0]
   b9116:	695b      	ldr	r3, [r3, #20]
   b9118:	9301      	str	r3, [sp, #4]
   b911a:	bd08      	pop	{r3, pc}
   b911c:	00030264 	.word	0x00030264

000b9120 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9120:	b508      	push	{r3, lr}
   b9122:	4b02      	ldr	r3, [pc, #8]	; (b912c <netdb_freeaddrinfo+0xc>)
   b9124:	681b      	ldr	r3, [r3, #0]
   b9126:	689b      	ldr	r3, [r3, #8]
   b9128:	9301      	str	r3, [sp, #4]
   b912a:	bd08      	pop	{r3, pc}
   b912c:	00030268 	.word	0x00030268

000b9130 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9130:	b508      	push	{r3, lr}
   b9132:	4b02      	ldr	r3, [pc, #8]	; (b913c <netdb_getaddrinfo+0xc>)
   b9134:	681b      	ldr	r3, [r3, #0]
   b9136:	68db      	ldr	r3, [r3, #12]
   b9138:	9301      	str	r3, [sp, #4]
   b913a:	bd08      	pop	{r3, pc}
   b913c:	00030268 	.word	0x00030268

000b9140 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9140:	b508      	push	{r3, lr}
   b9142:	4b02      	ldr	r3, [pc, #8]	; (b914c <hal_spi_begin+0xc>)
   b9144:	681b      	ldr	r3, [r3, #0]
   b9146:	681b      	ldr	r3, [r3, #0]
   b9148:	9301      	str	r3, [sp, #4]
   b914a:	bd08      	pop	{r3, pc}
   b914c:	00030230 	.word	0x00030230

000b9150 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b9150:	b508      	push	{r3, lr}
   b9152:	4b02      	ldr	r3, [pc, #8]	; (b915c <hal_spi_end+0xc>)
   b9154:	681b      	ldr	r3, [r3, #0]
   b9156:	685b      	ldr	r3, [r3, #4]
   b9158:	9301      	str	r3, [sp, #4]
   b915a:	bd08      	pop	{r3, pc}
   b915c:	00030230 	.word	0x00030230

000b9160 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9160:	b508      	push	{r3, lr}
   b9162:	4b02      	ldr	r3, [pc, #8]	; (b916c <hal_spi_transfer+0xc>)
   b9164:	681b      	ldr	r3, [r3, #0]
   b9166:	695b      	ldr	r3, [r3, #20]
   b9168:	9301      	str	r3, [sp, #4]
   b916a:	bd08      	pop	{r3, pc}
   b916c:	00030230 	.word	0x00030230

000b9170 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9170:	b508      	push	{r3, lr}
   b9172:	4b02      	ldr	r3, [pc, #8]	; (b917c <hal_spi_init+0xc>)
   b9174:	681b      	ldr	r3, [r3, #0]
   b9176:	69db      	ldr	r3, [r3, #28]
   b9178:	9301      	str	r3, [sp, #4]
   b917a:	bd08      	pop	{r3, pc}
   b917c:	00030230 	.word	0x00030230

000b9180 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9180:	b508      	push	{r3, lr}
   b9182:	4b02      	ldr	r3, [pc, #8]	; (b918c <hal_spi_is_enabled+0xc>)
   b9184:	681b      	ldr	r3, [r3, #0]
   b9186:	6a1b      	ldr	r3, [r3, #32]
   b9188:	9301      	str	r3, [sp, #4]
   b918a:	bd08      	pop	{r3, pc}
   b918c:	00030230 	.word	0x00030230

000b9190 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9190:	b508      	push	{r3, lr}
   b9192:	4b02      	ldr	r3, [pc, #8]	; (b919c <hal_spi_info+0xc>)
   b9194:	681b      	ldr	r3, [r3, #0]
   b9196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9198:	9301      	str	r3, [sp, #4]
   b919a:	bd08      	pop	{r3, pc}
   b919c:	00030230 	.word	0x00030230

000b91a0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b91a0:	b508      	push	{r3, lr}
   b91a2:	4b02      	ldr	r3, [pc, #8]	; (b91ac <hal_spi_set_settings+0xc>)
   b91a4:	681b      	ldr	r3, [r3, #0]
   b91a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b91a8:	9301      	str	r3, [sp, #4]
   b91aa:	bd08      	pop	{r3, pc}
   b91ac:	00030230 	.word	0x00030230

000b91b0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b91b0:	b508      	push	{r3, lr}
   b91b2:	4b02      	ldr	r3, [pc, #8]	; (b91bc <hal_spi_acquire+0xc>)
   b91b4:	681b      	ldr	r3, [r3, #0]
   b91b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b91b8:	9301      	str	r3, [sp, #4]
   b91ba:	bd08      	pop	{r3, pc}
   b91bc:	00030230 	.word	0x00030230

000b91c0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b91c0:	b508      	push	{r3, lr}
   b91c2:	4b02      	ldr	r3, [pc, #8]	; (b91cc <hal_spi_release+0xc>)
   b91c4:	681b      	ldr	r3, [r3, #0]
   b91c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b91c8:	9301      	str	r3, [sp, #4]
   b91ca:	bd08      	pop	{r3, pc}
   b91cc:	00030230 	.word	0x00030230

000b91d0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b91d0:	b508      	push	{r3, lr}
   b91d2:	4b02      	ldr	r3, [pc, #8]	; (b91dc <hal_usart_end+0xc>)
   b91d4:	681b      	ldr	r3, [r3, #0]
   b91d6:	689b      	ldr	r3, [r3, #8]
   b91d8:	9301      	str	r3, [sp, #4]
   b91da:	bd08      	pop	{r3, pc}
   b91dc:	0003023c 	.word	0x0003023c

000b91e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b91e0:	b508      	push	{r3, lr}
   b91e2:	4b02      	ldr	r3, [pc, #8]	; (b91ec <hal_usart_write+0xc>)
   b91e4:	681b      	ldr	r3, [r3, #0]
   b91e6:	68db      	ldr	r3, [r3, #12]
   b91e8:	9301      	str	r3, [sp, #4]
   b91ea:	bd08      	pop	{r3, pc}
   b91ec:	0003023c 	.word	0x0003023c

000b91f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b91f0:	b508      	push	{r3, lr}
   b91f2:	4b02      	ldr	r3, [pc, #8]	; (b91fc <hal_usart_available+0xc>)
   b91f4:	681b      	ldr	r3, [r3, #0]
   b91f6:	691b      	ldr	r3, [r3, #16]
   b91f8:	9301      	str	r3, [sp, #4]
   b91fa:	bd08      	pop	{r3, pc}
   b91fc:	0003023c 	.word	0x0003023c

000b9200 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9200:	b508      	push	{r3, lr}
   b9202:	4b02      	ldr	r3, [pc, #8]	; (b920c <hal_usart_read+0xc>)
   b9204:	681b      	ldr	r3, [r3, #0]
   b9206:	695b      	ldr	r3, [r3, #20]
   b9208:	9301      	str	r3, [sp, #4]
   b920a:	bd08      	pop	{r3, pc}
   b920c:	0003023c 	.word	0x0003023c

000b9210 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9210:	b508      	push	{r3, lr}
   b9212:	4b02      	ldr	r3, [pc, #8]	; (b921c <hal_usart_peek+0xc>)
   b9214:	681b      	ldr	r3, [r3, #0]
   b9216:	699b      	ldr	r3, [r3, #24]
   b9218:	9301      	str	r3, [sp, #4]
   b921a:	bd08      	pop	{r3, pc}
   b921c:	0003023c 	.word	0x0003023c

000b9220 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9220:	b508      	push	{r3, lr}
   b9222:	4b02      	ldr	r3, [pc, #8]	; (b922c <hal_usart_flush+0xc>)
   b9224:	681b      	ldr	r3, [r3, #0]
   b9226:	69db      	ldr	r3, [r3, #28]
   b9228:	9301      	str	r3, [sp, #4]
   b922a:	bd08      	pop	{r3, pc}
   b922c:	0003023c 	.word	0x0003023c

000b9230 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9230:	b508      	push	{r3, lr}
   b9232:	4b02      	ldr	r3, [pc, #8]	; (b923c <hal_usart_is_enabled+0xc>)
   b9234:	681b      	ldr	r3, [r3, #0]
   b9236:	6a1b      	ldr	r3, [r3, #32]
   b9238:	9301      	str	r3, [sp, #4]
   b923a:	bd08      	pop	{r3, pc}
   b923c:	0003023c 	.word	0x0003023c

000b9240 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9240:	b508      	push	{r3, lr}
   b9242:	4b02      	ldr	r3, [pc, #8]	; (b924c <hal_usart_available_data_for_write+0xc>)
   b9244:	681b      	ldr	r3, [r3, #0]
   b9246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9248:	9301      	str	r3, [sp, #4]
   b924a:	bd08      	pop	{r3, pc}
   b924c:	0003023c 	.word	0x0003023c

000b9250 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9250:	b508      	push	{r3, lr}
   b9252:	4b02      	ldr	r3, [pc, #8]	; (b925c <hal_usart_begin_config+0xc>)
   b9254:	681b      	ldr	r3, [r3, #0]
   b9256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9258:	9301      	str	r3, [sp, #4]
   b925a:	bd08      	pop	{r3, pc}
   b925c:	0003023c 	.word	0x0003023c

000b9260 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9260:	b508      	push	{r3, lr}
   b9262:	4b02      	ldr	r3, [pc, #8]	; (b926c <hal_usart_init_ex+0xc>)
   b9264:	681b      	ldr	r3, [r3, #0]
   b9266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9268:	9301      	str	r3, [sp, #4]
   b926a:	bd08      	pop	{r3, pc}
   b926c:	0003023c 	.word	0x0003023c

000b9270 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9270:	b508      	push	{r3, lr}
   b9272:	4b02      	ldr	r3, [pc, #8]	; (b927c <HAL_USB_USART_Init+0xc>)
   b9274:	681b      	ldr	r3, [r3, #0]
   b9276:	681b      	ldr	r3, [r3, #0]
   b9278:	9301      	str	r3, [sp, #4]
   b927a:	bd08      	pop	{r3, pc}
   b927c:	0003024c 	.word	0x0003024c

000b9280 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9280:	b508      	push	{r3, lr}
   b9282:	4b02      	ldr	r3, [pc, #8]	; (b928c <HAL_USB_USART_Begin+0xc>)
   b9284:	681b      	ldr	r3, [r3, #0]
   b9286:	685b      	ldr	r3, [r3, #4]
   b9288:	9301      	str	r3, [sp, #4]
   b928a:	bd08      	pop	{r3, pc}
   b928c:	0003024c 	.word	0x0003024c

000b9290 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b9290:	b508      	push	{r3, lr}
   b9292:	4b02      	ldr	r3, [pc, #8]	; (b929c <HAL_USB_USART_End+0xc>)
   b9294:	681b      	ldr	r3, [r3, #0]
   b9296:	689b      	ldr	r3, [r3, #8]
   b9298:	9301      	str	r3, [sp, #4]
   b929a:	bd08      	pop	{r3, pc}
   b929c:	0003024c 	.word	0x0003024c

000b92a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b92a0:	b508      	push	{r3, lr}
   b92a2:	4b02      	ldr	r3, [pc, #8]	; (b92ac <HAL_USB_USART_Available_Data+0xc>)
   b92a4:	681b      	ldr	r3, [r3, #0]
   b92a6:	691b      	ldr	r3, [r3, #16]
   b92a8:	9301      	str	r3, [sp, #4]
   b92aa:	bd08      	pop	{r3, pc}
   b92ac:	0003024c 	.word	0x0003024c

000b92b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b92b0:	b508      	push	{r3, lr}
   b92b2:	4b02      	ldr	r3, [pc, #8]	; (b92bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b92b4:	681b      	ldr	r3, [r3, #0]
   b92b6:	695b      	ldr	r3, [r3, #20]
   b92b8:	9301      	str	r3, [sp, #4]
   b92ba:	bd08      	pop	{r3, pc}
   b92bc:	0003024c 	.word	0x0003024c

000b92c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b92c0:	b508      	push	{r3, lr}
   b92c2:	4b02      	ldr	r3, [pc, #8]	; (b92cc <HAL_USB_USART_Receive_Data+0xc>)
   b92c4:	681b      	ldr	r3, [r3, #0]
   b92c6:	699b      	ldr	r3, [r3, #24]
   b92c8:	9301      	str	r3, [sp, #4]
   b92ca:	bd08      	pop	{r3, pc}
   b92cc:	0003024c 	.word	0x0003024c

000b92d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b92d0:	b508      	push	{r3, lr}
   b92d2:	4b02      	ldr	r3, [pc, #8]	; (b92dc <HAL_USB_USART_Send_Data+0xc>)
   b92d4:	681b      	ldr	r3, [r3, #0]
   b92d6:	69db      	ldr	r3, [r3, #28]
   b92d8:	9301      	str	r3, [sp, #4]
   b92da:	bd08      	pop	{r3, pc}
   b92dc:	0003024c 	.word	0x0003024c

000b92e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b92e0:	b508      	push	{r3, lr}
   b92e2:	4b02      	ldr	r3, [pc, #8]	; (b92ec <HAL_USB_USART_Flush_Data+0xc>)
   b92e4:	681b      	ldr	r3, [r3, #0]
   b92e6:	6a1b      	ldr	r3, [r3, #32]
   b92e8:	9301      	str	r3, [sp, #4]
   b92ea:	bd08      	pop	{r3, pc}
   b92ec:	0003024c 	.word	0x0003024c

000b92f0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b92f0:	b508      	push	{r3, lr}
   b92f2:	4b02      	ldr	r3, [pc, #8]	; (b92fc <HAL_USB_USART_Is_Connected+0xc>)
   b92f4:	681b      	ldr	r3, [r3, #0]
   b92f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b92f8:	9301      	str	r3, [sp, #4]
   b92fa:	bd08      	pop	{r3, pc}
   b92fc:	0003024c 	.word	0x0003024c

000b9300 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9300:	b508      	push	{r3, lr}
   b9302:	4b02      	ldr	r3, [pc, #8]	; (b930c <panic_+0xc>)
   b9304:	681b      	ldr	r3, [r3, #0]
   b9306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9308:	9301      	str	r3, [sp, #4]
   b930a:	bd08      	pop	{r3, pc}
   b930c:	00030260 	.word	0x00030260

000b9310 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9310:	b508      	push	{r3, lr}
   b9312:	4b02      	ldr	r3, [pc, #8]	; (b931c <log_message+0xc>)
   b9314:	681b      	ldr	r3, [r3, #0]
   b9316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9318:	9301      	str	r3, [sp, #4]
   b931a:	bd08      	pop	{r3, pc}
   b931c:	00030260 	.word	0x00030260

000b9320 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b9320:	b508      	push	{r3, lr}
   b9322:	4b02      	ldr	r3, [pc, #8]	; (b932c <log_message_v+0xc>)
   b9324:	681b      	ldr	r3, [r3, #0]
   b9326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9328:	9301      	str	r3, [sp, #4]
   b932a:	bd08      	pop	{r3, pc}
   b932c:	00030260 	.word	0x00030260

000b9330 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b9330:	b508      	push	{r3, lr}
   b9332:	4b02      	ldr	r3, [pc, #8]	; (b933c <log_write+0xc>)
   b9334:	681b      	ldr	r3, [r3, #0]
   b9336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9338:	9301      	str	r3, [sp, #4]
   b933a:	bd08      	pop	{r3, pc}
   b933c:	00030260 	.word	0x00030260

000b9340 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b9340:	b508      	push	{r3, lr}
   b9342:	4b02      	ldr	r3, [pc, #8]	; (b934c <log_dump+0xc>)
   b9344:	681b      	ldr	r3, [r3, #0]
   b9346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9348:	9301      	str	r3, [sp, #4]
   b934a:	bd08      	pop	{r3, pc}
   b934c:	00030260 	.word	0x00030260

000b9350 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b9350:	b508      	push	{r3, lr}
   b9352:	4b02      	ldr	r3, [pc, #8]	; (b935c <log_level_name+0xc>)
   b9354:	681b      	ldr	r3, [r3, #0]
   b9356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b9358:	9301      	str	r3, [sp, #4]
   b935a:	bd08      	pop	{r3, pc}
   b935c:	00030260 	.word	0x00030260

000b9360 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b9360:	b508      	push	{r3, lr}
   b9362:	4b02      	ldr	r3, [pc, #8]	; (b936c <log_set_callbacks+0xc>)
   b9364:	681b      	ldr	r3, [r3, #0]
   b9366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b9368:	9301      	str	r3, [sp, #4]
   b936a:	bd08      	pop	{r3, pc}
   b936c:	00030260 	.word	0x00030260

000b9370 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b9370:	b508      	push	{r3, lr}
   b9372:	4b03      	ldr	r3, [pc, #12]	; (b9380 <led_set_status_active+0x10>)
   b9374:	681b      	ldr	r3, [r3, #0]
   b9376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b937a:	9301      	str	r3, [sp, #4]
   b937c:	bd08      	pop	{r3, pc}
   b937e:	0000      	.short	0x0000
   b9380:	00030260 	.word	0x00030260

000b9384 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b9384:	b508      	push	{r3, lr}
   b9386:	4b03      	ldr	r3, [pc, #12]	; (b9394 <diag_get_source+0x10>)
   b9388:	681b      	ldr	r3, [r3, #0]
   b938a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b938e:	9301      	str	r3, [sp, #4]
   b9390:	bd08      	pop	{r3, pc}
   b9392:	0000      	.short	0x0000
   b9394:	00030260 	.word	0x00030260

000b9398 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9398:	b508      	push	{r3, lr}
   b939a:	4b02      	ldr	r3, [pc, #8]	; (b93a4 <system_mode+0xc>)
   b939c:	681b      	ldr	r3, [r3, #0]
   b939e:	681b      	ldr	r3, [r3, #0]
   b93a0:	9301      	str	r3, [sp, #4]
   b93a2:	bd08      	pop	{r3, pc}
   b93a4:	00030220 	.word	0x00030220

000b93a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b93a8:	b508      	push	{r3, lr}
   b93aa:	4b02      	ldr	r3, [pc, #8]	; (b93b4 <set_system_mode+0xc>)
   b93ac:	681b      	ldr	r3, [r3, #0]
   b93ae:	685b      	ldr	r3, [r3, #4]
   b93b0:	9301      	str	r3, [sp, #4]
   b93b2:	bd08      	pop	{r3, pc}
   b93b4:	00030220 	.word	0x00030220

000b93b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b93b8:	b508      	push	{r3, lr}
   b93ba:	4b02      	ldr	r3, [pc, #8]	; (b93c4 <system_delay_ms+0xc>)
   b93bc:	681b      	ldr	r3, [r3, #0]
   b93be:	695b      	ldr	r3, [r3, #20]
   b93c0:	9301      	str	r3, [sp, #4]
   b93c2:	bd08      	pop	{r3, pc}
   b93c4:	00030220 	.word	0x00030220

000b93c8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b93c8:	b508      	push	{r3, lr}
   b93ca:	4b02      	ldr	r3, [pc, #8]	; (b93d4 <system_subscribe_event+0xc>)
   b93cc:	681b      	ldr	r3, [r3, #0]
   b93ce:	6a1b      	ldr	r3, [r3, #32]
   b93d0:	9301      	str	r3, [sp, #4]
   b93d2:	bd08      	pop	{r3, pc}
   b93d4:	00030220 	.word	0x00030220

000b93d8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b93d8:	b508      	push	{r3, lr}
   b93da:	4b02      	ldr	r3, [pc, #8]	; (b93e4 <system_thread_set_state+0xc>)
   b93dc:	681b      	ldr	r3, [r3, #0]
   b93de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b93e0:	9301      	str	r3, [sp, #4]
   b93e2:	bd08      	pop	{r3, pc}
   b93e4:	00030220 	.word	0x00030220

000b93e8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b93e8:	b508      	push	{r3, lr}
   b93ea:	4b02      	ldr	r3, [pc, #8]	; (b93f4 <system_thread_get_state+0xc>)
   b93ec:	681b      	ldr	r3, [r3, #0]
   b93ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b93f0:	9301      	str	r3, [sp, #4]
   b93f2:	bd08      	pop	{r3, pc}
   b93f4:	00030220 	.word	0x00030220

000b93f8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b93f8:	b508      	push	{r3, lr}
   b93fa:	4b02      	ldr	r3, [pc, #8]	; (b9404 <system_notify_time_changed+0xc>)
   b93fc:	681b      	ldr	r3, [r3, #0]
   b93fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b9400:	9301      	str	r3, [sp, #4]
   b9402:	bd08      	pop	{r3, pc}
   b9404:	00030220 	.word	0x00030220

000b9408 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b9408:	b508      	push	{r3, lr}
   b940a:	4b02      	ldr	r3, [pc, #8]	; (b9414 <led_pattern_period+0xc>)
   b940c:	681b      	ldr	r3, [r3, #0]
   b940e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9410:	9301      	str	r3, [sp, #4]
   b9412:	bd08      	pop	{r3, pc}
   b9414:	00030220 	.word	0x00030220

000b9418 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9418:	b508      	push	{r3, lr}
   b941a:	4b03      	ldr	r3, [pc, #12]	; (b9428 <system_ctrl_set_app_request_handler+0x10>)
   b941c:	681b      	ldr	r3, [r3, #0]
   b941e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9422:	9301      	str	r3, [sp, #4]
   b9424:	bd08      	pop	{r3, pc}
   b9426:	0000      	.short	0x0000
   b9428:	00030220 	.word	0x00030220

000b942c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b942c:	b508      	push	{r3, lr}
   b942e:	4b03      	ldr	r3, [pc, #12]	; (b943c <system_ctrl_set_result+0x10>)
   b9430:	681b      	ldr	r3, [r3, #0]
   b9432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9436:	9301      	str	r3, [sp, #4]
   b9438:	bd08      	pop	{r3, pc}
   b943a:	0000      	.short	0x0000
   b943c:	00030220 	.word	0x00030220

000b9440 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b9440:	b508      	push	{r3, lr}
   b9442:	4b03      	ldr	r3, [pc, #12]	; (b9450 <system_power_management_set_config+0x10>)
   b9444:	681b      	ldr	r3, [r3, #0]
   b9446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b944a:	9301      	str	r3, [sp, #4]
   b944c:	bd08      	pop	{r3, pc}
   b944e:	0000      	.short	0x0000
   b9450:	00030220 	.word	0x00030220

000b9454 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b9454:	b508      	push	{r3, lr}
   b9456:	4b03      	ldr	r3, [pc, #12]	; (b9464 <system_sleep_ext+0x10>)
   b9458:	681b      	ldr	r3, [r3, #0]
   b945a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b945e:	9301      	str	r3, [sp, #4]
   b9460:	bd08      	pop	{r3, pc}
   b9462:	0000      	.short	0x0000
   b9464:	00030220 	.word	0x00030220

000b9468 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b9468:	b508      	push	{r3, lr}
   b946a:	4b03      	ldr	r3, [pc, #12]	; (b9478 <system_reset+0x10>)
   b946c:	681b      	ldr	r3, [r3, #0]
   b946e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b9472:	9301      	str	r3, [sp, #4]
   b9474:	bd08      	pop	{r3, pc}
   b9476:	0000      	.short	0x0000
   b9478:	00030220 	.word	0x00030220

000b947c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b947c:	b508      	push	{r3, lr}
   b947e:	4b02      	ldr	r3, [pc, #8]	; (b9488 <spark_process+0xc>)
   b9480:	681b      	ldr	r3, [r3, #0]
   b9482:	689b      	ldr	r3, [r3, #8]
   b9484:	9301      	str	r3, [sp, #4]
   b9486:	bd08      	pop	{r3, pc}
   b9488:	00030244 	.word	0x00030244

000b948c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b948c:	b508      	push	{r3, lr}
   b948e:	4b02      	ldr	r3, [pc, #8]	; (b9498 <spark_cloud_flag_connect+0xc>)
   b9490:	681b      	ldr	r3, [r3, #0]
   b9492:	68db      	ldr	r3, [r3, #12]
   b9494:	9301      	str	r3, [sp, #4]
   b9496:	bd08      	pop	{r3, pc}
   b9498:	00030244 	.word	0x00030244

000b949c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b949c:	b508      	push	{r3, lr}
   b949e:	4b02      	ldr	r3, [pc, #8]	; (b94a8 <spark_cloud_flag_connected+0xc>)
   b94a0:	681b      	ldr	r3, [r3, #0]
   b94a2:	695b      	ldr	r3, [r3, #20]
   b94a4:	9301      	str	r3, [sp, #4]
   b94a6:	bd08      	pop	{r3, pc}
   b94a8:	00030244 	.word	0x00030244

000b94ac <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b94ac:	b508      	push	{r3, lr}
   b94ae:	4b02      	ldr	r3, [pc, #8]	; (b94b8 <spark_deviceID+0xc>)
   b94b0:	681b      	ldr	r3, [r3, #0]
   b94b2:	69db      	ldr	r3, [r3, #28]
   b94b4:	9301      	str	r3, [sp, #4]
   b94b6:	bd08      	pop	{r3, pc}
   b94b8:	00030244 	.word	0x00030244

000b94bc <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b94bc:	b508      	push	{r3, lr}
   b94be:	4b02      	ldr	r3, [pc, #8]	; (b94c8 <spark_sync_time_pending+0xc>)
   b94c0:	681b      	ldr	r3, [r3, #0]
   b94c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b94c4:	9301      	str	r3, [sp, #4]
   b94c6:	bd08      	pop	{r3, pc}
   b94c8:	00030244 	.word	0x00030244

000b94cc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b94cc:	b508      	push	{r3, lr}
   b94ce:	4b02      	ldr	r3, [pc, #8]	; (b94d8 <spark_sync_time_last+0xc>)
   b94d0:	681b      	ldr	r3, [r3, #0]
   b94d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b94d4:	9301      	str	r3, [sp, #4]
   b94d6:	bd08      	pop	{r3, pc}
   b94d8:	00030244 	.word	0x00030244

000b94dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b94dc:	b508      	push	{r3, lr}
   b94de:	4b02      	ldr	r3, [pc, #8]	; (b94e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b94e0:	681b      	ldr	r3, [r3, #0]
   b94e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b94e4:	9301      	str	r3, [sp, #4]
   b94e6:	bd08      	pop	{r3, pc}
   b94e8:	00030244 	.word	0x00030244

000b94ec <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b94ec:	b508      	push	{r3, lr}
   b94ee:	4b02      	ldr	r3, [pc, #8]	; (b94f8 <spark_cloud_disconnect+0xc>)
   b94f0:	681b      	ldr	r3, [r3, #0]
   b94f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b94f4:	9301      	str	r3, [sp, #4]
   b94f6:	bd08      	pop	{r3, pc}
   b94f8:	00030244 	.word	0x00030244

000b94fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b94fc:	b508      	push	{r3, lr}
   b94fe:	4b02      	ldr	r3, [pc, #8]	; (b9508 <network_connect+0xc>)
   b9500:	681b      	ldr	r3, [r3, #0]
   b9502:	685b      	ldr	r3, [r3, #4]
   b9504:	9301      	str	r3, [sp, #4]
   b9506:	bd08      	pop	{r3, pc}
   b9508:	00030240 	.word	0x00030240

000b950c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b950c:	b508      	push	{r3, lr}
   b950e:	4b02      	ldr	r3, [pc, #8]	; (b9518 <network_connecting+0xc>)
   b9510:	681b      	ldr	r3, [r3, #0]
   b9512:	689b      	ldr	r3, [r3, #8]
   b9514:	9301      	str	r3, [sp, #4]
   b9516:	bd08      	pop	{r3, pc}
   b9518:	00030240 	.word	0x00030240

000b951c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b951c:	b508      	push	{r3, lr}
   b951e:	4b02      	ldr	r3, [pc, #8]	; (b9528 <network_disconnect+0xc>)
   b9520:	681b      	ldr	r3, [r3, #0]
   b9522:	68db      	ldr	r3, [r3, #12]
   b9524:	9301      	str	r3, [sp, #4]
   b9526:	bd08      	pop	{r3, pc}
   b9528:	00030240 	.word	0x00030240

000b952c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b952c:	b508      	push	{r3, lr}
   b952e:	4b02      	ldr	r3, [pc, #8]	; (b9538 <network_ready+0xc>)
   b9530:	681b      	ldr	r3, [r3, #0]
   b9532:	691b      	ldr	r3, [r3, #16]
   b9534:	9301      	str	r3, [sp, #4]
   b9536:	bd08      	pop	{r3, pc}
   b9538:	00030240 	.word	0x00030240

000b953c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b953c:	b508      	push	{r3, lr}
   b953e:	4b02      	ldr	r3, [pc, #8]	; (b9548 <network_on+0xc>)
   b9540:	681b      	ldr	r3, [r3, #0]
   b9542:	695b      	ldr	r3, [r3, #20]
   b9544:	9301      	str	r3, [sp, #4]
   b9546:	bd08      	pop	{r3, pc}
   b9548:	00030240 	.word	0x00030240

000b954c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b954c:	b508      	push	{r3, lr}
   b954e:	4b02      	ldr	r3, [pc, #8]	; (b9558 <network_off+0xc>)
   b9550:	681b      	ldr	r3, [r3, #0]
   b9552:	699b      	ldr	r3, [r3, #24]
   b9554:	9301      	str	r3, [sp, #4]
   b9556:	bd08      	pop	{r3, pc}
   b9558:	00030240 	.word	0x00030240

000b955c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b955c:	b508      	push	{r3, lr}
   b955e:	4b02      	ldr	r3, [pc, #8]	; (b9568 <network_listen+0xc>)
   b9560:	681b      	ldr	r3, [r3, #0]
   b9562:	69db      	ldr	r3, [r3, #28]
   b9564:	9301      	str	r3, [sp, #4]
   b9566:	bd08      	pop	{r3, pc}
   b9568:	00030240 	.word	0x00030240

000b956c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b956c:	b508      	push	{r3, lr}
   b956e:	4b02      	ldr	r3, [pc, #8]	; (b9578 <network_listening+0xc>)
   b9570:	681b      	ldr	r3, [r3, #0]
   b9572:	6a1b      	ldr	r3, [r3, #32]
   b9574:	9301      	str	r3, [sp, #4]
   b9576:	bd08      	pop	{r3, pc}
   b9578:	00030240 	.word	0x00030240

000b957c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b957c:	b508      	push	{r3, lr}
   b957e:	4b02      	ldr	r3, [pc, #8]	; (b9588 <network_set_listen_timeout+0xc>)
   b9580:	681b      	ldr	r3, [r3, #0]
   b9582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9584:	9301      	str	r3, [sp, #4]
   b9586:	bd08      	pop	{r3, pc}
   b9588:	00030240 	.word	0x00030240

000b958c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b958c:	b508      	push	{r3, lr}
   b958e:	4b02      	ldr	r3, [pc, #8]	; (b9598 <network_get_listen_timeout+0xc>)
   b9590:	681b      	ldr	r3, [r3, #0]
   b9592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9594:	9301      	str	r3, [sp, #4]
   b9596:	bd08      	pop	{r3, pc}
   b9598:	00030240 	.word	0x00030240

000b959c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b959c:	b508      	push	{r3, lr}
   b959e:	4b02      	ldr	r3, [pc, #8]	; (b95a8 <network_is_on+0xc>)
   b95a0:	681b      	ldr	r3, [r3, #0]
   b95a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b95a4:	9301      	str	r3, [sp, #4]
   b95a6:	bd08      	pop	{r3, pc}
   b95a8:	00030240 	.word	0x00030240

000b95ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b95ac:	b508      	push	{r3, lr}
   b95ae:	4b02      	ldr	r3, [pc, #8]	; (b95b8 <network_is_off+0xc>)
   b95b0:	681b      	ldr	r3, [r3, #0]
   b95b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b95b4:	9301      	str	r3, [sp, #4]
   b95b6:	bd08      	pop	{r3, pc}
   b95b8:	00030240 	.word	0x00030240

000b95bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b95bc:	b508      	push	{r3, lr}
   b95be:	4b02      	ldr	r3, [pc, #8]	; (b95c8 <malloc+0xc>)
   b95c0:	681b      	ldr	r3, [r3, #0]
   b95c2:	681b      	ldr	r3, [r3, #0]
   b95c4:	9301      	str	r3, [sp, #4]
   b95c6:	bd08      	pop	{r3, pc}
   b95c8:	0003021c 	.word	0x0003021c

000b95cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b95cc:	b508      	push	{r3, lr}
   b95ce:	4b02      	ldr	r3, [pc, #8]	; (b95d8 <free+0xc>)
   b95d0:	681b      	ldr	r3, [r3, #0]
   b95d2:	685b      	ldr	r3, [r3, #4]
   b95d4:	9301      	str	r3, [sp, #4]
   b95d6:	bd08      	pop	{r3, pc}
   b95d8:	0003021c 	.word	0x0003021c

000b95dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b95dc:	b508      	push	{r3, lr}
   b95de:	4b02      	ldr	r3, [pc, #8]	; (b95e8 <realloc+0xc>)
   b95e0:	681b      	ldr	r3, [r3, #0]
   b95e2:	689b      	ldr	r3, [r3, #8]
   b95e4:	9301      	str	r3, [sp, #4]
   b95e6:	bd08      	pop	{r3, pc}
   b95e8:	0003021c 	.word	0x0003021c

000b95ec <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b95ec:	b508      	push	{r3, lr}
   b95ee:	4b02      	ldr	r3, [pc, #8]	; (b95f8 <siprintf+0xc>)
   b95f0:	681b      	ldr	r3, [r3, #0]
   b95f2:	691b      	ldr	r3, [r3, #16]
   b95f4:	9301      	str	r3, [sp, #4]
   b95f6:	bd08      	pop	{r3, pc}
   b95f8:	0003021c 	.word	0x0003021c

000b95fc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b95fc:	b508      	push	{r3, lr}
   b95fe:	4b02      	ldr	r3, [pc, #8]	; (b9608 <snprintf+0xc>)
   b9600:	681b      	ldr	r3, [r3, #0]
   b9602:	69db      	ldr	r3, [r3, #28]
   b9604:	9301      	str	r3, [sp, #4]
   b9606:	bd08      	pop	{r3, pc}
   b9608:	0003021c 	.word	0x0003021c

000b960c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b960c:	b508      	push	{r3, lr}
   b960e:	4b02      	ldr	r3, [pc, #8]	; (b9618 <vsnprintf+0xc>)
   b9610:	681b      	ldr	r3, [r3, #0]
   b9612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9614:	9301      	str	r3, [sp, #4]
   b9616:	bd08      	pop	{r3, pc}
   b9618:	0003021c 	.word	0x0003021c

000b961c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b961c:	b508      	push	{r3, lr}
   b961e:	4b02      	ldr	r3, [pc, #8]	; (b9628 <abort+0xc>)
   b9620:	681b      	ldr	r3, [r3, #0]
   b9622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9624:	9301      	str	r3, [sp, #4]
   b9626:	bd08      	pop	{r3, pc}
   b9628:	0003021c 	.word	0x0003021c

000b962c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b962c:	b508      	push	{r3, lr}
   b962e:	4b02      	ldr	r3, [pc, #8]	; (b9638 <__errno+0xc>)
   b9630:	681b      	ldr	r3, [r3, #0]
   b9632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9634:	9301      	str	r3, [sp, #4]
   b9636:	bd08      	pop	{r3, pc}
   b9638:	0003021c 	.word	0x0003021c

000b963c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b963c:	b508      	push	{r3, lr}
   b963e:	4b02      	ldr	r3, [pc, #8]	; (b9648 <__assert_func+0xc>)
   b9640:	681b      	ldr	r3, [r3, #0]
   b9642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9644:	9301      	str	r3, [sp, #4]
   b9646:	bd08      	pop	{r3, pc}
   b9648:	0003021c 	.word	0x0003021c

000b964c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b964c:	b508      	push	{r3, lr}
   b964e:	4b02      	ldr	r3, [pc, #8]	; (b9658 <newlib_impure_ptr_callback+0xc>)
   b9650:	681b      	ldr	r3, [r3, #0]
   b9652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9654:	9301      	str	r3, [sp, #4]
   b9656:	bd08      	pop	{r3, pc}
   b9658:	0003021c 	.word	0x0003021c

000b965c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b965c:	b508      	push	{r3, lr}
   b965e:	4b02      	ldr	r3, [pc, #8]	; (b9668 <strftime+0xc>)
   b9660:	681b      	ldr	r3, [r3, #0]
   b9662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b9664:	9301      	str	r3, [sp, #4]
   b9666:	bd08      	pop	{r3, pc}
   b9668:	0003021c 	.word	0x0003021c

000b966c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b966c:	b508      	push	{r3, lr}
   b966e:	4b02      	ldr	r3, [pc, #8]	; (b9678 <localtime_r+0xc>)
   b9670:	681b      	ldr	r3, [r3, #0]
   b9672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9674:	9301      	str	r3, [sp, #4]
   b9676:	bd08      	pop	{r3, pc}
   b9678:	0003021c 	.word	0x0003021c

000b967c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b967c:	b508      	push	{r3, lr}
   b967e:	4b02      	ldr	r3, [pc, #8]	; (b9688 <gmtime_r+0xc>)
   b9680:	681b      	ldr	r3, [r3, #0]
   b9682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9684:	9301      	str	r3, [sp, #4]
   b9686:	bd08      	pop	{r3, pc}
   b9688:	0003021c 	.word	0x0003021c

000b968c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b968c:	b508      	push	{r3, lr}
   b968e:	4b02      	ldr	r3, [pc, #8]	; (b9698 <mktime+0xc>)
   b9690:	681b      	ldr	r3, [r3, #0]
   b9692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9694:	9301      	str	r3, [sp, #4]
   b9696:	bd08      	pop	{r3, pc}
   b9698:	0003021c 	.word	0x0003021c

000b969c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b969c:	428a      	cmp	r2, r1
{
   b969e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b96a0:	d007      	beq.n	b96b2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b96a2:	1a44      	subs	r4, r0, r1
   b96a4:	9802      	ldr	r0, [sp, #8]
   b96a6:	1ac0      	subs	r0, r0, r3
   b96a8:	4344      	muls	r4, r0
   b96aa:	1a50      	subs	r0, r2, r1
   b96ac:	fb94 f0f0 	sdiv	r0, r4, r0
   b96b0:	4418      	add	r0, r3
}
   b96b2:	bd10      	pop	{r4, pc}

000b96b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b96b4:	2100      	movs	r1, #0
   b96b6:	f7ff be7f 	b.w	b93b8 <system_delay_ms>

000b96ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b96ba:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b96bc:	6843      	ldr	r3, [r0, #4]
   b96be:	3b01      	subs	r3, #1
    {
   b96c0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b96c2:	6043      	str	r3, [r0, #4]
   b96c4:	b963      	cbnz	r3, b96e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b96c6:	6803      	ldr	r3, [r0, #0]
   b96c8:	689b      	ldr	r3, [r3, #8]
   b96ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b96cc:	68a3      	ldr	r3, [r4, #8]
   b96ce:	3b01      	subs	r3, #1
   b96d0:	60a3      	str	r3, [r4, #8]
   b96d2:	b92b      	cbnz	r3, b96e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b96d4:	6823      	ldr	r3, [r4, #0]
   b96d6:	4620      	mov	r0, r4
   b96d8:	68db      	ldr	r3, [r3, #12]
        }
    }
   b96da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b96de:	4718      	bx	r3
    }
   b96e0:	bd10      	pop	{r4, pc}

000b96e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b96e2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b96e4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b96e8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b96ea:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b96ee:	42ae      	cmp	r6, r5
   b96f0:	d004      	beq.n	b96fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b96f2:	4628      	mov	r0, r5
   b96f4:	f001 ffa4 	bl	bb640 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b96f8:	3510      	adds	r5, #16
   b96fa:	e7f8      	b.n	b96ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b96fc:	6820      	ldr	r0, [r4, #0]
   b96fe:	f7ff ff65 	bl	b95cc <free>
    AllocatorT::free(data_);
}
   b9702:	4620      	mov	r0, r4
   b9704:	bd70      	pop	{r4, r5, r6, pc}

000b9706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b9706:	b510      	push	{r4, lr}
   b9708:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b970a:	6800      	ldr	r0, [r0, #0]
   b970c:	b108      	cbz	r0, b9712 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b970e:	f7ff ffd4 	bl	b96ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b9712:	4620      	mov	r0, r4
   b9714:	bd10      	pop	{r4, pc}
	...

000b9718 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b9718:	4802      	ldr	r0, [pc, #8]	; (b9724 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b971a:	2300      	movs	r3, #0
   b971c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b971e:	f7ff bbcf 	b.w	b8ec0 <os_mutex_recursive_create>
   b9722:	bf00      	nop
   b9724:	2003e60c 	.word	0x2003e60c

000b9728 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b9728:	2200      	movs	r2, #0
   b972a:	6840      	ldr	r0, [r0, #4]
   b972c:	4611      	mov	r1, r2
   b972e:	f7ff befd 	b.w	b952c <network_ready>

000b9732 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b9732:	2200      	movs	r2, #0
   b9734:	6840      	ldr	r0, [r0, #4]
   b9736:	4611      	mov	r1, r2
   b9738:	f7ff bf18 	b.w	b956c <network_listening>

000b973c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b973c:	2200      	movs	r2, #0
   b973e:	6840      	ldr	r0, [r0, #4]
   b9740:	4611      	mov	r1, r2
   b9742:	f7ff bf23 	b.w	b958c <network_get_listen_timeout>

000b9746 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9746:	6840      	ldr	r0, [r0, #4]
   b9748:	2200      	movs	r2, #0
   b974a:	f7ff bf17 	b.w	b957c <network_set_listen_timeout>

000b974e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b974e:	6840      	ldr	r0, [r0, #4]
   b9750:	2200      	movs	r2, #0
   b9752:	f081 0101 	eor.w	r1, r1, #1
   b9756:	f7ff bf01 	b.w	b955c <network_listen>

000b975a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b975a:	2300      	movs	r3, #0
   b975c:	6840      	ldr	r0, [r0, #4]
   b975e:	461a      	mov	r2, r3
   b9760:	4619      	mov	r1, r3
   b9762:	f7ff bef3 	b.w	b954c <network_off>

000b9766 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9766:	2300      	movs	r3, #0
   b9768:	6840      	ldr	r0, [r0, #4]
   b976a:	461a      	mov	r2, r3
   b976c:	4619      	mov	r1, r3
   b976e:	f7ff bee5 	b.w	b953c <network_on>

000b9772 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9772:	2200      	movs	r2, #0
   b9774:	6840      	ldr	r0, [r0, #4]
   b9776:	4611      	mov	r1, r2
   b9778:	f7ff bec8 	b.w	b950c <network_connecting>

000b977c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b977c:	6840      	ldr	r0, [r0, #4]
   b977e:	2200      	movs	r2, #0
   b9780:	2102      	movs	r1, #2
   b9782:	f7ff becb 	b.w	b951c <network_disconnect>

000b9786 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9786:	2300      	movs	r3, #0
   b9788:	6840      	ldr	r0, [r0, #4]
   b978a:	461a      	mov	r2, r3
   b978c:	f7ff beb6 	b.w	b94fc <network_connect>

000b9790 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b9790:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b9792:	4b13      	ldr	r3, [pc, #76]	; (b97e0 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b9794:	6003      	str	r3, [r0, #0]
   b9796:	2518      	movs	r5, #24
   b9798:	3330      	adds	r3, #48	; 0x30
   b979a:	b086      	sub	sp, #24
   b979c:	460e      	mov	r6, r1
   b979e:	6043      	str	r3, [r0, #4]
   b97a0:	462a      	mov	r2, r5
   b97a2:	2100      	movs	r1, #0
   b97a4:	4604      	mov	r4, r0
   b97a6:	3008      	adds	r0, #8
   b97a8:	f004 fb7a 	bl	bdea0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b97ac:	2200      	movs	r2, #0
   b97ae:	6870      	ldr	r0, [r6, #4]
   b97b0:	4611      	mov	r1, r2
   b97b2:	f7ff febb 	bl	b952c <network_ready>
   b97b6:	b178      	cbz	r0, b97d8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b97b8:	2100      	movs	r1, #0
   b97ba:	462a      	mov	r2, r5
   b97bc:	4668      	mov	r0, sp
   b97be:	f004 fb6f 	bl	bdea0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b97c2:	4669      	mov	r1, sp
   b97c4:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b97c6:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b97ca:	f7ff fb41 	bl	b8e50 <cellular_signal>
   b97ce:	b918      	cbnz	r0, b97d8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b97d0:	4669      	mov	r1, sp
   b97d2:	4620      	mov	r0, r4
   b97d4:	f000 f8b8 	bl	b9948 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b97d8:	4620      	mov	r0, r4
   b97da:	b006      	add	sp, #24
   b97dc:	bd70      	pop	{r4, r5, r6, pc}
   b97de:	bf00      	nop
   b97e0:	000bf568 	.word	0x000bf568

000b97e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b97e4:	4b08      	ldr	r3, [pc, #32]	; (b9808 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b97e6:	b510      	push	{r4, lr}
   b97e8:	2428      	movs	r4, #40	; 0x28
   b97ea:	4622      	mov	r2, r4
   b97ec:	4618      	mov	r0, r3
   b97ee:	2100      	movs	r1, #0
   b97f0:	f004 fb56 	bl	bdea0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b97f4:	4b05      	ldr	r3, [pc, #20]	; (b980c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b97f6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b97f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b97fc:	6042      	str	r2, [r0, #4]
   b97fe:	2204      	movs	r2, #4
   b9800:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b9802:	4a03      	ldr	r2, [pc, #12]	; (b9810 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b9804:	601a      	str	r2, [r3, #0]
   b9806:	bd10      	pop	{r4, pc}
   b9808:	2003e618 	.word	0x2003e618
   b980c:	2003e610 	.word	0x2003e610
   b9810:	000bf52c 	.word	0x000bf52c

000b9814 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b9814:	4770      	bx	lr

000b9816 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b9816:	7b00      	ldrb	r0, [r0, #12]
   b9818:	4770      	bx	lr

000b981a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b981a:	7b03      	ldrb	r3, [r0, #12]
   b981c:	b14b      	cbz	r3, b9832 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b981e:	6903      	ldr	r3, [r0, #16]
   b9820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9824:	d005      	beq.n	b9832 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b9826:	6980      	ldr	r0, [r0, #24]
   b9828:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b982c:	bf18      	it	ne
   b982e:	2001      	movne	r0, #1
   b9830:	4770      	bx	lr
   b9832:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b9834:	4770      	bx	lr

000b9836 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b9836:	6803      	ldr	r3, [r0, #0]
   b9838:	6a1b      	ldr	r3, [r3, #32]
   b983a:	4718      	bx	r3

000b983c <_ZNK14CellularSignal7printToER5Print>:
{
   b983c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b983e:	6803      	ldr	r3, [r0, #0]
{
   b9840:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b9842:	691b      	ldr	r3, [r3, #16]
{
   b9844:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b9846:	4798      	blx	r3
   b9848:	2102      	movs	r1, #2
   b984a:	4628      	mov	r0, r5
   b984c:	f001 fdd4 	bl	bb3f8 <_ZN5Print5printEfi>
    n += p.print(',');
   b9850:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b9852:	4604      	mov	r4, r0
    n += p.print(',');
   b9854:	4628      	mov	r0, r5
   b9856:	f001 fcd9 	bl	bb20c <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b985a:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b985c:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b985e:	699b      	ldr	r3, [r3, #24]
   b9860:	4630      	mov	r0, r6
   b9862:	4798      	blx	r3
   b9864:	2102      	movs	r1, #2
   b9866:	4628      	mov	r0, r5
   b9868:	f001 fdc6 	bl	bb3f8 <_ZN5Print5printEfi>
}
   b986c:	4420      	add	r0, r4
   b986e:	bd70      	pop	{r4, r5, r6, pc}

000b9870 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b9870:	f1a0 0004 	sub.w	r0, r0, #4
   b9874:	f7ff bfe2 	b.w	b983c <_ZNK14CellularSignal7printToER5Print>

000b9878 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b9878:	b510      	push	{r4, lr}
   b987a:	2120      	movs	r1, #32
   b987c:	4604      	mov	r4, r0
   b987e:	f7fa fc0e 	bl	b409e <_ZdlPvj>
   b9882:	4620      	mov	r0, r4
   b9884:	bd10      	pop	{r4, pc}
	...

000b9888 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b9888:	7b03      	ldrb	r3, [r0, #12]
   b988a:	b17b      	cbz	r3, b98ac <_ZNK14CellularSignal11getStrengthEv+0x24>
   b988c:	6943      	ldr	r3, [r0, #20]
   b988e:	2b00      	cmp	r3, #0
   b9890:	db0c      	blt.n	b98ac <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b9892:	ee07 3a90 	vmov	s15, r3
   b9896:	ed9f 7a07 	vldr	s14, [pc, #28]	; b98b4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b989a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b989e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b98a2:	eddf 7a05 	vldr	s15, [pc, #20]	; b98b8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b98a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   b98aa:	4770      	bx	lr
    return -1.0f;
   b98ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b98b0:	4770      	bx	lr
   b98b2:	bf00      	nop
   b98b4:	477fff00 	.word	0x477fff00
   b98b8:	42c80000 	.word	0x42c80000

000b98bc <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b98bc:	7b03      	ldrb	r3, [r0, #12]
   b98be:	b163      	cbz	r3, b98da <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b98c0:	6903      	ldr	r3, [r0, #16]
   b98c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b98c6:	d008      	beq.n	b98da <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b98c8:	ee07 3a90 	vmov	s15, r3
   b98cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; b98e0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b98d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b98d4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b98d8:	4770      	bx	lr
    return 0.0f;
   b98da:	ed9f 0a02 	vldr	s0, [pc, #8]	; b98e4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b98de:	4770      	bx	lr
   b98e0:	42c80000 	.word	0x42c80000
   b98e4:	00000000 	.word	0x00000000

000b98e8 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b98e8:	7b03      	ldrb	r3, [r0, #12]
   b98ea:	b17b      	cbz	r3, b990c <_ZNK14CellularSignal10getQualityEv+0x24>
   b98ec:	69c3      	ldr	r3, [r0, #28]
   b98ee:	2b00      	cmp	r3, #0
   b98f0:	db0c      	blt.n	b990c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b98f2:	ee07 3a90 	vmov	s15, r3
   b98f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9914 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b98fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b98fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9902:	eddf 7a05 	vldr	s15, [pc, #20]	; b9918 <_ZNK14CellularSignal10getQualityEv+0x30>
   b9906:	ee20 0a27 	vmul.f32	s0, s0, s15
   b990a:	4770      	bx	lr
    return -1.0f;
   b990c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9910:	4770      	bx	lr
   b9912:	bf00      	nop
   b9914:	477fff00 	.word	0x477fff00
   b9918:	42c80000 	.word	0x42c80000

000b991c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b991c:	7b03      	ldrb	r3, [r0, #12]
   b991e:	b163      	cbz	r3, b993a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b9920:	6983      	ldr	r3, [r0, #24]
   b9922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9926:	d008      	beq.n	b993a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b9928:	ee07 3a90 	vmov	s15, r3
   b992c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9940 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b9930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9934:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9938:	4770      	bx	lr
    return 0.0f;
   b993a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9944 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b993e:	4770      	bx	lr
   b9940:	42c80000 	.word	0x42c80000
   b9944:	00000000 	.word	0x00000000

000b9948 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b9948:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b994a:	460d      	mov	r5, r1
   b994c:	f100 0408 	add.w	r4, r0, #8
   b9950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9954:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9958:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b995c:	2001      	movs	r0, #1
   b995e:	bd30      	pop	{r4, r5, pc}

000b9960 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b9960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b9962:	230c      	movs	r3, #12
   b9964:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b9968:	6803      	ldr	r3, [r0, #0]
   b996a:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b996e:	7a03      	ldrb	r3, [r0, #8]
   b9970:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b9974:	6843      	ldr	r3, [r0, #4]
   b9976:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b9978:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b997a:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b997c:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9980:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b9982:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b9986:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b998a:	f7ff fdaf 	bl	b94ec <spark_cloud_disconnect>
}
   b998e:	b005      	add	sp, #20
   b9990:	f85d fb04 	ldr.w	pc, [sp], #4

000b9994 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9994:	2200      	movs	r2, #0
   b9996:	6840      	ldr	r0, [r0, #4]
   b9998:	4611      	mov	r1, r2
   b999a:	f7ff bde7 	b.w	b956c <network_listening>

000b999e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b999e:	2200      	movs	r2, #0
   b99a0:	6840      	ldr	r0, [r0, #4]
   b99a2:	4611      	mov	r1, r2
   b99a4:	f7ff bdf2 	b.w	b958c <network_get_listen_timeout>

000b99a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b99a8:	6840      	ldr	r0, [r0, #4]
   b99aa:	2200      	movs	r2, #0
   b99ac:	f7ff bde6 	b.w	b957c <network_set_listen_timeout>

000b99b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b99b0:	6840      	ldr	r0, [r0, #4]
   b99b2:	2200      	movs	r2, #0
   b99b4:	f081 0101 	eor.w	r1, r1, #1
   b99b8:	f7ff bdd0 	b.w	b955c <network_listen>

000b99bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b99bc:	2300      	movs	r3, #0
   b99be:	6840      	ldr	r0, [r0, #4]
   b99c0:	461a      	mov	r2, r3
   b99c2:	4619      	mov	r1, r3
   b99c4:	f7ff bdc2 	b.w	b954c <network_off>

000b99c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b99c8:	2300      	movs	r3, #0
   b99ca:	6840      	ldr	r0, [r0, #4]
   b99cc:	461a      	mov	r2, r3
   b99ce:	4619      	mov	r1, r3
   b99d0:	f7ff bdb4 	b.w	b953c <network_on>

000b99d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b99d4:	2200      	movs	r2, #0
   b99d6:	6840      	ldr	r0, [r0, #4]
   b99d8:	4611      	mov	r1, r2
   b99da:	f7ff bda7 	b.w	b952c <network_ready>

000b99de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b99de:	2200      	movs	r2, #0
   b99e0:	6840      	ldr	r0, [r0, #4]
   b99e2:	4611      	mov	r1, r2
   b99e4:	f7ff bd92 	b.w	b950c <network_connecting>

000b99e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b99e8:	6840      	ldr	r0, [r0, #4]
   b99ea:	2200      	movs	r2, #0
   b99ec:	2102      	movs	r1, #2
   b99ee:	f7ff bd95 	b.w	b951c <network_disconnect>

000b99f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b99f2:	2300      	movs	r3, #0
   b99f4:	6840      	ldr	r0, [r0, #4]
   b99f6:	461a      	mov	r2, r3
   b99f8:	f7ff bd80 	b.w	b94fc <network_connect>

000b99fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b99fc:	4b02      	ldr	r3, [pc, #8]	; (b9a08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b99fe:	2203      	movs	r2, #3
   b9a00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9a02:	4a02      	ldr	r2, [pc, #8]	; (b9a0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9a04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9a06:	4770      	bx	lr
   b9a08:	2003e640 	.word	0x2003e640
   b9a0c:	000bf5a4 	.word	0x000bf5a4

000b9a10 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b9a10:	6800      	ldr	r0, [r0, #0]
   b9a12:	f000 b8f3 	b.w	b9bfc <_ZN7TwoWire4lockEv>

000b9a16 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b9a16:	b510      	push	{r4, lr}
   b9a18:	4604      	mov	r4, r0
      lock_(_lock) {
   b9a1a:	6001      	str	r1, [r0, #0]
   b9a1c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b9a1e:	b10a      	cbz	r2, b9a24 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b9a20:	f7ff fff6 	bl	b9a10 <_ZN9FuelGauge4lockEv>
}
   b9a24:	4620      	mov	r0, r4
   b9a26:	bd10      	pop	{r4, pc}

000b9a28 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b9a28:	b513      	push	{r0, r1, r4, lr}
   b9a2a:	4604      	mov	r4, r0
   b9a2c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b9a2e:	f002 fbc5 	bl	bc1bc <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b9a32:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b9a34:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b9a36:	4620      	mov	r0, r4
   b9a38:	f7ff ffed 	bl	b9a16 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b9a3c:	4620      	mov	r0, r4
   b9a3e:	b002      	add	sp, #8
   b9a40:	bd10      	pop	{r4, pc}

000b9a42 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b9a42:	6800      	ldr	r0, [r0, #0]
   b9a44:	f000 b8e3 	b.w	b9c0e <_ZN7TwoWire6unlockEv>

000b9a48 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b9a48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9a4c:	4604      	mov	r4, r0
   b9a4e:	461d      	mov	r5, r3
   b9a50:	460f      	mov	r7, r1
   b9a52:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b9a54:	f7ff ffdc 	bl	b9a10 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9a58:	2236      	movs	r2, #54	; 0x36
   b9a5a:	2300      	movs	r3, #0
   b9a5c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b9a60:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b9a62:	f04f 0801 	mov.w	r8, #1
   b9a66:	230a      	movs	r3, #10
   b9a68:	4669      	mov	r1, sp
   b9a6a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b9a6e:	f000 f8a9 	bl	b9bc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b9a72:	6820      	ldr	r0, [r4, #0]
   b9a74:	6803      	ldr	r3, [r0, #0]
   b9a76:	4639      	mov	r1, r7
   b9a78:	689b      	ldr	r3, [r3, #8]
   b9a7a:	4798      	blx	r3
    i2c_.write(MSB);
   b9a7c:	6820      	ldr	r0, [r4, #0]
   b9a7e:	6803      	ldr	r3, [r0, #0]
   b9a80:	4631      	mov	r1, r6
   b9a82:	689b      	ldr	r3, [r3, #8]
   b9a84:	4798      	blx	r3
    i2c_.write(LSB);
   b9a86:	6820      	ldr	r0, [r4, #0]
   b9a88:	6803      	ldr	r3, [r0, #0]
   b9a8a:	4629      	mov	r1, r5
   b9a8c:	689b      	ldr	r3, [r3, #8]
   b9a8e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b9a90:	4641      	mov	r1, r8
   b9a92:	6820      	ldr	r0, [r4, #0]
   b9a94:	f000 f8ae 	bl	b9bf4 <_ZN7TwoWire15endTransmissionEh>
   b9a98:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b9a9a:	4620      	mov	r0, r4
   b9a9c:	bf0c      	ite	eq
   b9a9e:	2500      	moveq	r5, #0
   b9aa0:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b9aa4:	f7ff ffcd 	bl	b9a42 <_ZN9FuelGauge6unlockEv>
}
   b9aa8:	4628      	mov	r0, r5
   b9aaa:	b004      	add	sp, #16
   b9aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9ab0 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b9ab0:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b9ab2:	2240      	movs	r2, #64	; 0x40
   b9ab4:	2300      	movs	r3, #0
   b9ab6:	2106      	movs	r1, #6
   b9ab8:	f7ff ffc6 	bl	b9a48 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b9abc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9ac0:	bd08      	pop	{r3, pc}

000b9ac2 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9ac2:	4770      	bx	lr

000b9ac4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ac6:	4606      	mov	r6, r0
   b9ac8:	4615      	mov	r5, r2
   b9aca:	460c      	mov	r4, r1
   b9acc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9ace:	42bc      	cmp	r4, r7
   b9ad0:	d006      	beq.n	b9ae0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9ad2:	6833      	ldr	r3, [r6, #0]
   b9ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9ad8:	689b      	ldr	r3, [r3, #8]
   b9ada:	4630      	mov	r0, r6
   b9adc:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9ade:	e7f6      	b.n	b9ace <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9ae0:	4628      	mov	r0, r5
   b9ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9ae4 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9ae4:	7c00      	ldrb	r0, [r0, #16]
   b9ae6:	2200      	movs	r2, #0
   b9ae8:	f7ff bac2 	b.w	b9070 <hal_i2c_write>

000b9aec <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9aec:	7c00      	ldrb	r0, [r0, #16]
   b9aee:	2100      	movs	r1, #0
   b9af0:	f7ff bac6 	b.w	b9080 <hal_i2c_available>

000b9af4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9af4:	7c00      	ldrb	r0, [r0, #16]
   b9af6:	2100      	movs	r1, #0
   b9af8:	f7ff baca 	b.w	b9090 <hal_i2c_read>

000b9afc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9afc:	7c00      	ldrb	r0, [r0, #16]
   b9afe:	2100      	movs	r1, #0
   b9b00:	f7ff bace 	b.w	b90a0 <hal_i2c_peek>

000b9b04 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9b04:	7c00      	ldrb	r0, [r0, #16]
   b9b06:	2100      	movs	r1, #0
   b9b08:	f7ff bad2 	b.w	b90b0 <hal_i2c_flush>

000b9b0c <_ZN7TwoWireD0Ev>:
   b9b0c:	b510      	push	{r4, lr}
   b9b0e:	2114      	movs	r1, #20
   b9b10:	4604      	mov	r4, r0
   b9b12:	f7fa fac4 	bl	b409e <_ZdlPvj>
   b9b16:	4620      	mov	r0, r4
   b9b18:	bd10      	pop	{r4, pc}
	...

000b9b1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9b1c:	b538      	push	{r3, r4, r5, lr}
   b9b1e:	4604      	mov	r4, r0
   b9b20:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9b26:	2200      	movs	r2, #0
   b9b28:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9b2c:	4b09      	ldr	r3, [pc, #36]	; (b9b54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b9b2e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9b30:	4608      	mov	r0, r1
   b9b32:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b9b34:	4629      	mov	r1, r5
   b9b36:	f7ff facb 	bl	b90d0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9b3a:	30bf      	adds	r0, #191	; 0xbf
   b9b3c:	d108      	bne.n	b9b50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b9b3e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9b40:	07db      	lsls	r3, r3, #31
   b9b42:	d505      	bpl.n	b9b50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b9b44:	6868      	ldr	r0, [r5, #4]
   b9b46:	f7ff fd41 	bl	b95cc <free>
    free(conf.tx_buffer);
   b9b4a:	68e8      	ldr	r0, [r5, #12]
   b9b4c:	f7ff fd3e 	bl	b95cc <free>
}
   b9b50:	4620      	mov	r0, r4
   b9b52:	bd38      	pop	{r3, r4, r5, pc}
   b9b54:	000bf5e0 	.word	0x000bf5e0

000b9b58 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9b58:	2300      	movs	r3, #0
   b9b5a:	7c00      	ldrb	r0, [r0, #16]
   b9b5c:	461a      	mov	r2, r3
   b9b5e:	4619      	mov	r1, r3
   b9b60:	f7ff ba6e 	b.w	b9040 <hal_i2c_begin>

000b9b64 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9b64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9b66:	2200      	movs	r2, #0
   b9b68:	2314      	movs	r3, #20
   b9b6a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9b6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9b72:	780b      	ldrb	r3, [r1, #0]
   b9b74:	f88d 3008 	strb.w	r3, [sp, #8]
   b9b78:	684b      	ldr	r3, [r1, #4]
   b9b7a:	9303      	str	r3, [sp, #12]
   b9b7c:	68cb      	ldr	r3, [r1, #12]
   b9b7e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9b80:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9b82:	7a0b      	ldrb	r3, [r1, #8]
   b9b84:	9305      	str	r3, [sp, #20]
   b9b86:	a901      	add	r1, sp, #4
   b9b88:	f7ff faba 	bl	b9100 <hal_i2c_request_ex>
}
   b9b8c:	b007      	add	sp, #28
   b9b8e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9b92 <_ZN7TwoWire11requestFromEhjh>:
{
   b9b92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9b94:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9b96:	f88d 1000 	strb.w	r1, [sp]
   b9b9a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9b9e:	9103      	str	r1, [sp, #12]
   b9ba0:	bf18      	it	ne
   b9ba2:	2301      	movne	r3, #1
   b9ba4:	4669      	mov	r1, sp
    size_ = size;
   b9ba6:	9201      	str	r2, [sp, #4]
   b9ba8:	f88d 3008 	strb.w	r3, [sp, #8]
   b9bac:	f7ff ffda 	bl	b9b64 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9bb0:	b005      	add	sp, #20
   b9bb2:	f85d fb04 	ldr.w	pc, [sp], #4

000b9bb6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9bb6:	7c00      	ldrb	r0, [r0, #16]
   b9bb8:	2200      	movs	r2, #0
   b9bba:	f7ff ba49 	b.w	b9050 <hal_i2c_begin_transmission>

000b9bbe <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9bbe:	b2c9      	uxtb	r1, r1
   b9bc0:	f7ff bff9 	b.w	b9bb6 <_ZN7TwoWire17beginTransmissionEh>

000b9bc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b9bc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9bc6:	2300      	movs	r3, #0
   b9bc8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b9bcc:	684a      	ldr	r2, [r1, #4]
   b9bce:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b9bd0:	2314      	movs	r3, #20
    };
   b9bd2:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9bd4:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9bd8:	780b      	ldrb	r3, [r1, #0]
    };
   b9bda:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9bdc:	7a0a      	ldrb	r2, [r1, #8]
   b9bde:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b9be0:	7c00      	ldrb	r0, [r0, #16]
    };
   b9be2:	f88d 3008 	strb.w	r3, [sp, #8]
   b9be6:	aa01      	add	r2, sp, #4
   b9be8:	4619      	mov	r1, r3
   b9bea:	f7ff fa31 	bl	b9050 <hal_i2c_begin_transmission>
}
   b9bee:	b007      	add	sp, #28
   b9bf0:	f85d fb04 	ldr.w	pc, [sp], #4

000b9bf4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9bf4:	7c00      	ldrb	r0, [r0, #16]
   b9bf6:	2200      	movs	r2, #0
   b9bf8:	f7ff ba32 	b.w	b9060 <hal_i2c_end_transmission>

000b9bfc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b9bfc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b9bfe:	2100      	movs	r1, #0
   b9c00:	7c00      	ldrb	r0, [r0, #16]
   b9c02:	f7ff fa6d 	bl	b90e0 <hal_i2c_lock>
}
   b9c06:	fab0 f080 	clz	r0, r0
   b9c0a:	0940      	lsrs	r0, r0, #5
   b9c0c:	bd08      	pop	{r3, pc}

000b9c0e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b9c0e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b9c10:	2100      	movs	r1, #0
   b9c12:	7c00      	ldrb	r0, [r0, #16]
   b9c14:	f7ff fa6c 	bl	b90f0 <hal_i2c_unlock>
}
   b9c18:	fab0 f080 	clz	r0, r0
   b9c1c:	0940      	lsrs	r0, r0, #5
   b9c1e:	bd08      	pop	{r3, pc}

000b9c20 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9c20:	4700      	bx	r0
	...

000b9c24 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9c24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9c28:	2400      	movs	r4, #0
{
   b9c2a:	461d      	mov	r5, r3
   b9c2c:	460f      	mov	r7, r1
   b9c2e:	4690      	mov	r8, r2
   b9c30:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b9c32:	f7ff f9f5 	bl	b9020 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9c36:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9c38:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9c3c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9c40:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9c44:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9c48:	bfa2      	ittt	ge
   b9c4a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9c4e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9c52:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9c54:	4907      	ldr	r1, [pc, #28]	; (b9c74 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9c56:	9400      	str	r4, [sp, #0]
   b9c58:	4643      	mov	r3, r8
   b9c5a:	463a      	mov	r2, r7
   b9c5c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9c5e:	bfa8      	it	ge
   b9c60:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9c64:	f7ff f9d4 	bl	b9010 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9c68:	fab0 f080 	clz	r0, r0
   b9c6c:	0940      	lsrs	r0, r0, #5
   b9c6e:	b004      	add	sp, #16
   b9c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9c74:	000b9c21 	.word	0x000b9c21

000b9c78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9c78:	4770      	bx	lr

000b9c7a <_ZN9IPAddressD0Ev>:
   b9c7a:	b510      	push	{r4, lr}
   b9c7c:	2118      	movs	r1, #24
   b9c7e:	4604      	mov	r4, r0
   b9c80:	f7fa fa0d 	bl	b409e <_ZdlPvj>
   b9c84:	4620      	mov	r0, r4
   b9c86:	bd10      	pop	{r4, pc}

000b9c88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9c88:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9c8a:	7d03      	ldrb	r3, [r0, #20]
   b9c8c:	2b06      	cmp	r3, #6
{
   b9c8e:	b08d      	sub	sp, #52	; 0x34
   b9c90:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9c92:	f100 0704 	add.w	r7, r0, #4
   b9c96:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9c9a:	d012      	beq.n	b9cc2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b9c9c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9ca0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9ca4:	220a      	movs	r2, #10
   b9ca6:	4630      	mov	r0, r6
   b9ca8:	f001 fabf 	bl	bb22a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9cac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9cae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9cb0:	d019      	beq.n	b9ce6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9cb2:	2c00      	cmp	r4, #0
   b9cb4:	d0f4      	beq.n	b9ca0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9cb6:	212e      	movs	r1, #46	; 0x2e
   b9cb8:	4630      	mov	r0, r6
   b9cba:	f001 faa7 	bl	bb20c <_ZN5Print5printEc>
   b9cbe:	4404      	add	r4, r0
   b9cc0:	e7ee      	b.n	b9ca0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9cc2:	232f      	movs	r3, #47	; 0x2f
   b9cc4:	466a      	mov	r2, sp
   b9cc6:	4639      	mov	r1, r7
   b9cc8:	200a      	movs	r0, #10
		buf[0] = 0;
   b9cca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9cce:	f7ff fa1f 	bl	b9110 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9cd2:	4668      	mov	r0, sp
   b9cd4:	f004 f981 	bl	bdfda <strlen>
   b9cd8:	6833      	ldr	r3, [r6, #0]
   b9cda:	4602      	mov	r2, r0
   b9cdc:	68db      	ldr	r3, [r3, #12]
   b9cde:	4669      	mov	r1, sp
   b9ce0:	4630      	mov	r0, r6
   b9ce2:	4798      	blx	r3
   b9ce4:	4604      	mov	r4, r0
    }
    return n;
}
   b9ce6:	4620      	mov	r0, r4
   b9ce8:	b00d      	add	sp, #52	; 0x34
   b9cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9cec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9cec:	b510      	push	{r4, lr}
   b9cee:	4b05      	ldr	r3, [pc, #20]	; (b9d04 <_ZN9IPAddressC1Ev+0x18>)
   b9cf0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9cf2:	2211      	movs	r2, #17
   b9cf4:	f840 3b04 	str.w	r3, [r0], #4
   b9cf8:	2100      	movs	r1, #0
   b9cfa:	f004 f8d1 	bl	bdea0 <memset>
}
   b9cfe:	4620      	mov	r0, r4
   b9d00:	bd10      	pop	{r4, pc}
   b9d02:	bf00      	nop
   b9d04:	000bf608 	.word	0x000bf608

000b9d08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9d08:	4603      	mov	r3, r0
   b9d0a:	4a07      	ldr	r2, [pc, #28]	; (b9d28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9d0c:	b510      	push	{r4, lr}
   b9d0e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9d12:	f101 0210 	add.w	r2, r1, #16
   b9d16:	f851 4b04 	ldr.w	r4, [r1], #4
   b9d1a:	f843 4b04 	str.w	r4, [r3], #4
   b9d1e:	4291      	cmp	r1, r2
   b9d20:	d1f9      	bne.n	b9d16 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9d22:	780a      	ldrb	r2, [r1, #0]
   b9d24:	701a      	strb	r2, [r3, #0]
}
   b9d26:	bd10      	pop	{r4, pc}
   b9d28:	000bf608 	.word	0x000bf608

000b9d2c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9d2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9d2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9d32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9d36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9d3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9d3e:	2304      	movs	r3, #4
   b9d40:	6041      	str	r1, [r0, #4]
   b9d42:	7503      	strb	r3, [r0, #20]
}
   b9d44:	bd10      	pop	{r4, pc}
	...

000b9d48 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9d48:	b507      	push	{r0, r1, r2, lr}
   b9d4a:	4b06      	ldr	r3, [pc, #24]	; (b9d64 <_ZN9IPAddressC1EPKh+0x1c>)
   b9d4c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9d4e:	78cb      	ldrb	r3, [r1, #3]
   b9d50:	9300      	str	r3, [sp, #0]
   b9d52:	788b      	ldrb	r3, [r1, #2]
   b9d54:	784a      	ldrb	r2, [r1, #1]
   b9d56:	7809      	ldrb	r1, [r1, #0]
   b9d58:	f7ff ffe8 	bl	b9d2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9d5c:	b003      	add	sp, #12
   b9d5e:	f85d fb04 	ldr.w	pc, [sp], #4
   b9d62:	bf00      	nop
   b9d64:	000bf608 	.word	0x000bf608

000b9d68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b9d68:	f100 0310 	add.w	r3, r0, #16
   b9d6c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b9d6e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b9d72:	2901      	cmp	r1, #1
   b9d74:	4618      	mov	r0, r3
   b9d76:	d108      	bne.n	b9d8a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b9d78:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b9d7c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b9d80:	3a01      	subs	r2, #1
   b9d82:	f103 0310 	add.w	r3, r3, #16
   b9d86:	d1f2      	bne.n	b9d6e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b9d88:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b9d8a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b9d8c:	bf04      	itt	eq
   b9d8e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b9d92:	1852      	addeq	r2, r2, r1
   b9d94:	e7f4      	b.n	b9d80 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b9d96 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b9d96:	b40e      	push	{r1, r2, r3}
   b9d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d9a:	b088      	sub	sp, #32
   b9d9c:	af00      	add	r7, sp, #0
   b9d9e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9da2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9da4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9da8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9daa:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9dac:	462b      	mov	r3, r5
   b9dae:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9db0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9db2:	f7ff fc2b 	bl	b960c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b9db6:	280f      	cmp	r0, #15
   b9db8:	687a      	ldr	r2, [r7, #4]
   b9dba:	d91a      	bls.n	b9df2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b9dbc:	f100 0308 	add.w	r3, r0, #8
   b9dc0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9dc4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b9dc6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9dca:	1c41      	adds	r1, r0, #1
   b9dcc:	462b      	mov	r3, r5
   b9dce:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9dd0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9dd2:	f7ff fc1b 	bl	b960c <vsnprintf>
        if (n > 0) {
   b9dd6:	1e02      	subs	r2, r0, #0
   b9dd8:	dd04      	ble.n	b9de4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b9dda:	6823      	ldr	r3, [r4, #0]
   b9ddc:	4669      	mov	r1, sp
   b9dde:	689b      	ldr	r3, [r3, #8]
   b9de0:	4620      	mov	r0, r4
   b9de2:	4798      	blx	r3
   b9de4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9de6:	3720      	adds	r7, #32
   b9de8:	46bd      	mov	sp, r7
   b9dea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9dee:	b003      	add	sp, #12
   b9df0:	4770      	bx	lr
    } else if (n > 0) {
   b9df2:	2800      	cmp	r0, #0
   b9df4:	d0f7      	beq.n	b9de6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9df6:	6823      	ldr	r3, [r4, #0]
   b9df8:	4602      	mov	r2, r0
   b9dfa:	689b      	ldr	r3, [r3, #8]
   b9dfc:	f107 0110 	add.w	r1, r7, #16
   b9e00:	4620      	mov	r0, r4
   b9e02:	4798      	blx	r3
}
   b9e04:	e7ef      	b.n	b9de6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9e06 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9e06:	b538      	push	{r3, r4, r5, lr}
   b9e08:	680b      	ldr	r3, [r1, #0]
   b9e0a:	6003      	str	r3, [r0, #0]
   b9e0c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b9e0e:	6843      	ldr	r3, [r0, #4]
   b9e10:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9e12:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b9e14:	d008      	beq.n	b9e28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b9e16:	b115      	cbz	r5, b9e1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9e18:	686b      	ldr	r3, [r5, #4]
   b9e1a:	3301      	adds	r3, #1
   b9e1c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b9e1e:	6860      	ldr	r0, [r4, #4]
   b9e20:	b108      	cbz	r0, b9e26 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b9e22:	f7ff fc4a 	bl	b96ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9e26:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9e28:	bd38      	pop	{r3, r4, r5, pc}

000b9e2a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b9e2a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9e2c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b9e2e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9e32:	689b      	ldr	r3, [r3, #8]
   b9e34:	2201      	movs	r2, #1
   b9e36:	f10d 0107 	add.w	r1, sp, #7
   b9e3a:	4798      	blx	r3
}
   b9e3c:	b003      	add	sp, #12
   b9e3e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9e42 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9e42:	460b      	mov	r3, r1
   b9e44:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b9e46:	2200      	movs	r2, #0
   b9e48:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b9e4a:	e9c0 2200 	strd	r2, r2, [r0]
   b9e4e:	4604      	mov	r4, r0
        t_ = t;
   b9e50:	6083      	str	r3, [r0, #8]
    if (t) {
   b9e52:	b90b      	cbnz	r3, b9e58 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b9e54:	4620      	mov	r0, r4
   b9e56:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b9e58:	f7ff ffd5 	bl	b9e06 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b9e5c:	e7fa      	b.n	b9e54 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b9e5e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b9e5e:	6883      	ldr	r3, [r0, #8]
   b9e60:	b1eb      	cbz	r3, b9e9e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b9e62:	781a      	ldrb	r2, [r3, #0]
   b9e64:	2a03      	cmp	r2, #3
   b9e66:	d81a      	bhi.n	b9e9e <_ZNK5spark9JSONValue4typeEv+0x40>
   b9e68:	e8df f002 	tbb	[pc, r2]
   b9e6c:	1b021704 	.word	0x1b021704
   b9e70:	2005      	movs	r0, #5
   b9e72:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9e74:	6802      	ldr	r2, [r0, #0]
   b9e76:	685b      	ldr	r3, [r3, #4]
   b9e78:	6852      	ldr	r2, [r2, #4]
   b9e7a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b9e7c:	282d      	cmp	r0, #45	; 0x2d
   b9e7e:	d012      	beq.n	b9ea6 <_ZNK5spark9JSONValue4typeEv+0x48>
   b9e80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9e84:	2b09      	cmp	r3, #9
   b9e86:	d90e      	bls.n	b9ea6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9e88:	2874      	cmp	r0, #116	; 0x74
   b9e8a:	d00e      	beq.n	b9eaa <_ZNK5spark9JSONValue4typeEv+0x4c>
   b9e8c:	2866      	cmp	r0, #102	; 0x66
   b9e8e:	d00c      	beq.n	b9eaa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9e90:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9e94:	4258      	negs	r0, r3
   b9e96:	4158      	adcs	r0, r3
   b9e98:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b9e9a:	2006      	movs	r0, #6
   b9e9c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b9e9e:	2000      	movs	r0, #0
   b9ea0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9ea2:	2004      	movs	r0, #4
   b9ea4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b9ea6:	2003      	movs	r0, #3
   b9ea8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b9eaa:	2002      	movs	r0, #2
}
   b9eac:	4770      	bx	lr

000b9eae <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b9eae:	b510      	push	{r4, lr}
   b9eb0:	4604      	mov	r4, r0
    switch (type()) {
   b9eb2:	f7ff ffd4 	bl	b9e5e <_ZNK5spark9JSONValue4typeEv>
   b9eb6:	2802      	cmp	r0, #2
   b9eb8:	d00e      	beq.n	b9ed8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b9eba:	1ec3      	subs	r3, r0, #3
   b9ebc:	b2db      	uxtb	r3, r3
   b9ebe:	2b01      	cmp	r3, #1
   b9ec0:	d814      	bhi.n	b9eec <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9ec2:	6822      	ldr	r2, [r4, #0]
   b9ec4:	68a3      	ldr	r3, [r4, #8]
   b9ec6:	6850      	ldr	r0, [r2, #4]
   b9ec8:	685b      	ldr	r3, [r3, #4]
}
   b9eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b9ece:	220a      	movs	r2, #10
   b9ed0:	2100      	movs	r1, #0
   b9ed2:	4418      	add	r0, r3
   b9ed4:	f004 b946 	b.w	be164 <strtol>
        const char* const s = d_->json + t_->start;
   b9ed8:	6822      	ldr	r2, [r4, #0]
   b9eda:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b9edc:	6852      	ldr	r2, [r2, #4]
   b9ede:	685b      	ldr	r3, [r3, #4]
   b9ee0:	5cd0      	ldrb	r0, [r2, r3]
   b9ee2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9ee6:	4258      	negs	r0, r3
   b9ee8:	4158      	adcs	r0, r3
}
   b9eea:	bd10      	pop	{r4, pc}
    switch (type()) {
   b9eec:	2000      	movs	r0, #0
   b9eee:	e7fc      	b.n	b9eea <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9ef0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9ef0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9ef2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9ef4:	e9c0 3300 	strd	r3, r3, [r0]
   b9ef8:	4604      	mov	r4, r0
        n_(0) {
   b9efa:	480e      	ldr	r0, [pc, #56]	; (b9f34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b9efc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9f00:	b1a9      	cbz	r1, b9f2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9f02:	780b      	ldrb	r3, [r1, #0]
   b9f04:	2b03      	cmp	r3, #3
   b9f06:	d006      	beq.n	b9f16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9f08:	b98b      	cbnz	r3, b9f2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b9f0a:	6813      	ldr	r3, [r2, #0]
   b9f0c:	6858      	ldr	r0, [r3, #4]
   b9f0e:	684b      	ldr	r3, [r1, #4]
   b9f10:	5cc3      	ldrb	r3, [r0, r3]
   b9f12:	2b6e      	cmp	r3, #110	; 0x6e
   b9f14:	d007      	beq.n	b9f26 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b9f16:	6813      	ldr	r3, [r2, #0]
   b9f18:	684d      	ldr	r5, [r1, #4]
   b9f1a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b9f1c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b9f1e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9f20:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b9f22:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b9f24:	60e3      	str	r3, [r4, #12]
   b9f26:	4611      	mov	r1, r2
   b9f28:	4620      	mov	r0, r4
   b9f2a:	f7ff ff6c 	bl	b9e06 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9f2e:	4620      	mov	r0, r4
   b9f30:	bd38      	pop	{r3, r4, r5, pc}
   b9f32:	bf00      	nop
   b9f34:	000bf671 	.word	0x000bf671

000b9f38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9f38:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9f3a:	2500      	movs	r5, #0
   b9f3c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b9f3e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b9f42:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b9f46:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9f4a:	4604      	mov	r4, r0
   b9f4c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b9f4e:	b14b      	cbz	r3, b9f64 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b9f50:	781a      	ldrb	r2, [r3, #0]
   b9f52:	2a01      	cmp	r2, #1
   b9f54:	d106      	bne.n	b9f64 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b9f56:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b9f5a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b9f5c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b9f5e:	6143      	str	r3, [r0, #20]
   b9f60:	f7ff ff51 	bl	b9e06 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9f64:	4620      	mov	r0, r4
   b9f66:	bd38      	pop	{r3, r4, r5, pc}

000b9f68 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9f68:	b510      	push	{r4, lr}
    if (!n_) {
   b9f6a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9f6c:	4604      	mov	r4, r0
    if (!n_) {
   b9f6e:	b163      	cbz	r3, b9f8a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9f70:	6880      	ldr	r0, [r0, #8]
   b9f72:	60e0      	str	r0, [r4, #12]
    --n_;
   b9f74:	3b01      	subs	r3, #1
    ++t_;
   b9f76:	3010      	adds	r0, #16
   b9f78:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b9f7a:	6120      	str	r0, [r4, #16]
    --n_;
   b9f7c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b9f7e:	b113      	cbz	r3, b9f86 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9f80:	f7ff fef2 	bl	b9d68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9f84:	60a0      	str	r0, [r4, #8]
    return true;
   b9f86:	2001      	movs	r0, #1
   b9f88:	e000      	b.n	b9f8c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b9f8a:	4618      	mov	r0, r3
}
   b9f8c:	bd10      	pop	{r4, pc}

000b9f8e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9f8e:	b510      	push	{r4, lr}
    write('}');
   b9f90:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9f92:	4604      	mov	r4, r0
    write('}');
   b9f94:	f7ff ff49 	bl	b9e2a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9f98:	2301      	movs	r3, #1
   b9f9a:	7123      	strb	r3, [r4, #4]
}
   b9f9c:	4620      	mov	r0, r4
   b9f9e:	bd10      	pop	{r4, pc}

000b9fa0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9fa0:	b508      	push	{r3, lr}
    switch (state_) {
   b9fa2:	7903      	ldrb	r3, [r0, #4]
   b9fa4:	2b01      	cmp	r3, #1
   b9fa6:	d002      	beq.n	b9fae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9fa8:	2b02      	cmp	r3, #2
   b9faa:	d004      	beq.n	b9fb6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b9fac:	bd08      	pop	{r3, pc}
        write(',');
   b9fae:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9fb0:	f7ff ff3b 	bl	b9e2a <_ZN5spark10JSONWriter5writeEc>
}
   b9fb4:	e7fa      	b.n	b9fac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b9fb6:	213a      	movs	r1, #58	; 0x3a
   b9fb8:	e7fa      	b.n	b9fb0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b9fba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b9fba:	b510      	push	{r4, lr}
   b9fbc:	4604      	mov	r4, r0
    writeSeparator();
   b9fbe:	f7ff ffef 	bl	b9fa0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9fc2:	4620      	mov	r0, r4
   b9fc4:	217b      	movs	r1, #123	; 0x7b
   b9fc6:	f7ff ff30 	bl	b9e2a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b9fca:	2300      	movs	r3, #0
   b9fcc:	7123      	strb	r3, [r4, #4]
}
   b9fce:	4620      	mov	r0, r4
   b9fd0:	bd10      	pop	{r4, pc}
	...

000b9fd4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9fd4:	b513      	push	{r0, r1, r4, lr}
   b9fd6:	4604      	mov	r4, r0
   b9fd8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9fda:	f7ff ffe1 	bl	b9fa0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b9fde:	6823      	ldr	r3, [r4, #0]
   b9fe0:	9a01      	ldr	r2, [sp, #4]
   b9fe2:	68db      	ldr	r3, [r3, #12]
   b9fe4:	4903      	ldr	r1, [pc, #12]	; (b9ff4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9fe6:	4620      	mov	r0, r4
   b9fe8:	4798      	blx	r3
    state_ = NEXT;
   b9fea:	2301      	movs	r3, #1
}
   b9fec:	4620      	mov	r0, r4
    state_ = NEXT;
   b9fee:	7123      	strb	r3, [r4, #4]
}
   b9ff0:	b002      	add	sp, #8
   b9ff2:	bd10      	pop	{r4, pc}
   b9ff4:	000be36a 	.word	0x000be36a

000b9ff8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9ff8:	b513      	push	{r0, r1, r4, lr}
   b9ffa:	4604      	mov	r4, r0
   b9ffc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9ffe:	f7ff ffcf 	bl	b9fa0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   ba002:	6823      	ldr	r3, [r4, #0]
   ba004:	9a01      	ldr	r2, [sp, #4]
   ba006:	68db      	ldr	r3, [r3, #12]
   ba008:	4903      	ldr	r1, [pc, #12]	; (ba018 <_ZN5spark10JSONWriter5valueEj+0x20>)
   ba00a:	4620      	mov	r0, r4
   ba00c:	4798      	blx	r3
    state_ = NEXT;
   ba00e:	2301      	movs	r3, #1
}
   ba010:	4620      	mov	r0, r4
    state_ = NEXT;
   ba012:	7123      	strb	r3, [r4, #4]
}
   ba014:	b002      	add	sp, #8
   ba016:	bd10      	pop	{r4, pc}
   ba018:	000bef3a 	.word	0x000bef3a

000ba01c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   ba01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba020:	460d      	mov	r5, r1
    write('"');
   ba022:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   ba024:	4690      	mov	r8, r2
   ba026:	4604      	mov	r4, r0
    write('"');
   ba028:	f7ff feff 	bl	b9e2a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   ba02c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba0d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   ba030:	44a8      	add	r8, r5
    const char *s = str;
   ba032:	462f      	mov	r7, r5
    while (s != end) {
   ba034:	4547      	cmp	r7, r8
   ba036:	46ba      	mov	sl, r7
   ba038:	d03d      	beq.n	ba0b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   ba03a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   ba03e:	2e22      	cmp	r6, #34	; 0x22
   ba040:	d006      	beq.n	ba050 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   ba042:	2e5c      	cmp	r6, #92	; 0x5c
   ba044:	d004      	beq.n	ba050 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   ba046:	4630      	mov	r0, r6
   ba048:	f003 fefa 	bl	bde40 <isprint>
   ba04c:	2800      	cmp	r0, #0
   ba04e:	d1f1      	bne.n	ba034 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   ba050:	6823      	ldr	r3, [r4, #0]
   ba052:	ebaa 0205 	sub.w	r2, sl, r5
   ba056:	689b      	ldr	r3, [r3, #8]
   ba058:	4629      	mov	r1, r5
   ba05a:	4620      	mov	r0, r4
   ba05c:	4798      	blx	r3
            write('\\');
   ba05e:	215c      	movs	r1, #92	; 0x5c
   ba060:	4620      	mov	r0, r4
   ba062:	f7ff fee2 	bl	b9e2a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   ba066:	2e0d      	cmp	r6, #13
   ba068:	d80a      	bhi.n	ba080 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   ba06a:	2e07      	cmp	r6, #7
   ba06c:	d91c      	bls.n	ba0a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   ba06e:	f1a6 0308 	sub.w	r3, r6, #8
   ba072:	2b05      	cmp	r3, #5
   ba074:	d818      	bhi.n	ba0a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   ba076:	e8df f003 	tbb	[pc, r3]
   ba07a:	0f0d      	.short	0x0f0d
   ba07c:	15131711 	.word	0x15131711
   ba080:	2e22      	cmp	r6, #34	; 0x22
   ba082:	d001      	beq.n	ba088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   ba084:	2e5c      	cmp	r6, #92	; 0x5c
   ba086:	d10f      	bne.n	ba0a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   ba088:	4631      	mov	r1, r6
                write('b');
   ba08a:	4620      	mov	r0, r4
   ba08c:	f7ff fecd 	bl	b9e2a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   ba090:	463d      	mov	r5, r7
    while (s != end) {
   ba092:	e7cf      	b.n	ba034 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   ba094:	2162      	movs	r1, #98	; 0x62
   ba096:	e7f8      	b.n	ba08a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   ba098:	2174      	movs	r1, #116	; 0x74
   ba09a:	e7f6      	b.n	ba08a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   ba09c:	216e      	movs	r1, #110	; 0x6e
   ba09e:	e7f4      	b.n	ba08a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   ba0a0:	2166      	movs	r1, #102	; 0x66
   ba0a2:	e7f2      	b.n	ba08a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   ba0a4:	2172      	movs	r1, #114	; 0x72
   ba0a6:	e7f0      	b.n	ba08a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   ba0a8:	6823      	ldr	r3, [r4, #0]
   ba0aa:	4632      	mov	r2, r6
   ba0ac:	68db      	ldr	r3, [r3, #12]
   ba0ae:	4649      	mov	r1, r9
   ba0b0:	4620      	mov	r0, r4
   ba0b2:	4798      	blx	r3
                break;
   ba0b4:	e7ec      	b.n	ba090 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   ba0b6:	42bd      	cmp	r5, r7
   ba0b8:	d005      	beq.n	ba0c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   ba0ba:	6823      	ldr	r3, [r4, #0]
   ba0bc:	1b7a      	subs	r2, r7, r5
   ba0be:	689b      	ldr	r3, [r3, #8]
   ba0c0:	4629      	mov	r1, r5
   ba0c2:	4620      	mov	r0, r4
   ba0c4:	4798      	blx	r3
    }
    write('"');
   ba0c6:	2122      	movs	r1, #34	; 0x22
   ba0c8:	4620      	mov	r0, r4
   ba0ca:	f7ff feae 	bl	b9e2a <_ZN5spark10JSONWriter5writeEc>
}
   ba0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba0d2:	bf00      	nop
   ba0d4:	000bf614 	.word	0x000bf614

000ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   ba0d8:	b513      	push	{r0, r1, r4, lr}
   ba0da:	4604      	mov	r4, r0
   ba0dc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   ba0e0:	f7ff ff5e 	bl	b9fa0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   ba0e4:	4620      	mov	r0, r4
   ba0e6:	e9dd 2100 	ldrd	r2, r1, [sp]
   ba0ea:	f7ff ff97 	bl	ba01c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   ba0ee:	2302      	movs	r3, #2
}
   ba0f0:	4620      	mov	r0, r4
    state_ = VALUE;
   ba0f2:	7123      	strb	r3, [r4, #4]
}
   ba0f4:	b002      	add	sp, #8
   ba0f6:	bd10      	pop	{r4, pc}

000ba0f8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   ba0f8:	b513      	push	{r0, r1, r4, lr}
   ba0fa:	4604      	mov	r4, r0
   ba0fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   ba100:	f7ff ff4e 	bl	b9fa0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   ba104:	4620      	mov	r0, r4
   ba106:	e9dd 2100 	ldrd	r2, r1, [sp]
   ba10a:	f7ff ff87 	bl	ba01c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   ba10e:	2301      	movs	r3, #1
}
   ba110:	4620      	mov	r0, r4
    state_ = NEXT;
   ba112:	7123      	strb	r3, [r4, #4]
}
   ba114:	b002      	add	sp, #8
   ba116:	bd10      	pop	{r4, pc}

000ba118 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   ba118:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   ba11a:	460b      	mov	r3, r1
    s->update(ticks);
   ba11c:	6892      	ldr	r2, [r2, #8]
   ba11e:	4601      	mov	r1, r0
   ba120:	4618      	mov	r0, r3
   ba122:	4710      	bx	r2

000ba124 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   ba124:	b570      	push	{r4, r5, r6, lr}
   ba126:	4c0e      	ldr	r4, [pc, #56]	; (ba160 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   ba128:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   ba12a:	2500      	movs	r5, #0
   ba12c:	241c      	movs	r4, #28
   ba12e:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   ba132:	f89d 4014 	ldrb.w	r4, [sp, #20]
   ba136:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   ba13a:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   ba13c:	f004 0403 	and.w	r4, r4, #3
   ba140:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   ba144:	b2e4      	uxtb	r4, r4
   ba146:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   ba148:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   ba14a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   ba14c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   ba14e:	7c42      	ldrb	r2, [r0, #17]
   ba150:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   ba152:	bf0a      	itet	eq
   ba154:	4b03      	ldreq	r3, [pc, #12]	; (ba164 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   ba156:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   ba158:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   ba15c:	bd70      	pop	{r4, r5, r6, pc}
   ba15e:	bf00      	nop
   ba160:	000bec44 	.word	0x000bec44
   ba164:	000ba119 	.word	0x000ba119

000ba168 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   ba168:	6880      	ldr	r0, [r0, #8]
   ba16a:	6803      	ldr	r3, [r0, #0]
   ba16c:	68db      	ldr	r3, [r3, #12]
   ba16e:	4718      	bx	r3

000ba170 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   ba170:	4770      	bx	lr

000ba172 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   ba172:	4608      	mov	r0, r1
   ba174:	b111      	cbz	r1, ba17c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   ba176:	680b      	ldr	r3, [r1, #0]
   ba178:	685b      	ldr	r3, [r3, #4]
   ba17a:	4718      	bx	r3
}
   ba17c:	4770      	bx	lr

000ba17e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   ba17e:	4770      	bx	lr

000ba180 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   ba180:	4770      	bx	lr

000ba182 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   ba182:	4770      	bx	lr

000ba184 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   ba184:	4770      	bx	lr

000ba186 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   ba186:	b538      	push	{r3, r4, r5, lr}
   ba188:	4604      	mov	r4, r0
   ba18a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   ba18c:	6800      	ldr	r0, [r0, #0]
   ba18e:	212e      	movs	r1, #46	; 0x2e
   ba190:	f003 ff07 	bl	bdfa2 <strchrnul>
    size = s - category;
   ba194:	6823      	ldr	r3, [r4, #0]
   ba196:	1ac3      	subs	r3, r0, r3
   ba198:	602b      	str	r3, [r5, #0]
    if (size) {
   ba19a:	b123      	cbz	r3, ba1a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   ba19c:	7803      	ldrb	r3, [r0, #0]
   ba19e:	b103      	cbz	r3, ba1a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   ba1a0:	3001      	adds	r0, #1
   ba1a2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba1a4:	6020      	str	r0, [r4, #0]
}
   ba1a6:	4618      	mov	r0, r3
   ba1a8:	bd38      	pop	{r3, r4, r5, pc}

000ba1aa <_ZN5spark16JSONStreamWriterD0Ev>:
   ba1aa:	b510      	push	{r4, lr}
   ba1ac:	210c      	movs	r1, #12
   ba1ae:	4604      	mov	r4, r0
   ba1b0:	f7f9 ff75 	bl	b409e <_ZdlPvj>
   ba1b4:	4620      	mov	r0, r4
   ba1b6:	bd10      	pop	{r4, pc}

000ba1b8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   ba1b8:	b510      	push	{r4, lr}
   ba1ba:	2104      	movs	r1, #4
   ba1bc:	4604      	mov	r4, r0
   ba1be:	f7f9 ff6e 	bl	b409e <_ZdlPvj>
   ba1c2:	4620      	mov	r0, r4
   ba1c4:	bd10      	pop	{r4, pc}

000ba1c6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   ba1c6:	b510      	push	{r4, lr}
   ba1c8:	2104      	movs	r1, #4
   ba1ca:	4604      	mov	r4, r0
   ba1cc:	f7f9 ff67 	bl	b409e <_ZdlPvj>
   ba1d0:	4620      	mov	r0, r4
   ba1d2:	bd10      	pop	{r4, pc}

000ba1d4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   ba1d4:	f7fe be84 	b.w	b8ee0 <os_mutex_recursive_lock>

000ba1d8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   ba1d8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   ba1da:	f003 feec 	bl	bdfb6 <strcmp>
}
   ba1de:	fab0 f080 	clz	r0, r0
   ba1e2:	0940      	lsrs	r0, r0, #5
   ba1e4:	bd08      	pop	{r3, pc}

000ba1e6 <__tcf_1>:
   ba1e6:	4770      	bx	lr

000ba1e8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   ba1e8:	b510      	push	{r4, lr}
   ba1ea:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   ba1ec:	f001 fe20 	bl	bbe30 <_Z16_fetch_usbserialv>
   ba1f0:	4284      	cmp	r4, r0
   ba1f2:	d010      	beq.n	ba216 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   ba1f4:	f002 f822 	bl	bc23c <_Z22__fetch_global_Serial1v>
   ba1f8:	4284      	cmp	r4, r0
   ba1fa:	d105      	bne.n	ba208 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   ba1fc:	f002 f81e 	bl	bc23c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   ba200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   ba204:	f001 bdad 	b.w	bbd62 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   ba208:	b12c      	cbz	r4, ba216 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   ba20a:	6823      	ldr	r3, [r4, #0]
   ba20c:	4620      	mov	r0, r4
   ba20e:	685b      	ldr	r3, [r3, #4]
}
   ba210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba214:	4718      	bx	r3
   ba216:	bd10      	pop	{r4, pc}

000ba218 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba218:	680b      	ldr	r3, [r1, #0]
   ba21a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba21c:	684b      	ldr	r3, [r1, #4]
   ba21e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba220:	b113      	cbz	r3, ba228 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   ba222:	685a      	ldr	r2, [r3, #4]
   ba224:	3201      	adds	r2, #1
   ba226:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba228:	4770      	bx	lr

000ba22a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   ba22a:	b513      	push	{r0, r1, r4, lr}
   ba22c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   ba22e:	4608      	mov	r0, r1
   ba230:	9101      	str	r1, [sp, #4]
   ba232:	f003 fed2 	bl	bdfda <strlen>
   ba236:	9901      	ldr	r1, [sp, #4]
   ba238:	4602      	mov	r2, r0
   ba23a:	4620      	mov	r0, r4
}
   ba23c:	b002      	add	sp, #8
   ba23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   ba242:	f7ff bf59 	b.w	ba0f8 <_ZN5spark10JSONWriter5valueEPKcj>

000ba246 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   ba246:	b513      	push	{r0, r1, r4, lr}
   ba248:	4604      	mov	r4, r0
    write(str, strlen(str));
   ba24a:	4608      	mov	r0, r1
   ba24c:	9101      	str	r1, [sp, #4]
   ba24e:	f003 fec4 	bl	bdfda <strlen>
   ba252:	6823      	ldr	r3, [r4, #0]
   ba254:	9901      	ldr	r1, [sp, #4]
   ba256:	68db      	ldr	r3, [r3, #12]
   ba258:	4602      	mov	r2, r0
   ba25a:	4620      	mov	r0, r4
}
   ba25c:	b002      	add	sp, #8
   ba25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   ba262:	4718      	bx	r3

000ba264 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   ba264:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   ba266:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   ba268:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   ba26c:	68db      	ldr	r3, [r3, #12]
   ba26e:	2201      	movs	r2, #1
   ba270:	f10d 0107 	add.w	r1, sp, #7
   ba274:	4798      	blx	r3
}
   ba276:	b003      	add	sp, #12
   ba278:	f85d fb04 	ldr.w	pc, [sp], #4

000ba27c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   ba27c:	b40e      	push	{r1, r2, r3}
   ba27e:	b503      	push	{r0, r1, lr}
   ba280:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   ba282:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   ba284:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   ba288:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   ba28a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   ba28c:	f001 f8c3 	bl	bb416 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   ba290:	b002      	add	sp, #8
   ba292:	f85d eb04 	ldr.w	lr, [sp], #4
   ba296:	b003      	add	sp, #12
   ba298:	4770      	bx	lr

000ba29a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   ba29a:	680a      	ldr	r2, [r1, #0]
   ba29c:	6002      	str	r2, [r0, #0]
   ba29e:	684a      	ldr	r2, [r1, #4]
   ba2a0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   ba2a2:	2200      	movs	r2, #0
   ba2a4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   ba2a8:	b510      	push	{r4, lr}
   ba2aa:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba2ac:	688c      	ldr	r4, [r1, #8]
   ba2ae:	6084      	str	r4, [r0, #8]
   ba2b0:	68cc      	ldr	r4, [r1, #12]
   ba2b2:	60c4      	str	r4, [r0, #12]
   ba2b4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2b6:	608a      	str	r2, [r1, #8]
   ba2b8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba2ba:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2bc:	610a      	str	r2, [r1, #16]
   ba2be:	bd10      	pop	{r4, pc}

000ba2c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   ba2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   ba2c4:	e9d0 8400 	ldrd	r8, r4, [r0]
   ba2c8:	f04f 0a14 	mov.w	sl, #20
   ba2cc:	9300      	str	r3, [sp, #0]
   ba2ce:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   ba2d2:	4b18      	ldr	r3, [pc, #96]	; (ba334 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   ba2d4:	10a4      	asrs	r4, r4, #2
   ba2d6:	4617      	mov	r7, r2
   ba2d8:	435c      	muls	r4, r3
   ba2da:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   ba2dc:	2c00      	cmp	r4, #0
   ba2de:	dd21      	ble.n	ba324 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   ba2e0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   ba2e2:	fb0a f006 	mul.w	r0, sl, r6
   ba2e6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   ba2ea:	463a      	mov	r2, r7
   ba2ec:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   ba2f0:	5828      	ldr	r0, [r5, r0]
   ba2f2:	9101      	str	r1, [sp, #4]
   ba2f4:	455f      	cmp	r7, fp
   ba2f6:	bf28      	it	cs
   ba2f8:	465a      	movcs	r2, fp
   ba2fa:	f003 fe76 	bl	bdfea <strncmp>
                if (cmp == 0) {
   ba2fe:	2800      	cmp	r0, #0
   ba300:	9901      	ldr	r1, [sp, #4]
   ba302:	f04f 0301 	mov.w	r3, #1
   ba306:	d10b      	bne.n	ba320 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   ba308:	455f      	cmp	r7, fp
   ba30a:	d103      	bne.n	ba314 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   ba30c:	9a00      	ldr	r2, [sp, #0]
   ba30e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   ba310:	4634      	mov	r4, r6
   ba312:	e7e3      	b.n	ba2dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   ba314:	d9fc      	bls.n	ba310 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   ba316:	1ba6      	subs	r6, r4, r6
	      ++__first;
   ba318:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   ba31c:	3e01      	subs	r6, #1
   ba31e:	e7f7      	b.n	ba310 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   ba320:	dbf9      	blt.n	ba316 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   ba322:	e7f5      	b.n	ba310 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   ba324:	eba5 0508 	sub.w	r5, r5, r8
}
   ba328:	4802      	ldr	r0, [pc, #8]	; (ba334 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   ba32a:	10ad      	asrs	r5, r5, #2
   ba32c:	4368      	muls	r0, r5
   ba32e:	b003      	add	sp, #12
   ba330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba334:	cccccccd 	.word	0xcccccccd

000ba338 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   ba338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   ba33a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   ba33c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   ba33e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   ba340:	b303      	cbz	r3, ba384 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   ba342:	b1f9      	cbz	r1, ba384 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   ba344:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   ba346:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   ba34a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   ba34c:	a903      	add	r1, sp, #12
   ba34e:	a801      	add	r0, sp, #4
   ba350:	f7ff ff19 	bl	ba186 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba354:	4601      	mov	r1, r0
   ba356:	b1a8      	cbz	r0, ba384 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   ba358:	f10d 030b 	add.w	r3, sp, #11
   ba35c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   ba35e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba362:	4620      	mov	r0, r4
   ba364:	f7ff ffac 	bl	ba2c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   ba368:	f89d 300b 	ldrb.w	r3, [sp, #11]
   ba36c:	b153      	cbz	r3, ba384 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   ba36e:	6823      	ldr	r3, [r4, #0]
   ba370:	2414      	movs	r4, #20
   ba372:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   ba376:	3408      	adds	r4, #8
            if (node.level >= 0) {
   ba378:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   ba37c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   ba37e:	bfa8      	it	ge
   ba380:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   ba382:	e7e3      	b.n	ba34c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   ba384:	4628      	mov	r0, r5
   ba386:	b004      	add	sp, #16
   ba388:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba38c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   ba38c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   ba38e:	4c09      	ldr	r4, [pc, #36]	; (ba3b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   ba390:	7823      	ldrb	r3, [r4, #0]
   ba392:	f3bf 8f5b 	dmb	ish
   ba396:	07db      	lsls	r3, r3, #31
   ba398:	d409      	bmi.n	ba3ae <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   ba39a:	4620      	mov	r0, r4
   ba39c:	f7f9 fe8e 	bl	b40bc <__cxa_guard_acquire>
   ba3a0:	b128      	cbz	r0, ba3ae <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   ba3a2:	4620      	mov	r0, r4
   ba3a4:	f7f9 fe8f 	bl	b40c6 <__cxa_guard_release>
   ba3a8:	4803      	ldr	r0, [pc, #12]	; (ba3b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   ba3aa:	f003 fd25 	bl	bddf8 <atexit>
}
   ba3ae:	4803      	ldr	r0, [pc, #12]	; (ba3bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   ba3b0:	bd10      	pop	{r4, pc}
   ba3b2:	bf00      	nop
   ba3b4:	2003e64c 	.word	0x2003e64c
   ba3b8:	000ba17f 	.word	0x000ba17f
   ba3bc:	2003e010 	.word	0x2003e010

000ba3c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   ba3c0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   ba3c2:	4c09      	ldr	r4, [pc, #36]	; (ba3e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   ba3c4:	7823      	ldrb	r3, [r4, #0]
   ba3c6:	f3bf 8f5b 	dmb	ish
   ba3ca:	07db      	lsls	r3, r3, #31
   ba3cc:	d409      	bmi.n	ba3e2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   ba3ce:	4620      	mov	r0, r4
   ba3d0:	f7f9 fe74 	bl	b40bc <__cxa_guard_acquire>
   ba3d4:	b128      	cbz	r0, ba3e2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   ba3d6:	4620      	mov	r0, r4
   ba3d8:	f7f9 fe75 	bl	b40c6 <__cxa_guard_release>
   ba3dc:	4803      	ldr	r0, [pc, #12]	; (ba3ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   ba3de:	f003 fd0b 	bl	bddf8 <atexit>
    return &factory;
}
   ba3e2:	4803      	ldr	r0, [pc, #12]	; (ba3f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   ba3e4:	bd10      	pop	{r4, pc}
   ba3e6:	bf00      	nop
   ba3e8:	2003e650 	.word	0x2003e650
   ba3ec:	000ba1e7 	.word	0x000ba1e7
   ba3f0:	2003e014 	.word	0x2003e014

000ba3f4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   ba3f4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   ba3f6:	2500      	movs	r5, #0
   ba3f8:	4604      	mov	r4, r0
   ba3fa:	e9c0 5500 	strd	r5, r5, [r0]
   ba3fe:	e9c0 5504 	strd	r5, r5, [r0, #16]
   ba402:	6085      	str	r5, [r0, #8]
   ba404:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   ba406:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   ba40a:	f7fe fd59 	bl	b8ec0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   ba40e:	f7ff ffbd 	bl	ba38c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   ba412:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   ba414:	f7ff ffd4 	bl	ba3c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   ba418:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   ba41a:	6220      	str	r0, [r4, #32]
}
   ba41c:	4620      	mov	r0, r4
   ba41e:	bd38      	pop	{r3, r4, r5, pc}

000ba420 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   ba420:	b510      	push	{r4, lr}
    static LogManager mgr;
   ba422:	4c0a      	ldr	r4, [pc, #40]	; (ba44c <_ZN5spark10LogManager8instanceEv+0x2c>)
   ba424:	7823      	ldrb	r3, [r4, #0]
   ba426:	f3bf 8f5b 	dmb	ish
   ba42a:	07db      	lsls	r3, r3, #31
   ba42c:	d40c      	bmi.n	ba448 <_ZN5spark10LogManager8instanceEv+0x28>
   ba42e:	4620      	mov	r0, r4
   ba430:	f7f9 fe44 	bl	b40bc <__cxa_guard_acquire>
   ba434:	b140      	cbz	r0, ba448 <_ZN5spark10LogManager8instanceEv+0x28>
   ba436:	4806      	ldr	r0, [pc, #24]	; (ba450 <_ZN5spark10LogManager8instanceEv+0x30>)
   ba438:	f7ff ffdc 	bl	ba3f4 <_ZN5spark10LogManagerC1Ev>
   ba43c:	4620      	mov	r0, r4
   ba43e:	f7f9 fe42 	bl	b40c6 <__cxa_guard_release>
   ba442:	4804      	ldr	r0, [pc, #16]	; (ba454 <_ZN5spark10LogManager8instanceEv+0x34>)
   ba444:	f003 fcd8 	bl	bddf8 <atexit>
    return &mgr;
}
   ba448:	4801      	ldr	r0, [pc, #4]	; (ba450 <_ZN5spark10LogManager8instanceEv+0x30>)
   ba44a:	bd10      	pop	{r4, pc}
   ba44c:	2003e648 	.word	0x2003e648
   ba450:	2003e658 	.word	0x2003e658
   ba454:	000ba975 	.word	0x000ba975

000ba458 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   ba458:	4a02      	ldr	r2, [pc, #8]	; (ba464 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   ba45a:	4903      	ldr	r1, [pc, #12]	; (ba468 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   ba45c:	4803      	ldr	r0, [pc, #12]	; (ba46c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   ba45e:	2300      	movs	r3, #0
   ba460:	f7fe bf7e 	b.w	b9360 <log_set_callbacks>
   ba464:	000ba759 	.word	0x000ba759
   ba468:	000ba6e5 	.word	0x000ba6e5
   ba46c:	000ba665 	.word	0x000ba665

000ba470 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   ba470:	2300      	movs	r3, #0
   ba472:	461a      	mov	r2, r3
   ba474:	4619      	mov	r1, r3
   ba476:	4618      	mov	r0, r3
   ba478:	f7fe bf72 	b.w	b9360 <log_set_callbacks>

000ba47c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   ba47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   ba47e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   ba480:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba482:	4668      	mov	r0, sp
   ba484:	f7ff fec8 	bl	ba218 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   ba488:	466a      	mov	r2, sp
   ba48a:	4629      	mov	r1, r5
   ba48c:	4620      	mov	r0, r4
   ba48e:	f7ff fd53 	bl	b9f38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   ba492:	a801      	add	r0, sp, #4
   ba494:	f7ff f937 	bl	b9706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba498:	4620      	mov	r0, r4
   ba49a:	b003      	add	sp, #12
   ba49c:	bd30      	pop	{r4, r5, pc}

000ba49e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   ba49e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   ba4a0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   ba4a2:	4604      	mov	r4, r0
   ba4a4:	4668      	mov	r0, sp
   ba4a6:	f7ff feb7 	bl	ba218 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   ba4aa:	466a      	mov	r2, sp
   ba4ac:	4629      	mov	r1, r5
   ba4ae:	4620      	mov	r0, r4
   ba4b0:	f7ff fd1e 	bl	b9ef0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   ba4b4:	a801      	add	r0, sp, #4
   ba4b6:	f7ff f926 	bl	b9706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba4ba:	4620      	mov	r0, r4
   ba4bc:	b003      	add	sp, #12
   ba4be:	bd30      	pop	{r4, r5, pc}

000ba4c0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   ba4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   ba4c2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   ba4c4:	4604      	mov	r4, r0
   ba4c6:	4668      	mov	r0, sp
   ba4c8:	f7ff fea6 	bl	ba218 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   ba4cc:	466a      	mov	r2, sp
   ba4ce:	4629      	mov	r1, r5
   ba4d0:	4620      	mov	r0, r4
   ba4d2:	f7ff fcb6 	bl	b9e42 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   ba4d6:	a801      	add	r0, sp, #4
   ba4d8:	f7ff f915 	bl	b9706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba4dc:	4620      	mov	r0, r4
   ba4de:	b003      	add	sp, #12
   ba4e0:	bd30      	pop	{r4, r5, pc}
	...

000ba4e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   ba4e4:	b570      	push	{r4, r5, r6, lr}
   ba4e6:	b08a      	sub	sp, #40	; 0x28
   ba4e8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   ba4ea:	4601      	mov	r1, r0
   ba4ec:	a804      	add	r0, sp, #16
   ba4ee:	f7ff ffc5 	bl	ba47c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   ba4f2:	4e14      	ldr	r6, [pc, #80]	; (ba544 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   ba4f4:	a804      	add	r0, sp, #16
   ba4f6:	f7ff fd37 	bl	b9f68 <_ZN5spark18JSONObjectIterator4nextEv>
   ba4fa:	b1e8      	cbz	r0, ba538 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   ba4fc:	a904      	add	r1, sp, #16
   ba4fe:	4668      	mov	r0, sp
   ba500:	f7ff ffcd 	bl	ba49e <_ZNK5spark18JSONObjectIterator4nameEv>
   ba504:	9802      	ldr	r0, [sp, #8]
   ba506:	4631      	mov	r1, r6
   ba508:	f7ff fe66 	bl	ba1d8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   ba50c:	4604      	mov	r4, r0
   ba50e:	b110      	cbz	r0, ba516 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   ba510:	1e2c      	subs	r4, r5, #0
   ba512:	bf18      	it	ne
   ba514:	2401      	movne	r4, #1
   ba516:	a801      	add	r0, sp, #4
   ba518:	f7ff f8f5 	bl	b9706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba51c:	2c00      	cmp	r4, #0
   ba51e:	d0e9      	beq.n	ba4f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   ba520:	a904      	add	r1, sp, #16
   ba522:	4668      	mov	r0, sp
   ba524:	f7ff ffcc 	bl	ba4c0 <_ZNK5spark18JSONObjectIterator5valueEv>
   ba528:	4668      	mov	r0, sp
   ba52a:	f7ff fcc0 	bl	b9eae <_ZNK5spark9JSONValue5toIntEv>
   ba52e:	6028      	str	r0, [r5, #0]
   ba530:	a801      	add	r0, sp, #4
   ba532:	f7ff f8e8 	bl	b9706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba536:	e7dd      	b.n	ba4f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   ba538:	a805      	add	r0, sp, #20
   ba53a:	f7ff f8e4 	bl	b9706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba53e:	b00a      	add	sp, #40	; 0x28
   ba540:	bd70      	pop	{r4, r5, r6, pc}
   ba542:	bf00      	nop
   ba544:	000bf61a 	.word	0x000bf61a

000ba548 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   ba548:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba54a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   ba54c:	4620      	mov	r0, r4
   ba54e:	4913      	ldr	r1, [pc, #76]	; (ba59c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   ba550:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   ba552:	f003 fd30 	bl	bdfb6 <strcmp>
   ba556:	b950      	cbnz	r0, ba56e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   ba558:	f001 fc6a 	bl	bbe30 <_Z16_fetch_usbserialv>
   ba55c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   ba560:	f001 fc54 	bl	bbe0c <_ZN9USBSerial5beginEl>
}
   ba564:	b003      	add	sp, #12
   ba566:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   ba56a:	f001 bc61 	b.w	bbe30 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   ba56e:	490c      	ldr	r1, [pc, #48]	; (ba5a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   ba570:	4620      	mov	r0, r4
   ba572:	f003 fd20 	bl	bdfb6 <strcmp>
   ba576:	b978      	cbnz	r0, ba598 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   ba578:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   ba57c:	a901      	add	r1, sp, #4
   ba57e:	4628      	mov	r0, r5
        int baud = 9600;
   ba580:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   ba582:	f7ff ffaf 	bl	ba4e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   ba586:	f001 fe59 	bl	bc23c <_Z22__fetch_global_Serial1v>
   ba58a:	9901      	ldr	r1, [sp, #4]
   ba58c:	f001 fbe6 	bl	bbd5c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   ba590:	f001 fe54 	bl	bc23c <_Z22__fetch_global_Serial1v>
}
   ba594:	b003      	add	sp, #12
   ba596:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   ba598:	2000      	movs	r0, #0
   ba59a:	e7fb      	b.n	ba594 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   ba59c:	000bf61f 	.word	0x000bf61f
   ba5a0:	000bf626 	.word	0x000bf626

000ba5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba5a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba5a6:	e9d0 5300 	ldrd	r5, r3, [r0]
   ba5aa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba5ac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba5ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba5b2:	42ae      	cmp	r6, r5
   ba5b4:	d005      	beq.n	ba5c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   ba5b6:	f105 0008 	add.w	r0, r5, #8
   ba5ba:	f7ff fff3 	bl	ba5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba5be:	3514      	adds	r5, #20
   ba5c0:	e7f7      	b.n	ba5b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   ba5c2:	6820      	ldr	r0, [r4, #0]
   ba5c4:	f7ff f802 	bl	b95cc <free>
}
   ba5c8:	4620      	mov	r0, r4
   ba5ca:	bd70      	pop	{r4, r5, r6, pc}

000ba5cc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   ba5cc:	b510      	push	{r4, lr}
   ba5ce:	4604      	mov	r4, r0
   ba5d0:	300c      	adds	r0, #12
   ba5d2:	f7ff ffe7 	bl	ba5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba5d6:	4620      	mov	r0, r4
   ba5d8:	f7ff f883 	bl	b96e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba5dc:	4620      	mov	r0, r4
   ba5de:	bd10      	pop	{r4, pc}

000ba5e0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   ba5e0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   ba5e2:	4b04      	ldr	r3, [pc, #16]	; (ba5f4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   ba5e4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   ba5e6:	f840 3b04 	str.w	r3, [r0], #4
   ba5ea:	f7ff ffef 	bl	ba5cc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   ba5ee:	4620      	mov	r0, r4
   ba5f0:	bd10      	pop	{r4, pc}
   ba5f2:	bf00      	nop
   ba5f4:	000be7a8 	.word	0x000be7a8

000ba5f8 <_ZN5spark16StreamLogHandlerD0Ev>:
   ba5f8:	b510      	push	{r4, lr}
   ba5fa:	4604      	mov	r4, r0
   ba5fc:	f7ff fff0 	bl	ba5e0 <_ZN5spark16StreamLogHandlerD1Ev>
   ba600:	4620      	mov	r0, r4
   ba602:	2124      	movs	r1, #36	; 0x24
   ba604:	f7f9 fd4b 	bl	b409e <_ZdlPvj>
   ba608:	4620      	mov	r0, r4
   ba60a:	bd10      	pop	{r4, pc}

000ba60c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   ba60c:	b510      	push	{r4, lr}
   ba60e:	4b03      	ldr	r3, [pc, #12]	; (ba61c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   ba610:	6003      	str	r3, [r0, #0]
   ba612:	4604      	mov	r4, r0
   ba614:	f7ff ffe4 	bl	ba5e0 <_ZN5spark16StreamLogHandlerD1Ev>
   ba618:	4620      	mov	r0, r4
   ba61a:	bd10      	pop	{r4, pc}
   ba61c:	000bf6bc 	.word	0x000bf6bc

000ba620 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   ba620:	b510      	push	{r4, lr}
   ba622:	4604      	mov	r4, r0
   ba624:	f7ff fff2 	bl	ba60c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   ba628:	4620      	mov	r0, r4
   ba62a:	2124      	movs	r1, #36	; 0x24
   ba62c:	f7f9 fd37 	bl	b409e <_ZdlPvj>
   ba630:	4620      	mov	r0, r4
   ba632:	bd10      	pop	{r4, pc}

000ba634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   ba634:	2200      	movs	r2, #0
   ba636:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   ba63a:	b510      	push	{r4, lr}
        capacity_(0) {
   ba63c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba63e:	680c      	ldr	r4, [r1, #0]
   ba640:	6004      	str	r4, [r0, #0]
   ba642:	684c      	ldr	r4, [r1, #4]
   ba644:	6044      	str	r4, [r0, #4]
   ba646:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba648:	600a      	str	r2, [r1, #0]
   ba64a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba64c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba64e:	608a      	str	r2, [r1, #8]
}
   ba650:	bd10      	pop	{r4, pc}

000ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   ba652:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba654:	6803      	ldr	r3, [r0, #0]
   ba656:	4604      	mov	r4, r0
   ba658:	6818      	ldr	r0, [r3, #0]
   ba65a:	f7fe fc49 	bl	b8ef0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   ba65e:	4620      	mov	r0, r4
   ba660:	bd10      	pop	{r4, pc}
	...

000ba664 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   ba664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba668:	b087      	sub	sp, #28
   ba66a:	4680      	mov	r8, r0
   ba66c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   ba66e:	4b1c      	ldr	r3, [pc, #112]	; (ba6e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   ba670:	685b      	ldr	r3, [r3, #4]
   ba672:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba676:	4689      	mov	r9, r1
   ba678:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   ba67a:	b96b      	cbnz	r3, ba698 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   ba67c:	f7ff fed0 	bl	ba420 <_ZN5spark10LogManager8instanceEv>
   ba680:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba682:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   ba686:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba688:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   ba68a:	f7ff fda3 	bl	ba1d4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   ba68e:	7b23      	ldrb	r3, [r4, #12]
   ba690:	b12b      	cbz	r3, ba69e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   ba692:	a805      	add	r0, sp, #20
   ba694:	f7ff ffdd 	bl	ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   ba698:	b007      	add	sp, #28
   ba69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   ba69e:	2301      	movs	r3, #1
   ba6a0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   ba6a2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   ba6a6:	fa5f f989 	uxtb.w	r9, r9
   ba6aa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba6ae:	45aa      	cmp	sl, r5
   ba6b0:	d012      	beq.n	ba6d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   ba6b2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   ba6b6:	4631      	mov	r1, r6
   ba6b8:	1d38      	adds	r0, r7, #4
   ba6ba:	f7ff fe3d 	bl	ba338 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba6be:	4581      	cmp	r9, r0
   ba6c0:	d3f5      	bcc.n	ba6ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   ba6c2:	683b      	ldr	r3, [r7, #0]
   ba6c4:	9a03      	ldr	r2, [sp, #12]
   ba6c6:	9200      	str	r2, [sp, #0]
   ba6c8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   ba6cc:	464a      	mov	r2, r9
   ba6ce:	4633      	mov	r3, r6
   ba6d0:	4641      	mov	r1, r8
   ba6d2:	4638      	mov	r0, r7
   ba6d4:	47d8      	blx	fp
   ba6d6:	e7ea      	b.n	ba6ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   ba6d8:	2300      	movs	r3, #0
   ba6da:	7323      	strb	r3, [r4, #12]
   ba6dc:	e7d9      	b.n	ba692 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   ba6de:	bf00      	nop
   ba6e0:	e000ed00 	.word	0xe000ed00

000ba6e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   ba6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba6e8:	469b      	mov	fp, r3
   ba6ea:	4b1a      	ldr	r3, [pc, #104]	; (ba754 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   ba6ec:	685b      	ldr	r3, [r3, #4]
   ba6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba6f2:	4680      	mov	r8, r0
   ba6f4:	4689      	mov	r9, r1
   ba6f6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   ba6f8:	b96b      	cbnz	r3, ba716 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   ba6fa:	f7ff fe91 	bl	ba420 <_ZN5spark10LogManager8instanceEv>
   ba6fe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba700:	f100 0324 	add.w	r3, r0, #36	; 0x24
   ba704:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba706:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba708:	f7ff fd64 	bl	ba1d4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   ba70c:	7b23      	ldrb	r3, [r4, #12]
   ba70e:	b12b      	cbz	r3, ba71c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   ba710:	a801      	add	r0, sp, #4
   ba712:	f7ff ff9e 	bl	ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba716:	b003      	add	sp, #12
   ba718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   ba71c:	2301      	movs	r3, #1
   ba71e:	7323      	strb	r3, [r4, #12]
   ba720:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ba724:	b2f6      	uxtb	r6, r6
   ba726:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba72a:	4555      	cmp	r5, sl
   ba72c:	d00e      	beq.n	ba74c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ba72e:	f855 7b04 	ldr.w	r7, [r5], #4
   ba732:	4659      	mov	r1, fp
   ba734:	1d38      	adds	r0, r7, #4
   ba736:	f7ff fdff 	bl	ba338 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba73a:	4286      	cmp	r6, r0
   ba73c:	d3f5      	bcc.n	ba72a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ba73e:	683b      	ldr	r3, [r7, #0]
   ba740:	464a      	mov	r2, r9
   ba742:	68db      	ldr	r3, [r3, #12]
   ba744:	4641      	mov	r1, r8
   ba746:	4638      	mov	r0, r7
   ba748:	4798      	blx	r3
   ba74a:	e7ee      	b.n	ba72a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ba74c:	2300      	movs	r3, #0
   ba74e:	7323      	strb	r3, [r4, #12]
   ba750:	e7de      	b.n	ba710 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ba752:	bf00      	nop
   ba754:	e000ed00 	.word	0xe000ed00

000ba758 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ba758:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba75c:	4b16      	ldr	r3, [pc, #88]	; (ba7b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ba75e:	685b      	ldr	r3, [r3, #4]
   ba760:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba764:	4605      	mov	r5, r0
   ba766:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ba768:	bb1b      	cbnz	r3, ba7b2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ba76a:	f7ff fe59 	bl	ba420 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ba76e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ba772:	4604      	mov	r4, r0
   ba774:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba776:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba778:	f7ff fd2c 	bl	ba1d4 <_ZN14RecursiveMutex4lockEv.isra.0>
   ba77c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ba780:	2446      	movs	r4, #70	; 0x46
   ba782:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba786:	45b0      	cmp	r8, r6
   ba788:	d109      	bne.n	ba79e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ba78a:	a801      	add	r0, sp, #4
   ba78c:	f7ff ff61 	bl	ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ba790:	42a5      	cmp	r5, r4
   ba792:	bfb4      	ite	lt
   ba794:	2000      	movlt	r0, #0
   ba796:	2001      	movge	r0, #1
}
   ba798:	b002      	add	sp, #8
   ba79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ba79e:	f856 0b04 	ldr.w	r0, [r6], #4
   ba7a2:	4639      	mov	r1, r7
   ba7a4:	3004      	adds	r0, #4
   ba7a6:	f7ff fdc7 	bl	ba338 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ba7aa:	4284      	cmp	r4, r0
   ba7ac:	bfa8      	it	ge
   ba7ae:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ba7b0:	e7e9      	b.n	ba786 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ba7b2:	2000      	movs	r0, #0
   ba7b4:	e7f0      	b.n	ba798 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ba7b6:	bf00      	nop
   ba7b8:	e000ed00 	.word	0xe000ed00

000ba7bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba7be:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   ba7c2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba7c4:	4604      	mov	r4, r0
   ba7c6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba7c8:	db0d      	blt.n	ba7e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   ba7ca:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   ba7cc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba7ce:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba7d0:	dd04      	ble.n	ba7dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   ba7d2:	00b9      	lsls	r1, r7, #2
   ba7d4:	f7fe ff02 	bl	b95dc <realloc>
            if (!d) {
   ba7d8:	b918      	cbnz	r0, ba7e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   ba7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ba7dc:	f7fe fef6 	bl	b95cc <free>
        T* d = nullptr;
   ba7e0:	2000      	movs	r0, #0
        data_ = d;
   ba7e2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba7e4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba7e6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba7e8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba7ea:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   ba7ee:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba7f0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   ba7f4:	1d08      	adds	r0, r1, #4
   ba7f6:	f003 fb39 	bl	bde6c <memmove>
    new(p) T(std::move(value));
   ba7fa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   ba7fe:	6863      	ldr	r3, [r4, #4]
   ba800:	3301      	adds	r3, #1
   ba802:	6063      	str	r3, [r4, #4]
    return true;
   ba804:	2001      	movs	r0, #1
   ba806:	e7e8      	b.n	ba7da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000ba808 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba808:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ba80a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba80e:	4604      	mov	r4, r0
   ba810:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba812:	9301      	str	r3, [sp, #4]
   ba814:	460d      	mov	r5, r1
      { _M_device.lock(); }
   ba816:	f7ff fcdd 	bl	ba1d4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   ba81a:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba81e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   ba822:	4293      	cmp	r3, r2
   ba824:	4619      	mov	r1, r3
   ba826:	d00b      	beq.n	ba840 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ba828:	6809      	ldr	r1, [r1, #0]
   ba82a:	42a9      	cmp	r1, r5
   ba82c:	f103 0304 	add.w	r3, r3, #4
   ba830:	d1f7      	bne.n	ba822 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   ba832:	a801      	add	r0, sp, #4
   ba834:	f7ff ff0d 	bl	ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba838:	2500      	movs	r5, #0
}
   ba83a:	4628      	mov	r0, r5
   ba83c:	b003      	add	sp, #12
   ba83e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ba840:	4629      	mov	r1, r5
   ba842:	4620      	mov	r0, r4
   ba844:	f7ff ffba 	bl	ba7bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   ba848:	4605      	mov	r5, r0
   ba84a:	2800      	cmp	r0, #0
   ba84c:	d0f1      	beq.n	ba832 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ba84e:	6863      	ldr	r3, [r4, #4]
   ba850:	2b01      	cmp	r3, #1
   ba852:	d101      	bne.n	ba858 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ba854:	f7ff fe00 	bl	ba458 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba858:	a801      	add	r0, sp, #4
   ba85a:	f7ff fefa 	bl	ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba85e:	e7ec      	b.n	ba83a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ba860 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba860:	b570      	push	{r4, r5, r6, lr}
   ba862:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ba864:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba868:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ba86a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ba86e:	4282      	cmp	r2, r0
   ba870:	d00f      	beq.n	ba892 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   ba872:	4601      	mov	r1, r0
            if (*p == value) {
   ba874:	681d      	ldr	r5, [r3, #0]
   ba876:	f851 6b04 	ldr.w	r6, [r1], #4
   ba87a:	42ae      	cmp	r6, r5
   ba87c:	d107      	bne.n	ba88e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba87e:	1a52      	subs	r2, r2, r1
   ba880:	f003 faf4 	bl	bde6c <memmove>
    --size_;
   ba884:	6863      	ldr	r3, [r4, #4]
   ba886:	3b01      	subs	r3, #1
   ba888:	6063      	str	r3, [r4, #4]
    return true;
   ba88a:	2001      	movs	r0, #1
}
   ba88c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   ba88e:	4608      	mov	r0, r1
   ba890:	e7ed      	b.n	ba86e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ba892:	2000      	movs	r0, #0
   ba894:	e7fa      	b.n	ba88c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000ba896 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba896:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ba898:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba89c:	4604      	mov	r4, r0
   ba89e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba8a0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba8a2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   ba8a4:	f7ff fc96 	bl	ba1d4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ba8a8:	a901      	add	r1, sp, #4
   ba8aa:	4620      	mov	r0, r4
   ba8ac:	f7ff ffd8 	bl	ba860 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ba8b0:	b118      	cbz	r0, ba8ba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ba8b2:	6863      	ldr	r3, [r4, #4]
   ba8b4:	b90b      	cbnz	r3, ba8ba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ba8b6:	f7ff fddb 	bl	ba470 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba8ba:	a803      	add	r0, sp, #12
   ba8bc:	f7ff fec9 	bl	ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba8c0:	b004      	add	sp, #16
   ba8c2:	bd10      	pop	{r4, pc}

000ba8c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba8c4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba8c6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba8ca:	2318      	movs	r3, #24
   ba8cc:	4604      	mov	r4, r0
   ba8ce:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba8d2:	42ae      	cmp	r6, r5
   ba8d4:	d015      	beq.n	ba902 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba8d6:	f105 0110 	add.w	r1, r5, #16
   ba8da:	4620      	mov	r0, r4
   ba8dc:	f7ff ffc0 	bl	ba860 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba8e0:	6863      	ldr	r3, [r4, #4]
   ba8e2:	b90b      	cbnz	r3, ba8e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba8e4:	f7ff fdc4 	bl	ba470 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba8e8:	69e0      	ldr	r0, [r4, #28]
   ba8ea:	6929      	ldr	r1, [r5, #16]
   ba8ec:	6803      	ldr	r3, [r0, #0]
   ba8ee:	68db      	ldr	r3, [r3, #12]
   ba8f0:	4798      	blx	r3
        if (h.stream) {
   ba8f2:	6969      	ldr	r1, [r5, #20]
   ba8f4:	b119      	cbz	r1, ba8fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba8f6:	6a20      	ldr	r0, [r4, #32]
   ba8f8:	6803      	ldr	r3, [r0, #0]
   ba8fa:	68db      	ldr	r3, [r3, #12]
   ba8fc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba8fe:	3518      	adds	r5, #24
   ba900:	e7e7      	b.n	ba8d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba902:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba906:	2618      	movs	r6, #24
   ba908:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba90c:	42ae      	cmp	r6, r5
   ba90e:	d004      	beq.n	ba91a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba910:	4628      	mov	r0, r5
   ba912:	f000 fe95 	bl	bb640 <_ZN6StringD1Ev>
   ba916:	3518      	adds	r5, #24
   ba918:	e7f8      	b.n	ba90c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba91a:	2300      	movs	r3, #0
   ba91c:	6163      	str	r3, [r4, #20]
}
   ba91e:	bd70      	pop	{r4, r5, r6, pc}

000ba920 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba920:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba922:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba924:	f7ff fda4 	bl	ba470 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba928:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba92c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba92e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba930:	f7ff fc50 	bl	ba1d4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba934:	4620      	mov	r0, r4
   ba936:	f7ff ffc5 	bl	ba8c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba93a:	a801      	add	r0, sp, #4
   ba93c:	f7ff fe89 	bl	ba652 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba940:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba942:	b108      	cbz	r0, ba948 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba944:	f7fe fac4 	bl	b8ed0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba948:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba94c:	2618      	movs	r6, #24
   ba94e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba952:	42ae      	cmp	r6, r5
   ba954:	d004      	beq.n	ba960 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba956:	4628      	mov	r0, r5
   ba958:	f000 fe72 	bl	bb640 <_ZN6StringD1Ev>
   ba95c:	3518      	adds	r5, #24
   ba95e:	e7f8      	b.n	ba952 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba960:	6920      	ldr	r0, [r4, #16]
   ba962:	f7fe fe33 	bl	b95cc <free>
   ba966:	6820      	ldr	r0, [r4, #0]
   ba968:	f7fe fe30 	bl	b95cc <free>
}
   ba96c:	4620      	mov	r0, r4
   ba96e:	b002      	add	sp, #8
   ba970:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba974 <__tcf_2>:
    static LogManager mgr;
   ba974:	4801      	ldr	r0, [pc, #4]	; (ba97c <__tcf_2+0x8>)
   ba976:	f7ff bfd3 	b.w	ba920 <_ZN5spark10LogManagerD1Ev>
   ba97a:	bf00      	nop
   ba97c:	2003e658 	.word	0x2003e658

000ba980 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba980:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba984:	4604      	mov	r4, r0
   ba986:	460d      	mov	r5, r1
   ba988:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba98a:	d915      	bls.n	ba9b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba98c:	4290      	cmp	r0, r2
   ba98e:	d214      	bcs.n	ba9ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba990:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba994:	1a75      	subs	r5, r6, r1
   ba996:	f1a1 0714 	sub.w	r7, r1, #20
   ba99a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba99c:	42b7      	cmp	r7, r6
   ba99e:	d01a      	beq.n	ba9d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba9a0:	b11c      	cbz	r4, ba9aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba9a2:	4631      	mov	r1, r6
   ba9a4:	4620      	mov	r0, r4
   ba9a6:	f7ff fc78 	bl	ba29a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba9aa:	f106 0008 	add.w	r0, r6, #8
   ba9ae:	f7ff fdf9 	bl	ba5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba9b2:	3e14      	subs	r6, #20
   ba9b4:	3c14      	subs	r4, #20
   ba9b6:	e7f1      	b.n	ba99c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba9b8:	d00d      	beq.n	ba9d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba9ba:	42b5      	cmp	r5, r6
   ba9bc:	d00b      	beq.n	ba9d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba9be:	b11c      	cbz	r4, ba9c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba9c0:	4629      	mov	r1, r5
   ba9c2:	4620      	mov	r0, r4
   ba9c4:	f7ff fc69 	bl	ba29a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba9c8:	f105 0008 	add.w	r0, r5, #8
   ba9cc:	f7ff fdea 	bl	ba5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba9d0:	3514      	adds	r5, #20
   ba9d2:	3414      	adds	r4, #20
   ba9d4:	e7f1      	b.n	ba9ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba9d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba9d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba9dc:	4604      	mov	r4, r0
   ba9de:	460d      	mov	r5, r1
   ba9e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba9e2:	d914      	bls.n	baa0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba9e4:	4290      	cmp	r0, r2
   ba9e6:	d213      	bcs.n	baa10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba9e8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba9ec:	1a75      	subs	r5, r6, r1
   ba9ee:	f1a1 0710 	sub.w	r7, r1, #16
   ba9f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba9f4:	42b7      	cmp	r7, r6
   ba9f6:	d018      	beq.n	baa2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba9f8:	b11c      	cbz	r4, baa02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba9fa:	4631      	mov	r1, r6
   ba9fc:	4620      	mov	r0, r4
   ba9fe:	f000 fe9b 	bl	bb738 <_ZN6StringC1EOS_>
                end->~T();
   baa02:	4630      	mov	r0, r6
   baa04:	f000 fe1c 	bl	bb640 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   baa08:	3e10      	subs	r6, #16
   baa0a:	3c10      	subs	r4, #16
   baa0c:	e7f2      	b.n	ba9f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   baa0e:	d00c      	beq.n	baa2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   baa10:	42b5      	cmp	r5, r6
   baa12:	d00a      	beq.n	baa2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   baa14:	b11c      	cbz	r4, baa1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   baa16:	4629      	mov	r1, r5
   baa18:	4620      	mov	r0, r4
   baa1a:	f000 fe8d 	bl	bb738 <_ZN6StringC1EOS_>
                p->~T();
   baa1e:	4628      	mov	r0, r5
   baa20:	f000 fe0e 	bl	bb640 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   baa24:	3510      	adds	r5, #16
   baa26:	3410      	adds	r4, #16
   baa28:	e7f2      	b.n	baa10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   baa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baa2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   baa2c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   baa2e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   baa30:	4605      	mov	r5, r0
        if (n > 0) {
   baa32:	dd11      	ble.n	baa58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   baa34:	0130      	lsls	r0, r6, #4
   baa36:	f7fe fdc1 	bl	b95bc <malloc>
            if (!d) {
   baa3a:	4604      	mov	r4, r0
   baa3c:	b158      	cbz	r0, baa56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   baa3e:	e9d5 1200 	ldrd	r1, r2, [r5]
   baa42:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   baa46:	f7ff ffc7 	bl	ba9d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   baa4a:	6828      	ldr	r0, [r5, #0]
   baa4c:	f7fe fdbe 	bl	b95cc <free>
        data_ = d;
   baa50:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   baa52:	60ae      	str	r6, [r5, #8]
        return true;
   baa54:	2001      	movs	r0, #1
    }
   baa56:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   baa58:	2400      	movs	r4, #0
   baa5a:	e7f6      	b.n	baa4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000baa5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   baa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa60:	4690      	mov	r8, r2
   baa62:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   baa64:	2300      	movs	r3, #0
   baa66:	9103      	str	r1, [sp, #12]
    return size_;
   baa68:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   baa6c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   baa6e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   baa70:	4299      	cmp	r1, r3
        capacity_(0) {
   baa72:	e9c0 3300 	strd	r3, r3, [r0]
   baa76:	e9c0 3302 	strd	r3, r3, [r0, #8]
   baa7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   baa7e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   baa82:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   baa84:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   baa86:	dc23      	bgt.n	baad0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   baa88:	e9d8 5700 	ldrd	r5, r7, [r8]
   baa8c:	2314      	movs	r3, #20
   baa8e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   baa92:	42af      	cmp	r7, r5
   baa94:	d03b      	beq.n	bab0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   baa96:	4629      	mov	r1, r5
   baa98:	a80b      	add	r0, sp, #44	; 0x2c
   baa9a:	f000 fe4d 	bl	bb738 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   baa9e:	a90b      	add	r1, sp, #44	; 0x2c
   baaa0:	a80f      	add	r0, sp, #60	; 0x3c
   baaa2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   baaa4:	f000 fe48 	bl	bb738 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baaa8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   baaac:	4299      	cmp	r1, r3
   baaae:	da1b      	bge.n	baae8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   baab0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   baab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   baab4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   baab8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   baabc:	4631      	mov	r1, r6
   baabe:	f106 0010 	add.w	r0, r6, #16
   baac2:	f7ff ff89 	bl	ba9d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   baac6:	b9ee      	cbnz	r6, bab04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   baac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   baaca:	3301      	adds	r3, #1
   baacc:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   baace:	e011      	b.n	baaf4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   baad0:	a808      	add	r0, sp, #32
   baad2:	f7ff ffab 	bl	baa2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   baad6:	2800      	cmp	r0, #0
   baad8:	d1d6      	bne.n	baa88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   baada:	a808      	add	r0, sp, #32
   baadc:	f7fe fe01 	bl	b96e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   baae0:	4620      	mov	r0, r4
   baae2:	b015      	add	sp, #84	; 0x54
   baae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baae8:	3101      	adds	r1, #1
   baaea:	a808      	add	r0, sp, #32
   baaec:	f7ff ff9e 	bl	baa2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   baaf0:	2800      	cmp	r0, #0
   baaf2:	d1dd      	bne.n	baab0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   baaf4:	a80f      	add	r0, sp, #60	; 0x3c
   baaf6:	f000 fda3 	bl	bb640 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   baafa:	a80b      	add	r0, sp, #44	; 0x2c
   baafc:	f000 fda0 	bl	bb640 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bab00:	3514      	adds	r5, #20
   bab02:	e7c6      	b.n	baa92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bab04:	a90f      	add	r1, sp, #60	; 0x3c
   bab06:	4630      	mov	r0, r6
   bab08:	f000 fe16 	bl	bb738 <_ZN6StringC1EOS_>
   bab0c:	e7dc      	b.n	baac8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bab0e:	2600      	movs	r6, #0
   bab10:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bab14:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bab16:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bab1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bab1e:	429e      	cmp	r6, r3
   bab20:	da7c      	bge.n	bac1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bab22:	0133      	lsls	r3, r6, #4
   bab24:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bab26:	9306      	str	r3, [sp, #24]
        if (!category) {
   bab28:	b90b      	cbnz	r3, bab2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bab2a:	3601      	adds	r6, #1
   bab2c:	e7f5      	b.n	bab1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bab2e:	2300      	movs	r3, #0
   bab30:	9307      	str	r3, [sp, #28]
   bab32:	fb09 f306 	mul.w	r3, r9, r6
   bab36:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bab38:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bab3a:	a907      	add	r1, sp, #28
   bab3c:	a806      	add	r0, sp, #24
   bab3e:	f7ff fb22 	bl	ba186 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bab42:	4682      	mov	sl, r0
   bab44:	2800      	cmp	r0, #0
   bab46:	d0f0      	beq.n	bab2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bab48:	f04f 0300 	mov.w	r3, #0
   bab4c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bab50:	4601      	mov	r1, r0
   bab52:	9a07      	ldr	r2, [sp, #28]
   bab54:	f10d 0317 	add.w	r3, sp, #23
   bab58:	4628      	mov	r0, r5
   bab5a:	f7ff fbb1 	bl	ba2c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bab5e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bab62:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bab64:	2f00      	cmp	r7, #0
   bab66:	d14a      	bne.n	babfe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bab68:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bab6c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bab70:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bab74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bab78:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bab7c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bab80:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bab82:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bab86:	4293      	cmp	r3, r2
   bab88:	db17      	blt.n	babba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bab8a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bab8e:	f1ba 0f00 	cmp.w	sl, #0
   bab92:	dd30      	ble.n	babf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bab94:	fb09 f00a 	mul.w	r0, r9, sl
   bab98:	f7fe fd10 	bl	b95bc <malloc>
            if (!d) {
   bab9c:	4683      	mov	fp, r0
   bab9e:	b360      	cbz	r0, babfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   baba0:	e9d5 1200 	ldrd	r1, r2, [r5]
   baba4:	fb09 1202 	mla	r2, r9, r2, r1
   baba8:	f7ff feea 	bl	ba980 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   babac:	6828      	ldr	r0, [r5, #0]
   babae:	f7fe fd0d 	bl	b95cc <free>
        data_ = d;
   babb2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   babb6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   babba:	682b      	ldr	r3, [r5, #0]
   babbc:	9a01      	ldr	r2, [sp, #4]
   babbe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   babc2:	686a      	ldr	r2, [r5, #4]
   babc4:	4651      	mov	r1, sl
   babc6:	fb09 3202 	mla	r2, r9, r2, r3
   babca:	f10a 0014 	add.w	r0, sl, #20
   babce:	f7ff fed7 	bl	ba980 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   babd2:	f1ba 0f00 	cmp.w	sl, #0
   babd6:	d003      	beq.n	babe0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   babd8:	a90f      	add	r1, sp, #60	; 0x3c
   babda:	4650      	mov	r0, sl
   babdc:	f7ff fb5d 	bl	ba29a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   babe0:	686b      	ldr	r3, [r5, #4]
   babe2:	3301      	adds	r3, #1
   babe4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   babe6:	a811      	add	r0, sp, #68	; 0x44
   babe8:	f7ff fcdc 	bl	ba5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   babec:	b13f      	cbz	r7, babfe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   babee:	a80b      	add	r0, sp, #44	; 0x2c
   babf0:	f7ff fcd8 	bl	ba5a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   babf4:	e771      	b.n	baada <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   babf6:	46bb      	mov	fp, r7
   babf8:	e7d8      	b.n	babac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   babfa:	2701      	movs	r7, #1
   babfc:	e7f3      	b.n	babe6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   babfe:	9b01      	ldr	r3, [sp, #4]
   bac00:	682d      	ldr	r5, [r5, #0]
   bac02:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bac06:	9b06      	ldr	r3, [sp, #24]
   bac08:	781b      	ldrb	r3, [r3, #0]
   bac0a:	b92b      	cbnz	r3, bac18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bac0c:	f8d8 3000 	ldr.w	r3, [r8]
   bac10:	9a02      	ldr	r2, [sp, #8]
   bac12:	4413      	add	r3, r2
   bac14:	7c1b      	ldrb	r3, [r3, #16]
   bac16:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bac18:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bac1a:	e78e      	b.n	bab3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bac1c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bac1e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bac20:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bac22:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bac24:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bac26:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bac28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bac2a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bac2c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bac2e:	60a2      	str	r2, [r4, #8]
   bac30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bac32:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bac34:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bac36:	60e2      	str	r2, [r4, #12]
   bac38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bac3a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bac3c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bac3e:	6122      	str	r2, [r4, #16]
   bac40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bac42:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bac44:	9b03      	ldr	r3, [sp, #12]
   bac46:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bac48:	6162      	str	r2, [r4, #20]
   bac4a:	7623      	strb	r3, [r4, #24]
   bac4c:	e7cf      	b.n	babee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bac50 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bac50:	b5f0      	push	{r4, r5, r6, r7, lr}
   bac52:	4604      	mov	r4, r0
   bac54:	b087      	sub	sp, #28
   bac56:	460d      	mov	r5, r1
        filter_(level, filters) {
   bac58:	4626      	mov	r6, r4
        stream_(&stream) {
   bac5a:	4619      	mov	r1, r3
   bac5c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bac5e:	4617      	mov	r7, r2
        stream_(&stream) {
   bac60:	f7fa f8a8 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bac64:	4b0b      	ldr	r3, [pc, #44]	; (bac94 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bac66:	f846 3b04 	str.w	r3, [r6], #4
   bac6a:	4669      	mov	r1, sp
   bac6c:	a803      	add	r0, sp, #12
   bac6e:	f7fa f8a1 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bac72:	aa03      	add	r2, sp, #12
   bac74:	4639      	mov	r1, r7
   bac76:	4630      	mov	r0, r6
   bac78:	f7ff fef0 	bl	baa5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bac7c:	a803      	add	r0, sp, #12
   bac7e:	f7f9 ffa0 	bl	b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bac82:	4668      	mov	r0, sp
   bac84:	f7f9 ff9d 	bl	b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bac88:	4b03      	ldr	r3, [pc, #12]	; (bac98 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bac8a:	6023      	str	r3, [r4, #0]
}
   bac8c:	4620      	mov	r0, r4
        stream_(&stream) {
   bac8e:	6225      	str	r5, [r4, #32]
}
   bac90:	b007      	add	sp, #28
   bac92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bac94:	000be7a8 	.word	0x000be7a8
   bac98:	000bf6a4 	.word	0x000bf6a4

000bac9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bac9e:	460f      	mov	r7, r1
   baca0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   baca2:	491d      	ldr	r1, [pc, #116]	; (bad18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   baca4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   baca6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   baca8:	4616      	mov	r6, r2
   bacaa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bacac:	f003 f983 	bl	bdfb6 <strcmp>
   bacb0:	b9c0      	cbnz	r0, bace4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bacb2:	b1a4      	cbz	r4, bacde <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bacb4:	4629      	mov	r1, r5
   bacb6:	a801      	add	r0, sp, #4
   bacb8:	f7ff fcbc 	bl	ba634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bacbc:	4917      	ldr	r1, [pc, #92]	; (bad1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bacbe:	2024      	movs	r0, #36	; 0x24
   bacc0:	f001 fae0 	bl	bc284 <_ZnwjRKSt9nothrow_t>
   bacc4:	4605      	mov	r5, r0
   bacc6:	b130      	cbz	r0, bacd6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bacc8:	ab01      	add	r3, sp, #4
   bacca:	4632      	mov	r2, r6
   baccc:	4621      	mov	r1, r4
   bacce:	f7ff ffbf 	bl	bac50 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bacd2:	4b13      	ldr	r3, [pc, #76]	; (bad20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bacd4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bacd6:	a801      	add	r0, sp, #4
   bacd8:	f7f9 ff73 	bl	b4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bacdc:	462c      	mov	r4, r5
}
   bacde:	4620      	mov	r0, r4
   bace0:	b005      	add	sp, #20
   bace2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bace4:	490f      	ldr	r1, [pc, #60]	; (bad24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bace6:	4638      	mov	r0, r7
   bace8:	f003 f965 	bl	bdfb6 <strcmp>
   bacec:	b990      	cbnz	r0, bad14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bacee:	2c00      	cmp	r4, #0
   bacf0:	d0f5      	beq.n	bacde <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bacf2:	4629      	mov	r1, r5
   bacf4:	a801      	add	r0, sp, #4
   bacf6:	f7ff fc9d 	bl	ba634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bacfa:	4908      	ldr	r1, [pc, #32]	; (bad1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bacfc:	2024      	movs	r0, #36	; 0x24
   bacfe:	f001 fac1 	bl	bc284 <_ZnwjRKSt9nothrow_t>
   bad02:	4605      	mov	r5, r0
   bad04:	2800      	cmp	r0, #0
   bad06:	d0e6      	beq.n	bacd6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bad08:	ab01      	add	r3, sp, #4
   bad0a:	4632      	mov	r2, r6
   bad0c:	4621      	mov	r1, r4
   bad0e:	f7ff ff9f 	bl	bac50 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bad12:	e7e0      	b.n	bacd6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bad14:	2400      	movs	r4, #0
   bad16:	e7e2      	b.n	bacde <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bad18:	000bf62e 	.word	0x000bf62e
   bad1c:	000bf804 	.word	0x000bf804
   bad20:	000bf6bc 	.word	0x000bf6bc
   bad24:	000bf632 	.word	0x000bf632

000bad28 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bad28:	4b01      	ldr	r3, [pc, #4]	; (bad30 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bad2a:	4a02      	ldr	r2, [pc, #8]	; (bad34 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bad2c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bad2e:	4770      	bx	lr
   bad30:	2003e654 	.word	0x2003e654
   bad34:	000bf643 	.word	0x000bf643

000bad38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bad3c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bad3e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bad42:	4604      	mov	r4, r0
   bad44:	460e      	mov	r6, r1
   bad46:	4617      	mov	r7, r2
   bad48:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bad4a:	f001 f871 	bl	bbe30 <_Z16_fetch_usbserialv>
   bad4e:	4581      	cmp	r9, r0
   bad50:	d04c      	beq.n	badec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bad52:	792b      	ldrb	r3, [r5, #4]
   bad54:	0719      	lsls	r1, r3, #28
   bad56:	d504      	bpl.n	bad62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bad58:	696a      	ldr	r2, [r5, #20]
   bad5a:	4954      	ldr	r1, [pc, #336]	; (baeac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bad5c:	4620      	mov	r0, r4
   bad5e:	f7ff fa8d 	bl	ba27c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bad62:	f1b8 0f00 	cmp.w	r8, #0
   bad66:	d00d      	beq.n	bad84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bad68:	215b      	movs	r1, #91	; 0x5b
   bad6a:	4620      	mov	r0, r4
   bad6c:	f7ff fa7a 	bl	ba264 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bad70:	4641      	mov	r1, r8
   bad72:	4620      	mov	r0, r4
   bad74:	f7ff fa67 	bl	ba246 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bad78:	6823      	ldr	r3, [r4, #0]
   bad7a:	494d      	ldr	r1, [pc, #308]	; (baeb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bad7c:	68db      	ldr	r3, [r3, #12]
   bad7e:	2202      	movs	r2, #2
   bad80:	4620      	mov	r0, r4
   bad82:	4798      	blx	r3
    if (attr.has_file) {
   bad84:	792b      	ldrb	r3, [r5, #4]
   bad86:	07da      	lsls	r2, r3, #31
   bad88:	d523      	bpl.n	badd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bad8a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bad8e:	212f      	movs	r1, #47	; 0x2f
   bad90:	4640      	mov	r0, r8
   bad92:	f003 f951 	bl	be038 <strrchr>
    if (s1) {
   bad96:	b108      	cbz	r0, bad9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bad98:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bad9c:	4641      	mov	r1, r8
   bad9e:	4620      	mov	r0, r4
   bada0:	f7ff fa51 	bl	ba246 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bada4:	792b      	ldrb	r3, [r5, #4]
   bada6:	079b      	lsls	r3, r3, #30
   bada8:	d508      	bpl.n	badbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   badaa:	213a      	movs	r1, #58	; 0x3a
   badac:	4620      	mov	r0, r4
   badae:	f7ff fa59 	bl	ba264 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   badb2:	68ea      	ldr	r2, [r5, #12]
   badb4:	493f      	ldr	r1, [pc, #252]	; (baeb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   badb6:	4620      	mov	r0, r4
   badb8:	f7ff fa60 	bl	ba27c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   badbc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   badbe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   badc0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   badc4:	68db      	ldr	r3, [r3, #12]
   badc6:	bf14      	ite	ne
   badc8:	493b      	ldrne	r1, [pc, #236]	; (baeb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   badca:	493c      	ldreq	r1, [pc, #240]	; (baebc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   badcc:	2202      	movs	r2, #2
            write(": ", 2);
   badce:	4620      	mov	r0, r4
   badd0:	4798      	blx	r3
    if (attr.has_function) {
   badd2:	792b      	ldrb	r3, [r5, #4]
   badd4:	0758      	lsls	r0, r3, #29
   badd6:	d51d      	bpl.n	bae14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   badd8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   badda:	460b      	mov	r3, r1
   baddc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   badde:	f813 0b01 	ldrb.w	r0, [r3], #1
   bade2:	b160      	cbz	r0, badfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bade4:	2820      	cmp	r0, #32
   bade6:	d108      	bne.n	badfa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bade8:	4619      	mov	r1, r3
   badea:	e7f7      	b.n	baddc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   badec:	4834      	ldr	r0, [pc, #208]	; (baec0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   badee:	f000 f966 	bl	bb0be <_ZN5spark12NetworkClass9listeningEv>
   badf2:	2800      	cmp	r0, #0
   badf4:	d0ad      	beq.n	bad52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   badf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   badfa:	2828      	cmp	r0, #40	; 0x28
   badfc:	d1ee      	bne.n	baddc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   badfe:	6823      	ldr	r3, [r4, #0]
   bae00:	1a52      	subs	r2, r2, r1
   bae02:	68db      	ldr	r3, [r3, #12]
   bae04:	4620      	mov	r0, r4
   bae06:	4798      	blx	r3
        write("(): ", 4);
   bae08:	6823      	ldr	r3, [r4, #0]
   bae0a:	492e      	ldr	r1, [pc, #184]	; (baec4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bae0c:	68db      	ldr	r3, [r3, #12]
   bae0e:	2204      	movs	r2, #4
   bae10:	4620      	mov	r0, r4
   bae12:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bae14:	2100      	movs	r1, #0
   bae16:	4638      	mov	r0, r7
   bae18:	f7fe fa9a 	bl	b9350 <log_level_name>
   bae1c:	4601      	mov	r1, r0
    write(s);
   bae1e:	4620      	mov	r0, r4
   bae20:	f7ff fa11 	bl	ba246 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bae24:	6823      	ldr	r3, [r4, #0]
   bae26:	4925      	ldr	r1, [pc, #148]	; (baebc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bae28:	68db      	ldr	r3, [r3, #12]
   bae2a:	2202      	movs	r2, #2
   bae2c:	4620      	mov	r0, r4
   bae2e:	4798      	blx	r3
    if (msg) {
   bae30:	b11e      	cbz	r6, bae3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bae32:	4631      	mov	r1, r6
   bae34:	4620      	mov	r0, r4
   bae36:	f7ff fa06 	bl	ba246 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bae3a:	792b      	ldrb	r3, [r5, #4]
   bae3c:	f013 0f30 	tst.w	r3, #48	; 0x30
   bae40:	d02c      	beq.n	bae9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bae42:	6823      	ldr	r3, [r4, #0]
   bae44:	4920      	ldr	r1, [pc, #128]	; (baec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bae46:	68db      	ldr	r3, [r3, #12]
   bae48:	2202      	movs	r2, #2
   bae4a:	4620      	mov	r0, r4
   bae4c:	4798      	blx	r3
        if (attr.has_code) {
   bae4e:	792b      	ldrb	r3, [r5, #4]
   bae50:	06d9      	lsls	r1, r3, #27
   bae52:	d50a      	bpl.n	bae6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bae54:	6823      	ldr	r3, [r4, #0]
   bae56:	491d      	ldr	r1, [pc, #116]	; (baecc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bae58:	68db      	ldr	r3, [r3, #12]
   bae5a:	2207      	movs	r2, #7
   bae5c:	4620      	mov	r0, r4
   bae5e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bae60:	69aa      	ldr	r2, [r5, #24]
   bae62:	491b      	ldr	r1, [pc, #108]	; (baed0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bae64:	4620      	mov	r0, r4
   bae66:	f7ff fa09 	bl	ba27c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bae6a:	792b      	ldrb	r3, [r5, #4]
   bae6c:	069a      	lsls	r2, r3, #26
   bae6e:	d511      	bpl.n	bae94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bae70:	06db      	lsls	r3, r3, #27
   bae72:	d505      	bpl.n	bae80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bae74:	6823      	ldr	r3, [r4, #0]
   bae76:	4910      	ldr	r1, [pc, #64]	; (baeb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bae78:	68db      	ldr	r3, [r3, #12]
   bae7a:	2202      	movs	r2, #2
   bae7c:	4620      	mov	r0, r4
   bae7e:	4798      	blx	r3
            write("details = ", 10);
   bae80:	6823      	ldr	r3, [r4, #0]
   bae82:	4914      	ldr	r1, [pc, #80]	; (baed4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bae84:	68db      	ldr	r3, [r3, #12]
   bae86:	4620      	mov	r0, r4
   bae88:	220a      	movs	r2, #10
   bae8a:	4798      	blx	r3
            write(attr.details);
   bae8c:	69e9      	ldr	r1, [r5, #28]
   bae8e:	4620      	mov	r0, r4
   bae90:	f7ff f9d9 	bl	ba246 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bae94:	215d      	movs	r1, #93	; 0x5d
   bae96:	4620      	mov	r0, r4
   bae98:	f7ff f9e4 	bl	ba264 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bae9c:	6823      	ldr	r3, [r4, #0]
   bae9e:	490e      	ldr	r1, [pc, #56]	; (baed8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   baea0:	68db      	ldr	r3, [r3, #12]
   baea2:	4620      	mov	r0, r4
   baea4:	2202      	movs	r2, #2
}
   baea6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   baeaa:	4718      	bx	r3
   baeac:	000bf647 	.word	0x000bf647
   baeb0:	000bf64e 	.word	0x000bf64e
   baeb4:	000be36a 	.word	0x000be36a
   baeb8:	000bf651 	.word	0x000bf651
   baebc:	000bf656 	.word	0x000bf656
   baec0:	2003e680 	.word	0x2003e680
   baec4:	000bf654 	.word	0x000bf654
   baec8:	000bf659 	.word	0x000bf659
   baecc:	000bf65c 	.word	0x000bf65c
   baed0:	000beec6 	.word	0x000beec6
   baed4:	000bf664 	.word	0x000bf664
   baed8:	000bf66f 	.word	0x000bf66f

000baedc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   baedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baee0:	b085      	sub	sp, #20
    return stream_;
   baee2:	f8d0 9020 	ldr.w	r9, [r0, #32]
   baee6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   baee8:	4605      	mov	r5, r0
   baeea:	460f      	mov	r7, r1
   baeec:	4690      	mov	r8, r2
   baeee:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   baef0:	f000 ff9e 	bl	bbe30 <_Z16_fetch_usbserialv>
   baef4:	4581      	cmp	r9, r0
   baef6:	d105      	bne.n	baf04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   baef8:	4849      	ldr	r0, [pc, #292]	; (bb020 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   baefa:	f000 f8e0 	bl	bb0be <_ZN5spark12NetworkClass9listeningEv>
   baefe:	2800      	cmp	r0, #0
   baf00:	f040 808a 	bne.w	bb018 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   baf04:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   baf06:	4a47      	ldr	r2, [pc, #284]	; (bb024 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   baf08:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   baf0a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   baf0e:	a801      	add	r0, sp, #4
        strm_(stream) {
   baf10:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   baf12:	f88d 9008 	strb.w	r9, [sp, #8]
   baf16:	f7ff f850 	bl	b9fba <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   baf1a:	4649      	mov	r1, r9
   baf1c:	4640      	mov	r0, r8
   baf1e:	f7fe fa17 	bl	b9350 <log_level_name>
    json.name("l", 1).value(s);
   baf22:	4941      	ldr	r1, [pc, #260]	; (bb028 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   baf24:	4680      	mov	r8, r0
   baf26:	2201      	movs	r2, #1
   baf28:	a801      	add	r0, sp, #4
   baf2a:	f7ff f8d5 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   baf2e:	4641      	mov	r1, r8
   baf30:	f7ff f97b 	bl	ba22a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   baf34:	b13f      	cbz	r7, baf46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   baf36:	493d      	ldr	r1, [pc, #244]	; (bb02c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   baf38:	2201      	movs	r2, #1
   baf3a:	a801      	add	r0, sp, #4
   baf3c:	f7ff f8cc 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   baf40:	4639      	mov	r1, r7
   baf42:	f7ff f972 	bl	ba22a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   baf46:	b13e      	cbz	r6, baf58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   baf48:	4939      	ldr	r1, [pc, #228]	; (bb030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   baf4a:	2201      	movs	r2, #1
   baf4c:	a801      	add	r0, sp, #4
   baf4e:	f7ff f8c3 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   baf52:	4631      	mov	r1, r6
   baf54:	f7ff f969 	bl	ba22a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   baf58:	7923      	ldrb	r3, [r4, #4]
   baf5a:	07df      	lsls	r7, r3, #31
   baf5c:	d50e      	bpl.n	baf7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   baf5e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   baf60:	212f      	movs	r1, #47	; 0x2f
   baf62:	4630      	mov	r0, r6
   baf64:	f003 f868 	bl	be038 <strrchr>
    if (s1) {
   baf68:	b100      	cbz	r0, baf6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   baf6a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   baf6c:	4931      	ldr	r1, [pc, #196]	; (bb034 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   baf6e:	2201      	movs	r2, #1
   baf70:	a801      	add	r0, sp, #4
   baf72:	f7ff f8b1 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   baf76:	4631      	mov	r1, r6
   baf78:	f7ff f957 	bl	ba22a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   baf7c:	7923      	ldrb	r3, [r4, #4]
   baf7e:	079e      	lsls	r6, r3, #30
   baf80:	d507      	bpl.n	baf92 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   baf82:	492d      	ldr	r1, [pc, #180]	; (bb038 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   baf84:	2202      	movs	r2, #2
   baf86:	a801      	add	r0, sp, #4
   baf88:	f7ff f8a6 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   baf8c:	68e1      	ldr	r1, [r4, #12]
   baf8e:	f7ff f821 	bl	b9fd4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   baf92:	7923      	ldrb	r3, [r4, #4]
   baf94:	0758      	lsls	r0, r3, #29
   baf96:	d514      	bpl.n	bafc2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   baf98:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   baf9a:	4633      	mov	r3, r6
   baf9c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   baf9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   bafa2:	b12a      	cbz	r2, bafb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bafa4:	2a20      	cmp	r2, #32
   bafa6:	d101      	bne.n	bafac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bafa8:	461e      	mov	r6, r3
   bafaa:	e7f7      	b.n	baf9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bafac:	2a28      	cmp	r2, #40	; 0x28
   bafae:	d1f5      	bne.n	baf9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bafb0:	4922      	ldr	r1, [pc, #136]	; (bb03c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bafb2:	2202      	movs	r2, #2
   bafb4:	a801      	add	r0, sp, #4
   bafb6:	f7ff f88f 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bafba:	1bba      	subs	r2, r7, r6
   bafbc:	4631      	mov	r1, r6
   bafbe:	f7ff f89b 	bl	ba0f8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bafc2:	7923      	ldrb	r3, [r4, #4]
   bafc4:	0719      	lsls	r1, r3, #28
   bafc6:	d507      	bpl.n	bafd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bafc8:	491d      	ldr	r1, [pc, #116]	; (bb040 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bafca:	2201      	movs	r2, #1
   bafcc:	a801      	add	r0, sp, #4
   bafce:	f7ff f883 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bafd2:	6961      	ldr	r1, [r4, #20]
   bafd4:	f7ff f810 	bl	b9ff8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bafd8:	7923      	ldrb	r3, [r4, #4]
   bafda:	06da      	lsls	r2, r3, #27
   bafdc:	d508      	bpl.n	baff0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bafde:	2204      	movs	r2, #4
   bafe0:	4918      	ldr	r1, [pc, #96]	; (bb044 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bafe2:	eb0d 0002 	add.w	r0, sp, r2
   bafe6:	f7ff f877 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bafea:	69a1      	ldr	r1, [r4, #24]
   bafec:	f7fe fff2 	bl	b9fd4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   baff0:	7923      	ldrb	r3, [r4, #4]
   baff2:	069b      	lsls	r3, r3, #26
   baff4:	d507      	bpl.n	bb006 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   baff6:	4914      	ldr	r1, [pc, #80]	; (bb048 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   baff8:	2206      	movs	r2, #6
   baffa:	a801      	add	r0, sp, #4
   baffc:	f7ff f86c 	bl	ba0d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bb000:	69e1      	ldr	r1, [r4, #28]
   bb002:	f7ff f912 	bl	ba22a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bb006:	a801      	add	r0, sp, #4
   bb008:	f7fe ffc1 	bl	b9f8e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bb00c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bb00e:	490f      	ldr	r1, [pc, #60]	; (bb04c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bb010:	6803      	ldr	r3, [r0, #0]
   bb012:	2202      	movs	r2, #2
   bb014:	68db      	ldr	r3, [r3, #12]
   bb016:	4798      	blx	r3
}
   bb018:	b005      	add	sp, #20
   bb01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb01e:	bf00      	nop
   bb020:	2003e680 	.word	0x2003e680
   bb024:	000bf68c 	.word	0x000bf68c
   bb028:	000bf624 	.word	0x000bf624
   bb02c:	000be60f 	.word	0x000be60f
   bb030:	000bf940 	.word	0x000bf940
   bb034:	000beb33 	.word	0x000beb33
   bb038:	000bf672 	.word	0x000bf672
   bb03c:	000bf675 	.word	0x000bf675
   bb040:	000be66f 	.word	0x000be66f
   bb044:	000bf678 	.word	0x000bf678
   bb048:	000bf67d 	.word	0x000bf67d
   bb04c:	000bf66f 	.word	0x000bf66f

000bb050 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb050:	2300      	movs	r3, #0
   bb052:	6840      	ldr	r0, [r0, #4]
   bb054:	461a      	mov	r2, r3
   bb056:	f7fe ba51 	b.w	b94fc <network_connect>

000bb05a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb05a:	6840      	ldr	r0, [r0, #4]
   bb05c:	2200      	movs	r2, #0
   bb05e:	2102      	movs	r1, #2
   bb060:	f7fe ba5c 	b.w	b951c <network_disconnect>

000bb064 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb064:	2200      	movs	r2, #0
   bb066:	6840      	ldr	r0, [r0, #4]
   bb068:	4611      	mov	r1, r2
   bb06a:	f7fe ba4f 	b.w	b950c <network_connecting>

000bb06e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb06e:	2200      	movs	r2, #0
   bb070:	6840      	ldr	r0, [r0, #4]
   bb072:	4611      	mov	r1, r2
   bb074:	f7fe ba5a 	b.w	b952c <network_ready>

000bb078 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb078:	2300      	movs	r3, #0
   bb07a:	6840      	ldr	r0, [r0, #4]
   bb07c:	461a      	mov	r2, r3
   bb07e:	4619      	mov	r1, r3
   bb080:	f7fe ba5c 	b.w	b953c <network_on>

000bb084 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb084:	2300      	movs	r3, #0
   bb086:	6840      	ldr	r0, [r0, #4]
   bb088:	461a      	mov	r2, r3
   bb08a:	4619      	mov	r1, r3
   bb08c:	f7fe ba5e 	b.w	b954c <network_off>

000bb090 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb090:	6840      	ldr	r0, [r0, #4]
   bb092:	2100      	movs	r1, #0
   bb094:	f7fe ba82 	b.w	b959c <network_is_on>

000bb098 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb098:	6840      	ldr	r0, [r0, #4]
   bb09a:	2100      	movs	r1, #0
   bb09c:	f7fe ba86 	b.w	b95ac <network_is_off>

000bb0a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb0a0:	6840      	ldr	r0, [r0, #4]
   bb0a2:	2200      	movs	r2, #0
   bb0a4:	f081 0101 	eor.w	r1, r1, #1
   bb0a8:	f7fe ba58 	b.w	b955c <network_listen>

000bb0ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb0ac:	6840      	ldr	r0, [r0, #4]
   bb0ae:	2200      	movs	r2, #0
   bb0b0:	f7fe ba64 	b.w	b957c <network_set_listen_timeout>

000bb0b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb0b4:	2200      	movs	r2, #0
   bb0b6:	6840      	ldr	r0, [r0, #4]
   bb0b8:	4611      	mov	r1, r2
   bb0ba:	f7fe ba67 	b.w	b958c <network_get_listen_timeout>

000bb0be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb0be:	2200      	movs	r2, #0
   bb0c0:	6840      	ldr	r0, [r0, #4]
   bb0c2:	4611      	mov	r1, r2
   bb0c4:	f7fe ba52 	b.w	b956c <network_listening>

000bb0c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb0c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb0cc:	b095      	sub	sp, #84	; 0x54
   bb0ce:	4614      	mov	r4, r2
   bb0d0:	460d      	mov	r5, r1
   bb0d2:	4607      	mov	r7, r0
    IPAddress addr;
   bb0d4:	f7fe fe0a 	bl	b9cec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb0d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb0da:	221c      	movs	r2, #28
   bb0dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb0de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb0e0:	f002 fede 	bl	bdea0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb0e4:	2340      	movs	r3, #64	; 0x40
   bb0e6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb0e8:	4620      	mov	r0, r4
   bb0ea:	466b      	mov	r3, sp
   bb0ec:	aa0c      	add	r2, sp, #48	; 0x30
   bb0ee:	2100      	movs	r1, #0
   bb0f0:	f7fe f81e 	bl	b9130 <netdb_getaddrinfo>
    if (!r) {
   bb0f4:	4604      	mov	r4, r0
   bb0f6:	2800      	cmp	r0, #0
   bb0f8:	d14b      	bne.n	bb192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb0fa:	4602      	mov	r2, r0
   bb0fc:	2101      	movs	r1, #1
   bb0fe:	6868      	ldr	r0, [r5, #4]
   bb100:	f7fe fa14 	bl	b952c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb104:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb106:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb108:	4622      	mov	r2, r4
   bb10a:	6868      	ldr	r0, [r5, #4]
   bb10c:	f7fe fa0e 	bl	b952c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb110:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb112:	4681      	mov	r9, r0
        bool ok = false;
   bb114:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb116:	2e00      	cmp	r6, #0
   bb118:	d03b      	beq.n	bb192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb11a:	2900      	cmp	r1, #0
   bb11c:	d139      	bne.n	bb192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb11e:	6873      	ldr	r3, [r6, #4]
   bb120:	2b02      	cmp	r3, #2
   bb122:	d003      	beq.n	bb12c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb124:	2b0a      	cmp	r3, #10
   bb126:	d011      	beq.n	bb14c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb128:	69f6      	ldr	r6, [r6, #28]
   bb12a:	e7f4      	b.n	bb116 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb12c:	f1b8 0f00 	cmp.w	r8, #0
   bb130:	d0fa      	beq.n	bb128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb132:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb134:	a806      	add	r0, sp, #24
   bb136:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb138:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb13a:	f7fe fe05 	bl	b9d48 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb13e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb140:	1d3c      	adds	r4, r7, #4
   bb142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb144:	682b      	ldr	r3, [r5, #0]
   bb146:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb148:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb14a:	e7ed      	b.n	bb128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb14c:	f1b9 0f00 	cmp.w	r9, #0
   bb150:	d0ea      	beq.n	bb128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb152:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb154:	2210      	movs	r2, #16
   bb156:	a801      	add	r0, sp, #4
   bb158:	f002 fea2 	bl	bdea0 <memset>
                    a.v = 6;
   bb15c:	2306      	movs	r3, #6
   bb15e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb162:	ad01      	add	r5, sp, #4
   bb164:	f104 0308 	add.w	r3, r4, #8
   bb168:	3418      	adds	r4, #24
   bb16a:	6818      	ldr	r0, [r3, #0]
   bb16c:	6859      	ldr	r1, [r3, #4]
   bb16e:	462a      	mov	r2, r5
   bb170:	c203      	stmia	r2!, {r0, r1}
   bb172:	3308      	adds	r3, #8
   bb174:	42a3      	cmp	r3, r4
   bb176:	4615      	mov	r5, r2
   bb178:	d1f7      	bne.n	bb16a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb17a:	a901      	add	r1, sp, #4
   bb17c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb17e:	ad07      	add	r5, sp, #28
   bb180:	f7fe fdc2 	bl	b9d08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb186:	1d3c      	adds	r4, r7, #4
   bb188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb18a:	682b      	ldr	r3, [r5, #0]
   bb18c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb18e:	4649      	mov	r1, r9
   bb190:	e7ca      	b.n	bb128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb192:	9800      	ldr	r0, [sp, #0]
   bb194:	f7fd ffc4 	bl	b9120 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb198:	4638      	mov	r0, r7
   bb19a:	b015      	add	sp, #84	; 0x54
   bb19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb1a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb1a0:	4b02      	ldr	r3, [pc, #8]	; (bb1ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb1a2:	4a03      	ldr	r2, [pc, #12]	; (bb1b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb1a4:	601a      	str	r2, [r3, #0]
   bb1a6:	2200      	movs	r2, #0
   bb1a8:	605a      	str	r2, [r3, #4]

} // spark
   bb1aa:	4770      	bx	lr
   bb1ac:	2003e680 	.word	0x2003e680
   bb1b0:	000bf704 	.word	0x000bf704

000bb1b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bb1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb1b6:	4606      	mov	r6, r0
   bb1b8:	460d      	mov	r5, r1
  size_t n = 0;
   bb1ba:	188f      	adds	r7, r1, r2
   bb1bc:	2400      	movs	r4, #0
  while (size--) {
   bb1be:	42bd      	cmp	r5, r7
   bb1c0:	d00c      	beq.n	bb1dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bb1c2:	6833      	ldr	r3, [r6, #0]
   bb1c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   bb1c8:	689b      	ldr	r3, [r3, #8]
   bb1ca:	4630      	mov	r0, r6
   bb1cc:	4798      	blx	r3
     if (chunk>=0)
   bb1ce:	1e03      	subs	r3, r0, #0
   bb1d0:	db01      	blt.n	bb1d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bb1d2:	441c      	add	r4, r3
  while (size--) {
   bb1d4:	e7f3      	b.n	bb1be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bb1d6:	2c00      	cmp	r4, #0
   bb1d8:	bf08      	it	eq
   bb1da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bb1dc:	4620      	mov	r0, r4
   bb1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb1e0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bb1e0:	b513      	push	{r0, r1, r4, lr}
   bb1e2:	4604      	mov	r4, r0
    }
   bb1e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bb1e6:	b159      	cbz	r1, bb200 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bb1e8:	9101      	str	r1, [sp, #4]
   bb1ea:	f002 fef6 	bl	bdfda <strlen>
   bb1ee:	6823      	ldr	r3, [r4, #0]
   bb1f0:	9901      	ldr	r1, [sp, #4]
   bb1f2:	68db      	ldr	r3, [r3, #12]
   bb1f4:	4602      	mov	r2, r0
   bb1f6:	4620      	mov	r0, r4
    }
   bb1f8:	b002      	add	sp, #8
   bb1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bb1fe:	4718      	bx	r3
    }
   bb200:	b002      	add	sp, #8
   bb202:	bd10      	pop	{r4, pc}

000bb204 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bb204:	b508      	push	{r3, lr}
  return write(str);
   bb206:	f7ff ffeb 	bl	bb1e0 <_ZN5Print5writeEPKc>
}
   bb20a:	bd08      	pop	{r3, pc}

000bb20c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bb20c:	6803      	ldr	r3, [r0, #0]
   bb20e:	689b      	ldr	r3, [r3, #8]
   bb210:	4718      	bx	r3

000bb212 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bb212:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bb214:	210d      	movs	r1, #13
{
   bb216:	4605      	mov	r5, r0
  size_t n = print('\r');
   bb218:	f7ff fff8 	bl	bb20c <_ZN5Print5printEc>
  n += print('\n');
   bb21c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bb21e:	4604      	mov	r4, r0
  n += print('\n');
   bb220:	4628      	mov	r0, r5
   bb222:	f7ff fff3 	bl	bb20c <_ZN5Print5printEc>
  return n;
}
   bb226:	4420      	add	r0, r4
   bb228:	bd38      	pop	{r3, r4, r5, pc}

000bb22a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bb22a:	b530      	push	{r4, r5, lr}
   bb22c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bb22e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bb230:	2a01      	cmp	r2, #1
  *str = '\0';
   bb232:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bb236:	bf98      	it	ls
   bb238:	220a      	movls	r2, #10
   bb23a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bb23c:	460d      	mov	r5, r1
   bb23e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bb242:	fb01 5312 	mls	r3, r1, r2, r5
   bb246:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb24a:	2b09      	cmp	r3, #9
   bb24c:	bf94      	ite	ls
   bb24e:	3330      	addls	r3, #48	; 0x30
   bb250:	3337      	addhi	r3, #55	; 0x37
   bb252:	b2db      	uxtb	r3, r3
  } while(n);
   bb254:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb256:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bb25a:	d9ef      	bls.n	bb23c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bb25c:	4621      	mov	r1, r4
   bb25e:	f7ff ffbf 	bl	bb1e0 <_ZN5Print5writeEPKc>
}
   bb262:	b00b      	add	sp, #44	; 0x2c
   bb264:	bd30      	pop	{r4, r5, pc}
	...

000bb268 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bb268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb26c:	ec55 4b10 	vmov	r4, r5, d0
   bb270:	4606      	mov	r6, r0
   bb272:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bb274:	ee10 2a10 	vmov	r2, s0
   bb278:	ee10 0a10 	vmov	r0, s0
   bb27c:	462b      	mov	r3, r5
   bb27e:	4629      	mov	r1, r5
   bb280:	f002 fce6 	bl	bdc50 <__aeabi_dcmpun>
   bb284:	b140      	cbz	r0, bb298 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bb286:	4953      	ldr	r1, [pc, #332]	; (bb3d4 <_ZN5Print10printFloatEdh+0x16c>)
   bb288:	4630      	mov	r0, r6
   bb28a:	f7ff ffa9 	bl	bb1e0 <_ZN5Print5writeEPKc>
   bb28e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bb290:	4650      	mov	r0, sl
   bb292:	b003      	add	sp, #12
   bb294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bb298:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bb29c:	4b4e      	ldr	r3, [pc, #312]	; (bb3d8 <_ZN5Print10printFloatEdh+0x170>)
   bb29e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb2a2:	4620      	mov	r0, r4
   bb2a4:	4649      	mov	r1, r9
   bb2a6:	f002 fcd3 	bl	bdc50 <__aeabi_dcmpun>
   bb2aa:	b948      	cbnz	r0, bb2c0 <_ZN5Print10printFloatEdh+0x58>
   bb2ac:	4b4a      	ldr	r3, [pc, #296]	; (bb3d8 <_ZN5Print10printFloatEdh+0x170>)
   bb2ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb2b2:	4620      	mov	r0, r4
   bb2b4:	4649      	mov	r1, r9
   bb2b6:	f002 fcad 	bl	bdc14 <__aeabi_dcmple>
   bb2ba:	b908      	cbnz	r0, bb2c0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bb2bc:	4947      	ldr	r1, [pc, #284]	; (bb3dc <_ZN5Print10printFloatEdh+0x174>)
   bb2be:	e7e3      	b.n	bb288 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bb2c0:	4b47      	ldr	r3, [pc, #284]	; (bb3e0 <_ZN5Print10printFloatEdh+0x178>)
   bb2c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bb2c6:	4620      	mov	r0, r4
   bb2c8:	4629      	mov	r1, r5
   bb2ca:	f002 fcb7 	bl	bdc3c <__aeabi_dcmpgt>
   bb2ce:	b108      	cbz	r0, bb2d4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bb2d0:	4944      	ldr	r1, [pc, #272]	; (bb3e4 <_ZN5Print10printFloatEdh+0x17c>)
   bb2d2:	e7d9      	b.n	bb288 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bb2d4:	4b44      	ldr	r3, [pc, #272]	; (bb3e8 <_ZN5Print10printFloatEdh+0x180>)
   bb2d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bb2da:	4620      	mov	r0, r4
   bb2dc:	4629      	mov	r1, r5
   bb2de:	f002 fc8f 	bl	bdc00 <__aeabi_dcmplt>
   bb2e2:	2800      	cmp	r0, #0
   bb2e4:	d1f4      	bne.n	bb2d0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bb2e6:	2200      	movs	r2, #0
   bb2e8:	2300      	movs	r3, #0
   bb2ea:	4620      	mov	r0, r4
   bb2ec:	4629      	mov	r1, r5
   bb2ee:	f002 fc87 	bl	bdc00 <__aeabi_dcmplt>
   bb2f2:	b1d0      	cbz	r0, bb32a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bb2f4:	212d      	movs	r1, #45	; 0x2d
   bb2f6:	4630      	mov	r0, r6
   bb2f8:	f7ff ff88 	bl	bb20c <_ZN5Print5printEc>
     number = -number;
   bb2fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bb300:	4682      	mov	sl, r0
     number = -number;
   bb302:	461d      	mov	r5, r3
  double rounding = 0.5;
   bb304:	4939      	ldr	r1, [pc, #228]	; (bb3ec <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bb306:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bb3f4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bb30a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bb30e:	2000      	movs	r0, #0
    rounding /= 10.0;
   bb310:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bb314:	fa5f f38b 	uxtb.w	r3, fp
   bb318:	429f      	cmp	r7, r3
   bb31a:	d908      	bls.n	bb32e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bb31c:	4642      	mov	r2, r8
   bb31e:	464b      	mov	r3, r9
   bb320:	f002 fb26 	bl	bd970 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bb324:	f10b 0b01 	add.w	fp, fp, #1
   bb328:	e7f4      	b.n	bb314 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bb32a:	4682      	mov	sl, r0
   bb32c:	e7ea      	b.n	bb304 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bb32e:	4622      	mov	r2, r4
   bb330:	462b      	mov	r3, r5
   bb332:	f002 f83d 	bl	bd3b0 <__adddf3>
   bb336:	460d      	mov	r5, r1
   bb338:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bb33a:	f002 fcc7 	bl	bdccc <__aeabi_d2uiz>
   bb33e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bb340:	f002 f972 	bl	bd628 <__aeabi_ui2d>
   bb344:	4602      	mov	r2, r0
   bb346:	460b      	mov	r3, r1
   bb348:	4620      	mov	r0, r4
   bb34a:	4629      	mov	r1, r5
   bb34c:	f002 f82e 	bl	bd3ac <__aeabi_dsub>
        return printNumber(val, base) + t;
   bb350:	220a      	movs	r2, #10
   bb352:	4604      	mov	r4, r0
   bb354:	460d      	mov	r5, r1
   bb356:	4630      	mov	r0, r6
   bb358:	4641      	mov	r1, r8
   bb35a:	f7ff ff66 	bl	bb22a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bb35e:	4482      	add	sl, r0
  if (digits > 0) {
   bb360:	2f00      	cmp	r7, #0
   bb362:	d095      	beq.n	bb290 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bb364:	4922      	ldr	r1, [pc, #136]	; (bb3f0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bb366:	f8df 908c 	ldr.w	r9, [pc, #140]	; bb3f4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bb36a:	4630      	mov	r0, r6
   bb36c:	f7ff ff38 	bl	bb1e0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bb370:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bb374:	4482      	add	sl, r0
  while (digits-- > 0)
   bb376:	2f00      	cmp	r7, #0
   bb378:	d08a      	beq.n	bb290 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bb37a:	4642      	mov	r2, r8
   bb37c:	464b      	mov	r3, r9
   bb37e:	4620      	mov	r0, r4
   bb380:	4629      	mov	r1, r5
   bb382:	f002 f9cb 	bl	bd71c <__aeabi_dmul>
   bb386:	4604      	mov	r4, r0
   bb388:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bb38a:	f002 fc77 	bl	bdc7c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bb38e:	f1b0 0b00 	subs.w	fp, r0, #0
   bb392:	da1c      	bge.n	bb3ce <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bb394:	212d      	movs	r1, #45	; 0x2d
   bb396:	4630      	mov	r0, r6
   bb398:	f7ff ff38 	bl	bb20c <_ZN5Print5printEc>
            val = -n;
   bb39c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bb3a0:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bb3a2:	220a      	movs	r2, #10
   bb3a4:	4630      	mov	r0, r6
   bb3a6:	9301      	str	r3, [sp, #4]
   bb3a8:	f7ff ff3f 	bl	bb22a <_ZN5Print11printNumberEmh>
   bb3ac:	9b01      	ldr	r3, [sp, #4]
   bb3ae:	4418      	add	r0, r3
    n += print(toPrint);
   bb3b0:	4482      	add	sl, r0
    remainder -= toPrint;
   bb3b2:	4658      	mov	r0, fp
   bb3b4:	f002 f948 	bl	bd648 <__aeabi_i2d>
   bb3b8:	4602      	mov	r2, r0
   bb3ba:	460b      	mov	r3, r1
   bb3bc:	4620      	mov	r0, r4
   bb3be:	4629      	mov	r1, r5
   bb3c0:	f001 fff4 	bl	bd3ac <__aeabi_dsub>
   bb3c4:	3f01      	subs	r7, #1
   bb3c6:	4604      	mov	r4, r0
   bb3c8:	460d      	mov	r5, r1
   bb3ca:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bb3cc:	e7d3      	b.n	bb376 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bb3ce:	4659      	mov	r1, fp
        size_t t = 0;
   bb3d0:	2300      	movs	r3, #0
   bb3d2:	e7e6      	b.n	bb3a2 <_ZN5Print10printFloatEdh+0x13a>
   bb3d4:	000bf738 	.word	0x000bf738
   bb3d8:	7fefffff 	.word	0x7fefffff
   bb3dc:	000bf73c 	.word	0x000bf73c
   bb3e0:	41efffff 	.word	0x41efffff
   bb3e4:	000bf740 	.word	0x000bf740
   bb3e8:	c1efffff 	.word	0xc1efffff
   bb3ec:	3fe00000 	.word	0x3fe00000
   bb3f0:	000bf778 	.word	0x000bf778
   bb3f4:	40240000 	.word	0x40240000

000bb3f8 <_ZN5Print5printEfi>:
{
   bb3f8:	b538      	push	{r3, r4, r5, lr}
   bb3fa:	4604      	mov	r4, r0
   bb3fc:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bb400:	b2cd      	uxtb	r5, r1
   bb402:	f002 f933 	bl	bd66c <__aeabi_f2d>
   bb406:	ec41 0b10 	vmov	d0, r0, r1
   bb40a:	4629      	mov	r1, r5
   bb40c:	4620      	mov	r0, r4
}
   bb40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bb412:	f7ff bf29 	b.w	bb268 <_ZN5Print10printFloatEdh>

000bb416 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bb416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb41a:	b086      	sub	sp, #24
   bb41c:	af00      	add	r7, sp, #0
   bb41e:	4605      	mov	r5, r0
   bb420:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bb422:	1d38      	adds	r0, r7, #4
   bb424:	2114      	movs	r1, #20
{
   bb426:	4614      	mov	r4, r2
    va_copy(args2, args);
   bb428:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bb42a:	f7fe f8ef 	bl	b960c <vsnprintf>

    if (n<bufsize)
   bb42e:	2813      	cmp	r0, #19
   bb430:	d80e      	bhi.n	bb450 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bb432:	1d39      	adds	r1, r7, #4
   bb434:	4628      	mov	r0, r5
   bb436:	f7ff fed3 	bl	bb1e0 <_ZN5Print5writeEPKc>
   bb43a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bb43c:	b11e      	cbz	r6, bb446 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bb43e:	4628      	mov	r0, r5
   bb440:	f7ff fee7 	bl	bb212 <_ZN5Print7printlnEv>
   bb444:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bb446:	4620      	mov	r0, r4
   bb448:	3718      	adds	r7, #24
   bb44a:	46bd      	mov	sp, r7
   bb44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bb450:	f100 0308 	add.w	r3, r0, #8
   bb454:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bb458:	46e8      	mov	r8, sp
        char bigger[n+1];
   bb45a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bb45e:	4622      	mov	r2, r4
   bb460:	1c41      	adds	r1, r0, #1
   bb462:	683b      	ldr	r3, [r7, #0]
   bb464:	4668      	mov	r0, sp
   bb466:	f7fe f8d1 	bl	b960c <vsnprintf>
  return write(str);
   bb46a:	4669      	mov	r1, sp
   bb46c:	4628      	mov	r0, r5
   bb46e:	f7ff feb7 	bl	bb1e0 <_ZN5Print5writeEPKc>
   bb472:	4604      	mov	r4, r0
   bb474:	46c5      	mov	sp, r8
   bb476:	e7e1      	b.n	bb43c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb478 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bb478:	b510      	push	{r4, lr}
  if (0 == max) {
   bb47a:	4604      	mov	r4, r0
   bb47c:	b128      	cbz	r0, bb48a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bb47e:	f002 fd45 	bl	bdf0c <rand>
   bb482:	fb90 f3f4 	sdiv	r3, r0, r4
   bb486:	fb03 0414 	mls	r4, r3, r4, r0
}
   bb48a:	4620      	mov	r0, r4
   bb48c:	bd10      	pop	{r4, pc}

000bb48e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bb48e:	4288      	cmp	r0, r1
{
   bb490:	b510      	push	{r4, lr}
   bb492:	4604      	mov	r4, r0
  if (min >= max) {
   bb494:	da03      	bge.n	bb49e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bb496:	1a08      	subs	r0, r1, r0
   bb498:	f7ff ffee 	bl	bb478 <_Z6randomi>
   bb49c:	4404      	add	r4, r0
}
   bb49e:	4620      	mov	r0, r4
   bb4a0:	bd10      	pop	{r4, pc}

000bb4a2 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bb4a2:	f002 bd05 	b.w	bdeb0 <srand>
	...

000bb4a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bb4a8:	4b01      	ldr	r3, [pc, #4]	; (bb4b0 <_GLOBAL__sub_I_RGB+0x8>)
   bb4aa:	2200      	movs	r2, #0
   bb4ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bb4ae:	4770      	bx	lr
   bb4b0:	2003e688 	.word	0x2003e688

000bb4b4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bb4b4:	2100      	movs	r1, #0
   bb4b6:	f7fd be83 	b.w	b91c0 <hal_spi_release>

000bb4ba <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bb4ba:	2100      	movs	r1, #0
   bb4bc:	f7fd be78 	b.w	b91b0 <hal_spi_acquire>

000bb4c0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bb4c0:	b510      	push	{r4, lr}
   bb4c2:	4604      	mov	r4, r0
   bb4c4:	4608      	mov	r0, r1
{
    _spi = spi;
   bb4c6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bb4c8:	f7fd fe52 	bl	b9170 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bb4cc:	2300      	movs	r3, #0
   bb4ce:	6063      	str	r3, [r4, #4]
}
   bb4d0:	4620      	mov	r0, r4
   bb4d2:	bd10      	pop	{r4, pc}

000bb4d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bb4d4:	b513      	push	{r0, r1, r4, lr}
   bb4d6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bb4d8:	7800      	ldrb	r0, [r0, #0]
   bb4da:	f7ff ffee 	bl	bb4ba <_ZN8SPIClass4lockEv.isra.0>
   bb4de:	b958      	cbnz	r0, bb4f8 <_ZN8SPIClass5beginEv+0x24>
   bb4e0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bb4e2:	9001      	str	r0, [sp, #4]
   bb4e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb4e8:	f7fd fe2a 	bl	b9140 <hal_spi_begin>
        unlock();
   bb4ec:	9801      	ldr	r0, [sp, #4]
    }
}
   bb4ee:	b002      	add	sp, #8
   bb4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb4f4:	f7ff bfde 	b.w	bb4b4 <_ZN8SPIClass6unlockEv.isra.0>
   bb4f8:	b002      	add	sp, #8
   bb4fa:	bd10      	pop	{r4, pc}

000bb4fc <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bb4fc:	b513      	push	{r0, r1, r4, lr}
   bb4fe:	4604      	mov	r4, r0
    if (!lock())
   bb500:	7800      	ldrb	r0, [r0, #0]
   bb502:	f7ff ffda 	bl	bb4ba <_ZN8SPIClass4lockEv.isra.0>
   bb506:	b948      	cbnz	r0, bb51c <_ZN8SPIClass3endEv+0x20>
   bb508:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bb50a:	9001      	str	r0, [sp, #4]
   bb50c:	f7fd fe20 	bl	b9150 <hal_spi_end>
        unlock();
   bb510:	9801      	ldr	r0, [sp, #4]
    }
}
   bb512:	b002      	add	sp, #8
   bb514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb518:	f7ff bfcc 	b.w	bb4b4 <_ZN8SPIClass6unlockEv.isra.0>
   bb51c:	b002      	add	sp, #8
   bb51e:	bd10      	pop	{r4, pc}

000bb520 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bb520:	7800      	ldrb	r0, [r0, #0]
   bb522:	f7ff bfc7 	b.w	bb4b4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bb528 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bb528:	0840      	lsrs	r0, r0, #1
{
   bb52a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bb52c:	6018      	str	r0, [r3, #0]
   bb52e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bb530:	6818      	ldr	r0, [r3, #0]
   bb532:	4288      	cmp	r0, r1
   bb534:	b2e5      	uxtb	r5, r4
   bb536:	d906      	bls.n	bb546 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bb538:	3401      	adds	r4, #1
   bb53a:	2c08      	cmp	r4, #8
   bb53c:	d002      	beq.n	bb544 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bb53e:	0840      	lsrs	r0, r0, #1
   bb540:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bb542:	e7f5      	b.n	bb530 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bb544:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bb546:	4b02      	ldr	r3, [pc, #8]	; (bb550 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bb548:	5d5b      	ldrb	r3, [r3, r5]
   bb54a:	7013      	strb	r3, [r2, #0]
}
   bb54c:	bd30      	pop	{r4, r5, pc}
   bb54e:	bf00      	nop
   bb550:	000bf744 	.word	0x000bf744

000bb554 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bb554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb558:	4606      	mov	r6, r0
   bb55a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bb55c:	7800      	ldrb	r0, [r0, #0]
{
   bb55e:	460c      	mov	r4, r1
    CHECK(lock());
   bb560:	f7ff ffab 	bl	bb4ba <_ZN8SPIClass4lockEv.isra.0>
   bb564:	2800      	cmp	r0, #0
   bb566:	db1b      	blt.n	bb5a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bb568:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bb56a:	2214      	movs	r2, #20
   bb56c:	2100      	movs	r1, #0
   bb56e:	a809      	add	r0, sp, #36	; 0x24
   bb570:	f002 fc96 	bl	bdea0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bb574:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bb576:	2200      	movs	r2, #0
   bb578:	a909      	add	r1, sp, #36	; 0x24
   bb57a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bb57c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bb580:	f7fd fe06 	bl	b9190 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bb584:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bb588:	b113      	cbz	r3, bb590 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bb58a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bb58e:	b155      	cbz	r5, bb5a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bb590:	2700      	movs	r7, #0
   bb592:	46b9      	mov	r9, r7
   bb594:	46b8      	mov	r8, r7
   bb596:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bb598:	7923      	ldrb	r3, [r4, #4]
   bb59a:	b15d      	cbz	r5, bb5b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bb59c:	b1c3      	cbz	r3, bb5d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bb59e:	2000      	movs	r0, #0
}
   bb5a0:	b00f      	add	sp, #60	; 0x3c
   bb5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bb5a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bb5aa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bb5ae:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bb5b2:	e7f1      	b.n	bb598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bb5b4:	2b00      	cmp	r3, #0
   bb5b6:	d135      	bne.n	bb624 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bb5b8:	68a3      	ldr	r3, [r4, #8]
   bb5ba:	4543      	cmp	r3, r8
   bb5bc:	d108      	bne.n	bb5d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bb5be:	f88d 9020 	strb.w	r9, [sp, #32]
   bb5c2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bb5c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bb5ca:	89a3      	ldrh	r3, [r4, #12]
   bb5cc:	429a      	cmp	r2, r3
   bb5ce:	d0e6      	beq.n	bb59e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bb5d0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bb5d2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bb5d4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bb5d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb5da:	ab04      	add	r3, sp, #16
   bb5dc:	f10d 020f 	add.w	r2, sp, #15
   bb5e0:	f7ff ffa2 	bl	bb528 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bb5e4:	7921      	ldrb	r1, [r4, #4]
   bb5e6:	b985      	cbnz	r5, bb60a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bb5e8:	b989      	cbnz	r1, bb60e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb5ea:	68a3      	ldr	r3, [r4, #8]
   bb5ec:	4543      	cmp	r3, r8
   bb5ee:	d30e      	bcc.n	bb60e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bb5f0:	f88d 9020 	strb.w	r9, [sp, #32]
   bb5f4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bb5f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bb5fc:	89a3      	ldrh	r3, [r4, #12]
   bb5fe:	429a      	cmp	r2, r3
   bb600:	d105      	bne.n	bb60e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bb602:	9b04      	ldr	r3, [sp, #16]
   bb604:	4543      	cmp	r3, r8
   bb606:	d102      	bne.n	bb60e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb608:	e7c9      	b.n	bb59e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bb60a:	2900      	cmp	r1, #0
   bb60c:	d1f9      	bne.n	bb602 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bb60e:	2300      	movs	r3, #0
   bb610:	9301      	str	r3, [sp, #4]
   bb612:	7b63      	ldrb	r3, [r4, #13]
   bb614:	9300      	str	r3, [sp, #0]
   bb616:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb61a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bb61c:	7830      	ldrb	r0, [r6, #0]
   bb61e:	f7fd fdbf 	bl	b91a0 <hal_spi_set_settings>
   bb622:	e7bc      	b.n	bb59e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bb624:	e9cd 5500 	strd	r5, r5, [sp]
   bb628:	462b      	mov	r3, r5
   bb62a:	462a      	mov	r2, r5
   bb62c:	2101      	movs	r1, #1
   bb62e:	e7f5      	b.n	bb61c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bb630 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bb630:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bb632:	7800      	ldrb	r0, [r0, #0]
   bb634:	f7fd fd94 	bl	b9160 <hal_spi_transfer>
}
   bb638:	b2c0      	uxtb	r0, r0
   bb63a:	bd08      	pop	{r3, pc}

000bb63c <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bb63c:	4770      	bx	lr

000bb63e <_ZN8SPIClass15detachInterruptEv>:
   bb63e:	4770      	bx	lr

000bb640 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bb640:	b510      	push	{r4, lr}
   bb642:	4604      	mov	r4, r0
{
	free(buffer);
   bb644:	6800      	ldr	r0, [r0, #0]
   bb646:	f7fd ffc1 	bl	b95cc <free>
}
   bb64a:	4620      	mov	r0, r4
   bb64c:	bd10      	pop	{r4, pc}

000bb64e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bb64e:	b510      	push	{r4, lr}
   bb650:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bb652:	6800      	ldr	r0, [r0, #0]
   bb654:	b108      	cbz	r0, bb65a <_ZN6String10invalidateEv+0xc>
   bb656:	f7fd ffb9 	bl	b95cc <free>
	buffer = NULL;
   bb65a:	2300      	movs	r3, #0
	capacity = len = 0;
   bb65c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bb660:	6023      	str	r3, [r4, #0]
}
   bb662:	bd10      	pop	{r4, pc}

000bb664 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bb664:	b538      	push	{r3, r4, r5, lr}
   bb666:	4604      	mov	r4, r0
   bb668:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bb66a:	6800      	ldr	r0, [r0, #0]
   bb66c:	3101      	adds	r1, #1
   bb66e:	f7fd ffb5 	bl	b95dc <realloc>
	if (newbuffer) {
   bb672:	b110      	cbz	r0, bb67a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bb674:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bb678:	2001      	movs	r0, #1
	}
	return 0;
}
   bb67a:	bd38      	pop	{r3, r4, r5, pc}

000bb67c <_ZN6String7reserveEj>:
{
   bb67c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bb67e:	6803      	ldr	r3, [r0, #0]
{
   bb680:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bb682:	b123      	cbz	r3, bb68e <_ZN6String7reserveEj+0x12>
   bb684:	6843      	ldr	r3, [r0, #4]
   bb686:	428b      	cmp	r3, r1
   bb688:	d301      	bcc.n	bb68e <_ZN6String7reserveEj+0x12>
   bb68a:	2001      	movs	r0, #1
}
   bb68c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bb68e:	4620      	mov	r0, r4
   bb690:	f7ff ffe8 	bl	bb664 <_ZN6String12changeBufferEj>
   bb694:	2800      	cmp	r0, #0
   bb696:	d0f9      	beq.n	bb68c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bb698:	68a3      	ldr	r3, [r4, #8]
   bb69a:	2b00      	cmp	r3, #0
   bb69c:	d1f5      	bne.n	bb68a <_ZN6String7reserveEj+0xe>
   bb69e:	6822      	ldr	r2, [r4, #0]
   bb6a0:	7013      	strb	r3, [r2, #0]
   bb6a2:	e7f2      	b.n	bb68a <_ZN6String7reserveEj+0xe>

000bb6a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bb6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb6a6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bb6a8:	4611      	mov	r1, r2
   bb6aa:	9201      	str	r2, [sp, #4]
{
   bb6ac:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bb6ae:	f7ff ffe5 	bl	bb67c <_ZN6String7reserveEj>
   bb6b2:	9a01      	ldr	r2, [sp, #4]
   bb6b4:	b928      	cbnz	r0, bb6c2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bb6b6:	4620      	mov	r0, r4
   bb6b8:	f7ff ffc9 	bl	bb64e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bb6bc:	4620      	mov	r0, r4
   bb6be:	b003      	add	sp, #12
   bb6c0:	bd30      	pop	{r4, r5, pc}
	len = length;
   bb6c2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bb6c4:	4629      	mov	r1, r5
   bb6c6:	6820      	ldr	r0, [r4, #0]
   bb6c8:	f002 fbc2 	bl	bde50 <memcpy>
	buffer[len] = 0;
   bb6cc:	6822      	ldr	r2, [r4, #0]
   bb6ce:	68a3      	ldr	r3, [r4, #8]
   bb6d0:	2100      	movs	r1, #0
   bb6d2:	54d1      	strb	r1, [r2, r3]
	return *this;
   bb6d4:	e7f2      	b.n	bb6bc <_ZN6String4copyEPKcj+0x18>

000bb6d6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bb6d6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bb6d8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bb6da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bb6de:	4604      	mov	r4, r0
	len = 0;
   bb6e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb6e2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bb6e4:	b141      	cbz	r1, bb6f8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bb6e6:	4608      	mov	r0, r1
   bb6e8:	9101      	str	r1, [sp, #4]
   bb6ea:	f002 fc76 	bl	bdfda <strlen>
   bb6ee:	9901      	ldr	r1, [sp, #4]
   bb6f0:	4602      	mov	r2, r0
   bb6f2:	4620      	mov	r0, r4
   bb6f4:	f7ff ffd6 	bl	bb6a4 <_ZN6String4copyEPKcj>
}
   bb6f8:	4620      	mov	r0, r4
   bb6fa:	b002      	add	sp, #8
   bb6fc:	bd10      	pop	{r4, pc}

000bb6fe <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bb6fe:	b538      	push	{r3, r4, r5, lr}
   bb700:	4605      	mov	r5, r0
	if (buffer) {
   bb702:	6800      	ldr	r0, [r0, #0]
{
   bb704:	460c      	mov	r4, r1
	if (buffer) {
   bb706:	b168      	cbz	r0, bb724 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bb708:	686a      	ldr	r2, [r5, #4]
   bb70a:	688b      	ldr	r3, [r1, #8]
   bb70c:	429a      	cmp	r2, r3
   bb70e:	d307      	bcc.n	bb720 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bb710:	6809      	ldr	r1, [r1, #0]
   bb712:	f002 fc5a 	bl	bdfca <strcpy>
			len = rhs.len;
   bb716:	68a3      	ldr	r3, [r4, #8]
   bb718:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bb71a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bb71c:	60a3      	str	r3, [r4, #8]
}
   bb71e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bb720:	f7fd ff54 	bl	b95cc <free>
	buffer = rhs.buffer;
   bb724:	6823      	ldr	r3, [r4, #0]
   bb726:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bb728:	6863      	ldr	r3, [r4, #4]
   bb72a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bb72c:	68a3      	ldr	r3, [r4, #8]
   bb72e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bb730:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bb732:	e9c4 3300 	strd	r3, r3, [r4]
   bb736:	e7f1      	b.n	bb71c <_ZN6String4moveERS_+0x1e>

000bb738 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bb738:	b510      	push	{r4, lr}
	buffer = NULL;
   bb73a:	2300      	movs	r3, #0
	capacity = 0;
   bb73c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bb740:	4604      	mov	r4, r0
	len = 0;
   bb742:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb744:	7303      	strb	r3, [r0, #12]
	move(rval);
   bb746:	f7ff ffda 	bl	bb6fe <_ZN6String4moveERS_>
}
   bb74a:	4620      	mov	r0, r4
   bb74c:	bd10      	pop	{r4, pc}

000bb74e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bb74e:	4288      	cmp	r0, r1
{
   bb750:	b510      	push	{r4, lr}
   bb752:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bb754:	d005      	beq.n	bb762 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bb756:	680b      	ldr	r3, [r1, #0]
   bb758:	b12b      	cbz	r3, bb766 <_ZN6StringaSERKS_+0x18>
   bb75a:	688a      	ldr	r2, [r1, #8]
   bb75c:	4619      	mov	r1, r3
   bb75e:	f7ff ffa1 	bl	bb6a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb762:	4620      	mov	r0, r4
   bb764:	bd10      	pop	{r4, pc}
	else invalidate();
   bb766:	f7ff ff72 	bl	bb64e <_ZN6String10invalidateEv>
   bb76a:	e7fa      	b.n	bb762 <_ZN6StringaSERKS_+0x14>

000bb76c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bb76c:	b510      	push	{r4, lr}
	buffer = NULL;
   bb76e:	2300      	movs	r3, #0
String::String(const String &value)
   bb770:	4604      	mov	r4, r0
	capacity = 0;
   bb772:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bb776:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb778:	7303      	strb	r3, [r0, #12]
	*this = value;
   bb77a:	f7ff ffe8 	bl	bb74e <_ZN6StringaSERKS_>
}
   bb77e:	4620      	mov	r0, r4
   bb780:	bd10      	pop	{r4, pc}
	...

000bb784 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   bb784:	6883      	ldr	r3, [r0, #8]
   bb786:	428b      	cmp	r3, r1
   bb788:	d901      	bls.n	bb78e <_ZN6StringixEj+0xa>
   bb78a:	6800      	ldr	r0, [r0, #0]
   bb78c:	b918      	cbnz	r0, bb796 <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
   bb78e:	4803      	ldr	r0, [pc, #12]	; (bb79c <_ZN6StringixEj+0x18>)
   bb790:	2300      	movs	r3, #0
   bb792:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
   bb794:	4770      	bx	lr
	}
	return buffer[index];
   bb796:	4408      	add	r0, r1
}
   bb798:	4770      	bx	lr
   bb79a:	bf00      	nop
   bb79c:	2003e698 	.word	0x2003e698

000bb7a0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bb7a0:	b558      	push	{r3, r4, r6, lr}
   bb7a2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bb7a4:	b12a      	cbz	r2, bb7b2 <_ZNK6String8getBytesEPhjj+0x12>
   bb7a6:	b121      	cbz	r1, bb7b2 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bb7a8:	6884      	ldr	r4, [r0, #8]
   bb7aa:	42a3      	cmp	r3, r4
   bb7ac:	d302      	bcc.n	bb7b4 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bb7ae:	2300      	movs	r3, #0
   bb7b0:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bb7b2:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bb7b4:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bb7b6:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bb7b8:	6801      	ldr	r1, [r0, #0]
   bb7ba:	4294      	cmp	r4, r2
   bb7bc:	bf28      	it	cs
   bb7be:	4614      	movcs	r4, r2
   bb7c0:	4419      	add	r1, r3
   bb7c2:	4622      	mov	r2, r4
   bb7c4:	4630      	mov	r0, r6
   bb7c6:	f002 fc24 	bl	be012 <strncpy>
	buf[n] = 0;
   bb7ca:	2300      	movs	r3, #0
   bb7cc:	5533      	strb	r3, [r6, r4]
   bb7ce:	e7f0      	b.n	bb7b2 <_ZNK6String8getBytesEPhjj+0x12>

000bb7d0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bb7d0:	b40e      	push	{r1, r2, r3}
   bb7d2:	b570      	push	{r4, r5, r6, lr}
   bb7d4:	b087      	sub	sp, #28
   bb7d6:	ad0b      	add	r5, sp, #44	; 0x2c
   bb7d8:	4604      	mov	r4, r0
   bb7da:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb7de:	9201      	str	r2, [sp, #4]
   bb7e0:	462b      	mov	r3, r5
   bb7e2:	2105      	movs	r1, #5
   bb7e4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bb7e6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb7e8:	f7fd ff10 	bl	b960c <vsnprintf>
    va_end(marker);

    String result;
   bb7ec:	490b      	ldr	r1, [pc, #44]	; (bb81c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb7ee:	4606      	mov	r6, r0
    String result;
   bb7f0:	4620      	mov	r0, r4
   bb7f2:	f7ff ff70 	bl	bb6d6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bb7f6:	4631      	mov	r1, r6
   bb7f8:	4620      	mov	r0, r4
   bb7fa:	f7ff ff3f 	bl	bb67c <_ZN6String7reserveEj>
    if (result.buffer) {
   bb7fe:	6820      	ldr	r0, [r4, #0]
   bb800:	b130      	cbz	r0, bb810 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb802:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bb804:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb806:	462b      	mov	r3, r5
   bb808:	1c71      	adds	r1, r6, #1
   bb80a:	f7fd feff 	bl	b960c <vsnprintf>
        va_end(marker);
        result.len = n;
   bb80e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bb810:	4620      	mov	r0, r4
   bb812:	b007      	add	sp, #28
   bb814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb818:	b003      	add	sp, #12
   bb81a:	4770      	bx	lr
   bb81c:	000bf671 	.word	0x000bf671

000bb820 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bb820:	b510      	push	{r4, lr}
   bb822:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bb824:	6800      	ldr	r0, [r0, #0]
   bb826:	b118      	cbz	r0, bb830 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bb828:	f7fd fed0 	bl	b95cc <free>
            wakeupSource_ = nullptr;
   bb82c:	2300      	movs	r3, #0
   bb82e:	6023      	str	r3, [r4, #0]
        }
    }
   bb830:	bd10      	pop	{r4, pc}

000bb832 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bb832:	b538      	push	{r3, r4, r5, lr}
   bb834:	460c      	mov	r4, r1
   bb836:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb838:	f7ff fff2 	bl	bb820 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bb83c:	b154      	cbz	r4, bb854 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bb83e:	8820      	ldrh	r0, [r4, #0]
   bb840:	f7fd febc 	bl	b95bc <malloc>
   bb844:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bb846:	b128      	cbz	r0, bb854 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bb848:	8822      	ldrh	r2, [r4, #0]
   bb84a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bb84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bb850:	f002 bafe 	b.w	bde50 <memcpy>
    }
   bb854:	bd38      	pop	{r3, r4, r5, pc}

000bb856 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb856:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bb858:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bb85c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bb85e:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bb862:	f8c0 3006 	str.w	r3, [r0, #6]
   bb866:	894b      	ldrh	r3, [r1, #10]
   bb868:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb86a:	460c      	mov	r4, r1
   bb86c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb86e:	f7ff ffd7 	bl	bb820 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bb872:	6823      	ldr	r3, [r4, #0]
   bb874:	b113      	cbz	r3, bb87c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bb876:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bb878:	2300      	movs	r3, #0
   bb87a:	6023      	str	r3, [r4, #0]
    }
   bb87c:	bd38      	pop	{r3, r4, r5, pc}

000bb87e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bb87e:	b507      	push	{r0, r1, r2, lr}
   bb880:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb882:	2100      	movs	r1, #0
{
   bb884:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb886:	9100      	str	r1, [sp, #0]
   bb888:	2001      	movs	r0, #1
   bb88a:	218c      	movs	r1, #140	; 0x8c
   bb88c:	f7fd fdec 	bl	b9468 <system_reset>
}
   bb890:	b003      	add	sp, #12
   bb892:	f85d fb04 	ldr.w	pc, [sp], #4

000bb896 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bb896:	4601      	mov	r1, r0
    reset(0, flags);
   bb898:	2000      	movs	r0, #0
   bb89a:	f7ff bff0 	b.w	bb87e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bb89e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bb89e:	2000      	movs	r0, #0
   bb8a0:	f7ff bff9 	b.w	bb896 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bb8a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bb8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb8a6:	4d2b      	ldr	r5, [pc, #172]	; (bb954 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bb8a8:	7d0b      	ldrb	r3, [r1, #20]
   bb8aa:	4604      	mov	r4, r0
   bb8ac:	b08b      	sub	sp, #44	; 0x2c
   bb8ae:	4608      	mov	r0, r1
   bb8b0:	1daf      	adds	r7, r5, #6
   bb8b2:	2b00      	cmp	r3, #0
   bb8b4:	d036      	beq.n	bb924 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bb8b6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bb8b8:	791b      	ldrb	r3, [r3, #4]
   bb8ba:	2b00      	cmp	r3, #0
   bb8bc:	d032      	beq.n	bb924 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bb8be:	4b26      	ldr	r3, [pc, #152]	; (bb958 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bb8c0:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bb8c2:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bb8c4:	a902      	add	r1, sp, #8
   bb8c6:	3004      	adds	r0, #4
   bb8c8:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bb8cc:	f7fd fdc2 	bl	b9454 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bb8d0:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bb8d4:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bb8d8:	b200      	sxth	r0, r0
   bb8da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bb8de:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bb8e2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bb8e4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bb8e6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb8e8:	4628      	mov	r0, r5
   bb8ea:	f7ff ffa2 	bl	bb832 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bb8ee:	a802      	add	r0, sp, #8
   bb8f0:	f7ff ff96 	bl	bb820 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bb8f4:	2300      	movs	r3, #0
   bb8f6:	6023      	str	r3, [r4, #0]
   bb8f8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bb8fa:	71a3      	strb	r3, [r4, #6]
   bb8fc:	8123      	strh	r3, [r4, #8]
   bb8fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bb902:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bb904:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bb908:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bb90a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bb90e:	f8c4 3006 	str.w	r3, [r4, #6]
   bb912:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb914:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bb916:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bb918:	4620      	mov	r0, r4
   bb91a:	f7ff ff8a 	bl	bb832 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bb91e:	4620      	mov	r0, r4
   bb920:	b00b      	add	sp, #44	; 0x2c
   bb922:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bb924:	2600      	movs	r6, #0
   bb926:	2320      	movs	r3, #32
   bb928:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bb92c:	4b0b      	ldr	r3, [pc, #44]	; (bb95c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bb92e:	9300      	str	r3, [sp, #0]
   bb930:	aa02      	add	r2, sp, #8
   bb932:	4633      	mov	r3, r6
   bb934:	490a      	ldr	r1, [pc, #40]	; (bb960 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bb936:	2032      	movs	r0, #50	; 0x32
   bb938:	f7fd fcea 	bl	b9310 <log_message>
            : wakeupSource_(nullptr),
   bb93c:	4b06      	ldr	r3, [pc, #24]	; (bb958 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bb93e:	4805      	ldr	r0, [pc, #20]	; (bb954 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bb940:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bb942:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bb946:	a902      	add	r1, sp, #8
   bb948:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bb94c:	f7ff ff83 	bl	bb856 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bb950:	e7cd      	b.n	bb8ee <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bb952:	bf00      	nop
   bb954:	2003e69c 	.word	0x2003e69c
   bb958:	ffff0000 	.word	0xffff0000
   bb95c:	000bf753 	.word	0x000bf753
   bb960:	000bf74c 	.word	0x000bf74c

000bb964 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bb964:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bb966:	2420      	movs	r4, #32
{
   bb968:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bb96a:	4622      	mov	r2, r4
   bb96c:	2100      	movs	r1, #0
   bb96e:	4668      	mov	r0, sp
   bb970:	f002 fa96 	bl	bdea0 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bb974:	2100      	movs	r1, #0
   bb976:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bb978:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bb97c:	f7fd fad0 	bl	b8f20 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bb980:	9801      	ldr	r0, [sp, #4]
   bb982:	b008      	add	sp, #32
   bb984:	bd10      	pop	{r4, pc}
	...

000bb988 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb988:	4b05      	ldr	r3, [pc, #20]	; (bb9a0 <_GLOBAL__sub_I_System+0x18>)
   bb98a:	2202      	movs	r2, #2
   bb98c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bb98e:	4b05      	ldr	r3, [pc, #20]	; (bb9a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb990:	4a05      	ldr	r2, [pc, #20]	; (bb9a8 <_GLOBAL__sub_I_System+0x20>)
   bb992:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb994:	2000      	movs	r0, #0
   bb996:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb99a:	f7fd bd05 	b.w	b93a8 <set_system_mode>
   bb99e:	bf00      	nop
   bb9a0:	2003e6a8 	.word	0x2003e6a8
   bb9a4:	2003e69c 	.word	0x2003e69c
   bb9a8:	ffff0000 	.word	0xffff0000

000bb9ac <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb9b0:	4a15      	ldr	r2, [pc, #84]	; (bba08 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb9b2:	f8df 8060 	ldr.w	r8, [pc, #96]	; bba14 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb9b6:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb9ba:	1980      	adds	r0, r0, r6
   bb9bc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb9c0:	4b12      	ldr	r3, [pc, #72]	; (bba0c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb9c2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb9c6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb9ca:	1986      	adds	r6, r0, r6
   bb9cc:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb9d0:	42bb      	cmp	r3, r7
   bb9d2:	bf08      	it	eq
   bb9d4:	42b2      	cmpeq	r2, r6
{
   bb9d6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb9d8:	d013      	beq.n	bba02 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb9da:	a903      	add	r1, sp, #12
   bb9dc:	4668      	mov	r0, sp
   bb9de:	e9cd 6700 	strd	r6, r7, [sp]
   bb9e2:	f7fd fe43 	bl	b966c <localtime_r>
	calendar_time.tm_year += 1900;
   bb9e6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb9e8:	4d09      	ldr	r5, [pc, #36]	; (bba10 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb9ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb9ee:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb9f0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb9f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb9f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb9f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb9f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb9fa:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb9fe:	6823      	ldr	r3, [r4, #0]
   bba00:	602b      	str	r3, [r5, #0]
    }
}
   bba02:	b00c      	add	sp, #48	; 0x30
   bba04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bba08:	2003e6e0 	.word	0x2003e6e0
   bba0c:	2003e6d8 	.word	0x2003e6d8
   bba10:	2003e6b4 	.word	0x2003e6b4
   bba14:	2003e6e8 	.word	0x2003e6e8

000bba18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bba18:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bba1a:	2000      	movs	r0, #0
   bba1c:	f7fd fd4e 	bl	b94bc <spark_sync_time_pending>
   bba20:	b128      	cbz	r0, bba2e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bba22:	f7fd fd3b 	bl	b949c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bba26:	f080 0001 	eor.w	r0, r0, #1
   bba2a:	b2c0      	uxtb	r0, r0
    }
   bba2c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bba2e:	2001      	movs	r0, #1
   bba30:	e7fc      	b.n	bba2c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000bba32 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bba32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bba34:	4602      	mov	r2, r0
   bba36:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bba38:	4668      	mov	r0, sp
    struct timeval tv = {
   bba3a:	2100      	movs	r1, #0
    };
   bba3c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bba40:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bba44:	f7fd faac 	bl	b8fa0 <hal_rtc_set_time>
   bba48:	4602      	mov	r2, r0
   bba4a:	b910      	cbnz	r0, bba52 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bba4c:	4601      	mov	r1, r0
   bba4e:	f7fd fcd3 	bl	b93f8 <system_notify_time_changed>
    }
}
   bba52:	b005      	add	sp, #20
   bba54:	f85d fb04 	ldr.w	pc, [sp], #4

000bba58 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bba58:	b530      	push	{r4, r5, lr}
   bba5a:	b093      	sub	sp, #76	; 0x4c
   bba5c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bba60:	4b19      	ldr	r3, [pc, #100]	; (bbac8 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bba62:	4604      	mov	r4, r0
    t += time_zone_cache;
   bba64:	e9d3 1000 	ldrd	r1, r0, [r3]
   bba68:	9b01      	ldr	r3, [sp, #4]
   bba6a:	1852      	adds	r2, r2, r1
   bba6c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bba70:	4816      	ldr	r0, [pc, #88]	; (bbacc <_ZN9TimeClass7timeStrEx+0x74>)
   bba72:	e9d0 1000 	ldrd	r1, r0, [r0]
   bba76:	1852      	adds	r2, r2, r1
   bba78:	eb43 0300 	adc.w	r3, r3, r0
   bba7c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bba80:	2224      	movs	r2, #36	; 0x24
   bba82:	eb0d 0002 	add.w	r0, sp, r2
   bba86:	2100      	movs	r1, #0
   bba88:	f002 fa0a 	bl	bdea0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bba8c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bba8e:	a909      	add	r1, sp, #36	; 0x24
   bba90:	4668      	mov	r0, sp
   bba92:	f7fd fdeb 	bl	b966c <localtime_r>
    char ascstr[26] = {};
   bba96:	2216      	movs	r2, #22
   bba98:	4629      	mov	r1, r5
   bba9a:	a803      	add	r0, sp, #12
   bba9c:	9502      	str	r5, [sp, #8]
   bba9e:	f002 f9ff 	bl	bdea0 <memset>
    asctime_r(&calendar_time, ascstr);
   bbaa2:	a902      	add	r1, sp, #8
   bbaa4:	a809      	add	r0, sp, #36	; 0x24
   bbaa6:	f002 f981 	bl	bddac <asctime_r>
    int len = strlen(ascstr);
   bbaaa:	a802      	add	r0, sp, #8
   bbaac:	f002 fa95 	bl	bdfda <strlen>
    ascstr[len-1] = 0; // remove final newline
   bbab0:	ab12      	add	r3, sp, #72	; 0x48
   bbab2:	4418      	add	r0, r3
    return String(ascstr);
   bbab4:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bbab6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bbaba:	4620      	mov	r0, r4
   bbabc:	f7ff fe0b 	bl	bb6d6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bbac0:	4620      	mov	r0, r4
   bbac2:	b013      	add	sp, #76	; 0x4c
   bbac4:	bd30      	pop	{r4, r5, pc}
   bbac6:	bf00      	nop
   bbac8:	2003e6e0 	.word	0x2003e6e0
   bbacc:	2003e6d8 	.word	0x2003e6d8

000bbad0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bbad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbad4:	b0a4      	sub	sp, #144	; 0x90
   bbad6:	4607      	mov	r7, r0
   bbad8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bbada:	a814      	add	r0, sp, #80	; 0x50
{
   bbadc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bbade:	223f      	movs	r2, #63	; 0x3f
{
   bbae0:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bbae2:	f002 fa96 	bl	be012 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bbae6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bbae8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bbaea:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bbaee:	f002 fa74 	bl	bdfda <strlen>
   bbaf2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bbaf4:	bb4c      	cbnz	r4, bbb4a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bbaf6:	4929      	ldr	r1, [pc, #164]	; (bbb9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bbaf8:	a803      	add	r0, sp, #12
   bbafa:	f002 fa66 	bl	bdfca <strcpy>
   bbafe:	ac14      	add	r4, sp, #80	; 0x50
{
   bbb00:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bbb02:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bbb06:	45b1      	cmp	r9, r6
   bbb08:	d934      	bls.n	bbb74 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bbb0a:	7823      	ldrb	r3, [r4, #0]
   bbb0c:	2b25      	cmp	r3, #37	; 0x25
   bbb0e:	f106 0a01 	add.w	sl, r6, #1
   bbb12:	d117      	bne.n	bbb44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bbb14:	7863      	ldrb	r3, [r4, #1]
   bbb16:	2b7a      	cmp	r3, #122	; 0x7a
   bbb18:	d114      	bne.n	bbb44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bbb1a:	a803      	add	r0, sp, #12
   bbb1c:	f002 fa5d 	bl	bdfda <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bbb20:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bbb22:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bbb24:	1830      	adds	r0, r6, r0
   bbb26:	4418      	add	r0, r3
   bbb28:	eba9 0206 	sub.w	r2, r9, r6
   bbb2c:	1ca1      	adds	r1, r4, #2
   bbb2e:	f002 f98f 	bl	bde50 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bbb32:	462a      	mov	r2, r5
   bbb34:	a903      	add	r1, sp, #12
   bbb36:	4620      	mov	r0, r4
   bbb38:	f002 f98a 	bl	bde50 <memcpy>
            len = strlen(format_str);
   bbb3c:	a814      	add	r0, sp, #80	; 0x50
   bbb3e:	f002 fa4c 	bl	bdfda <strlen>
   bbb42:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bbb44:	3401      	adds	r4, #1
   bbb46:	4656      	mov	r6, sl
   bbb48:	e7db      	b.n	bbb02 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bbb4a:	233c      	movs	r3, #60	; 0x3c
   bbb4c:	fb94 f2f3 	sdiv	r2, r4, r3
   bbb50:	2a00      	cmp	r2, #0
   bbb52:	bfb8      	it	lt
   bbb54:	4252      	neglt	r2, r2
   bbb56:	fbb2 f1f3 	udiv	r1, r2, r3
   bbb5a:	fb03 2211 	mls	r2, r3, r1, r2
   bbb5e:	9200      	str	r2, [sp, #0]
   bbb60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bbb64:	4a0e      	ldr	r2, [pc, #56]	; (bbba0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bbb66:	fb94 f3f3 	sdiv	r3, r4, r3
   bbb6a:	2110      	movs	r1, #16
   bbb6c:	a803      	add	r0, sp, #12
   bbb6e:	f7fd fd45 	bl	b95fc <snprintf>
   bbb72:	e7c4      	b.n	bbafe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bbb74:	2100      	movs	r1, #0
   bbb76:	222e      	movs	r2, #46	; 0x2e
   bbb78:	a808      	add	r0, sp, #32
   bbb7a:	9107      	str	r1, [sp, #28]
   bbb7c:	f002 f990 	bl	bdea0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bbb80:	4643      	mov	r3, r8
   bbb82:	aa14      	add	r2, sp, #80	; 0x50
   bbb84:	2132      	movs	r1, #50	; 0x32
   bbb86:	a807      	add	r0, sp, #28
   bbb88:	f7fd fd68 	bl	b965c <strftime>
    return String(buf);
   bbb8c:	a907      	add	r1, sp, #28
   bbb8e:	4638      	mov	r0, r7
   bbb90:	f7ff fda1 	bl	bb6d6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bbb94:	4638      	mov	r0, r7
   bbb96:	b024      	add	sp, #144	; 0x90
   bbb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbb9c:	000bf77a 	.word	0x000bf77a
   bbba0:	000bf77c 	.word	0x000bf77c

000bbba4 <_ZN9TimeClass6formatExPKc>:
{
   bbba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbba6:	b08d      	sub	sp, #52	; 0x34
   bbba8:	e9cd 2300 	strd	r2, r3, [sp]
   bbbac:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bbbae:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bbbb0:	b915      	cbnz	r5, bbbb8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bbbb2:	4b19      	ldr	r3, [pc, #100]	; (bbc18 <_ZN9TimeClass6formatExPKc+0x74>)
   bbbb4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bbbb6:	b12d      	cbz	r5, bbbc4 <_ZN9TimeClass6formatExPKc+0x20>
   bbbb8:	4b18      	ldr	r3, [pc, #96]	; (bbc1c <_ZN9TimeClass6formatExPKc+0x78>)
   bbbba:	4628      	mov	r0, r5
   bbbbc:	6819      	ldr	r1, [r3, #0]
   bbbbe:	f002 f9fa 	bl	bdfb6 <strcmp>
   bbbc2:	b938      	cbnz	r0, bbbd4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bbbc4:	e9dd 2300 	ldrd	r2, r3, [sp]
   bbbc8:	4620      	mov	r0, r4
   bbbca:	f7ff ff45 	bl	bba58 <_ZN9TimeClass7timeStrEx>
}
   bbbce:	4620      	mov	r0, r4
   bbbd0:	b00d      	add	sp, #52	; 0x34
   bbbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bbbd4:	4e12      	ldr	r6, [pc, #72]	; (bbc20 <_ZN9TimeClass6formatExPKc+0x7c>)
   bbbd6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bbbd8:	4f12      	ldr	r7, [pc, #72]	; (bbc24 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bbbda:	e9d6 3200 	ldrd	r3, r2, [r6]
   bbbde:	185b      	adds	r3, r3, r1
   bbbe0:	9901      	ldr	r1, [sp, #4]
   bbbe2:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bbbe6:	e9d7 0100 	ldrd	r0, r1, [r7]
   bbbea:	181b      	adds	r3, r3, r0
   bbbec:	eb42 0201 	adc.w	r2, r2, r1
   bbbf0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bbbf4:	2100      	movs	r1, #0
   bbbf6:	2224      	movs	r2, #36	; 0x24
   bbbf8:	a803      	add	r0, sp, #12
   bbbfa:	f002 f951 	bl	bdea0 <memset>
    localtime_r(&t, &calendar_time);
   bbbfe:	a903      	add	r1, sp, #12
   bbc00:	4668      	mov	r0, sp
   bbc02:	f7fd fd33 	bl	b966c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bbc06:	6832      	ldr	r2, [r6, #0]
   bbc08:	683b      	ldr	r3, [r7, #0]
   bbc0a:	a903      	add	r1, sp, #12
   bbc0c:	4413      	add	r3, r2
   bbc0e:	4620      	mov	r0, r4
   bbc10:	462a      	mov	r2, r5
   bbc12:	f7ff ff5d 	bl	bbad0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bbc16:	e7da      	b.n	bbbce <_ZN9TimeClass6formatExPKc+0x2a>
   bbc18:	2003e6b0 	.word	0x2003e6b0
   bbc1c:	2003e018 	.word	0x2003e018
   bbc20:	2003e6e0 	.word	0x2003e6e0
   bbc24:	2003e6d8 	.word	0x2003e6d8

000bbc28 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bbc28:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bbc2a:	2000      	movs	r0, #0
   bbc2c:	f7fd f9a0 	bl	b8f70 <hal_rtc_time_is_valid>
    if (rtcstate)
   bbc30:	4604      	mov	r4, r0
   bbc32:	b9a0      	cbnz	r0, bbc5e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bbc34:	f7fd fbb0 	bl	b9398 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bbc38:	2801      	cmp	r0, #1
   bbc3a:	d110      	bne.n	bbc5e <_ZN9TimeClass7isValidEv+0x36>
   bbc3c:	4620      	mov	r0, r4
   bbc3e:	f7fd fbd3 	bl	b93e8 <system_thread_get_state>
   bbc42:	b960      	cbnz	r0, bbc5e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bbc44:	f7ff fee8 	bl	bba18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bbc48:	b910      	cbnz	r0, bbc50 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bbc4a:	f7fd fc17 	bl	b947c <spark_process>
        while (_while() && !_condition()) {
   bbc4e:	e7f9      	b.n	bbc44 <_ZN9TimeClass7isValidEv+0x1c>
   bbc50:	f7ff fee2 	bl	bba18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bbc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bbc58:	2000      	movs	r0, #0
   bbc5a:	f7fd b989 	b.w	b8f70 <hal_rtc_time_is_valid>
}
   bbc5e:	4620      	mov	r0, r4
   bbc60:	bd10      	pop	{r4, pc}

000bbc62 <_ZN9TimeClass3nowEv>:
{
   bbc62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bbc64:	f7ff ffe0 	bl	bbc28 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bbc68:	2210      	movs	r2, #16
   bbc6a:	2100      	movs	r1, #0
   bbc6c:	4668      	mov	r0, sp
   bbc6e:	f002 f917 	bl	bdea0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bbc72:	2100      	movs	r1, #0
   bbc74:	4668      	mov	r0, sp
   bbc76:	f7fd f98b 	bl	b8f90 <hal_rtc_get_time>
}
   bbc7a:	9800      	ldr	r0, [sp, #0]
   bbc7c:	b005      	add	sp, #20
   bbc7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbc84 <_ZN9TimeClass4hourEv>:
{
   bbc84:	b508      	push	{r3, lr}
	return hour(now());
   bbc86:	f7ff ffec 	bl	bbc62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbc8a:	17c1      	asrs	r1, r0, #31
   bbc8c:	f7ff fe8e 	bl	bb9ac <_ZL22Refresh_UnixTime_Cachex>
}
   bbc90:	4b01      	ldr	r3, [pc, #4]	; (bbc98 <_ZN9TimeClass4hourEv+0x14>)
   bbc92:	6898      	ldr	r0, [r3, #8]
   bbc94:	bd08      	pop	{r3, pc}
   bbc96:	bf00      	nop
   bbc98:	2003e6b4 	.word	0x2003e6b4

000bbc9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bbc9c:	4b02      	ldr	r3, [pc, #8]	; (bbca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bbc9e:	681a      	ldr	r2, [r3, #0]
   bbca0:	4b02      	ldr	r3, [pc, #8]	; (bbcac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bbca2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bbca4:	4770      	bx	lr
   bbca6:	bf00      	nop
   bbca8:	2003e018 	.word	0x2003e018
   bbcac:	2003e6b0 	.word	0x2003e6b0

000bbcb0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bbcb0:	4770      	bx	lr

000bbcb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bbcb2:	7441      	strb	r1, [r0, #17]
}
   bbcb4:	4770      	bx	lr

000bbcb6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bbcb6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bbcb8:	7c00      	ldrb	r0, [r0, #16]
   bbcba:	f7fd fac1 	bl	b9240 <hal_usart_available_data_for_write>
}
   bbcbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbcc2:	bd08      	pop	{r3, pc}

000bbcc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bbcc4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bbcc6:	7c00      	ldrb	r0, [r0, #16]
   bbcc8:	f7fd fa92 	bl	b91f0 <hal_usart_available>
}
   bbccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbcd0:	bd08      	pop	{r3, pc}

000bbcd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bbcd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bbcd4:	7c00      	ldrb	r0, [r0, #16]
   bbcd6:	f7fd fa9b 	bl	b9210 <hal_usart_peek>
}
   bbcda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbcde:	bd08      	pop	{r3, pc}

000bbce0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bbce0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bbce2:	7c00      	ldrb	r0, [r0, #16]
   bbce4:	f7fd fa8c 	bl	b9200 <hal_usart_read>
}
   bbce8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbcec:	bd08      	pop	{r3, pc}

000bbcee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bbcee:	7c00      	ldrb	r0, [r0, #16]
   bbcf0:	f7fd ba96 	b.w	b9220 <hal_usart_flush>

000bbcf4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bbcf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bbcf6:	7c45      	ldrb	r5, [r0, #17]
{
   bbcf8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bbcfa:	b12d      	cbz	r5, bbd08 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bbcfc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bbcfe:	b003      	add	sp, #12
   bbd00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bbd04:	f7fd ba6c 	b.w	b91e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bbd08:	7c00      	ldrb	r0, [r0, #16]
   bbd0a:	9101      	str	r1, [sp, #4]
   bbd0c:	f7fd fa98 	bl	b9240 <hal_usart_available_data_for_write>
   bbd10:	2800      	cmp	r0, #0
   bbd12:	9901      	ldr	r1, [sp, #4]
   bbd14:	dcf2      	bgt.n	bbcfc <_ZN11USARTSerial5writeEh+0x8>
}
   bbd16:	4628      	mov	r0, r5
   bbd18:	b003      	add	sp, #12
   bbd1a:	bd30      	pop	{r4, r5, pc}

000bbd1c <_ZN11USARTSerialD0Ev>:
   bbd1c:	b510      	push	{r4, lr}
   bbd1e:	2114      	movs	r1, #20
   bbd20:	4604      	mov	r4, r0
   bbd22:	f7f8 f9bc 	bl	b409e <_ZdlPvj>
   bbd26:	4620      	mov	r0, r4
   bbd28:	bd10      	pop	{r4, pc}
	...

000bbd2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bbd2c:	b510      	push	{r4, lr}
   bbd2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbd32:	4604      	mov	r4, r0
   bbd34:	4608      	mov	r0, r1
   bbd36:	4611      	mov	r1, r2
   bbd38:	2200      	movs	r2, #0
   bbd3a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bbd3e:	4b04      	ldr	r3, [pc, #16]	; (bbd50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bbd40:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bbd42:	2301      	movs	r3, #1
  _serial = serial;
   bbd44:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bbd46:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bbd48:	f7fd fa8a 	bl	b9260 <hal_usart_init_ex>
}
   bbd4c:	4620      	mov	r0, r4
   bbd4e:	bd10      	pop	{r4, pc}
   bbd50:	000bf7ac 	.word	0x000bf7ac

000bbd54 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bbd54:	7c00      	ldrb	r0, [r0, #16]
   bbd56:	2300      	movs	r3, #0
   bbd58:	f7fd ba7a 	b.w	b9250 <hal_usart_begin_config>

000bbd5c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bbd5c:	2200      	movs	r2, #0
   bbd5e:	f7ff bff9 	b.w	bbd54 <_ZN11USARTSerial5beginEmm>

000bbd62 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bbd62:	7c00      	ldrb	r0, [r0, #16]
   bbd64:	f7fd ba34 	b.w	b91d0 <hal_usart_end>

000bbd68 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bbd68:	7441      	strb	r1, [r0, #17]
}
   bbd6a:	4770      	bx	lr

000bbd6c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbd6c:	4770      	bx	lr

000bbd6e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bbd6e:	4770      	bx	lr

000bbd70 <_ZN9USBSerial4readEv>:
{
   bbd70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bbd72:	2100      	movs	r1, #0
   bbd74:	7c00      	ldrb	r0, [r0, #16]
   bbd76:	f7fd faa3 	bl	b92c0 <HAL_USB_USART_Receive_Data>
}
   bbd7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbd7e:	bd08      	pop	{r3, pc}

000bbd80 <_ZN9USBSerial4peekEv>:
{
   bbd80:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bbd82:	2101      	movs	r1, #1
   bbd84:	7c00      	ldrb	r0, [r0, #16]
   bbd86:	f7fd fa9b 	bl	b92c0 <HAL_USB_USART_Receive_Data>
}
   bbd8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbd8e:	bd08      	pop	{r3, pc}

000bbd90 <_ZN9USBSerial17availableForWriteEv>:
{
   bbd90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bbd92:	7c00      	ldrb	r0, [r0, #16]
   bbd94:	f7fd fa8c 	bl	b92b0 <HAL_USB_USART_Available_Data_For_Write>
}
   bbd98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbd9c:	bd08      	pop	{r3, pc}

000bbd9e <_ZN9USBSerial9availableEv>:
{
   bbd9e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bbda0:	7c00      	ldrb	r0, [r0, #16]
   bbda2:	f7fd fa7d 	bl	b92a0 <HAL_USB_USART_Available_Data>
}
   bbda6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbdaa:	bd08      	pop	{r3, pc}

000bbdac <_ZN9USBSerial5writeEh>:
{
   bbdac:	b513      	push	{r0, r1, r4, lr}
   bbdae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bbdb0:	7c00      	ldrb	r0, [r0, #16]
{
   bbdb2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bbdb4:	f7fd fa7c 	bl	b92b0 <HAL_USB_USART_Available_Data_For_Write>
   bbdb8:	2800      	cmp	r0, #0
   bbdba:	9901      	ldr	r1, [sp, #4]
   bbdbc:	dc01      	bgt.n	bbdc2 <_ZN9USBSerial5writeEh+0x16>
   bbdbe:	7c60      	ldrb	r0, [r4, #17]
   bbdc0:	b120      	cbz	r0, bbdcc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bbdc2:	7c20      	ldrb	r0, [r4, #16]
   bbdc4:	f7fd fa84 	bl	b92d0 <HAL_USB_USART_Send_Data>
   bbdc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bbdcc:	b002      	add	sp, #8
   bbdce:	bd10      	pop	{r4, pc}

000bbdd0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bbdd0:	7c00      	ldrb	r0, [r0, #16]
   bbdd2:	f7fd ba85 	b.w	b92e0 <HAL_USB_USART_Flush_Data>

000bbdd6 <_ZN9USBSerialD0Ev>:
   bbdd6:	b510      	push	{r4, lr}
   bbdd8:	2114      	movs	r1, #20
   bbdda:	4604      	mov	r4, r0
   bbddc:	f7f8 f95f 	bl	b409e <_ZdlPvj>
   bbde0:	4620      	mov	r0, r4
   bbde2:	bd10      	pop	{r4, pc}

000bbde4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bbde4:	b510      	push	{r4, lr}
   bbde6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbdea:	4604      	mov	r4, r0
   bbdec:	4608      	mov	r0, r1
   bbdee:	2100      	movs	r1, #0
   bbdf0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bbdf4:	4b04      	ldr	r3, [pc, #16]	; (bbe08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bbdf6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bbdf8:	2301      	movs	r3, #1
  _serial = serial;
   bbdfa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bbdfc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bbdfe:	4611      	mov	r1, r2
   bbe00:	f7fd fa36 	bl	b9270 <HAL_USB_USART_Init>
}
   bbe04:	4620      	mov	r0, r4
   bbe06:	bd10      	pop	{r4, pc}
   bbe08:	000bf7dc 	.word	0x000bf7dc

000bbe0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bbe0c:	7c00      	ldrb	r0, [r0, #16]
   bbe0e:	2200      	movs	r2, #0
   bbe10:	f7fd ba36 	b.w	b9280 <HAL_USB_USART_Begin>

000bbe14 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bbe14:	7c00      	ldrb	r0, [r0, #16]
   bbe16:	f7fd ba3b 	b.w	b9290 <HAL_USB_USART_End>

000bbe1a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bbe1a:	7c00      	ldrb	r0, [r0, #16]
   bbe1c:	f7fd ba68 	b.w	b92f0 <HAL_USB_USART_Is_Connected>

000bbe20 <_Z19acquireSerialBufferv>:
{
   bbe20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bbe22:	2214      	movs	r2, #20
{
   bbe24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bbe26:	2100      	movs	r1, #0
   bbe28:	f002 f83a 	bl	bdea0 <memset>
}
   bbe2c:	4620      	mov	r0, r4
   bbe2e:	bd10      	pop	{r4, pc}

000bbe30 <_Z16_fetch_usbserialv>:
{
   bbe30:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbe32:	4c0f      	ldr	r4, [pc, #60]	; (bbe70 <_Z16_fetch_usbserialv+0x40>)
{
   bbe34:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bbe36:	a803      	add	r0, sp, #12
   bbe38:	f7ff fff2 	bl	bbe20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbe3c:	7821      	ldrb	r1, [r4, #0]
   bbe3e:	f3bf 8f5b 	dmb	ish
   bbe42:	f011 0101 	ands.w	r1, r1, #1
   bbe46:	d10f      	bne.n	bbe68 <_Z16_fetch_usbserialv+0x38>
   bbe48:	4620      	mov	r0, r4
   bbe4a:	9101      	str	r1, [sp, #4]
   bbe4c:	f7f8 f936 	bl	b40bc <__cxa_guard_acquire>
   bbe50:	9901      	ldr	r1, [sp, #4]
   bbe52:	b148      	cbz	r0, bbe68 <_Z16_fetch_usbserialv+0x38>
   bbe54:	aa03      	add	r2, sp, #12
   bbe56:	4807      	ldr	r0, [pc, #28]	; (bbe74 <_Z16_fetch_usbserialv+0x44>)
   bbe58:	f7ff ffc4 	bl	bbde4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bbe5c:	4620      	mov	r0, r4
   bbe5e:	f7f8 f932 	bl	b40c6 <__cxa_guard_release>
   bbe62:	4805      	ldr	r0, [pc, #20]	; (bbe78 <_Z16_fetch_usbserialv+0x48>)
   bbe64:	f001 ffc8 	bl	bddf8 <atexit>
	return _usbserial;
}
   bbe68:	4802      	ldr	r0, [pc, #8]	; (bbe74 <_Z16_fetch_usbserialv+0x44>)
   bbe6a:	b008      	add	sp, #32
   bbe6c:	bd10      	pop	{r4, pc}
   bbe6e:	bf00      	nop
   bbe70:	2003e6f0 	.word	0x2003e6f0
   bbe74:	2003e6f4 	.word	0x2003e6f4
   bbe78:	000bbd6d 	.word	0x000bbd6d

000bbe7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bbe7c:	4b01      	ldr	r3, [pc, #4]	; (bbe84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bbe7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bbe80:	4770      	bx	lr
   bbe82:	bf00      	nop
   bbe84:	2003e020 	.word	0x2003e020

000bbe88 <serialEventRun>:
{
   bbe88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bbe8a:	4b0b      	ldr	r3, [pc, #44]	; (bbeb8 <serialEventRun+0x30>)
   bbe8c:	b143      	cbz	r3, bbea0 <serialEventRun+0x18>
   bbe8e:	f7ff ffcf 	bl	bbe30 <_Z16_fetch_usbserialv>
   bbe92:	6803      	ldr	r3, [r0, #0]
   bbe94:	691b      	ldr	r3, [r3, #16]
   bbe96:	4798      	blx	r3
   bbe98:	2800      	cmp	r0, #0
   bbe9a:	dd01      	ble.n	bbea0 <serialEventRun+0x18>
        serialEvent();
   bbe9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bbea0:	4b06      	ldr	r3, [pc, #24]	; (bbebc <serialEventRun+0x34>)
   bbea2:	b143      	cbz	r3, bbeb6 <serialEventRun+0x2e>
   bbea4:	f000 f9ca 	bl	bc23c <_Z22__fetch_global_Serial1v>
   bbea8:	6803      	ldr	r3, [r0, #0]
   bbeaa:	691b      	ldr	r3, [r3, #16]
   bbeac:	4798      	blx	r3
   bbeae:	2800      	cmp	r0, #0
   bbeb0:	dd01      	ble.n	bbeb6 <serialEventRun+0x2e>
        serialEvent1();
   bbeb2:	f3af 8000 	nop.w
}
   bbeb6:	bd08      	pop	{r3, pc}
	...

000bbec0 <_post_loop>:
{
   bbec0:	b508      	push	{r3, lr}
	serialEventRun();
   bbec2:	f7ff ffe1 	bl	bbe88 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bbec6:	f7fd f84b 	bl	b8f60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bbeca:	4b01      	ldr	r3, [pc, #4]	; (bbed0 <_post_loop+0x10>)
   bbecc:	6018      	str	r0, [r3, #0]
}
   bbece:	bd08      	pop	{r3, pc}
   bbed0:	2003e710 	.word	0x2003e710

000bbed4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbed4:	4805      	ldr	r0, [pc, #20]	; (bbeec <_Z33system_initialize_user_backup_ramv+0x18>)
   bbed6:	4a06      	ldr	r2, [pc, #24]	; (bbef0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bbed8:	4906      	ldr	r1, [pc, #24]	; (bbef4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bbeda:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbedc:	1a12      	subs	r2, r2, r0
   bbede:	f001 ffb7 	bl	bde50 <memcpy>
    __backup_sram_signature = signature;
   bbee2:	4b05      	ldr	r3, [pc, #20]	; (bbef8 <_Z33system_initialize_user_backup_ramv+0x24>)
   bbee4:	4a05      	ldr	r2, [pc, #20]	; (bbefc <_Z33system_initialize_user_backup_ramv+0x28>)
   bbee6:	601a      	str	r2, [r3, #0]
}
   bbee8:	bd08      	pop	{r3, pc}
   bbeea:	bf00      	nop
   bbeec:	2003f400 	.word	0x2003f400
   bbef0:	2003f404 	.word	0x2003f404
   bbef4:	000bfaa4 	.word	0x000bfaa4
   bbef8:	2003f400 	.word	0x2003f400
   bbefc:	9a271c1e 	.word	0x9a271c1e

000bbf00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bbf00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbf02:	2300      	movs	r3, #0
   bbf04:	9300      	str	r3, [sp, #0]
   bbf06:	461a      	mov	r2, r3
   bbf08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbf0c:	f7fd fa8e 	bl	b942c <system_ctrl_set_result>
}
   bbf10:	b003      	add	sp, #12
   bbf12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbf18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bbf18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bbf1a:	8843      	ldrh	r3, [r0, #2]
   bbf1c:	2b0a      	cmp	r3, #10
   bbf1e:	d008      	beq.n	bbf32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bbf20:	2b50      	cmp	r3, #80	; 0x50
   bbf22:	d10b      	bne.n	bbf3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bbf24:	4b09      	ldr	r3, [pc, #36]	; (bbf4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bbf26:	681b      	ldr	r3, [r3, #0]
   bbf28:	b14b      	cbz	r3, bbf3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bbf2a:	b003      	add	sp, #12
   bbf2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bbf30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bbf32:	f7ff ffe5 	bl	bbf00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bbf36:	b003      	add	sp, #12
   bbf38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbf3c:	2300      	movs	r3, #0
   bbf3e:	9300      	str	r3, [sp, #0]
   bbf40:	461a      	mov	r2, r3
   bbf42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbf46:	f7fd fa71 	bl	b942c <system_ctrl_set_result>
}
   bbf4a:	e7f4      	b.n	bbf36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bbf4c:	2003e70c 	.word	0x2003e70c

000bbf50 <module_user_init_hook>:
{
   bbf50:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bbf52:	4812      	ldr	r0, [pc, #72]	; (bbf9c <module_user_init_hook+0x4c>)
   bbf54:	2100      	movs	r1, #0
   bbf56:	f7fd fb79 	bl	b964c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbf5a:	4b11      	ldr	r3, [pc, #68]	; (bbfa0 <module_user_init_hook+0x50>)
   bbf5c:	681a      	ldr	r2, [r3, #0]
   bbf5e:	4b11      	ldr	r3, [pc, #68]	; (bbfa4 <module_user_init_hook+0x54>)
   bbf60:	429a      	cmp	r2, r3
   bbf62:	4b11      	ldr	r3, [pc, #68]	; (bbfa8 <module_user_init_hook+0x58>)
   bbf64:	bf0c      	ite	eq
   bbf66:	2201      	moveq	r2, #1
   bbf68:	2200      	movne	r2, #0
   bbf6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbf6c:	d001      	beq.n	bbf72 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbf6e:	f7ff ffb1 	bl	bbed4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbf72:	f7fc ffe5 	bl	b8f40 <HAL_RNG_GetRandomNumber>
   bbf76:	4604      	mov	r4, r0
    srand(seed);
   bbf78:	f001 ff9a 	bl	bdeb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbf7c:	4b0b      	ldr	r3, [pc, #44]	; (bbfac <module_user_init_hook+0x5c>)
   bbf7e:	b113      	cbz	r3, bbf86 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbf80:	4620      	mov	r0, r4
   bbf82:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbf86:	2100      	movs	r1, #0
   bbf88:	4808      	ldr	r0, [pc, #32]	; (bbfac <module_user_init_hook+0x5c>)
   bbf8a:	f7fd faa7 	bl	b94dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbf8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbf92:	4807      	ldr	r0, [pc, #28]	; (bbfb0 <module_user_init_hook+0x60>)
   bbf94:	2100      	movs	r1, #0
   bbf96:	f7fd ba3f 	b.w	b9418 <system_ctrl_set_app_request_handler>
   bbf9a:	bf00      	nop
   bbf9c:	000bbe7d 	.word	0x000bbe7d
   bbfa0:	2003f400 	.word	0x2003f400
   bbfa4:	9a271c1e 	.word	0x9a271c1e
   bbfa8:	2003e708 	.word	0x2003e708
   bbfac:	00000000 	.word	0x00000000
   bbfb0:	000bbf19 	.word	0x000bbf19

000bbfb4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bbfb4:	b508      	push	{r3, lr}
   bbfb6:	4b02      	ldr	r3, [pc, #8]	; (bbfc0 <spark_protocol_instance+0xc>)
   bbfb8:	681b      	ldr	r3, [r3, #0]
   bbfba:	681b      	ldr	r3, [r3, #0]
   bbfbc:	9301      	str	r3, [sp, #4]
   bbfbe:	bd08      	pop	{r3, pc}
   bbfc0:	0003025c 	.word	0x0003025c

000bbfc4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bbfc4:	b508      	push	{r3, lr}
   bbfc6:	4b02      	ldr	r3, [pc, #8]	; (bbfd0 <spark_protocol_set_product_id+0xc>)
   bbfc8:	681b      	ldr	r3, [r3, #0]
   bbfca:	685b      	ldr	r3, [r3, #4]
   bbfcc:	9301      	str	r3, [sp, #4]
   bbfce:	bd08      	pop	{r3, pc}
   bbfd0:	0003025c 	.word	0x0003025c

000bbfd4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bbfd4:	b508      	push	{r3, lr}
   bbfd6:	4b02      	ldr	r3, [pc, #8]	; (bbfe0 <spark_protocol_set_product_firmware_version+0xc>)
   bbfd8:	681b      	ldr	r3, [r3, #0]
   bbfda:	689b      	ldr	r3, [r3, #8]
   bbfdc:	9301      	str	r3, [sp, #4]
   bbfde:	bd08      	pop	{r3, pc}
   bbfe0:	0003025c 	.word	0x0003025c

000bbfe4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bbfe4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bbfe6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bbfe8:	d902      	bls.n	bbff0 <pinAvailable+0xc>
    return false;
   bbfea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bbfec:	b002      	add	sp, #8
   bbfee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bbff0:	f1a0 030b 	sub.w	r3, r0, #11
   bbff4:	2b02      	cmp	r3, #2
   bbff6:	d81a      	bhi.n	bc02e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bbff8:	4c17      	ldr	r4, [pc, #92]	; (bc058 <pinAvailable+0x74>)
   bbffa:	7821      	ldrb	r1, [r4, #0]
   bbffc:	f3bf 8f5b 	dmb	ish
   bc000:	f011 0101 	ands.w	r1, r1, #1
   bc004:	d10b      	bne.n	bc01e <pinAvailable+0x3a>
   bc006:	4620      	mov	r0, r4
   bc008:	9101      	str	r1, [sp, #4]
   bc00a:	f7f8 f857 	bl	b40bc <__cxa_guard_acquire>
   bc00e:	9901      	ldr	r1, [sp, #4]
   bc010:	b128      	cbz	r0, bc01e <pinAvailable+0x3a>
   bc012:	4812      	ldr	r0, [pc, #72]	; (bc05c <pinAvailable+0x78>)
   bc014:	f7ff fa54 	bl	bb4c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bc018:	4620      	mov	r0, r4
   bc01a:	f7f8 f854 	bl	b40c6 <__cxa_guard_release>
   bc01e:	4b0f      	ldr	r3, [pc, #60]	; (bc05c <pinAvailable+0x78>)
   bc020:	7818      	ldrb	r0, [r3, #0]
   bc022:	f7fd f8ad 	bl	b9180 <hal_spi_is_enabled>
   bc026:	2800      	cmp	r0, #0
   bc028:	d1df      	bne.n	bbfea <pinAvailable+0x6>
  return true; // 'pin' is available
   bc02a:	2001      	movs	r0, #1
   bc02c:	e7de      	b.n	bbfec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bc02e:	2801      	cmp	r0, #1
   bc030:	d809      	bhi.n	bc046 <pinAvailable+0x62>
   bc032:	f000 f89f 	bl	bc174 <_Z19__fetch_global_Wirev>
   bc036:	2100      	movs	r1, #0
   bc038:	7c00      	ldrb	r0, [r0, #16]
   bc03a:	f7fd f841 	bl	b90c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bc03e:	f080 0001 	eor.w	r0, r0, #1
   bc042:	b2c0      	uxtb	r0, r0
   bc044:	e7d2      	b.n	bbfec <pinAvailable+0x8>
   bc046:	3809      	subs	r0, #9
   bc048:	2801      	cmp	r0, #1
   bc04a:	d8ee      	bhi.n	bc02a <pinAvailable+0x46>
   bc04c:	f000 f8f6 	bl	bc23c <_Z22__fetch_global_Serial1v>
   bc050:	7c00      	ldrb	r0, [r0, #16]
   bc052:	f7fd f8ed 	bl	b9230 <hal_usart_is_enabled>
   bc056:	e7f2      	b.n	bc03e <pinAvailable+0x5a>
   bc058:	2003e4e0 	.word	0x2003e4e0
   bc05c:	2003e4e4 	.word	0x2003e4e4

000bc060 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bc060:	2823      	cmp	r0, #35	; 0x23
{
   bc062:	b538      	push	{r3, r4, r5, lr}
   bc064:	4604      	mov	r4, r0
   bc066:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bc068:	d80a      	bhi.n	bc080 <pinMode+0x20>
   bc06a:	29ff      	cmp	r1, #255	; 0xff
   bc06c:	d008      	beq.n	bc080 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bc06e:	f7ff ffb9 	bl	bbfe4 <pinAvailable>
   bc072:	b128      	cbz	r0, bc080 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bc074:	4629      	mov	r1, r5
   bc076:	4620      	mov	r0, r4
}
   bc078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bc07c:	f7fc bfa8 	b.w	b8fd0 <HAL_Pin_Mode>
}
   bc080:	bd38      	pop	{r3, r4, r5, pc}

000bc082 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bc082:	b538      	push	{r3, r4, r5, lr}
   bc084:	4604      	mov	r4, r0
   bc086:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bc088:	f7fc ffaa 	bl	b8fe0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bc08c:	28ff      	cmp	r0, #255	; 0xff
   bc08e:	d010      	beq.n	bc0b2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bc090:	2806      	cmp	r0, #6
   bc092:	d804      	bhi.n	bc09e <digitalWrite+0x1c>
   bc094:	234d      	movs	r3, #77	; 0x4d
   bc096:	fa23 f000 	lsr.w	r0, r3, r0
   bc09a:	07c3      	lsls	r3, r0, #31
   bc09c:	d409      	bmi.n	bc0b2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bc09e:	4620      	mov	r0, r4
   bc0a0:	f7ff ffa0 	bl	bbfe4 <pinAvailable>
   bc0a4:	b128      	cbz	r0, bc0b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bc0a6:	4629      	mov	r1, r5
   bc0a8:	4620      	mov	r0, r4
}
   bc0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bc0ae:	f7fc bf9f 	b.w	b8ff0 <HAL_GPIO_Write>
}
   bc0b2:	bd38      	pop	{r3, r4, r5, pc}

000bc0b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bc0b4:	b510      	push	{r4, lr}
   bc0b6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bc0b8:	f7fc ff92 	bl	b8fe0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bc0bc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bc0be:	b2db      	uxtb	r3, r3
   bc0c0:	2b01      	cmp	r3, #1
   bc0c2:	d908      	bls.n	bc0d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bc0c4:	4620      	mov	r0, r4
   bc0c6:	f7ff ff8d 	bl	bbfe4 <pinAvailable>
   bc0ca:	b120      	cbz	r0, bc0d6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bc0cc:	4620      	mov	r0, r4
}
   bc0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bc0d2:	f7fc bf95 	b.w	b9000 <HAL_GPIO_Read>
}
   bc0d6:	2000      	movs	r0, #0
   bc0d8:	bd10      	pop	{r4, pc}

000bc0da <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bc0da:	280d      	cmp	r0, #13
{
   bc0dc:	b510      	push	{r4, lr}
   bc0de:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bc0e0:	bf9c      	itt	ls
   bc0e2:	340e      	addls	r4, #14
   bc0e4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bc0e6:	4620      	mov	r0, r4
   bc0e8:	f7ff ff7c 	bl	bbfe4 <pinAvailable>
   bc0ec:	b150      	cbz	r0, bc104 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bc0ee:	2103      	movs	r1, #3
   bc0f0:	4620      	mov	r0, r4
   bc0f2:	f7fc ff65 	bl	b8fc0 <HAL_Validate_Pin_Function>
   bc0f6:	2803      	cmp	r0, #3
   bc0f8:	d104      	bne.n	bc104 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bc0fa:	4620      	mov	r0, r4
}
   bc0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bc100:	f7fc bf96 	b.w	b9030 <hal_adc_read>
}
   bc104:	2000      	movs	r0, #0
   bc106:	bd10      	pop	{r4, pc}

000bc108 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc108:	4770      	bx	lr

000bc10a <__tcf_1>:
   bc10a:	4770      	bx	lr

000bc10c <_Z17acquireWireBufferv>:
{
   bc10c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bc10e:	4b0a      	ldr	r3, [pc, #40]	; (bc138 <_Z17acquireWireBufferv+0x2c>)
   bc110:	6003      	str	r3, [r0, #0]
   bc112:	2301      	movs	r3, #1
{
   bc114:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bc116:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc118:	4908      	ldr	r1, [pc, #32]	; (bc13c <_Z17acquireWireBufferv+0x30>)
   bc11a:	2020      	movs	r0, #32
   bc11c:	f000 f8b4 	bl	bc288 <_ZnajRKSt9nothrow_t>
	};
   bc120:	2520      	movs	r5, #32
   bc122:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc124:	4905      	ldr	r1, [pc, #20]	; (bc13c <_Z17acquireWireBufferv+0x30>)
	};
   bc126:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc128:	4628      	mov	r0, r5
   bc12a:	f000 f8ad 	bl	bc288 <_ZnajRKSt9nothrow_t>
	};
   bc12e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bc132:	4620      	mov	r0, r4
   bc134:	bd38      	pop	{r3, r4, r5, pc}
   bc136:	bf00      	nop
   bc138:	00010018 	.word	0x00010018
   bc13c:	000bf804 	.word	0x000bf804

000bc140 <_Z18acquireWire1Bufferv>:
{
   bc140:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bc142:	4b0a      	ldr	r3, [pc, #40]	; (bc16c <_Z18acquireWire1Bufferv+0x2c>)
   bc144:	6003      	str	r3, [r0, #0]
   bc146:	2301      	movs	r3, #1
{
   bc148:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bc14a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc14c:	4908      	ldr	r1, [pc, #32]	; (bc170 <_Z18acquireWire1Bufferv+0x30>)
   bc14e:	2020      	movs	r0, #32
   bc150:	f000 f89a 	bl	bc288 <_ZnajRKSt9nothrow_t>
	};
   bc154:	2520      	movs	r5, #32
   bc156:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc158:	4905      	ldr	r1, [pc, #20]	; (bc170 <_Z18acquireWire1Bufferv+0x30>)
	};
   bc15a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc15c:	4628      	mov	r0, r5
   bc15e:	f000 f893 	bl	bc288 <_ZnajRKSt9nothrow_t>
	};
   bc162:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bc166:	4620      	mov	r0, r4
   bc168:	bd38      	pop	{r3, r4, r5, pc}
   bc16a:	bf00      	nop
   bc16c:	00010018 	.word	0x00010018
   bc170:	000bf804 	.word	0x000bf804

000bc174 <_Z19__fetch_global_Wirev>:
{
   bc174:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc176:	4d0e      	ldr	r5, [pc, #56]	; (bc1b0 <_Z19__fetch_global_Wirev+0x3c>)
   bc178:	7829      	ldrb	r1, [r5, #0]
   bc17a:	f3bf 8f5b 	dmb	ish
   bc17e:	f011 0401 	ands.w	r4, r1, #1
{
   bc182:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc184:	d111      	bne.n	bc1aa <_Z19__fetch_global_Wirev+0x36>
   bc186:	4628      	mov	r0, r5
   bc188:	f7f7 ff98 	bl	b40bc <__cxa_guard_acquire>
   bc18c:	b168      	cbz	r0, bc1aa <_Z19__fetch_global_Wirev+0x36>
   bc18e:	4668      	mov	r0, sp
   bc190:	f7ff ffbc 	bl	bc10c <_Z17acquireWireBufferv>
   bc194:	466a      	mov	r2, sp
   bc196:	4621      	mov	r1, r4
   bc198:	4806      	ldr	r0, [pc, #24]	; (bc1b4 <_Z19__fetch_global_Wirev+0x40>)
   bc19a:	f7fd fcbf 	bl	b9b1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bc19e:	4628      	mov	r0, r5
   bc1a0:	f7f7 ff91 	bl	b40c6 <__cxa_guard_release>
   bc1a4:	4804      	ldr	r0, [pc, #16]	; (bc1b8 <_Z19__fetch_global_Wirev+0x44>)
   bc1a6:	f001 fe27 	bl	bddf8 <atexit>
	return wire;
}
   bc1aa:	4802      	ldr	r0, [pc, #8]	; (bc1b4 <_Z19__fetch_global_Wirev+0x40>)
   bc1ac:	b007      	add	sp, #28
   bc1ae:	bd30      	pop	{r4, r5, pc}
   bc1b0:	2003e714 	.word	0x2003e714
   bc1b4:	2003e71c 	.word	0x2003e71c
   bc1b8:	000bc109 	.word	0x000bc109

000bc1bc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bc1bc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bc1be:	4c0e      	ldr	r4, [pc, #56]	; (bc1f8 <_Z20__fetch_global_Wire1v+0x3c>)
   bc1c0:	7823      	ldrb	r3, [r4, #0]
   bc1c2:	f3bf 8f5b 	dmb	ish
   bc1c6:	07db      	lsls	r3, r3, #31
{
   bc1c8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bc1ca:	d411      	bmi.n	bc1f0 <_Z20__fetch_global_Wire1v+0x34>
   bc1cc:	4620      	mov	r0, r4
   bc1ce:	f7f7 ff75 	bl	b40bc <__cxa_guard_acquire>
   bc1d2:	b168      	cbz	r0, bc1f0 <_Z20__fetch_global_Wire1v+0x34>
   bc1d4:	4668      	mov	r0, sp
   bc1d6:	f7ff ffb3 	bl	bc140 <_Z18acquireWire1Bufferv>
   bc1da:	466a      	mov	r2, sp
   bc1dc:	2101      	movs	r1, #1
   bc1de:	4807      	ldr	r0, [pc, #28]	; (bc1fc <_Z20__fetch_global_Wire1v+0x40>)
   bc1e0:	f7fd fc9c 	bl	b9b1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bc1e4:	4620      	mov	r0, r4
   bc1e6:	f7f7 ff6e 	bl	b40c6 <__cxa_guard_release>
   bc1ea:	4805      	ldr	r0, [pc, #20]	; (bc200 <_Z20__fetch_global_Wire1v+0x44>)
   bc1ec:	f001 fe04 	bl	bddf8 <atexit>
	return wire;
}
   bc1f0:	4802      	ldr	r0, [pc, #8]	; (bc1fc <_Z20__fetch_global_Wire1v+0x40>)
   bc1f2:	b006      	add	sp, #24
   bc1f4:	bd10      	pop	{r4, pc}
   bc1f6:	bf00      	nop
   bc1f8:	2003e718 	.word	0x2003e718
   bc1fc:	2003e730 	.word	0x2003e730
   bc200:	000bc10b 	.word	0x000bc10b

000bc204 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc204:	4770      	bx	lr
	...

000bc208 <_Z20acquireSerial1Bufferv>:
{
   bc208:	b538      	push	{r3, r4, r5, lr}
   bc20a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bc20c:	2514      	movs	r5, #20
   bc20e:	462a      	mov	r2, r5
   bc210:	2100      	movs	r1, #0
   bc212:	f001 fe45 	bl	bdea0 <memset>
   bc216:	8025      	strh	r5, [r4, #0]
   bc218:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc21a:	4907      	ldr	r1, [pc, #28]	; (bc238 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bc21c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc21e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bc220:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc222:	f000 f831 	bl	bc288 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc226:	4904      	ldr	r1, [pc, #16]	; (bc238 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bc228:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc22a:	4628      	mov	r0, r5
   bc22c:	f000 f82c 	bl	bc288 <_ZnajRKSt9nothrow_t>
    };
   bc230:	60e0      	str	r0, [r4, #12]
}
   bc232:	4620      	mov	r0, r4
   bc234:	bd38      	pop	{r3, r4, r5, pc}
   bc236:	bf00      	nop
   bc238:	000bf804 	.word	0x000bf804

000bc23c <_Z22__fetch_global_Serial1v>:
{
   bc23c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc23e:	4d0e      	ldr	r5, [pc, #56]	; (bc278 <_Z22__fetch_global_Serial1v+0x3c>)
   bc240:	7829      	ldrb	r1, [r5, #0]
   bc242:	f3bf 8f5b 	dmb	ish
   bc246:	f011 0401 	ands.w	r4, r1, #1
{
   bc24a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc24c:	d111      	bne.n	bc272 <_Z22__fetch_global_Serial1v+0x36>
   bc24e:	4628      	mov	r0, r5
   bc250:	f7f7 ff34 	bl	b40bc <__cxa_guard_acquire>
   bc254:	b168      	cbz	r0, bc272 <_Z22__fetch_global_Serial1v+0x36>
   bc256:	a801      	add	r0, sp, #4
   bc258:	f7ff ffd6 	bl	bc208 <_Z20acquireSerial1Bufferv>
   bc25c:	aa01      	add	r2, sp, #4
   bc25e:	4621      	mov	r1, r4
   bc260:	4806      	ldr	r0, [pc, #24]	; (bc27c <_Z22__fetch_global_Serial1v+0x40>)
   bc262:	f7ff fd63 	bl	bbd2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bc266:	4628      	mov	r0, r5
   bc268:	f7f7 ff2d 	bl	b40c6 <__cxa_guard_release>
   bc26c:	4804      	ldr	r0, [pc, #16]	; (bc280 <_Z22__fetch_global_Serial1v+0x44>)
   bc26e:	f001 fdc3 	bl	bddf8 <atexit>
    return serial1;
}
   bc272:	4802      	ldr	r0, [pc, #8]	; (bc27c <_Z22__fetch_global_Serial1v+0x40>)
   bc274:	b007      	add	sp, #28
   bc276:	bd30      	pop	{r4, r5, pc}
   bc278:	2003e744 	.word	0x2003e744
   bc27c:	2003e748 	.word	0x2003e748
   bc280:	000bc205 	.word	0x000bc205

000bc284 <_ZnwjRKSt9nothrow_t>:
   bc284:	f7f7 bf07 	b.w	b4096 <_Znwj>

000bc288 <_ZnajRKSt9nothrow_t>:
   bc288:	f7f7 bf07 	b.w	b409a <_Znaj>

000bc28c <_ZSt25__throw_bad_function_callv>:
   bc28c:	b508      	push	{r3, lr}
   bc28e:	f7fd f9c5 	bl	b961c <abort>
   bc292:	0000      	movs	r0, r0
   bc294:	0000      	movs	r0, r0
	...

000bc298 <pow>:
   bc298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc29a:	ed2d 8b02 	vpush	{d8}
   bc29e:	ec57 6b10 	vmov	r6, r7, d0
   bc2a2:	ec55 4b11 	vmov	r4, r5, d1
   bc2a6:	f000 f8cb 	bl	bc440 <__ieee754_pow>
   bc2aa:	4b63      	ldr	r3, [pc, #396]	; (bc438 <pow+0x1a0>)
   bc2ac:	eeb0 8a40 	vmov.f32	s16, s0
   bc2b0:	eef0 8a60 	vmov.f32	s17, s1
   bc2b4:	f993 3000 	ldrsb.w	r3, [r3]
   bc2b8:	3301      	adds	r3, #1
   bc2ba:	d02a      	beq.n	bc312 <pow+0x7a>
   bc2bc:	4622      	mov	r2, r4
   bc2be:	462b      	mov	r3, r5
   bc2c0:	4620      	mov	r0, r4
   bc2c2:	4629      	mov	r1, r5
   bc2c4:	f001 fcc4 	bl	bdc50 <__aeabi_dcmpun>
   bc2c8:	bb18      	cbnz	r0, bc312 <pow+0x7a>
   bc2ca:	4632      	mov	r2, r6
   bc2cc:	463b      	mov	r3, r7
   bc2ce:	4630      	mov	r0, r6
   bc2d0:	4639      	mov	r1, r7
   bc2d2:	f001 fcbd 	bl	bdc50 <__aeabi_dcmpun>
   bc2d6:	2800      	cmp	r0, #0
   bc2d8:	d144      	bne.n	bc364 <pow+0xcc>
   bc2da:	2200      	movs	r2, #0
   bc2dc:	2300      	movs	r3, #0
   bc2de:	4630      	mov	r0, r6
   bc2e0:	4639      	mov	r1, r7
   bc2e2:	f001 fc83 	bl	bdbec <__aeabi_dcmpeq>
   bc2e6:	b1d8      	cbz	r0, bc320 <pow+0x88>
   bc2e8:	2200      	movs	r2, #0
   bc2ea:	2300      	movs	r3, #0
   bc2ec:	4620      	mov	r0, r4
   bc2ee:	4629      	mov	r1, r5
   bc2f0:	f001 fc7c 	bl	bdbec <__aeabi_dcmpeq>
   bc2f4:	2800      	cmp	r0, #0
   bc2f6:	d13d      	bne.n	bc374 <pow+0xdc>
   bc2f8:	ec45 4b10 	vmov	d0, r4, r5
   bc2fc:	f000 ff10 	bl	bd120 <finite>
   bc300:	b138      	cbz	r0, bc312 <pow+0x7a>
   bc302:	4620      	mov	r0, r4
   bc304:	4629      	mov	r1, r5
   bc306:	2200      	movs	r2, #0
   bc308:	2300      	movs	r3, #0
   bc30a:	f001 fc79 	bl	bdc00 <__aeabi_dcmplt>
   bc30e:	2800      	cmp	r0, #0
   bc310:	d15c      	bne.n	bc3cc <pow+0x134>
   bc312:	eeb0 0a48 	vmov.f32	s0, s16
   bc316:	eef0 0a68 	vmov.f32	s1, s17
   bc31a:	ecbd 8b02 	vpop	{d8}
   bc31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc320:	eeb0 0a48 	vmov.f32	s0, s16
   bc324:	eef0 0a68 	vmov.f32	s1, s17
   bc328:	f000 fefa 	bl	bd120 <finite>
   bc32c:	b358      	cbz	r0, bc386 <pow+0xee>
   bc32e:	ec51 0b18 	vmov	r0, r1, d8
   bc332:	2200      	movs	r2, #0
   bc334:	2300      	movs	r3, #0
   bc336:	f001 fc59 	bl	bdbec <__aeabi_dcmpeq>
   bc33a:	2800      	cmp	r0, #0
   bc33c:	d0e9      	beq.n	bc312 <pow+0x7a>
   bc33e:	ec47 6b10 	vmov	d0, r6, r7
   bc342:	f000 feed 	bl	bd120 <finite>
   bc346:	2800      	cmp	r0, #0
   bc348:	d0e3      	beq.n	bc312 <pow+0x7a>
   bc34a:	ec45 4b10 	vmov	d0, r4, r5
   bc34e:	f000 fee7 	bl	bd120 <finite>
   bc352:	2800      	cmp	r0, #0
   bc354:	d0dd      	beq.n	bc312 <pow+0x7a>
   bc356:	f7fd f969 	bl	b962c <__errno>
   bc35a:	2322      	movs	r3, #34	; 0x22
   bc35c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; bc418 <pow+0x180>
   bc360:	6003      	str	r3, [r0, #0]
   bc362:	e7d6      	b.n	bc312 <pow+0x7a>
   bc364:	4620      	mov	r0, r4
   bc366:	4629      	mov	r1, r5
   bc368:	2200      	movs	r2, #0
   bc36a:	2300      	movs	r3, #0
   bc36c:	f001 fc3e 	bl	bdbec <__aeabi_dcmpeq>
   bc370:	2800      	cmp	r0, #0
   bc372:	d0ce      	beq.n	bc312 <pow+0x7a>
   bc374:	ed9f 8b2a 	vldr	d8, [pc, #168]	; bc420 <pow+0x188>
   bc378:	eeb0 0a48 	vmov.f32	s0, s16
   bc37c:	eef0 0a68 	vmov.f32	s1, s17
   bc380:	ecbd 8b02 	vpop	{d8}
   bc384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc386:	ec47 6b10 	vmov	d0, r6, r7
   bc38a:	f000 fec9 	bl	bd120 <finite>
   bc38e:	2800      	cmp	r0, #0
   bc390:	d0cd      	beq.n	bc32e <pow+0x96>
   bc392:	ec45 4b10 	vmov	d0, r4, r5
   bc396:	f000 fec3 	bl	bd120 <finite>
   bc39a:	2800      	cmp	r0, #0
   bc39c:	d0c7      	beq.n	bc32e <pow+0x96>
   bc39e:	ec53 2b18 	vmov	r2, r3, d8
   bc3a2:	ee18 0a10 	vmov	r0, s16
   bc3a6:	4619      	mov	r1, r3
   bc3a8:	f001 fc52 	bl	bdc50 <__aeabi_dcmpun>
   bc3ac:	bb20      	cbnz	r0, bc3f8 <pow+0x160>
   bc3ae:	f7fd f93d 	bl	b962c <__errno>
   bc3b2:	4603      	mov	r3, r0
   bc3b4:	2222      	movs	r2, #34	; 0x22
   bc3b6:	601a      	str	r2, [r3, #0]
   bc3b8:	4630      	mov	r0, r6
   bc3ba:	4639      	mov	r1, r7
   bc3bc:	2200      	movs	r2, #0
   bc3be:	2300      	movs	r3, #0
   bc3c0:	f001 fc1e 	bl	bdc00 <__aeabi_dcmplt>
   bc3c4:	b948      	cbnz	r0, bc3da <pow+0x142>
   bc3c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; bc428 <pow+0x190>
   bc3ca:	e7a2      	b.n	bc312 <pow+0x7a>
   bc3cc:	f7fd f92e 	bl	b962c <__errno>
   bc3d0:	2321      	movs	r3, #33	; 0x21
   bc3d2:	ed9f 8b17 	vldr	d8, [pc, #92]	; bc430 <pow+0x198>
   bc3d6:	6003      	str	r3, [r0, #0]
   bc3d8:	e79b      	b.n	bc312 <pow+0x7a>
   bc3da:	ec45 4b10 	vmov	d0, r4, r5
   bc3de:	f000 feb3 	bl	bd148 <rint>
   bc3e2:	4622      	mov	r2, r4
   bc3e4:	ec51 0b10 	vmov	r0, r1, d0
   bc3e8:	462b      	mov	r3, r5
   bc3ea:	f001 fbff 	bl	bdbec <__aeabi_dcmpeq>
   bc3ee:	2800      	cmp	r0, #0
   bc3f0:	d1e9      	bne.n	bc3c6 <pow+0x12e>
   bc3f2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; bc430 <pow+0x198>
   bc3f6:	e78c      	b.n	bc312 <pow+0x7a>
   bc3f8:	f7fd f918 	bl	b962c <__errno>
   bc3fc:	2200      	movs	r2, #0
   bc3fe:	2300      	movs	r3, #0
   bc400:	2121      	movs	r1, #33	; 0x21
   bc402:	6001      	str	r1, [r0, #0]
   bc404:	4610      	mov	r0, r2
   bc406:	4619      	mov	r1, r3
   bc408:	f001 fab2 	bl	bd970 <__aeabi_ddiv>
   bc40c:	ec41 0b18 	vmov	d8, r0, r1
   bc410:	e77f      	b.n	bc312 <pow+0x7a>
   bc412:	bf00      	nop
   bc414:	f3af 8000 	nop.w
	...
   bc424:	3ff00000 	.word	0x3ff00000
   bc428:	00000000 	.word	0x00000000
   bc42c:	7ff00000 	.word	0x7ff00000
   bc430:	00000000 	.word	0x00000000
   bc434:	fff00000 	.word	0xfff00000
   bc438:	2003e01c 	.word	0x2003e01c
   bc43c:	00000000 	.word	0x00000000

000bc440 <__ieee754_pow>:
   bc440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc444:	ec57 6b11 	vmov	r6, r7, d1
   bc448:	ed2d 8b0c 	vpush	{d8-d13}
   bc44c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   bc450:	ea5a 0206 	orrs.w	r2, sl, r6
   bc454:	b087      	sub	sp, #28
   bc456:	d03d      	beq.n	bc4d4 <__ieee754_pow+0x94>
   bc458:	ec55 4b10 	vmov	r4, r5, d0
   bc45c:	4972      	ldr	r1, [pc, #456]	; (bc628 <__ieee754_pow+0x1e8>)
   bc45e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   bc462:	4588      	cmp	r8, r1
   bc464:	ee10 2a10 	vmov	r2, s0
   bc468:	46a9      	mov	r9, r5
   bc46a:	dc2c      	bgt.n	bc4c6 <__ieee754_pow+0x86>
   bc46c:	ee11 3a10 	vmov	r3, s2
   bc470:	46bb      	mov	fp, r7
   bc472:	d036      	beq.n	bc4e2 <__ieee754_pow+0xa2>
   bc474:	458a      	cmp	sl, r1
   bc476:	dc26      	bgt.n	bc4c6 <__ieee754_pow+0x86>
   bc478:	496b      	ldr	r1, [pc, #428]	; (bc628 <__ieee754_pow+0x1e8>)
   bc47a:	458a      	cmp	sl, r1
   bc47c:	d021      	beq.n	bc4c2 <__ieee754_pow+0x82>
   bc47e:	f1b9 0f00 	cmp.w	r9, #0
   bc482:	db39      	blt.n	bc4f8 <__ieee754_pow+0xb8>
   bc484:	2100      	movs	r1, #0
   bc486:	9100      	str	r1, [sp, #0]
   bc488:	2b00      	cmp	r3, #0
   bc48a:	d151      	bne.n	bc530 <__ieee754_pow+0xf0>
   bc48c:	4b66      	ldr	r3, [pc, #408]	; (bc628 <__ieee754_pow+0x1e8>)
   bc48e:	459a      	cmp	sl, r3
   bc490:	f000 80a2 	beq.w	bc5d8 <__ieee754_pow+0x198>
   bc494:	4b65      	ldr	r3, [pc, #404]	; (bc62c <__ieee754_pow+0x1ec>)
   bc496:	459a      	cmp	sl, r3
   bc498:	f000 80b0 	beq.w	bc5fc <__ieee754_pow+0x1bc>
   bc49c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   bc4a0:	f000 84c0 	beq.w	bce24 <__ieee754_pow+0x9e4>
   bc4a4:	4b62      	ldr	r3, [pc, #392]	; (bc630 <__ieee754_pow+0x1f0>)
   bc4a6:	459b      	cmp	fp, r3
   bc4a8:	d142      	bne.n	bc530 <__ieee754_pow+0xf0>
   bc4aa:	f1b9 0f00 	cmp.w	r9, #0
   bc4ae:	db3f      	blt.n	bc530 <__ieee754_pow+0xf0>
   bc4b0:	ec45 4b10 	vmov	d0, r4, r5
   bc4b4:	b007      	add	sp, #28
   bc4b6:	ecbd 8b0c 	vpop	{d8-d13}
   bc4ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc4be:	f000 bd59 	b.w	bcf74 <__ieee754_sqrt>
   bc4c2:	2b00      	cmp	r3, #0
   bc4c4:	d0db      	beq.n	bc47e <__ieee754_pow+0x3e>
   bc4c6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bc4ca:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bc4ce:	ea58 0302 	orrs.w	r3, r8, r2
   bc4d2:	d109      	bne.n	bc4e8 <__ieee754_pow+0xa8>
   bc4d4:	ed9f 0b50 	vldr	d0, [pc, #320]	; bc618 <__ieee754_pow+0x1d8>
   bc4d8:	b007      	add	sp, #28
   bc4da:	ecbd 8b0c 	vpop	{d8-d13}
   bc4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc4e2:	b90c      	cbnz	r4, bc4e8 <__ieee754_pow+0xa8>
   bc4e4:	45c2      	cmp	sl, r8
   bc4e6:	ddc7      	ble.n	bc478 <__ieee754_pow+0x38>
   bc4e8:	4852      	ldr	r0, [pc, #328]	; (bc634 <__ieee754_pow+0x1f4>)
   bc4ea:	b007      	add	sp, #28
   bc4ec:	ecbd 8b0c 	vpop	{d8-d13}
   bc4f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc4f4:	f000 be20 	b.w	bd138 <nan>
   bc4f8:	494f      	ldr	r1, [pc, #316]	; (bc638 <__ieee754_pow+0x1f8>)
   bc4fa:	458a      	cmp	sl, r1
   bc4fc:	f300 8085 	bgt.w	bc60a <__ieee754_pow+0x1ca>
   bc500:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   bc504:	458a      	cmp	sl, r1
   bc506:	dd0f      	ble.n	bc528 <__ieee754_pow+0xe8>
   bc508:	ea4f 512a 	mov.w	r1, sl, asr #20
   bc50c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   bc510:	2914      	cmp	r1, #20
   bc512:	f340 849b 	ble.w	bce4c <__ieee754_pow+0xa0c>
   bc516:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   bc51a:	fa23 f001 	lsr.w	r0, r3, r1
   bc51e:	fa00 f101 	lsl.w	r1, r0, r1
   bc522:	4299      	cmp	r1, r3
   bc524:	f000 84ed 	beq.w	bcf02 <__ieee754_pow+0xac2>
   bc528:	2100      	movs	r1, #0
   bc52a:	9100      	str	r1, [sp, #0]
   bc52c:	2b00      	cmp	r3, #0
   bc52e:	d0b1      	beq.n	bc494 <__ieee754_pow+0x54>
   bc530:	ec45 4b10 	vmov	d0, r4, r5
   bc534:	9202      	str	r2, [sp, #8]
   bc536:	f000 fde9 	bl	bd10c <fabs>
   bc53a:	9a02      	ldr	r2, [sp, #8]
   bc53c:	bb5a      	cbnz	r2, bc596 <__ieee754_pow+0x156>
   bc53e:	f1b8 0f00 	cmp.w	r8, #0
   bc542:	d004      	beq.n	bc54e <__ieee754_pow+0x10e>
   bc544:	4b39      	ldr	r3, [pc, #228]	; (bc62c <__ieee754_pow+0x1ec>)
   bc546:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   bc54a:	429a      	cmp	r2, r3
   bc54c:	d123      	bne.n	bc596 <__ieee754_pow+0x156>
   bc54e:	f1bb 0f00 	cmp.w	fp, #0
   bc552:	da07      	bge.n	bc564 <__ieee754_pow+0x124>
   bc554:	ec53 2b10 	vmov	r2, r3, d0
   bc558:	4934      	ldr	r1, [pc, #208]	; (bc62c <__ieee754_pow+0x1ec>)
   bc55a:	2000      	movs	r0, #0
   bc55c:	f001 fa08 	bl	bd970 <__aeabi_ddiv>
   bc560:	ec41 0b10 	vmov	d0, r0, r1
   bc564:	f1b9 0f00 	cmp.w	r9, #0
   bc568:	dab6      	bge.n	bc4d8 <__ieee754_pow+0x98>
   bc56a:	9b00      	ldr	r3, [sp, #0]
   bc56c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bc570:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bc574:	ea58 0303 	orrs.w	r3, r8, r3
   bc578:	f040 848d 	bne.w	bce96 <__ieee754_pow+0xa56>
   bc57c:	ec53 2b10 	vmov	r2, r3, d0
   bc580:	4610      	mov	r0, r2
   bc582:	4619      	mov	r1, r3
   bc584:	f000 ff12 	bl	bd3ac <__aeabi_dsub>
   bc588:	4602      	mov	r2, r0
   bc58a:	460b      	mov	r3, r1
   bc58c:	f001 f9f0 	bl	bd970 <__aeabi_ddiv>
   bc590:	ec41 0b10 	vmov	d0, r0, r1
   bc594:	e7a0      	b.n	bc4d8 <__ieee754_pow+0x98>
   bc596:	9a00      	ldr	r2, [sp, #0]
   bc598:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   bc59c:	3b01      	subs	r3, #1
   bc59e:	9304      	str	r3, [sp, #16]
   bc5a0:	4313      	orrs	r3, r2
   bc5a2:	d035      	beq.n	bc610 <__ieee754_pow+0x1d0>
   bc5a4:	4b25      	ldr	r3, [pc, #148]	; (bc63c <__ieee754_pow+0x1fc>)
   bc5a6:	459a      	cmp	sl, r3
   bc5a8:	dd4c      	ble.n	bc644 <__ieee754_pow+0x204>
   bc5aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   bc5ae:	459a      	cmp	sl, r3
   bc5b0:	4b23      	ldr	r3, [pc, #140]	; (bc640 <__ieee754_pow+0x200>)
   bc5b2:	f340 83db 	ble.w	bcd6c <__ieee754_pow+0x92c>
   bc5b6:	4598      	cmp	r8, r3
   bc5b8:	f340 8360 	ble.w	bcc7c <__ieee754_pow+0x83c>
   bc5bc:	f1bb 0f00 	cmp.w	fp, #0
   bc5c0:	f340 8360 	ble.w	bcc84 <__ieee754_pow+0x844>
   bc5c4:	a316      	add	r3, pc, #88	; (adr r3, bc620 <__ieee754_pow+0x1e0>)
   bc5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc5ca:	4610      	mov	r0, r2
   bc5cc:	4619      	mov	r1, r3
   bc5ce:	f001 f8a5 	bl	bd71c <__aeabi_dmul>
   bc5d2:	ec41 0b10 	vmov	d0, r0, r1
   bc5d6:	e77f      	b.n	bc4d8 <__ieee754_pow+0x98>
   bc5d8:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   bc5dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   bc5e0:	4313      	orrs	r3, r2
   bc5e2:	f43f af77 	beq.w	bc4d4 <__ieee754_pow+0x94>
   bc5e6:	4b16      	ldr	r3, [pc, #88]	; (bc640 <__ieee754_pow+0x200>)
   bc5e8:	4598      	cmp	r8, r3
   bc5ea:	f340 837a 	ble.w	bcce2 <__ieee754_pow+0x8a2>
   bc5ee:	f1bb 0f00 	cmp.w	fp, #0
   bc5f2:	f2c0 8347 	blt.w	bcc84 <__ieee754_pow+0x844>
   bc5f6:	ec47 6b10 	vmov	d0, r6, r7
   bc5fa:	e76d      	b.n	bc4d8 <__ieee754_pow+0x98>
   bc5fc:	f1bb 0f00 	cmp.w	fp, #0
   bc600:	f2c0 841a 	blt.w	bce38 <__ieee754_pow+0x9f8>
   bc604:	ec45 4b10 	vmov	d0, r4, r5
   bc608:	e766      	b.n	bc4d8 <__ieee754_pow+0x98>
   bc60a:	2102      	movs	r1, #2
   bc60c:	9100      	str	r1, [sp, #0]
   bc60e:	e73b      	b.n	bc488 <__ieee754_pow+0x48>
   bc610:	4622      	mov	r2, r4
   bc612:	462b      	mov	r3, r5
   bc614:	e7b4      	b.n	bc580 <__ieee754_pow+0x140>
   bc616:	bf00      	nop
   bc618:	00000000 	.word	0x00000000
   bc61c:	3ff00000 	.word	0x3ff00000
   bc620:	8800759c 	.word	0x8800759c
   bc624:	7e37e43c 	.word	0x7e37e43c
   bc628:	7ff00000 	.word	0x7ff00000
   bc62c:	3ff00000 	.word	0x3ff00000
   bc630:	3fe00000 	.word	0x3fe00000
   bc634:	000bf808 	.word	0x000bf808
   bc638:	433fffff 	.word	0x433fffff
   bc63c:	41e00000 	.word	0x41e00000
   bc640:	3fefffff 	.word	0x3fefffff
   bc644:	4be4      	ldr	r3, [pc, #912]	; (bc9d8 <__ieee754_pow+0x598>)
   bc646:	ea09 0303 	and.w	r3, r9, r3
   bc64a:	2200      	movs	r2, #0
   bc64c:	b953      	cbnz	r3, bc664 <__ieee754_pow+0x224>
   bc64e:	ec51 0b10 	vmov	r0, r1, d0
   bc652:	4be2      	ldr	r3, [pc, #904]	; (bc9dc <__ieee754_pow+0x59c>)
   bc654:	f001 f862 	bl	bd71c <__aeabi_dmul>
   bc658:	ec41 0b10 	vmov	d0, r0, r1
   bc65c:	ee10 8a90 	vmov	r8, s1
   bc660:	f06f 0234 	mvn.w	r2, #52	; 0x34
   bc664:	ea4f 5328 	mov.w	r3, r8, asr #20
   bc668:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   bc66c:	189a      	adds	r2, r3, r2
   bc66e:	4bdc      	ldr	r3, [pc, #880]	; (bc9e0 <__ieee754_pow+0x5a0>)
   bc670:	9205      	str	r2, [sp, #20]
   bc672:	f3c8 0813 	ubfx	r8, r8, #0, #20
   bc676:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   bc67a:	4598      	cmp	r8, r3
   bc67c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   bc680:	dd07      	ble.n	bc692 <__ieee754_pow+0x252>
   bc682:	4bd8      	ldr	r3, [pc, #864]	; (bc9e4 <__ieee754_pow+0x5a4>)
   bc684:	4598      	cmp	r8, r3
   bc686:	f340 8414 	ble.w	bceb2 <__ieee754_pow+0xa72>
   bc68a:	3201      	adds	r2, #1
   bc68c:	9205      	str	r2, [sp, #20]
   bc68e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   bc692:	ed9f 6bb9 	vldr	d6, [pc, #740]	; bc978 <__ieee754_pow+0x538>
   bc696:	ed9f 7bba 	vldr	d7, [pc, #744]	; bc980 <__ieee754_pow+0x540>
   bc69a:	ec53 2b16 	vmov	r2, r3, d6
   bc69e:	eeb0 ca47 	vmov.f32	s24, s14
   bc6a2:	eef0 ca67 	vmov.f32	s25, s15
   bc6a6:	2500      	movs	r5, #0
   bc6a8:	eeb0 da47 	vmov.f32	s26, s14
   bc6ac:	eef0 da67 	vmov.f32	s27, s15
   bc6b0:	ec5b ab10 	vmov	sl, fp, d0
   bc6b4:	46a3      	mov	fp, r4
   bc6b6:	4650      	mov	r0, sl
   bc6b8:	4659      	mov	r1, fp
   bc6ba:	ec43 2b1a 	vmov	d10, r2, r3
   bc6be:	f000 fe75 	bl	bd3ac <__aeabi_dsub>
   bc6c2:	ec53 2b1a 	vmov	r2, r3, d10
   bc6c6:	4680      	mov	r8, r0
   bc6c8:	4689      	mov	r9, r1
   bc6ca:	4650      	mov	r0, sl
   bc6cc:	4659      	mov	r1, fp
   bc6ce:	f000 fe6f 	bl	bd3b0 <__adddf3>
   bc6d2:	4602      	mov	r2, r0
   bc6d4:	460b      	mov	r3, r1
   bc6d6:	2000      	movs	r0, #0
   bc6d8:	49c3      	ldr	r1, [pc, #780]	; (bc9e8 <__ieee754_pow+0x5a8>)
   bc6da:	f001 f949 	bl	bd970 <__aeabi_ddiv>
   bc6de:	ec41 0b1b 	vmov	d11, r0, r1
   bc6e2:	4640      	mov	r0, r8
   bc6e4:	ec53 2b1b 	vmov	r2, r3, d11
   bc6e8:	4649      	mov	r1, r9
   bc6ea:	f001 f817 	bl	bd71c <__aeabi_dmul>
   bc6ee:	ec41 0b18 	vmov	d8, r0, r1
   bc6f2:	460a      	mov	r2, r1
   bc6f4:	4601      	mov	r1, r0
   bc6f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   bc6fa:	2100      	movs	r1, #0
   bc6fc:	9102      	str	r1, [sp, #8]
   bc6fe:	1064      	asrs	r4, r4, #1
   bc700:	ec4b ab19 	vmov	d9, sl, fp
   bc704:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   bc708:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   bc70c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   bc710:	2000      	movs	r0, #0
   bc712:	1959      	adds	r1, r3, r5
   bc714:	4604      	mov	r4, r0
   bc716:	460d      	mov	r5, r1
   bc718:	4602      	mov	r2, r0
   bc71a:	460b      	mov	r3, r1
   bc71c:	4650      	mov	r0, sl
   bc71e:	4659      	mov	r1, fp
   bc720:	f000 fffc 	bl	bd71c <__aeabi_dmul>
   bc724:	4602      	mov	r2, r0
   bc726:	460b      	mov	r3, r1
   bc728:	4640      	mov	r0, r8
   bc72a:	4649      	mov	r1, r9
   bc72c:	f000 fe3e 	bl	bd3ac <__aeabi_dsub>
   bc730:	ec53 2b1a 	vmov	r2, r3, d10
   bc734:	4680      	mov	r8, r0
   bc736:	4689      	mov	r9, r1
   bc738:	4620      	mov	r0, r4
   bc73a:	4629      	mov	r1, r5
   bc73c:	f000 fe36 	bl	bd3ac <__aeabi_dsub>
   bc740:	4602      	mov	r2, r0
   bc742:	460b      	mov	r3, r1
   bc744:	ec51 0b19 	vmov	r0, r1, d9
   bc748:	f000 fe30 	bl	bd3ac <__aeabi_dsub>
   bc74c:	4652      	mov	r2, sl
   bc74e:	465b      	mov	r3, fp
   bc750:	f000 ffe4 	bl	bd71c <__aeabi_dmul>
   bc754:	4602      	mov	r2, r0
   bc756:	460b      	mov	r3, r1
   bc758:	4640      	mov	r0, r8
   bc75a:	4649      	mov	r1, r9
   bc75c:	f000 fe26 	bl	bd3ac <__aeabi_dsub>
   bc760:	ec53 2b1b 	vmov	r2, r3, d11
   bc764:	f000 ffda 	bl	bd71c <__aeabi_dmul>
   bc768:	ec53 2b18 	vmov	r2, r3, d8
   bc76c:	ec41 0b19 	vmov	d9, r0, r1
   bc770:	ec51 0b18 	vmov	r0, r1, d8
   bc774:	f000 ffd2 	bl	bd71c <__aeabi_dmul>
   bc778:	a383      	add	r3, pc, #524	; (adr r3, bc988 <__ieee754_pow+0x548>)
   bc77a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc77e:	4604      	mov	r4, r0
   bc780:	460d      	mov	r5, r1
   bc782:	f000 ffcb 	bl	bd71c <__aeabi_dmul>
   bc786:	a382      	add	r3, pc, #520	; (adr r3, bc990 <__ieee754_pow+0x550>)
   bc788:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc78c:	f000 fe10 	bl	bd3b0 <__adddf3>
   bc790:	4622      	mov	r2, r4
   bc792:	462b      	mov	r3, r5
   bc794:	f000 ffc2 	bl	bd71c <__aeabi_dmul>
   bc798:	a37f      	add	r3, pc, #508	; (adr r3, bc998 <__ieee754_pow+0x558>)
   bc79a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc79e:	f000 fe07 	bl	bd3b0 <__adddf3>
   bc7a2:	4622      	mov	r2, r4
   bc7a4:	462b      	mov	r3, r5
   bc7a6:	f000 ffb9 	bl	bd71c <__aeabi_dmul>
   bc7aa:	a37d      	add	r3, pc, #500	; (adr r3, bc9a0 <__ieee754_pow+0x560>)
   bc7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7b0:	f000 fdfe 	bl	bd3b0 <__adddf3>
   bc7b4:	4622      	mov	r2, r4
   bc7b6:	462b      	mov	r3, r5
   bc7b8:	f000 ffb0 	bl	bd71c <__aeabi_dmul>
   bc7bc:	a37a      	add	r3, pc, #488	; (adr r3, bc9a8 <__ieee754_pow+0x568>)
   bc7be:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7c2:	f000 fdf5 	bl	bd3b0 <__adddf3>
   bc7c6:	4622      	mov	r2, r4
   bc7c8:	462b      	mov	r3, r5
   bc7ca:	f000 ffa7 	bl	bd71c <__aeabi_dmul>
   bc7ce:	a378      	add	r3, pc, #480	; (adr r3, bc9b0 <__ieee754_pow+0x570>)
   bc7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7d4:	f000 fdec 	bl	bd3b0 <__adddf3>
   bc7d8:	4622      	mov	r2, r4
   bc7da:	4680      	mov	r8, r0
   bc7dc:	4689      	mov	r9, r1
   bc7de:	462b      	mov	r3, r5
   bc7e0:	4620      	mov	r0, r4
   bc7e2:	4629      	mov	r1, r5
   bc7e4:	f000 ff9a 	bl	bd71c <__aeabi_dmul>
   bc7e8:	4602      	mov	r2, r0
   bc7ea:	460b      	mov	r3, r1
   bc7ec:	4640      	mov	r0, r8
   bc7ee:	4649      	mov	r1, r9
   bc7f0:	f000 ff94 	bl	bd71c <__aeabi_dmul>
   bc7f4:	4652      	mov	r2, sl
   bc7f6:	4604      	mov	r4, r0
   bc7f8:	460d      	mov	r5, r1
   bc7fa:	465b      	mov	r3, fp
   bc7fc:	ec51 0b18 	vmov	r0, r1, d8
   bc800:	f000 fdd6 	bl	bd3b0 <__adddf3>
   bc804:	ec53 2b19 	vmov	r2, r3, d9
   bc808:	f000 ff88 	bl	bd71c <__aeabi_dmul>
   bc80c:	4622      	mov	r2, r4
   bc80e:	462b      	mov	r3, r5
   bc810:	f000 fdce 	bl	bd3b0 <__adddf3>
   bc814:	4652      	mov	r2, sl
   bc816:	4680      	mov	r8, r0
   bc818:	4689      	mov	r9, r1
   bc81a:	465b      	mov	r3, fp
   bc81c:	4650      	mov	r0, sl
   bc81e:	4659      	mov	r1, fp
   bc820:	f000 ff7c 	bl	bd71c <__aeabi_dmul>
   bc824:	4602      	mov	r2, r0
   bc826:	460b      	mov	r3, r1
   bc828:	ec43 2b1a 	vmov	d10, r2, r3
   bc82c:	4b6f      	ldr	r3, [pc, #444]	; (bc9ec <__ieee754_pow+0x5ac>)
   bc82e:	2200      	movs	r2, #0
   bc830:	f000 fdbe 	bl	bd3b0 <__adddf3>
   bc834:	4642      	mov	r2, r8
   bc836:	464b      	mov	r3, r9
   bc838:	f000 fdba 	bl	bd3b0 <__adddf3>
   bc83c:	2400      	movs	r4, #0
   bc83e:	460d      	mov	r5, r1
   bc840:	4622      	mov	r2, r4
   bc842:	462b      	mov	r3, r5
   bc844:	4650      	mov	r0, sl
   bc846:	4659      	mov	r1, fp
   bc848:	f000 ff68 	bl	bd71c <__aeabi_dmul>
   bc84c:	4b67      	ldr	r3, [pc, #412]	; (bc9ec <__ieee754_pow+0x5ac>)
   bc84e:	4682      	mov	sl, r0
   bc850:	468b      	mov	fp, r1
   bc852:	2200      	movs	r2, #0
   bc854:	4620      	mov	r0, r4
   bc856:	4629      	mov	r1, r5
   bc858:	f000 fda8 	bl	bd3ac <__aeabi_dsub>
   bc85c:	ec53 2b1a 	vmov	r2, r3, d10
   bc860:	f000 fda4 	bl	bd3ac <__aeabi_dsub>
   bc864:	4602      	mov	r2, r0
   bc866:	460b      	mov	r3, r1
   bc868:	4640      	mov	r0, r8
   bc86a:	4649      	mov	r1, r9
   bc86c:	f000 fd9e 	bl	bd3ac <__aeabi_dsub>
   bc870:	ec53 2b18 	vmov	r2, r3, d8
   bc874:	f000 ff52 	bl	bd71c <__aeabi_dmul>
   bc878:	4622      	mov	r2, r4
   bc87a:	462b      	mov	r3, r5
   bc87c:	4604      	mov	r4, r0
   bc87e:	460d      	mov	r5, r1
   bc880:	ec51 0b19 	vmov	r0, r1, d9
   bc884:	f000 ff4a 	bl	bd71c <__aeabi_dmul>
   bc888:	4602      	mov	r2, r0
   bc88a:	460b      	mov	r3, r1
   bc88c:	4620      	mov	r0, r4
   bc88e:	4629      	mov	r1, r5
   bc890:	f000 fd8e 	bl	bd3b0 <__adddf3>
   bc894:	4680      	mov	r8, r0
   bc896:	4689      	mov	r9, r1
   bc898:	4642      	mov	r2, r8
   bc89a:	464b      	mov	r3, r9
   bc89c:	4650      	mov	r0, sl
   bc89e:	4659      	mov	r1, fp
   bc8a0:	f000 fd86 	bl	bd3b0 <__adddf3>
   bc8a4:	a344      	add	r3, pc, #272	; (adr r3, bc9b8 <__ieee754_pow+0x578>)
   bc8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8aa:	2000      	movs	r0, #0
   bc8ac:	4604      	mov	r4, r0
   bc8ae:	460d      	mov	r5, r1
   bc8b0:	f000 ff34 	bl	bd71c <__aeabi_dmul>
   bc8b4:	4652      	mov	r2, sl
   bc8b6:	ec41 0b19 	vmov	d9, r0, r1
   bc8ba:	465b      	mov	r3, fp
   bc8bc:	4620      	mov	r0, r4
   bc8be:	4629      	mov	r1, r5
   bc8c0:	f000 fd74 	bl	bd3ac <__aeabi_dsub>
   bc8c4:	4602      	mov	r2, r0
   bc8c6:	460b      	mov	r3, r1
   bc8c8:	4640      	mov	r0, r8
   bc8ca:	4649      	mov	r1, r9
   bc8cc:	f000 fd6e 	bl	bd3ac <__aeabi_dsub>
   bc8d0:	a33b      	add	r3, pc, #236	; (adr r3, bc9c0 <__ieee754_pow+0x580>)
   bc8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8d6:	f000 ff21 	bl	bd71c <__aeabi_dmul>
   bc8da:	4602      	mov	r2, r0
   bc8dc:	460b      	mov	r3, r1
   bc8de:	4620      	mov	r0, r4
   bc8e0:	4629      	mov	r1, r5
   bc8e2:	4614      	mov	r4, r2
   bc8e4:	461d      	mov	r5, r3
   bc8e6:	a338      	add	r3, pc, #224	; (adr r3, bc9c8 <__ieee754_pow+0x588>)
   bc8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8ec:	f000 ff16 	bl	bd71c <__aeabi_dmul>
   bc8f0:	4602      	mov	r2, r0
   bc8f2:	460b      	mov	r3, r1
   bc8f4:	4620      	mov	r0, r4
   bc8f6:	4629      	mov	r1, r5
   bc8f8:	f000 fd5a 	bl	bd3b0 <__adddf3>
   bc8fc:	ec53 2b1d 	vmov	r2, r3, d13
   bc900:	f000 fd56 	bl	bd3b0 <__adddf3>
   bc904:	4680      	mov	r8, r0
   bc906:	9805      	ldr	r0, [sp, #20]
   bc908:	4689      	mov	r9, r1
   bc90a:	f000 fe9d 	bl	bd648 <__aeabi_i2d>
   bc90e:	4642      	mov	r2, r8
   bc910:	4682      	mov	sl, r0
   bc912:	468b      	mov	fp, r1
   bc914:	464b      	mov	r3, r9
   bc916:	ec51 0b19 	vmov	r0, r1, d9
   bc91a:	f000 fd49 	bl	bd3b0 <__adddf3>
   bc91e:	ec53 2b1c 	vmov	r2, r3, d12
   bc922:	f000 fd45 	bl	bd3b0 <__adddf3>
   bc926:	4652      	mov	r2, sl
   bc928:	465b      	mov	r3, fp
   bc92a:	f000 fd41 	bl	bd3b0 <__adddf3>
   bc92e:	4652      	mov	r2, sl
   bc930:	465b      	mov	r3, fp
   bc932:	2000      	movs	r0, #0
   bc934:	4604      	mov	r4, r0
   bc936:	460d      	mov	r5, r1
   bc938:	f000 fd38 	bl	bd3ac <__aeabi_dsub>
   bc93c:	ec53 2b1c 	vmov	r2, r3, d12
   bc940:	f000 fd34 	bl	bd3ac <__aeabi_dsub>
   bc944:	ec53 2b19 	vmov	r2, r3, d9
   bc948:	f000 fd30 	bl	bd3ac <__aeabi_dsub>
   bc94c:	4602      	mov	r2, r0
   bc94e:	460b      	mov	r3, r1
   bc950:	4640      	mov	r0, r8
   bc952:	4649      	mov	r1, r9
   bc954:	f000 fd2a 	bl	bd3ac <__aeabi_dsub>
   bc958:	9b00      	ldr	r3, [sp, #0]
   bc95a:	9a04      	ldr	r2, [sp, #16]
   bc95c:	3b01      	subs	r3, #1
   bc95e:	4313      	orrs	r3, r2
   bc960:	4682      	mov	sl, r0
   bc962:	468b      	mov	fp, r1
   bc964:	f040 81b6 	bne.w	bccd4 <__ieee754_pow+0x894>
   bc968:	ed9f 7b19 	vldr	d7, [pc, #100]	; bc9d0 <__ieee754_pow+0x590>
   bc96c:	eeb0 8a47 	vmov.f32	s16, s14
   bc970:	eef0 8a67 	vmov.f32	s17, s15
   bc974:	e03c      	b.n	bc9f0 <__ieee754_pow+0x5b0>
   bc976:	bf00      	nop
   bc978:	00000000 	.word	0x00000000
   bc97c:	3ff00000 	.word	0x3ff00000
	...
   bc988:	4a454eef 	.word	0x4a454eef
   bc98c:	3fca7e28 	.word	0x3fca7e28
   bc990:	93c9db65 	.word	0x93c9db65
   bc994:	3fcd864a 	.word	0x3fcd864a
   bc998:	a91d4101 	.word	0xa91d4101
   bc99c:	3fd17460 	.word	0x3fd17460
   bc9a0:	518f264d 	.word	0x518f264d
   bc9a4:	3fd55555 	.word	0x3fd55555
   bc9a8:	db6fabff 	.word	0xdb6fabff
   bc9ac:	3fdb6db6 	.word	0x3fdb6db6
   bc9b0:	33333303 	.word	0x33333303
   bc9b4:	3fe33333 	.word	0x3fe33333
   bc9b8:	e0000000 	.word	0xe0000000
   bc9bc:	3feec709 	.word	0x3feec709
   bc9c0:	dc3a03fd 	.word	0xdc3a03fd
   bc9c4:	3feec709 	.word	0x3feec709
   bc9c8:	145b01f5 	.word	0x145b01f5
   bc9cc:	be3e2fe0 	.word	0xbe3e2fe0
   bc9d0:	00000000 	.word	0x00000000
   bc9d4:	bff00000 	.word	0xbff00000
   bc9d8:	7ff00000 	.word	0x7ff00000
   bc9dc:	43400000 	.word	0x43400000
   bc9e0:	0003988e 	.word	0x0003988e
   bc9e4:	000bb679 	.word	0x000bb679
   bc9e8:	3ff00000 	.word	0x3ff00000
   bc9ec:	40080000 	.word	0x40080000
   bc9f0:	2300      	movs	r3, #0
   bc9f2:	e9cd 6700 	strd	r6, r7, [sp]
   bc9f6:	9300      	str	r3, [sp, #0]
   bc9f8:	e9dd 8900 	ldrd	r8, r9, [sp]
   bc9fc:	4630      	mov	r0, r6
   bc9fe:	4642      	mov	r2, r8
   bca00:	464b      	mov	r3, r9
   bca02:	4639      	mov	r1, r7
   bca04:	f000 fcd2 	bl	bd3ac <__aeabi_dsub>
   bca08:	4622      	mov	r2, r4
   bca0a:	462b      	mov	r3, r5
   bca0c:	f000 fe86 	bl	bd71c <__aeabi_dmul>
   bca10:	4632      	mov	r2, r6
   bca12:	463b      	mov	r3, r7
   bca14:	4606      	mov	r6, r0
   bca16:	460f      	mov	r7, r1
   bca18:	4650      	mov	r0, sl
   bca1a:	4659      	mov	r1, fp
   bca1c:	f000 fe7e 	bl	bd71c <__aeabi_dmul>
   bca20:	4602      	mov	r2, r0
   bca22:	460b      	mov	r3, r1
   bca24:	4630      	mov	r0, r6
   bca26:	4639      	mov	r1, r7
   bca28:	f000 fcc2 	bl	bd3b0 <__adddf3>
   bca2c:	4642      	mov	r2, r8
   bca2e:	464b      	mov	r3, r9
   bca30:	4606      	mov	r6, r0
   bca32:	460f      	mov	r7, r1
   bca34:	4620      	mov	r0, r4
   bca36:	4629      	mov	r1, r5
   bca38:	f000 fe70 	bl	bd71c <__aeabi_dmul>
   bca3c:	4604      	mov	r4, r0
   bca3e:	460d      	mov	r5, r1
   bca40:	462b      	mov	r3, r5
   bca42:	4630      	mov	r0, r6
   bca44:	4639      	mov	r1, r7
   bca46:	4622      	mov	r2, r4
   bca48:	f000 fcb2 	bl	bd3b0 <__adddf3>
   bca4c:	4bc2      	ldr	r3, [pc, #776]	; (bcd58 <__ieee754_pow+0x918>)
   bca4e:	4299      	cmp	r1, r3
   bca50:	4680      	mov	r8, r0
   bca52:	4689      	mov	r9, r1
   bca54:	468a      	mov	sl, r1
   bca56:	f340 8118 	ble.w	bcc8a <__ieee754_pow+0x84a>
   bca5a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   bca5e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   bca62:	4303      	orrs	r3, r0
   bca64:	f040 8207 	bne.w	bce76 <__ieee754_pow+0xa36>
   bca68:	a3a3      	add	r3, pc, #652	; (adr r3, bccf8 <__ieee754_pow+0x8b8>)
   bca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca6e:	4630      	mov	r0, r6
   bca70:	4639      	mov	r1, r7
   bca72:	f000 fc9d 	bl	bd3b0 <__adddf3>
   bca76:	4602      	mov	r2, r0
   bca78:	460b      	mov	r3, r1
   bca7a:	4640      	mov	r0, r8
   bca7c:	4649      	mov	r1, r9
   bca7e:	4690      	mov	r8, r2
   bca80:	4699      	mov	r9, r3
   bca82:	4622      	mov	r2, r4
   bca84:	462b      	mov	r3, r5
   bca86:	f000 fc91 	bl	bd3ac <__aeabi_dsub>
   bca8a:	4602      	mov	r2, r0
   bca8c:	460b      	mov	r3, r1
   bca8e:	4640      	mov	r0, r8
   bca90:	4649      	mov	r1, r9
   bca92:	f001 f8d3 	bl	bdc3c <__aeabi_dcmpgt>
   bca96:	2800      	cmp	r0, #0
   bca98:	f040 81ed 	bne.w	bce76 <__ieee754_pow+0xa36>
   bca9c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   bcaa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   bcaa4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   bcaa8:	fa42 f303 	asr.w	r3, r2, r3
   bcaac:	4453      	add	r3, sl
   bcaae:	49ab      	ldr	r1, [pc, #684]	; (bcd5c <__ieee754_pow+0x91c>)
   bcab0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   bcab4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   bcab8:	fa41 fc02 	asr.w	ip, r1, r2
   bcabc:	f3c3 0113 	ubfx	r1, r3, #0, #20
   bcac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bcac4:	f1c2 0214 	rsb	r2, r2, #20
   bcac8:	fa41 f202 	asr.w	r2, r1, r2
   bcacc:	2000      	movs	r0, #0
   bcace:	ea23 010c 	bic.w	r1, r3, ip
   bcad2:	f1ba 0f00 	cmp.w	sl, #0
   bcad6:	9200      	str	r2, [sp, #0]
   bcad8:	460b      	mov	r3, r1
   bcada:	4602      	mov	r2, r0
   bcadc:	da02      	bge.n	bcae4 <__ieee754_pow+0x6a4>
   bcade:	9900      	ldr	r1, [sp, #0]
   bcae0:	4249      	negs	r1, r1
   bcae2:	9100      	str	r1, [sp, #0]
   bcae4:	4620      	mov	r0, r4
   bcae6:	4629      	mov	r1, r5
   bcae8:	f000 fc60 	bl	bd3ac <__aeabi_dsub>
   bcaec:	9b00      	ldr	r3, [sp, #0]
   bcaee:	051b      	lsls	r3, r3, #20
   bcaf0:	9302      	str	r3, [sp, #8]
   bcaf2:	4602      	mov	r2, r0
   bcaf4:	460b      	mov	r3, r1
   bcaf6:	4604      	mov	r4, r0
   bcaf8:	460d      	mov	r5, r1
   bcafa:	4630      	mov	r0, r6
   bcafc:	4639      	mov	r1, r7
   bcafe:	f000 fc57 	bl	bd3b0 <__adddf3>
   bcb02:	4689      	mov	r9, r1
   bcb04:	f04f 0800 	mov.w	r8, #0
   bcb08:	a37d      	add	r3, pc, #500	; (adr r3, bcd00 <__ieee754_pow+0x8c0>)
   bcb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb0e:	4640      	mov	r0, r8
   bcb10:	4649      	mov	r1, r9
   bcb12:	f000 fe03 	bl	bd71c <__aeabi_dmul>
   bcb16:	4622      	mov	r2, r4
   bcb18:	462b      	mov	r3, r5
   bcb1a:	4682      	mov	sl, r0
   bcb1c:	468b      	mov	fp, r1
   bcb1e:	4640      	mov	r0, r8
   bcb20:	4649      	mov	r1, r9
   bcb22:	f000 fc43 	bl	bd3ac <__aeabi_dsub>
   bcb26:	4602      	mov	r2, r0
   bcb28:	460b      	mov	r3, r1
   bcb2a:	4630      	mov	r0, r6
   bcb2c:	4639      	mov	r1, r7
   bcb2e:	f000 fc3d 	bl	bd3ac <__aeabi_dsub>
   bcb32:	a375      	add	r3, pc, #468	; (adr r3, bcd08 <__ieee754_pow+0x8c8>)
   bcb34:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb38:	f000 fdf0 	bl	bd71c <__aeabi_dmul>
   bcb3c:	a374      	add	r3, pc, #464	; (adr r3, bcd10 <__ieee754_pow+0x8d0>)
   bcb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb42:	4604      	mov	r4, r0
   bcb44:	460d      	mov	r5, r1
   bcb46:	4640      	mov	r0, r8
   bcb48:	4649      	mov	r1, r9
   bcb4a:	f000 fde7 	bl	bd71c <__aeabi_dmul>
   bcb4e:	4602      	mov	r2, r0
   bcb50:	460b      	mov	r3, r1
   bcb52:	4620      	mov	r0, r4
   bcb54:	4629      	mov	r1, r5
   bcb56:	f000 fc2b 	bl	bd3b0 <__adddf3>
   bcb5a:	4606      	mov	r6, r0
   bcb5c:	460f      	mov	r7, r1
   bcb5e:	4632      	mov	r2, r6
   bcb60:	463b      	mov	r3, r7
   bcb62:	4650      	mov	r0, sl
   bcb64:	4659      	mov	r1, fp
   bcb66:	f000 fc23 	bl	bd3b0 <__adddf3>
   bcb6a:	4652      	mov	r2, sl
   bcb6c:	465b      	mov	r3, fp
   bcb6e:	4604      	mov	r4, r0
   bcb70:	460d      	mov	r5, r1
   bcb72:	f000 fc1b 	bl	bd3ac <__aeabi_dsub>
   bcb76:	4602      	mov	r2, r0
   bcb78:	460b      	mov	r3, r1
   bcb7a:	4630      	mov	r0, r6
   bcb7c:	4639      	mov	r1, r7
   bcb7e:	f000 fc15 	bl	bd3ac <__aeabi_dsub>
   bcb82:	4622      	mov	r2, r4
   bcb84:	4680      	mov	r8, r0
   bcb86:	4689      	mov	r9, r1
   bcb88:	462b      	mov	r3, r5
   bcb8a:	4620      	mov	r0, r4
   bcb8c:	4629      	mov	r1, r5
   bcb8e:	f000 fdc5 	bl	bd71c <__aeabi_dmul>
   bcb92:	a361      	add	r3, pc, #388	; (adr r3, bcd18 <__ieee754_pow+0x8d8>)
   bcb94:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb98:	4606      	mov	r6, r0
   bcb9a:	460f      	mov	r7, r1
   bcb9c:	f000 fdbe 	bl	bd71c <__aeabi_dmul>
   bcba0:	a35f      	add	r3, pc, #380	; (adr r3, bcd20 <__ieee754_pow+0x8e0>)
   bcba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcba6:	f000 fc01 	bl	bd3ac <__aeabi_dsub>
   bcbaa:	4632      	mov	r2, r6
   bcbac:	463b      	mov	r3, r7
   bcbae:	f000 fdb5 	bl	bd71c <__aeabi_dmul>
   bcbb2:	a35d      	add	r3, pc, #372	; (adr r3, bcd28 <__ieee754_pow+0x8e8>)
   bcbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcbb8:	f000 fbfa 	bl	bd3b0 <__adddf3>
   bcbbc:	4632      	mov	r2, r6
   bcbbe:	463b      	mov	r3, r7
   bcbc0:	f000 fdac 	bl	bd71c <__aeabi_dmul>
   bcbc4:	a35a      	add	r3, pc, #360	; (adr r3, bcd30 <__ieee754_pow+0x8f0>)
   bcbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcbca:	f000 fbef 	bl	bd3ac <__aeabi_dsub>
   bcbce:	4632      	mov	r2, r6
   bcbd0:	463b      	mov	r3, r7
   bcbd2:	f000 fda3 	bl	bd71c <__aeabi_dmul>
   bcbd6:	a358      	add	r3, pc, #352	; (adr r3, bcd38 <__ieee754_pow+0x8f8>)
   bcbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcbdc:	f000 fbe8 	bl	bd3b0 <__adddf3>
   bcbe0:	4632      	mov	r2, r6
   bcbe2:	463b      	mov	r3, r7
   bcbe4:	f000 fd9a 	bl	bd71c <__aeabi_dmul>
   bcbe8:	4602      	mov	r2, r0
   bcbea:	460b      	mov	r3, r1
   bcbec:	4620      	mov	r0, r4
   bcbee:	4629      	mov	r1, r5
   bcbf0:	f000 fbdc 	bl	bd3ac <__aeabi_dsub>
   bcbf4:	4606      	mov	r6, r0
   bcbf6:	460f      	mov	r7, r1
   bcbf8:	4632      	mov	r2, r6
   bcbfa:	463b      	mov	r3, r7
   bcbfc:	4620      	mov	r0, r4
   bcbfe:	4629      	mov	r1, r5
   bcc00:	f000 fd8c 	bl	bd71c <__aeabi_dmul>
   bcc04:	4602      	mov	r2, r0
   bcc06:	460b      	mov	r3, r1
   bcc08:	4630      	mov	r0, r6
   bcc0a:	4639      	mov	r1, r7
   bcc0c:	4616      	mov	r6, r2
   bcc0e:	461f      	mov	r7, r3
   bcc10:	2200      	movs	r2, #0
   bcc12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bcc16:	f000 fbc9 	bl	bd3ac <__aeabi_dsub>
   bcc1a:	4602      	mov	r2, r0
   bcc1c:	460b      	mov	r3, r1
   bcc1e:	4630      	mov	r0, r6
   bcc20:	4639      	mov	r1, r7
   bcc22:	f000 fea5 	bl	bd970 <__aeabi_ddiv>
   bcc26:	4642      	mov	r2, r8
   bcc28:	4606      	mov	r6, r0
   bcc2a:	460f      	mov	r7, r1
   bcc2c:	464b      	mov	r3, r9
   bcc2e:	4620      	mov	r0, r4
   bcc30:	4629      	mov	r1, r5
   bcc32:	f000 fd73 	bl	bd71c <__aeabi_dmul>
   bcc36:	4642      	mov	r2, r8
   bcc38:	464b      	mov	r3, r9
   bcc3a:	f000 fbb9 	bl	bd3b0 <__adddf3>
   bcc3e:	4602      	mov	r2, r0
   bcc40:	460b      	mov	r3, r1
   bcc42:	4630      	mov	r0, r6
   bcc44:	4639      	mov	r1, r7
   bcc46:	f000 fbb1 	bl	bd3ac <__aeabi_dsub>
   bcc4a:	4622      	mov	r2, r4
   bcc4c:	462b      	mov	r3, r5
   bcc4e:	f000 fbad 	bl	bd3ac <__aeabi_dsub>
   bcc52:	4602      	mov	r2, r0
   bcc54:	460b      	mov	r3, r1
   bcc56:	2000      	movs	r0, #0
   bcc58:	4941      	ldr	r1, [pc, #260]	; (bcd60 <__ieee754_pow+0x920>)
   bcc5a:	f000 fba7 	bl	bd3ac <__aeabi_dsub>
   bcc5e:	9a02      	ldr	r2, [sp, #8]
   bcc60:	460b      	mov	r3, r1
   bcc62:	4413      	add	r3, r2
   bcc64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   bcc68:	f2c0 8143 	blt.w	bcef2 <__ieee754_pow+0xab2>
   bcc6c:	4619      	mov	r1, r3
   bcc6e:	ec53 2b18 	vmov	r2, r3, d8
   bcc72:	f000 fd53 	bl	bd71c <__aeabi_dmul>
   bcc76:	ec41 0b10 	vmov	d0, r0, r1
   bcc7a:	e42d      	b.n	bc4d8 <__ieee754_pow+0x98>
   bcc7c:	f1bb 0f00 	cmp.w	fp, #0
   bcc80:	f6ff aca0 	blt.w	bc5c4 <__ieee754_pow+0x184>
   bcc84:	ed9f 0b2e 	vldr	d0, [pc, #184]	; bcd40 <__ieee754_pow+0x900>
   bcc88:	e426      	b.n	bc4d8 <__ieee754_pow+0x98>
   bcc8a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; bcd68 <__ieee754_pow+0x928>
   bcc8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bcc92:	4563      	cmp	r3, ip
   bcc94:	f340 80e7 	ble.w	bce66 <__ieee754_pow+0xa26>
   bcc98:	4b32      	ldr	r3, [pc, #200]	; (bcd64 <__ieee754_pow+0x924>)
   bcc9a:	440b      	add	r3, r1
   bcc9c:	4303      	orrs	r3, r0
   bcc9e:	d10a      	bne.n	bccb6 <__ieee754_pow+0x876>
   bcca0:	4622      	mov	r2, r4
   bcca2:	462b      	mov	r3, r5
   bcca4:	f000 fb82 	bl	bd3ac <__aeabi_dsub>
   bcca8:	4632      	mov	r2, r6
   bccaa:	463b      	mov	r3, r7
   bccac:	f000 ffbc 	bl	bdc28 <__aeabi_dcmpge>
   bccb0:	2800      	cmp	r0, #0
   bccb2:	f43f aef3 	beq.w	bca9c <__ieee754_pow+0x65c>
   bccb6:	a324      	add	r3, pc, #144	; (adr r3, bcd48 <__ieee754_pow+0x908>)
   bccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccbc:	ec51 0b18 	vmov	r0, r1, d8
   bccc0:	f000 fd2c 	bl	bd71c <__aeabi_dmul>
   bccc4:	a320      	add	r3, pc, #128	; (adr r3, bcd48 <__ieee754_pow+0x908>)
   bccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccca:	f000 fd27 	bl	bd71c <__aeabi_dmul>
   bccce:	ec41 0b10 	vmov	d0, r0, r1
   bccd2:	e401      	b.n	bc4d8 <__ieee754_pow+0x98>
   bccd4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; bcd50 <__ieee754_pow+0x910>
   bccd8:	eeb0 8a47 	vmov.f32	s16, s14
   bccdc:	eef0 8a67 	vmov.f32	s17, s15
   bcce0:	e686      	b.n	bc9f0 <__ieee754_pow+0x5b0>
   bcce2:	f1bb 0f00 	cmp.w	fp, #0
   bcce6:	dacd      	bge.n	bcc84 <__ieee754_pow+0x844>
   bcce8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   bccec:	ee00 6a10 	vmov	s0, r6
   bccf0:	ee00 3a90 	vmov	s1, r3
   bccf4:	f7ff bbf0 	b.w	bc4d8 <__ieee754_pow+0x98>
   bccf8:	652b82fe 	.word	0x652b82fe
   bccfc:	3c971547 	.word	0x3c971547
   bcd00:	00000000 	.word	0x00000000
   bcd04:	3fe62e43 	.word	0x3fe62e43
   bcd08:	fefa39ef 	.word	0xfefa39ef
   bcd0c:	3fe62e42 	.word	0x3fe62e42
   bcd10:	0ca86c39 	.word	0x0ca86c39
   bcd14:	be205c61 	.word	0xbe205c61
   bcd18:	72bea4d0 	.word	0x72bea4d0
   bcd1c:	3e663769 	.word	0x3e663769
   bcd20:	c5d26bf1 	.word	0xc5d26bf1
   bcd24:	3ebbbd41 	.word	0x3ebbbd41
   bcd28:	af25de2c 	.word	0xaf25de2c
   bcd2c:	3f11566a 	.word	0x3f11566a
   bcd30:	16bebd93 	.word	0x16bebd93
   bcd34:	3f66c16c 	.word	0x3f66c16c
   bcd38:	5555553e 	.word	0x5555553e
   bcd3c:	3fc55555 	.word	0x3fc55555
	...
   bcd48:	c2f8f359 	.word	0xc2f8f359
   bcd4c:	01a56e1f 	.word	0x01a56e1f
   bcd50:	00000000 	.word	0x00000000
   bcd54:	3ff00000 	.word	0x3ff00000
   bcd58:	408fffff 	.word	0x408fffff
   bcd5c:	000fffff 	.word	0x000fffff
   bcd60:	3ff00000 	.word	0x3ff00000
   bcd64:	3f6f3400 	.word	0x3f6f3400
   bcd68:	4090cbff 	.word	0x4090cbff
   bcd6c:	4598      	cmp	r8, r3
   bcd6e:	db85      	blt.n	bcc7c <__ieee754_pow+0x83c>
   bcd70:	4b7d      	ldr	r3, [pc, #500]	; (bcf68 <__ieee754_pow+0xb28>)
   bcd72:	4598      	cmp	r8, r3
   bcd74:	f73f ac22 	bgt.w	bc5bc <__ieee754_pow+0x17c>
   bcd78:	ec51 0b10 	vmov	r0, r1, d0
   bcd7c:	4b7a      	ldr	r3, [pc, #488]	; (bcf68 <__ieee754_pow+0xb28>)
   bcd7e:	2200      	movs	r2, #0
   bcd80:	f000 fb14 	bl	bd3ac <__aeabi_dsub>
   bcd84:	a368      	add	r3, pc, #416	; (adr r3, bcf28 <__ieee754_pow+0xae8>)
   bcd86:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd8a:	4604      	mov	r4, r0
   bcd8c:	460d      	mov	r5, r1
   bcd8e:	f000 fcc5 	bl	bd71c <__aeabi_dmul>
   bcd92:	a367      	add	r3, pc, #412	; (adr r3, bcf30 <__ieee754_pow+0xaf0>)
   bcd94:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd98:	4682      	mov	sl, r0
   bcd9a:	468b      	mov	fp, r1
   bcd9c:	4620      	mov	r0, r4
   bcd9e:	4629      	mov	r1, r5
   bcda0:	f000 fcbc 	bl	bd71c <__aeabi_dmul>
   bcda4:	4b71      	ldr	r3, [pc, #452]	; (bcf6c <__ieee754_pow+0xb2c>)
   bcda6:	ec41 0b18 	vmov	d8, r0, r1
   bcdaa:	2200      	movs	r2, #0
   bcdac:	4620      	mov	r0, r4
   bcdae:	4629      	mov	r1, r5
   bcdb0:	f000 fcb4 	bl	bd71c <__aeabi_dmul>
   bcdb4:	4602      	mov	r2, r0
   bcdb6:	460b      	mov	r3, r1
   bcdb8:	a15f      	add	r1, pc, #380	; (adr r1, bcf38 <__ieee754_pow+0xaf8>)
   bcdba:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcdbe:	f000 faf5 	bl	bd3ac <__aeabi_dsub>
   bcdc2:	4622      	mov	r2, r4
   bcdc4:	462b      	mov	r3, r5
   bcdc6:	f000 fca9 	bl	bd71c <__aeabi_dmul>
   bcdca:	4602      	mov	r2, r0
   bcdcc:	460b      	mov	r3, r1
   bcdce:	2000      	movs	r0, #0
   bcdd0:	4967      	ldr	r1, [pc, #412]	; (bcf70 <__ieee754_pow+0xb30>)
   bcdd2:	f000 faeb 	bl	bd3ac <__aeabi_dsub>
   bcdd6:	4622      	mov	r2, r4
   bcdd8:	4680      	mov	r8, r0
   bcdda:	4689      	mov	r9, r1
   bcddc:	462b      	mov	r3, r5
   bcdde:	4620      	mov	r0, r4
   bcde0:	4629      	mov	r1, r5
   bcde2:	f000 fc9b 	bl	bd71c <__aeabi_dmul>
   bcde6:	4602      	mov	r2, r0
   bcde8:	460b      	mov	r3, r1
   bcdea:	4640      	mov	r0, r8
   bcdec:	4649      	mov	r1, r9
   bcdee:	f000 fc95 	bl	bd71c <__aeabi_dmul>
   bcdf2:	a353      	add	r3, pc, #332	; (adr r3, bcf40 <__ieee754_pow+0xb00>)
   bcdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcdf8:	f000 fc90 	bl	bd71c <__aeabi_dmul>
   bcdfc:	4602      	mov	r2, r0
   bcdfe:	460b      	mov	r3, r1
   bce00:	ec51 0b18 	vmov	r0, r1, d8
   bce04:	f000 fad2 	bl	bd3ac <__aeabi_dsub>
   bce08:	4680      	mov	r8, r0
   bce0a:	4689      	mov	r9, r1
   bce0c:	4642      	mov	r2, r8
   bce0e:	464b      	mov	r3, r9
   bce10:	4650      	mov	r0, sl
   bce12:	4659      	mov	r1, fp
   bce14:	f000 facc 	bl	bd3b0 <__adddf3>
   bce18:	2000      	movs	r0, #0
   bce1a:	4652      	mov	r2, sl
   bce1c:	465b      	mov	r3, fp
   bce1e:	4604      	mov	r4, r0
   bce20:	460d      	mov	r5, r1
   bce22:	e591      	b.n	bc948 <__ieee754_pow+0x508>
   bce24:	4622      	mov	r2, r4
   bce26:	462b      	mov	r3, r5
   bce28:	4620      	mov	r0, r4
   bce2a:	4629      	mov	r1, r5
   bce2c:	f000 fc76 	bl	bd71c <__aeabi_dmul>
   bce30:	ec41 0b10 	vmov	d0, r0, r1
   bce34:	f7ff bb50 	b.w	bc4d8 <__ieee754_pow+0x98>
   bce38:	494b      	ldr	r1, [pc, #300]	; (bcf68 <__ieee754_pow+0xb28>)
   bce3a:	2000      	movs	r0, #0
   bce3c:	4622      	mov	r2, r4
   bce3e:	462b      	mov	r3, r5
   bce40:	f000 fd96 	bl	bd970 <__aeabi_ddiv>
   bce44:	ec41 0b10 	vmov	d0, r0, r1
   bce48:	f7ff bb46 	b.w	bc4d8 <__ieee754_pow+0x98>
   bce4c:	2b00      	cmp	r3, #0
   bce4e:	d144      	bne.n	bceda <__ieee754_pow+0xa9a>
   bce50:	f1c1 0114 	rsb	r1, r1, #20
   bce54:	fa4a f001 	asr.w	r0, sl, r1
   bce58:	fa00 f101 	lsl.w	r1, r0, r1
   bce5c:	4551      	cmp	r1, sl
   bce5e:	d05a      	beq.n	bcf16 <__ieee754_pow+0xad6>
   bce60:	9300      	str	r3, [sp, #0]
   bce62:	f7ff bb17 	b.w	bc494 <__ieee754_pow+0x54>
   bce66:	4a42      	ldr	r2, [pc, #264]	; (bcf70 <__ieee754_pow+0xb30>)
   bce68:	4293      	cmp	r3, r2
   bce6a:	dc5b      	bgt.n	bcf24 <__ieee754_pow+0xae4>
   bce6c:	e9dd 1200 	ldrd	r1, r2, [sp]
   bce70:	9102      	str	r1, [sp, #8]
   bce72:	9100      	str	r1, [sp, #0]
   bce74:	e646      	b.n	bcb04 <__ieee754_pow+0x6c4>
   bce76:	a334      	add	r3, pc, #208	; (adr r3, bcf48 <__ieee754_pow+0xb08>)
   bce78:	e9d3 2300 	ldrd	r2, r3, [r3]
   bce7c:	ec51 0b18 	vmov	r0, r1, d8
   bce80:	f000 fc4c 	bl	bd71c <__aeabi_dmul>
   bce84:	a330      	add	r3, pc, #192	; (adr r3, bcf48 <__ieee754_pow+0xb08>)
   bce86:	e9d3 2300 	ldrd	r2, r3, [r3]
   bce8a:	f000 fc47 	bl	bd71c <__aeabi_dmul>
   bce8e:	ec41 0b10 	vmov	d0, r0, r1
   bce92:	f7ff bb21 	b.w	bc4d8 <__ieee754_pow+0x98>
   bce96:	9b00      	ldr	r3, [sp, #0]
   bce98:	2b01      	cmp	r3, #1
   bce9a:	f47f ab1d 	bne.w	bc4d8 <__ieee754_pow+0x98>
   bce9e:	ee10 1a90 	vmov	r1, s1
   bcea2:	ee10 2a10 	vmov	r2, s0
   bcea6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bceaa:	ec43 2b10 	vmov	d0, r2, r3
   bceae:	f7ff bb13 	b.w	bc4d8 <__ieee754_pow+0x98>
   bceb2:	ed9f 7b27 	vldr	d7, [pc, #156]	; bcf50 <__ieee754_pow+0xb10>
   bceb6:	eeb0 ca47 	vmov.f32	s24, s14
   bceba:	eef0 ca67 	vmov.f32	s25, s15
   bcebe:	ed9f 7b26 	vldr	d7, [pc, #152]	; bcf58 <__ieee754_pow+0xb18>
   bcec2:	eeb0 da47 	vmov.f32	s26, s14
   bcec6:	eef0 da67 	vmov.f32	s27, s15
   bceca:	ed9f 7b25 	vldr	d7, [pc, #148]	; bcf60 <__ieee754_pow+0xb20>
   bcece:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   bced2:	ec53 2b17 	vmov	r2, r3, d7
   bced6:	f7ff bbeb 	b.w	bc6b0 <__ieee754_pow+0x270>
   bceda:	ec45 4b10 	vmov	d0, r4, r5
   bcede:	9200      	str	r2, [sp, #0]
   bcee0:	f000 f914 	bl	bd10c <fabs>
   bcee4:	9a00      	ldr	r2, [sp, #0]
   bcee6:	2a00      	cmp	r2, #0
   bcee8:	f47f ab92 	bne.w	bc610 <__ieee754_pow+0x1d0>
   bceec:	9200      	str	r2, [sp, #0]
   bceee:	f7ff bb26 	b.w	bc53e <__ieee754_pow+0xfe>
   bcef2:	ec41 0b10 	vmov	d0, r0, r1
   bcef6:	9800      	ldr	r0, [sp, #0]
   bcef8:	f000 f9c2 	bl	bd280 <scalbn>
   bcefc:	ec51 0b10 	vmov	r0, r1, d0
   bcf00:	e6b5      	b.n	bcc6e <__ieee754_pow+0x82e>
   bcf02:	f000 0001 	and.w	r0, r0, #1
   bcf06:	f1c0 0102 	rsb	r1, r0, #2
   bcf0a:	9100      	str	r1, [sp, #0]
   bcf0c:	2b00      	cmp	r3, #0
   bcf0e:	f43f aac1 	beq.w	bc494 <__ieee754_pow+0x54>
   bcf12:	f7ff bb0d 	b.w	bc530 <__ieee754_pow+0xf0>
   bcf16:	f000 0001 	and.w	r0, r0, #1
   bcf1a:	f1c0 0302 	rsb	r3, r0, #2
   bcf1e:	9300      	str	r3, [sp, #0]
   bcf20:	f7ff bab8 	b.w	bc494 <__ieee754_pow+0x54>
   bcf24:	151b      	asrs	r3, r3, #20
   bcf26:	e5bb      	b.n	bcaa0 <__ieee754_pow+0x660>
   bcf28:	60000000 	.word	0x60000000
   bcf2c:	3ff71547 	.word	0x3ff71547
   bcf30:	f85ddf44 	.word	0xf85ddf44
   bcf34:	3e54ae0b 	.word	0x3e54ae0b
   bcf38:	55555555 	.word	0x55555555
   bcf3c:	3fd55555 	.word	0x3fd55555
   bcf40:	652b82fe 	.word	0x652b82fe
   bcf44:	3ff71547 	.word	0x3ff71547
   bcf48:	8800759c 	.word	0x8800759c
   bcf4c:	7e37e43c 	.word	0x7e37e43c
   bcf50:	40000000 	.word	0x40000000
   bcf54:	3fe2b803 	.word	0x3fe2b803
   bcf58:	43cfd006 	.word	0x43cfd006
   bcf5c:	3e4cfdeb 	.word	0x3e4cfdeb
   bcf60:	00000000 	.word	0x00000000
   bcf64:	3ff80000 	.word	0x3ff80000
   bcf68:	3ff00000 	.word	0x3ff00000
   bcf6c:	3fd00000 	.word	0x3fd00000
   bcf70:	3fe00000 	.word	0x3fe00000

000bcf74 <__ieee754_sqrt>:
   bcf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcf78:	4a63      	ldr	r2, [pc, #396]	; (bd108 <__ieee754_sqrt+0x194>)
   bcf7a:	ec55 4b10 	vmov	r4, r5, d0
   bcf7e:	43aa      	bics	r2, r5
   bcf80:	f000 809f 	beq.w	bd0c2 <__ieee754_sqrt+0x14e>
   bcf84:	2d00      	cmp	r5, #0
   bcf86:	ee10 ca10 	vmov	ip, s0
   bcf8a:	462b      	mov	r3, r5
   bcf8c:	dd54      	ble.n	bd038 <__ieee754_sqrt+0xc4>
   bcf8e:	1529      	asrs	r1, r5, #20
   bcf90:	d063      	beq.n	bd05a <__ieee754_sqrt+0xe6>
   bcf92:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bcf96:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bcf9a:	07c9      	lsls	r1, r1, #31
   bcf9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bcfa0:	d404      	bmi.n	bcfac <__ieee754_sqrt+0x38>
   bcfa2:	005b      	lsls	r3, r3, #1
   bcfa4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bcfa8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcfac:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bcfb0:	2600      	movs	r6, #0
   bcfb2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bcfb6:	107f      	asrs	r7, r7, #1
   bcfb8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcfbc:	f04f 0e16 	mov.w	lr, #22
   bcfc0:	4634      	mov	r4, r6
   bcfc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bcfc6:	18a1      	adds	r1, r4, r2
   bcfc8:	4299      	cmp	r1, r3
   bcfca:	dc02      	bgt.n	bcfd2 <__ieee754_sqrt+0x5e>
   bcfcc:	1a5b      	subs	r3, r3, r1
   bcfce:	188c      	adds	r4, r1, r2
   bcfd0:	4416      	add	r6, r2
   bcfd2:	005b      	lsls	r3, r3, #1
   bcfd4:	f1be 0e01 	subs.w	lr, lr, #1
   bcfd8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bcfdc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bcfe0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcfe4:	d1ef      	bne.n	bcfc6 <__ieee754_sqrt+0x52>
   bcfe6:	4675      	mov	r5, lr
   bcfe8:	2020      	movs	r0, #32
   bcfea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bcfee:	e00a      	b.n	bd006 <__ieee754_sqrt+0x92>
   bcff0:	d044      	beq.n	bd07c <__ieee754_sqrt+0x108>
   bcff2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bcff6:	3801      	subs	r0, #1
   bcff8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bcffc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bd000:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bd004:	d043      	beq.n	bd08e <__ieee754_sqrt+0x11a>
   bd006:	42a3      	cmp	r3, r4
   bd008:	eb02 010e 	add.w	r1, r2, lr
   bd00c:	ddf0      	ble.n	bcff0 <__ieee754_sqrt+0x7c>
   bd00e:	2900      	cmp	r1, #0
   bd010:	eb01 0e02 	add.w	lr, r1, r2
   bd014:	db0a      	blt.n	bd02c <__ieee754_sqrt+0xb8>
   bd016:	46a0      	mov	r8, r4
   bd018:	1b1b      	subs	r3, r3, r4
   bd01a:	4561      	cmp	r1, ip
   bd01c:	bf88      	it	hi
   bd01e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bd022:	ebac 0c01 	sub.w	ip, ip, r1
   bd026:	4415      	add	r5, r2
   bd028:	4644      	mov	r4, r8
   bd02a:	e7e2      	b.n	bcff2 <__ieee754_sqrt+0x7e>
   bd02c:	f1be 0f00 	cmp.w	lr, #0
   bd030:	dbf1      	blt.n	bd016 <__ieee754_sqrt+0xa2>
   bd032:	f104 0801 	add.w	r8, r4, #1
   bd036:	e7ef      	b.n	bd018 <__ieee754_sqrt+0xa4>
   bd038:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bd03c:	4322      	orrs	r2, r4
   bd03e:	d038      	beq.n	bd0b2 <__ieee754_sqrt+0x13e>
   bd040:	2d00      	cmp	r5, #0
   bd042:	d14e      	bne.n	bd0e2 <__ieee754_sqrt+0x16e>
   bd044:	4629      	mov	r1, r5
   bd046:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bd04a:	3915      	subs	r1, #21
   bd04c:	4613      	mov	r3, r2
   bd04e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bd052:	2a00      	cmp	r2, #0
   bd054:	d0f7      	beq.n	bd046 <__ieee754_sqrt+0xd2>
   bd056:	02d6      	lsls	r6, r2, #11
   bd058:	d450      	bmi.n	bd0fc <__ieee754_sqrt+0x188>
   bd05a:	2000      	movs	r0, #0
   bd05c:	005b      	lsls	r3, r3, #1
   bd05e:	02dd      	lsls	r5, r3, #11
   bd060:	4604      	mov	r4, r0
   bd062:	f100 0001 	add.w	r0, r0, #1
   bd066:	d5f9      	bpl.n	bd05c <__ieee754_sqrt+0xe8>
   bd068:	461a      	mov	r2, r3
   bd06a:	4663      	mov	r3, ip
   bd06c:	fa0c fc00 	lsl.w	ip, ip, r0
   bd070:	f1c0 0020 	rsb	r0, r0, #32
   bd074:	40c3      	lsrs	r3, r0
   bd076:	1b09      	subs	r1, r1, r4
   bd078:	4313      	orrs	r3, r2
   bd07a:	e78a      	b.n	bcf92 <__ieee754_sqrt+0x1e>
   bd07c:	4561      	cmp	r1, ip
   bd07e:	d8b8      	bhi.n	bcff2 <__ieee754_sqrt+0x7e>
   bd080:	2900      	cmp	r1, #0
   bd082:	eb01 0e02 	add.w	lr, r1, r2
   bd086:	dbd1      	blt.n	bd02c <__ieee754_sqrt+0xb8>
   bd088:	4698      	mov	r8, r3
   bd08a:	2300      	movs	r3, #0
   bd08c:	e7c9      	b.n	bd022 <__ieee754_sqrt+0xae>
   bd08e:	ea53 030c 	orrs.w	r3, r3, ip
   bd092:	d110      	bne.n	bd0b6 <__ieee754_sqrt+0x142>
   bd094:	0868      	lsrs	r0, r5, #1
   bd096:	1071      	asrs	r1, r6, #1
   bd098:	07f3      	lsls	r3, r6, #31
   bd09a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bd09e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bd0a2:	bf48      	it	mi
   bd0a4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bd0a8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bd0ac:	4602      	mov	r2, r0
   bd0ae:	ec43 2b10 	vmov	d0, r2, r3
   bd0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd0b6:	1c6a      	adds	r2, r5, #1
   bd0b8:	bf16      	itet	ne
   bd0ba:	1c68      	addne	r0, r5, #1
   bd0bc:	3601      	addeq	r6, #1
   bd0be:	0840      	lsrne	r0, r0, #1
   bd0c0:	e7e9      	b.n	bd096 <__ieee754_sqrt+0x122>
   bd0c2:	ee10 2a10 	vmov	r2, s0
   bd0c6:	ee10 0a10 	vmov	r0, s0
   bd0ca:	462b      	mov	r3, r5
   bd0cc:	4629      	mov	r1, r5
   bd0ce:	f000 fb25 	bl	bd71c <__aeabi_dmul>
   bd0d2:	4622      	mov	r2, r4
   bd0d4:	462b      	mov	r3, r5
   bd0d6:	f000 f96b 	bl	bd3b0 <__adddf3>
   bd0da:	ec41 0b10 	vmov	d0, r0, r1
   bd0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd0e2:	ee10 2a10 	vmov	r2, s0
   bd0e6:	4620      	mov	r0, r4
   bd0e8:	4629      	mov	r1, r5
   bd0ea:	f000 f95f 	bl	bd3ac <__aeabi_dsub>
   bd0ee:	4602      	mov	r2, r0
   bd0f0:	460b      	mov	r3, r1
   bd0f2:	f000 fc3d 	bl	bd970 <__aeabi_ddiv>
   bd0f6:	ec41 0b10 	vmov	d0, r0, r1
   bd0fa:	e7da      	b.n	bd0b2 <__ieee754_sqrt+0x13e>
   bd0fc:	4663      	mov	r3, ip
   bd0fe:	2020      	movs	r0, #32
   bd100:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bd104:	e7b6      	b.n	bd074 <__ieee754_sqrt+0x100>
   bd106:	bf00      	nop
   bd108:	7ff00000 	.word	0x7ff00000

000bd10c <fabs>:
   bd10c:	ec51 0b10 	vmov	r0, r1, d0
   bd110:	ee10 2a10 	vmov	r2, s0
   bd114:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bd118:	ec43 2b10 	vmov	d0, r2, r3
   bd11c:	4770      	bx	lr
   bd11e:	bf00      	nop

000bd120 <finite>:
   bd120:	b082      	sub	sp, #8
   bd122:	ed8d 0b00 	vstr	d0, [sp]
   bd126:	9801      	ldr	r0, [sp, #4]
   bd128:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bd12c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bd130:	0fc0      	lsrs	r0, r0, #31
   bd132:	b002      	add	sp, #8
   bd134:	4770      	bx	lr
   bd136:	bf00      	nop

000bd138 <nan>:
   bd138:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd140 <nan+0x8>
   bd13c:	4770      	bx	lr
   bd13e:	bf00      	nop
   bd140:	00000000 	.word	0x00000000
   bd144:	7ff80000 	.word	0x7ff80000

000bd148 <rint>:
   bd148:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd14a:	ec53 2b10 	vmov	r2, r3, d0
   bd14e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bd152:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bd156:	2913      	cmp	r1, #19
   bd158:	ee10 0a10 	vmov	r0, s0
   bd15c:	b083      	sub	sp, #12
   bd15e:	461c      	mov	r4, r3
   bd160:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   bd164:	dc3a      	bgt.n	bd1dc <rint+0x94>
   bd166:	2900      	cmp	r1, #0
   bd168:	db30      	blt.n	bd1cc <rint+0x84>
   bd16a:	4d42      	ldr	r5, [pc, #264]	; (bd274 <rint+0x12c>)
   bd16c:	fa45 fc01 	asr.w	ip, r5, r1
   bd170:	ea03 050c 	and.w	r5, r3, ip
   bd174:	4315      	orrs	r5, r2
   bd176:	d02d      	beq.n	bd1d4 <rint+0x8c>
   bd178:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   bd17c:	4318      	orrs	r0, r3
   bd17e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   bd182:	d00c      	beq.n	bd19e <rint+0x56>
   bd184:	ea24 0c0c 	bic.w	ip, r4, ip
   bd188:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bd18c:	2913      	cmp	r1, #19
   bd18e:	fa44 f101 	asr.w	r1, r4, r1
   bd192:	bf0c      	ite	eq
   bd194:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bd198:	2000      	movne	r0, #0
   bd19a:	ea4c 0401 	orr.w	r4, ip, r1
   bd19e:	4936      	ldr	r1, [pc, #216]	; (bd278 <rint+0x130>)
   bd1a0:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bd1a4:	4623      	mov	r3, r4
   bd1a6:	e9de 4500 	ldrd	r4, r5, [lr]
   bd1aa:	4602      	mov	r2, r0
   bd1ac:	4629      	mov	r1, r5
   bd1ae:	4620      	mov	r0, r4
   bd1b0:	f000 f8fe 	bl	bd3b0 <__adddf3>
   bd1b4:	e9cd 0100 	strd	r0, r1, [sp]
   bd1b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   bd1bc:	4622      	mov	r2, r4
   bd1be:	462b      	mov	r3, r5
   bd1c0:	f000 f8f4 	bl	bd3ac <__aeabi_dsub>
   bd1c4:	ec41 0b10 	vmov	d0, r0, r1
   bd1c8:	b003      	add	sp, #12
   bd1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd1cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bd1d0:	4311      	orrs	r1, r2
   bd1d2:	d124      	bne.n	bd21e <rint+0xd6>
   bd1d4:	ec43 2b10 	vmov	d0, r2, r3
   bd1d8:	b003      	add	sp, #12
   bd1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd1dc:	2933      	cmp	r1, #51	; 0x33
   bd1de:	dd08      	ble.n	bd1f2 <rint+0xaa>
   bd1e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bd1e4:	d1f6      	bne.n	bd1d4 <rint+0x8c>
   bd1e6:	4619      	mov	r1, r3
   bd1e8:	f000 f8e2 	bl	bd3b0 <__adddf3>
   bd1ec:	ec41 0b10 	vmov	d0, r0, r1
   bd1f0:	e7f2      	b.n	bd1d8 <rint+0x90>
   bd1f2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bd1f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bd1fa:	fa21 f10c 	lsr.w	r1, r1, ip
   bd1fe:	420a      	tst	r2, r1
   bd200:	d0e8      	beq.n	bd1d4 <rint+0x8c>
   bd202:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bd206:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bd20a:	d0c8      	beq.n	bd19e <rint+0x56>
   bd20c:	ea20 0303 	bic.w	r3, r0, r3
   bd210:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bd214:	fa40 fc0c 	asr.w	ip, r0, ip
   bd218:	ea43 000c 	orr.w	r0, r3, ip
   bd21c:	e7bf      	b.n	bd19e <rint+0x56>
   bd21e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bd222:	4318      	orrs	r0, r3
   bd224:	4a14      	ldr	r2, [pc, #80]	; (bd278 <rint+0x130>)
   bd226:	4243      	negs	r3, r0
   bd228:	4303      	orrs	r3, r0
   bd22a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   bd22e:	0b1b      	lsrs	r3, r3, #12
   bd230:	0c62      	lsrs	r2, r4, #17
   bd232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   bd236:	0452      	lsls	r2, r2, #17
   bd238:	ea43 0702 	orr.w	r7, r3, r2
   bd23c:	463b      	mov	r3, r7
   bd23e:	e9de 6700 	ldrd	r6, r7, [lr]
   bd242:	ee10 2a10 	vmov	r2, s0
   bd246:	4630      	mov	r0, r6
   bd248:	4639      	mov	r1, r7
   bd24a:	f000 f8b1 	bl	bd3b0 <__adddf3>
   bd24e:	e9cd 0100 	strd	r0, r1, [sp]
   bd252:	4632      	mov	r2, r6
   bd254:	463b      	mov	r3, r7
   bd256:	e9dd 0100 	ldrd	r0, r1, [sp]
   bd25a:	f000 f8a7 	bl	bd3ac <__aeabi_dsub>
   bd25e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   bd262:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd266:	4602      	mov	r2, r0
   bd268:	ea41 0304 	orr.w	r3, r1, r4
   bd26c:	ec43 2b10 	vmov	d0, r2, r3
   bd270:	b003      	add	sp, #12
   bd272:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd274:	000fffff 	.word	0x000fffff
   bd278:	000bf810 	.word	0x000bf810
   bd27c:	00000000 	.word	0x00000000

000bd280 <scalbn>:
   bd280:	b538      	push	{r3, r4, r5, lr}
   bd282:	ec53 2b10 	vmov	r2, r3, d0
   bd286:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bd28a:	4604      	mov	r4, r0
   bd28c:	469c      	mov	ip, r3
   bd28e:	bb89      	cbnz	r1, bd2f4 <scalbn+0x74>
   bd290:	ee10 1a10 	vmov	r1, s0
   bd294:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bd298:	ea5c 0101 	orrs.w	r1, ip, r1
   bd29c:	d029      	beq.n	bd2f2 <scalbn+0x72>
   bd29e:	4619      	mov	r1, r3
   bd2a0:	2200      	movs	r2, #0
   bd2a2:	4b3d      	ldr	r3, [pc, #244]	; (bd398 <scalbn+0x118>)
   bd2a4:	4d3d      	ldr	r5, [pc, #244]	; (bd39c <scalbn+0x11c>)
   bd2a6:	ee10 0a10 	vmov	r0, s0
   bd2aa:	f000 fa37 	bl	bd71c <__aeabi_dmul>
   bd2ae:	42ac      	cmp	r4, r5
   bd2b0:	4602      	mov	r2, r0
   bd2b2:	460b      	mov	r3, r1
   bd2b4:	db16      	blt.n	bd2e4 <scalbn+0x64>
   bd2b6:	468c      	mov	ip, r1
   bd2b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bd2bc:	3936      	subs	r1, #54	; 0x36
   bd2be:	4421      	add	r1, r4
   bd2c0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bd2c4:	4281      	cmp	r1, r0
   bd2c6:	dc21      	bgt.n	bd30c <scalbn+0x8c>
   bd2c8:	2900      	cmp	r1, #0
   bd2ca:	dc47      	bgt.n	bd35c <scalbn+0xdc>
   bd2cc:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bd2d0:	da34      	bge.n	bd33c <scalbn+0xbc>
   bd2d2:	f24c 3150 	movw	r1, #50000	; 0xc350
   bd2d6:	428c      	cmp	r4, r1
   bd2d8:	dc18      	bgt.n	bd30c <scalbn+0x8c>
   bd2da:	2b00      	cmp	r3, #0
   bd2dc:	a126      	add	r1, pc, #152	; (adr r1, bd378 <scalbn+0xf8>)
   bd2de:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd2e2:	db44      	blt.n	bd36e <scalbn+0xee>
   bd2e4:	a324      	add	r3, pc, #144	; (adr r3, bd378 <scalbn+0xf8>)
   bd2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd2ea:	f000 fa17 	bl	bd71c <__aeabi_dmul>
   bd2ee:	ec41 0b10 	vmov	d0, r0, r1
   bd2f2:	bd38      	pop	{r3, r4, r5, pc}
   bd2f4:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bd2f8:	4281      	cmp	r1, r0
   bd2fa:	d1e0      	bne.n	bd2be <scalbn+0x3e>
   bd2fc:	ee10 0a10 	vmov	r0, s0
   bd300:	4619      	mov	r1, r3
   bd302:	f000 f855 	bl	bd3b0 <__adddf3>
   bd306:	ec41 0b10 	vmov	d0, r0, r1
   bd30a:	bd38      	pop	{r3, r4, r5, pc}
   bd30c:	2b00      	cmp	r3, #0
   bd30e:	a11c      	add	r1, pc, #112	; (adr r1, bd380 <scalbn+0x100>)
   bd310:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd314:	db07      	blt.n	bd326 <scalbn+0xa6>
   bd316:	a31a      	add	r3, pc, #104	; (adr r3, bd380 <scalbn+0x100>)
   bd318:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd31c:	f000 f9fe 	bl	bd71c <__aeabi_dmul>
   bd320:	ec41 0b10 	vmov	d0, r0, r1
   bd324:	bd38      	pop	{r3, r4, r5, pc}
   bd326:	a118      	add	r1, pc, #96	; (adr r1, bd388 <scalbn+0x108>)
   bd328:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd32c:	a314      	add	r3, pc, #80	; (adr r3, bd380 <scalbn+0x100>)
   bd32e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd332:	f000 f9f3 	bl	bd71c <__aeabi_dmul>
   bd336:	ec41 0b10 	vmov	d0, r0, r1
   bd33a:	e7f3      	b.n	bd324 <scalbn+0xa4>
   bd33c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bd340:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bd344:	3136      	adds	r1, #54	; 0x36
   bd346:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bd34a:	4610      	mov	r0, r2
   bd34c:	4619      	mov	r1, r3
   bd34e:	2200      	movs	r2, #0
   bd350:	4b13      	ldr	r3, [pc, #76]	; (bd3a0 <scalbn+0x120>)
   bd352:	f000 f9e3 	bl	bd71c <__aeabi_dmul>
   bd356:	ec41 0b10 	vmov	d0, r0, r1
   bd35a:	bd38      	pop	{r3, r4, r5, pc}
   bd35c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bd360:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bd364:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bd368:	ec43 2b10 	vmov	d0, r2, r3
   bd36c:	bd38      	pop	{r3, r4, r5, pc}
   bd36e:	a108      	add	r1, pc, #32	; (adr r1, bd390 <scalbn+0x110>)
   bd370:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd374:	e7b6      	b.n	bd2e4 <scalbn+0x64>
   bd376:	bf00      	nop
   bd378:	c2f8f359 	.word	0xc2f8f359
   bd37c:	01a56e1f 	.word	0x01a56e1f
   bd380:	8800759c 	.word	0x8800759c
   bd384:	7e37e43c 	.word	0x7e37e43c
   bd388:	8800759c 	.word	0x8800759c
   bd38c:	fe37e43c 	.word	0xfe37e43c
   bd390:	c2f8f359 	.word	0xc2f8f359
   bd394:	81a56e1f 	.word	0x81a56e1f
   bd398:	43500000 	.word	0x43500000
   bd39c:	ffff3cb0 	.word	0xffff3cb0
   bd3a0:	3c900000 	.word	0x3c900000

000bd3a4 <__aeabi_drsub>:
   bd3a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd3a8:	e002      	b.n	bd3b0 <__adddf3>
   bd3aa:	bf00      	nop

000bd3ac <__aeabi_dsub>:
   bd3ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd3b0 <__adddf3>:
   bd3b0:	b530      	push	{r4, r5, lr}
   bd3b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd3b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd3ba:	ea94 0f05 	teq	r4, r5
   bd3be:	bf08      	it	eq
   bd3c0:	ea90 0f02 	teqeq	r0, r2
   bd3c4:	bf1f      	itttt	ne
   bd3c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd3ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd3ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd3d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd3d6:	f000 80e2 	beq.w	bd59e <__adddf3+0x1ee>
   bd3da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd3de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd3e2:	bfb8      	it	lt
   bd3e4:	426d      	neglt	r5, r5
   bd3e6:	dd0c      	ble.n	bd402 <__adddf3+0x52>
   bd3e8:	442c      	add	r4, r5
   bd3ea:	ea80 0202 	eor.w	r2, r0, r2
   bd3ee:	ea81 0303 	eor.w	r3, r1, r3
   bd3f2:	ea82 0000 	eor.w	r0, r2, r0
   bd3f6:	ea83 0101 	eor.w	r1, r3, r1
   bd3fa:	ea80 0202 	eor.w	r2, r0, r2
   bd3fe:	ea81 0303 	eor.w	r3, r1, r3
   bd402:	2d36      	cmp	r5, #54	; 0x36
   bd404:	bf88      	it	hi
   bd406:	bd30      	pophi	{r4, r5, pc}
   bd408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd40c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bd414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bd418:	d002      	beq.n	bd420 <__adddf3+0x70>
   bd41a:	4240      	negs	r0, r0
   bd41c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bd424:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bd42c:	d002      	beq.n	bd434 <__adddf3+0x84>
   bd42e:	4252      	negs	r2, r2
   bd430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd434:	ea94 0f05 	teq	r4, r5
   bd438:	f000 80a7 	beq.w	bd58a <__adddf3+0x1da>
   bd43c:	f1a4 0401 	sub.w	r4, r4, #1
   bd440:	f1d5 0e20 	rsbs	lr, r5, #32
   bd444:	db0d      	blt.n	bd462 <__adddf3+0xb2>
   bd446:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd44a:	fa22 f205 	lsr.w	r2, r2, r5
   bd44e:	1880      	adds	r0, r0, r2
   bd450:	f141 0100 	adc.w	r1, r1, #0
   bd454:	fa03 f20e 	lsl.w	r2, r3, lr
   bd458:	1880      	adds	r0, r0, r2
   bd45a:	fa43 f305 	asr.w	r3, r3, r5
   bd45e:	4159      	adcs	r1, r3
   bd460:	e00e      	b.n	bd480 <__adddf3+0xd0>
   bd462:	f1a5 0520 	sub.w	r5, r5, #32
   bd466:	f10e 0e20 	add.w	lr, lr, #32
   bd46a:	2a01      	cmp	r2, #1
   bd46c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd470:	bf28      	it	cs
   bd472:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd476:	fa43 f305 	asr.w	r3, r3, r5
   bd47a:	18c0      	adds	r0, r0, r3
   bd47c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd484:	d507      	bpl.n	bd496 <__adddf3+0xe6>
   bd486:	f04f 0e00 	mov.w	lr, #0
   bd48a:	f1dc 0c00 	rsbs	ip, ip, #0
   bd48e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd492:	eb6e 0101 	sbc.w	r1, lr, r1
   bd496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd49a:	d31b      	bcc.n	bd4d4 <__adddf3+0x124>
   bd49c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd4a0:	d30c      	bcc.n	bd4bc <__adddf3+0x10c>
   bd4a2:	0849      	lsrs	r1, r1, #1
   bd4a4:	ea5f 0030 	movs.w	r0, r0, rrx
   bd4a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd4ac:	f104 0401 	add.w	r4, r4, #1
   bd4b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd4b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd4b8:	f080 809a 	bcs.w	bd5f0 <__adddf3+0x240>
   bd4bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd4c0:	bf08      	it	eq
   bd4c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd4c6:	f150 0000 	adcs.w	r0, r0, #0
   bd4ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd4ce:	ea41 0105 	orr.w	r1, r1, r5
   bd4d2:	bd30      	pop	{r4, r5, pc}
   bd4d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd4d8:	4140      	adcs	r0, r0
   bd4da:	eb41 0101 	adc.w	r1, r1, r1
   bd4de:	3c01      	subs	r4, #1
   bd4e0:	bf28      	it	cs
   bd4e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd4e6:	d2e9      	bcs.n	bd4bc <__adddf3+0x10c>
   bd4e8:	f091 0f00 	teq	r1, #0
   bd4ec:	bf04      	itt	eq
   bd4ee:	4601      	moveq	r1, r0
   bd4f0:	2000      	moveq	r0, #0
   bd4f2:	fab1 f381 	clz	r3, r1
   bd4f6:	bf08      	it	eq
   bd4f8:	3320      	addeq	r3, #32
   bd4fa:	f1a3 030b 	sub.w	r3, r3, #11
   bd4fe:	f1b3 0220 	subs.w	r2, r3, #32
   bd502:	da0c      	bge.n	bd51e <__adddf3+0x16e>
   bd504:	320c      	adds	r2, #12
   bd506:	dd08      	ble.n	bd51a <__adddf3+0x16a>
   bd508:	f102 0c14 	add.w	ip, r2, #20
   bd50c:	f1c2 020c 	rsb	r2, r2, #12
   bd510:	fa01 f00c 	lsl.w	r0, r1, ip
   bd514:	fa21 f102 	lsr.w	r1, r1, r2
   bd518:	e00c      	b.n	bd534 <__adddf3+0x184>
   bd51a:	f102 0214 	add.w	r2, r2, #20
   bd51e:	bfd8      	it	le
   bd520:	f1c2 0c20 	rsble	ip, r2, #32
   bd524:	fa01 f102 	lsl.w	r1, r1, r2
   bd528:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd52c:	bfdc      	itt	le
   bd52e:	ea41 010c 	orrle.w	r1, r1, ip
   bd532:	4090      	lslle	r0, r2
   bd534:	1ae4      	subs	r4, r4, r3
   bd536:	bfa2      	ittt	ge
   bd538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd53c:	4329      	orrge	r1, r5
   bd53e:	bd30      	popge	{r4, r5, pc}
   bd540:	ea6f 0404 	mvn.w	r4, r4
   bd544:	3c1f      	subs	r4, #31
   bd546:	da1c      	bge.n	bd582 <__adddf3+0x1d2>
   bd548:	340c      	adds	r4, #12
   bd54a:	dc0e      	bgt.n	bd56a <__adddf3+0x1ba>
   bd54c:	f104 0414 	add.w	r4, r4, #20
   bd550:	f1c4 0220 	rsb	r2, r4, #32
   bd554:	fa20 f004 	lsr.w	r0, r0, r4
   bd558:	fa01 f302 	lsl.w	r3, r1, r2
   bd55c:	ea40 0003 	orr.w	r0, r0, r3
   bd560:	fa21 f304 	lsr.w	r3, r1, r4
   bd564:	ea45 0103 	orr.w	r1, r5, r3
   bd568:	bd30      	pop	{r4, r5, pc}
   bd56a:	f1c4 040c 	rsb	r4, r4, #12
   bd56e:	f1c4 0220 	rsb	r2, r4, #32
   bd572:	fa20 f002 	lsr.w	r0, r0, r2
   bd576:	fa01 f304 	lsl.w	r3, r1, r4
   bd57a:	ea40 0003 	orr.w	r0, r0, r3
   bd57e:	4629      	mov	r1, r5
   bd580:	bd30      	pop	{r4, r5, pc}
   bd582:	fa21 f004 	lsr.w	r0, r1, r4
   bd586:	4629      	mov	r1, r5
   bd588:	bd30      	pop	{r4, r5, pc}
   bd58a:	f094 0f00 	teq	r4, #0
   bd58e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd592:	bf06      	itte	eq
   bd594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd598:	3401      	addeq	r4, #1
   bd59a:	3d01      	subne	r5, #1
   bd59c:	e74e      	b.n	bd43c <__adddf3+0x8c>
   bd59e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd5a2:	bf18      	it	ne
   bd5a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd5a8:	d029      	beq.n	bd5fe <__adddf3+0x24e>
   bd5aa:	ea94 0f05 	teq	r4, r5
   bd5ae:	bf08      	it	eq
   bd5b0:	ea90 0f02 	teqeq	r0, r2
   bd5b4:	d005      	beq.n	bd5c2 <__adddf3+0x212>
   bd5b6:	ea54 0c00 	orrs.w	ip, r4, r0
   bd5ba:	bf04      	itt	eq
   bd5bc:	4619      	moveq	r1, r3
   bd5be:	4610      	moveq	r0, r2
   bd5c0:	bd30      	pop	{r4, r5, pc}
   bd5c2:	ea91 0f03 	teq	r1, r3
   bd5c6:	bf1e      	ittt	ne
   bd5c8:	2100      	movne	r1, #0
   bd5ca:	2000      	movne	r0, #0
   bd5cc:	bd30      	popne	{r4, r5, pc}
   bd5ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bd5d2:	d105      	bne.n	bd5e0 <__adddf3+0x230>
   bd5d4:	0040      	lsls	r0, r0, #1
   bd5d6:	4149      	adcs	r1, r1
   bd5d8:	bf28      	it	cs
   bd5da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bd5de:	bd30      	pop	{r4, r5, pc}
   bd5e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bd5e4:	bf3c      	itt	cc
   bd5e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bd5ea:	bd30      	popcc	{r4, r5, pc}
   bd5ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd5f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bd5f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd5f8:	f04f 0000 	mov.w	r0, #0
   bd5fc:	bd30      	pop	{r4, r5, pc}
   bd5fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd602:	bf1a      	itte	ne
   bd604:	4619      	movne	r1, r3
   bd606:	4610      	movne	r0, r2
   bd608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bd60c:	bf1c      	itt	ne
   bd60e:	460b      	movne	r3, r1
   bd610:	4602      	movne	r2, r0
   bd612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd616:	bf06      	itte	eq
   bd618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bd61c:	ea91 0f03 	teqeq	r1, r3
   bd620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bd624:	bd30      	pop	{r4, r5, pc}
   bd626:	bf00      	nop

000bd628 <__aeabi_ui2d>:
   bd628:	f090 0f00 	teq	r0, #0
   bd62c:	bf04      	itt	eq
   bd62e:	2100      	moveq	r1, #0
   bd630:	4770      	bxeq	lr
   bd632:	b530      	push	{r4, r5, lr}
   bd634:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd638:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd63c:	f04f 0500 	mov.w	r5, #0
   bd640:	f04f 0100 	mov.w	r1, #0
   bd644:	e750      	b.n	bd4e8 <__adddf3+0x138>
   bd646:	bf00      	nop

000bd648 <__aeabi_i2d>:
   bd648:	f090 0f00 	teq	r0, #0
   bd64c:	bf04      	itt	eq
   bd64e:	2100      	moveq	r1, #0
   bd650:	4770      	bxeq	lr
   bd652:	b530      	push	{r4, r5, lr}
   bd654:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd658:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd65c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd660:	bf48      	it	mi
   bd662:	4240      	negmi	r0, r0
   bd664:	f04f 0100 	mov.w	r1, #0
   bd668:	e73e      	b.n	bd4e8 <__adddf3+0x138>
   bd66a:	bf00      	nop

000bd66c <__aeabi_f2d>:
   bd66c:	0042      	lsls	r2, r0, #1
   bd66e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd672:	ea4f 0131 	mov.w	r1, r1, rrx
   bd676:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd67a:	bf1f      	itttt	ne
   bd67c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd688:	4770      	bxne	lr
   bd68a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd68e:	bf08      	it	eq
   bd690:	4770      	bxeq	lr
   bd692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd696:	bf04      	itt	eq
   bd698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd69c:	4770      	bxeq	lr
   bd69e:	b530      	push	{r4, r5, lr}
   bd6a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd6a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd6a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd6ac:	e71c      	b.n	bd4e8 <__adddf3+0x138>
   bd6ae:	bf00      	nop

000bd6b0 <__aeabi_ul2d>:
   bd6b0:	ea50 0201 	orrs.w	r2, r0, r1
   bd6b4:	bf08      	it	eq
   bd6b6:	4770      	bxeq	lr
   bd6b8:	b530      	push	{r4, r5, lr}
   bd6ba:	f04f 0500 	mov.w	r5, #0
   bd6be:	e00a      	b.n	bd6d6 <__aeabi_l2d+0x16>

000bd6c0 <__aeabi_l2d>:
   bd6c0:	ea50 0201 	orrs.w	r2, r0, r1
   bd6c4:	bf08      	it	eq
   bd6c6:	4770      	bxeq	lr
   bd6c8:	b530      	push	{r4, r5, lr}
   bd6ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd6ce:	d502      	bpl.n	bd6d6 <__aeabi_l2d+0x16>
   bd6d0:	4240      	negs	r0, r0
   bd6d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd6d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd6da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd6de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd6e2:	f43f aed8 	beq.w	bd496 <__adddf3+0xe6>
   bd6e6:	f04f 0203 	mov.w	r2, #3
   bd6ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd6ee:	bf18      	it	ne
   bd6f0:	3203      	addne	r2, #3
   bd6f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd6f6:	bf18      	it	ne
   bd6f8:	3203      	addne	r2, #3
   bd6fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd6fe:	f1c2 0320 	rsb	r3, r2, #32
   bd702:	fa00 fc03 	lsl.w	ip, r0, r3
   bd706:	fa20 f002 	lsr.w	r0, r0, r2
   bd70a:	fa01 fe03 	lsl.w	lr, r1, r3
   bd70e:	ea40 000e 	orr.w	r0, r0, lr
   bd712:	fa21 f102 	lsr.w	r1, r1, r2
   bd716:	4414      	add	r4, r2
   bd718:	e6bd      	b.n	bd496 <__adddf3+0xe6>
   bd71a:	bf00      	nop

000bd71c <__aeabi_dmul>:
   bd71c:	b570      	push	{r4, r5, r6, lr}
   bd71e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd72a:	bf1d      	ittte	ne
   bd72c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd730:	ea94 0f0c 	teqne	r4, ip
   bd734:	ea95 0f0c 	teqne	r5, ip
   bd738:	f000 f8de 	bleq	bd8f8 <__aeabi_dmul+0x1dc>
   bd73c:	442c      	add	r4, r5
   bd73e:	ea81 0603 	eor.w	r6, r1, r3
   bd742:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd746:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd74a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd74e:	bf18      	it	ne
   bd750:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd75c:	d038      	beq.n	bd7d0 <__aeabi_dmul+0xb4>
   bd75e:	fba0 ce02 	umull	ip, lr, r0, r2
   bd762:	f04f 0500 	mov.w	r5, #0
   bd766:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd76a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd76e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd772:	f04f 0600 	mov.w	r6, #0
   bd776:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd77a:	f09c 0f00 	teq	ip, #0
   bd77e:	bf18      	it	ne
   bd780:	f04e 0e01 	orrne.w	lr, lr, #1
   bd784:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd788:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd78c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd790:	d204      	bcs.n	bd79c <__aeabi_dmul+0x80>
   bd792:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd796:	416d      	adcs	r5, r5
   bd798:	eb46 0606 	adc.w	r6, r6, r6
   bd79c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd7a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd7a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd7a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd7ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd7b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd7b4:	bf88      	it	hi
   bd7b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd7ba:	d81e      	bhi.n	bd7fa <__aeabi_dmul+0xde>
   bd7bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd7c0:	bf08      	it	eq
   bd7c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd7c6:	f150 0000 	adcs.w	r0, r0, #0
   bd7ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd7ce:	bd70      	pop	{r4, r5, r6, pc}
   bd7d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd7d4:	ea46 0101 	orr.w	r1, r6, r1
   bd7d8:	ea40 0002 	orr.w	r0, r0, r2
   bd7dc:	ea81 0103 	eor.w	r1, r1, r3
   bd7e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd7e4:	bfc2      	ittt	gt
   bd7e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd7ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd7ee:	bd70      	popgt	{r4, r5, r6, pc}
   bd7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd7f4:	f04f 0e00 	mov.w	lr, #0
   bd7f8:	3c01      	subs	r4, #1
   bd7fa:	f300 80ab 	bgt.w	bd954 <__aeabi_dmul+0x238>
   bd7fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bd802:	bfde      	ittt	le
   bd804:	2000      	movle	r0, #0
   bd806:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bd80a:	bd70      	pople	{r4, r5, r6, pc}
   bd80c:	f1c4 0400 	rsb	r4, r4, #0
   bd810:	3c20      	subs	r4, #32
   bd812:	da35      	bge.n	bd880 <__aeabi_dmul+0x164>
   bd814:	340c      	adds	r4, #12
   bd816:	dc1b      	bgt.n	bd850 <__aeabi_dmul+0x134>
   bd818:	f104 0414 	add.w	r4, r4, #20
   bd81c:	f1c4 0520 	rsb	r5, r4, #32
   bd820:	fa00 f305 	lsl.w	r3, r0, r5
   bd824:	fa20 f004 	lsr.w	r0, r0, r4
   bd828:	fa01 f205 	lsl.w	r2, r1, r5
   bd82c:	ea40 0002 	orr.w	r0, r0, r2
   bd830:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bd834:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd83c:	fa21 f604 	lsr.w	r6, r1, r4
   bd840:	eb42 0106 	adc.w	r1, r2, r6
   bd844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd848:	bf08      	it	eq
   bd84a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd84e:	bd70      	pop	{r4, r5, r6, pc}
   bd850:	f1c4 040c 	rsb	r4, r4, #12
   bd854:	f1c4 0520 	rsb	r5, r4, #32
   bd858:	fa00 f304 	lsl.w	r3, r0, r4
   bd85c:	fa20 f005 	lsr.w	r0, r0, r5
   bd860:	fa01 f204 	lsl.w	r2, r1, r4
   bd864:	ea40 0002 	orr.w	r0, r0, r2
   bd868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd86c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd870:	f141 0100 	adc.w	r1, r1, #0
   bd874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd878:	bf08      	it	eq
   bd87a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd87e:	bd70      	pop	{r4, r5, r6, pc}
   bd880:	f1c4 0520 	rsb	r5, r4, #32
   bd884:	fa00 f205 	lsl.w	r2, r0, r5
   bd888:	ea4e 0e02 	orr.w	lr, lr, r2
   bd88c:	fa20 f304 	lsr.w	r3, r0, r4
   bd890:	fa01 f205 	lsl.w	r2, r1, r5
   bd894:	ea43 0302 	orr.w	r3, r3, r2
   bd898:	fa21 f004 	lsr.w	r0, r1, r4
   bd89c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd8a0:	fa21 f204 	lsr.w	r2, r1, r4
   bd8a4:	ea20 0002 	bic.w	r0, r0, r2
   bd8a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd8ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd8b0:	bf08      	it	eq
   bd8b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd8b6:	bd70      	pop	{r4, r5, r6, pc}
   bd8b8:	f094 0f00 	teq	r4, #0
   bd8bc:	d10f      	bne.n	bd8de <__aeabi_dmul+0x1c2>
   bd8be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd8c2:	0040      	lsls	r0, r0, #1
   bd8c4:	eb41 0101 	adc.w	r1, r1, r1
   bd8c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd8cc:	bf08      	it	eq
   bd8ce:	3c01      	subeq	r4, #1
   bd8d0:	d0f7      	beq.n	bd8c2 <__aeabi_dmul+0x1a6>
   bd8d2:	ea41 0106 	orr.w	r1, r1, r6
   bd8d6:	f095 0f00 	teq	r5, #0
   bd8da:	bf18      	it	ne
   bd8dc:	4770      	bxne	lr
   bd8de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd8e2:	0052      	lsls	r2, r2, #1
   bd8e4:	eb43 0303 	adc.w	r3, r3, r3
   bd8e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd8ec:	bf08      	it	eq
   bd8ee:	3d01      	subeq	r5, #1
   bd8f0:	d0f7      	beq.n	bd8e2 <__aeabi_dmul+0x1c6>
   bd8f2:	ea43 0306 	orr.w	r3, r3, r6
   bd8f6:	4770      	bx	lr
   bd8f8:	ea94 0f0c 	teq	r4, ip
   bd8fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd900:	bf18      	it	ne
   bd902:	ea95 0f0c 	teqne	r5, ip
   bd906:	d00c      	beq.n	bd922 <__aeabi_dmul+0x206>
   bd908:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd90c:	bf18      	it	ne
   bd90e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd912:	d1d1      	bne.n	bd8b8 <__aeabi_dmul+0x19c>
   bd914:	ea81 0103 	eor.w	r1, r1, r3
   bd918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd91c:	f04f 0000 	mov.w	r0, #0
   bd920:	bd70      	pop	{r4, r5, r6, pc}
   bd922:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd926:	bf06      	itte	eq
   bd928:	4610      	moveq	r0, r2
   bd92a:	4619      	moveq	r1, r3
   bd92c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd930:	d019      	beq.n	bd966 <__aeabi_dmul+0x24a>
   bd932:	ea94 0f0c 	teq	r4, ip
   bd936:	d102      	bne.n	bd93e <__aeabi_dmul+0x222>
   bd938:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd93c:	d113      	bne.n	bd966 <__aeabi_dmul+0x24a>
   bd93e:	ea95 0f0c 	teq	r5, ip
   bd942:	d105      	bne.n	bd950 <__aeabi_dmul+0x234>
   bd944:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd948:	bf1c      	itt	ne
   bd94a:	4610      	movne	r0, r2
   bd94c:	4619      	movne	r1, r3
   bd94e:	d10a      	bne.n	bd966 <__aeabi_dmul+0x24a>
   bd950:	ea81 0103 	eor.w	r1, r1, r3
   bd954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd958:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd95c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd960:	f04f 0000 	mov.w	r0, #0
   bd964:	bd70      	pop	{r4, r5, r6, pc}
   bd966:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd96a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd96e:	bd70      	pop	{r4, r5, r6, pc}

000bd970 <__aeabi_ddiv>:
   bd970:	b570      	push	{r4, r5, r6, lr}
   bd972:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd976:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd97a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd97e:	bf1d      	ittte	ne
   bd980:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd984:	ea94 0f0c 	teqne	r4, ip
   bd988:	ea95 0f0c 	teqne	r5, ip
   bd98c:	f000 f8a7 	bleq	bdade <__aeabi_ddiv+0x16e>
   bd990:	eba4 0405 	sub.w	r4, r4, r5
   bd994:	ea81 0e03 	eor.w	lr, r1, r3
   bd998:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd99c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd9a0:	f000 8088 	beq.w	bdab4 <__aeabi_ddiv+0x144>
   bd9a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd9a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd9ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd9b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd9b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd9b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd9bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd9c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd9c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd9c8:	429d      	cmp	r5, r3
   bd9ca:	bf08      	it	eq
   bd9cc:	4296      	cmpeq	r6, r2
   bd9ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd9d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd9d6:	d202      	bcs.n	bd9de <__aeabi_ddiv+0x6e>
   bd9d8:	085b      	lsrs	r3, r3, #1
   bd9da:	ea4f 0232 	mov.w	r2, r2, rrx
   bd9de:	1ab6      	subs	r6, r6, r2
   bd9e0:	eb65 0503 	sbc.w	r5, r5, r3
   bd9e4:	085b      	lsrs	r3, r3, #1
   bd9e6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd9ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd9ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd9f2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd9f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd9fa:	bf22      	ittt	cs
   bd9fc:	1ab6      	subcs	r6, r6, r2
   bd9fe:	4675      	movcs	r5, lr
   bda00:	ea40 000c 	orrcs.w	r0, r0, ip
   bda04:	085b      	lsrs	r3, r3, #1
   bda06:	ea4f 0232 	mov.w	r2, r2, rrx
   bda0a:	ebb6 0e02 	subs.w	lr, r6, r2
   bda0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bda12:	bf22      	ittt	cs
   bda14:	1ab6      	subcs	r6, r6, r2
   bda16:	4675      	movcs	r5, lr
   bda18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bda1c:	085b      	lsrs	r3, r3, #1
   bda1e:	ea4f 0232 	mov.w	r2, r2, rrx
   bda22:	ebb6 0e02 	subs.w	lr, r6, r2
   bda26:	eb75 0e03 	sbcs.w	lr, r5, r3
   bda2a:	bf22      	ittt	cs
   bda2c:	1ab6      	subcs	r6, r6, r2
   bda2e:	4675      	movcs	r5, lr
   bda30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bda34:	085b      	lsrs	r3, r3, #1
   bda36:	ea4f 0232 	mov.w	r2, r2, rrx
   bda3a:	ebb6 0e02 	subs.w	lr, r6, r2
   bda3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bda42:	bf22      	ittt	cs
   bda44:	1ab6      	subcs	r6, r6, r2
   bda46:	4675      	movcs	r5, lr
   bda48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bda4c:	ea55 0e06 	orrs.w	lr, r5, r6
   bda50:	d018      	beq.n	bda84 <__aeabi_ddiv+0x114>
   bda52:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bda56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bda5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bda5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bda62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bda66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bda6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bda6e:	d1c0      	bne.n	bd9f2 <__aeabi_ddiv+0x82>
   bda70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bda74:	d10b      	bne.n	bda8e <__aeabi_ddiv+0x11e>
   bda76:	ea41 0100 	orr.w	r1, r1, r0
   bda7a:	f04f 0000 	mov.w	r0, #0
   bda7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bda82:	e7b6      	b.n	bd9f2 <__aeabi_ddiv+0x82>
   bda84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bda88:	bf04      	itt	eq
   bda8a:	4301      	orreq	r1, r0
   bda8c:	2000      	moveq	r0, #0
   bda8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bda92:	bf88      	it	hi
   bda94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bda98:	f63f aeaf 	bhi.w	bd7fa <__aeabi_dmul+0xde>
   bda9c:	ebb5 0c03 	subs.w	ip, r5, r3
   bdaa0:	bf04      	itt	eq
   bdaa2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bdaa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bdaaa:	f150 0000 	adcs.w	r0, r0, #0
   bdaae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdab2:	bd70      	pop	{r4, r5, r6, pc}
   bdab4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bdab8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bdabc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bdac0:	bfc2      	ittt	gt
   bdac2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bdac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bdaca:	bd70      	popgt	{r4, r5, r6, pc}
   bdacc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdad0:	f04f 0e00 	mov.w	lr, #0
   bdad4:	3c01      	subs	r4, #1
   bdad6:	e690      	b.n	bd7fa <__aeabi_dmul+0xde>
   bdad8:	ea45 0e06 	orr.w	lr, r5, r6
   bdadc:	e68d      	b.n	bd7fa <__aeabi_dmul+0xde>
   bdade:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdae2:	ea94 0f0c 	teq	r4, ip
   bdae6:	bf08      	it	eq
   bdae8:	ea95 0f0c 	teqeq	r5, ip
   bdaec:	f43f af3b 	beq.w	bd966 <__aeabi_dmul+0x24a>
   bdaf0:	ea94 0f0c 	teq	r4, ip
   bdaf4:	d10a      	bne.n	bdb0c <__aeabi_ddiv+0x19c>
   bdaf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bdafa:	f47f af34 	bne.w	bd966 <__aeabi_dmul+0x24a>
   bdafe:	ea95 0f0c 	teq	r5, ip
   bdb02:	f47f af25 	bne.w	bd950 <__aeabi_dmul+0x234>
   bdb06:	4610      	mov	r0, r2
   bdb08:	4619      	mov	r1, r3
   bdb0a:	e72c      	b.n	bd966 <__aeabi_dmul+0x24a>
   bdb0c:	ea95 0f0c 	teq	r5, ip
   bdb10:	d106      	bne.n	bdb20 <__aeabi_ddiv+0x1b0>
   bdb12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bdb16:	f43f aefd 	beq.w	bd914 <__aeabi_dmul+0x1f8>
   bdb1a:	4610      	mov	r0, r2
   bdb1c:	4619      	mov	r1, r3
   bdb1e:	e722      	b.n	bd966 <__aeabi_dmul+0x24a>
   bdb20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdb24:	bf18      	it	ne
   bdb26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdb2a:	f47f aec5 	bne.w	bd8b8 <__aeabi_dmul+0x19c>
   bdb2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bdb32:	f47f af0d 	bne.w	bd950 <__aeabi_dmul+0x234>
   bdb36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bdb3a:	f47f aeeb 	bne.w	bd914 <__aeabi_dmul+0x1f8>
   bdb3e:	e712      	b.n	bd966 <__aeabi_dmul+0x24a>

000bdb40 <__gedf2>:
   bdb40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdb44:	e006      	b.n	bdb54 <__cmpdf2+0x4>
   bdb46:	bf00      	nop

000bdb48 <__ledf2>:
   bdb48:	f04f 0c01 	mov.w	ip, #1
   bdb4c:	e002      	b.n	bdb54 <__cmpdf2+0x4>
   bdb4e:	bf00      	nop

000bdb50 <__cmpdf2>:
   bdb50:	f04f 0c01 	mov.w	ip, #1
   bdb54:	f84d cd04 	str.w	ip, [sp, #-4]!
   bdb58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdb5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdb60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdb64:	bf18      	it	ne
   bdb66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bdb6a:	d01b      	beq.n	bdba4 <__cmpdf2+0x54>
   bdb6c:	b001      	add	sp, #4
   bdb6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bdb72:	bf0c      	ite	eq
   bdb74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bdb78:	ea91 0f03 	teqne	r1, r3
   bdb7c:	bf02      	ittt	eq
   bdb7e:	ea90 0f02 	teqeq	r0, r2
   bdb82:	2000      	moveq	r0, #0
   bdb84:	4770      	bxeq	lr
   bdb86:	f110 0f00 	cmn.w	r0, #0
   bdb8a:	ea91 0f03 	teq	r1, r3
   bdb8e:	bf58      	it	pl
   bdb90:	4299      	cmppl	r1, r3
   bdb92:	bf08      	it	eq
   bdb94:	4290      	cmpeq	r0, r2
   bdb96:	bf2c      	ite	cs
   bdb98:	17d8      	asrcs	r0, r3, #31
   bdb9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bdb9e:	f040 0001 	orr.w	r0, r0, #1
   bdba2:	4770      	bx	lr
   bdba4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdbac:	d102      	bne.n	bdbb4 <__cmpdf2+0x64>
   bdbae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bdbb2:	d107      	bne.n	bdbc4 <__cmpdf2+0x74>
   bdbb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdbb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdbbc:	d1d6      	bne.n	bdb6c <__cmpdf2+0x1c>
   bdbbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bdbc2:	d0d3      	beq.n	bdb6c <__cmpdf2+0x1c>
   bdbc4:	f85d 0b04 	ldr.w	r0, [sp], #4
   bdbc8:	4770      	bx	lr
   bdbca:	bf00      	nop

000bdbcc <__aeabi_cdrcmple>:
   bdbcc:	4684      	mov	ip, r0
   bdbce:	4610      	mov	r0, r2
   bdbd0:	4662      	mov	r2, ip
   bdbd2:	468c      	mov	ip, r1
   bdbd4:	4619      	mov	r1, r3
   bdbd6:	4663      	mov	r3, ip
   bdbd8:	e000      	b.n	bdbdc <__aeabi_cdcmpeq>
   bdbda:	bf00      	nop

000bdbdc <__aeabi_cdcmpeq>:
   bdbdc:	b501      	push	{r0, lr}
   bdbde:	f7ff ffb7 	bl	bdb50 <__cmpdf2>
   bdbe2:	2800      	cmp	r0, #0
   bdbe4:	bf48      	it	mi
   bdbe6:	f110 0f00 	cmnmi.w	r0, #0
   bdbea:	bd01      	pop	{r0, pc}

000bdbec <__aeabi_dcmpeq>:
   bdbec:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdbf0:	f7ff fff4 	bl	bdbdc <__aeabi_cdcmpeq>
   bdbf4:	bf0c      	ite	eq
   bdbf6:	2001      	moveq	r0, #1
   bdbf8:	2000      	movne	r0, #0
   bdbfa:	f85d fb08 	ldr.w	pc, [sp], #8
   bdbfe:	bf00      	nop

000bdc00 <__aeabi_dcmplt>:
   bdc00:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdc04:	f7ff ffea 	bl	bdbdc <__aeabi_cdcmpeq>
   bdc08:	bf34      	ite	cc
   bdc0a:	2001      	movcc	r0, #1
   bdc0c:	2000      	movcs	r0, #0
   bdc0e:	f85d fb08 	ldr.w	pc, [sp], #8
   bdc12:	bf00      	nop

000bdc14 <__aeabi_dcmple>:
   bdc14:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdc18:	f7ff ffe0 	bl	bdbdc <__aeabi_cdcmpeq>
   bdc1c:	bf94      	ite	ls
   bdc1e:	2001      	movls	r0, #1
   bdc20:	2000      	movhi	r0, #0
   bdc22:	f85d fb08 	ldr.w	pc, [sp], #8
   bdc26:	bf00      	nop

000bdc28 <__aeabi_dcmpge>:
   bdc28:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdc2c:	f7ff ffce 	bl	bdbcc <__aeabi_cdrcmple>
   bdc30:	bf94      	ite	ls
   bdc32:	2001      	movls	r0, #1
   bdc34:	2000      	movhi	r0, #0
   bdc36:	f85d fb08 	ldr.w	pc, [sp], #8
   bdc3a:	bf00      	nop

000bdc3c <__aeabi_dcmpgt>:
   bdc3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdc40:	f7ff ffc4 	bl	bdbcc <__aeabi_cdrcmple>
   bdc44:	bf34      	ite	cc
   bdc46:	2001      	movcc	r0, #1
   bdc48:	2000      	movcs	r0, #0
   bdc4a:	f85d fb08 	ldr.w	pc, [sp], #8
   bdc4e:	bf00      	nop

000bdc50 <__aeabi_dcmpun>:
   bdc50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdc58:	d102      	bne.n	bdc60 <__aeabi_dcmpun+0x10>
   bdc5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bdc5e:	d10a      	bne.n	bdc76 <__aeabi_dcmpun+0x26>
   bdc60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdc64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdc68:	d102      	bne.n	bdc70 <__aeabi_dcmpun+0x20>
   bdc6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bdc6e:	d102      	bne.n	bdc76 <__aeabi_dcmpun+0x26>
   bdc70:	f04f 0000 	mov.w	r0, #0
   bdc74:	4770      	bx	lr
   bdc76:	f04f 0001 	mov.w	r0, #1
   bdc7a:	4770      	bx	lr

000bdc7c <__aeabi_d2iz>:
   bdc7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdc80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bdc84:	d215      	bcs.n	bdcb2 <__aeabi_d2iz+0x36>
   bdc86:	d511      	bpl.n	bdcac <__aeabi_d2iz+0x30>
   bdc88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bdc8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bdc90:	d912      	bls.n	bdcb8 <__aeabi_d2iz+0x3c>
   bdc92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdc96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bdc9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bdc9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bdca2:	fa23 f002 	lsr.w	r0, r3, r2
   bdca6:	bf18      	it	ne
   bdca8:	4240      	negne	r0, r0
   bdcaa:	4770      	bx	lr
   bdcac:	f04f 0000 	mov.w	r0, #0
   bdcb0:	4770      	bx	lr
   bdcb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bdcb6:	d105      	bne.n	bdcc4 <__aeabi_d2iz+0x48>
   bdcb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bdcbc:	bf08      	it	eq
   bdcbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bdcc2:	4770      	bx	lr
   bdcc4:	f04f 0000 	mov.w	r0, #0
   bdcc8:	4770      	bx	lr
   bdcca:	bf00      	nop

000bdccc <__aeabi_d2uiz>:
   bdccc:	004a      	lsls	r2, r1, #1
   bdcce:	d211      	bcs.n	bdcf4 <__aeabi_d2uiz+0x28>
   bdcd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bdcd4:	d211      	bcs.n	bdcfa <__aeabi_d2uiz+0x2e>
   bdcd6:	d50d      	bpl.n	bdcf4 <__aeabi_d2uiz+0x28>
   bdcd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bdcdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bdce0:	d40e      	bmi.n	bdd00 <__aeabi_d2uiz+0x34>
   bdce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bdcea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bdcee:	fa23 f002 	lsr.w	r0, r3, r2
   bdcf2:	4770      	bx	lr
   bdcf4:	f04f 0000 	mov.w	r0, #0
   bdcf8:	4770      	bx	lr
   bdcfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bdcfe:	d102      	bne.n	bdd06 <__aeabi_d2uiz+0x3a>
   bdd00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdd04:	4770      	bx	lr
   bdd06:	f04f 0000 	mov.w	r0, #0
   bdd0a:	4770      	bx	lr

000bdd0c <__aeabi_d2f>:
   bdd0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdd10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bdd14:	bf24      	itt	cs
   bdd16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bdd1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bdd1e:	d90d      	bls.n	bdd3c <__aeabi_d2f+0x30>
   bdd20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bdd24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bdd28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bdd2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bdd30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bdd34:	bf08      	it	eq
   bdd36:	f020 0001 	biceq.w	r0, r0, #1
   bdd3a:	4770      	bx	lr
   bdd3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bdd40:	d121      	bne.n	bdd86 <__aeabi_d2f+0x7a>
   bdd42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bdd46:	bfbc      	itt	lt
   bdd48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bdd4c:	4770      	bxlt	lr
   bdd4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdd52:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bdd56:	f1c2 0218 	rsb	r2, r2, #24
   bdd5a:	f1c2 0c20 	rsb	ip, r2, #32
   bdd5e:	fa10 f30c 	lsls.w	r3, r0, ip
   bdd62:	fa20 f002 	lsr.w	r0, r0, r2
   bdd66:	bf18      	it	ne
   bdd68:	f040 0001 	orrne.w	r0, r0, #1
   bdd6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdd70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bdd74:	fa03 fc0c 	lsl.w	ip, r3, ip
   bdd78:	ea40 000c 	orr.w	r0, r0, ip
   bdd7c:	fa23 f302 	lsr.w	r3, r3, r2
   bdd80:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bdd84:	e7cc      	b.n	bdd20 <__aeabi_d2f+0x14>
   bdd86:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bdd8a:	d107      	bne.n	bdd9c <__aeabi_d2f+0x90>
   bdd8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bdd90:	bf1e      	ittt	ne
   bdd92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bdd96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bdd9a:	4770      	bxne	lr
   bdd9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bdda0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bdda4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bdda8:	4770      	bx	lr
   bddaa:	bf00      	nop

000bddac <asctime_r>:
   bddac:	b510      	push	{r4, lr}
   bddae:	460c      	mov	r4, r1
   bddb0:	6941      	ldr	r1, [r0, #20]
   bddb2:	6903      	ldr	r3, [r0, #16]
   bddb4:	6982      	ldr	r2, [r0, #24]
   bddb6:	b086      	sub	sp, #24
   bddb8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bddbc:	9104      	str	r1, [sp, #16]
   bddbe:	6801      	ldr	r1, [r0, #0]
   bddc0:	9103      	str	r1, [sp, #12]
   bddc2:	6841      	ldr	r1, [r0, #4]
   bddc4:	9102      	str	r1, [sp, #8]
   bddc6:	6881      	ldr	r1, [r0, #8]
   bddc8:	9101      	str	r1, [sp, #4]
   bddca:	68c1      	ldr	r1, [r0, #12]
   bddcc:	9100      	str	r1, [sp, #0]
   bddce:	4907      	ldr	r1, [pc, #28]	; (bddec <asctime_r+0x40>)
   bddd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bddd4:	440b      	add	r3, r1
   bddd6:	4906      	ldr	r1, [pc, #24]	; (bddf0 <asctime_r+0x44>)
   bddd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bdddc:	440a      	add	r2, r1
   bddde:	4620      	mov	r0, r4
   bdde0:	4904      	ldr	r1, [pc, #16]	; (bddf4 <asctime_r+0x48>)
   bdde2:	f7fb fc03 	bl	b95ec <siprintf>
   bdde6:	4620      	mov	r0, r4
   bdde8:	b006      	add	sp, #24
   bddea:	bd10      	pop	{r4, pc}
   bddec:	000bf855 	.word	0x000bf855
   bddf0:	000bf840 	.word	0x000bf840
   bddf4:	000bf820 	.word	0x000bf820

000bddf8 <atexit>:
   bddf8:	2300      	movs	r3, #0
   bddfa:	4601      	mov	r1, r0
   bddfc:	461a      	mov	r2, r3
   bddfe:	4618      	mov	r0, r3
   bde00:	f000 b9ba 	b.w	be178 <__register_exitproc>

000bde04 <gmtime>:
   bde04:	b538      	push	{r3, r4, r5, lr}
   bde06:	4b0b      	ldr	r3, [pc, #44]	; (bde34 <gmtime+0x30>)
   bde08:	681d      	ldr	r5, [r3, #0]
   bde0a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bde0c:	4604      	mov	r4, r0
   bde0e:	b953      	cbnz	r3, bde26 <gmtime+0x22>
   bde10:	2024      	movs	r0, #36	; 0x24
   bde12:	f7fb fbd3 	bl	b95bc <malloc>
   bde16:	4602      	mov	r2, r0
   bde18:	63e8      	str	r0, [r5, #60]	; 0x3c
   bde1a:	b920      	cbnz	r0, bde26 <gmtime+0x22>
   bde1c:	4b06      	ldr	r3, [pc, #24]	; (bde38 <gmtime+0x34>)
   bde1e:	4807      	ldr	r0, [pc, #28]	; (bde3c <gmtime+0x38>)
   bde20:	2139      	movs	r1, #57	; 0x39
   bde22:	f7fb fc0b 	bl	b963c <__assert_func>
   bde26:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bde28:	4620      	mov	r0, r4
   bde2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bde2e:	f7fb bc25 	b.w	b967c <gmtime_r>
   bde32:	bf00      	nop
   bde34:	2003e020 	.word	0x2003e020
   bde38:	000bf879 	.word	0x000bf879
   bde3c:	000bf890 	.word	0x000bf890

000bde40 <isprint>:
   bde40:	4b02      	ldr	r3, [pc, #8]	; (bde4c <isprint+0xc>)
   bde42:	4418      	add	r0, r3
   bde44:	7840      	ldrb	r0, [r0, #1]
   bde46:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bde4a:	4770      	bx	lr
   bde4c:	000bf942 	.word	0x000bf942

000bde50 <memcpy>:
   bde50:	440a      	add	r2, r1
   bde52:	4291      	cmp	r1, r2
   bde54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bde58:	d100      	bne.n	bde5c <memcpy+0xc>
   bde5a:	4770      	bx	lr
   bde5c:	b510      	push	{r4, lr}
   bde5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bde62:	f803 4f01 	strb.w	r4, [r3, #1]!
   bde66:	4291      	cmp	r1, r2
   bde68:	d1f9      	bne.n	bde5e <memcpy+0xe>
   bde6a:	bd10      	pop	{r4, pc}

000bde6c <memmove>:
   bde6c:	4288      	cmp	r0, r1
   bde6e:	b510      	push	{r4, lr}
   bde70:	eb01 0402 	add.w	r4, r1, r2
   bde74:	d902      	bls.n	bde7c <memmove+0x10>
   bde76:	4284      	cmp	r4, r0
   bde78:	4623      	mov	r3, r4
   bde7a:	d807      	bhi.n	bde8c <memmove+0x20>
   bde7c:	1e43      	subs	r3, r0, #1
   bde7e:	42a1      	cmp	r1, r4
   bde80:	d008      	beq.n	bde94 <memmove+0x28>
   bde82:	f811 2b01 	ldrb.w	r2, [r1], #1
   bde86:	f803 2f01 	strb.w	r2, [r3, #1]!
   bde8a:	e7f8      	b.n	bde7e <memmove+0x12>
   bde8c:	4402      	add	r2, r0
   bde8e:	4601      	mov	r1, r0
   bde90:	428a      	cmp	r2, r1
   bde92:	d100      	bne.n	bde96 <memmove+0x2a>
   bde94:	bd10      	pop	{r4, pc}
   bde96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bde9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bde9e:	e7f7      	b.n	bde90 <memmove+0x24>

000bdea0 <memset>:
   bdea0:	4402      	add	r2, r0
   bdea2:	4603      	mov	r3, r0
   bdea4:	4293      	cmp	r3, r2
   bdea6:	d100      	bne.n	bdeaa <memset+0xa>
   bdea8:	4770      	bx	lr
   bdeaa:	f803 1b01 	strb.w	r1, [r3], #1
   bdeae:	e7f9      	b.n	bdea4 <memset+0x4>

000bdeb0 <srand>:
   bdeb0:	b538      	push	{r3, r4, r5, lr}
   bdeb2:	4b10      	ldr	r3, [pc, #64]	; (bdef4 <srand+0x44>)
   bdeb4:	681d      	ldr	r5, [r3, #0]
   bdeb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bdeb8:	4604      	mov	r4, r0
   bdeba:	b9b3      	cbnz	r3, bdeea <srand+0x3a>
   bdebc:	2018      	movs	r0, #24
   bdebe:	f7fb fb7d 	bl	b95bc <malloc>
   bdec2:	4602      	mov	r2, r0
   bdec4:	63a8      	str	r0, [r5, #56]	; 0x38
   bdec6:	b920      	cbnz	r0, bded2 <srand+0x22>
   bdec8:	4b0b      	ldr	r3, [pc, #44]	; (bdef8 <srand+0x48>)
   bdeca:	480c      	ldr	r0, [pc, #48]	; (bdefc <srand+0x4c>)
   bdecc:	2142      	movs	r1, #66	; 0x42
   bdece:	f7fb fbb5 	bl	b963c <__assert_func>
   bded2:	490b      	ldr	r1, [pc, #44]	; (bdf00 <srand+0x50>)
   bded4:	4b0b      	ldr	r3, [pc, #44]	; (bdf04 <srand+0x54>)
   bded6:	e9c0 1300 	strd	r1, r3, [r0]
   bdeda:	4b0b      	ldr	r3, [pc, #44]	; (bdf08 <srand+0x58>)
   bdedc:	6083      	str	r3, [r0, #8]
   bdede:	230b      	movs	r3, #11
   bdee0:	8183      	strh	r3, [r0, #12]
   bdee2:	2100      	movs	r1, #0
   bdee4:	2001      	movs	r0, #1
   bdee6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bdeea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bdeec:	2200      	movs	r2, #0
   bdeee:	611c      	str	r4, [r3, #16]
   bdef0:	615a      	str	r2, [r3, #20]
   bdef2:	bd38      	pop	{r3, r4, r5, pc}
   bdef4:	2003e020 	.word	0x2003e020
   bdef8:	000bf879 	.word	0x000bf879
   bdefc:	000bf8e9 	.word	0x000bf8e9
   bdf00:	abcd330e 	.word	0xabcd330e
   bdf04:	e66d1234 	.word	0xe66d1234
   bdf08:	0005deec 	.word	0x0005deec

000bdf0c <rand>:
   bdf0c:	4b16      	ldr	r3, [pc, #88]	; (bdf68 <rand+0x5c>)
   bdf0e:	b510      	push	{r4, lr}
   bdf10:	681c      	ldr	r4, [r3, #0]
   bdf12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bdf14:	b9b3      	cbnz	r3, bdf44 <rand+0x38>
   bdf16:	2018      	movs	r0, #24
   bdf18:	f7fb fb50 	bl	b95bc <malloc>
   bdf1c:	63a0      	str	r0, [r4, #56]	; 0x38
   bdf1e:	b928      	cbnz	r0, bdf2c <rand+0x20>
   bdf20:	4602      	mov	r2, r0
   bdf22:	4b12      	ldr	r3, [pc, #72]	; (bdf6c <rand+0x60>)
   bdf24:	4812      	ldr	r0, [pc, #72]	; (bdf70 <rand+0x64>)
   bdf26:	214e      	movs	r1, #78	; 0x4e
   bdf28:	f7fb fb88 	bl	b963c <__assert_func>
   bdf2c:	4a11      	ldr	r2, [pc, #68]	; (bdf74 <rand+0x68>)
   bdf2e:	4b12      	ldr	r3, [pc, #72]	; (bdf78 <rand+0x6c>)
   bdf30:	e9c0 2300 	strd	r2, r3, [r0]
   bdf34:	4b11      	ldr	r3, [pc, #68]	; (bdf7c <rand+0x70>)
   bdf36:	6083      	str	r3, [r0, #8]
   bdf38:	230b      	movs	r3, #11
   bdf3a:	8183      	strh	r3, [r0, #12]
   bdf3c:	2201      	movs	r2, #1
   bdf3e:	2300      	movs	r3, #0
   bdf40:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bdf44:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bdf46:	4a0e      	ldr	r2, [pc, #56]	; (bdf80 <rand+0x74>)
   bdf48:	6920      	ldr	r0, [r4, #16]
   bdf4a:	6963      	ldr	r3, [r4, #20]
   bdf4c:	490d      	ldr	r1, [pc, #52]	; (bdf84 <rand+0x78>)
   bdf4e:	4342      	muls	r2, r0
   bdf50:	fb01 2203 	mla	r2, r1, r3, r2
   bdf54:	fba0 0101 	umull	r0, r1, r0, r1
   bdf58:	1c43      	adds	r3, r0, #1
   bdf5a:	eb42 0001 	adc.w	r0, r2, r1
   bdf5e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bdf62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bdf66:	bd10      	pop	{r4, pc}
   bdf68:	2003e020 	.word	0x2003e020
   bdf6c:	000bf879 	.word	0x000bf879
   bdf70:	000bf8e9 	.word	0x000bf8e9
   bdf74:	abcd330e 	.word	0xabcd330e
   bdf78:	e66d1234 	.word	0xe66d1234
   bdf7c:	0005deec 	.word	0x0005deec
   bdf80:	5851f42d 	.word	0x5851f42d
   bdf84:	4c957f2d 	.word	0x4c957f2d

000bdf88 <strchr>:
   bdf88:	b2c9      	uxtb	r1, r1
   bdf8a:	4603      	mov	r3, r0
   bdf8c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bdf90:	b11a      	cbz	r2, bdf9a <strchr+0x12>
   bdf92:	428a      	cmp	r2, r1
   bdf94:	d1f9      	bne.n	bdf8a <strchr+0x2>
   bdf96:	4618      	mov	r0, r3
   bdf98:	4770      	bx	lr
   bdf9a:	2900      	cmp	r1, #0
   bdf9c:	bf18      	it	ne
   bdf9e:	2300      	movne	r3, #0
   bdfa0:	e7f9      	b.n	bdf96 <strchr+0xe>

000bdfa2 <strchrnul>:
   bdfa2:	b510      	push	{r4, lr}
   bdfa4:	4604      	mov	r4, r0
   bdfa6:	f7ff ffef 	bl	bdf88 <strchr>
   bdfaa:	b918      	cbnz	r0, bdfb4 <strchrnul+0x12>
   bdfac:	4620      	mov	r0, r4
   bdfae:	f000 f814 	bl	bdfda <strlen>
   bdfb2:	4420      	add	r0, r4
   bdfb4:	bd10      	pop	{r4, pc}

000bdfb6 <strcmp>:
   bdfb6:	f810 2b01 	ldrb.w	r2, [r0], #1
   bdfba:	f811 3b01 	ldrb.w	r3, [r1], #1
   bdfbe:	2a01      	cmp	r2, #1
   bdfc0:	bf28      	it	cs
   bdfc2:	429a      	cmpcs	r2, r3
   bdfc4:	d0f7      	beq.n	bdfb6 <strcmp>
   bdfc6:	1ad0      	subs	r0, r2, r3
   bdfc8:	4770      	bx	lr

000bdfca <strcpy>:
   bdfca:	4603      	mov	r3, r0
   bdfcc:	f811 2b01 	ldrb.w	r2, [r1], #1
   bdfd0:	f803 2b01 	strb.w	r2, [r3], #1
   bdfd4:	2a00      	cmp	r2, #0
   bdfd6:	d1f9      	bne.n	bdfcc <strcpy+0x2>
   bdfd8:	4770      	bx	lr

000bdfda <strlen>:
   bdfda:	4603      	mov	r3, r0
   bdfdc:	f813 2b01 	ldrb.w	r2, [r3], #1
   bdfe0:	2a00      	cmp	r2, #0
   bdfe2:	d1fb      	bne.n	bdfdc <strlen+0x2>
   bdfe4:	1a18      	subs	r0, r3, r0
   bdfe6:	3801      	subs	r0, #1
   bdfe8:	4770      	bx	lr

000bdfea <strncmp>:
   bdfea:	b510      	push	{r4, lr}
   bdfec:	b17a      	cbz	r2, be00e <strncmp+0x24>
   bdfee:	4603      	mov	r3, r0
   bdff0:	3901      	subs	r1, #1
   bdff2:	1884      	adds	r4, r0, r2
   bdff4:	f813 0b01 	ldrb.w	r0, [r3], #1
   bdff8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bdffc:	4290      	cmp	r0, r2
   bdffe:	d101      	bne.n	be004 <strncmp+0x1a>
   be000:	42a3      	cmp	r3, r4
   be002:	d101      	bne.n	be008 <strncmp+0x1e>
   be004:	1a80      	subs	r0, r0, r2
   be006:	bd10      	pop	{r4, pc}
   be008:	2800      	cmp	r0, #0
   be00a:	d1f3      	bne.n	bdff4 <strncmp+0xa>
   be00c:	e7fa      	b.n	be004 <strncmp+0x1a>
   be00e:	4610      	mov	r0, r2
   be010:	e7f9      	b.n	be006 <strncmp+0x1c>

000be012 <strncpy>:
   be012:	b510      	push	{r4, lr}
   be014:	3901      	subs	r1, #1
   be016:	4603      	mov	r3, r0
   be018:	b132      	cbz	r2, be028 <strncpy+0x16>
   be01a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be01e:	f803 4b01 	strb.w	r4, [r3], #1
   be022:	3a01      	subs	r2, #1
   be024:	2c00      	cmp	r4, #0
   be026:	d1f7      	bne.n	be018 <strncpy+0x6>
   be028:	441a      	add	r2, r3
   be02a:	2100      	movs	r1, #0
   be02c:	4293      	cmp	r3, r2
   be02e:	d100      	bne.n	be032 <strncpy+0x20>
   be030:	bd10      	pop	{r4, pc}
   be032:	f803 1b01 	strb.w	r1, [r3], #1
   be036:	e7f9      	b.n	be02c <strncpy+0x1a>

000be038 <strrchr>:
   be038:	b538      	push	{r3, r4, r5, lr}
   be03a:	4603      	mov	r3, r0
   be03c:	460c      	mov	r4, r1
   be03e:	b969      	cbnz	r1, be05c <strrchr+0x24>
   be040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be044:	f7ff bfa0 	b.w	bdf88 <strchr>
   be048:	1c43      	adds	r3, r0, #1
   be04a:	4605      	mov	r5, r0
   be04c:	4621      	mov	r1, r4
   be04e:	4618      	mov	r0, r3
   be050:	f7ff ff9a 	bl	bdf88 <strchr>
   be054:	2800      	cmp	r0, #0
   be056:	d1f7      	bne.n	be048 <strrchr+0x10>
   be058:	4628      	mov	r0, r5
   be05a:	bd38      	pop	{r3, r4, r5, pc}
   be05c:	2500      	movs	r5, #0
   be05e:	e7f5      	b.n	be04c <strrchr+0x14>

000be060 <_strtol_l.constprop.0>:
   be060:	2b01      	cmp	r3, #1
   be062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be066:	d001      	beq.n	be06c <_strtol_l.constprop.0+0xc>
   be068:	2b24      	cmp	r3, #36	; 0x24
   be06a:	d906      	bls.n	be07a <_strtol_l.constprop.0+0x1a>
   be06c:	f7fb fade 	bl	b962c <__errno>
   be070:	2316      	movs	r3, #22
   be072:	6003      	str	r3, [r0, #0]
   be074:	2000      	movs	r0, #0
   be076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be07a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; be160 <_strtol_l.constprop.0+0x100>
   be07e:	460d      	mov	r5, r1
   be080:	462e      	mov	r6, r5
   be082:	f815 4b01 	ldrb.w	r4, [r5], #1
   be086:	f814 700c 	ldrb.w	r7, [r4, ip]
   be08a:	f017 0708 	ands.w	r7, r7, #8
   be08e:	d1f7      	bne.n	be080 <_strtol_l.constprop.0+0x20>
   be090:	2c2d      	cmp	r4, #45	; 0x2d
   be092:	d132      	bne.n	be0fa <_strtol_l.constprop.0+0x9a>
   be094:	782c      	ldrb	r4, [r5, #0]
   be096:	2701      	movs	r7, #1
   be098:	1cb5      	adds	r5, r6, #2
   be09a:	2b00      	cmp	r3, #0
   be09c:	d05b      	beq.n	be156 <_strtol_l.constprop.0+0xf6>
   be09e:	2b10      	cmp	r3, #16
   be0a0:	d109      	bne.n	be0b6 <_strtol_l.constprop.0+0x56>
   be0a2:	2c30      	cmp	r4, #48	; 0x30
   be0a4:	d107      	bne.n	be0b6 <_strtol_l.constprop.0+0x56>
   be0a6:	782c      	ldrb	r4, [r5, #0]
   be0a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   be0ac:	2c58      	cmp	r4, #88	; 0x58
   be0ae:	d14d      	bne.n	be14c <_strtol_l.constprop.0+0xec>
   be0b0:	786c      	ldrb	r4, [r5, #1]
   be0b2:	2310      	movs	r3, #16
   be0b4:	3502      	adds	r5, #2
   be0b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   be0ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be0be:	f04f 0c00 	mov.w	ip, #0
   be0c2:	fbb8 f9f3 	udiv	r9, r8, r3
   be0c6:	4666      	mov	r6, ip
   be0c8:	fb03 8a19 	mls	sl, r3, r9, r8
   be0cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   be0d0:	f1be 0f09 	cmp.w	lr, #9
   be0d4:	d816      	bhi.n	be104 <_strtol_l.constprop.0+0xa4>
   be0d6:	4674      	mov	r4, lr
   be0d8:	42a3      	cmp	r3, r4
   be0da:	dd24      	ble.n	be126 <_strtol_l.constprop.0+0xc6>
   be0dc:	f1bc 0f00 	cmp.w	ip, #0
   be0e0:	db1e      	blt.n	be120 <_strtol_l.constprop.0+0xc0>
   be0e2:	45b1      	cmp	r9, r6
   be0e4:	d31c      	bcc.n	be120 <_strtol_l.constprop.0+0xc0>
   be0e6:	d101      	bne.n	be0ec <_strtol_l.constprop.0+0x8c>
   be0e8:	45a2      	cmp	sl, r4
   be0ea:	db19      	blt.n	be120 <_strtol_l.constprop.0+0xc0>
   be0ec:	fb06 4603 	mla	r6, r6, r3, r4
   be0f0:	f04f 0c01 	mov.w	ip, #1
   be0f4:	f815 4b01 	ldrb.w	r4, [r5], #1
   be0f8:	e7e8      	b.n	be0cc <_strtol_l.constprop.0+0x6c>
   be0fa:	2c2b      	cmp	r4, #43	; 0x2b
   be0fc:	bf04      	itt	eq
   be0fe:	782c      	ldrbeq	r4, [r5, #0]
   be100:	1cb5      	addeq	r5, r6, #2
   be102:	e7ca      	b.n	be09a <_strtol_l.constprop.0+0x3a>
   be104:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   be108:	f1be 0f19 	cmp.w	lr, #25
   be10c:	d801      	bhi.n	be112 <_strtol_l.constprop.0+0xb2>
   be10e:	3c37      	subs	r4, #55	; 0x37
   be110:	e7e2      	b.n	be0d8 <_strtol_l.constprop.0+0x78>
   be112:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   be116:	f1be 0f19 	cmp.w	lr, #25
   be11a:	d804      	bhi.n	be126 <_strtol_l.constprop.0+0xc6>
   be11c:	3c57      	subs	r4, #87	; 0x57
   be11e:	e7db      	b.n	be0d8 <_strtol_l.constprop.0+0x78>
   be120:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be124:	e7e6      	b.n	be0f4 <_strtol_l.constprop.0+0x94>
   be126:	f1bc 0f00 	cmp.w	ip, #0
   be12a:	da05      	bge.n	be138 <_strtol_l.constprop.0+0xd8>
   be12c:	2322      	movs	r3, #34	; 0x22
   be12e:	6003      	str	r3, [r0, #0]
   be130:	4646      	mov	r6, r8
   be132:	b942      	cbnz	r2, be146 <_strtol_l.constprop.0+0xe6>
   be134:	4630      	mov	r0, r6
   be136:	e79e      	b.n	be076 <_strtol_l.constprop.0+0x16>
   be138:	b107      	cbz	r7, be13c <_strtol_l.constprop.0+0xdc>
   be13a:	4276      	negs	r6, r6
   be13c:	2a00      	cmp	r2, #0
   be13e:	d0f9      	beq.n	be134 <_strtol_l.constprop.0+0xd4>
   be140:	f1bc 0f00 	cmp.w	ip, #0
   be144:	d000      	beq.n	be148 <_strtol_l.constprop.0+0xe8>
   be146:	1e69      	subs	r1, r5, #1
   be148:	6011      	str	r1, [r2, #0]
   be14a:	e7f3      	b.n	be134 <_strtol_l.constprop.0+0xd4>
   be14c:	2430      	movs	r4, #48	; 0x30
   be14e:	2b00      	cmp	r3, #0
   be150:	d1b1      	bne.n	be0b6 <_strtol_l.constprop.0+0x56>
   be152:	2308      	movs	r3, #8
   be154:	e7af      	b.n	be0b6 <_strtol_l.constprop.0+0x56>
   be156:	2c30      	cmp	r4, #48	; 0x30
   be158:	d0a5      	beq.n	be0a6 <_strtol_l.constprop.0+0x46>
   be15a:	230a      	movs	r3, #10
   be15c:	e7ab      	b.n	be0b6 <_strtol_l.constprop.0+0x56>
   be15e:	bf00      	nop
   be160:	000bf943 	.word	0x000bf943

000be164 <strtol>:
   be164:	4613      	mov	r3, r2
   be166:	460a      	mov	r2, r1
   be168:	4601      	mov	r1, r0
   be16a:	4802      	ldr	r0, [pc, #8]	; (be174 <strtol+0x10>)
   be16c:	6800      	ldr	r0, [r0, #0]
   be16e:	f7ff bf77 	b.w	be060 <_strtol_l.constprop.0>
   be172:	bf00      	nop
   be174:	2003e020 	.word	0x2003e020

000be178 <__register_exitproc>:
   be178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be17c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; be238 <__register_exitproc+0xc0>
   be180:	4606      	mov	r6, r0
   be182:	f8d8 0000 	ldr.w	r0, [r8]
   be186:	461f      	mov	r7, r3
   be188:	460d      	mov	r5, r1
   be18a:	4691      	mov	r9, r2
   be18c:	f000 f856 	bl	be23c <__retarget_lock_acquire_recursive>
   be190:	4b25      	ldr	r3, [pc, #148]	; (be228 <__register_exitproc+0xb0>)
   be192:	681c      	ldr	r4, [r3, #0]
   be194:	b934      	cbnz	r4, be1a4 <__register_exitproc+0x2c>
   be196:	4c25      	ldr	r4, [pc, #148]	; (be22c <__register_exitproc+0xb4>)
   be198:	601c      	str	r4, [r3, #0]
   be19a:	4b25      	ldr	r3, [pc, #148]	; (be230 <__register_exitproc+0xb8>)
   be19c:	b113      	cbz	r3, be1a4 <__register_exitproc+0x2c>
   be19e:	681b      	ldr	r3, [r3, #0]
   be1a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   be1a4:	6863      	ldr	r3, [r4, #4]
   be1a6:	2b1f      	cmp	r3, #31
   be1a8:	dd07      	ble.n	be1ba <__register_exitproc+0x42>
   be1aa:	f8d8 0000 	ldr.w	r0, [r8]
   be1ae:	f000 f847 	bl	be240 <__retarget_lock_release_recursive>
   be1b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be1ba:	b34e      	cbz	r6, be210 <__register_exitproc+0x98>
   be1bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   be1c0:	b988      	cbnz	r0, be1e6 <__register_exitproc+0x6e>
   be1c2:	4b1c      	ldr	r3, [pc, #112]	; (be234 <__register_exitproc+0xbc>)
   be1c4:	b923      	cbnz	r3, be1d0 <__register_exitproc+0x58>
   be1c6:	f8d8 0000 	ldr.w	r0, [r8]
   be1ca:	f000 f838 	bl	be23e <__retarget_lock_release>
   be1ce:	e7f0      	b.n	be1b2 <__register_exitproc+0x3a>
   be1d0:	f44f 7084 	mov.w	r0, #264	; 0x108
   be1d4:	f7fb f9f2 	bl	b95bc <malloc>
   be1d8:	2800      	cmp	r0, #0
   be1da:	d0f4      	beq.n	be1c6 <__register_exitproc+0x4e>
   be1dc:	2300      	movs	r3, #0
   be1de:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   be1e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   be1e6:	6863      	ldr	r3, [r4, #4]
   be1e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   be1ec:	2201      	movs	r2, #1
   be1ee:	409a      	lsls	r2, r3
   be1f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   be1f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   be1f8:	4313      	orrs	r3, r2
   be1fa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be1fe:	2e02      	cmp	r6, #2
   be200:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   be204:	bf02      	ittt	eq
   be206:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   be20a:	4313      	orreq	r3, r2
   be20c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   be210:	6863      	ldr	r3, [r4, #4]
   be212:	f8d8 0000 	ldr.w	r0, [r8]
   be216:	1c5a      	adds	r2, r3, #1
   be218:	3302      	adds	r3, #2
   be21a:	6062      	str	r2, [r4, #4]
   be21c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   be220:	f000 f80e 	bl	be240 <__retarget_lock_release_recursive>
   be224:	2000      	movs	r0, #0
   be226:	e7c6      	b.n	be1b6 <__register_exitproc+0x3e>
   be228:	2003e7e8 	.word	0x2003e7e8
   be22c:	2003e75c 	.word	0x2003e75c
   be230:	00000000 	.word	0x00000000
   be234:	000b95bd 	.word	0x000b95bd
   be238:	2003e084 	.word	0x2003e084

000be23c <__retarget_lock_acquire_recursive>:
   be23c:	4770      	bx	lr

000be23e <__retarget_lock_release>:
   be23e:	4770      	bx	lr

000be240 <__retarget_lock_release_recursive>:
   be240:	4770      	bx	lr

000be242 <link_code_end>:
	...

000be244 <dynalib_user>:
   be244:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be254:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   be264:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   be274:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   be284:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   be294:	7420 206f 7325 6f00 6666 2500 0054 6c53      to %s.off.%T.Sl
   be2a4:	6565 2070 6f66 2072 6c25 2075 6573 6f63     eep for %lu seco
   be2b4:	646e 2073 6e75 6974 206c 656e 7478 6520     nds until next e
   be2c4:	6576 746e 6120 2074 7325 7720 7469 2068     vent at %s with 
   be2d4:	6573 736e 726f 2520 0073 6954 656d 6e20     sensor %s.Time n
   be2e4:	746f 7620 6c61 6469 202c 6c73 6565 6970     ot valid, sleepi
   be2f4:	676e 6620 726f 3620 2030 6573 6f63 646e     ng for 60 second
   be304:	0073 6f57 656b 7720 7469 2068 7375 7265     s.Woke with user
   be314:	6220 7475 6f74 006e 6f57 656b 7720 7469      button.Woke wit
   be324:	2068 6573 736e 726f 6920 746e 7265 7572     h sensor interru
   be334:	7470 5400 6d69 2065 7369 7520 2070 7461     pt.Time is up at
   be344:	2520 2073 6977 6874 2520 696c 6620 6572      %s with %li fre
   be354:	2065 656d 6f6d 7972 4100 656c 7472 6320     e memory.Alert c
   be364:	646f 2065 203d 6425 5400 6f6f 6d20 6e61     ode = %d.Too man
   be374:	2079 6572 7274 6569 2073 202d 6967 6976     y retries - givi
   be384:	676e 7520 2070 6f66 2072 6874 7369 7020     ng up for this p
   be394:	7265 6f69 0064 6f4e 6874 6e69 2067 6f66     eriod.Nothing fo
   be3a4:	2072 7774 206f 6572 6f70 7472 6e69 2067     r two reporting 
   be3b4:	6570 6972 646f 2073 202d 6f70 6577 2072     periods - power 
   be3c4:	7963 6c63 2065 6661 6574 2072 7563 7272     cycle after curr
   be3d4:	6e65 2074 7963 6c63 0065 7254 6e61 6d73     ent cycle.Transm
   be3e4:	7369 6973 6e6f 6620 6961 656c 2064 202d     ission failed - 
   be3f4:	6572 7274 2079 756e 626d 7265 2520 0064     retry number %d.
   be404:	6f47 6e69 2067 6f74 7220 7465 7972 6920     Going to retry i
   be414:	206e 6c25 2075 6573 6f63 646e 0073 6f4c     n %lu seconds.Lo
   be424:	4152 5220 6461 6f69 6920 696e 6974 6c61     RA Radio initial
   be434:	7a69 6465 6120 2073 6e61 7520 636e 6e6f     ized as an uncon
   be444:	6966 7567 6572 2064 6f6e 6564 2520 2069     figured node %i 
   be454:	6e61 2064 2061 6564 6976 6563 4449 6f20     and a deviceID o
   be464:	2066 7325 4100 656c 7472 3220 202d 6954     f %s.Alert 2- Ti
   be474:	656d 6920 2073 6f6e 2074 6176 696c 2064     me is not valid 
   be484:	6f67 6e69 2067 6f74 6a20 696f 206e 6761     going to join ag
   be494:	6961 006e 6c41 7265 2074 2033 202d 6552     ain.Alert 3 - Re
   be4a4:	6573 7474 6e69 2067 6564 6976 6563 4900     setting device.I
   be4b4:	696e 6974 6c61 7a69 2065 6f4c 4152 7220     nitialize LoRA r
   be4c4:	6461 6f69 4900 696e 6974 6c61 7a69 7461     adio.Initializat
   be4d4:	6f69 206e 7573 6363 7365 6673 6c75 4900     ion successful.I
   be4e4:	696e 6974 6c61 7a69 7461 6f69 206e 6f6e     nitialization no
   be4f4:	2074 7573 6363 7365 6673 6c75 2d20 7020     t successful - p
   be504:	776f 7265 6320 6379 656c 4600 6c75 206c     ower cycle.Full 
   be514:	6552 6573 2074 6e61 2064 6552 4a2d 696f     Reset and Re-Joi
   be524:	206e 654e 7774 726f 006b 6e55 6564 6966     n Network.Undefi
   be534:	656e 2064 7245 6f72 2072 7453 7461 0065     ned Error State.
   be544:	6552 6573 7474 6e69 2067 7564 2065 6f74     Resetting due to
   be554:	6c20 776f 6d20 6d65 726f 0079 6544 6574      low memory.Dete
   be564:	7463 6465 6220 7475 6f74 206e 7270 7365     cted button pres
   be574:	0073 6e49 7420 6568 6420 7369 6f63 6e6e     s.In the disconn
   be584:	6365 2074 7266 6d6f 5020 7261 6974 6c63     ect from Particl
   be594:	2065 7566 636e 6974 6e6f 4600 6961 656c     e function.Faile
   be5a4:	2064 6f74 6420 7369 6f63 6e6e 6365 2074     d to disconnect 
   be5b4:	7266 6d6f 5020 7261 6974 6c63 0065 6944     from Particle.Di
   be5c4:	6373 6e6f 656e 7463 6465 6620 6f72 206d     sconnected from 
   be5d4:	6150 7472 6369 656c 6920 206e 6925 7320     Particle in %i s
   be5e4:	6365 6e6f 7364 4600 6961 656c 2064 6f74     econds.Failed to
   be5f4:	7420 7275 206e 666f 2066 6874 2065 6543      turn off the Ce
   be604:	6c6c 6c75 7261 6d20 646f 6d65 5400 7275     llular modem.Tur
   be614:	656e 2064 666f 2066 6874 2065 6563 6c6c     ned off the cell
   be624:	6c75 7261 6d20 646f 6d65 6920 206e 6925     ular modem in %i
   be634:	7320 6365 6e6f 7364 5500 6573 2072 7562      seconds.User bu
   be644:	7474 6e6f 7020 6572 7373 6465 6120 2074     tton pressed at 
   be654:	7473 7261 7574 2070 202d 7461 6574 706d     startup - attemp
   be664:	2074 6f74 6320 6e6f 656e 7463 4300 6e6f     t to connect.Con
   be674:	656e 7463 6f69 206e 6974 656d 756f 2074     nection timeout 
   be684:	202d 6964 6373 6e6f 656e 7463 6120 646e     - disconnect and
   be694:	7220 7365 7465 4300 6e6f 656e 7463 6465      reset.Connected
   be6a4:	2d20 7320 6174 6979 676e 6f20 6c6e 6e69      - staying onlin
   be6b4:	2065 6f66 2072 7075 6164 6574 4c00 526f     e for update.LoR
   be6c4:	2041 6e49 7469 6169 696c 617a 6974 6e6f     A Initialization
   be6d4:	6620 6961 756c 6572 6120 656c 7472 6320      failure alert c
   be6e4:	646f 2065 6425 2d20 7020 776f 7265 6320     ode %d - power c
   be6f4:	6379 656c 6920 206e 3033 4e00 646f 2065     ycle in 30.Node 
   be704:	756e 626d 7265 6920 646e 6369 7461 6465     number indicated
   be714:	7520 636e 6e6f 6966 7567 6572 2064 6f6e      unconfigured no
   be724:	6564 6f20 2066 6425 7320 7465 6974 676e     de of %d setting
   be734:	6120 656c 7472 6320 646f 2065 6f74 2520      alert code to %
   be744:	0064 7453 7261 7574 2070 6f63 706d 656c     d.Startup comple
   be754:	6574 6620 726f 7420 6568 4e20 646f 2065     te for the Node 
   be764:	6977 6874 6120 656c 7472 6320 646f 2065     with alert code 
   be774:	6425 6120 646e 6c20 7361 2074 6f63 6e6e     %d and last conn
   be784:	6365 2074 7325 0000                         ect %s..

000be78c <_ZTV5Timer>:
	...
   be794:	42ad 000b 4301 000b 4129 000b               .B...C..)A..

000be7a0 <_ZTVN5spark10LogHandlerE>:
	...
   be7b0:	40a5 000b 40cd 000b                         .@...@..

000be7b8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   be7c0:	4239 000b 426d 000b ad39 000b 40cf 000b     9B..mB..9....@..
   be7d0:	6e69 7469 6620 6961 656c 0064 6e69 4c20     init failed.in L
   be7e0:	526f 2041 6573 7574 2070 202d 6f6e 6564     oRA setup - node
   be7f0:	6e20 6d75 6562 2072 6425 4c00 526f 2041      number %d.LoRA 
   be800:	6152 6964 206f 6e69 7469 6169 696c 657a     Radio initialize
   be810:	2064 7361 6120 6720 7461 7765 7961 7720     d as a gateway w
   be820:	7469 2068 2061 6564 6976 6563 4449 6f20     ith a deviceID o
   be830:	2066 7325 4c00 526f 2041 6152 6964 206f     f %s.LoRA Radio 
   be840:	6e69 7469 6169 696c 657a 2064 7361 6e20     initialized as n
   be850:	646f 2065 6925 6120 646e 6120 6420 7665     ode %i and a dev
   be860:	6369 4965 2044 666f 2520 0073 6f4c 4152     iceID of %s.LoRA
   be870:	5220 6461 6f69 6920 696e 6974 6c61 7a69      Radio initializ
   be880:	6465 6120 2073 6e61 7520 636e 6e6f 6966     ed as an unconfi
   be890:	7567 6572 2064 6f6e 6564 2520 2069 6e61     gured node %i an
   be8a0:	2064 2061 6564 6976 6563 4449 6f20 2066     d a deviceID of 
   be8b0:	7325 6120 646e 6120 656c 7472 6320 646f     %s and alert cod
   be8c0:	2065 6425 7700 7469 0068 6977 6874 756f     e %d.with.withou
   be8d0:	0074 706f 6e65 6300 6f6c 6573 0064 6854     t.open.closed.Th
   be8e0:	2065 6167 7774 7961 6920 2073 7075 6164     e gatway is upda
   be8f0:	6974 676e 7320 6e65 6f73 2072 7974 6570     ting sensor type
   be900:	6620 6f72 206d 6425 7420 206f 6425 5400      from %d to %d.T
   be910:	6568 6720 7461 7765 7961 7320 7465 6120     he gateway set a
   be920:	206e 6c61 7265 2074 6425 5000 7261 206b     n alert %d.Park 
   be930:	7369 6320 6f6c 6573 2064 202d 6572 6573     is closed - rese
   be940:	2074 7665 7265 7479 6968 676e 4400 7461     t everything.Dat
   be950:	2061 6572 6f70 7472 6120 6b63 6f6e 6c77     a report acknowl
   be960:	6465 6567 2064 7325 6120 656c 7472 6620     edged %s alert f
   be970:	726f 6d20 7365 6173 6567 2520 2064 6170     or message %d pa
   be980:	6b72 6920 2073 7325 6120 646e 6120 656c     rk is %s and ale
   be990:	7472 6320 646f 2065 7369 2520 0064 6f4e     rt code is %d.No
   be9a0:	6564 2520 2064 6f4a 6e69 7220 7165 6575     de %d Join reque
   be9b0:	7473 6120 6b63 6f6e 6c77 6465 6567 2064     st acknowledged 
   be9c0:	6e61 2064 6573 736e 726f 7320 7465 7420     and sensor set t
   be9d0:	206f 6425 4d00 6761 6369 4e20 6d75 6562     o %d.Magic Numbe
   be9e0:	2072 696d 6d73 7461 6863 2d20 6920 6e67     r mismatch - ign
   be9f0:	726f 6e69 2067 656d 7373 6761 0065 6552     oring message.Re
   bea00:	6563 7669 6465 6620 6f72 206d 6f6e 6564     ceived from node
   bea10:	2520 2064 6977 6874 5220 5353 2049 202f      %d with RSSI / 
   bea20:	4e53 2052 666f 2520 2064 202f 6425 2d20     SNR of %d / %d -
   bea30:	6120 2520 2073 656d 7373 6761 2065 6977      a %s message wi
   bea40:	6874 2520 2064 6f68 7370 5300 7465 6320     th %d hops.Set c
   bea50:	6f6c 6b63 7420 206f 7325 6120 646e 7220     lock to %s and r
   bea60:	7065 726f 2074 7266 7165 6575 636e 2079     eport frequency 
   bea70:	6f74 2520 2064 696d 756e 6574 0073 6e49     to %d minutes.In
   bea80:	6176 656c 2064 6f4c 4152 6d20 7365 6173     valed LoRA messa
   bea90:	6567 6620 616c 0067 6f4e 6564 2520 2064     ge flag.Node %d 
   beaa0:	6164 6174 7220 7065 726f 2074 6564 696c     data report deli
   beab0:	6576 6572 2064 202d 7573 6363 7365 2073     vered - success 
   beac0:	6172 6574 2520 2e34 6632 6120 646e 2020     rate %4.2f and  
   bead0:	5352 4953 532f 524e 6f20 2066 6425 2f20     RSSI/SNR of %d /
   beae0:	2520 2064 4e00 646f 2065 6425 2d20 4420      %d .Node %d - D
   beaf0:	7461 2061 6572 6f70 7472 7320 6e65 2064     ata report send 
   beb00:	6f74 6720 7461 7765 7961 2520 2064 6166     to gateway %d fa
   beb10:	6c69 6465 2d20 4e20 206f 6f52 7475 2065     iled - No Route 
   beb20:	202d 7573 6363 7365 2073 6172 6574 2520     - success rate %
   beb30:	2e34 6632 4e00 646f 2065 6425 2d20 4420     4.2f.Node %d - D
   beb40:	7461 2061 6572 6f70 7472 7320 6e65 2064     ata report send 
   beb50:	6f74 6720 7461 7765 7961 2520 2064 6166     to gateway %d fa
   beb60:	6c69 6465 2d20 5520 616e 6c62 2065 6f74     iled - Unable to
   beb70:	4420 6c65 7669 7265 2d20 7320 6375 6563      Deliver - succe
   beb80:	7373 7220 7461 2065 3425 322e 0066 6f4e     ss rate %4.2f.No
   beb90:	6564 2520 2064 202d 6144 6174 7220 7065     de %d - Data rep
   beba0:	726f 2074 6573 646e 7420 206f 6167 6574     ort send to gate
   bebb0:	6177 2079 6425 6620 6961 656c 2064 2d20     way %d failed  -
   bebc0:	5520 6b6e 6f6e 6e77 2d20 7320 6375 6563      Unknown - succe
   bebd0:	7373 7220 7461 2065 3425 322e 0066 6f4a     ss rate %4.2f.Jo
   bebe0:	6e69 7220 7165 6575 7473 7320 6e65 2074     in request sent 
   bebf0:	6f74 6720 7461 7765 7961 7320 6375 6563     to gateway succe
   bec00:	7373 7566 6c6c 2079 5352 4953 532f 524e     ssfully RSSI/SNR
   bec10:	6f20 2066 6425 2f20 2520 2064 4a00 696f      of %d / %d .Joi
   bec20:	206e 6572 7571 7365 2074 6f74 4720 7461     n request to Gat
   bec30:	7765 7961 6620 6961 656c 0064               eway failed.

000bec3c <_ZTVN8particle9LEDStatusE>:
	...
   bec44:	52f5 000b 5311 000b 52e1 000b               .R...S...R..

000bec50 <_ZTV14LoRA_Functions>:
	...
   bec58:	52e3 000b 52e5 000b 6f6e 2074 6176 696c     .R...R..not vali
   bec68:	0064 6164 6174 6e20 746f 7620 6c61 6469     d.data not valid
   bec78:	6620 6572 7571 6e65 7963 6d20 6e69 7475      frequency minut
   bec88:	7365 3d20 6425 6400 7461 2061 6f6e 2074     es =%d.data not 
   bec98:	6176 696c 2064 6f6e 6564 6e20 6d75 6562     valid node numbe
   beca8:	2072 253d 0064 7973 5373 6174 7574 2073     r =%d.sysStatus 
   becb8:	6164 6174 6920 2073 7325 6300 7275 6572     data is %s.curre
   becc8:	746e 6420 7461 2061 6f6e 2074 6176 696c     nt data not vali
   becd8:	2064 6f68 7275 796c 6f43 6e75 3d74 6425     d hourlyCount=%d
   bece8:	6300 7275 6572 746e 6420 7461 2061 7369     .current data is
   becf8:	2520 0073 6164 6174 6920 696e 6974 6c61      %s.data initial
   bed08:	7a69 6465 4c00 616f 6964 676e 7320 7379     ized.Loading sys
   bed18:	6574 206d 6564 6166 6c75 7374 4300 7275     tem defaults.Cur
   bed28:	6572 746e 4420 7461 2061 6e49 7469 6169     rent Data Initia
   bed38:	696c 657a 0064 0000                         lized...

000bed40 <_ZTV8MB85RC64>:
	...
   bed48:	5d11 000b 5d25 000b 74a1 000b 7537 000b     .]..%]...t..7u..
   bed58:	75b9 000b                                   .u..

000bed5c <_ZTV13sysStatusData>:
	...
   bed64:	5e39 000b 5da3 000b 5d7b 000b 8bc7 000b     9^...]..{]......
   bed74:	8bef 000b 610d 000b 62ed 000b 5d39 000b     .....a...b..9]..
   bed84:	5d51 000b                                   Q]..

000bed88 <_ZTV17currentStatusData>:
	...
   bed90:	5f1d 000b 5da3 000b 5d7b 000b 8bc7 000b     ._...]..{]......
   beda0:	8bef 000b 619d 000b 63c9 000b 5ce5 000b     .....a...c...\..
   bedb0:	5cfd 000b 6e49 7469 6c61 7a69 6e69 2067     .\..Initalizing 
   bedc0:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   bedd0:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   bede0:	6f43 666e 6769 0000                         Config..

000bede8 <BLUE_LED>:
   bede8:	0007                                        ..

000bedea <BUTTON_PIN>:
   bedea:	0004                                        ..

000bedec <INT_PIN>:
   bedec:	0012                                        ..

000bedee <RFM95_CS>:
   bedee:	0005                                        ..

000bedf0 <RFM95_INT>:
   bedf0:	0002                                        ..

000bedf2 <RFM95_RST>:
   bedf2:	0006                                        ..

000bedf4 <TMP36_SENSE_PIN>:
   bedf4:	000f 6e55 6e6b 776f 006e 6f4e 656e 5700     ..Unknown.None.W
   bee04:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
   bee14:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
   bee24:	4c00 4554 435f 5441 4d5f 0031 544c 5f45     .LTE_CAT_M1.LTE_
   bee34:	4143 5f54 424e 0031 6f4e 2074 6843 7261     CAT_NB1.Not Char
   bee44:	6967 676e 4300 6168 6772 6465 4400 7369     ging.Charged.Dis
   bee54:	6863 7261 6967 676e 4600 7561 746c 4400     charging.Fault.D
   bee64:	6369 6e6f 656e 7463 6465 4100 7373 7265     iconnected.Asser
   bee74:	6974 6e6f 6146 6c69 7275 2065 702a 705f     tionFailure *p_p
   bee84:	6e69 3c20 2820 3233 2b20 3120 2936 2500     in < (32 + 16).%
   bee94:	2073 3a53 3225 302e 2566 2c25 5120 253a     s S:%2.0f%%, Q:%
   beea4:	2e32 6630 2525 0020 6f43 6e75 2c74 6820     2.0f%% .Count, h
   beeb4:	756f 6c72 3a79 2520 2e69 6420 6961 796c     ourly: %i. daily
   beec4:	203a 6925 4100 7373 7265 6974 6e6f 6146     : %i.AssertionFa
   beed4:	6c69 7275 2065 7273 2063 2626 7320 6372     ilure src && src
   beee4:	3e2d 6163 6c6c 6162 6b63 0000 edf6 000b     ->callback......
   beef4:	edfe 000b ee03 000b ee08 000b ee0c 000b     ................
   bef04:	ee11 000b ee16 000b ee1a 000b ee25 000b     ............%...
   bef14:	ee30 000b 6166 6c69 6465 7420 206f 6572     0...failed to re
   bef24:	6461 7220 6765 6441 7264 253d 3230 2078     ad regAddr=%02x 
   bef34:	6f63 6e75 3d74 7525 6600 6961 656c 2064     count=%u.failed 
   bef44:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   bef54:	3025 7832 7320 6174 3d74 6425 4600 554f     %02x stat=%d.FOU
   bef64:	2054 6964 2064 6f6e 2074 6f67 4820 4749     T did not go HIG
   bef74:	0048 6f6e 2074 6564 6574 7463 6465 6600     H.not detected.f
   bef84:	6961 656c 2064 6f74 7720 6972 6574 7220     ailed to write r
   bef94:	6765 6441 7264 253d 3230 2078 7473 7461     egAddr=%02x stat
   befa4:	253d 0064 6573 5774 5444 2520 0064 6177     =%d.setWDT %d.wa
   befb4:	6374 6468 676f 6320 656c 7261 6465 6220     tchdog cleared b
   befc4:	6552 7573 746c 253d 0064 6177 6374 6468     Result=%d.watchd
   befd4:	676f 7320 7465 6620 756f 5372 6365 3d73     og set fourSecs=
   befe4:	6425 6220 6552 7573 746c 253d 0064 4157     %d bResult=%d.WA
   beff4:	4354 4448 474f 4400 4545 5f50 4f50 4557     TCHDOG.DEEP_POWE
   bf004:	5f52 4f44 4e57 4300 554f 544e 4f44 4e57     R_DOWN.COUNTDOWN
   bf014:	545f 4d49 5245 4100 414c 4d52 6600 6961     _TIMER.ALARM.fai
   bf024:	756c 6572 6920 206e 7075 6164 6574 6157     lure in updateWa
   bf034:	656b 6552 7361 6e6f 2520 0064 6177 656b     keReason %d.wake
   bf044:	7220 6165 6f73 206e 203d 7325 6600 6961      reason = %s.fai
   bf054:	756c 6572 6920 206e 6573 4374 756f 746e     lure in setCount
   bf064:	6f64 6e77 6954 656d 2072 6425 6600 6961     downTimer %d.fai
   bf074:	756c 6572 6920 206e 6564 7065 6f50 6577     lure in deepPowe
   bf084:	4472 776f 206e 6425 5200 4745 535f 454c     rDown %d.REG_SLE
   bf094:	5045 435f 5254 3d4c 7830 3225 0078 6964     EP_CTRL=0x%2x.di
   bf0a4:	6e64 7427 7020 776f 7265 6420 776f 006e     dn't power down.
   bf0b4:	3025 6434 252d 3230 2d64 3025 6432 2520     %04d-%02d-%02d %
   bf0c4:	3230 3a64 3025 6432 253a 3230 0064 6567     02d:%02d:%02d.ge
   bf0d4:	5274 6374 7341 6d54 2520 0073 6573 5274     tRtcAsTm %s.setR
   bf0e4:	6374 7341 6d54 2520 0073 6166 6c69 7275     tcAsTm %s.failur
   bf0f4:	2065 6e69 7320 7465 7452 4663 6f72 546d     e in setRtcFromT
   bf104:	206d 6425 7300 7465 5220 4354 6620 6f72     m %d.set RTC fro
   bf114:	206d 6c63 756f 2064 7325 7300 7465 7320     m cloud %s.set s
   bf124:	7379 6574 206d 6c63 636f 206b 7266 6d6f     ystem clock from
   bf134:	5220 4354 2520 0073 6166 6c69 6465 7420      RTC %s.failed t
   bf144:	206f 6564 6574 7463 4120 3142 3038 0035     o detect AB1805.
   bf154:	7061 2e70 6261 3831 3530 0000               app.ab1805..

000bf160 <_ZTV6AB1805>:
	...
   bf168:	6939 000b 693b 000b 6fb1 000b 7037 000b     9i..;i...o..7p..

000bf178 <_ZTV6MB85RC>:
	...
   bf180:	7461 000b 7463 000b 74a1 000b 7537 000b     at..ct...t..7u..
   bf190:	75b9 000b                                   .u..

000bf194 <_ZTV15RHGenericDriver>:
	...
   bf1a4:	7775 000b 40a5 000b 40a5 000b 40a5 000b     uw...@...@...@..
   bf1b4:	40a5 000b 77d7 000b 7779 000b 7827 000b     .@...w..yw..'x..
   bf1c4:	77f5 000b 784b 000b 7783 000b 778b 000b     .w..Kx...w...w..
   bf1d4:	778f 000b 7793 000b 7797 000b 779b 000b     .w...w...w...w..
   bf1e4:	7787 000b 77a7 000b 77ab 000b 77af 000b     .w...w...w...w..
   bf1f4:	77b3 000b 77b7 000b 77bd 000b 77c1 000b     .w...w...w...w..
   bf204:	7783 000b 77c5 000b 77cb 000b 77d1 000b     .w...w...w...w..

000bf214 <_ZTV12RHGenericSPI>:
	...
   bf21c:	40a5 000b 78a9 000b 78ab 000b 40a5 000b     .@...x...x...@..
   bf22c:	40a5 000b 78b3 000b 78b7 000b 78bb 000b     .@...x...x...x..
   bf23c:	78ad 000b 78af 000b 78b1 000b 6564 6166     .x...x...x..defa
   bf24c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bf25c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bf26c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bf27c:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bf28c <_ZTVN8particle11SPISettingsE>:
	...
   bf294:	7901 000b 78d5 000b 78d7 000b               .y...x...x..

000bf2a0 <_ZTV13RHHardwareSPI>:
	...
   bf2a8:	79b5 000b 79c9 000b 79d7 000b 79e5 000b     .y...y...y...y..
   bf2b8:	7a51 000b 78b3 000b 78b7 000b 78bb 000b     Qz...x...x...x..
   bf2c8:	7a5f 000b 7a73 000b 7a81 000b               _z..sz...z..

000bf2d4 <_ZTV6RHMesh>:
	...
   bf2dc:	7b4d 000b 7df5 000b 7aad 000b 7a99 000b     M{...}...z...z..

000bf2ec <_ZTV8RHRouter>:
	...
   bf2f4:	8065 000b 80a9 000b                         e.......

000bf2fc <_ZTV11RHSPIDriver>:
	...
   bf30c:	8345 000b 40a5 000b 40a5 000b 40a5 000b     E....@...@...@..
   bf31c:	40a5 000b 77d7 000b 7779 000b 7827 000b     .@...w..yw..'x..
   bf32c:	77f5 000b 784b 000b 7783 000b 778b 000b     .w..Kx...w...w..
   bf33c:	778f 000b 7793 000b 7797 000b 779b 000b     .w...w...w...w..
   bf34c:	7787 000b 77a7 000b 77ab 000b 77af 000b     .w...w...w...w..
   bf35c:	77b3 000b 77b7 000b 77bd 000b 77c1 000b     .w...w...w...w..
   bf36c:	7783 000b 77c5 000b 77cb 000b 77d1 000b     .w...w...w...w..
   bf37c:	8371 000b 837b 000b 999a 40f9 6666 4126     q...{......@ff&A
   bf38c:	999a 4179 6666 41a6 0000 41fa cccd 4226     ..yAff.A...A..&B
   bf39c:	0000 427a 0000 42fa 0000 437a 0000 43fa     ..zB...B..zC...C
   bf3ac:	c000 45f3 8000 4622 c000 4673 8000 46a2     ...E.."F..sF...F
   bf3bc:	2400 46f4 e400 4722 2400 4774 2400 47f4     .$.F.."G.$tG.$.G
   bf3cc:	2400 4874 2400 48f4                         .$tH.$.H

000bf3d4 <_ZL18MODEM_CONFIG_TABLE>:
   bf3d4:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bf3e4 <_ZTV7RH_RF95>:
	...
   bf3ec:	84e3 000b 851b 000b 89f1 000b 8887 000b     ................
   bf3fc:	8551 000b 88cf 000b 84df 000b 77d7 000b     Q............w..
   bf40c:	7779 000b 7827 000b 77f5 000b 784b 000b     yw..'x...w..Kx..
   bf41c:	84e5 000b 778b 000b 778f 000b 7793 000b     .....w...w...w..
   bf42c:	7797 000b 779b 000b 7787 000b 77a7 000b     .w...w...w...w..
   bf43c:	77ab 000b 77af 000b 77b3 000b 77b7 000b     .w...w...w...w..
   bf44c:	77bd 000b 77c1 000b 852b 000b 77c5 000b     .w...w..+....w..
   bf45c:	77cb 000b 77d1 000b 8371 000b 837b 000b     .w...w..q...{...
   bf46c:	84db 000b 6173 6976 676e 6420 7461 2061     ....saving data 
   bf47c:	6973 657a 253d 0064 6176 696c 6164 6974     size=%d.validati
   bf48c:	676e 6420 7461 2061 6973 657a 253d 0064     ng data size=%d.
   bf49c:	6f67 3a74 6d20 6761 6369 253d 3830 2078     got: magic=%08x 
   bf4ac:	6576 7372 6f69 3d6e 3025 7834 7320 7a69     version=%04x siz
   bf4bc:	3d65 3025 7834 6820 7361 3d68 3025 7838     e=%04x hash=%08x
   bf4cc:	6500 7078 203a 616d 6967 3d63 3025 7838     .exp: magic=%08x
   bf4dc:	7620 7265 6973 6e6f 253d 3430 2078 6973      version=%04x si
   bf4ec:	657a 253d 3430 2078 6168 6873 253d 3830     ze=%04x hash=%08
   bf4fc:	0078 0000                                   x...

000bf500 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bf508:	8bc1 000b 8c6d 000b 8c29 000b 8bc7 000b     ....m...).......
   bf518:	8bef 000b 8d59 000b 8e25 000b               ....Y...%...

000bf524 <_ZTVN5spark13CellularClassE>:
	...
   bf52c:	9787 000b 977d 000b 9773 000b 9729 000b     ....}...s...)...
   bf53c:	9767 000b 975b 000b b091 000b b099 000b     g...[...........
   bf54c:	974f 000b 9747 000b 973d 000b 9733 000b     O...G...=...3...
   bf55c:	b0c9 000b                                   ....

000bf560 <_ZTV14CellularSignal>:
	...
   bf568:	9815 000b 9879 000b 9817 000b 9889 000b     ....y...........
   bf578:	98bd 000b 98e9 000b 991d 000b 983d 000b     ............=...
   bf588:	981b 000b 9837 000b fffc ffff 0000 0000     ....7...........
   bf598:	9871 000b                                   q...

000bf59c <_ZTVN5spark13EthernetClassE>:
	...
   bf5a4:	99f3 000b 99e9 000b 99df 000b 99d5 000b     ................
   bf5b4:	99c9 000b 99bd 000b b091 000b b099 000b     ................
   bf5c4:	99b1 000b 99a9 000b 999f 000b 9995 000b     ................
   bf5d4:	b0c9 000b                                   ....

000bf5d8 <_ZTV7TwoWire>:
	...
   bf5e0:	9ac3 000b 9b0d 000b 9ae5 000b 9ac5 000b     ................
   bf5f0:	9aed 000b 9af5 000b 9afd 000b 9b05 000b     ................

000bf600 <_ZTV9IPAddress>:
	...
   bf608:	9c89 000b 9c79 000b 9c7b 000b 2575 3430     ....y...{...u%04
   bf618:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bf628:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bf638:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bf648:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bf658:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bf668:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   bf678:	6f63 6564 6400 7465 6961 006c               code.detail.

000bf684 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf68c:	a185 000b a1ab 000b a169 000b 9d97 000b     ........i.......

000bf69c <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf6a4:	a5e1 000b a5f9 000b ad39 000b 40cf 000b     ........9....@..

000bf6b4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf6bc:	a60d 000b a621 000b aedd 000b a171 000b     ....!.......q...

000bf6cc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf6d4:	a183 000b a1b9 000b ac9d 000b a173 000b     ............s...

000bf6e4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf6ec:	a181 000b a1c7 000b a549 000b a1e9 000b     ........I.......

000bf6fc <_ZTVN5spark12NetworkClassE>:
	...
   bf704:	b051 000b b05b 000b b065 000b b06f 000b     Q...[...e...o...
   bf714:	b079 000b b085 000b b091 000b b099 000b     y...............
   bf724:	b0a1 000b b0ad 000b b0b5 000b b0bf 000b     ................
   bf734:	b0c9 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bf744 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bf744:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bf754:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bf764:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bf774:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bf784:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bf794:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bf7a4 <_ZTV11USARTSerial>:
	...
   bf7ac:	bcb1 000b bd1d 000b bcf5 000b b1b5 000b     ................
   bf7bc:	bcc5 000b bce1 000b bcd3 000b bcef 000b     ................
   bf7cc:	bcb3 000b bcb7 000b                         ........

000bf7d4 <_ZTV9USBSerial>:
	...
   bf7dc:	bd6f 000b bdd7 000b bdad 000b b1b5 000b     o...............
   bf7ec:	bd9f 000b bd71 000b bd81 000b bdd1 000b     ....q...........
   bf7fc:	bd91 000b bd69 000b                         ....i...

000bf804 <_ZSt7nothrow>:
	...

000bf810 <TWO52>:
   bf810:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   bf820:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   bf830:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000bf840 <day_name.1>:
   bf840:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bf850:	6972 6153                                    riSat

000bf855 <mon_name.0>:
   bf855:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bf865:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bf875:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bf885:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bf895:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bf8a5:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bf8b5:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bf8c5:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bf8d5:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bf8e5:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bf8f5:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf905:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf915:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf925:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf935:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bf942 <_ctype_>:
   bf942:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf952:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf962:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf972:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf982:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf992:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf9a2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf9b2:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf9c2:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bfa43 <link_const_variable_data_end>:
	...

000bfa44 <link_constructors_location>:
   bfa44:	000b4e19 	.word	0x000b4e19
   bfa48:	000b5cad 	.word	0x000b5cad
   bfa4c:	000b6471 	.word	0x000b6471
   bfa50:	000b692d 	.word	0x000b692d
   bfa54:	000b7451 	.word	0x000b7451
   bfa58:	000b7a89 	.word	0x000b7a89
   bfa5c:	000b9719 	.word	0x000b9719
   bfa60:	000b97e5 	.word	0x000b97e5
   bfa64:	000b99fd 	.word	0x000b99fd
   bfa68:	000bad29 	.word	0x000bad29
   bfa6c:	000bb1a1 	.word	0x000bb1a1
   bfa70:	000bb4a9 	.word	0x000bb4a9
   bfa74:	000bb989 	.word	0x000bb989
   bfa78:	000bbc9d 	.word	0x000bbc9d

000bfa7c <link_constructors_end>:
   bfa7c:	00000000 	.word	0x00000000
