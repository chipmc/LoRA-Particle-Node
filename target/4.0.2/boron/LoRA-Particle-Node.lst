
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.2/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b5c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf5e0  000bf5e0  0000f5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf604  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  2003ddbc  000bf608  0002ddbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0003df38  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bf784  000bf784  0002f784  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf7ac  000bf7ac  0002f7ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001de866  00000000  00000000  0002f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000233a5  00000000  00000000  0020e016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004d592  00000000  00000000  002313bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004030  00000000  00000000  0027e94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d6f8  00000000  00000000  0028297d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00053276  00000000  00000000  00290075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00074648  00000000  00000000  002e32eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00145c30  00000000  00000000  00357933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bb58  00000000  00000000  0049d564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 fcf5 	bl	bda20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 fd17 	bl	bda70 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003ddbc 	.word	0x2003ddbc
   b404c:	000bf608 	.word	0x000bf608
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fd75 	bl	bbb50 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf59c 	.word	0x000bf59c
   b4080:	000bf5d4 	.word	0x000bf5d4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bd9c 	b.w	b4bc0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa09 	bl	b44a0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 bd15 	b.w	bbac0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bff9 	b.w	b908c <malloc>

000b409a <_Znaj>:
   b409a:	f004 bff7 	b.w	b908c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bffd 	b.w	b909c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fe98 	bl	b8de0 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8a31 	.word	0x000b8a31
   b40b8:	000bde28 	.word	0x000bde28

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z18outOfMemoryHandleryi+0x8>)
   b40da:	601a      	str	r2, [r3, #0]
}
   b40dc:	4770      	bx	lr
   b40de:	bf00      	nop
   b40e0:	2003ddbc 	.word	0x2003ddbc

000b40e4 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40e4:	4b01      	ldr	r3, [pc, #4]	; (b40ec <_Z13userSwitchISRv+0x8>)
   b40e6:	2201      	movs	r2, #1
   b40e8:	701a      	strb	r2, [r3, #0]
}
   b40ea:	4770      	bx	lr
   b40ec:	2003dfce 	.word	0x2003dfce

000b40f0 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40f0:	b530      	push	{r4, r5, lr}
   b40f2:	b085      	sub	sp, #20
   b40f4:	4604      	mov	r4, r0
   b40f6:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40f8:	b160      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40fa:	6840      	ldr	r0, [r0, #4]
   b40fc:	b150      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40fe:	6885      	ldr	r5, [r0, #8]
   b4100:	b145      	cbz	r5, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4102:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4106:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b410a:	68c4      	ldr	r4, [r0, #12]
   b410c:	ab01      	add	r3, sp, #4
   b410e:	466a      	mov	r2, sp
   b4110:	a902      	add	r1, sp, #8
   b4112:	47a0      	blx	r4
    }
   b4114:	b005      	add	sp, #20
   b4116:	bd30      	pop	{r4, r5, pc}

000b4118 <_Z9sensorISRv>:

void sensorISR()
{
   b4118:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b411a:	4c08      	ldr	r4, [pc, #32]	; (b413c <_Z9sensorISRv+0x24>)
   b411c:	7823      	ldrb	r3, [r4, #0]
   b411e:	b12b      	cbz	r3, b412c <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b4120:	4b07      	ldr	r3, [pc, #28]	; (b4140 <_Z9sensorISRv+0x28>)
   b4122:	2201      	movs	r2, #1
   b4124:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b4126:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b4128:	7023      	strb	r3, [r4, #0]
}
   b412a:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b412c:	f001 fca8 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4130:	f001 fdd4 	bl	b5cdc <_ZNK13sysStatusData14get_sensorTypeEv>
   b4134:	2801      	cmp	r0, #1
   b4136:	d0f3      	beq.n	b4120 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b4138:	2301      	movs	r3, #1
   b413a:	e7f5      	b.n	b4128 <_Z9sensorISRv+0x10>
   b413c:	2003df64 	.word	0x2003df64
   b4140:	2003dfcc 	.word	0x2003dfcc

000b4144 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4144:	b530      	push	{r4, r5, lr}
   b4146:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4148:	6800      	ldr	r0, [r0, #0]
   b414a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b414c:	9301      	str	r3, [sp, #4]
   b414e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4152:	6883      	ldr	r3, [r0, #8]
   b4154:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4158:	b90b      	cbnz	r3, b415e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b415a:	f007 fe7f 	bl	bbe5c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b415e:	68c3      	ldr	r3, [r0, #12]
   b4160:	aa01      	add	r2, sp, #4
   b4162:	a902      	add	r1, sp, #8
   b4164:	4798      	blx	r3
      }
   b4166:	b005      	add	sp, #20
   b4168:	bd30      	pop	{r4, r5, pc}

000b416a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b416a:	2a01      	cmp	r2, #1
   b416c:	d102      	bne.n	b4174 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416e:	6001      	str	r1, [r0, #0]
      }
   b4170:	2000      	movs	r0, #0
   b4172:	4770      	bx	lr
	  switch (__op)
   b4174:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4176:	bf04      	itt	eq
   b4178:	680b      	ldreq	r3, [r1, #0]
   b417a:	6003      	streq	r3, [r0, #0]
	      break;
   b417c:	e7f8      	b.n	b4170 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417e:	6803      	ldr	r3, [r0, #0]
   b4180:	6812      	ldr	r2, [r2, #0]
   b4182:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4186:	4718      	bx	r3

000b4188 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4188:	4b0a      	ldr	r3, [pc, #40]	; (b41b4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b418a:	b510      	push	{r4, lr}
   b418c:	4604      	mov	r4, r0
   b418e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4190:	f005 fe94 	bl	b9ebc <_ZN5spark10LogManager8instanceEv>
   b4194:	4621      	mov	r1, r4
   b4196:	f006 f8cc 	bl	ba332 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b419a:	f007 fc49 	bl	bba30 <_Z16_fetch_usbserialv>
   b419e:	f007 fc39 	bl	bba14 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b41a2:	4620      	mov	r0, r4
   b41a4:	4b04      	ldr	r3, [pc, #16]	; (b41b8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b41a6:	f840 3b04 	str.w	r3, [r0], #4
   b41aa:	f005 ff5d 	bl	ba068 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b41ae:	4620      	mov	r0, r4
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	000be2d8 	.word	0x000be2d8
   b41b8:	000be2c0 	.word	0x000be2c0

000b41bc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b41bc:	b510      	push	{r4, lr}
   b41be:	4604      	mov	r4, r0
    }
   b41c0:	f7ff ffe2 	bl	b4188 <_ZN5spark16SerialLogHandlerD1Ev>
   b41c4:	4620      	mov	r0, r4
   b41c6:	2124      	movs	r1, #36	; 0x24
   b41c8:	f7ff ff69 	bl	b409e <_ZdlPvj>
   b41cc:	4620      	mov	r0, r4
   b41ce:	bd10      	pop	{r4, pc}

000b41d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b41d0:	b510      	push	{r4, lr}
      if (_M_manager)
   b41d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b41d4:	4604      	mov	r4, r0
      if (_M_manager)
   b41d6:	b113      	cbz	r3, b41de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b41d8:	2203      	movs	r2, #3
   b41da:	4601      	mov	r1, r0
   b41dc:	4798      	blx	r3
    }
   b41de:	4620      	mov	r0, r4
   b41e0:	bd10      	pop	{r4, pc}

000b41e2 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b41e2:	b510      	push	{r4, lr}
            delete callableWrapper;
   b41e4:	4604      	mov	r4, r0
   b41e6:	b138      	cbz	r0, b41f8 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b41e8:	f7ff fff2 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b41ec:	4620      	mov	r0, r4
   b41ee:	2110      	movs	r1, #16
        };
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b41f4:	f7ff bf53 	b.w	b409e <_ZdlPvj>
        };
   b41f8:	bd10      	pop	{r4, pc}
	...

000b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b41fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4200:	4605      	mov	r5, r0
   b4202:	460f      	mov	r7, r1
   b4204:	4616      	mov	r6, r2
        if (valid_) {
   b4206:	b18b      	cbz	r3, b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4208:	6803      	ldr	r3, [r0, #0]
   b420a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b420c:	b183      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b420e:	889a      	ldrh	r2, [r3, #4]
   b4210:	2a01      	cmp	r2, #1
   b4212:	d006      	beq.n	b4222 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b4214:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4216:	e7f9      	b.n	b420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4218:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b421a:	b14b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b421c:	889a      	ldrh	r2, [r3, #4]
   b421e:	2a01      	cmp	r2, #1
   b4220:	d1fa      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b4222:	b12b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b4224:	899a      	ldrh	r2, [r3, #12]
   b4226:	42ba      	cmp	r2, r7
   b4228:	d1f6      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b422a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b422c:	4628      	mov	r0, r5
   b422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4230:	490a      	ldr	r1, [pc, #40]	; (b425c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b4232:	2010      	movs	r0, #16
   b4234:	f007 fe0e 	bl	bbe54 <_ZnwjRKSt9nothrow_t>
   b4238:	4604      	mov	r4, r0
   b423a:	b168      	cbz	r0, b4258 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b423c:	2210      	movs	r2, #16
   b423e:	2100      	movs	r1, #0
   b4240:	f009 fc16 	bl	bda70 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4244:	4b06      	ldr	r3, [pc, #24]	; (b4260 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b4246:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4248:	2301      	movs	r3, #1
   b424a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b424c:	692b      	ldr	r3, [r5, #16]
   b424e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4250:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b4252:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4254:	612c      	str	r4, [r5, #16]
   b4256:	e7e9      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4258:	7528      	strb	r0, [r5, #20]
                return *this;
   b425a:	e7e7      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b425c:	000bf35c 	.word	0x000bf35c
   b4260:	00030010 	.word	0x00030010

000b4264 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4264:	b40e      	push	{r1, r2, r3}
   b4266:	b500      	push	{lr}
   b4268:	b08c      	sub	sp, #48	; 0x30
   b426a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b426c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4270:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4274:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4276:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b427a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b427c:	6801      	ldr	r1, [r0, #0]
   b427e:	aa04      	add	r2, sp, #16
   b4280:	201e      	movs	r0, #30
    attr.flags = 0;
   b4282:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4286:	f004 fdbb 	bl	b8e00 <log_message_v>
}
   b428a:	b00c      	add	sp, #48	; 0x30
   b428c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4290:	b003      	add	sp, #12
   b4292:	4770      	bx	lr

000b4294 <_Z22publishStateTransitionv>:
{
   b4294:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4296:	4e13      	ldr	r6, [pc, #76]	; (b42e4 <_Z22publishStateTransitionv+0x50>)
   b4298:	4c13      	ldr	r4, [pc, #76]	; (b42e8 <_Z22publishStateTransitionv+0x54>)
   b429a:	7832      	ldrb	r2, [r6, #0]
   b429c:	4d13      	ldr	r5, [pc, #76]	; (b42ec <_Z22publishStateTransitionv+0x58>)
   b429e:	2a02      	cmp	r2, #2
{
   b42a0:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b42a2:	d117      	bne.n	b42d4 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b42a4:	f007 fac0 	bl	bb828 <_ZN9TimeClass7isValidEv>
   b42a8:	7832      	ldrb	r2, [r6, #0]
   b42aa:	782b      	ldrb	r3, [r5, #0]
   b42ac:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42b0:	9200      	str	r2, [sp, #0]
   b42b2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42b6:	b998      	cbnz	r0, b42e0 <_Z22publishStateTransitionv+0x4c>
   b42b8:	4a0d      	ldr	r2, [pc, #52]	; (b42f0 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   b42be:	a802      	add	r0, sp, #8
   b42c0:	f004 ff04 	bl	b90cc <snprintf>
	oldState = state;
   b42c4:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b42c6:	480b      	ldr	r0, [pc, #44]	; (b42f4 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b42c8:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b42ca:	a902      	add	r1, sp, #8
   b42cc:	f7ff ffca 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b42d0:	b042      	add	sp, #264	; 0x108
   b42d2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42d4:	782b      	ldrb	r3, [r5, #0]
   b42d6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42da:	9200      	str	r2, [sp, #0]
   b42dc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42e0:	4a05      	ldr	r2, [pc, #20]	; (b42f8 <_Z22publishStateTransitionv+0x64>)
   b42e2:	e7ea      	b.n	b42ba <_Z22publishStateTransitionv+0x26>
   b42e4:	2003dfcd 	.word	0x2003dfcd
   b42e8:	2003ddc0 	.word	0x2003ddc0
   b42ec:	2003dfc4 	.word	0x2003dfc4
   b42f0:	000bde3d 	.word	0x000bde3d
   b42f4:	2003e654 	.word	0x2003e654
   b42f8:	000bde5d 	.word	0x000bde5d
   b42fc:	00000000 	.word	0x00000000

000b4300 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static time_t nextPeriodBegins = 0;
	// First we will calculate the adjustment to the wakeboundary due to node number and retries
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b4304:	4d5c      	ldr	r5, [pc, #368]	; (b4478 <_Z21secondsUntilNextEventv+0x178>)
   b4306:	682e      	ldr	r6, [r5, #0]
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4308:	b087      	sub	sp, #28
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b430a:	2e00      	cmp	r6, #0
   b430c:	d042      	beq.n	b4394 <_Z21secondsUntilNextEventv+0x94>
		int fiftyFifty = random(2);											// Flip a coin - seed in Setup()
   b430e:	2002      	movs	r0, #2
   b4310:	f006 feb2 	bl	bb078 <_Z6randomi>
   b4314:	4606      	mov	r6, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4316:	6828      	ldr	r0, [r5, #0]
   b4318:	f008 ff7e 	bl	bd218 <__aeabi_i2d>
   b431c:	ed9f 0b54 	vldr	d0, [pc, #336]	; b4470 <_Z21secondsUntilNextEventv+0x170>
   b4320:	ec41 0b11 	vmov	d1, r0, r1
   b4324:	f007 fda0 	bl	bbe68 <pow>
		unsigned long offset = 10UL + NODENUMBEROFFSET * fiftyFifty * pow(2, retryState); // This is an exponential back-off - adding 10 seconds to increase odds
   b4328:	200a      	movs	r0, #10
   b432a:	ec59 8b10 	vmov	r8, r9, d0
   b432e:	4370      	muls	r0, r6
   b4330:	f008 ff62 	bl	bd1f8 <__aeabi_ui2d>
   b4334:	4642      	mov	r2, r8
   b4336:	464b      	mov	r3, r9
   b4338:	f008 ffd8 	bl	bd2ec <__aeabi_dmul>
   b433c:	4b4f      	ldr	r3, [pc, #316]	; (b447c <_Z21secondsUntilNextEventv+0x17c>)
   b433e:	2200      	movs	r2, #0
   b4340:	f008 fe1e 	bl	bcf80 <__adddf3>
   b4344:	f009 faaa 	bl	bd89c <__aeabi_d2uiz>
   b4348:	4604      	mov	r4, r0
		Log.info("Node %d retry state %d dice of %d retry in %lu seconds", sysStatus.get_nodeNumber(), retryState, fiftyFifty, offset);
   b434a:	f001 fb99 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b434e:	f001 fcb6 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b4352:	e9cd 6400 	strd	r6, r4, [sp]
   b4356:	4602      	mov	r2, r0
   b4358:	682b      	ldr	r3, [r5, #0]
   b435a:	4949      	ldr	r1, [pc, #292]	; (b4480 <_Z21secondsUntilNextEventv+0x180>)
   b435c:	4849      	ldr	r0, [pc, #292]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b435e:	f7ff ff81 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		if (retryState >= 3) {
   b4362:	682b      	ldr	r3, [r5, #0]
   b4364:	2b02      	cmp	r3, #2
   b4366:	dd11      	ble.n	b438c <_Z21secondsUntilNextEventv+0x8c>
			retryState = -1;							    				// Going to stop re-trying and wait until the next period
   b4368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b436c:	602b      	str	r3, [r5, #0]
			sysStatus.set_alertCodeNode(4);									// This will trigger a reinitialization of the radio
   b436e:	f001 fb87 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4372:	2104      	movs	r1, #4
   b4374:	f001 fcf5 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
			sysStatus.set_alertTimestampNode(Time.now());					// Alert Time stamp
   b4378:	f001 fb82 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b437c:	4605      	mov	r5, r0
   b437e:	f007 fa70 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4382:	4602      	mov	r2, r0
   b4384:	17c3      	asrs	r3, r0, #31
   b4386:	4628      	mov	r0, r5
   b4388:	f001 fe1a 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
			// Log.info("In current period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
		}
		return secondsToReturn;
    }
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b438c:	4620      	mov	r0, r4
   b438e:	b007      	add	sp, #28
   b4390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (Time.isValid()) {												// The general case - has to handle node-number specific timing
   b4394:	f007 fa48 	bl	bb828 <_ZN9TimeClass7isValidEv>
   b4398:	2800      	cmp	r0, #0
   b439a:	d065      	beq.n	b4468 <_Z21secondsUntilNextEventv+0x168>
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b439c:	f001 fb70 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b43a0:	f001 fc8d 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b43a4:	4605      	mov	r5, r0
		unsigned long wakeBoundary = (sysStatus.get_frequencyMinutes() * 60UL);
   b43a6:	f001 fb6b 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b43aa:	f001 fd15 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b43ae:	243c      	movs	r4, #60	; 0x3c
   b43b0:	fb04 f700 	mul.w	r7, r4, r0
		unsigned long secondsToReturn = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b43b4:	f007 fa55 	bl	bb862 <_ZN9TimeClass3nowEv>
   b43b8:	fbb0 f4f7 	udiv	r4, r0, r7
   b43bc:	fb04 0417 	mls	r4, r4, r7, r0
   b43c0:	1b3c      	subs	r4, r7, r4
   b43c2:	42bc      	cmp	r4, r7
   b43c4:	bf28      	it	cs
   b43c6:	463c      	movcs	r4, r7
		if (sysStatus.get_nodeNumber() >= 11)  {							// We need to test here as the off-set can cause missed reporting if awoken by the sensor at the period boundary
   b43c8:	f001 fb5a 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b43cc:	f001 fc77 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b43d0:	280a      	cmp	r0, #10
   b43d2:	d905      	bls.n	b43e0 <_Z21secondsUntilNextEventv+0xe0>
			Log.info("Unconfigured node - no offset and %lu seconds till next period",secondsToReturn);
   b43d4:	492c      	ldr	r1, [pc, #176]	; (b4488 <_Z21secondsUntilNextEventv+0x188>)
   b43d6:	482b      	ldr	r0, [pc, #172]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b43d8:	4622      	mov	r2, r4
   b43da:	f7ff ff43 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			return secondsToReturn;
   b43de:	e7d5      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43e0:	4f2a      	ldr	r7, [pc, #168]	; (b448c <_Z21secondsUntilNextEventv+0x18c>)
   b43e2:	f007 fa3e 	bl	bb862 <_ZN9TimeClass3nowEv>
   b43e6:	e9d7 8900 	ldrd	r8, r9, [r7]
   b43ea:	17c3      	asrs	r3, r0, #31
   b43ec:	ebb0 0008 	subs.w	r0, r0, r8
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43f0:	b22d      	sxth	r5, r5
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43f2:	eb63 0309 	sbc.w	r3, r3, r9
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43fa:	2b00      	cmp	r3, #0
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43fc:	ea4f 0545 	mov.w	r5, r5, lsl #1
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b4400:	db16      	blt.n	b4430 <_Z21secondsUntilNextEventv+0x130>
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4402:	f007 fa2e 	bl	bb862 <_ZN9TimeClass3nowEv>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4406:	442c      	add	r4, r5
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4408:	1902      	adds	r2, r0, r4
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b440a:	4b21      	ldr	r3, [pc, #132]	; (b4490 <_Z21secondsUntilNextEventv+0x190>)
   b440c:	4921      	ldr	r1, [pc, #132]	; (b4494 <_Z21secondsUntilNextEventv+0x194>)
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b440e:	e9c7 2600 	strd	r2, r6, [r7]
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b4412:	a802      	add	r0, sp, #8
   b4414:	9300      	str	r3, [sp, #0]
   b4416:	4633      	mov	r3, r6
   b4418:	f007 f9c4 	bl	bb7a4 <_ZN9TimeClass6formatExPKc>
   b441c:	9b02      	ldr	r3, [sp, #8]
   b441e:	491e      	ldr	r1, [pc, #120]	; (b4498 <_Z21secondsUntilNextEventv+0x198>)
   b4420:	4622      	mov	r2, r4
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4422:	4818      	ldr	r0, [pc, #96]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b4424:	f7ff ff1e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4428:	a802      	add	r0, sp, #8
   b442a:	f006 ff09 	bl	bb240 <_ZN6StringD1Ev>
   b442e:	e7ad      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
		else if (nextPeriodBegins - Time.now() <= nodeSpecificOffset) {		// Not at new period yet but within the node offset
   b4430:	f007 fa17 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4434:	ebb8 0800 	subs.w	r8, r8, r0
   b4438:	eb69 70e0 	sbc.w	r0, r9, r0, asr #31
   b443c:	4545      	cmp	r5, r8
   b443e:	eb76 0300 	sbcs.w	r3, r6, r0
   b4442:	db0f      	blt.n	b4464 <_Z21secondsUntilNextEventv+0x164>
			secondsToReturn = nextPeriodBegins - Time.now();
   b4444:	683c      	ldr	r4, [r7, #0]
   b4446:	f007 fa0c 	bl	bb862 <_ZN9TimeClass3nowEv>
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b444a:	4b11      	ldr	r3, [pc, #68]	; (b4490 <_Z21secondsUntilNextEventv+0x190>)
   b444c:	9300      	str	r3, [sp, #0]
   b444e:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4452:	4910      	ldr	r1, [pc, #64]	; (b4494 <_Z21secondsUntilNextEventv+0x194>)
			secondsToReturn = nextPeriodBegins - Time.now();
   b4454:	1a24      	subs	r4, r4, r0
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4456:	a802      	add	r0, sp, #8
   b4458:	f007 f9a4 	bl	bb7a4 <_ZN9TimeClass6formatExPKc>
   b445c:	9b02      	ldr	r3, [sp, #8]
   b445e:	490f      	ldr	r1, [pc, #60]	; (b449c <_Z21secondsUntilNextEventv+0x19c>)
   b4460:	4622      	mov	r2, r4
   b4462:	e7de      	b.n	b4422 <_Z21secondsUntilNextEventv+0x122>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4464:	442c      	add	r4, r5
		return secondsToReturn;
   b4466:	e791      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b4468:	243c      	movs	r4, #60	; 0x3c
   b446a:	e78f      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
   b446c:	f3af 8000 	nop.w
   b4470:	00000000 	.word	0x00000000
   b4474:	40000000 	.word	0x40000000
   b4478:	2003dfc8 	.word	0x2003dfc8
   b447c:	40240000 	.word	0x40240000
   b4480:	000bde6b 	.word	0x000bde6b
   b4484:	2003e654 	.word	0x2003e654
   b4488:	000bdea2 	.word	0x000bdea2
   b448c:	2003df50 	.word	0x2003df50
   b4490:	000bdee1 	.word	0x000bdee1
   b4494:	2003e6ac 	.word	0x2003e6ac
   b4498:	000bdee4 	.word	0x000bdee4
   b449c:	000bdf0a 	.word	0x000bdf0a

000b44a0 <loop>:
void loop() {
   b44a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b44a4:	4cad      	ldr	r4, [pc, #692]	; (b475c <loop+0x2bc>)
   b44a6:	7823      	ldrb	r3, [r4, #0]
   b44a8:	3b01      	subs	r3, #1
void loop() {
   b44aa:	b08d      	sub	sp, #52	; 0x34
   b44ac:	2b04      	cmp	r3, #4
   b44ae:	f200 80fc 	bhi.w	b46aa <loop+0x20a>
   b44b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   b44b6:	0229      	.short	0x0229
   b44b8:	005e0005 	.word	0x005e0005
   b44bc:	01c50183 	.word	0x01c50183
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b44c0:	4ba7      	ldr	r3, [pc, #668]	; (b4760 <loop+0x2c0>)
   b44c2:	781b      	ldrb	r3, [r3, #0]
   b44c4:	2b02      	cmp	r3, #2
   b44c6:	d001      	beq.n	b44cc <loop+0x2c>
   b44c8:	f7ff fee4 	bl	b4294 <_Z22publishStateTransitionv>
			if (sysStatus.get_frequencyMinutes() == 1) Log.info("Trying to reconnect to gateway");  // Something is wrong - attempting every minute to connect
   b44cc:	f001 fad8 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b44d0:	f001 fc82 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44d4:	2801      	cmp	r0, #1
   b44d6:	d10d      	bne.n	b44f4 <loop+0x54>
   b44d8:	49a2      	ldr	r1, [pc, #648]	; (b4764 <loop+0x2c4>)
   b44da:	48a3      	ldr	r0, [pc, #652]	; (b4768 <loop+0x2c8>)
   b44dc:	f7ff fec2 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			if (sysStatus.get_alertCodeNode() != 0) state = ERROR_STATE;
   b44e0:	f001 face 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b44e4:	f001 fbf5 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b44e8:	2800      	cmp	r0, #0
   b44ea:	f000 8225 	beq.w	b4938 <loop+0x498>
   b44ee:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b44f0:	7023      	strb	r3, [r4, #0]
			break;
   b44f2:	e0da      	b.n	b46aa <loop+0x20a>
			else if ((Time.now() - sysStatus.get_lastConnection() > 2 * sysStatus.get_frequencyMinutes() * 60UL) && sysStatus.get_openHours()) { // Park is open but no connect for over two hours
   b44f4:	f007 f9b5 	bl	bb862 <_ZN9TimeClass3nowEv>
   b44f8:	4605      	mov	r5, r0
   b44fa:	f001 fac1 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b44fe:	f001 fd37 	bl	b5f70 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4502:	17eb      	asrs	r3, r5, #31
   b4504:	1a2d      	subs	r5, r5, r0
   b4506:	eb63 0601 	sbc.w	r6, r3, r1
   b450a:	f001 fab9 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b450e:	f001 fc63 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4512:	2378      	movs	r3, #120	; 0x78
   b4514:	4358      	muls	r0, r3
   b4516:	42a8      	cmp	r0, r5
   b4518:	f04f 0300 	mov.w	r3, #0
   b451c:	41b3      	sbcs	r3, r6
   b451e:	dadf      	bge.n	b44e0 <loop+0x40>
   b4520:	f001 faae 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4524:	f001 faed 	bl	b5b02 <_ZNK13sysStatusData13get_openHoursEv>
   b4528:	2800      	cmp	r0, #0
   b452a:	d0d9      	beq.n	b44e0 <loop+0x40>
				Log.info("Park is open but we have not connected for over two reporting periods - need to power cycle and go to 1 min frequency");
   b452c:	498f      	ldr	r1, [pc, #572]	; (b476c <loop+0x2cc>)
   b452e:	488e      	ldr	r0, [pc, #568]	; (b4768 <loop+0x2c8>)
   b4530:	f7ff fe98 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(3);								// This will trigger a power cycle reset
   b4534:	f001 faa4 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4538:	2103      	movs	r1, #3
   b453a:	f001 fc12 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());		
   b453e:	f001 fa9f 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4542:	4605      	mov	r5, r0
   b4544:	f007 f98d 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4548:	4602      	mov	r2, r0
   b454a:	17c3      	asrs	r3, r0, #31
   b454c:	4628      	mov	r0, r5
   b454e:	f001 fd37 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				sysStatus.set_frequencyMinutes(1);							// Will wake every minute to send data - have to catch gateway when it is awake
   b4552:	f001 fa95 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4556:	2101      	movs	r1, #1
   b4558:	f001 fce1 	bl	b5f1e <_ZN13sysStatusData20set_frequencyMinutesEt>
				sysStatus.set_lastConnection(Time.now());					// Prevents cyclical resets
   b455c:	f001 fa90 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4560:	4605      	mov	r5, r0
   b4562:	f007 f97e 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4566:	4602      	mov	r2, r0
   b4568:	17c3      	asrs	r3, r0, #31
   b456a:	4628      	mov	r0, r5
   b456c:	f001 fd23 	bl	b5fb6 <_ZN13sysStatusData18set_lastConnectionEx>
   b4570:	e7b6      	b.n	b44e0 <loop+0x40>
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4572:	4b7b      	ldr	r3, [pc, #492]	; (b4760 <loop+0x2c0>)
   b4574:	781b      	ldrb	r3, [r3, #0]
   b4576:	2b03      	cmp	r3, #3
   b4578:	d001      	beq.n	b457e <loop+0xde>
   b457a:	f7ff fe8b 	bl	b4294 <_Z22publishStateTransitionv>
			int wakeInSeconds = secondsUntilNextEvent();					// Figure out how long to sleep 
   b457e:	f7ff febf 	bl	b4300 <_Z21secondsUntilNextEventv>
   b4582:	4607      	mov	r7, r0
			time_t time = Time.now() + wakeInSeconds;
   b4584:	f007 f96d 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4588:	4605      	mov	r5, r0
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b458a:	f007 f94d 	bl	bb828 <_ZN9TimeClass7isValidEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b458e:	4606      	mov	r6, r0
   b4590:	2800      	cmp	r0, #0
   b4592:	d04c      	beq.n	b462e <loop+0x18e>
			time_t time = Time.now() + wakeInSeconds;
   b4594:	19ea      	adds	r2, r5, r7
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b4596:	4b76      	ldr	r3, [pc, #472]	; (b4770 <loop+0x2d0>)
   b4598:	9300      	str	r3, [sp, #0]
   b459a:	4976      	ldr	r1, [pc, #472]	; (b4774 <loop+0x2d4>)
   b459c:	17d3      	asrs	r3, r2, #31
   b459e:	a808      	add	r0, sp, #32
   b45a0:	f007 f900 	bl	bb7a4 <_ZN9TimeClass6formatExPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b45a4:	9d08      	ldr	r5, [sp, #32]
   b45a6:	f001 fa6b 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b45aa:	f001 faaa 	bl	b5b02 <_ZNK13sysStatusData13get_openHoursEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b45ae:	4b72      	ldr	r3, [pc, #456]	; (b4778 <loop+0x2d8>)
   b45b0:	4a72      	ldr	r2, [pc, #456]	; (b477c <loop+0x2dc>)
   b45b2:	4973      	ldr	r1, [pc, #460]	; (b4780 <loop+0x2e0>)
   b45b4:	2800      	cmp	r0, #0
   b45b6:	bf08      	it	eq
   b45b8:	461a      	moveq	r2, r3
   b45ba:	9200      	str	r2, [sp, #0]
   b45bc:	486a      	ldr	r0, [pc, #424]	; (b4768 <loop+0x2c8>)
   b45be:	462b      	mov	r3, r5
   b45c0:	463a      	mov	r2, r7
   b45c2:	f7ff fe4f 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b45c6:	b116      	cbz	r6, b45ce <loop+0x12e>
   b45c8:	a808      	add	r0, sp, #32
   b45ca:	f006 fe39 	bl	bb240 <_ZN6StringD1Ev>
			if (!sysStatus.get_openHours()) digitalWrite(MODULE_POWER_PIN,HIGH);  // disable (HIGH) the sensor
   b45ce:	f001 fa57 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b45d2:	f001 fa96 	bl	b5b02 <_ZNK13sysStatusData13get_openHoursEv>
   b45d6:	4b6b      	ldr	r3, [pc, #428]	; (b4784 <loop+0x2e4>)
   b45d8:	f8b3 b000 	ldrh.w	fp, [r3]
   b45dc:	b918      	cbnz	r0, b45e6 <loop+0x146>
   b45de:	2101      	movs	r1, #1
   b45e0:	4658      	mov	r0, fp
   b45e2:	f007 fb36 	bl	bbc52 <digitalWrite>
        if (valid_) {
   b45e6:	4b68      	ldr	r3, [pc, #416]	; (b4788 <loop+0x2e8>)
   b45e8:	7d1a      	ldrb	r2, [r3, #20]
   b45ea:	b10a      	cbz	r2, b45f0 <loop+0x150>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b45ec:	2202      	movs	r2, #2
   b45ee:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b45f0:	4b66      	ldr	r3, [pc, #408]	; (b478c <loop+0x2ec>)
   b45f2:	4865      	ldr	r0, [pc, #404]	; (b4788 <loop+0x2e8>)
   b45f4:	f8b3 9000 	ldrh.w	r9, [r3]
   b45f8:	2200      	movs	r2, #0
   b45fa:	4649      	mov	r1, r9
   b45fc:	f7ff fdfe 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b4600:	4b63      	ldr	r3, [pc, #396]	; (b4790 <loop+0x2f0>)
   b4602:	f8b3 a000 	ldrh.w	sl, [r3]
   b4606:	2201      	movs	r2, #1
   b4608:	4651      	mov	r1, sl
   b460a:	f7ff fdf7 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b460e:	7d03      	ldrb	r3, [r0, #20]
   b4610:	4606      	mov	r6, r0
   b4612:	b313      	cbz	r3, b465a <loop+0x1ba>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4614:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b4616:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b461a:	68db      	ldr	r3, [r3, #12]
   b461c:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4620:	b13b      	cbz	r3, b4632 <loop+0x192>
            if (start->type == type) {
   b4622:	889a      	ldrh	r2, [r3, #4]
   b4624:	2a04      	cmp	r2, #4
   b4626:	f000 820b 	beq.w	b4a40 <loop+0x5a0>
            start = start->next;
   b462a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b462c:	e7f8      	b.n	b4620 <loop+0x180>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b462e:	4d59      	ldr	r5, [pc, #356]	; (b4794 <loop+0x2f4>)
   b4630:	e7b9      	b.n	b45a6 <loop+0x106>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4632:	4959      	ldr	r1, [pc, #356]	; (b4798 <loop+0x2f8>)
   b4634:	2010      	movs	r0, #16
   b4636:	f007 fc0d 	bl	bbe54 <_ZnwjRKSt9nothrow_t>
   b463a:	4605      	mov	r5, r0
   b463c:	2800      	cmp	r0, #0
   b463e:	f000 81fd 	beq.w	b4a3c <loop+0x59c>
   b4642:	2210      	movs	r2, #16
   b4644:	2100      	movs	r1, #0
   b4646:	f009 fa13 	bl	bda70 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b464a:	4b54      	ldr	r3, [pc, #336]	; (b479c <loop+0x2fc>)
   b464c:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b464e:	2304      	movs	r3, #4
   b4650:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4652:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4654:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4658:	6135      	str	r5, [r6, #16]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b465a:	2100      	movs	r1, #0
   b465c:	4850      	ldr	r0, [pc, #320]	; (b47a0 <loop+0x300>)
   b465e:	f002 f8b3 	bl	b67c8 <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b4662:	4949      	ldr	r1, [pc, #292]	; (b4788 <loop+0x2e8>)
   b4664:	a805      	add	r0, sp, #20
   b4666:	f006 ff1d 	bl	bb4a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b466a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b466e:	484c      	ldr	r0, [pc, #304]	; (b47a0 <loop+0x300>)
   b4670:	f002 f8aa 	bl	b67c8 <_ZN6AB18056setWDTEi>
			delay(2000);		//  Diagnostic code
   b4674:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4678:	f004 fd84 	bl	b9184 <delay>
			digitalWrite(MODULE_POWER_PIN,LOW);             				// Enable (LOW) the sensor
   b467c:	2100      	movs	r1, #0
   b467e:	4658      	mov	r0, fp
   b4680:	f007 fae7 	bl	bbc52 <digitalWrite>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4684:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b4686:	2b00      	cmp	r3, #0
   b4688:	d034      	beq.n	b46f4 <loop+0x254>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b468a:	889a      	ldrh	r2, [r3, #4]
   b468c:	2a01      	cmp	r2, #1
   b468e:	d131      	bne.n	b46f4 <loop+0x254>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4690:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4692:	4599      	cmp	r9, r3
   b4694:	d131      	bne.n	b46fa <loop+0x25a>
				Log.info("Woke with user button - LoRA State");
   b4696:	4943      	ldr	r1, [pc, #268]	; (b47a4 <loop+0x304>)
   b4698:	4833      	ldr	r0, [pc, #204]	; (b4768 <loop+0x2c8>)
   b469a:	f7ff fde3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;
   b469e:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b46a0:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b46a2:	7023      	strb	r3, [r4, #0]
   b46a4:	b108      	cbz	r0, b46aa <loop+0x20a>
            free(wakeupSource_);
   b46a6:	f004 fcf9 	bl	b909c <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b46aa:	483d      	ldr	r0, [pc, #244]	; (b47a0 <loop+0x300>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b46ac:	4c3e      	ldr	r4, [pc, #248]	; (b47a8 <loop+0x308>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b46ae:	f002 fc37 	bl	b6f20 <_ZN6AB18054loopEv>
	current.loop();
   b46b2:	f001 fa71 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b46b6:	f001 faa7 	bl	b5c08 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b46ba:	f001 f9e1 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b46be:	f001 fa17 	bl	b5af0 <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b46c2:	7823      	ldrb	r3, [r4, #0]
   b46c4:	b123      	cbz	r3, b46d0 <loop+0x230>
		if (recordCount()) sensorDetect = false;
   b46c6:	f001 fe11 	bl	b62ec <_Z11recordCountv>
   b46ca:	b108      	cbz	r0, b46d0 <loop+0x230>
   b46cc:	2300      	movs	r3, #0
   b46ce:	7023      	strb	r3, [r4, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b46d0:	4b36      	ldr	r3, [pc, #216]	; (b47ac <loop+0x30c>)
   b46d2:	681b      	ldr	r3, [r3, #0]
   b46d4:	2b00      	cmp	r3, #0
   b46d6:	f2c0 81b6 	blt.w	b4a46 <loop+0x5a6>
		Log.info("Resetting due to low memory");
   b46da:	4935      	ldr	r1, [pc, #212]	; (b47b0 <loop+0x310>)
   b46dc:	4822      	ldr	r0, [pc, #136]	; (b4768 <loop+0x2c8>)
   b46de:	f7ff fdc1 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b46e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b46e6:	f004 fd4d 	bl	b9184 <delay>
}
   b46ea:	b00d      	add	sp, #52	; 0x34
   b46ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b46f0:	f006 bed5 	b.w	bb49e <_ZN11SystemClass5resetEv>
            return std::numeric_limits<pin_t>::max();
   b46f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b46f8:	e7cb      	b.n	b4692 <loop+0x1f2>
			else if (result.wakeupPin() == INT_PIN) {
   b46fa:	459a      	cmp	sl, r3
   b46fc:	d115      	bne.n	b472a <loop+0x28a>
				Log.info("Woke with sensor interrupt");						// Will count at the bottom of the main loop
   b46fe:	492d      	ldr	r1, [pc, #180]	; (b47b4 <loop+0x314>)
   b4700:	4819      	ldr	r0, [pc, #100]	; (b4768 <loop+0x2c8>)
   b4702:	f7ff fdaf 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				if (secondsUntilNextEvent() <= 2 || \
   b4706:	f7ff fdfb 	bl	b4300 <_Z21secondsUntilNextEventv>
   b470a:	2802      	cmp	r0, #2
   b470c:	dd24      	ble.n	b4758 <loop+0x2b8>
					secondsUntilNextEvent() >= ((sysStatus.get_frequencyMinutes() * 60) - 2)) \
   b470e:	f7ff fdf7 	bl	b4300 <_Z21secondsUntilNextEventv>
   b4712:	4605      	mov	r5, r0
   b4714:	f001 f9b4 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4718:	f001 fb5e 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b471c:	233c      	movs	r3, #60	; 0x3c
   b471e:	4343      	muls	r3, r0
   b4720:	3b02      	subs	r3, #2
				if (secondsUntilNextEvent() <= 2 || \
   b4722:	429d      	cmp	r5, r3
   b4724:	da18      	bge.n	b4758 <loop+0x2b8>
				else state = SLEEPING_STATE;								// This is the normal behavioud
   b4726:	2303      	movs	r3, #3
   b4728:	e7ba      	b.n	b46a0 <loop+0x200>
				Log.info("Time is up at %s with %li free memory", Time.format((Time.now()+wakeInSeconds), "%T").c_str(), System.freeMemory());
   b472a:	f007 f89a 	bl	bb862 <_ZN9TimeClass3nowEv>
   b472e:	4b10      	ldr	r3, [pc, #64]	; (b4770 <loop+0x2d0>)
   b4730:	4910      	ldr	r1, [pc, #64]	; (b4774 <loop+0x2d4>)
   b4732:	9300      	str	r3, [sp, #0]
   b4734:	19c2      	adds	r2, r0, r7
   b4736:	17d3      	asrs	r3, r2, #31
   b4738:	a808      	add	r0, sp, #32
   b473a:	f007 f833 	bl	bb7a4 <_ZN9TimeClass6formatExPKc>
   b473e:	9a08      	ldr	r2, [sp, #32]
   b4740:	9203      	str	r2, [sp, #12]
   b4742:	f006 ff0f 	bl	bb564 <_ZN11SystemClass10freeMemoryEv>
   b4746:	9a03      	ldr	r2, [sp, #12]
   b4748:	491b      	ldr	r1, [pc, #108]	; (b47b8 <loop+0x318>)
   b474a:	4603      	mov	r3, r0
   b474c:	4806      	ldr	r0, [pc, #24]	; (b4768 <loop+0x2c8>)
   b474e:	f7ff fd89 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4752:	a808      	add	r0, sp, #32
   b4754:	f006 fd74 	bl	bb240 <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b4758:	2302      	movs	r3, #2
   b475a:	e7a1      	b.n	b46a0 <loop+0x200>
   b475c:	2003dfcd 	.word	0x2003dfcd
   b4760:	2003dfc4 	.word	0x2003dfc4
   b4764:	000bdf37 	.word	0x000bdf37
   b4768:	2003e654 	.word	0x2003e654
   b476c:	000bdf56 	.word	0x000bdf56
   b4770:	000bdee1 	.word	0x000bdee1
   b4774:	2003e6ac 	.word	0x2003e6ac
   b4778:	000bdf33 	.word	0x000bdf33
   b477c:	000bdf30 	.word	0x000bdf30
   b4780:	000bdfcc 	.word	0x000bdfcc
   b4784:	000be992 	.word	0x000be992
   b4788:	2003df88 	.word	0x2003df88
   b478c:	000be98e 	.word	0x000be98e
   b4790:	000be990 	.word	0x000be990
   b4794:	000bde50 	.word	0x000bde50
   b4798:	000bf35c 	.word	0x000bf35c
   b479c:	00030010 	.word	0x00030010
   b47a0:	2003df68 	.word	0x2003df68
   b47a4:	000be007 	.word	0x000be007
   b47a8:	2003dfcc 	.word	0x2003dfcc
   b47ac:	2003ddbc 	.word	0x2003ddbc
   b47b0:	000be199 	.word	0x000be199
   b47b4:	000be02a 	.word	0x000be02a
   b47b8:	000be045 	.word	0x000be045
			if (state != oldState) {
   b47bc:	4ba3      	ldr	r3, [pc, #652]	; (b4a4c <loop+0x5ac>)
   b47be:	781b      	ldrb	r3, [r3, #0]
   b47c0:	2b04      	cmp	r3, #4
   b47c2:	f43f af72 	beq.w	b46aa <loop+0x20a>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b47c6:	f7ff fd65 	bl	b4294 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b47ca:	f000 fc15 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b47ce:	f000 fca7 	bl	b5120 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b47d2:	f001 fe9b 	bl	b650c <_Z16takeMeasurementsv>
				if (sysStatus.get_alertCodeNode() == 0) result = LoRA_Functions::instance().composeDataReportNode();
   b47d6:	f001 f953 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b47da:	f001 fa7a 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b47de:	4d9c      	ldr	r5, [pc, #624]	; (b4a50 <loop+0x5b0>)
   b47e0:	b940      	cbnz	r0, b47f4 <loop+0x354>
   b47e2:	f000 fc09 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b47e6:	f000 fed5 	bl	b5594 <_ZN14LoRA_Functions21composeDataReportNodeEv>
				if (!result) {
   b47ea:	b1b8      	cbz	r0, b481c <loop+0x37c>
					retryState = 0;
   b47ec:	2300      	movs	r3, #0
   b47ee:	602b      	str	r3, [r5, #0]
					state = LoRA_LISTENING_STATE;
   b47f0:	2305      	movs	r3, #5
   b47f2:	e67d      	b.n	b44f0 <loop+0x50>
				else if (sysStatus.get_alertCodeNode() == 1) result = LoRA_Functions::instance().composeJoinRequesttNode();
   b47f4:	f001 f944 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b47f8:	f001 fa6b 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b47fc:	2801      	cmp	r0, #1
   b47fe:	d104      	bne.n	b480a <loop+0x36a>
   b4800:	f000 fbfa 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b4804:	f001 f802 	bl	b580c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b4808:	e7ef      	b.n	b47ea <loop+0x34a>
				else Log.info("Alert code %d, will handle in ERROR state", sysStatus.get_alertCodeNode());
   b480a:	f001 f939 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b480e:	f001 fa60 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4812:	4990      	ldr	r1, [pc, #576]	; (b4a54 <loop+0x5b4>)
   b4814:	4602      	mov	r2, r0
   b4816:	4890      	ldr	r0, [pc, #576]	; (b4a58 <loop+0x5b8>)
   b4818:	f7ff fd24 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					retryState++;
   b481c:	682b      	ldr	r3, [r5, #0]
   b481e:	3301      	adds	r3, #1
   b4820:	602b      	str	r3, [r5, #0]
					if (sysStatus.get_frequencyMinutes() == 1) retryState = 0;	// When we are in recovery mode, we don't need retries as we are sending every minute
   b4822:	f001 f92d 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4826:	f001 fad7 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b482a:	2801      	cmp	r0, #1
   b482c:	bf04      	itt	eq
   b482e:	2300      	moveq	r3, #0
   b4830:	602b      	streq	r3, [r5, #0]
					Log.info("Failed in data send, retryState = %d",retryState);
   b4832:	682a      	ldr	r2, [r5, #0]
   b4834:	4989      	ldr	r1, [pc, #548]	; (b4a5c <loop+0x5bc>)
   b4836:	4888      	ldr	r0, [pc, #544]	; (b4a58 <loop+0x5b8>)
   b4838:	f7ff fd14 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = SLEEPING_STATE;										// Once we clear the counts - go to sleep
   b483c:	2303      	movs	r3, #3
   b483e:	e657      	b.n	b44f0 <loop+0x50>
			if (state != oldState) {
   b4840:	4b82      	ldr	r3, [pc, #520]	; (b4a4c <loop+0x5ac>)
   b4842:	4d87      	ldr	r5, [pc, #540]	; (b4a60 <loop+0x5c0>)
   b4844:	781b      	ldrb	r3, [r3, #0]
   b4846:	2b05      	cmp	r3, #5
   b4848:	d006      	beq.n	b4858 <loop+0x3b8>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b484a:	f7ff fd23 	bl	b4294 <_Z22publishStateTransitionv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b484e:	f004 f8f7 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEPING_STATE;
   b4852:	2303      	movs	r3, #3
				startListening = millis();
   b4854:	6028      	str	r0, [r5, #0]
				state = SLEEPING_STATE;
   b4856:	7023      	strb	r3, [r4, #0]
			while (millis() - startListening < 5000) {
   b4858:	f241 3687 	movw	r6, #4999	; 0x1387
   b485c:	f004 f8f0 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
   b4860:	682b      	ldr	r3, [r5, #0]
   b4862:	1ac0      	subs	r0, r0, r3
   b4864:	42b0      	cmp	r0, r6
   b4866:	d84a      	bhi.n	b48fe <loop+0x45e>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {// Listen for acknowledgement
   b4868:	f000 fbc6 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b486c:	f000 fdd4 	bl	b5418 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4870:	2800      	cmp	r0, #0
   b4872:	d0f3      	beq.n	b485c <loop+0x3bc>
					sysStatus.set_lastConnection(Time.now());
   b4874:	f001 f904 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4878:	4605      	mov	r5, r0
   b487a:	f006 fff2 	bl	bb862 <_ZN9TimeClass3nowEv>
   b487e:	4602      	mov	r2, r0
   b4880:	17c3      	asrs	r3, r0, #31
   b4882:	4628      	mov	r0, r5
   b4884:	f001 fb97 	bl	b5fb6 <_ZN13sysStatusData18set_lastConnectionEx>
					randomSeed(sysStatus.get_lastConnection());				// Done so we can genrate rando numbers later
   b4888:	f001 f8fa 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b488c:	f001 fb70 	bl	b5f70 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4890:	f006 fc07 	bl	bb0a2 <_Z10randomSeedj>
					ab1805.setRtcFromTime(Time.now());
   b4894:	f006 ffe5 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4898:	2301      	movs	r3, #1
   b489a:	4602      	mov	r2, r0
   b489c:	9300      	str	r3, [sp, #0]
   b489e:	17c3      	asrs	r3, r0, #31
   b48a0:	4870      	ldr	r0, [pc, #448]	; (b4a64 <loop+0x5c4>)
   b48a2:	f002 fb2d 	bl	b6f00 <_ZN6AB180514setRtcFromTimeExb>
					if (sysStatus.get_alertCodeNode() > 0) {				// If we are reporting an alert we will also report data
   b48a6:	f001 f8eb 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b48aa:	f001 fa12 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b48ae:	b130      	cbz	r0, b48be <loop+0x41e>
						state = IDLE_STATE;									// This is enable us to send the data now that alert is reported
   b48b0:	2302      	movs	r3, #2
   b48b2:	7023      	strb	r3, [r4, #0]
					LoRA_Functions::instance().sleepLoRaRadio();			// Done with LoRA - put radio to sleep
   b48b4:	f000 fba0 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b48b8:	f000 fc42 	bl	b5140 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
			if (!messageReceived) Log.info("Did not receive a response");
   b48bc:	e6f5      	b.n	b46aa <loop+0x20a>
						static int lastReportingHour = Time.hour();
   b48be:	4d6a      	ldr	r5, [pc, #424]	; (b4a68 <loop+0x5c8>)
   b48c0:	4c6a      	ldr	r4, [pc, #424]	; (b4a6c <loop+0x5cc>)
   b48c2:	782b      	ldrb	r3, [r5, #0]
   b48c4:	f3bf 8f5b 	dmb	ish
   b48c8:	f013 0f01 	tst.w	r3, #1
   b48cc:	d109      	bne.n	b48e2 <loop+0x442>
   b48ce:	4628      	mov	r0, r5
   b48d0:	f7ff fbf4 	bl	b40bc <__cxa_guard_acquire>
   b48d4:	b128      	cbz	r0, b48e2 <loop+0x442>
   b48d6:	f006 ffd5 	bl	bb884 <_ZN9TimeClass4hourEv>
   b48da:	6020      	str	r0, [r4, #0]
   b48dc:	4628      	mov	r0, r5
   b48de:	f7ff fbf2 	bl	b40c6 <__cxa_guard_release>
						if (Time.hour() != lastReportingHour) {
   b48e2:	f006 ffcf 	bl	bb884 <_ZN9TimeClass4hourEv>
   b48e6:	6823      	ldr	r3, [r4, #0]
   b48e8:	4298      	cmp	r0, r3
   b48ea:	d0e3      	beq.n	b48b4 <loop+0x414>
							current.set_hourlyCount(0);					    // Zero the hourly count
   b48ec:	f001 f954 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b48f0:	2100      	movs	r1, #0
   b48f2:	f001 fb1a 	bl	b5f2a <_ZN17currentStatusData15set_hourlyCountEt>
							lastReportingHour = Time.hour();
   b48f6:	f006 ffc5 	bl	bb884 <_ZN9TimeClass4hourEv>
   b48fa:	6020      	str	r0, [r4, #0]
   b48fc:	e7da      	b.n	b48b4 <loop+0x414>
			if (!messageReceived) Log.info("Did not receive a response");
   b48fe:	495c      	ldr	r1, [pc, #368]	; (b4a70 <loop+0x5d0>)
   b4900:	4855      	ldr	r0, [pc, #340]	; (b4a58 <loop+0x5b8>)
   b4902:	f7ff fcaf 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4906:	e6d0      	b.n	b46aa <loop+0x20a>
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4908:	4b50      	ldr	r3, [pc, #320]	; (b4a4c <loop+0x5ac>)
   b490a:	781b      	ldrb	r3, [r3, #0]
   b490c:	2b01      	cmp	r3, #1
   b490e:	d001      	beq.n	b4914 <loop+0x474>
   b4910:	f7ff fcc0 	bl	b4294 <_Z22publishStateTransitionv>
			switch (sysStatus.get_alertCodeNode())
   b4914:	f001 f8b4 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4918:	f001 f9db 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b491c:	3801      	subs	r0, #1
   b491e:	2806      	cmp	r0, #6
   b4920:	f200 8082 	bhi.w	b4a28 <loop+0x588>
   b4924:	e8df f000 	tbb	[pc, r0]
   b4928:	490c0a04 	.word	0x490c0a04
   b492c:	7669      	.short	0x7669
   b492e:	7a          	.byte	0x7a
   b492f:	00          	.byte	0x00
				Log.info("Alert 1 - Join Request Required");
   b4930:	4950      	ldr	r1, [pc, #320]	; (b4a74 <loop+0x5d4>)
   b4932:	4849      	ldr	r0, [pc, #292]	; (b4a58 <loop+0x5b8>)
   b4934:	f7ff fc96 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;							// Sends the alert and clears alert code
   b4938:	2304      	movs	r3, #4
   b493a:	e5d9      	b.n	b44f0 <loop+0x50>
				Log.info("Alert 2- New Day Alert");
   b493c:	494e      	ldr	r1, [pc, #312]	; (b4a78 <loop+0x5d8>)
   b493e:	e7f8      	b.n	b4932 <loop+0x492>
				static system_tick_t enteredState = millis();
   b4940:	4c4e      	ldr	r4, [pc, #312]	; (b4a7c <loop+0x5dc>)
   b4942:	4d4f      	ldr	r5, [pc, #316]	; (b4a80 <loop+0x5e0>)
   b4944:	7823      	ldrb	r3, [r4, #0]
   b4946:	f3bf 8f5b 	dmb	ish
   b494a:	f013 0f01 	tst.w	r3, #1
   b494e:	d109      	bne.n	b4964 <loop+0x4c4>
   b4950:	4620      	mov	r0, r4
   b4952:	f7ff fbb3 	bl	b40bc <__cxa_guard_acquire>
   b4956:	b128      	cbz	r0, b4964 <loop+0x4c4>
   b4958:	f004 f872 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
   b495c:	6028      	str	r0, [r5, #0]
   b495e:	4620      	mov	r0, r4
   b4960:	f7ff fbb1 	bl	b40c6 <__cxa_guard_release>
   b4964:	f004 f86c 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b4968:	682b      	ldr	r3, [r5, #0]
   b496a:	1ac0      	subs	r0, r0, r3
   b496c:	f247 5330 	movw	r3, #30000	; 0x7530
   b4970:	4298      	cmp	r0, r3
   b4972:	f67f ae9a 	bls.w	b46aa <loop+0x20a>
					Log.info("Alert 3 - Resetting device");
   b4976:	4943      	ldr	r1, [pc, #268]	; (b4a84 <loop+0x5e4>)
   b4978:	4837      	ldr	r0, [pc, #220]	; (b4a58 <loop+0x5b8>)
   b497a:	f7ff fc73 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(0);							// Need to clear so we don't get in a retry cycle
   b497e:	f001 f87f 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4982:	2100      	movs	r1, #0
   b4984:	f001 f9ed 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());
   b4988:	f001 f87a 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b498c:	4604      	mov	r4, r0
   b498e:	f006 ff68 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4992:	4602      	mov	r2, r0
   b4994:	17c3      	asrs	r3, r0, #31
   b4996:	4620      	mov	r0, r4
   b4998:	f001 fb12 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
					sysStatus.flush(true);									// All this is required as we are done trainsiting loop
   b499c:	f001 f870 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b49a0:	6803      	ldr	r3, [r0, #0]
   b49a2:	2101      	movs	r1, #1
   b49a4:	68db      	ldr	r3, [r3, #12]
   b49a6:	4798      	blx	r3
					delay(2000);
   b49a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b49ac:	f004 fbea 	bl	b9184 <delay>
					ab1805.deepPowerDown();
   b49b0:	211e      	movs	r1, #30
   b49b2:	482c      	ldr	r0, [pc, #176]	; (b4a64 <loop+0x5c4>)
   b49b4:	f002 f862 	bl	b6a7c <_ZN6AB180513deepPowerDownEi>
   b49b8:	e677      	b.n	b46aa <loop+0x20a>
				Log.info("Initialize LoRA radio");
   b49ba:	4933      	ldr	r1, [pc, #204]	; (b4a88 <loop+0x5e8>)
   b49bc:	4826      	ldr	r0, [pc, #152]	; (b4a58 <loop+0x5b8>)
   b49be:	f7ff fc51 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				if(LoRA_Functions::instance().initializeRadio()) {
   b49c2:	f000 fb19 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b49c6:	f000 fbc1 	bl	b514c <_ZN14LoRA_Functions15initializeRadioEv>
   b49ca:	b108      	cbz	r0, b49d0 <loop+0x530>
					Log.info("Initialization successful");	
   b49cc:	492f      	ldr	r1, [pc, #188]	; (b4a8c <loop+0x5ec>)
   b49ce:	e7b0      	b.n	b4932 <loop+0x492>
					Log.info(("Initialization not successful - power cycle"));
   b49d0:	492f      	ldr	r1, [pc, #188]	; (b4a90 <loop+0x5f0>)
   b49d2:	4821      	ldr	r0, [pc, #132]	; (b4a58 <loop+0x5b8>)
   b49d4:	f7ff fc46 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(3);							// Next time through - will transition to power cycle
   b49d8:	f001 f852 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b49dc:	2103      	movs	r1, #3
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b49de:	f001 f9c0 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());			
   b49e2:	f001 f84d 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b49e6:	4605      	mov	r5, r0
   b49e8:	f006 ff3b 	bl	bb862 <_ZN9TimeClass3nowEv>
   b49ec:	4602      	mov	r2, r0
   b49ee:	17c3      	asrs	r3, r0, #31
   b49f0:	4628      	mov	r0, r5
   b49f2:	f001 fae5 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				state = IDLE_STATE;
   b49f6:	2302      	movs	r3, #2
   b49f8:	e57a      	b.n	b44f0 <loop+0x50>
				sysStatus.initialize();										// Resets the sysStatus values to factory default
   b49fa:	f001 f841 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b49fe:	6803      	ldr	r3, [r0, #0]
   b4a00:	699b      	ldr	r3, [r3, #24]
   b4a02:	4798      	blx	r3
				current.resetEverything();									// Resets the node counts
   b4a04:	f001 f8c8 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b4a08:	f001 fb27 	bl	b605a <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b4a0c:	f001 f838 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4a10:	2101      	movs	r1, #1
   b4a12:	e7e4      	b.n	b49de <loop+0x53e>
				current.resetEverything();
   b4a14:	f001 f8c0 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b4a18:	f001 fb1f 	bl	b605a <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(0);
   b4a1c:	f001 f830 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4a20:	2100      	movs	r1, #0
   b4a22:	f001 f99e 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4a26:	e709      	b.n	b483c <loop+0x39c>
				Log.info("Undefined Error State");
   b4a28:	491a      	ldr	r1, [pc, #104]	; (b4a94 <loop+0x5f4>)
   b4a2a:	480b      	ldr	r0, [pc, #44]	; (b4a58 <loop+0x5b8>)
   b4a2c:	f7ff fc1a 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(0);
   b4a30:	f001 f826 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4a34:	2100      	movs	r1, #0
   b4a36:	f001 f994 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4a3a:	e7dc      	b.n	b49f6 <loop+0x556>
                valid_ = false;
   b4a3c:	7530      	strb	r0, [r6, #20]
                return *this;
   b4a3e:	e60c      	b.n	b465a <loop+0x1ba>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4a40:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4a44:	e609      	b.n	b465a <loop+0x1ba>
}
   b4a46:	b00d      	add	sp, #52	; 0x34
   b4a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4a4c:	2003dfc4 	.word	0x2003dfc4
   b4a50:	2003dfc8 	.word	0x2003dfc8
   b4a54:	000be06b 	.word	0x000be06b
   b4a58:	2003e654 	.word	0x2003e654
   b4a5c:	000be095 	.word	0x000be095
   b4a60:	2003df5c 	.word	0x2003df5c
   b4a64:	2003df68 	.word	0x2003df68
   b4a68:	2003df48 	.word	0x2003df48
   b4a6c:	2003df60 	.word	0x2003df60
   b4a70:	000be0ba 	.word	0x000be0ba
   b4a74:	000be0d5 	.word	0x000be0d5
   b4a78:	000be0f5 	.word	0x000be0f5
   b4a7c:	2003df44 	.word	0x2003df44
   b4a80:	2003df58 	.word	0x2003df58
   b4a84:	000be10c 	.word	0x000be10c
   b4a88:	000be127 	.word	0x000be127
   b4a8c:	000be13d 	.word	0x000be13d
   b4a90:	000be157 	.word	0x000be157
   b4a94:	000be183 	.word	0x000be183

000b4a98 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4a98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4a9a:	2300      	movs	r3, #0
   b4a9c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4aa0:	4604      	mov	r4, r0
   b4aa2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4aa4:	b12b      	cbz	r3, b4ab2 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4aa6:	2202      	movs	r2, #2
   b4aa8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4aaa:	68eb      	ldr	r3, [r5, #12]
   b4aac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4aae:	68ab      	ldr	r3, [r5, #8]
   b4ab0:	60a3      	str	r3, [r4, #8]
    }
   b4ab2:	4620      	mov	r0, r4
   b4ab4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ab8 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4abc:	b095      	sub	sp, #84	; 0x54
   b4abe:	4605      	mov	r5, r0
        };
   b4ac0:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4ac2:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4ac4:	4690      	mov	r8, r2
   b4ac6:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4ac8:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4aca:	f7ff ffe5 	bl	b4a98 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4ace:	a904      	add	r1, sp, #16
   b4ad0:	a808      	add	r0, sp, #32
   b4ad2:	f7ff ffe1 	bl	b4a98 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4ad6:	a908      	add	r1, sp, #32
   b4ad8:	4630      	mov	r0, r6
   b4ada:	f7ff ffdd 	bl	b4a98 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4ade:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ae2:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4ae4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ae8:	f7ff fad5 	bl	b4096 <_Znwj>
   b4aec:	4604      	mov	r4, r0
   b4aee:	b1a0      	cbz	r0, b4b1a <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4af0:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4af4:	ab01      	add	r3, sp, #4
   b4af6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4afa:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4afe:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4b02:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4b08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b0a:	60a3      	str	r3, [r4, #8]
   b4b0c:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4b12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4b16:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4b18:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4b1a:	4b24      	ldr	r3, [pc, #144]	; (b4bac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4b1c:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4b1e:	4b24      	ldr	r3, [pc, #144]	; (b4bb0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4b20:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4b22:	2200      	movs	r2, #0
   b4b24:	2300      	movs	r3, #0
   b4b26:	f04f 0900 	mov.w	r9, #0
   b4b2a:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4b2e:	4b21      	ldr	r3, [pc, #132]	; (b4bb4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4b30:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4b34:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b36:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4b38:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4b3c:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4b40:	f7ff faa9 	bl	b4096 <_Znwj>
   b4b44:	4604      	mov	r4, r0
   b4b46:	b1d8      	cbz	r0, b4b80 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4b4a:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4b4e:	b133      	cbz	r3, b4b5e <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4b50:	2202      	movs	r2, #2
   b4b52:	a910      	add	r1, sp, #64	; 0x40
   b4b54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4b58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4b5c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4b5e:	4b16      	ldr	r3, [pc, #88]	; (b4bb8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4b60:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4b62:	4a16      	ldr	r2, [pc, #88]	; (b4bbc <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4b64:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4b66:	ab01      	add	r3, sp, #4
   b4b68:	4640      	mov	r0, r8
   b4b6a:	4639      	mov	r1, r7
   b4b6c:	f004 f99c 	bl	b8ea8 <system_subscribe_event>
        if (r) {
   b4b70:	b1b0      	cbz	r0, b4ba0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4b72:	4620      	mov	r0, r4
   b4b74:	f7ff fb2c 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4b78:	2110      	movs	r1, #16
   b4b7a:	4620      	mov	r0, r4
   b4b7c:	f7ff fa8f 	bl	b409e <_ZdlPvj>
   b4b80:	a810      	add	r0, sp, #64	; 0x40
   b4b82:	f7ff fb25 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b86:	4630      	mov	r0, r6
   b4b88:	f7ff fb22 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b8c:	a808      	add	r0, sp, #32
   b4b8e:	f7ff fb1f 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b92:	a804      	add	r0, sp, #16
   b4b94:	f7ff fb1c 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
    }
   b4b98:	4628      	mov	r0, r5
   b4b9a:	b015      	add	sp, #84	; 0x54
   b4b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4ba0:	9b02      	ldr	r3, [sp, #8]
   b4ba2:	60ab      	str	r3, [r5, #8]
   b4ba4:	e9c5 8700 	strd	r8, r7, [r5]
   b4ba8:	e7ea      	b.n	b4b80 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4baa:	bf00      	nop
   b4bac:	000b4145 	.word	0x000b4145
   b4bb0:	000b4da1 	.word	0x000b4da1
   b4bb4:	000c0002 	.word	0x000c0002
   b4bb8:	000b41e3 	.word	0x000b41e3
   b4bbc:	000b40f1 	.word	0x000b40f1

000b4bc0 <setup>:
void setup() {
   b4bc0:	b570      	push	{r4, r5, r6, lr}
        return hal_timer_millis(nullptr);
   b4bc2:	2000      	movs	r0, #0
   b4bc4:	b08c      	sub	sp, #48	; 0x30
   b4bc6:	f003 ff4b 	bl	b8a60 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4bca:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4bce:	4604      	mov	r4, r0
   b4bd0:	2000      	movs	r0, #0
   b4bd2:	f003 ff45 	bl	b8a60 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4bd6:	1b00      	subs	r0, r0, r4
   b4bd8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4bdc:	42a8      	cmp	r0, r5
   b4bde:	f171 0300 	sbcs.w	r3, r1, #0
   b4be2:	d207      	bcs.n	b4bf4 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4be4:	f006 ff24 	bl	bba30 <_Z16_fetch_usbserialv>
   b4be8:	f006 ff17 	bl	bba1a <_ZN9USBSerial11isConnectedEv>
   b4bec:	b910      	cbnz	r0, b4bf4 <setup+0x34>
            spark_process();
   b4bee:	f004 f9b5 	bl	b8f5c <spark_process>
        while (_while() && !_condition()) {
   b4bf2:	e7ed      	b.n	b4bd0 <setup+0x10>
   b4bf4:	f006 ff1c 	bl	bba30 <_Z16_fetch_usbserialv>
   b4bf8:	f006 ff0f 	bl	bba1a <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b4bfc:	f001 fa7a 	bl	b60f4 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4c00:	f001 faa4 	bl	b614c <_Z18initializePowerCfgv>
	sysStatus.setup();								// Initialize persistent storage
   b4c04:	f000 ff3c 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4c08:	6803      	ldr	r3, [r0, #0]
   b4c0a:	681b      	ldr	r3, [r3, #0]
   b4c0c:	4798      	blx	r3
	current.setup();
   b4c0e:	f000 ffc3 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b4c12:	6803      	ldr	r3, [r0, #0]
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	4798      	blx	r3
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4c18:	4850      	ldr	r0, [pc, #320]	; (b4d5c <setup+0x19c>)
   b4c1a:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// The carrier board has D8 connected to FOUT for wake interrupts
   b4c1c:	2101      	movs	r1, #1
   b4c1e:	8143      	strh	r3, [r0, #10]
   b4c20:	f002 f9d0 	bl	b6fc4 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b4c24:	217c      	movs	r1, #124	; 0x7c
   b4c26:	484d      	ldr	r0, [pc, #308]	; (b4d5c <setup+0x19c>)
   b4c28:	f001 fdce 	bl	b67c8 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4c2c:	4b4c      	ldr	r3, [pc, #304]	; (b4d60 <setup+0x1a0>)
   b4c2e:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b4c30:	4b4c      	ldr	r3, [pc, #304]	; (b4d64 <setup+0x1a4>)
   b4c32:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4c34:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b4c36:	4b4c      	ldr	r3, [pc, #304]	; (b4d68 <setup+0x1a8>)
   b4c38:	930a      	str	r3, [sp, #40]	; 0x28
   b4c3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4c3e:	2300      	movs	r3, #0
   b4c40:	a804      	add	r0, sp, #16
   b4c42:	9400      	str	r4, [sp, #0]
   b4c44:	f7ff ff38 	bl	b4ab8 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4c48:	4620      	mov	r0, r4
   b4c4a:	f7ff fac1 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b4c4e:	f000 f9d3 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b4c52:	2100      	movs	r1, #0
   b4c54:	f000 f9e2 	bl	b501c <_ZN14LoRA_Functions5setupEb>
   b4c58:	2800      	cmp	r0, #0
   b4c5a:	d15e      	bne.n	b4d1a <setup+0x15a>
		sysStatus.set_alertCodeNode(3);										// Initialization failure
   b4c5c:	f000 ff10 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4c60:	2103      	movs	r1, #3
   b4c62:	f001 f87e 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b4c66:	f000 ff0b 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4c6a:	4605      	mov	r5, r0
   b4c6c:	f006 fdf9 	bl	bb862 <_ZN9TimeClass3nowEv>
   b4c70:	4602      	mov	r2, r0
   b4c72:	17c3      	asrs	r3, r0, #31
   b4c74:	4628      	mov	r0, r5
   b4c76:	f001 f9a3 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", sysStatus.get_alertCodeNode());
   b4c7a:	f000 ff01 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4c7e:	f001 f828 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4c82:	493a      	ldr	r1, [pc, #232]	; (b4d6c <setup+0x1ac>)
   b4c84:	4602      	mov	r2, r0
   b4c86:	483a      	ldr	r0, [pc, #232]	; (b4d70 <setup+0x1b0>)
   b4c88:	f7ff faec 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b4c8c:	f001 fc3e 	bl	b650c <_Z16takeMeasurementsv>
	if (!digitalRead(BUTTON_PIN)) {
   b4c90:	4b38      	ldr	r3, [pc, #224]	; (b4d74 <setup+0x1b4>)
   b4c92:	881e      	ldrh	r6, [r3, #0]
   b4c94:	4630      	mov	r0, r6
   b4c96:	f006 fff5 	bl	bbc84 <digitalRead>
   b4c9a:	b928      	cbnz	r0, b4ca8 <setup+0xe8>
		Log.info("User button pressed, will force connection to Particle");
   b4c9c:	4936      	ldr	r1, [pc, #216]	; (b4d78 <setup+0x1b8>)
   b4c9e:	4834      	ldr	r0, [pc, #208]	; (b4d70 <setup+0x1b0>)
   b4ca0:	f7ff fae0 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4ca4:	f004 f962 	bl	b8f6c <spark_cloud_flag_connect>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b4ca8:	4834      	ldr	r0, [pc, #208]	; (b4d7c <setup+0x1bc>)
   b4caa:	4935      	ldr	r1, [pc, #212]	; (b4d80 <setup+0x1c0>)
   b4cac:	8800      	ldrh	r0, [r0, #0]
   b4cae:	2500      	movs	r5, #0
   b4cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4cb4:	2201      	movs	r2, #1
   b4cb6:	9500      	str	r5, [sp, #0]
   b4cb8:	f004 fd02 	bl	b96c0 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b4cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4cc0:	462a      	mov	r2, r5
   b4cc2:	4930      	ldr	r1, [pc, #192]	; (b4d84 <setup+0x1c4>)
   b4cc4:	9500      	str	r5, [sp, #0]
   b4cc6:	4630      	mov	r0, r6
   b4cc8:	f004 fcfa 	bl	b96c0 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b4ccc:	4b2e      	ldr	r3, [pc, #184]	; (b4d88 <setup+0x1c8>)
   b4cce:	781a      	ldrb	r2, [r3, #0]
   b4cd0:	b90a      	cbnz	r2, b4cd6 <setup+0x116>
   b4cd2:	2203      	movs	r2, #3
   b4cd4:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d and last connect %s", sysStatus.get_alertCodeNode(), Time.format(sysStatus.get_lastConnection(), "%T").c_str());
   b4cd6:	f000 fed3 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4cda:	f000 fffa 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4cde:	4605      	mov	r5, r0
   b4ce0:	f000 fece 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4ce4:	f001 f944 	bl	b5f70 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4ce8:	460b      	mov	r3, r1
   b4cea:	4928      	ldr	r1, [pc, #160]	; (b4d8c <setup+0x1cc>)
   b4cec:	9100      	str	r1, [sp, #0]
   b4cee:	4602      	mov	r2, r0
   b4cf0:	4927      	ldr	r1, [pc, #156]	; (b4d90 <setup+0x1d0>)
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	f006 fd56 	bl	bb7a4 <_ZN9TimeClass6formatExPKc>
   b4cf8:	9b08      	ldr	r3, [sp, #32]
   b4cfa:	4926      	ldr	r1, [pc, #152]	; (b4d94 <setup+0x1d4>)
   b4cfc:	481c      	ldr	r0, [pc, #112]	; (b4d70 <setup+0x1b0>)
   b4cfe:	462a      	mov	r2, r5
   b4d00:	f7ff fab0 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4d04:	4620      	mov	r0, r4
   b4d06:	f006 fa9b 	bl	bb240 <_ZN6StringD1Ev>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4d0a:	4b23      	ldr	r3, [pc, #140]	; (b4d98 <setup+0x1d8>)
   b4d0c:	8818      	ldrh	r0, [r3, #0]
   b4d0e:	2100      	movs	r1, #0
}
   b4d10:	b00c      	add	sp, #48	; 0x30
   b4d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4d16:	f006 bf9c 	b.w	bbc52 <digitalWrite>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4d1a:	f000 feb1 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4d1e:	f000 ffce 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d22:	280a      	cmp	r0, #10
   b4d24:	d914      	bls.n	b4d50 <setup+0x190>
		sysStatus.set_alertCodeNode(1); 									// Will initiate a join request
   b4d26:	f000 feab 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4d2a:	2101      	movs	r1, #1
   b4d2c:	f001 f819 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", sysStatus.get_nodeNumber(), sysStatus.get_alertCodeNode());
   b4d30:	f000 fea6 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4d34:	f000 ffc3 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d38:	9003      	str	r0, [sp, #12]
   b4d3a:	f000 fea1 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b4d3e:	f000 ffc8 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4d42:	9a03      	ldr	r2, [sp, #12]
   b4d44:	4915      	ldr	r1, [pc, #84]	; (b4d9c <setup+0x1dc>)
   b4d46:	4603      	mov	r3, r0
   b4d48:	4809      	ldr	r0, [pc, #36]	; (b4d70 <setup+0x1b0>)
   b4d4a:	f7ff fa8b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4d4e:	e79d      	b.n	b4c8c <setup+0xcc>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4d50:	f006 fd6a 	bl	bb828 <_ZN9TimeClass7isValidEv>
   b4d54:	2800      	cmp	r0, #0
   b4d56:	d0e6      	beq.n	b4d26 <setup+0x166>
   b4d58:	e798      	b.n	b4c8c <setup+0xcc>
   b4d5a:	bf00      	nop
   b4d5c:	2003df68 	.word	0x2003df68
   b4d60:	000b40d9 	.word	0x000b40d9
   b4d64:	000b417f 	.word	0x000b417f
   b4d68:	000b416b 	.word	0x000b416b
   b4d6c:	000be1b5 	.word	0x000be1b5
   b4d70:	2003e654 	.word	0x2003e654
   b4d74:	000be98e 	.word	0x000be98e
   b4d78:	000be23a 	.word	0x000be23a
   b4d7c:	000be990 	.word	0x000be990
   b4d80:	000b4119 	.word	0x000b4119
   b4d84:	000b40e5 	.word	0x000b40e5
   b4d88:	2003dfcd 	.word	0x2003dfcd
   b4d8c:	000bdee1 	.word	0x000bdee1
   b4d90:	2003e6ac 	.word	0x2003e6ac
   b4d94:	000be271 	.word	0x000be271
   b4d98:	000be98c 	.word	0x000be98c
   b4d9c:	000be1f3 	.word	0x000be1f3

000b4da0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4da0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4da2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4da4:	4604      	mov	r4, r0
	switch (__op)
   b4da6:	d104      	bne.n	b4db2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4da8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4daa:	6003      	str	r3, [r0, #0]
      }
   b4dac:	2000      	movs	r0, #0
   b4dae:	b003      	add	sp, #12
   b4db0:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4db2:	2a02      	cmp	r2, #2
   b4db4:	d00c      	beq.n	b4dd0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4db6:	2a03      	cmp	r2, #3
   b4db8:	d1f8      	bne.n	b4dac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4dba:	6804      	ldr	r4, [r0, #0]
   b4dbc:	2c00      	cmp	r4, #0
   b4dbe:	d0f5      	beq.n	b4dac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4dc0:	4620      	mov	r0, r4
   b4dc2:	f7ff fa05 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4dc6:	2110      	movs	r1, #16
   b4dc8:	4620      	mov	r0, r4
   b4dca:	f7ff f968 	bl	b409e <_ZdlPvj>
   b4dce:	e7ed      	b.n	b4dac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4dd0:	6809      	ldr	r1, [r1, #0]
   b4dd2:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4dd4:	2010      	movs	r0, #16
   b4dd6:	f7ff f95e 	bl	b4096 <_Znwj>
   b4dda:	4605      	mov	r5, r0
   b4ddc:	b110      	cbz	r0, b4de4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4dde:	9901      	ldr	r1, [sp, #4]
   b4de0:	f7ff fe5a 	bl	b4a98 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4de4:	6025      	str	r5, [r4, #0]
	}
   b4de6:	e7e1      	b.n	b4dac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4de8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4dea:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4dee:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4df0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4df2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4df6:	42ae      	cmp	r6, r5
   b4df8:	d004      	beq.n	b4e04 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4dfa:	4628      	mov	r0, r5
   b4dfc:	f006 fa20 	bl	bb240 <_ZN6StringD1Ev>
   b4e00:	3514      	adds	r5, #20
   b4e02:	e7f8      	b.n	b4df6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4e04:	6820      	ldr	r0, [r4, #0]
   b4e06:	f004 f949 	bl	b909c <free>
    AllocatorT::free(data_);
}
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	bd70      	pop	{r4, r5, r6, pc}

000b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4e0e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e12:	4604      	mov	r4, r0
   b4e14:	460d      	mov	r5, r1
   b4e16:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4e18:	d916      	bls.n	b4e48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4e1a:	4290      	cmp	r0, r2
   b4e1c:	d215      	bcs.n	b4e4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4e1e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4e22:	1a75      	subs	r5, r6, r1
   b4e24:	f1a1 0714 	sub.w	r7, r1, #20
   b4e28:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4e2a:	42b7      	cmp	r7, r6
   b4e2c:	d01c      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4e2e:	b12c      	cbz	r4, b4e3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4e30:	4631      	mov	r1, r6
   b4e32:	4620      	mov	r0, r4
   b4e34:	f006 fa80 	bl	bb338 <_ZN6StringC1EOS_>
   b4e38:	7c33      	ldrb	r3, [r6, #16]
   b4e3a:	7423      	strb	r3, [r4, #16]
   b4e3c:	4630      	mov	r0, r6
   b4e3e:	f006 f9ff 	bl	bb240 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e42:	3e14      	subs	r6, #20
   b4e44:	3c14      	subs	r4, #20
   b4e46:	e7f0      	b.n	b4e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e48:	d00e      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e4a:	42b5      	cmp	r5, r6
   b4e4c:	d00c      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e4e:	b12c      	cbz	r4, b4e5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e50:	4629      	mov	r1, r5
   b4e52:	4620      	mov	r0, r4
   b4e54:	f006 fa70 	bl	bb338 <_ZN6StringC1EOS_>
   b4e58:	7c2b      	ldrb	r3, [r5, #16]
   b4e5a:	7423      	strb	r3, [r4, #16]
   b4e5c:	4628      	mov	r0, r5
   b4e5e:	f006 f9ef 	bl	bb240 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e62:	3514      	adds	r5, #20
   b4e64:	3414      	adds	r4, #20
   b4e66:	e7f0      	b.n	b4e4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e6e:	2300      	movs	r3, #0
   b4e70:	e9c0 3300 	strd	r3, r3, [r0]
   b4e74:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e76:	684f      	ldr	r7, [r1, #4]
   b4e78:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e7a:	4604      	mov	r4, r0
   b4e7c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e7e:	dd23      	ble.n	b4ec8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e80:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e84:	fb08 f007 	mul.w	r0, r8, r7
   b4e88:	f004 f900 	bl	b908c <malloc>
            if (!d) {
   b4e8c:	4605      	mov	r5, r0
   b4e8e:	b1d8      	cbz	r0, b4ec8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e90:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e94:	fb08 1202 	mla	r2, r8, r2, r1
   b4e98:	f7ff ffb9 	bl	b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e9c:	6820      	ldr	r0, [r4, #0]
   b4e9e:	f004 f8fd 	bl	b909c <free>
        data_ = d;
   b4ea2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4ea4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4ea6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4eaa:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4eae:	45b8      	cmp	r8, r7
   b4eb0:	d008      	beq.n	b4ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4eb2:	4639      	mov	r1, r7
   b4eb4:	4628      	mov	r0, r5
   b4eb6:	f006 fa59 	bl	bb36c <_ZN6StringC1ERKS_>
   b4eba:	7c3b      	ldrb	r3, [r7, #16]
   b4ebc:	742b      	strb	r3, [r5, #16]
   b4ebe:	3714      	adds	r7, #20
   b4ec0:	3514      	adds	r5, #20
   b4ec2:	e7f4      	b.n	b4eae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4ec4:	6873      	ldr	r3, [r6, #4]
   b4ec6:	6063      	str	r3, [r4, #4]
}
   b4ec8:	4620      	mov	r0, r4
   b4eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4ed0 <_GLOBAL__sub_I_SystemMode>:
   b4ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4ed2:	4b2f      	ldr	r3, [pc, #188]	; (b4f90 <_GLOBAL__sub_I_SystemMode+0xc0>)
    SleepResult() {}
   b4ed4:	4a2f      	ldr	r2, [pc, #188]	; (b4f94 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4ed6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ed8:	2400      	movs	r4, #0
   b4eda:	b08d      	sub	sp, #52	; 0x34
   b4edc:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4ee0:	2003      	movs	r0, #3
   b4ee2:	f003 ffd1 	bl	b8e88 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b4ee6:	4621      	mov	r1, r4
   b4ee8:	2001      	movs	r0, #1
   b4eea:	f003 ffe5 	bl	b8eb8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b4eee:	2101      	movs	r1, #1
   b4ef0:	2004      	movs	r0, #4
   b4ef2:	f003 fd8d 	bl	b8a10 <HAL_Feature_Set>
        capacity_(0) {
   b4ef6:	e9cd 4400 	strd	r4, r4, [sp]
   b4efa:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4efc:	f006 fd98 	bl	bba30 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4f00:	4d25      	ldr	r5, [pc, #148]	; (b4f98 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b4f02:	4606      	mov	r6, r0
   b4f04:	4669      	mov	r1, sp
   b4f06:	a803      	add	r0, sp, #12
   b4f08:	f7ff ffaf 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4f0c:	462f      	mov	r7, r5
        stream_(&stream) {
   b4f0e:	a903      	add	r1, sp, #12
   b4f10:	a806      	add	r0, sp, #24
   b4f12:	f7ff ffaa 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4f16:	4b21      	ldr	r3, [pc, #132]	; (b4f9c <_GLOBAL__sub_I_SystemMode+0xcc>)
   b4f18:	f847 3b04 	str.w	r3, [r7], #4
   b4f1c:	a906      	add	r1, sp, #24
   b4f1e:	a809      	add	r0, sp, #36	; 0x24
   b4f20:	f7ff ffa3 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4f24:	aa09      	add	r2, sp, #36	; 0x24
   b4f26:	211e      	movs	r1, #30
   b4f28:	4638      	mov	r0, r7
   b4f2a:	f005 fae5 	bl	ba4f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4f2e:	a809      	add	r0, sp, #36	; 0x24
   b4f30:	f7ff ff5a 	bl	b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4f34:	a806      	add	r0, sp, #24
   b4f36:	f7ff ff57 	bl	b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f3a:	4b19      	ldr	r3, [pc, #100]	; (b4fa0 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b4f3c:	602b      	str	r3, [r5, #0]
   b4f3e:	a803      	add	r0, sp, #12
   b4f40:	622e      	str	r6, [r5, #32]
   b4f42:	f7ff ff51 	bl	b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f46:	4b17      	ldr	r3, [pc, #92]	; (b4fa4 <_GLOBAL__sub_I_SystemMode+0xd4>)
   b4f48:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4f4a:	f006 fd71 	bl	bba30 <_Z16_fetch_usbserialv>
   b4f4e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f52:	f006 fd5b 	bl	bba0c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4f56:	f004 ffb1 	bl	b9ebc <_ZN5spark10LogManager8instanceEv>
   b4f5a:	4629      	mov	r1, r5
   b4f5c:	f005 f9a2 	bl	ba2a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b4f60:	4668      	mov	r0, sp
   b4f62:	f7ff ff41 	bl	b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   b4f66:	4b10      	ldr	r3, [pc, #64]	; (b4fa8 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b4f68:	1d1a      	adds	r2, r3, #4
   b4f6a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4f6c:	4a0f      	ldr	r2, [pc, #60]	; (b4fac <_GLOBAL__sub_I_SystemMode+0xdc>)
   b4f6e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4f70:	2201      	movs	r2, #1
   b4f72:	751a      	strb	r2, [r3, #20]
   b4f74:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4f78:	611c      	str	r4, [r3, #16]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f7a:	f006 fee3 	bl	bbd44 <_Z19__fetch_global_Wirev>
   b4f7e:	4601      	mov	r1, r0
   b4f80:	480b      	ldr	r0, [pc, #44]	; (b4fb0 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b4f82:	2269      	movs	r2, #105	; 0x69
   b4f84:	b00d      	add	sp, #52	; 0x34
   b4f86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f8a:	f001 bb1f 	b.w	b65cc <_ZN6AB1805C1ER7TwoWireh>
   b4f8e:	bf00      	nop
   b4f90:	2003df38 	.word	0x2003df38
   b4f94:	ffff0000 	.word	0xffff0000
   b4f98:	2003dfa0 	.word	0x2003dfa0
   b4f9c:	000be2c0 	.word	0x000be2c0
   b4fa0:	000bf1fc 	.word	0x000bf1fc
   b4fa4:	000be2d8 	.word	0x000be2d8
   b4fa8:	2003df88 	.word	0x2003df88
   b4fac:	00030010 	.word	0x00030010
   b4fb0:	2003df68 	.word	0x2003df68

000b4fb4 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b4fb4:	4770      	bx	lr

000b4fb6 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4fb6:	4770      	bx	lr

000b4fb8 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4fb8:	b510      	push	{r4, lr}
}
   b4fba:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b4fbc:	4604      	mov	r4, r0
}
   b4fbe:	f7ff f86e 	bl	b409e <_ZdlPvj>
   b4fc2:	4620      	mov	r0, r4
   b4fc4:	bd10      	pop	{r4, pc}
	...

000b4fc8 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4fc8:	b510      	push	{r4, lr}
   b4fca:	4b05      	ldr	r3, [pc, #20]	; (b4fe0 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4fcc:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4fce:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4fd0:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4fd2:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4fd6:	f003 ff3b 	bl	b8e50 <led_set_status_active>
}
   b4fda:	4620      	mov	r0, r4
   b4fdc:	bd10      	pop	{r4, pc}
   b4fde:	bf00      	nop
   b4fe0:	000be76c 	.word	0x000be76c

000b4fe4 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4fe4:	b510      	push	{r4, lr}
   b4fe6:	4604      	mov	r4, r0
}
   b4fe8:	f7ff ffee 	bl	b4fc8 <_ZN8particle9LEDStatusD1Ev>
   b4fec:	4620      	mov	r0, r4
   b4fee:	2120      	movs	r1, #32
   b4ff0:	f7ff f855 	bl	b409e <_ZdlPvj>
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	bd10      	pop	{r4, pc}

000b4ff8 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4ff8:	b510      	push	{r4, lr}
    if (!_instance) {
   b4ffa:	4c06      	ldr	r4, [pc, #24]	; (b5014 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4ffc:	6823      	ldr	r3, [r4, #0]
   b4ffe:	b933      	cbnz	r3, b500e <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b5000:	2004      	movs	r0, #4
   b5002:	f7ff f848 	bl	b4096 <_Znwj>
   b5006:	b108      	cbz	r0, b500c <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b5008:	4b03      	ldr	r3, [pc, #12]	; (b5018 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b500a:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b500c:	6020      	str	r0, [r4, #0]
}
   b500e:	6820      	ldr	r0, [r4, #0]
   b5010:	bd10      	pop	{r4, pc}
   b5012:	bf00      	nop
   b5014:	2003dfd0 	.word	0x2003dfd0
   b5018:	000be780 	.word	0x000be780

000b501c <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b501c:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b501e:	4836      	ldr	r0, [pc, #216]	; (b50f8 <_ZN14LoRA_Functions5setupEb+0xdc>)
bool LoRA_Functions::setup(bool gatewayID) {
   b5020:	b087      	sub	sp, #28
   b5022:	460d      	mov	r5, r1
	if (!manager.init()) {
   b5024:	f002 fe31 	bl	b7c8a <_ZN8RHRouter4initEv>
   b5028:	4604      	mov	r4, r0
   b502a:	b930      	cbnz	r0, b503a <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b502c:	4933      	ldr	r1, [pc, #204]	; (b50fc <_ZN14LoRA_Functions5setupEb+0xe0>)
   b502e:	4834      	ldr	r0, [pc, #208]	; (b5100 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b5030:	f7ff f918 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}

	return true;
}
   b5034:	4620      	mov	r0, r4
   b5036:	b007      	add	sp, #28
   b5038:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b503a:	ed9f 0a32 	vldr	s0, [pc, #200]	; b5104 <_ZN14LoRA_Functions5setupEb+0xe8>
   b503e:	4832      	ldr	r0, [pc, #200]	; (b5108 <_ZN14LoRA_Functions5setupEb+0xec>)
   b5040:	f003 f91e 	bl	b8280 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b5044:	2200      	movs	r2, #0
   b5046:	2117      	movs	r1, #23
   b5048:	482f      	ldr	r0, [pc, #188]	; (b5108 <_ZN14LoRA_Functions5setupEb+0xec>)
   b504a:	f003 fa93 	bl	b8574 <_ZN7RH_RF9510setTxPowerEab>
	Log.info("in LoRA setup - node number %d",sysStatus.get_nodeNumber());
   b504e:	f000 fd17 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5052:	f000 fe34 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5056:	492d      	ldr	r1, [pc, #180]	; (b510c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b5058:	4602      	mov	r2, r0
   b505a:	4829      	ldr	r0, [pc, #164]	; (b5100 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b505c:	f7ff f902 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	if (gatewayID == true) {
   b5060:	b18d      	cbz	r5, b5086 <_ZN14LoRA_Functions5setupEb+0x6a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b5062:	f000 fd0d 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5066:	2100      	movs	r1, #0
   b5068:	f000 fe69 	bl	b5d3e <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b506c:	a802      	add	r0, sp, #8
   b506e:	f003 ff8d 	bl	b8f8c <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b5072:	9a02      	ldr	r2, [sp, #8]
   b5074:	4926      	ldr	r1, [pc, #152]	; (b5110 <_ZN14LoRA_Functions5setupEb+0xf4>)
   b5076:	4822      	ldr	r0, [pc, #136]	; (b5100 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b5078:	f7ff f8f4 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b507c:	a802      	add	r0, sp, #8
   b507e:	f006 f8df 	bl	bb240 <_ZN6StringD1Ev>
   b5082:	462c      	mov	r4, r5
   b5084:	e7d6      	b.n	b5034 <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b5086:	f000 fcfb 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b508a:	f000 fe18 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b508e:	b1f0      	cbz	r0, b50ce <_ZN14LoRA_Functions5setupEb+0xb2>
   b5090:	f000 fcf6 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5094:	f000 fe13 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5098:	280a      	cmp	r0, #10
   b509a:	d818      	bhi.n	b50ce <_ZN14LoRA_Functions5setupEb+0xb2>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b509c:	f000 fcf0 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b50a0:	f000 fe0d 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b50a4:	4601      	mov	r1, r0
   b50a6:	481b      	ldr	r0, [pc, #108]	; (b5114 <_ZN14LoRA_Functions5setupEb+0xf8>)
   b50a8:	f002 f91b 	bl	b72e2 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b50ac:	4819      	ldr	r0, [pc, #100]	; (b5114 <_ZN14LoRA_Functions5setupEb+0xf8>)
   b50ae:	f002 f8fe 	bl	b72ae <_ZN10RHDatagram11thisAddressEv>
   b50b2:	9001      	str	r0, [sp, #4]
   b50b4:	a802      	add	r0, sp, #8
   b50b6:	f003 ff69 	bl	b8f8c <spark_deviceID>
   b50ba:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b50be:	4916      	ldr	r1, [pc, #88]	; (b5118 <_ZN14LoRA_Functions5setupEb+0xfc>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b50c0:	480f      	ldr	r0, [pc, #60]	; (b5100 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b50c2:	f7ff f8cf 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b50c6:	a802      	add	r0, sp, #8
   b50c8:	f006 f8ba 	bl	bb240 <_ZN6StringD1Ev>
   b50cc:	e7b2      	b.n	b5034 <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b50ce:	f000 fcd7 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b50d2:	210b      	movs	r1, #11
   b50d4:	f000 fe33 	bl	b5d3e <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b50d8:	210b      	movs	r1, #11
   b50da:	480e      	ldr	r0, [pc, #56]	; (b5114 <_ZN14LoRA_Functions5setupEb+0xf8>)
   b50dc:	f002 f901 	bl	b72e2 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b50e0:	480c      	ldr	r0, [pc, #48]	; (b5114 <_ZN14LoRA_Functions5setupEb+0xf8>)
   b50e2:	f002 f8e4 	bl	b72ae <_ZN10RHDatagram11thisAddressEv>
   b50e6:	9001      	str	r0, [sp, #4]
   b50e8:	a802      	add	r0, sp, #8
   b50ea:	f003 ff4f 	bl	b8f8c <spark_deviceID>
   b50ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b50f2:	490a      	ldr	r1, [pc, #40]	; (b511c <_ZN14LoRA_Functions5setupEb+0x100>)
   b50f4:	e7e4      	b.n	b50c0 <_ZN14LoRA_Functions5setupEb+0xa4>
   b50f6:	bf00      	nop
   b50f8:	2003e200 	.word	0x2003e200
   b50fc:	000be2e8 	.word	0x000be2e8
   b5100:	2003e654 	.word	0x2003e654
   b5104:	4464c000 	.word	0x4464c000
   b5108:	2003e0d0 	.word	0x2003e0d0
   b510c:	000be2f4 	.word	0x000be2f4
   b5110:	000be313 	.word	0x000be313
   b5114:	2003e204 	.word	0x2003e204
   b5118:	000be34d 	.word	0x000be34d
   b511c:	000be384 	.word	0x000be384

000b5120 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b5120:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b5122:	4c06      	ldr	r4, [pc, #24]	; (b513c <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b5124:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b5126:	f10d 0203 	add.w	r2, sp, #3
   b512a:	a901      	add	r1, sp, #4
   b512c:	4620      	mov	r0, r4
   b512e:	f003 f821 	bl	b8174 <_ZN7RH_RF954recvEPhS0_>
   b5132:	2800      	cmp	r0, #0
   b5134:	d1f7      	bne.n	b5126 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b5136:	b040      	add	sp, #256	; 0x100
   b5138:	bd10      	pop	{r4, pc}
   b513a:	bf00      	nop
   b513c:	2003e0d0 	.word	0x2003e0d0

000b5140 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b5140:	4801      	ldr	r0, [pc, #4]	; (b5148 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b5142:	f003 b804 	b.w	b814e <_ZN7RH_RF955sleepEv>
   b5146:	bf00      	nop
   b5148:	2003e0d0 	.word	0x2003e0d0

000b514c <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b514c:	4b13      	ldr	r3, [pc, #76]	; (b519c <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b514e:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b5150:	881c      	ldrh	r4, [r3, #0]
   b5152:	2100      	movs	r1, #0
   b5154:	4620      	mov	r0, r4
   b5156:	f006 fd7c 	bl	bbc52 <digitalWrite>
	delay(10);
   b515a:	200a      	movs	r0, #10
   b515c:	f004 f812 	bl	b9184 <delay>
	digitalWrite(RFM95_RST,HIGH);
   b5160:	2101      	movs	r1, #1
   b5162:	4620      	mov	r0, r4
   b5164:	f006 fd75 	bl	bbc52 <digitalWrite>
	delay(10);
   b5168:	200a      	movs	r0, #10
   b516a:	f004 f80b 	bl	b9184 <delay>

	if (!manager.init()) {
   b516e:	480c      	ldr	r0, [pc, #48]	; (b51a0 <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b5170:	f002 fd8b 	bl	b7c8a <_ZN8RHRouter4initEv>
   b5174:	4604      	mov	r4, r0
   b5176:	b928      	cbnz	r0, b5184 <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b5178:	490a      	ldr	r1, [pc, #40]	; (b51a4 <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b517a:	480b      	ldr	r0, [pc, #44]	; (b51a8 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b517c:	f7ff f872 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b5180:	4620      	mov	r0, r4
   b5182:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b5184:	ed9f 0a09 	vldr	s0, [pc, #36]	; b51ac <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b5188:	4809      	ldr	r0, [pc, #36]	; (b51b0 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b518a:	f003 f879 	bl	b8280 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b518e:	4808      	ldr	r0, [pc, #32]	; (b51b0 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b5190:	2200      	movs	r2, #0
   b5192:	2117      	movs	r1, #23
   b5194:	f003 f9ee 	bl	b8574 <_ZN7RH_RF9510setTxPowerEab>
return true;
   b5198:	e7f2      	b.n	b5180 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b519a:	bf00      	nop
   b519c:	000be998 	.word	0x000be998
   b51a0:	2003e200 	.word	0x2003e200
   b51a4:	000be2e8 	.word	0x000be2e8
   b51a8:	2003e654 	.word	0x2003e654
   b51ac:	4464c000 	.word	0x4464c000
   b51b0:	2003e0d0 	.word	0x2003e0d0

000b51b4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b51b4:	b570      	push	{r4, r5, r6, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b51b6:	2200      	movs	r2, #0
   b51b8:	b090      	sub	sp, #64	; 0x40
   b51ba:	2114      	movs	r1, #20
   b51bc:	2002      	movs	r0, #2
   b51be:	f003 fe93 	bl	b8ee8 <led_pattern_period>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	// contents of response for 1-7 handled in common function above
	byte alertSetByGateway = buf[8];
   b51c2:	4d57      	ldr	r5, [pc, #348]	; (b5320 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x16c>)
   b51c4:	221e      	movs	r2, #30
   b51c6:	2101      	movs	r1, #1
   b51c8:	e9cd 2100 	strd	r2, r1, [sp]
   b51cc:	4603      	mov	r3, r0
   b51ce:	2202      	movs	r2, #2
   b51d0:	21ff      	movs	r1, #255	; 0xff
   b51d2:	a808      	add	r0, sp, #32
   b51d4:	f004 fcf4 	bl	b9bc0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b51d8:	7a2c      	ldrb	r4, [r5, #8]
	if (alertSetByGateway == 1) {								// Gateway did not recognize our node number, need to re-join
   b51da:	2c01      	cmp	r4, #1
   b51dc:	d175      	bne.n	b52ca <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x116>
		sysStatus.set_nodeNumber(11);
   b51de:	f000 fc4f 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b51e2:	210b      	movs	r1, #11
   b51e4:	f000 fdab 	bl	b5d3e <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b51e8:	210b      	movs	r1, #11
   b51ea:	484e      	ldr	r0, [pc, #312]	; (b5324 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x170>)
   b51ec:	f002 f879 	bl	b72e2 <_ZN10RHDatagram14setThisAddressEh>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
   b51f0:	f000 fc46 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b51f4:	4621      	mov	r1, r4
   b51f6:	f000 fdb4 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());	
   b51fa:	f000 fc41 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b51fe:	4606      	mov	r6, r0
   b5200:	f006 fb2f 	bl	bb862 <_ZN9TimeClass3nowEv>
   b5204:	4602      	mov	r2, r0
   b5206:	17c3      	asrs	r3, r0, #31
   b5208:	4630      	mov	r0, r6
   b520a:	f000 fed9 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b520e:	4845      	ldr	r0, [pc, #276]	; (b5324 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x170>)
   b5210:	f002 f84d 	bl	b72ae <_ZN10RHDatagram11thisAddressEv>
   b5214:	9002      	str	r0, [sp, #8]
   b5216:	a804      	add	r0, sp, #16
   b5218:	f003 feb8 	bl	b8f8c <spark_deviceID>
   b521c:	4842      	ldr	r0, [pc, #264]	; (b5328 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x174>)
   b521e:	9b04      	ldr	r3, [sp, #16]
   b5220:	9a02      	ldr	r2, [sp, #8]
   b5222:	4942      	ldr	r1, [pc, #264]	; (b532c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x178>)
   b5224:	f7ff f81e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5228:	a804      	add	r0, sp, #16
   b522a:	f006 f809 	bl	bb240 <_ZN6StringD1Ev>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
		sysStatus.set_alertTimestampNode(Time.now());			
	}
	else sysStatus.set_alertCodeNode(0);

	if (buf[10] == 0) {								// Open Hours Processing
   b522e:	7aae      	ldrb	r6, [r5, #10]
   b5230:	2e00      	cmp	r6, #0
   b5232:	d16e      	bne.n	b5312 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x15e>
		sysStatus.set_openHours(false);				// Open hours or not - impacts whether we power down the sensor for sleep
   b5234:	f000 fc24 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5238:	4631      	mov	r1, r6
   b523a:	f000 fc74 	bl	b5b26 <_ZN13sysStatusData13set_openHoursEb>
		current.resetEverything();					// Since we are not open anymore and will stop reporting - might as well zero counts
   b523e:	f000 fcab 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5242:	f000 ff0a 	bl	b605a <_ZN17currentStatusData15resetEverythingEv>
		sysStatus.set_alertCodeNode(6);				// This will reset the counts and go to sleep
   b5246:	f000 fc1b 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b524a:	2106      	movs	r1, #6
   b524c:	f000 fd89 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Park is closed - reset everything");
   b5250:	4937      	ldr	r1, [pc, #220]	; (b5330 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x17c>)
   b5252:	4835      	ldr	r0, [pc, #212]	; (b5328 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x174>)
   b5254:	f7ff f806 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	}
	else sysStatus.set_openHours(true);

	Log.info("Data report acknowledged %s alert for message %d park is %s and alert code is %d", (alertSetByGateway > 0) ? "with":"without", buf[11], (buf[10] ==1) ? "open":"closed", sysStatus.get_alertCodeNode());
   b5258:	4b36      	ldr	r3, [pc, #216]	; (b5334 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x180>)
   b525a:	4a37      	ldr	r2, [pc, #220]	; (b5338 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x184>)
   b525c:	4937      	ldr	r1, [pc, #220]	; (b533c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x188>)
   b525e:	7aa8      	ldrb	r0, [r5, #10]
   b5260:	2c00      	cmp	r4, #0
   b5262:	bf08      	it	eq
   b5264:	461a      	moveq	r2, r3
   b5266:	4c36      	ldr	r4, [pc, #216]	; (b5340 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x18c>)
   b5268:	7aeb      	ldrb	r3, [r5, #11]
   b526a:	9203      	str	r2, [sp, #12]
   b526c:	2801      	cmp	r0, #1
   b526e:	bf18      	it	ne
   b5270:	460c      	movne	r4, r1
   b5272:	9302      	str	r3, [sp, #8]
   b5274:	f000 fc04 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5278:	f000 fd2b 	bl	b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b527c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5280:	e9cd 4000 	strd	r4, r0, [sp]
   b5284:	492f      	ldr	r1, [pc, #188]	; (b5344 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x190>)
   b5286:	4828      	ldr	r0, [pc, #160]	; (b5328 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x174>)
   b5288:	f7fe ffec 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    led_set_status_active(&d_, active, nullptr);
   b528c:	2200      	movs	r2, #0
   b528e:	2101      	movs	r1, #1
   b5290:	a809      	add	r0, sp, #36	; 0x24
   b5292:	f003 fddd 	bl	b8e50 <led_set_status_active>
	
	blinkBlue.setActive(true);
	unsigned long strength = (unsigned long)(map(driver.lastRssi(),-30,-120,2000,0));
   b5296:	2400      	movs	r4, #0
   b5298:	482b      	ldr	r0, [pc, #172]	; (b5348 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x194>)
   b529a:	f002 f8a0 	bl	b73de <_ZN15RHGenericDriver8lastRssiEv>
   b529e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b52a2:	f06f 0277 	mvn.w	r2, #119	; 0x77
   b52a6:	f06f 011d 	mvn.w	r1, #29
   b52aa:	9400      	str	r4, [sp, #0]
   b52ac:	f003 ff5e 	bl	b916c <_Z3mapiiiii>
    delay(strength);
   b52b0:	f003 ff68 	bl	b9184 <delay>
   b52b4:	4622      	mov	r2, r4
   b52b6:	4621      	mov	r1, r4
   b52b8:	a809      	add	r0, sp, #36	; 0x24
   b52ba:	f003 fdc9 	bl	b8e50 <led_set_status_active>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b52be:	a808      	add	r0, sp, #32
   b52c0:	f7ff fe82 	bl	b4fc8 <_ZN8particle9LEDStatusD1Ev>
    blinkBlue.setActive(false);

	return true;
}
   b52c4:	2001      	movs	r0, #1
   b52c6:	b010      	add	sp, #64	; 0x40
   b52c8:	bd70      	pop	{r4, r5, r6, pc}
	else if (alertSetByGateway == 7) {
   b52ca:	2c07      	cmp	r4, #7
   b52cc:	d105      	bne.n	b52da <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x126>
		sysStatus.set_sensorType(buf[9]);
   b52ce:	f000 fbd7 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b52d2:	7a69      	ldrb	r1, [r5, #9]
   b52d4:	f000 fd4b 	bl	b5d6e <_ZN13sysStatusData14set_sensorTypeEh>
   b52d8:	e7a9      	b.n	b522e <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
	else if (alertSetByGateway > 0) {							// the Gateway set an alert
   b52da:	b1a4      	cbz	r4, b5306 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x152>
		Log.info("The gateway set an alert %d", alertSetByGateway);
   b52dc:	4622      	mov	r2, r4
   b52de:	491b      	ldr	r1, [pc, #108]	; (b534c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x198>)
   b52e0:	4811      	ldr	r0, [pc, #68]	; (b5328 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x174>)
   b52e2:	f7fe ffbf 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
   b52e6:	f000 fbcb 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b52ea:	4621      	mov	r1, r4
   b52ec:	f000 fd39 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());			
   b52f0:	f000 fbc6 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b52f4:	4606      	mov	r6, r0
   b52f6:	f006 fab4 	bl	bb862 <_ZN9TimeClass3nowEv>
   b52fa:	4602      	mov	r2, r0
   b52fc:	17c3      	asrs	r3, r0, #31
   b52fe:	4630      	mov	r0, r6
   b5300:	f000 fe5e 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
   b5304:	e793      	b.n	b522e <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
	else sysStatus.set_alertCodeNode(0);
   b5306:	f000 fbbb 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b530a:	4621      	mov	r1, r4
   b530c:	f000 fd29 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b5310:	e78d      	b.n	b522e <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
	else sysStatus.set_openHours(true);
   b5312:	f000 fbb5 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5316:	2101      	movs	r1, #1
   b5318:	f000 fc05 	bl	b5b26 <_ZN13sysStatusData13set_openHoursEb>
   b531c:	e79c      	b.n	b5258 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xa4>
   b531e:	bf00      	nop
   b5320:	2003dfd4 	.word	0x2003dfd4
   b5324:	2003e204 	.word	0x2003e204
   b5328:	2003e654 	.word	0x2003e654
   b532c:	000be384 	.word	0x000be384
   b5330:	000be400 	.word	0x000be400
   b5334:	000be3d0 	.word	0x000be3d0
   b5338:	000be3cb 	.word	0x000be3cb
   b533c:	000be3dd 	.word	0x000be3dd
   b5340:	000be3d8 	.word	0x000be3d8
   b5344:	000be422 	.word	0x000be422
   b5348:	2003e0d0 	.word	0x2003e0d0
   b534c:	000be3e4 	.word	0x000be3e4

000b5350 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b5350:	b510      	push	{r4, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5352:	2200      	movs	r2, #0
   b5354:	b08c      	sub	sp, #48	; 0x30
   b5356:	2114      	movs	r1, #20
   b5358:	2002      	movs	r0, #2
   b535a:	f003 fdc5 	bl	b8ee8 <led_pattern_period>
   b535e:	221e      	movs	r2, #30
   b5360:	2101      	movs	r1, #1
   b5362:	4603      	mov	r3, r0
   b5364:	e9cd 2100 	strd	r2, r1, [sp]
   b5368:	a804      	add	r0, sp, #16
   b536a:	4925      	ldr	r1, [pc, #148]	; (b5400 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xb0>)
   b536c:	4c25      	ldr	r4, [pc, #148]	; (b5404 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xb4>)
   b536e:	2202      	movs	r2, #2
   b5370:	f004 fc26 	bl	b9bc0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	if (sysStatus.get_nodeNumber() > 10) sysStatus.set_nodeNumber(buf[9]);
   b5374:	f000 fb84 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5378:	f000 fca1 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b537c:	280a      	cmp	r0, #10
   b537e:	d904      	bls.n	b538a <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x3a>
   b5380:	f000 fb7e 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5384:	7a61      	ldrb	r1, [r4, #9]
   b5386:	f000 fcda 	bl	b5d3e <_ZN13sysStatusData14set_nodeNumberEh>
	sysStatus.set_sensorType(buf[10]);
   b538a:	f000 fb79 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b538e:	7aa1      	ldrb	r1, [r4, #10]
   b5390:	f000 fced 	bl	b5d6e <_ZN13sysStatusData14set_sensorTypeEh>
	Log.info("Node %d Join request acknowledged and sensor set to %d", sysStatus.get_nodeNumber(), sysStatus.get_sensorType());
   b5394:	f000 fb74 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5398:	f000 fc91 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b539c:	9003      	str	r0, [sp, #12]
   b539e:	f000 fb6f 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b53a2:	f000 fc9b 	bl	b5cdc <_ZNK13sysStatusData14get_sensorTypeEv>
   b53a6:	9a03      	ldr	r2, [sp, #12]
   b53a8:	4917      	ldr	r1, [pc, #92]	; (b5408 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xb8>)
   b53aa:	4603      	mov	r3, r0
   b53ac:	4817      	ldr	r0, [pc, #92]	; (b540c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xbc>)
   b53ae:	f7fe ff59 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());
   b53b2:	f000 fb65 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b53b6:	f000 fc82 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b53ba:	4601      	mov	r1, r0
   b53bc:	4814      	ldr	r0, [pc, #80]	; (b5410 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc0>)
   b53be:	f001 ff90 	bl	b72e2 <_ZN10RHDatagram14setThisAddressEh>
    led_set_status_active(&d_, active, nullptr);
   b53c2:	2200      	movs	r2, #0
   b53c4:	2101      	movs	r1, #1
   b53c6:	a805      	add	r0, sp, #20
   b53c8:	f003 fd42 	bl	b8e50 <led_set_status_active>

    blinkOrange.setActive(true);
	unsigned long strength = (unsigned long)(map(driver.lastRssi(),-30,-120,2000,0));
   b53cc:	2400      	movs	r4, #0
   b53ce:	4811      	ldr	r0, [pc, #68]	; (b5414 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc4>)
   b53d0:	f002 f805 	bl	b73de <_ZN15RHGenericDriver8lastRssiEv>
   b53d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b53d8:	f06f 0277 	mvn.w	r2, #119	; 0x77
   b53dc:	f06f 011d 	mvn.w	r1, #29
   b53e0:	9400      	str	r4, [sp, #0]
   b53e2:	f003 fec3 	bl	b916c <_Z3mapiiiii>
    delay(strength);
   b53e6:	f003 fecd 	bl	b9184 <delay>
   b53ea:	4622      	mov	r2, r4
   b53ec:	4621      	mov	r1, r4
   b53ee:	a805      	add	r0, sp, #20
   b53f0:	f003 fd2e 	bl	b8e50 <led_set_status_active>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b53f4:	a804      	add	r0, sp, #16
   b53f6:	f7ff fde7 	bl	b4fc8 <_ZN8particle9LEDStatusD1Ev>
    blinkOrange.setActive(false);

	return true;
}
   b53fa:	2001      	movs	r0, #1
   b53fc:	b00c      	add	sp, #48	; 0x30
   b53fe:	bd10      	pop	{r4, pc}
   b5400:	00ff6000 	.word	0x00ff6000
   b5404:	2003dfd4 	.word	0x2003dfd4
   b5408:	000be473 	.word	0x000be473
   b540c:	2003e654 	.word	0x2003e654
   b5410:	2003e204 	.word	0x2003e204
   b5414:	2003e0d0 	.word	0x2003e0d0

000b5418 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b5418:	b570      	push	{r4, r5, r6, lr}
   b541a:	b08c      	sub	sp, #48	; 0x30
	uint8_t len = sizeof(buf);
   b541c:	23f9      	movs	r3, #249	; 0xf9
   b541e:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b5422:	f10d 031f 	add.w	r3, sp, #31
   b5426:	9303      	str	r3, [sp, #12]
   b5428:	f10d 031e 	add.w	r3, sp, #30
   b542c:	4d3e      	ldr	r5, [pc, #248]	; (b5528 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x110>)
   b542e:	9302      	str	r3, [sp, #8]
   b5430:	f10d 031d 	add.w	r3, sp, #29
   b5434:	9301      	str	r3, [sp, #4]
   b5436:	ab07      	add	r3, sp, #28
   b5438:	9300      	str	r3, [sp, #0]
   b543a:	483c      	ldr	r0, [pc, #240]	; (b552c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>)
   b543c:	f10d 031b 	add.w	r3, sp, #27
   b5440:	f10d 021a 	add.w	r2, sp, #26
   b5444:	4629      	mov	r1, r5
   b5446:	f002 fa19 	bl	b787c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b544a:	2800      	cmp	r0, #0
   b544c:	d060      	beq.n	b5510 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf8>
		buf[len] = 0;
   b544e:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b5452:	2400      	movs	r4, #0
   b5454:	54ec      	strb	r4, [r5, r3]
		if ((buf[0] << 8 | buf[1]) != sysStatus.get_magicNumber()) {
   b5456:	882e      	ldrh	r6, [r5, #0]
   b5458:	f000 fb12 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b545c:	f000 fcb7 	bl	b5dce <_ZNK13sysStatusData15get_magicNumberEv>
   b5460:	ba76      	rev16	r6, r6
   b5462:	b2b6      	uxth	r6, r6
   b5464:	42b0      	cmp	r0, r6
   b5466:	d005      	beq.n	b5474 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x5c>
			Log.info("Magic Number mismatch - ignoring message");
   b5468:	4931      	ldr	r1, [pc, #196]	; (b5530 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>)
		else {Log.info("Invaled LoRA message flag"); return false;}
   b546a:	4832      	ldr	r0, [pc, #200]	; (b5534 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x11c>)
   b546c:	f7fe fefa 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5470:	4620      	mov	r0, r4
   b5472:	e04d      	b.n	b5510 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf8>
		lora_state = (LoRA_State)messageFlag;
   b5474:	4e30      	ldr	r6, [pc, #192]	; (b5538 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x120>)
   b5476:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b547a:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b547e:	482f      	ldr	r0, [pc, #188]	; (b553c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x124>)
		lora_state = (LoRA_State)messageFlag;
   b5480:	7033      	strb	r3, [r6, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5482:	9205      	str	r2, [sp, #20]
   b5484:	f001 ffab 	bl	b73de <_ZN15RHGenericDriver8lastRssiEv>
   b5488:	492d      	ldr	r1, [pc, #180]	; (b5540 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x128>)
   b548a:	9a05      	ldr	r2, [sp, #20]
   b548c:	4603      	mov	r3, r0
   b548e:	7830      	ldrb	r0, [r6, #0]
   b5490:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b5494:	9100      	str	r1, [sp, #0]
   b5496:	4827      	ldr	r0, [pc, #156]	; (b5534 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x11c>)
   b5498:	492a      	ldr	r1, [pc, #168]	; (b5544 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x12c>)
   b549a:	f7fe fee3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[2] << 24) | (buf[3] << 16) | (buf[4] << 8) | buf[5]));  // Set time based on response from gateway
   b549e:	f8d5 0002 	ldr.w	r0, [r5, #2]
   b54a2:	ba00      	rev	r0, r0
   b54a4:	17c1      	asrs	r1, r0, #31
   b54a6:	f006 f8c4 	bl	bb632 <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[6] << 8 | buf[7]));			// Frequency of reporting set by Gateway
   b54aa:	f000 fae9 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b54ae:	88e9      	ldrh	r1, [r5, #6]
   b54b0:	ba49      	rev16	r1, r1
   b54b2:	b289      	uxth	r1, r1
   b54b4:	f000 fd33 	bl	b5f1e <_ZN13sysStatusData20set_frequencyMinutesEt>
		sysStatus.set_alertCodeNode(buf[8]);
   b54b8:	f000 fae2 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b54bc:	7a29      	ldrb	r1, [r5, #8]
   b54be:	f000 fc50 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b54c2:	f000 fadd 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b54c6:	4605      	mov	r5, r0
   b54c8:	f006 f9cb 	bl	bb862 <_ZN9TimeClass3nowEv>
   b54cc:	4602      	mov	r2, r0
   b54ce:	17c3      	asrs	r3, r0, #31
   b54d0:	4628      	mov	r0, r5
   b54d2:	f000 fd75 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b54d6:	f006 f9c4 	bl	bb862 <_ZN9TimeClass3nowEv>
   b54da:	17c3      	asrs	r3, r0, #31
   b54dc:	4602      	mov	r2, r0
   b54de:	a808      	add	r0, sp, #32
   b54e0:	f006 f8ba 	bl	bb658 <_ZN9TimeClass7timeStrEx>
   b54e4:	9a08      	ldr	r2, [sp, #32]
   b54e6:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b54e8:	f000 faca 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b54ec:	f000 fc74 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b54f0:	9a05      	ldr	r2, [sp, #20]
   b54f2:	4915      	ldr	r1, [pc, #84]	; (b5548 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x130>)
   b54f4:	4603      	mov	r3, r0
   b54f6:	480f      	ldr	r0, [pc, #60]	; (b5534 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x11c>)
   b54f8:	f7fe feb4 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b54fc:	a808      	add	r0, sp, #32
   b54fe:	f005 fe9f 	bl	bb240 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5502:	7833      	ldrb	r3, [r6, #0]
   b5504:	2b04      	cmp	r3, #4
   b5506:	d105      	bne.n	b5514 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xfc>
   b5508:	f7ff fd76 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b550c:	f7ff fe52 	bl	b51b4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
}
   b5510:	b00c      	add	sp, #48	; 0x30
   b5512:	bd70      	pop	{r4, r5, r6, pc}
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b5514:	2b02      	cmp	r3, #2
   b5516:	d104      	bne.n	b5522 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10a>
   b5518:	f7ff fd6e 	bl	b4ff8 <_ZN14LoRA_Functions8instanceEv>
   b551c:	f7ff ff18 	bl	b5350 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b5520:	e7f6      	b.n	b5510 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf8>
		else {Log.info("Invaled LoRA message flag"); return false;}
   b5522:	490a      	ldr	r1, [pc, #40]	; (b554c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
   b5524:	e7a1      	b.n	b546a <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x52>
   b5526:	bf00      	nop
   b5528:	2003dfd4 	.word	0x2003dfd4
   b552c:	2003e200 	.word	0x2003e200
   b5530:	000be4aa 	.word	0x000be4aa
   b5534:	2003e654 	.word	0x2003e654
   b5538:	2003dfcf 	.word	0x2003dfcf
   b553c:	2003e0d0 	.word	0x2003e0d0
   b5540:	2003de50 	.word	0x2003de50
   b5544:	000be4d3 	.word	0x000be4d3
   b5548:	000be505 	.word	0x000be505
   b554c:	000be538 	.word	0x000be538

000b5550 <_ZN14LoRA_Functions14stringCheckSumE6String>:


int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b5550:	b570      	push	{r4, r5, r6, lr}
    int result = 0;
    for(unsigned int i = 0; i < str.length(); i++){
   b5552:	2500      	movs	r5, #0
int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b5554:	460e      	mov	r6, r1
    int result = 0;
   b5556:	462c      	mov	r4, r5
    for(unsigned int i = 0; i < str.length(); i++){
   b5558:	68b3      	ldr	r3, [r6, #8]
   b555a:	429d      	cmp	r5, r3
   b555c:	d218      	bcs.n	b5590 <_ZN14LoRA_Functions14stringCheckSumE6String+0x40>
      int asciiCode = (int)str[i];
   b555e:	4629      	mov	r1, r5
   b5560:	4630      	mov	r0, r6
   b5562:	f005 ff0f 	bl	bb384 <_ZN6StringixEj>
   b5566:	7803      	ldrb	r3, [r0, #0]

      if (asciiCode >=48 && asciiCode <58) {              // 0-9
   b5568:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b556c:	2a09      	cmp	r2, #9
   b556e:	d802      	bhi.n	b5576 <_ZN14LoRA_Functions14stringCheckSumE6String+0x26>
        result += asciiCode - 48;
   b5570:	4414      	add	r4, r2
    for(unsigned int i = 0; i < str.length(); i++){
   b5572:	3501      	adds	r5, #1
   b5574:	e7f0      	b.n	b5558 <_ZN14LoRA_Functions14stringCheckSumE6String+0x8>
      } 
      else if (asciiCode >=65 && asciiCode < 71) {        // A-F
   b5576:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   b557a:	2a05      	cmp	r2, #5
   b557c:	d802      	bhi.n	b5584 <_ZN14LoRA_Functions14stringCheckSumE6String+0x34>
        result += 10 + asciiCode -65;
   b557e:	3b37      	subs	r3, #55	; 0x37
      }
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
        result += 10 + asciiCode -97;
   b5580:	441c      	add	r4, r3
   b5582:	e7f6      	b.n	b5572 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
   b5584:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   b5588:	2a05      	cmp	r2, #5
   b558a:	d8f2      	bhi.n	b5572 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
        result += 10 + asciiCode -97;
   b558c:	3b57      	subs	r3, #87	; 0x57
   b558e:	e7f7      	b.n	b5580 <_ZN14LoRA_Functions14stringCheckSumE6String+0x30>
      }
    }
    return result;
}
   b5590:	4620      	mov	r0, r4
   b5592:	bd70      	pop	{r4, r5, r6, pc}

000b5594 <_ZN14LoRA_Functions21composeDataReportNodeEv>:
bool LoRA_Functions::composeDataReportNode() {
   b5594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5598:	b089      	sub	sp, #36	; 0x24
   b559a:	4604      	mov	r4, r0
	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b559c:	f000 fafc 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b55a0:	f000 fbb0 	bl	b5d04 <_ZNK17currentStatusData16get_successCountEv>
   b55a4:	4606      	mov	r6, r0
   b55a6:	f000 faf7 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b55aa:	f000 fba6 	bl	b5cfa <_ZNK17currentStatusData16get_messageCountEv>
   b55ae:	4605      	mov	r5, r0
   b55b0:	4630      	mov	r0, r6
   b55b2:	f007 fe31 	bl	bd218 <__aeabi_i2d>
   b55b6:	4606      	mov	r6, r0
   b55b8:	4628      	mov	r0, r5
   b55ba:	460f      	mov	r7, r1
   b55bc:	f007 fe2c 	bl	bd218 <__aeabi_i2d>
   b55c0:	4602      	mov	r2, r0
   b55c2:	460b      	mov	r3, r1
   b55c4:	4630      	mov	r0, r6
   b55c6:	4639      	mov	r1, r7
   b55c8:	f007 ffba 	bl	bd540 <__aeabi_ddiv>
   b55cc:	2200      	movs	r2, #0
   b55ce:	4b85      	ldr	r3, [pc, #532]	; (b57e4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x250>)
   b55d0:	f007 fe8c 	bl	bd2ec <__aeabi_dmul>
   b55d4:	f008 f982 	bl	bd8dc <__aeabi_d2f>
	digitalWrite(BLUE_LED,HIGH);
   b55d8:	4b83      	ldr	r3, [pc, #524]	; (b57e8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x254>)
   b55da:	881f      	ldrh	r7, [r3, #0]
   b55dc:	2101      	movs	r1, #1
	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b55de:	4605      	mov	r5, r0
	digitalWrite(BLUE_LED,HIGH);
   b55e0:	4638      	mov	r0, r7
   b55e2:	f006 fb36 	bl	bbc52 <digitalWrite>
	if (current.get_messageCount() == 255) {		// This should not happen in a day unless we pick a very small reporting freq
   b55e6:	f000 fad7 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b55ea:	f000 fb86 	bl	b5cfa <_ZNK17currentStatusData16get_messageCountEv>
   b55ee:	28ff      	cmp	r0, #255	; 0xff
   b55f0:	f040 80b5 	bne.w	b575e <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ca>
		current.set_messageCount(0);				// Prevent divide by zero
   b55f4:	f000 fad0 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b55f8:	2100      	movs	r1, #0
   b55fa:	f000 fbca 	bl	b5d92 <_ZN17currentStatusData16set_messageCountEh>
		current.set_successCount(0);				// Zero as well
   b55fe:	f000 facb 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5602:	2100      	movs	r1, #0
   b5604:	f000 fbcb 	bl	b5d9e <_ZN17currentStatusData16set_successCountEh>
	Log.info("Sending data report number %d",current.get_messageCount());
   b5608:	f000 fac6 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b560c:	f000 fb75 	bl	b5cfa <_ZNK17currentStatusData16get_messageCountEv>
   b5610:	4976      	ldr	r1, [pc, #472]	; (b57ec <_ZN14LoRA_Functions21composeDataReportNodeEv+0x258>)
   b5612:	4602      	mov	r2, r0
   b5614:	4876      	ldr	r0, [pc, #472]	; (b57f0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x25c>)
   b5616:	f7fe fe25 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b561a:	a804      	add	r0, sp, #16
   b561c:	f003 fcb6 	bl	b8f8c <spark_deviceID>
	int deviceIDCheckSum = stringCheckSum(System.deviceID());
   b5620:	a904      	add	r1, sp, #16
   b5622:	4620      	mov	r0, r4
   b5624:	f7ff ff94 	bl	b5550 <_ZN14LoRA_Functions14stringCheckSumE6String>
   b5628:	4606      	mov	r6, r0
   b562a:	a804      	add	r0, sp, #16
   b562c:	f005 fe08 	bl	bb240 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());
   b5630:	f000 fa26 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5634:	f000 fbcb 	bl	b5dce <_ZNK13sysStatusData15get_magicNumberEv>
   b5638:	4c6e      	ldr	r4, [pc, #440]	; (b57f4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x260>)
   b563a:	0a00      	lsrs	r0, r0, #8
   b563c:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b563e:	f000 fa1f 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5642:	f000 fbc4 	bl	b5dce <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = highByte(deviceIDCheckSum);
   b5646:	1233      	asrs	r3, r6, #8
   b5648:	70a3      	strb	r3, [r4, #2]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b564a:	7060      	strb	r0, [r4, #1]
	buf[3] = lowByte(deviceIDCheckSum);
   b564c:	70e6      	strb	r6, [r4, #3]
	buf[4] = highByte(current.get_hourlyCount());
   b564e:	f000 faa3 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5652:	f000 fc0d 	bl	b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5656:	0a00      	lsrs	r0, r0, #8
   b5658:	7120      	strb	r0, [r4, #4]
	buf[5] = lowByte(current.get_hourlyCount()); 
   b565a:	f000 fa9d 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b565e:	f000 fc07 	bl	b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5662:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(current.get_dailyCount());
   b5664:	f000 fa98 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5668:	f000 fc36 	bl	b5ed8 <_ZNK17currentStatusData14get_dailyCountEv>
   b566c:	0a00      	lsrs	r0, r0, #8
   b566e:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(current.get_dailyCount()); 
   b5670:	f000 fa92 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5674:	f000 fc30 	bl	b5ed8 <_ZNK17currentStatusData14get_dailyCountEv>
   b5678:	71e0      	strb	r0, [r4, #7]
	buf[8] = sysStatus.get_sensorType();
   b567a:	f000 fa01 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b567e:	f000 fb2d 	bl	b5cdc <_ZNK13sysStatusData14get_sensorTypeEv>
   b5682:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_internalTempC();
   b5684:	f000 fa88 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5688:	f000 fb2d 	bl	b5ce6 <_ZNK17currentStatusData17get_internalTempCEv>
   b568c:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_stateOfCharge();
   b568e:	f000 fa83 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5692:	f000 fac5 	bl	b5c20 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5696:	ec51 0b10 	vmov	r0, r1, d0
   b569a:	f008 f8ff 	bl	bd89c <__aeabi_d2uiz>
   b569e:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_batteryState();	
   b56a0:	f000 fa7a 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b56a4:	f000 fb24 	bl	b5cf0 <_ZNK17currentStatusData16get_batteryStateEv>
   b56a8:	72e0      	strb	r0, [r4, #11]
	buf[12] = sysStatus.get_resetCount();
   b56aa:	f000 f9e9 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b56ae:	f000 fb0b 	bl	b5cc8 <_ZNK13sysStatusData14get_resetCountEv>
   b56b2:	7320      	strb	r0, [r4, #12]
	buf[13] = current.get_messageCount();
   b56b4:	f000 fa70 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b56b8:	f000 fb1f 	bl	b5cfa <_ZNK17currentStatusData16get_messageCountEv>
   b56bc:	7360      	strb	r0, [r4, #13]
	buf[14] = current.get_successCount();
   b56be:	f000 fa6b 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b56c2:	f000 fb1f 	bl	b5d04 <_ZNK17currentStatusData16get_successCountEv>
	unsigned char result = manager.sendtoWait(buf, 15, GATEWAY_ADDRESS, DATA_RPT);
   b56c6:	2303      	movs	r3, #3
	buf[14] = current.get_successCount();
   b56c8:	73a0      	strb	r0, [r4, #14]
	unsigned char result = manager.sendtoWait(buf, 15, GATEWAY_ADDRESS, DATA_RPT);
   b56ca:	4621      	mov	r1, r4
   b56cc:	9300      	str	r3, [sp, #0]
   b56ce:	484a      	ldr	r0, [pc, #296]	; (b57f8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x264>)
   b56d0:	2300      	movs	r3, #0
   b56d2:	220f      	movs	r2, #15
   b56d4:	f002 f89e 	bl	b7814 <_ZN6RHMesh10sendtoWaitEPhhhh>
	if ( result == RH_ROUTER_ERROR_NONE) {
   b56d8:	4604      	mov	r4, r0
   b56da:	2800      	cmp	r0, #0
   b56dc:	d14c      	bne.n	b5778 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1e4>
		current.set_successCount(current.get_successCount()+1);
   b56de:	f000 fa5b 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b56e2:	4605      	mov	r5, r0
   b56e4:	f000 fa58 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b56e8:	f000 fb0c 	bl	b5d04 <_ZNK17currentStatusData16get_successCountEv>
   b56ec:	3001      	adds	r0, #1
   b56ee:	b2c1      	uxtb	r1, r0
   b56f0:	4628      	mov	r0, r5
   b56f2:	f000 fb54 	bl	b5d9e <_ZN17currentStatusData16set_successCountEh>
		percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b56f6:	f000 fa4f 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b56fa:	f000 fb03 	bl	b5d04 <_ZNK17currentStatusData16get_successCountEv>
   b56fe:	4680      	mov	r8, r0
   b5700:	f000 fa4a 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5704:	f000 faf9 	bl	b5cfa <_ZNK17currentStatusData16get_messageCountEv>
   b5708:	4606      	mov	r6, r0
		Log.info("Node %d data report delivered - success rate %4.2f",sysStatus.get_nodeNumber(),percentSuccess);
   b570a:	f000 f9b9 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b570e:	f000 fad6 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5712:	4605      	mov	r5, r0
		percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5714:	4640      	mov	r0, r8
   b5716:	f007 fd7f 	bl	bd218 <__aeabi_i2d>
   b571a:	4680      	mov	r8, r0
   b571c:	4630      	mov	r0, r6
   b571e:	4689      	mov	r9, r1
   b5720:	f007 fd7a 	bl	bd218 <__aeabi_i2d>
   b5724:	4602      	mov	r2, r0
   b5726:	460b      	mov	r3, r1
   b5728:	4640      	mov	r0, r8
   b572a:	4649      	mov	r1, r9
   b572c:	f007 ff08 	bl	bd540 <__aeabi_ddiv>
   b5730:	4b2c      	ldr	r3, [pc, #176]	; (b57e4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x250>)
   b5732:	2200      	movs	r2, #0
   b5734:	f007 fdda 	bl	bd2ec <__aeabi_dmul>
   b5738:	f008 f8d0 	bl	bd8dc <__aeabi_d2f>
		Log.info("Node %d data report delivered - success rate %4.2f",sysStatus.get_nodeNumber(),percentSuccess);
   b573c:	f007 fd7e 	bl	bd23c <__aeabi_f2d>
   b5740:	462a      	mov	r2, r5
   b5742:	e9cd 0100 	strd	r0, r1, [sp]
   b5746:	492d      	ldr	r1, [pc, #180]	; (b57fc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x268>)
   b5748:	4829      	ldr	r0, [pc, #164]	; (b57f0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x25c>)
   b574a:	f7fe fd8b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b574e:	4638      	mov	r0, r7
   b5750:	4621      	mov	r1, r4
   b5752:	f006 fa7e 	bl	bbc52 <digitalWrite>
		return true;
   b5756:	2001      	movs	r0, #1
}
   b5758:	b009      	add	sp, #36	; 0x24
   b575a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else current.set_messageCount(current.get_messageCount()+1);
   b575e:	f000 fa1b 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5762:	4606      	mov	r6, r0
   b5764:	f000 fa18 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5768:	f000 fac7 	bl	b5cfa <_ZNK17currentStatusData16get_messageCountEv>
   b576c:	3001      	adds	r0, #1
   b576e:	b2c1      	uxtb	r1, r0
   b5770:	4630      	mov	r0, r6
   b5772:	f000 fb0e 	bl	b5d92 <_ZN17currentStatusData16set_messageCountEh>
   b5776:	e747      	b.n	b5608 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x74>
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b5778:	2802      	cmp	r0, #2
   b577a:	d115      	bne.n	b57a8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x214>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, percentSuccess);
   b577c:	f000 f980 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5780:	f000 fa9d 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5784:	9003      	str	r0, [sp, #12]
   b5786:	4628      	mov	r0, r5
   b5788:	f007 fd58 	bl	bd23c <__aeabi_f2d>
   b578c:	9a03      	ldr	r2, [sp, #12]
   b578e:	e9cd 0100 	strd	r0, r1, [sp]
   b5792:	491b      	ldr	r1, [pc, #108]	; (b5800 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x26c>)
   b5794:	2300      	movs	r3, #0
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5796:	4816      	ldr	r0, [pc, #88]	; (b57f0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x25c>)
   b5798:	f7fe fd64 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b579c:	4638      	mov	r0, r7
   b579e:	2100      	movs	r1, #0
   b57a0:	f006 fa57 	bl	bbc52 <digitalWrite>
	return false;
   b57a4:	2000      	movs	r0, #0
   b57a6:	e7d7      	b.n	b5758 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c4>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b57a8:	2805      	cmp	r0, #5
   b57aa:	d10d      	bne.n	b57c8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x234>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b57ac:	f000 f968 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b57b0:	f000 fa85 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b57b4:	9003      	str	r0, [sp, #12]
   b57b6:	4628      	mov	r0, r5
   b57b8:	f007 fd40 	bl	bd23c <__aeabi_f2d>
   b57bc:	9a03      	ldr	r2, [sp, #12]
   b57be:	e9cd 0100 	strd	r0, r1, [sp]
   b57c2:	2300      	movs	r3, #0
   b57c4:	490f      	ldr	r1, [pc, #60]	; (b5804 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x270>)
   b57c6:	e7e6      	b.n	b5796 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x202>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b57c8:	f000 f95a 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b57cc:	f000 fa77 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b57d0:	9003      	str	r0, [sp, #12]
   b57d2:	4628      	mov	r0, r5
   b57d4:	f007 fd32 	bl	bd23c <__aeabi_f2d>
   b57d8:	9a03      	ldr	r2, [sp, #12]
   b57da:	e9cd 0100 	strd	r0, r1, [sp]
   b57de:	2300      	movs	r3, #0
   b57e0:	4909      	ldr	r1, [pc, #36]	; (b5808 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x274>)
   b57e2:	e7d8      	b.n	b5796 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x202>
   b57e4:	40590000 	.word	0x40590000
   b57e8:	000be98c 	.word	0x000be98c
   b57ec:	000be552 	.word	0x000be552
   b57f0:	2003e654 	.word	0x2003e654
   b57f4:	2003dfd4 	.word	0x2003dfd4
   b57f8:	2003e200 	.word	0x2003e200
   b57fc:	000be570 	.word	0x000be570
   b5800:	000be5a3 	.word	0x000be5a3
   b5804:	000be5f3 	.word	0x000be5f3
   b5808:	000be64c 	.word	0x000be64c

000b580c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:
bool LoRA_Functions::composeJoinRequesttNode() {
   b580c:	b5f0      	push	{r4, r5, r6, r7, lr}
	digitalWrite(BLUE_LED,HIGH);
   b580e:	4b38      	ldr	r3, [pc, #224]	; (b58f0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe4>)
   b5810:	881e      	ldrh	r6, [r3, #0]
bool LoRA_Functions::composeJoinRequesttNode() {
   b5812:	b08f      	sub	sp, #60	; 0x3c
   b5814:	4604      	mov	r4, r0
	digitalWrite(BLUE_LED,HIGH);
   b5816:	2101      	movs	r1, #1
   b5818:	4630      	mov	r0, r6
   b581a:	f006 fa1a 	bl	bbc52 <digitalWrite>
   b581e:	a803      	add	r0, sp, #12
   b5820:	f003 fbb4 	bl	b8f8c <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5824:	2300      	movs	r3, #0
   b5826:	2219      	movs	r2, #25
   b5828:	a907      	add	r1, sp, #28
   b582a:	a803      	add	r0, sp, #12
   b582c:	f005 fdb8 	bl	bb3a0 <_ZNK6String8getBytesEPhjj>
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long
   b5830:	a803      	add	r0, sp, #12
   b5832:	f005 fd05 	bl	bb240 <_ZN6StringD1Ev>
   b5836:	a803      	add	r0, sp, #12
   b5838:	f003 fba8 	bl	b8f8c <spark_deviceID>
	int deviceIDCheckSum = stringCheckSum(System.deviceID());
   b583c:	a903      	add	r1, sp, #12
   b583e:	4620      	mov	r0, r4
   b5840:	f7ff fe86 	bl	b5550 <_ZN14LoRA_Functions14stringCheckSumE6String>
   b5844:	4605      	mov	r5, r0
   b5846:	a803      	add	r0, sp, #12
   b5848:	f005 fcfa 	bl	bb240 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b584c:	f000 f918 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5850:	f000 fabd 	bl	b5dce <_ZNK13sysStatusData15get_magicNumberEv>
   b5854:	4c27      	ldr	r4, [pc, #156]	; (b58f4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe8>)
   b5856:	0a00      	lsrs	r0, r0, #8
   b5858:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b585a:	f000 f911 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b585e:	f000 fab6 	bl	b5dce <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = highByte(deviceIDCheckSum);
   b5862:	122b      	asrs	r3, r5, #8
   b5864:	70a3      	strb	r3, [r4, #2]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5866:	7060      	strb	r0, [r4, #1]
	buf[3] = lowByte(deviceIDCheckSum);
   b5868:	70e5      	strb	r5, [r4, #3]
		buf[i+4] = deviceID[i];
   b586a:	ab07      	add	r3, sp, #28
   b586c:	1d22      	adds	r2, r4, #4
   b586e:	af0d      	add	r7, sp, #52	; 0x34
   b5870:	461d      	mov	r5, r3
   b5872:	cd03      	ldmia	r5!, {r0, r1}
   b5874:	42bd      	cmp	r5, r7
   b5876:	6010      	str	r0, [r2, #0]
   b5878:	6051      	str	r1, [r2, #4]
   b587a:	462b      	mov	r3, r5
   b587c:	f102 0208 	add.w	r2, r2, #8
   b5880:	d1f6      	bne.n	b5870 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x64>
   b5882:	782b      	ldrb	r3, [r5, #0]
   b5884:	7013      	strb	r3, [r2, #0]
	buf[29] = sysStatus.get_sensorType();
   b5886:	f000 f8fb 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b588a:	f000 fa27 	bl	b5cdc <_ZNK13sysStatusData14get_sensorTypeEv>
   b588e:	7760      	strb	r0, [r4, #29]
	if (sysStatus.get_nodeNumber() > 10) Log.info("Sending join request for unconfigured node");
   b5890:	f000 f8f6 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5894:	f000 fa13 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5898:	280a      	cmp	r0, #10
   b589a:	d918      	bls.n	b58ce <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc2>
   b589c:	4916      	ldr	r1, [pc, #88]	; (b58f8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xec>)
	else Log.info("Sending join request to clear alert code");
   b589e:	4817      	ldr	r0, [pc, #92]	; (b58fc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf0>)
	if (manager.sendtoWait(buf, 30, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b58a0:	2401      	movs	r4, #1
	else Log.info("Sending join request to clear alert code");
   b58a2:	f7fe fcdf 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 30, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b58a6:	4913      	ldr	r1, [pc, #76]	; (b58f4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe8>)
   b58a8:	4815      	ldr	r0, [pc, #84]	; (b5900 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf4>)
   b58aa:	9400      	str	r4, [sp, #0]
   b58ac:	2300      	movs	r3, #0
   b58ae:	221e      	movs	r2, #30
   b58b0:	f001 ffb0 	bl	b7814 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b58b4:	4605      	mov	r5, r0
   b58b6:	b988      	cbnz	r0, b58dc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>
		Log.info("Join request sent to gateway successfully");
   b58b8:	4912      	ldr	r1, [pc, #72]	; (b5904 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf8>)
   b58ba:	4810      	ldr	r0, [pc, #64]	; (b58fc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf0>)
   b58bc:	f7fe fcd2 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b58c0:	4630      	mov	r0, r6
   b58c2:	4629      	mov	r1, r5
   b58c4:	f006 f9c5 	bl	bbc52 <digitalWrite>
		return true;
   b58c8:	4620      	mov	r0, r4
}
   b58ca:	b00f      	add	sp, #60	; 0x3c
   b58cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (!Time.isValid()) Log.info("Sending join request as Time is not valid");
   b58ce:	f005 ffab 	bl	bb828 <_ZN9TimeClass7isValidEv>
   b58d2:	b908      	cbnz	r0, b58d8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>
   b58d4:	490c      	ldr	r1, [pc, #48]	; (b5908 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xfc>)
   b58d6:	e7e2      	b.n	b589e <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x92>
	else Log.info("Sending join request to clear alert code");
   b58d8:	490c      	ldr	r1, [pc, #48]	; (b590c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x100>)
   b58da:	e7e0      	b.n	b589e <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x92>
		Log.info("Join request to Gateway failed");
   b58dc:	490c      	ldr	r1, [pc, #48]	; (b5910 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x104>)
   b58de:	4807      	ldr	r0, [pc, #28]	; (b58fc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf0>)
   b58e0:	f7fe fcc0 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b58e4:	4630      	mov	r0, r6
   b58e6:	2100      	movs	r1, #0
   b58e8:	f006 f9b3 	bl	bbc52 <digitalWrite>
		return false;
   b58ec:	2000      	movs	r0, #0
   b58ee:	e7ec      	b.n	b58ca <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbe>
   b58f0:	000be98c 	.word	0x000be98c
   b58f4:	2003dfd4 	.word	0x2003dfd4
   b58f8:	000be69c 	.word	0x000be69c
   b58fc:	2003e654 	.word	0x2003e654
   b5900:	2003e200 	.word	0x2003e200
   b5904:	000be71a 	.word	0x000be71a
   b5908:	000be6c7 	.word	0x000be6c7
   b590c:	000be6f1 	.word	0x000be6f1
   b5910:	000be744 	.word	0x000be744

000b5914 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b5914:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b5916:	4a08      	ldr	r2, [pc, #32]	; (b5938 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b5918:	4c08      	ldr	r4, [pc, #32]	; (b593c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b591a:	4909      	ldr	r1, [pc, #36]	; (b5940 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b591c:	7812      	ldrb	r2, [r2, #0]
   b591e:	7809      	ldrb	r1, [r1, #0]
   b5920:	4b08      	ldr	r3, [pc, #32]	; (b5944 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b5922:	4620      	mov	r0, r4
   b5924:	f002 fc6c 	bl	b8200 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5928:	4621      	mov	r1, r4
   b592a:	4807      	ldr	r0, [pc, #28]	; (b5948 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5930:	2200      	movs	r2, #0
   b5932:	f001 bf65 	b.w	b7800 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b5936:	bf00      	nop
   b5938:	000be996 	.word	0x000be996
   b593c:	2003e0d0 	.word	0x2003e0d0
   b5940:	000be994 	.word	0x000be994
   b5944:	2003e3ec 	.word	0x2003e3ec
   b5948:	2003e200 	.word	0x2003e200

000b594c <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b594c:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b594e:	4b04      	ldr	r3, [pc, #16]	; (b5960 <_ZN17currentStatusDataD1Ev+0x14>)
   b5950:	6003      	str	r3, [r0, #0]
   b5952:	4604      	mov	r4, r0
            if (handle_) {
   b5954:	6840      	ldr	r0, [r0, #4]
   b5956:	b108      	cbz	r0, b595c <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5958:	f003 f83a 	bl	b89d0 <os_mutex_recursive_destroy>
}
   b595c:	4620      	mov	r0, r4
   b595e:	bd10      	pop	{r4, pc}
   b5960:	000bf060 	.word	0x000bf060

000b5964 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5964:	b510      	push	{r4, lr}
   b5966:	4604      	mov	r4, r0
}
   b5968:	f7ff fff0 	bl	b594c <_ZN17currentStatusDataD1Ev>
   b596c:	4620      	mov	r0, r4
   b596e:	2178      	movs	r1, #120	; 0x78
   b5970:	f7fe fb95 	bl	b409e <_ZdlPvj>
   b5974:	4620      	mov	r0, r4
   b5976:	bd10      	pop	{r4, pc}

000b5978 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5978:	b510      	push	{r4, lr}
   b597a:	4b03      	ldr	r3, [pc, #12]	; (b5988 <_ZN8MB85RC64D1Ev+0x10>)
   b597c:	6003      	str	r3, [r0, #0]
   b597e:	4604      	mov	r4, r0
   b5980:	f001 fb82 	bl	b7088 <_ZN6MB85RCD1Ev>
   b5984:	4620      	mov	r0, r4
   b5986:	bd10      	pop	{r4, pc}
   b5988:	000be8ec 	.word	0x000be8ec

000b598c <_ZN8MB85RC64D0Ev>:
   b598c:	b510      	push	{r4, lr}
   b598e:	4604      	mov	r4, r0
   b5990:	f7ff fff2 	bl	b5978 <_ZN8MB85RC64D1Ev>
   b5994:	4620      	mov	r0, r4
   b5996:	2110      	movs	r1, #16
   b5998:	f7fe fb81 	bl	b409e <_ZdlPvj>
   b599c:	4620      	mov	r0, r4
   b599e:	bd10      	pop	{r4, pc}

000b59a0 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b59a0:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b59a2:	4b04      	ldr	r3, [pc, #16]	; (b59b4 <_ZN13sysStatusDataD1Ev+0x14>)
   b59a4:	6003      	str	r3, [r0, #0]
   b59a6:	4604      	mov	r4, r0
            if (handle_) {
   b59a8:	6840      	ldr	r0, [r0, #4]
   b59aa:	b108      	cbz	r0, b59b0 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b59ac:	f003 f810 	bl	b89d0 <os_mutex_recursive_destroy>
}
   b59b0:	4620      	mov	r0, r4
   b59b2:	bd10      	pop	{r4, pc}
   b59b4:	000bf060 	.word	0x000bf060

000b59b8 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b59b8:	b510      	push	{r4, lr}
   b59ba:	4604      	mov	r4, r0
}
   b59bc:	f7ff fff0 	bl	b59a0 <_ZN13sysStatusDataD1Ev>
   b59c0:	4620      	mov	r0, r4
   b59c2:	2168      	movs	r1, #104	; 0x68
   b59c4:	f7fe fb6b 	bl	b409e <_ZdlPvj>
   b59c8:	4620      	mov	r0, r4
   b59ca:	bd10      	pop	{r4, pc}

000b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b59cc:	b510      	push	{r4, lr}
            if (!handle_) {
   b59ce:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b59d0:	4604      	mov	r4, r0
            if (!handle_) {
   b59d2:	b90b      	cbnz	r3, b59d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b59d4:	f002 fff4 	bl	b89c0 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b59d8:	6820      	ldr	r0, [r4, #0]
        }
   b59da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b59de:	f002 bfff 	b.w	b89e0 <os_mutex_recursive_lock>

000b59e2 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b59e2:	b538      	push	{r3, r4, r5, lr}
   b59e4:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b59e6:	3004      	adds	r0, #4
   b59e8:	f7ff fff0 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b59ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b59ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b59f0:	6803      	ldr	r3, [r0, #0]
   b59f2:	68dd      	ldr	r5, [r3, #12]
   b59f4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b59f8:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b59fa:	6860      	ldr	r0, [r4, #4]
   b59fc:	f002 fff8 	bl	b89f0 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b5a00:	4620      	mov	r0, r4
        } 
   b5a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b5a06:	f002 bebf 	b.w	b8788 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b5a0a <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5a0a:	b538      	push	{r3, r4, r5, lr}
   b5a0c:	4604      	mov	r4, r0
   b5a0e:	3004      	adds	r0, #4
   b5a10:	f7ff ffdc 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5a14:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5a18:	6803      	ldr	r3, [r0, #0]
   b5a1a:	689d      	ldr	r5, [r3, #8]
   b5a1c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5a20:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5a22:	68a2      	ldr	r2, [r4, #8]
   b5a24:	6823      	ldr	r3, [r4, #0]
   b5a26:	88d1      	ldrh	r1, [r2, #6]
   b5a28:	695b      	ldr	r3, [r3, #20]
   b5a2a:	4620      	mov	r0, r4
   b5a2c:	4798      	blx	r3
   b5a2e:	b918      	cbnz	r0, b5a38 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5a30:	6823      	ldr	r3, [r4, #0]
   b5a32:	4620      	mov	r0, r4
   b5a34:	699b      	ldr	r3, [r3, #24]
   b5a36:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5a38:	6860      	ldr	r0, [r4, #4]
   b5a3a:	f002 ffd9 	bl	b89f0 <os_mutex_recursive_unlock>
        }
   b5a3e:	2001      	movs	r0, #1
   b5a40:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5a44 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5a44:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a48:	6081      	str	r1, [r0, #8]
   b5a4a:	490a      	ldr	r1, [pc, #40]	; (b5a74 <_ZN13sysStatusDataC1Ev+0x30>)
   b5a4c:	f04f 0c38 	mov.w	ip, #56	; 0x38
   b5a50:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5a54:	2102      	movs	r1, #2
   b5a56:	8281      	strh	r1, [r0, #20]
   b5a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5a5c:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a5e:	4906      	ldr	r1, [pc, #24]	; (b5a78 <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5a60:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a62:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b5a66:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a68:	6182      	str	r2, [r0, #24]
   b5a6a:	f880 2020 	strb.w	r2, [r0, #32]
   b5a6e:	4a03      	ldr	r2, [pc, #12]	; (b5a7c <_ZN13sysStatusDataC1Ev+0x38>)
   b5a70:	6002      	str	r2, [r0, #0]
};
   b5a72:	4770      	bx	lr
   b5a74:	20a99e75 	.word	0x20a99e75
   b5a78:	2003e3b8 	.word	0x2003e3b8
   b5a7c:	000be908 	.word	0x000be908

000b5a80 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5a80:	b510      	push	{r4, lr}
    if (!_instance) {
   b5a82:	4c06      	ldr	r4, [pc, #24]	; (b5a9c <_ZN13sysStatusData8instanceEv+0x1c>)
   b5a84:	6823      	ldr	r3, [r4, #0]
   b5a86:	b93b      	cbnz	r3, b5a98 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5a88:	2068      	movs	r0, #104	; 0x68
   b5a8a:	f7fe fb04 	bl	b4096 <_Znwj>
   b5a8e:	4603      	mov	r3, r0
   b5a90:	b108      	cbz	r0, b5a96 <_ZN13sysStatusData8instanceEv+0x16>
   b5a92:	f7ff ffd7 	bl	b5a44 <_ZN13sysStatusDataC1Ev>
   b5a96:	6023      	str	r3, [r4, #0]
}
   b5a98:	6820      	ldr	r0, [r4, #0]
   b5a9a:	bd10      	pop	{r4, pc}
   b5a9c:	2003e3b0 	.word	0x2003e3b0

000b5aa0 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5aa0:	b510      	push	{r4, lr}
    fram.begin();
   b5aa2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5aa4:	f001 fb06 	bl	b70b4 <_ZN6MB85RC5beginEv>
    sysStatus
   b5aa8:	f7ff ffea 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b5aac:	2264      	movs	r2, #100	; 0x64
        .load();
   b5aae:	6803      	ldr	r3, [r0, #0]
   b5ab0:	61c2      	str	r2, [r0, #28]
   b5ab2:	685b      	ldr	r3, [r3, #4]
   b5ab4:	4798      	blx	r3
    if (!sysStatus.validate(56)) {                  // 64 is the size of the sysStatus storage object
   b5ab6:	f7ff ffe3 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5aba:	6803      	ldr	r3, [r0, #0]
   b5abc:	2138      	movs	r1, #56	; 0x38
   b5abe:	695b      	ldr	r3, [r3, #20]
   b5ac0:	4798      	blx	r3
   b5ac2:	b950      	cbnz	r0, b5ada <_ZN13sysStatusData5setupEv+0x3a>
        Log.info("sysStatus object not valid - reinitializing");
   b5ac4:	4907      	ldr	r1, [pc, #28]	; (b5ae4 <_ZN13sysStatusData5setupEv+0x44>)
   b5ac6:	4808      	ldr	r0, [pc, #32]	; (b5ae8 <_ZN13sysStatusData5setupEv+0x48>)
   b5ac8:	f7fe fbcc 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        sysStatus.initialize();
   b5acc:	f7ff ffd8 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5ad0:	6803      	ldr	r3, [r0, #0]
}
   b5ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        sysStatus.initialize();
   b5ad6:	699b      	ldr	r3, [r3, #24]
   b5ad8:	4718      	bx	r3
    else Log.info("sysStatus object is valid");
   b5ada:	4904      	ldr	r1, [pc, #16]	; (b5aec <_ZN13sysStatusData5setupEv+0x4c>)
   b5adc:	4802      	ldr	r0, [pc, #8]	; (b5ae8 <_ZN13sysStatusData5setupEv+0x48>)
   b5ade:	f7fe fbc1 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b5ae2:	bd10      	pop	{r4, pc}
   b5ae4:	000be788 	.word	0x000be788
   b5ae8:	2003e654 	.word	0x2003e654
   b5aec:	000be7b4 	.word	0x000be7b4

000b5af0 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5af0:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5af2:	f7ff ffc5 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5af6:	6803      	ldr	r3, [r0, #0]
}
   b5af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5afc:	68db      	ldr	r3, [r3, #12]
   b5afe:	2100      	movs	r1, #0
   b5b00:	4718      	bx	r3

000b5b02 <_ZNK13sysStatusData13get_openHoursEv>:
bool sysStatusData::get_openHours() const {
   b5b02:	b538      	push	{r3, r4, r5, lr}
   b5b04:	4604      	mov	r4, r0
   b5b06:	3004      	adds	r0, #4
   b5b08:	f7ff ff60 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b0c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5b0e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b10:	3b01      	subs	r3, #1
   b5b12:	2b30      	cmp	r3, #48	; 0x30
                    result = *(const T *)p;
   b5b14:	bf86      	itte	hi
   b5b16:	68a3      	ldrhi	r3, [r4, #8]
   b5b18:	f893 5031 	ldrbhi.w	r5, [r3, #49]	; 0x31
            T result = 0;
   b5b1c:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5b1e:	f002 ff67 	bl	b89f0 <os_mutex_recursive_unlock>
}
   b5b22:	4628      	mov	r0, r5
   b5b24:	bd38      	pop	{r3, r4, r5, pc}

000b5b26 <_ZN13sysStatusData13set_openHoursEb>:
void sysStatusData::set_openHours(bool value) {
   b5b26:	b538      	push	{r3, r4, r5, lr}
   b5b28:	4604      	mov	r4, r0
   b5b2a:	3004      	adds	r0, #4
   b5b2c:	460d      	mov	r5, r1
   b5b2e:	f7ff ff4d 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b32:	68e3      	ldr	r3, [r4, #12]
   b5b34:	3b01      	subs	r3, #1
   b5b36:	2b30      	cmp	r3, #48	; 0x30
   b5b38:	d909      	bls.n	b5b4e <_ZN13sysStatusData13set_openHoursEb+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5b3a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5b3c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
   b5b40:	42aa      	cmp	r2, r5
   b5b42:	d004      	beq.n	b5b4e <_ZN13sysStatusData13set_openHoursEb+0x28>
                        *(T *)p = value;
   b5b44:	f883 5031 	strb.w	r5, [r3, #49]	; 0x31
                        updateHash();
   b5b48:	4620      	mov	r0, r4
   b5b4a:	f002 fea9 	bl	b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5b4e:	6860      	ldr	r0, [r4, #4]
}
   b5b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5b54:	f002 bf4c 	b.w	b89f0 <os_mutex_recursive_unlock>

000b5b58 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5b58:	f100 0130 	add.w	r1, r0, #48	; 0x30
        CustomRecursiveMutex() : handle_(nullptr) {
   b5b5c:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b5e:	6081      	str	r1, [r0, #8]
   b5b60:	490a      	ldr	r1, [pc, #40]	; (b5b8c <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5b62:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b64:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b5b68:	6182      	str	r2, [r0, #24]
   b5b6a:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b6e:	4a08      	ldr	r2, [pc, #32]	; (b5b90 <_ZN17currentStatusDataC1Ev+0x38>)
   b5b70:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b72:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b76:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b78:	2102      	movs	r1, #2
   b5b7a:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b7c:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5b82:	4a04      	ldr	r2, [pc, #16]	; (b5b94 <_ZN17currentStatusDataC1Ev+0x3c>)
   b5b84:	61c1      	str	r1, [r0, #28]
   b5b86:	6002      	str	r2, [r0, #0]
};
   b5b88:	4770      	bx	lr
   b5b8a:	bf00      	nop
   b5b8c:	20a99e74 	.word	0x20a99e74
   b5b90:	2003e3b8 	.word	0x2003e3b8
   b5b94:	000be934 	.word	0x000be934

000b5b98 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5b98:	b510      	push	{r4, lr}
    if (!_instance) {
   b5b9a:	4c06      	ldr	r4, [pc, #24]	; (b5bb4 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5b9c:	6823      	ldr	r3, [r4, #0]
   b5b9e:	b93b      	cbnz	r3, b5bb0 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5ba0:	2078      	movs	r0, #120	; 0x78
   b5ba2:	f7fe fa78 	bl	b4096 <_Znwj>
   b5ba6:	4603      	mov	r3, r0
   b5ba8:	b108      	cbz	r0, b5bae <_ZN17currentStatusData8instanceEv+0x16>
   b5baa:	f7ff ffd5 	bl	b5b58 <_ZN17currentStatusDataC1Ev>
   b5bae:	6023      	str	r3, [r4, #0]
}
   b5bb0:	6820      	ldr	r0, [r4, #0]
   b5bb2:	bd10      	pop	{r4, pc}
   b5bb4:	2003e3b4 	.word	0x2003e3b4

000b5bb8 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5bb8:	b510      	push	{r4, lr}
    fram.begin();
   b5bba:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5bbc:	f001 fa7a 	bl	b70b4 <_ZN6MB85RC5beginEv>

    current
   b5bc0:	f7ff ffea 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b5bc4:	22fa      	movs	r2, #250	; 0xfa
    //    .withLogData(true)
        .withSaveDelayMs(250)
        .load();
   b5bc6:	6803      	ldr	r3, [r0, #0]
   b5bc8:	61c2      	str	r2, [r0, #28]
   b5bca:	685b      	ldr	r3, [r3, #4]
   b5bcc:	4798      	blx	r3

    if (!current.validate(72)) {                  // 64 is the size of the sysStatus storage object
   b5bce:	f7ff ffe3 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5bd2:	6803      	ldr	r3, [r0, #0]
   b5bd4:	2148      	movs	r1, #72	; 0x48
   b5bd6:	695b      	ldr	r3, [r3, #20]
   b5bd8:	4798      	blx	r3
   b5bda:	b950      	cbnz	r0, b5bf2 <_ZN17currentStatusData5setupEv+0x3a>
        Log.info("current object not valid - reinitializing");
   b5bdc:	4907      	ldr	r1, [pc, #28]	; (b5bfc <_ZN17currentStatusData5setupEv+0x44>)
   b5bde:	4808      	ldr	r0, [pc, #32]	; (b5c00 <_ZN17currentStatusData5setupEv+0x48>)
   b5be0:	f7fe fb40 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        current.initialize();
   b5be4:	f7ff ffd8 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5be8:	6803      	ldr	r3, [r0, #0]
    }
    else Log.info("current object is valid");
}
   b5bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        current.initialize();
   b5bee:	699b      	ldr	r3, [r3, #24]
   b5bf0:	4718      	bx	r3
    else Log.info("current object is valid");
   b5bf2:	4904      	ldr	r1, [pc, #16]	; (b5c04 <_ZN17currentStatusData5setupEv+0x4c>)
   b5bf4:	4802      	ldr	r0, [pc, #8]	; (b5c00 <_ZN17currentStatusData5setupEv+0x48>)
   b5bf6:	f7fe fb35 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b5bfa:	bd10      	pop	{r4, pc}
   b5bfc:	000be7ce 	.word	0x000be7ce
   b5c00:	2003e654 	.word	0x2003e654
   b5c04:	000be7f8 	.word	0x000be7f8

000b5c08 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5c08:	b510      	push	{r4, lr}
    current.flush(false);
   b5c0a:	f7ff ffc5 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5c0e:	6803      	ldr	r3, [r0, #0]
}
   b5c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b5c14:	68db      	ldr	r3, [r3, #12]
   b5c16:	2100      	movs	r1, #0
   b5c18:	4718      	bx	r3
   b5c1a:	0000      	movs	r0, r0
   b5c1c:	0000      	movs	r0, r0
	...

000b5c20 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5c20:	b510      	push	{r4, lr}
   b5c22:	4604      	mov	r4, r0
   b5c24:	ed2d 8b02 	vpush	{d8}
   b5c28:	3004      	adds	r0, #4
   b5c2a:	f7ff fecf 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c2e:	68e3      	ldr	r3, [r4, #12]
   b5c30:	3b08      	subs	r3, #8
   b5c32:	2b17      	cmp	r3, #23
   b5c34:	d90c      	bls.n	b5c50 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5c36:	68a3      	ldr	r3, [r4, #8]
   b5c38:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5c3c:	6860      	ldr	r0, [r4, #4]
   b5c3e:	f002 fed7 	bl	b89f0 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5c42:	eeb0 0a48 	vmov.f32	s0, s16
   b5c46:	eef0 0a68 	vmov.f32	s1, s17
   b5c4a:	ecbd 8b02 	vpop	{d8}
   b5c4e:	bd10      	pop	{r4, pc}
            T result = 0;
   b5c50:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5c58 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5c54:	e7f2      	b.n	b5c3c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5c56:	bf00      	nop
	...

000b5c60 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c62:	4604      	mov	r4, r0
   b5c64:	3004      	adds	r0, #4
   b5c66:	ec57 6b10 	vmov	r6, r7, d0
   b5c6a:	f7ff feaf 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c6e:	68e3      	ldr	r3, [r4, #12]
   b5c70:	3b08      	subs	r3, #8
   b5c72:	2b17      	cmp	r3, #23
   b5c74:	d90c      	bls.n	b5c90 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5c76:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5c78:	4630      	mov	r0, r6
   b5c7a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5c7e:	4639      	mov	r1, r7
   b5c80:	f007 fd9c 	bl	bd7bc <__aeabi_dcmpeq>
   b5c84:	b920      	cbnz	r0, b5c90 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                        *(T *)p = value;
   b5c86:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        updateHash();
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	f002 fe08 	bl	b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5c90:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5c92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5c96:	f002 beab 	b.w	b89f0 <os_mutex_recursive_unlock>

000b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5c9a:	b538      	push	{r3, r4, r5, lr}
   b5c9c:	4604      	mov	r4, r0
   b5c9e:	3004      	adds	r0, #4
   b5ca0:	460d      	mov	r5, r1
   b5ca2:	f7ff fe93 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ca6:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5ca8:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5caa:	3b01      	subs	r3, #1
   b5cac:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5cae:	bf26      	itte	cs
   b5cb0:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5cb2:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5cb4:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5cb6:	f002 fe9b 	bl	b89f0 <os_mutex_recursive_unlock>
        }
   b5cba:	4628      	mov	r0, r5
   b5cbc:	bd38      	pop	{r3, r4, r5, pc}

000b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5cbe:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5cc0:	2110      	movs	r1, #16
   b5cc2:	f7ff ffea 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cc6:	bd08      	pop	{r3, pc}

000b5cc8 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5cc8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5cca:	2117      	movs	r1, #23
   b5ccc:	f7ff ffe5 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cd0:	bd08      	pop	{r3, pc}

000b5cd2 <_ZNK13sysStatusData17get_alertCodeNodeEv>:
uint8_t sysStatusData::get_alertCodeNode() const {
   b5cd2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeNode));
   b5cd4:	2122      	movs	r1, #34	; 0x22
   b5cd6:	f7ff ffe0 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cda:	bd08      	pop	{r3, pc}

000b5cdc <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5cdc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b5cde:	2130      	movs	r1, #48	; 0x30
   b5ce0:	f7ff ffdb 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ce4:	bd08      	pop	{r3, pc}

000b5ce6 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5ce6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5ce8:	2110      	movs	r1, #16
   b5cea:	f7ff ffd6 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cee:	bd08      	pop	{r3, pc}

000b5cf0 <_ZNK17currentStatusData16get_batteryStateEv>:

uint8_t currentStatusData::get_batteryState() const {
   b5cf0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5cf2:	2120      	movs	r1, #32
   b5cf4:	f7ff ffd1 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cf8:	bd08      	pop	{r3, pc}

000b5cfa <_ZNK17currentStatusData16get_messageCountEv>:

void currentStatusData::set_RSSI(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
}

uint8_t currentStatusData::get_messageCount() const {
   b5cfa:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b5cfc:	2132      	movs	r1, #50	; 0x32
   b5cfe:	f7ff ffcc 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5d02:	bd08      	pop	{r3, pc}

000b5d04 <_ZNK17currentStatusData16get_successCountEv>:

void currentStatusData::set_messageCount(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
}

uint8_t currentStatusData::get_successCount() const {
   b5d04:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b5d06:	2133      	movs	r1, #51	; 0x33
   b5d08:	f7ff ffc7 	bl	b5c9a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5d0c:	bd08      	pop	{r3, pc}

000b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5d0e:	b570      	push	{r4, r5, r6, lr}
   b5d10:	4604      	mov	r4, r0
   b5d12:	3004      	adds	r0, #4
   b5d14:	460d      	mov	r5, r1
   b5d16:	4616      	mov	r6, r2
   b5d18:	f7ff fe58 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d1c:	68e3      	ldr	r3, [r4, #12]
   b5d1e:	3b01      	subs	r3, #1
   b5d20:	42ab      	cmp	r3, r5
   b5d22:	d307      	bcc.n	b5d34 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5d24:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5d26:	5d5a      	ldrb	r2, [r3, r5]
   b5d28:	42b2      	cmp	r2, r6
   b5d2a:	d003      	beq.n	b5d34 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b5d2c:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b5d2e:	4620      	mov	r0, r4
   b5d30:	f002 fdb6 	bl	b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5d34:	6860      	ldr	r0, [r4, #4]
        }
   b5d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5d3a:	f002 be59 	b.w	b89f0 <os_mutex_recursive_unlock>

000b5d3e <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5d3e:	b508      	push	{r3, lr}
   b5d40:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5d42:	2110      	movs	r1, #16
   b5d44:	f7ff ffe3 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d48:	bd08      	pop	{r3, pc}

000b5d4a <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5d4a:	b508      	push	{r3, lr}
   b5d4c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b5d4e:	2112      	movs	r1, #18
   b5d50:	f7ff ffdd 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d54:	bd08      	pop	{r3, pc}

000b5d56 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5d56:	b508      	push	{r3, lr}
   b5d58:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5d5a:	2117      	movs	r1, #23
   b5d5c:	f7ff ffd7 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d60:	bd08      	pop	{r3, pc}

000b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>:
void sysStatusData::set_alertCodeNode(uint8_t value) {
   b5d62:	b508      	push	{r3, lr}
   b5d64:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeNode), value);
   b5d66:	2122      	movs	r1, #34	; 0x22
   b5d68:	f7ff ffd1 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d6c:	bd08      	pop	{r3, pc}

000b5d6e <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b5d6e:	b508      	push	{r3, lr}
   b5d70:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b5d72:	2130      	movs	r1, #48	; 0x30
   b5d74:	f7ff ffcb 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d78:	bd08      	pop	{r3, pc}

000b5d7a <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5d7a:	b508      	push	{r3, lr}
   b5d7c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5d7e:	2110      	movs	r1, #16
   b5d80:	f7ff ffc5 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d84:	bd08      	pop	{r3, pc}

000b5d86 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5d86:	b508      	push	{r3, lr}
   b5d88:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5d8a:	2120      	movs	r1, #32
   b5d8c:	f7ff ffbf 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d90:	bd08      	pop	{r3, pc}

000b5d92 <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b5d92:	b508      	push	{r3, lr}
   b5d94:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b5d96:	2132      	movs	r1, #50	; 0x32
   b5d98:	f7ff ffb9 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d9c:	bd08      	pop	{r3, pc}

000b5d9e <_ZN17currentStatusData16set_successCountEh>:

void currentStatusData::set_successCount(uint8_t value) {
   b5d9e:	b508      	push	{r3, lr}
   b5da0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b5da2:	2133      	movs	r1, #51	; 0x33
   b5da4:	f7ff ffb3 	bl	b5d0e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5da8:	bd08      	pop	{r3, pc}

000b5daa <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5daa:	b538      	push	{r3, r4, r5, lr}
   b5dac:	4604      	mov	r4, r0
   b5dae:	3004      	adds	r0, #4
   b5db0:	460d      	mov	r5, r1
   b5db2:	f7ff fe0b 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5db6:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5db8:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5dba:	3b02      	subs	r3, #2
   b5dbc:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5dbe:	bf26      	itte	cs
   b5dc0:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5dc2:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5dc4:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5dc6:	f002 fe13 	bl	b89f0 <os_mutex_recursive_unlock>
        }
   b5dca:	4628      	mov	r0, r5
   b5dcc:	bd38      	pop	{r3, r4, r5, pc}

000b5dce <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5dce:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5dd0:	2114      	movs	r1, #20
   b5dd2:	f7ff ffea 	bl	b5daa <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5dd6:	bd08      	pop	{r3, pc}

000b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5dd8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5dda:	2120      	movs	r1, #32
   b5ddc:	f7ff ffe5 	bl	b5daa <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5de0:	bd08      	pop	{r3, pc}
	...

000b5de4 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b5de4:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5de6:	f002 fd67 	bl	b88b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b5dea:	4604      	mov	r4, r0
   b5dec:	b170      	cbz	r0, b5e0c <_ZN13sysStatusData8validateEj+0x28>
        if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b5dee:	f7ff fe47 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5df2:	f7ff fff1 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5df6:	b958      	cbnz	r0, b5e10 <_ZN13sysStatusData8validateEj+0x2c>
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencyMinutes());
   b5df8:	f7ff fe42 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5dfc:	f7ff ffec 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5e00:	4915      	ldr	r1, [pc, #84]	; (b5e58 <_ZN13sysStatusData8validateEj+0x74>)
   b5e02:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b5e04:	4815      	ldr	r0, [pc, #84]	; (b5e5c <_ZN13sysStatusData8validateEj+0x78>)
   b5e06:	f7fe fa2d 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b5e0a:	2400      	movs	r4, #0
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b5e0c:	4a14      	ldr	r2, [pc, #80]	; (b5e60 <_ZN13sysStatusData8validateEj+0x7c>)
   b5e0e:	e018      	b.n	b5e42 <_ZN13sysStatusData8validateEj+0x5e>
        if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b5e10:	f7ff fe36 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5e14:	f7ff ffe0 	bl	b5dd8 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5e18:	283c      	cmp	r0, #60	; 0x3c
   b5e1a:	d8ed      	bhi.n	b5df8 <_ZN13sysStatusData8validateEj+0x14>
        else if (sysStatus.get_nodeNumber() < 1 || sysStatus.get_nodeNumber() > 11) {
   b5e1c:	f7ff fe30 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5e20:	f7ff ff4d 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5e24:	b930      	cbnz	r0, b5e34 <_ZN13sysStatusData8validateEj+0x50>
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b5e26:	f7ff fe2b 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5e2a:	f7ff ff48 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5e2e:	490d      	ldr	r1, [pc, #52]	; (b5e64 <_ZN13sysStatusData8validateEj+0x80>)
   b5e30:	4602      	mov	r2, r0
   b5e32:	e7e7      	b.n	b5e04 <_ZN13sysStatusData8validateEj+0x20>
        else if (sysStatus.get_nodeNumber() < 1 || sysStatus.get_nodeNumber() > 11) {
   b5e34:	f7ff fe24 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5e38:	f7ff ff41 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b5e3c:	280b      	cmp	r0, #11
   b5e3e:	d8f2      	bhi.n	b5e26 <_ZN13sysStatusData8validateEj+0x42>
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b5e40:	4a09      	ldr	r2, [pc, #36]	; (b5e68 <_ZN13sysStatusData8validateEj+0x84>)
   b5e42:	490a      	ldr	r1, [pc, #40]	; (b5e6c <_ZN13sysStatusData8validateEj+0x88>)
   b5e44:	4805      	ldr	r0, [pc, #20]	; (b5e5c <_ZN13sysStatusData8validateEj+0x78>)
   b5e46:	f7fe fa0d 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_alertCodeNode(0);                     // At setup we start with a clean slate
   b5e4a:	f7ff fe19 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5e4e:	2100      	movs	r1, #0
   b5e50:	f7ff ff87 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
}
   b5e54:	4620      	mov	r0, r4
   b5e56:	bd10      	pop	{r4, pc}
   b5e58:	000be810 	.word	0x000be810
   b5e5c:	2003e654 	.word	0x2003e654
   b5e60:	000be6e7 	.word	0x000be6e7
   b5e64:	000be835 	.word	0x000be835
   b5e68:	000be7c8 	.word	0x000be7c8
   b5e6c:	000be854 	.word	0x000be854

000b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5e70:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5e72:	2140      	movs	r1, #64	; 0x40
   b5e74:	f7ff ff99 	bl	b5daa <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5e78:	bd08      	pop	{r3, pc}
	...

000b5e7c <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b5e7c:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5e7e:	f002 fd1b 	bl	b88b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b5e82:	4604      	mov	r4, r0
   b5e84:	b1a0      	cbz	r0, b5eb0 <_ZN17currentStatusData8validateEj+0x34>
        if (current.get_hourlyCount() < 0 || current.get_hourlyCount()  > 1024) {
   b5e86:	f7ff fe87 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5e8a:	f7ff fff1 	bl	b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5e8e:	f7ff fe83 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5e92:	f7ff ffed 	bl	b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5e96:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b5e9a:	d910      	bls.n	b5ebe <_ZN17currentStatusData8validateEj+0x42>
            Log.info("current data not valid hourlyCount=%d" , current.get_hourlyCount());
   b5e9c:	f7ff fe7c 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b5ea0:	f7ff ffe6 	bl	b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5ea4:	4907      	ldr	r1, [pc, #28]	; (b5ec4 <_ZN17currentStatusData8validateEj+0x48>)
   b5ea6:	4602      	mov	r2, r0
   b5ea8:	4807      	ldr	r0, [pc, #28]	; (b5ec8 <_ZN17currentStatusData8validateEj+0x4c>)
   b5eaa:	f7fe f9db 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b5eae:	2400      	movs	r4, #0
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b5eb0:	4a06      	ldr	r2, [pc, #24]	; (b5ecc <_ZN17currentStatusData8validateEj+0x50>)
   b5eb2:	4907      	ldr	r1, [pc, #28]	; (b5ed0 <_ZN17currentStatusData8validateEj+0x54>)
   b5eb4:	4804      	ldr	r0, [pc, #16]	; (b5ec8 <_ZN17currentStatusData8validateEj+0x4c>)
   b5eb6:	f7fe f9d5 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b5eba:	4620      	mov	r0, r4
   b5ebc:	bd10      	pop	{r4, pc}
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b5ebe:	4a05      	ldr	r2, [pc, #20]	; (b5ed4 <_ZN17currentStatusData8validateEj+0x58>)
   b5ec0:	e7f7      	b.n	b5eb2 <_ZN17currentStatusData8validateEj+0x36>
   b5ec2:	bf00      	nop
   b5ec4:	000be869 	.word	0x000be869
   b5ec8:	2003e654 	.word	0x2003e654
   b5ecc:	000be6e7 	.word	0x000be6e7
   b5ed0:	000be88f 	.word	0x000be88f
   b5ed4:	000be7c8 	.word	0x000be7c8

000b5ed8 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b5ed8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5eda:	2142      	movs	r1, #66	; 0x42
   b5edc:	f7ff ff65 	bl	b5daa <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5ee0:	bd08      	pop	{r3, pc}

000b5ee2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5ee2:	b570      	push	{r4, r5, r6, lr}
   b5ee4:	4604      	mov	r4, r0
   b5ee6:	3004      	adds	r0, #4
   b5ee8:	460d      	mov	r5, r1
   b5eea:	4616      	mov	r6, r2
   b5eec:	f7ff fd6e 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ef0:	68e3      	ldr	r3, [r4, #12]
   b5ef2:	3b02      	subs	r3, #2
   b5ef4:	42ab      	cmp	r3, r5
   b5ef6:	d307      	bcc.n	b5f08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5ef8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5efa:	5b5a      	ldrh	r2, [r3, r5]
   b5efc:	42b2      	cmp	r2, r6
   b5efe:	d003      	beq.n	b5f08 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b5f00:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b5f02:	4620      	mov	r0, r4
   b5f04:	f002 fccc 	bl	b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5f08:	6860      	ldr	r0, [r4, #4]
        }
   b5f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5f0e:	f002 bd6f 	b.w	b89f0 <os_mutex_recursive_unlock>

000b5f12 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b5f12:	b508      	push	{r3, lr}
   b5f14:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b5f16:	2114      	movs	r1, #20
   b5f18:	f7ff ffe3 	bl	b5ee2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5f1c:	bd08      	pop	{r3, pc}

000b5f1e <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b5f1e:	b508      	push	{r3, lr}
   b5f20:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5f22:	2120      	movs	r1, #32
   b5f24:	f7ff ffdd 	bl	b5ee2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5f28:	bd08      	pop	{r3, pc}

000b5f2a <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5f2a:	b508      	push	{r3, lr}
   b5f2c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b5f2e:	2140      	movs	r1, #64	; 0x40
   b5f30:	f7ff ffd7 	bl	b5ee2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5f34:	bd08      	pop	{r3, pc}

000b5f36 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b5f36:	b508      	push	{r3, lr}
   b5f38:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5f3a:	2142      	movs	r1, #66	; 0x42
   b5f3c:	f7ff ffd1 	bl	b5ee2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5f40:	bd08      	pop	{r3, pc}

000b5f42 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f44:	4604      	mov	r4, r0
   b5f46:	3004      	adds	r0, #4
   b5f48:	460d      	mov	r5, r1
   b5f4a:	f7ff fd3f 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f4e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5f50:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f52:	3b08      	subs	r3, #8
   b5f54:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5f56:	bf23      	ittte	cs
   b5f58:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5f5a:	1949      	addcs	r1, r1, r5
   b5f5c:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5f60:	2600      	movcc	r6, #0
   b5f62:	bf38      	it	cc
   b5f64:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5f66:	f002 fd43 	bl	b89f0 <os_mutex_recursive_unlock>
        }
   b5f6a:	4630      	mov	r0, r6
   b5f6c:	4639      	mov	r1, r7
   b5f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f70 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b5f70:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b5f72:	2118      	movs	r1, #24
   b5f74:	f7ff ffe5 	bl	b5f42 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5f78:	bd08      	pop	{r3, pc}

000b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f7c:	4604      	mov	r4, r0
   b5f7e:	3004      	adds	r0, #4
   b5f80:	460d      	mov	r5, r1
   b5f82:	461e      	mov	r6, r3
   b5f84:	4617      	mov	r7, r2
   b5f86:	f7ff fd21 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f8a:	68e3      	ldr	r3, [r4, #12]
   b5f8c:	3b08      	subs	r3, #8
   b5f8e:	42ab      	cmp	r3, r5
   b5f90:	d30c      	bcc.n	b5fac <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5f92:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5f94:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5f96:	5958      	ldr	r0, [r3, r5]
   b5f98:	6851      	ldr	r1, [r2, #4]
   b5f9a:	42b1      	cmp	r1, r6
   b5f9c:	bf08      	it	eq
   b5f9e:	42b8      	cmpeq	r0, r7
   b5fa0:	d004      	beq.n	b5fac <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b5fa2:	515f      	str	r7, [r3, r5]
                        updateHash();
   b5fa4:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5fa6:	6056      	str	r6, [r2, #4]
                        updateHash();
   b5fa8:	f002 fc7a 	bl	b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5fac:	6860      	ldr	r0, [r4, #4]
        }
   b5fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5fb2:	f002 bd1d 	b.w	b89f0 <os_mutex_recursive_unlock>

000b5fb6 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5fb6:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5fb8:	2118      	movs	r1, #24
   b5fba:	f7ff ffde 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5fbe:	bd08      	pop	{r3, pc}

000b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>:
void sysStatusData::set_alertTimestampNode(time_t value) {
   b5fc0:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampNode), value);
   b5fc2:	2128      	movs	r1, #40	; 0x28
   b5fc4:	f7ff ffd9 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5fc8:	bd08      	pop	{r3, pc}
	...

000b5fcc <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b5fcc:	b510      	push	{r4, lr}
   b5fce:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b5fd0:	f002 fcd8 	bl	b8984 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b5fd4:	481b      	ldr	r0, [pc, #108]	; (b6044 <_ZN13sysStatusData10initializeEv+0x78>)
   b5fd6:	491c      	ldr	r1, [pc, #112]	; (b6048 <_ZN13sysStatusData10initializeEv+0x7c>)
   b5fd8:	f7fe f944 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b5fdc:	491b      	ldr	r1, [pc, #108]	; (b604c <_ZN13sysStatusData10initializeEv+0x80>)
   b5fde:	4819      	ldr	r0, [pc, #100]	; (b6044 <_ZN13sysStatusData10initializeEv+0x78>)
   b5fe0:	f7fe f940 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(11);
   b5fe4:	f7ff fd4c 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5fe8:	210b      	movs	r1, #11
   b5fea:	f7ff fea8 	bl	b5d3e <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b5fee:	f7ff fd47 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5ff2:	2101      	movs	r1, #1
   b5ff4:	f7ff fea9 	bl	b5d4a <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b5ff8:	f7ff fd42 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b5ffc:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6000:	f7ff ff87 	bl	b5f12 <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_resetCount(0);
   b6004:	f7ff fd3c 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b6008:	2100      	movs	r1, #0
   b600a:	f7ff fea4 	bl	b5d56 <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_frequencyMinutes(60);
   b600e:	f7ff fd37 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b6012:	213c      	movs	r1, #60	; 0x3c
   b6014:	f7ff ff83 	bl	b5f1e <_ZN13sysStatusData20set_frequencyMinutesEt>
    sysStatus.set_alertCodeNode(1);
   b6018:	f7ff fd32 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b601c:	2101      	movs	r1, #1
   b601e:	f7ff fea0 	bl	b5d62 <_ZN13sysStatusData17set_alertCodeNodeEh>
    sysStatus.set_alertTimestampNode(0);
   b6022:	f7ff fd2d 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b6026:	2200      	movs	r2, #0
   b6028:	2300      	movs	r3, #0
   b602a:	f7ff ffc9 	bl	b5fc0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
    sysStatus.set_openHours(true);
   b602e:	f7ff fd27 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b6032:	2101      	movs	r1, #1
   b6034:	f7ff fd77 	bl	b5b26 <_ZN13sysStatusData13set_openHoursEb>
    updateHash();
   b6038:	4620      	mov	r0, r4
}
   b603a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b603e:	f002 bc2f 	b.w	b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6042:	bf00      	nop
   b6044:	2003e654 	.word	0x2003e654
   b6048:	000be8a2 	.word	0x000be8a2
   b604c:	000be8b3 	.word	0x000be8b3

000b6050 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6050:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6052:	2138      	movs	r1, #56	; 0x38
   b6054:	f7ff ff91 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6058:	bd08      	pop	{r3, pc}

000b605a <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b605a:	b510      	push	{r4, lr}
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b605c:	f7ff fd9c 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6060:	2100      	movs	r1, #0
   b6062:	f7ff ff68 	bl	b5f36 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6066:	f7ff fd97 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b606a:	2100      	movs	r1, #0
   b606c:	f7ff ff5d 	bl	b5f2a <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b6070:	f7ff fd92 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6074:	4604      	mov	r4, r0
   b6076:	f005 fbf4 	bl	bb862 <_ZN9TimeClass3nowEv>
   b607a:	4602      	mov	r2, r0
   b607c:	17c3      	asrs	r3, r0, #31
   b607e:	4620      	mov	r0, r4
   b6080:	f7ff ffe6 	bl	b6050 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6084:	f7ff fcfc 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b6088:	2100      	movs	r1, #0
   b608a:	f7ff fe64 	bl	b5d56 <_ZN13sysStatusData14set_resetCountEh>
  current.set_messageCount(0);
   b608e:	f7ff fd83 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6092:	2100      	movs	r1, #0
   b6094:	f7ff fe7d 	bl	b5d92 <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b6098:	f7ff fd7e 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
}
   b609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  current.set_successCount(0);
   b60a0:	2100      	movs	r1, #0
   b60a2:	f7ff be7c 	b.w	b5d9e <_ZN17currentStatusData16set_successCountEh>
	...

000b60a8 <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b60a8:	b510      	push	{r4, lr}
   b60aa:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b60ac:	f002 fc6a 	bl	b8984 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b60b0:	4905      	ldr	r1, [pc, #20]	; (b60c8 <_ZN17currentStatusData10initializeEv+0x20>)
   b60b2:	4806      	ldr	r0, [pc, #24]	; (b60cc <_ZN17currentStatusData10initializeEv+0x24>)
   b60b4:	f7fe f8d6 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b60b8:	4620      	mov	r0, r4
   b60ba:	f7ff ffce 	bl	b605a <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b60be:	4620      	mov	r0, r4
}
   b60c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b60c4:	f002 bbec 	b.w	b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b60c8:	000be8cb 	.word	0x000be8cb
   b60cc:	2003e654 	.word	0x2003e654

000b60d0 <_GLOBAL__sub_I_fram>:
}
   b60d0:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);  
   b60d2:	f005 fe37 	bl	bbd44 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b60d6:	4c05      	ldr	r4, [pc, #20]	; (b60ec <_GLOBAL__sub_I_fram+0x1c>)
   b60d8:	4601      	mov	r1, r0
   b60da:	2300      	movs	r3, #0
   b60dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b60e0:	4620      	mov	r0, r4
   b60e2:	f000 ffdd 	bl	b70a0 <_ZN6MB85RCC1ER7TwoWireji>
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <_GLOBAL__sub_I_fram+0x20>)
   b60e8:	6023      	str	r3, [r4, #0]
}
   b60ea:	bd10      	pop	{r4, pc}
   b60ec:	2003e3b8 	.word	0x2003e3b8
   b60f0:	000be8ec 	.word	0x000be8ec

000b60f4 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b60f4:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b60f6:	4913      	ldr	r1, [pc, #76]	; (b6144 <_Z18initializePinModesv+0x50>)
   b60f8:	4813      	ldr	r0, [pc, #76]	; (b6148 <_Z18initializePinModesv+0x54>)
   b60fa:	f7fe f8b3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b60fe:	2102      	movs	r1, #2
   b6100:	2004      	movs	r0, #4
   b6102:	f005 fd95 	bl	bbc30 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b6106:	2100      	movs	r1, #0
   b6108:	2008      	movs	r0, #8
   b610a:	f005 fd91 	bl	bbc30 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b610e:	2101      	movs	r1, #1
   b6110:	2007      	movs	r0, #7
   b6112:	f005 fd8d 	bl	bbc30 <pinMode>
    pinMode(INT_PIN, INPUT);
   b6116:	2100      	movs	r1, #0
   b6118:	2012      	movs	r0, #18
   b611a:	f005 fd89 	bl	bbc30 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b611e:	2101      	movs	r1, #1
   b6120:	2011      	movs	r0, #17
   b6122:	f005 fd85 	bl	bbc30 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b6126:	2101      	movs	r1, #1
   b6128:	2010      	movs	r0, #16
   b612a:	f005 fd81 	bl	bbc30 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b612e:	2100      	movs	r1, #0
   b6130:	2010      	movs	r0, #16
   b6132:	f005 fd8e 	bl	bbc52 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b6136:	2100      	movs	r1, #0
   b6138:	2011      	movs	r0, #17
   b613a:	f005 fd8a 	bl	bbc52 <digitalWrite>
    return true;
}
   b613e:	2001      	movs	r0, #1
   b6140:	bd08      	pop	{r3, pc}
   b6142:	bf00      	nop
   b6144:	000be958 	.word	0x000be958
   b6148:	2003e654 	.word	0x2003e654

000b614c <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b614c:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b614e:	4918      	ldr	r1, [pc, #96]	; (b61b0 <_Z18initializePowerCfgv+0x64>)
   b6150:	4818      	ldr	r0, [pc, #96]	; (b61b4 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b6152:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b6154:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b6156:	f7fe f885 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b615a:	4622      	mov	r2, r4
   b615c:	2100      	movs	r1, #0
   b615e:	4668      	mov	r0, sp
   b6160:	f007 fc86 	bl	bda70 <memset>
   b6164:	4622      	mov	r2, r4
   b6166:	2100      	movs	r1, #0
   b6168:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b616c:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b6170:	f007 fc7e 	bl	bda70 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b6174:	2100      	movs	r1, #0
   b6176:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b617a:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b617e:	f002 fecf 	bl	b8f20 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b6182:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b6186:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b618a:	4b0b      	ldr	r3, [pc, #44]	; (b61b8 <_Z18initializePowerCfgv+0x6c>)
   b618c:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b618e:	f241 0370 	movw	r3, #4208	; 0x1070
   b6192:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b6196:	9b00      	ldr	r3, [sp, #0]
   b6198:	2100      	movs	r1, #0
   b619a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b619e:	4668      	mov	r0, sp
   b61a0:	9300      	str	r3, [sp, #0]
   b61a2:	f002 febd 	bl	b8f20 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b61a6:	3800      	subs	r0, #0
   b61a8:	bf18      	it	ne
   b61aa:	2001      	movne	r0, #1
   b61ac:	b010      	add	sp, #64	; 0x40
   b61ae:	bd10      	pop	{r4, pc}
   b61b0:	000be971 	.word	0x000be971
   b61b4:	2003e654 	.word	0x2003e654
   b61b8:	03840384 	.word	0x03840384

000b61bc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b61bc:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b61be:	6803      	ldr	r3, [r0, #0]
   b61c0:	2b2f      	cmp	r3, #47	; 0x2f
{
   b61c2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b61c4:	d904      	bls.n	b61d0 <nrf_gpio_pin_port_decode+0x14>
   b61c6:	4a07      	ldr	r2, [pc, #28]	; (b61e4 <nrf_gpio_pin_port_decode+0x28>)
   b61c8:	4907      	ldr	r1, [pc, #28]	; (b61e8 <nrf_gpio_pin_port_decode+0x2c>)
   b61ca:	200a      	movs	r0, #10
   b61cc:	f002 fe08 	bl	b8de0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b61d0:	6823      	ldr	r3, [r4, #0]
   b61d2:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b61d4:	bf83      	ittte	hi
   b61d6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b61da:	4804      	ldrhi	r0, [pc, #16]	; (b61ec <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b61dc:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b61de:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b61e2:	bd10      	pop	{r4, pc}
   b61e4:	000b8a31 	.word	0x000b8a31
   b61e8:	000bea15 	.word	0x000bea15
   b61ec:	50000300 	.word	0x50000300

000b61f0 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b61f0:	ee07 0a90 	vmov	s15, r0
   b61f4:	ed9f 7a09 	vldr	s14, [pc, #36]	; b621c <_Z17tmp36TemperatureCi+0x2c>
   b61f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b61fc:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6200:	ed9f 7a07 	vldr	s14, [pc, #28]	; b6220 <_Z17tmp36TemperatureCi+0x30>
   b6204:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6208:	eddf 7a06 	vldr	s15, [pc, #24]	; b6224 <_Z17tmp36TemperatureCi+0x34>
   b620c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6210:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6214:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6218:	4770      	bx	lr
   b621a:	bf00      	nop
   b621c:	454e4000 	.word	0x454e4000
   b6220:	457ff000 	.word	0x457ff000
   b6224:	43fa0000 	.word	0x43fa0000

000b6228 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6228:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b622a:	2101      	movs	r1, #1
   b622c:	a801      	add	r0, sp, #4
   b622e:	f004 fd16 	bl	bac5e <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6232:	f7ff fcb1 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6236:	f7ff fd56 	bl	b5ce6 <_ZNK17currentStatusData17get_internalTempCEv>
   b623a:	f7ff fcad 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b623e:	f7ff fd52 	bl	b5ce6 <_ZNK17currentStatusData17get_internalTempCEv>
   b6242:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6244:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6246:	d90d      	bls.n	b6264 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6248:	f004 fd9c 	bl	bad84 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b624c:	f7ff fca4 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6250:	2101      	movs	r1, #1
   b6252:	f7ff fd98 	bl	b5d86 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6256:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6258:	a801      	add	r0, sp, #4
   b625a:	f004 fd0f 	bl	bac7c <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b625e:	4620      	mov	r0, r4
   b6260:	b002      	add	sp, #8
   b6262:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6264:	f004 fd73 	bl	bad4e <_ZN4PMIC14enableChargingEv>
    return true;
   b6268:	2401      	movs	r4, #1
   b626a:	e7f5      	b.n	b6258 <_Z16isItSafeToChargev+0x30>

000b626c <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b626c:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b626e:	4d1b      	ldr	r5, [pc, #108]	; (b62dc <_Z17getSignalStrengthv+0x70>)
   b6270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6272:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6274:	ac10      	add	r4, sp, #64	; 0x40
   b6276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b627a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b627c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6280:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6284:	4916      	ldr	r1, [pc, #88]	; (b62e0 <_Z17getSignalStrengthv+0x74>)
   b6286:	a808      	add	r0, sp, #32
   b6288:	f002 ffea 	bl	b9260 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b628c:	a808      	add	r0, sp, #32
   b628e:	f003 f82a 	bl	b92e6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6292:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6294:	a808      	add	r0, sp, #32
   b6296:	f003 f85f 	bl	b9358 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b629a:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b629c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b62a0:	f003 f88a 	bl	b93b8 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b62a4:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b62a6:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b62aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b62ae:	f006 ffc5 	bl	bd23c <__aeabi_f2d>
   b62b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b62b6:	4628      	mov	r0, r5
   b62b8:	f006 ffc0 	bl	bd23c <__aeabi_f2d>
   b62bc:	e9cd 0100 	strd	r0, r1, [sp]
   b62c0:	2110      	movs	r1, #16
   b62c2:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b62c6:	4a07      	ldr	r2, [pc, #28]	; (b62e4 <_Z17getSignalStrengthv+0x78>)
   b62c8:	eb0d 0001 	add.w	r0, sp, r1
   b62cc:	f002 fefe 	bl	b90cc <snprintf>
  Log.info(signalStr);
   b62d0:	4805      	ldr	r0, [pc, #20]	; (b62e8 <_Z17getSignalStrengthv+0x7c>)
   b62d2:	a904      	add	r1, sp, #16
   b62d4:	f7fd ffc6 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b62d8:	b01b      	add	sp, #108	; 0x6c
   b62da:	bd30      	pop	{r4, r5, pc}
   b62dc:	000bea98 	.word	0x000bea98
   b62e0:	2003e610 	.word	0x2003e610
   b62e4:	000bea39 	.word	0x000bea39
   b62e8:	2003e654 	.word	0x2003e654

000b62ec <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b62ee:	4e4f      	ldr	r6, [pc, #316]	; (b642c <_Z11recordCountv+0x140>)
   b62f0:	4c4f      	ldr	r4, [pc, #316]	; (b6430 <_Z11recordCountv+0x144>)
   b62f2:	7833      	ldrb	r3, [r6, #0]
   b62f4:	f3bf 8f5b 	dmb	ish
   b62f8:	f013 0f01 	tst.w	r3, #1
   b62fc:	b085      	sub	sp, #20
   b62fe:	d109      	bne.n	b6314 <_Z11recordCountv+0x28>
   b6300:	4630      	mov	r0, r6
   b6302:	f7fd fedb 	bl	b40bc <__cxa_guard_acquire>
   b6306:	b128      	cbz	r0, b6314 <_Z11recordCountv+0x28>
   b6308:	f002 fbc2 	bl	b8a90 <HAL_Pin_Map>
   b630c:	6020      	str	r0, [r4, #0]
   b630e:	4630      	mov	r0, r6
   b6310:	f7fd fed9 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6314:	4b47      	ldr	r3, [pc, #284]	; (b6434 <_Z11recordCountv+0x148>)
   b6316:	881d      	ldrh	r5, [r3, #0]
   b6318:	6823      	ldr	r3, [r4, #0]
   b631a:	012d      	lsls	r5, r5, #4
   b631c:	5d5b      	ldrb	r3, [r3, r5]
   b631e:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b6320:	7833      	ldrb	r3, [r6, #0]
   b6322:	f3bf 8f5b 	dmb	ish
   b6326:	07d9      	lsls	r1, r3, #31
   b6328:	d409      	bmi.n	b633e <_Z11recordCountv+0x52>
   b632a:	4840      	ldr	r0, [pc, #256]	; (b642c <_Z11recordCountv+0x140>)
   b632c:	f7fd fec6 	bl	b40bc <__cxa_guard_acquire>
   b6330:	b128      	cbz	r0, b633e <_Z11recordCountv+0x52>
   b6332:	f002 fbad 	bl	b8a90 <HAL_Pin_Map>
   b6336:	6020      	str	r0, [r4, #0]
   b6338:	483c      	ldr	r0, [pc, #240]	; (b642c <_Z11recordCountv+0x140>)
   b633a:	f7fd fec4 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b633e:	6823      	ldr	r3, [r4, #0]
   b6340:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b6342:	a803      	add	r0, sp, #12
   b6344:	785b      	ldrb	r3, [r3, #1]
   b6346:	f003 031f 	and.w	r3, r3, #31
   b634a:	433b      	orrs	r3, r7
   b634c:	9303      	str	r3, [sp, #12]
   b634e:	f7ff ff35 	bl	b61bc <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b6352:	9a03      	ldr	r2, [sp, #12]
   b6354:	2301      	movs	r3, #1
   b6356:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b6358:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b635c:	f7ff fc1c 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6360:	4607      	mov	r7, r0
   b6362:	f005 fa7e 	bl	bb862 <_ZN9TimeClass3nowEv>
   b6366:	4602      	mov	r2, r0
   b6368:	17c3      	asrs	r3, r0, #31
   b636a:	4638      	mov	r0, r7
   b636c:	f7ff fe70 	bl	b6050 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b6370:	f7ff fc12 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6374:	4607      	mov	r7, r0
   b6376:	f7ff fc0f 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b637a:	f7ff fd79 	bl	b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>
   b637e:	3001      	adds	r0, #1
   b6380:	b281      	uxth	r1, r0
   b6382:	4638      	mov	r0, r7
   b6384:	f7ff fdd1 	bl	b5f2a <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b6388:	f7ff fc06 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b638c:	4607      	mov	r7, r0
   b638e:	f7ff fc03 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6392:	f7ff fda1 	bl	b5ed8 <_ZNK17currentStatusData14get_dailyCountEv>
   b6396:	3001      	adds	r0, #1
   b6398:	b281      	uxth	r1, r0
   b639a:	4638      	mov	r0, r7
   b639c:	f7ff fdcb 	bl	b5f36 <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b63a0:	f7ff fbfa 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b63a4:	f7ff fd64 	bl	b5e70 <_ZNK17currentStatusData15get_hourlyCountEv>
   b63a8:	9001      	str	r0, [sp, #4]
   b63aa:	f7ff fbf5 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b63ae:	f7ff fd93 	bl	b5ed8 <_ZNK17currentStatusData14get_dailyCountEv>
   b63b2:	9a01      	ldr	r2, [sp, #4]
   b63b4:	4920      	ldr	r1, [pc, #128]	; (b6438 <_Z11recordCountv+0x14c>)
   b63b6:	4603      	mov	r3, r0
   b63b8:	4820      	ldr	r0, [pc, #128]	; (b643c <_Z11recordCountv+0x150>)
   b63ba:	f7fd ff53 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b63be:	20c8      	movs	r0, #200	; 0xc8
   b63c0:	f002 fee0 	bl	b9184 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b63c4:	7833      	ldrb	r3, [r6, #0]
   b63c6:	f3bf 8f5b 	dmb	ish
   b63ca:	07da      	lsls	r2, r3, #31
   b63cc:	d409      	bmi.n	b63e2 <_Z11recordCountv+0xf6>
   b63ce:	4817      	ldr	r0, [pc, #92]	; (b642c <_Z11recordCountv+0x140>)
   b63d0:	f7fd fe74 	bl	b40bc <__cxa_guard_acquire>
   b63d4:	b128      	cbz	r0, b63e2 <_Z11recordCountv+0xf6>
   b63d6:	f002 fb5b 	bl	b8a90 <HAL_Pin_Map>
   b63da:	6020      	str	r0, [r4, #0]
   b63dc:	4813      	ldr	r0, [pc, #76]	; (b642c <_Z11recordCountv+0x140>)
   b63de:	f7fd fe72 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b63e2:	6823      	ldr	r3, [r4, #0]
   b63e4:	5d5b      	ldrb	r3, [r3, r5]
   b63e6:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b63e8:	7833      	ldrb	r3, [r6, #0]
   b63ea:	f3bf 8f5b 	dmb	ish
   b63ee:	07db      	lsls	r3, r3, #31
   b63f0:	d409      	bmi.n	b6406 <_Z11recordCountv+0x11a>
   b63f2:	480e      	ldr	r0, [pc, #56]	; (b642c <_Z11recordCountv+0x140>)
   b63f4:	f7fd fe62 	bl	b40bc <__cxa_guard_acquire>
   b63f8:	b128      	cbz	r0, b6406 <_Z11recordCountv+0x11a>
   b63fa:	f002 fb49 	bl	b8a90 <HAL_Pin_Map>
   b63fe:	6020      	str	r0, [r4, #0]
   b6400:	480a      	ldr	r0, [pc, #40]	; (b642c <_Z11recordCountv+0x140>)
   b6402:	f7fd fe60 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6406:	6823      	ldr	r3, [r4, #0]
   b6408:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b640a:	a803      	add	r0, sp, #12
   b640c:	786b      	ldrb	r3, [r5, #1]
   b640e:	f003 031f 	and.w	r3, r3, #31
   b6412:	433b      	orrs	r3, r7
   b6414:	9303      	str	r3, [sp, #12]
   b6416:	f7ff fed1 	bl	b61bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b641a:	9b03      	ldr	r3, [sp, #12]
   b641c:	2201      	movs	r2, #1
   b641e:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b6422:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
   b6426:	4610      	mov	r0, r2
   b6428:	b005      	add	sp, #20
   b642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b642c:	2003e3c8 	.word	0x2003e3c8
   b6430:	2003e3cc 	.word	0x2003e3cc
   b6434:	000be98c 	.word	0x000be98c
   b6438:	000bea52 	.word	0x000bea52
   b643c:	2003e654 	.word	0x2003e654

000b6440 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6440:	b530      	push	{r4, r5, lr}
   b6442:	b085      	sub	sp, #20
   b6444:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6446:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6448:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b644a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b644c:	f002 fd0a 	bl	b8e64 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6450:	b990      	cbnz	r0, b6478 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6452:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6454:	b10c      	cbz	r4, b645a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6456:	6923      	ldr	r3, [r4, #16]
   b6458:	b923      	cbnz	r3, b6464 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b645a:	4a08      	ldr	r2, [pc, #32]	; (b647c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b645c:	4908      	ldr	r1, [pc, #32]	; (b6480 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b645e:	200a      	movs	r0, #10
   b6460:	f002 fcbe 	bl	b8de0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6464:	230c      	movs	r3, #12
   b6466:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b646a:	2304      	movs	r3, #4
   b646c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b646e:	aa01      	add	r2, sp, #4
   b6470:	6923      	ldr	r3, [r4, #16]
   b6472:	2101      	movs	r1, #1
   b6474:	4620      	mov	r0, r4
   b6476:	4798      	blx	r3
}
   b6478:	b005      	add	sp, #20
   b647a:	bd30      	pop	{r4, r5, pc}
   b647c:	000b8a31 	.word	0x000b8a31
   b6480:	000bea6f 	.word	0x000bea6f

000b6484 <_Z12batteryStatev>:
bool batteryState() {
   b6484:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6486:	f7ff fb87 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b648a:	a901      	add	r1, sp, #4
   b648c:	4604      	mov	r4, r0
   b648e:	2007      	movs	r0, #7
   b6490:	f7ff ffd6 	bl	b6440 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6494:	1e01      	subs	r1, r0, #0
        return val;
   b6496:	bfa8      	it	ge
   b6498:	9901      	ldrge	r1, [sp, #4]
   b649a:	4620      	mov	r0, r4
   b649c:	b2c9      	uxtb	r1, r1
   b649e:	f7ff fc72 	bl	b5d86 <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b64a2:	4818      	ldr	r0, [pc, #96]	; (b6504 <_Z12batteryStatev+0x80>)
   b64a4:	f003 f852 	bl	b954c <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b64a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b64ac:	f002 fe6a 	bl	b9184 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b64b0:	f7ff fb72 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b64b4:	a901      	add	r1, sp, #4
   b64b6:	4604      	mov	r4, r0
   b64b8:	2003      	movs	r0, #3
   b64ba:	f7ff ffc1 	bl	b6440 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b64be:	b9e8      	cbnz	r0, b64fc <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b64c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b64c4:	ee07 3a90 	vmov	s15, r3
   b64c8:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b64cc:	ee17 0a90 	vmov	r0, s15
   b64d0:	f006 feb4 	bl	bd23c <__aeabi_f2d>
   b64d4:	ec41 0b10 	vmov	d0, r0, r1
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff fbc1 	bl	b5c60 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b64de:	f7ff fb5b 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b64e2:	f7ff fb9d 	bl	b5c20 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b64e6:	4b08      	ldr	r3, [pc, #32]	; (b6508 <_Z12batteryStatev+0x84>)
   b64e8:	ec51 0b10 	vmov	r0, r1, d0
   b64ec:	2200      	movs	r2, #0
   b64ee:	f007 f98d 	bl	bd80c <__aeabi_dcmpgt>
}
   b64f2:	3800      	subs	r0, #0
   b64f4:	bf18      	it	ne
   b64f6:	2001      	movne	r0, #1
   b64f8:	b002      	add	sp, #8
   b64fa:	bd10      	pop	{r4, pc}
            return -1.0f;
   b64fc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6500:	e7e4      	b.n	b64cc <_Z12batteryStatev+0x48>
   b6502:	bf00      	nop
   b6504:	2003e3d0 	.word	0x2003e3d0
   b6508:	404e0000 	.word	0x404e0000

000b650c <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b650c:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b650e:	f7ff fb43 	bl	b5b98 <_ZN17currentStatusData8instanceEv>
   b6512:	4b0f      	ldr	r3, [pc, #60]	; (b6550 <_Z16takeMeasurementsv+0x44>)
   b6514:	4604      	mov	r4, r0
   b6516:	8818      	ldrh	r0, [r3, #0]
   b6518:	f005 fbc7 	bl	bbcaa <analogRead>
   b651c:	f7ff fe68 	bl	b61f0 <_Z17tmp36TemperatureCi>
   b6520:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6524:	4620      	mov	r0, r4
   b6526:	edcd 7a01 	vstr	s15, [sp, #4]
   b652a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b652e:	f7ff fc24 	bl	b5d7a <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b6532:	f7ff ffa7 	bl	b6484 <_Z12batteryStatev>
    isItSafeToCharge();
   b6536:	f7ff fe77 	bl	b6228 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b653a:	f7ff faa1 	bl	b5a80 <_ZN13sysStatusData8instanceEv>
   b653e:	f7ff fbbe 	bl	b5cbe <_ZNK13sysStatusData14get_nodeNumberEv>
   b6542:	b908      	cbnz	r0, b6548 <_Z16takeMeasurementsv+0x3c>
   b6544:	f7ff fe92 	bl	b626c <_Z17getSignalStrengthv>
}
   b6548:	2001      	movs	r0, #1
   b654a:	b002      	add	sp, #8
   b654c:	bd10      	pop	{r4, pc}
   b654e:	bf00      	nop
   b6550:	000be99a 	.word	0x000be99a

000b6554 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6554:	4801      	ldr	r0, [pc, #4]	; (b655c <_GLOBAL__sub_I_batteryContext+0x8>)
   b6556:	2100      	movs	r1, #0
   b6558:	f002 bfb4 	b.w	b94c4 <_ZN9FuelGaugeC1Eb>
   b655c:	2003e3d0 	.word	0x2003e3d0

000b6560 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6560:	4770      	bx	lr

000b6562 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6562:	b510      	push	{r4, lr}
}
   b6564:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6566:	4604      	mov	r4, r0
}
   b6568:	f7fd fd99 	bl	b409e <_ZdlPvj>
   b656c:	4620      	mov	r0, r4
   b656e:	bd10      	pop	{r4, pc}

000b6570 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6570:	b510      	push	{r4, lr}
   b6572:	4604      	mov	r4, r0
   b6574:	b08a      	sub	sp, #40	; 0x28
   b6576:	4608      	mov	r0, r1
    attr.flags = 0;
   b6578:	f04f 0c20 	mov.w	ip, #32
   b657c:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b657e:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6582:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6586:	460b      	mov	r3, r1
   b6588:	aa02      	add	r2, sp, #8
   b658a:	6821      	ldr	r1, [r4, #0]
   b658c:	f002 fc38 	bl	b8e00 <log_message_v>
}
   b6590:	b00a      	add	sp, #40	; 0x28
   b6592:	bd10      	pop	{r4, pc}

000b6594 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6594:	b40e      	push	{r1, r2, r3}
   b6596:	b503      	push	{r0, r1, lr}
   b6598:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b659a:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b659c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b65a0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b65a2:	f7ff ffe5 	bl	b6570 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b65a6:	b002      	add	sp, #8
   b65a8:	f85d eb04 	ldr.w	lr, [sp], #4
   b65ac:	b003      	add	sp, #12
   b65ae:	4770      	bx	lr

000b65b0 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b65b0:	b40e      	push	{r1, r2, r3}
   b65b2:	b503      	push	{r0, r1, lr}
   b65b4:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b65b6:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b65b8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b65bc:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b65be:	f7ff ffd7 	bl	b6570 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b65c2:	b002      	add	sp, #8
   b65c4:	f85d eb04 	ldr.w	lr, [sp], #4
   b65c8:	b003      	add	sp, #12
   b65ca:	4770      	bx	lr

000b65cc <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b65cc:	b510      	push	{r4, lr}
   b65ce:	7202      	strb	r2, [r0, #8]
   b65d0:	22ff      	movs	r2, #255	; 0xff
   b65d2:	8142      	strh	r2, [r0, #10]
   b65d4:	2200      	movs	r2, #0
   b65d6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b65da:	6142      	str	r2, [r0, #20]
   b65dc:	7602      	strb	r2, [r0, #24]
   b65de:	61c2      	str	r2, [r0, #28]
    instance = this;
   b65e0:	4a02      	ldr	r2, [pc, #8]	; (b65ec <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b65e2:	4c03      	ldr	r4, [pc, #12]	; (b65f0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b65e4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b65e6:	e9c0 4100 	strd	r4, r1, [r0]
}
   b65ea:	bd10      	pop	{r4, pc}
   b65ec:	2003e3dc 	.word	0x2003e3dc
   b65f0:	000bed10 	.word	0x000bed10

000b65f4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b65f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b65f8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b65fc:	4604      	mov	r4, r0
   b65fe:	4689      	mov	r9, r1
   b6600:	4616      	mov	r6, r2
   b6602:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6604:	f1b8 0f00 	cmp.w	r8, #0
   b6608:	d002      	beq.n	b6610 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b660a:	6840      	ldr	r0, [r0, #4]
   b660c:	f003 f844 	bl	b9698 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6610:	7a21      	ldrb	r1, [r4, #8]
   b6612:	6860      	ldr	r0, [r4, #4]
   b6614:	f003 f81d 	bl	b9652 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6618:	6860      	ldr	r0, [r4, #4]
   b661a:	6803      	ldr	r3, [r0, #0]
   b661c:	4649      	mov	r1, r9
   b661e:	689b      	ldr	r3, [r3, #8]
   b6620:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6622:	6860      	ldr	r0, [r4, #4]
   b6624:	2100      	movs	r1, #0
   b6626:	f003 f833 	bl	b9690 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b662a:	4605      	mov	r5, r0
   b662c:	bb00      	cbnz	r0, b6670 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b662e:	2301      	movs	r3, #1
   b6630:	7a21      	ldrb	r1, [r4, #8]
   b6632:	6860      	ldr	r0, [r4, #4]
   b6634:	463a      	mov	r2, r7
   b6636:	f002 fffa 	bl	b962e <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b663a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b663c:	4603      	mov	r3, r0
        if (count == num) {
   b663e:	d109      	bne.n	b6654 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6640:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6642:	42be      	cmp	r6, r7
   b6644:	d01c      	beq.n	b6680 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6646:	6860      	ldr	r0, [r4, #4]
   b6648:	6803      	ldr	r3, [r0, #0]
   b664a:	695b      	ldr	r3, [r3, #20]
   b664c:	4798      	blx	r3
   b664e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6652:	e7f6      	b.n	b6642 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6654:	490b      	ldr	r1, [pc, #44]	; (b6684 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6656:	480c      	ldr	r0, [pc, #48]	; (b6688 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6658:	464a      	mov	r2, r9
   b665a:	f7ff ff9b 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b665e:	f1b8 0f00 	cmp.w	r8, #0
   b6662:	d002      	beq.n	b666a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6664:	6860      	ldr	r0, [r4, #4]
   b6666:	f003 f820 	bl	b96aa <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b666a:	4628      	mov	r0, r5
   b666c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6670:	4603      	mov	r3, r0
   b6672:	4906      	ldr	r1, [pc, #24]	; (b668c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6674:	4804      	ldr	r0, [pc, #16]	; (b6688 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6676:	464a      	mov	r2, r9
   b6678:	f7ff ff8c 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b667c:	2500      	movs	r5, #0
   b667e:	e7ee      	b.n	b665e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6680:	2501      	movs	r5, #1
   b6682:	e7ec      	b.n	b665e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6684:	000beac0 	.word	0x000beac0
   b6688:	2003e3d8 	.word	0x2003e3d8
   b668c:	000beae5 	.word	0x000beae5

000b6690 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6690:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6692:	9300      	str	r3, [sp, #0]
   b6694:	2301      	movs	r3, #1
   b6696:	f7ff ffad 	bl	b65f4 <_ZN6AB180513readRegistersEhPhjb>
}
   b669a:	b003      	add	sp, #12
   b669c:	f85d fb04 	ldr.w	pc, [sp], #4

000b66a0 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b66a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b66a2:	8943      	ldrh	r3, [r0, #10]
   b66a4:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b66a6:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b66a8:	d010      	beq.n	b66cc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b66aa:	4e19      	ldr	r6, [pc, #100]	; (b6710 <_ZN6AB180510detectChipEv+0x70>)
   b66ac:	4d19      	ldr	r5, [pc, #100]	; (b6714 <_ZN6AB180510detectChipEv+0x74>)
   b66ae:	f002 f9c7 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b66b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b66b6:	d209      	bcs.n	b66cc <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b66b8:	8960      	ldrh	r0, [r4, #10]
   b66ba:	f005 fae3 	bl	bbc84 <digitalRead>
   b66be:	2801      	cmp	r0, #1
   b66c0:	d004      	beq.n	b66cc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b66c2:	4631      	mov	r1, r6
   b66c4:	4628      	mov	r0, r5
   b66c6:	f7fd fdcd 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b66ca:	e7f0      	b.n	b66ae <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b66cc:	2301      	movs	r3, #1
   b66ce:	f10d 0207 	add.w	r2, sp, #7
   b66d2:	2128      	movs	r1, #40	; 0x28
   b66d4:	4620      	mov	r0, r4
   b66d6:	f7ff ffdb 	bl	b6690 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b66da:	b930      	cbnz	r0, b66ea <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b66dc:	480d      	ldr	r0, [pc, #52]	; (b6714 <_ZN6AB180510detectChipEv+0x74>)
   b66de:	490e      	ldr	r1, [pc, #56]	; (b6718 <_ZN6AB180510detectChipEv+0x78>)
   b66e0:	f7fd fdc0 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b66e4:	2000      	movs	r0, #0
}
   b66e6:	b002      	add	sp, #8
   b66e8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b66ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b66ee:	2b18      	cmp	r3, #24
   b66f0:	d1f4      	bne.n	b66dc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b66f2:	2301      	movs	r3, #1
   b66f4:	f10d 0207 	add.w	r2, sp, #7
   b66f8:	2129      	movs	r1, #41	; 0x29
   b66fa:	4620      	mov	r0, r4
   b66fc:	f7ff ffc8 	bl	b6690 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6700:	2800      	cmp	r0, #0
   b6702:	d0eb      	beq.n	b66dc <_ZN6AB180510detectChipEv+0x3c>
   b6704:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6708:	2b05      	cmp	r3, #5
   b670a:	d1e7      	bne.n	b66dc <_ZN6AB180510detectChipEv+0x3c>
   b670c:	e7eb      	b.n	b66e6 <_ZN6AB180510detectChipEv+0x46>
   b670e:	bf00      	nop
   b6710:	000beb09 	.word	0x000beb09
   b6714:	2003e3d8 	.word	0x2003e3d8
   b6718:	000beb1e 	.word	0x000beb1e

000b671c <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b671c:	b507      	push	{r0, r1, r2, lr}
   b671e:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6720:	2200      	movs	r2, #0
   b6722:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6726:	f10d 0207 	add.w	r2, sp, #7
   b672a:	f7ff ffb1 	bl	b6690 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b672e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6732:	b003      	add	sp, #12
   b6734:	f85d fb04 	ldr.w	pc, [sp], #4

000b6738 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b673c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6740:	4604      	mov	r4, r0
   b6742:	460f      	mov	r7, r1
   b6744:	4615      	mov	r5, r2
   b6746:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6748:	f1b8 0f00 	cmp.w	r8, #0
   b674c:	d002      	beq.n	b6754 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b674e:	6840      	ldr	r0, [r0, #4]
   b6750:	f002 ffa2 	bl	b9698 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6754:	7a21      	ldrb	r1, [r4, #8]
   b6756:	6860      	ldr	r0, [r4, #4]
   b6758:	f002 ff7b 	bl	b9652 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b675c:	6860      	ldr	r0, [r4, #4]
   b675e:	6803      	ldr	r3, [r0, #0]
   b6760:	4639      	mov	r1, r7
   b6762:	689b      	ldr	r3, [r3, #8]
   b6764:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6766:	442e      	add	r6, r5
   b6768:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b676a:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b676c:	d005      	beq.n	b677a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b676e:	6803      	ldr	r3, [r0, #0]
   b6770:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6774:	689b      	ldr	r3, [r3, #8]
   b6776:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6778:	e7f6      	b.n	b6768 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b677a:	2101      	movs	r1, #1
   b677c:	f002 ff88 	bl	b9690 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6780:	4603      	mov	r3, r0
   b6782:	b170      	cbz	r0, b67a2 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6784:	4908      	ldr	r1, [pc, #32]	; (b67a8 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6786:	4809      	ldr	r0, [pc, #36]	; (b67ac <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6788:	463a      	mov	r2, r7
   b678a:	f7ff ff03 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b678e:	2500      	movs	r5, #0
    }

    if (lock) {
   b6790:	f1b8 0f00 	cmp.w	r8, #0
   b6794:	d002      	beq.n	b679c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6796:	6860      	ldr	r0, [r4, #4]
   b6798:	f002 ff87 	bl	b96aa <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b679c:	4628      	mov	r0, r5
   b679e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b67a2:	2501      	movs	r5, #1
   b67a4:	e7f4      	b.n	b6790 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b67a6:	bf00      	nop
   b67a8:	000beb2b 	.word	0x000beb2b
   b67ac:	2003e3d8 	.word	0x2003e3d8

000b67b0 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b67b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b67b2:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b67b6:	9300      	str	r3, [sp, #0]
   b67b8:	f10d 020f 	add.w	r2, sp, #15
   b67bc:	2301      	movs	r3, #1
   b67be:	f7ff ffbb 	bl	b6738 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b67c2:	b005      	add	sp, #20
   b67c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b67c8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b67c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b67ca:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b67cc:	460c      	mov	r4, r1
   b67ce:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b67d0:	491a      	ldr	r1, [pc, #104]	; (b683c <_ZN6AB18056setWDTEi+0x74>)
   b67d2:	481b      	ldr	r0, [pc, #108]	; (b6840 <_ZN6AB18056setWDTEi+0x78>)
   b67d4:	f7fd fd46 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b67d8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b67da:	bfb8      	it	lt
   b67dc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b67de:	b97c      	cbnz	r4, b6800 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b67e0:	2301      	movs	r3, #1
   b67e2:	4622      	mov	r2, r4
   b67e4:	211b      	movs	r1, #27
   b67e6:	4628      	mov	r0, r5
   b67e8:	f7ff ffe2 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b67ec:	4915      	ldr	r1, [pc, #84]	; (b6844 <_ZN6AB18056setWDTEi+0x7c>)
   b67ee:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b67f0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b67f2:	4813      	ldr	r0, [pc, #76]	; (b6840 <_ZN6AB18056setWDTEi+0x78>)
   b67f4:	f7ff fedc 	bl	b65b0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b67f8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b67fa:	616c      	str	r4, [r5, #20]
}
   b67fc:	4630      	mov	r0, r6
   b67fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6800:	2c03      	cmp	r4, #3
   b6802:	dd19      	ble.n	b6838 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6804:	10a7      	asrs	r7, r4, #2
   b6806:	2f1f      	cmp	r7, #31
   b6808:	bfa8      	it	ge
   b680a:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b680c:	00ba      	lsls	r2, r7, #2
   b680e:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6812:	2301      	movs	r3, #1
   b6814:	b2d2      	uxtb	r2, r2
   b6816:	211b      	movs	r1, #27
   b6818:	4628      	mov	r0, r5
   b681a:	f7ff ffc9 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b681e:	463a      	mov	r2, r7
   b6820:	4603      	mov	r3, r0
   b6822:	4909      	ldr	r1, [pc, #36]	; (b6848 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6824:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6826:	4806      	ldr	r0, [pc, #24]	; (b6840 <_ZN6AB18056setWDTEi+0x78>)
   b6828:	f7ff fec2 	bl	b65b0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b682c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6830:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6832:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6834:	616f      	str	r7, [r5, #20]
   b6836:	e7e1      	b.n	b67fc <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6838:	2701      	movs	r7, #1
   b683a:	e7e7      	b.n	b680c <_ZN6AB18056setWDTEi+0x44>
   b683c:	000beb50 	.word	0x000beb50
   b6840:	2003e3d8 	.word	0x2003e3d8
   b6844:	000beb5a 	.word	0x000beb5a
   b6848:	000beb76 	.word	0x000beb76

000b684c <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b684c:	4b06      	ldr	r3, [pc, #24]	; (b6868 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b684e:	681a      	ldr	r2, [r3, #0]
   b6850:	b14a      	cbz	r2, b6866 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6852:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6856:	430b      	orrs	r3, r1
   b6858:	d105      	bne.n	b6866 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b685a:	68d3      	ldr	r3, [r2, #12]
   b685c:	b11b      	cbz	r3, b6866 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b685e:	2100      	movs	r1, #0
   b6860:	4610      	mov	r0, r2
   b6862:	f7ff bfb1 	b.w	b67c8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6866:	4770      	bx	lr
   b6868:	2003e3dc 	.word	0x2003e3dc

000b686c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b686c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6870:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6874:	4605      	mov	r5, r0
   b6876:	4616      	mov	r6, r2
   b6878:	461f      	mov	r7, r3
    if (lock) {
   b687a:	f1b8 0f00 	cmp.w	r8, #0
   b687e:	d004      	beq.n	b688a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6880:	6840      	ldr	r0, [r0, #4]
   b6882:	9101      	str	r1, [sp, #4]
   b6884:	f002 ff08 	bl	b9698 <_ZN7TwoWire4lockEv>
   b6888:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b688a:	9101      	str	r1, [sp, #4]
   b688c:	2300      	movs	r3, #0
   b688e:	f10d 020f 	add.w	r2, sp, #15
   b6892:	4628      	mov	r0, r5
   b6894:	f7ff fefc 	bl	b6690 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6898:	4604      	mov	r4, r0
   b689a:	b160      	cbz	r0, b68b6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b689c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b68a0:	ea03 0206 	and.w	r2, r3, r6
   b68a4:	433a      	orrs	r2, r7
        if (newValue != value) {
   b68a6:	4293      	cmp	r3, r2
   b68a8:	d005      	beq.n	b68b6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b68aa:	9901      	ldr	r1, [sp, #4]
   b68ac:	2300      	movs	r3, #0
   b68ae:	4628      	mov	r0, r5
   b68b0:	f7ff ff7e 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
   b68b4:	4604      	mov	r4, r0
    if (lock) {
   b68b6:	f1b8 0f00 	cmp.w	r8, #0
   b68ba:	d002      	beq.n	b68c2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b68bc:	6868      	ldr	r0, [r5, #4]
   b68be:	f002 fef4 	bl	b96aa <_ZN7TwoWire6unlockEv>
}
   b68c2:	4620      	mov	r0, r4
   b68c4:	b004      	add	sp, #16
   b68c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b68ca <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b68ca:	b513      	push	{r0, r1, r4, lr}
   b68cc:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b68ce:	f10d 0207 	add.w	r2, sp, #7
   b68d2:	f7ff fedd 	bl	b6690 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b68d6:	b128      	cbz	r0, b68e4 <_ZN6AB180510isBitClearEhhb+0x1a>
   b68d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b68dc:	421c      	tst	r4, r3
   b68de:	bf0c      	ite	eq
   b68e0:	2001      	moveq	r0, #1
   b68e2:	2000      	movne	r0, #0
}
   b68e4:	b002      	add	sp, #8
   b68e6:	bd10      	pop	{r4, pc}

000b68e8 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b68e8:	b513      	push	{r0, r1, r4, lr}
   b68ea:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b68ec:	f10d 0207 	add.w	r2, sp, #7
   b68f0:	f7ff fece 	bl	b6690 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b68f4:	b128      	cbz	r0, b6902 <_ZN6AB18058isBitSetEhhb+0x1a>
   b68f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b68fa:	421c      	tst	r4, r3
   b68fc:	bf14      	ite	ne
   b68fe:	2001      	movne	r0, #1
   b6900:	2000      	moveq	r0, #0
}
   b6902:	b002      	add	sp, #8
   b6904:	bd10      	pop	{r4, pc}

000b6906 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6906:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6908:	43d2      	mvns	r2, r2
   b690a:	9300      	str	r3, [sp, #0]
   b690c:	b2d2      	uxtb	r2, r2
   b690e:	2300      	movs	r3, #0
   b6910:	f7ff ffac 	bl	b686c <_ZN6AB180512maskRegisterEhhhb>
}
   b6914:	b003      	add	sp, #12
   b6916:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b691c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b691c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b691e:	2301      	movs	r3, #1
   b6920:	f10d 0207 	add.w	r2, sp, #7
   b6924:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6926:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6928:	f7ff feb2 	bl	b6690 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b692c:	4605      	mov	r5, r0
   b692e:	b938      	cbnz	r0, b6940 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6930:	491e      	ldr	r1, [pc, #120]	; (b69ac <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6932:	481f      	ldr	r0, [pc, #124]	; (b69b0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6934:	22ad      	movs	r2, #173	; 0xad
   b6936:	f7ff fe2d 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
}
   b693a:	4628      	mov	r0, r5
   b693c:	b003      	add	sp, #12
   b693e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6940:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6944:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6948:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b694c:	d00b      	beq.n	b6966 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b694e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6950:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6952:	210f      	movs	r1, #15
   b6954:	4620      	mov	r0, r4
   b6956:	f7ff ffd6 	bl	b6906 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b695a:	4a16      	ldr	r2, [pc, #88]	; (b69b4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b695c:	4916      	ldr	r1, [pc, #88]	; (b69b8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b695e:	4814      	ldr	r0, [pc, #80]	; (b69b0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6960:	f7fd fc80 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6964:	e7e9      	b.n	b693a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6966:	2208      	movs	r2, #8
   b6968:	2117      	movs	r1, #23
   b696a:	4620      	mov	r0, r4
   b696c:	f7ff ffbc 	bl	b68e8 <_ZN6AB18058isBitSetEhhb>
   b6970:	b118      	cbz	r0, b697a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6972:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6974:	4a11      	ldr	r2, [pc, #68]	; (b69bc <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6976:	61e3      	str	r3, [r4, #28]
   b6978:	e7f0      	b.n	b695c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b697a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b697e:	071a      	lsls	r2, r3, #28
   b6980:	d509      	bpl.n	b6996 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6982:	2303      	movs	r3, #3
   b6984:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6986:	2208      	movs	r2, #8
   b6988:	2301      	movs	r3, #1
   b698a:	210f      	movs	r1, #15
   b698c:	4620      	mov	r0, r4
   b698e:	f7ff ffba 	bl	b6906 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6992:	4a0b      	ldr	r2, [pc, #44]	; (b69c0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6994:	e7e2      	b.n	b695c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6996:	075b      	lsls	r3, r3, #29
   b6998:	d5cf      	bpl.n	b693a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b699a:	2204      	movs	r2, #4
   b699c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b699e:	2301      	movs	r3, #1
   b69a0:	210f      	movs	r1, #15
   b69a2:	4620      	mov	r0, r4
   b69a4:	f7ff ffaf 	bl	b6906 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b69a8:	4a06      	ldr	r2, [pc, #24]	; (b69c4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b69aa:	e7d7      	b.n	b695c <_ZN6AB180516updateWakeReasonEv+0x40>
   b69ac:	000bebc9 	.word	0x000bebc9
   b69b0:	2003e3d8 	.word	0x2003e3d8
   b69b4:	000beb9a 	.word	0x000beb9a
   b69b8:	000bebe8 	.word	0x000bebe8
   b69bc:	000beba3 	.word	0x000beba3
   b69c0:	000bebb3 	.word	0x000bebb3
   b69c4:	000bebc3 	.word	0x000bebc3

000b69c8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b69c8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b69ca:	9300      	str	r3, [sp, #0]
   b69cc:	4613      	mov	r3, r2
   b69ce:	22ff      	movs	r2, #255	; 0xff
   b69d0:	f7ff ff4c 	bl	b686c <_ZN6AB180512maskRegisterEhhhb>
}
   b69d4:	b003      	add	sp, #12
   b69d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b69dc <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b69dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69de:	460f      	mov	r7, r1
   b69e0:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b69e2:	2301      	movs	r3, #1
   b69e4:	2200      	movs	r2, #0
   b69e6:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b69e8:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b69ea:	f7ff fee1 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b69ee:	4604      	mov	r4, r0
   b69f0:	b938      	cbnz	r0, b6a02 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b69f2:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b69f6:	491f      	ldr	r1, [pc, #124]	; (b6a74 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b69f8:	481f      	ldr	r0, [pc, #124]	; (b6a78 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b69fa:	f7ff fdcb 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
}
   b69fe:	4620      	mov	r0, r4
   b6a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6a02:	2301      	movs	r3, #1
   b6a04:	2223      	movs	r2, #35	; 0x23
   b6a06:	2118      	movs	r1, #24
   b6a08:	4628      	mov	r0, r5
   b6a0a:	f7ff fed1 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6a0e:	4604      	mov	r4, r0
   b6a10:	b910      	cbnz	r0, b6a18 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6a12:	f240 229b 	movw	r2, #667	; 0x29b
   b6a16:	e7ee      	b.n	b69f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6a18:	2fff      	cmp	r7, #255	; 0xff
   b6a1a:	bfa8      	it	ge
   b6a1c:	27ff      	movge	r7, #255	; 0xff
   b6a1e:	2f01      	cmp	r7, #1
   b6a20:	bfb8      	it	lt
   b6a22:	2701      	movlt	r7, #1
   b6a24:	2301      	movs	r3, #1
   b6a26:	b2fa      	uxtb	r2, r7
   b6a28:	2119      	movs	r1, #25
   b6a2a:	4628      	mov	r0, r5
   b6a2c:	f7ff fec0 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6a30:	4604      	mov	r4, r0
   b6a32:	b910      	cbnz	r0, b6a3a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6a34:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6a38:	e7dd      	b.n	b69f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b6a3a:	2301      	movs	r3, #1
   b6a3c:	2208      	movs	r2, #8
   b6a3e:	2112      	movs	r1, #18
   b6a40:	4628      	mov	r0, r5
   b6a42:	f7ff ffc1 	bl	b69c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6a46:	4604      	mov	r4, r0
   b6a48:	b910      	cbnz	r0, b6a50 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b6a4a:	f240 22af 	movw	r2, #687	; 0x2af
   b6a4e:	e7d2      	b.n	b69f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6a50:	2e00      	cmp	r6, #0
   b6a52:	bf14      	ite	ne
   b6a54:	2203      	movne	r2, #3
   b6a56:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6a58:	2301      	movs	r3, #1
   b6a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6a5e:	2118      	movs	r1, #24
   b6a60:	4628      	mov	r0, r5
   b6a62:	f7ff fea5 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6a66:	4604      	mov	r4, r0
   b6a68:	2800      	cmp	r0, #0
   b6a6a:	d1c8      	bne.n	b69fe <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6a6c:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6a70:	e7c1      	b.n	b69f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6a72:	bf00      	nop
   b6a74:	000bebf9 	.word	0x000bebf9
   b6a78:	2003e3d8 	.word	0x2003e3d8

000b6a7c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6a7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6a80:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6a82:	4605      	mov	r5, r0
   b6a84:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6a86:	484f      	ldr	r0, [pc, #316]	; (b6bc4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6a88:	494f      	ldr	r1, [pc, #316]	; (b6bc8 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6a8a:	f7fd fbeb 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b6a8e:	2100      	movs	r1, #0
   b6a90:	4628      	mov	r0, r5
   b6a92:	f7ff fe99 	bl	b67c8 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6a96:	4604      	mov	r4, r0
   b6a98:	b948      	cbnz	r0, b6aae <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6a9a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6a9e:	494b      	ldr	r1, [pc, #300]	; (b6bcc <_ZN6AB180513deepPowerDownEi+0x150>)
   b6aa0:	4848      	ldr	r0, [pc, #288]	; (b6bc4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6aa2:	f7ff fd77 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
}
   b6aa6:	4620      	mov	r0, r4
   b6aa8:	b003      	add	sp, #12
   b6aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b6aae:	2301      	movs	r3, #1
   b6ab0:	461a      	mov	r2, r3
   b6ab2:	2130      	movs	r1, #48	; 0x30
   b6ab4:	4628      	mov	r0, r5
   b6ab6:	f7ff ff87 	bl	b69c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6aba:	4604      	mov	r4, r0
   b6abc:	b910      	cbnz	r0, b6ac4 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b6abe:	f240 2205 	movw	r2, #517	; 0x205
   b6ac2:	e7ec      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6ac4:	2210      	movs	r2, #16
   b6ac6:	2301      	movs	r3, #1
   b6ac8:	4611      	mov	r1, r2
   b6aca:	4628      	mov	r0, r5
   b6acc:	f7ff ff1b 	bl	b6906 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b6ad0:	4604      	mov	r4, r0
   b6ad2:	b910      	cbnz	r0, b6ada <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6ad4:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6ad8:	e7e1      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6ada:	2301      	movs	r3, #1
   b6adc:	2226      	movs	r2, #38	; 0x26
   b6ade:	2113      	movs	r1, #19
   b6ae0:	4628      	mov	r0, r5
   b6ae2:	f7ff fe65 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6ae6:	4604      	mov	r4, r0
   b6ae8:	b910      	cbnz	r0, b6af0 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6aea:	f240 2213 	movw	r2, #531	; 0x213
   b6aee:	e7d6      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6af0:	2601      	movs	r6, #1
   b6af2:	9600      	str	r6, [sp, #0]
   b6af4:	4633      	mov	r3, r6
   b6af6:	22fc      	movs	r2, #252	; 0xfc
   b6af8:	2111      	movs	r1, #17
   b6afa:	4628      	mov	r0, r5
   b6afc:	f7ff feb6 	bl	b686c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6b00:	4604      	mov	r4, r0
   b6b02:	b910      	cbnz	r0, b6b0a <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6b04:	f240 221b 	movw	r2, #539	; 0x21b
   b6b08:	e7c9      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6b0a:	2200      	movs	r2, #0
   b6b0c:	4639      	mov	r1, r7
   b6b0e:	4628      	mov	r0, r5
   b6b10:	f7ff ff64 	bl	b69dc <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6b14:	4604      	mov	r4, r0
   b6b16:	b910      	cbnz	r0, b6b1e <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6b18:	f240 2222 	movw	r2, #546	; 0x222
   b6b1c:	e7bf      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6b1e:	9600      	str	r6, [sp, #0]
   b6b20:	2302      	movs	r3, #2
   b6b22:	2277      	movs	r2, #119	; 0x77
   b6b24:	2110      	movs	r1, #16
   b6b26:	4628      	mov	r0, r5
   b6b28:	f7ff fea0 	bl	b686c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6b2c:	4604      	mov	r4, r0
   b6b2e:	b910      	cbnz	r0, b6b36 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6b30:	f240 222b 	movw	r2, #555	; 0x22b
   b6b34:	e7b3      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6b36:	4633      	mov	r3, r6
   b6b38:	2204      	movs	r2, #4
   b6b3a:	211c      	movs	r1, #28
   b6b3c:	4628      	mov	r0, r5
   b6b3e:	f7ff ff43 	bl	b69c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6b42:	4604      	mov	r4, r0
   b6b44:	b910      	cbnz	r0, b6b4c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6b46:	f240 2232 	movw	r2, #562	; 0x232
   b6b4a:	e7a8      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6b4c:	9600      	str	r6, [sp, #0]
   b6b4e:	2318      	movs	r3, #24
   b6b50:	22e3      	movs	r2, #227	; 0xe3
   b6b52:	2111      	movs	r1, #17
   b6b54:	4628      	mov	r0, r5
   b6b56:	f7ff fe89 	bl	b686c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6b5a:	4604      	mov	r4, r0
   b6b5c:	b910      	cbnz	r0, b6b64 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6b5e:	f240 2239 	movw	r2, #569	; 0x239
   b6b62:	e79c      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6b64:	4633      	mov	r3, r6
   b6b66:	22c0      	movs	r2, #192	; 0xc0
   b6b68:	2117      	movs	r1, #23
   b6b6a:	4628      	mov	r0, r5
   b6b6c:	f7ff fe20 	bl	b67b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6b70:	4604      	mov	r4, r0
   b6b72:	b910      	cbnz	r0, b6b7a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6b74:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6b78:	e791      	b.n	b6a9e <_ZN6AB180513deepPowerDownEi+0x22>
   b6b7a:	f001 ff61 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6b7e:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6bd4 <_ZN6AB180513deepPowerDownEi+0x158>
   b6b82:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6bc4 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6b86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6b8a:	4606      	mov	r6, r0
   b6b8c:	434f      	muls	r7, r1
   b6b8e:	f001 ff57 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
   b6b92:	1b80      	subs	r0, r0, r6
   b6b94:	42b8      	cmp	r0, r7
   b6b96:	d20e      	bcs.n	b6bb6 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6b98:	2201      	movs	r2, #1
   b6b9a:	2117      	movs	r1, #23
   b6b9c:	4628      	mov	r0, r5
   b6b9e:	f7ff fdbd 	bl	b671c <_ZN6AB180512readRegisterEhb>
   b6ba2:	4649      	mov	r1, r9
   b6ba4:	4602      	mov	r2, r0
   b6ba6:	4640      	mov	r0, r8
   b6ba8:	f7fd fb5c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6bb0:	f002 fae8 	bl	b9184 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6bb4:	e7eb      	b.n	b6b8e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6bb6:	4906      	ldr	r1, [pc, #24]	; (b6bd0 <_ZN6AB180513deepPowerDownEi+0x154>)
   b6bb8:	4802      	ldr	r0, [pc, #8]	; (b6bc4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6bba:	f7ff fceb 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6bbe:	f004 fc6e 	bl	bb49e <_ZN11SystemClass5resetEv>
    return true;
   b6bc2:	e770      	b.n	b6aa6 <_ZN6AB180513deepPowerDownEi+0x2a>
   b6bc4:	2003e3d8 	.word	0x2003e3d8
   b6bc8:	000bec24 	.word	0x000bec24
   b6bcc:	000bec19 	.word	0x000bec19
   b6bd0:	000bec4a 	.word	0x000bec4a
   b6bd4:	000bec35 	.word	0x000bec35

000b6bd8 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6bd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6bdc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6be0:	4605      	mov	r5, r0
   b6be2:	460c      	mov	r4, r1
   b6be4:	4691      	mov	r9, r2
   b6be6:	461f      	mov	r7, r3
    if (lock) {
   b6be8:	f1ba 0f00 	cmp.w	sl, #0
   b6bec:	d002      	beq.n	b6bf4 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6bee:	6840      	ldr	r0, [r0, #4]
   b6bf0:	f002 fd52 	bl	b9698 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6bf4:	b307      	cbz	r7, b6c38 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6bf6:	2f20      	cmp	r7, #32
   b6bf8:	463e      	mov	r6, r7
   b6bfa:	bf28      	it	cs
   b6bfc:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6bfe:	2c7f      	cmp	r4, #127	; 0x7f
   b6c00:	d826      	bhi.n	b6c50 <_ZN6AB18057readRamEjPhjb+0x78>
   b6c02:	1933      	adds	r3, r6, r4
   b6c04:	2b80      	cmp	r3, #128	; 0x80
   b6c06:	d901      	bls.n	b6c0c <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6c08:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6c0c:	2301      	movs	r3, #1
   b6c0e:	2204      	movs	r2, #4
   b6c10:	213f      	movs	r1, #63	; 0x3f
   b6c12:	4628      	mov	r0, r5
   b6c14:	f7ff fe77 	bl	b6906 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6c18:	2300      	movs	r3, #0
   b6c1a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6c1e:	9300      	str	r3, [sp, #0]
   b6c20:	464a      	mov	r2, r9
   b6c22:	4633      	mov	r3, r6
   b6c24:	b2c9      	uxtb	r1, r1
   b6c26:	4628      	mov	r0, r5
   b6c28:	f7ff fce4 	bl	b65f4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6c2c:	4680      	mov	r8, r0
   b6c2e:	b128      	cbz	r0, b6c3c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6c30:	4434      	add	r4, r6
        dataLen -= count;
   b6c32:	1bbf      	subs	r7, r7, r6
        data += count;
   b6c34:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6c36:	e7dd      	b.n	b6bf4 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6c38:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6c3c:	f1ba 0f00 	cmp.w	sl, #0
   b6c40:	d002      	beq.n	b6c48 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6c42:	6868      	ldr	r0, [r5, #4]
   b6c44:	f002 fd31 	bl	b96aa <_ZN7TwoWire6unlockEv>
}
   b6c48:	4640      	mov	r0, r8
   b6c4a:	b002      	add	sp, #8
   b6c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6c50:	2301      	movs	r3, #1
   b6c52:	2204      	movs	r2, #4
   b6c54:	213f      	movs	r1, #63	; 0x3f
   b6c56:	4628      	mov	r0, r5
   b6c58:	f7ff feb6 	bl	b69c8 <_ZN6AB180514setRegisterBitEhhb>
   b6c5c:	e7dc      	b.n	b6c18 <_ZN6AB18057readRamEjPhjb+0x40>

000b6c5e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6c5e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6c62:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6c66:	4605      	mov	r5, r0
   b6c68:	460c      	mov	r4, r1
   b6c6a:	4691      	mov	r9, r2
   b6c6c:	461f      	mov	r7, r3
    if (lock) {
   b6c6e:	f1ba 0f00 	cmp.w	sl, #0
   b6c72:	d002      	beq.n	b6c7a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6c74:	6840      	ldr	r0, [r0, #4]
   b6c76:	f002 fd0f 	bl	b9698 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6c7a:	b307      	cbz	r7, b6cbe <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6c7c:	2f1f      	cmp	r7, #31
   b6c7e:	463e      	mov	r6, r7
   b6c80:	bf28      	it	cs
   b6c82:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6c84:	2c7f      	cmp	r4, #127	; 0x7f
   b6c86:	d826      	bhi.n	b6cd6 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6c88:	1933      	adds	r3, r6, r4
   b6c8a:	2b80      	cmp	r3, #128	; 0x80
   b6c8c:	d901      	bls.n	b6c92 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6c8e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6c92:	2301      	movs	r3, #1
   b6c94:	2204      	movs	r2, #4
   b6c96:	213f      	movs	r1, #63	; 0x3f
   b6c98:	4628      	mov	r0, r5
   b6c9a:	f7ff fe34 	bl	b6906 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6c9e:	2300      	movs	r3, #0
   b6ca0:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6ca4:	9300      	str	r3, [sp, #0]
   b6ca6:	464a      	mov	r2, r9
   b6ca8:	4633      	mov	r3, r6
   b6caa:	b2c9      	uxtb	r1, r1
   b6cac:	4628      	mov	r0, r5
   b6cae:	f7ff fd43 	bl	b6738 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6cb2:	4680      	mov	r8, r0
   b6cb4:	b128      	cbz	r0, b6cc2 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6cb6:	4434      	add	r4, r6
        dataLen -= count;
   b6cb8:	1bbf      	subs	r7, r7, r6
        data += count;
   b6cba:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6cbc:	e7dd      	b.n	b6c7a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6cbe:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6cc2:	f1ba 0f00 	cmp.w	sl, #0
   b6cc6:	d002      	beq.n	b6cce <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6cc8:	6868      	ldr	r0, [r5, #4]
   b6cca:	f002 fcee 	bl	b96aa <_ZN7TwoWire6unlockEv>
}
   b6cce:	4640      	mov	r0, r8
   b6cd0:	b002      	add	sp, #8
   b6cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6cd6:	2301      	movs	r3, #1
   b6cd8:	2204      	movs	r2, #4
   b6cda:	213f      	movs	r1, #63	; 0x3f
   b6cdc:	4628      	mov	r0, r5
   b6cde:	f7ff fe73 	bl	b69c8 <_ZN6AB180514setRegisterBitEhhb>
   b6ce2:	e7dc      	b.n	b6c9e <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6ce4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6ce4:	b530      	push	{r4, r5, lr}
   b6ce6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6ce8:	680d      	ldr	r5, [r1, #0]
   b6cea:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6cee:	9503      	str	r5, [sp, #12]
   b6cf0:	684d      	ldr	r5, [r1, #4]
   b6cf2:	9502      	str	r5, [sp, #8]
   b6cf4:	688d      	ldr	r5, [r1, #8]
   b6cf6:	9501      	str	r5, [sp, #4]
   b6cf8:	68c9      	ldr	r1, [r1, #12]
   b6cfa:	9100      	str	r1, [sp, #0]
   b6cfc:	3301      	adds	r3, #1
   b6cfe:	4904      	ldr	r1, [pc, #16]	; (b6d10 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6d00:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6d04:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6d06:	f004 fb63 	bl	bb3d0 <_ZN6String6formatEPKcz>
}
   b6d0a:	4620      	mov	r0, r4
   b6d0c:	b005      	add	sp, #20
   b6d0e:	bd30      	pop	{r4, r5, pc}
   b6d10:	000bec5c 	.word	0x000bec5c

000b6d14 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6d14:	0903      	lsrs	r3, r0, #4
}
   b6d16:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6d18:	f000 000f 	and.w	r0, r0, #15
}
   b6d1c:	fb02 0003 	mla	r0, r2, r3, r0
   b6d20:	4770      	bx	lr

000b6d22 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6d22:	b538      	push	{r3, r4, r5, lr}
   b6d24:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6d26:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6d28:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b6d2a:	f7ff fff3 	bl	b6d14 <_ZN6AB180510bcdToValueEh>
   b6d2e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6d30:	7860      	ldrb	r0, [r4, #1]
   b6d32:	f7ff ffef 	bl	b6d14 <_ZN6AB180510bcdToValueEh>
   b6d36:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6d38:	78a0      	ldrb	r0, [r4, #2]
   b6d3a:	f7ff ffeb 	bl	b6d14 <_ZN6AB180510bcdToValueEh>
   b6d3e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6d40:	78e0      	ldrb	r0, [r4, #3]
   b6d42:	f7ff ffe7 	bl	b6d14 <_ZN6AB180510bcdToValueEh>
   b6d46:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6d48:	7920      	ldrb	r0, [r4, #4]
   b6d4a:	f7ff ffe3 	bl	b6d14 <_ZN6AB180510bcdToValueEh>
   b6d4e:	3801      	subs	r0, #1
   b6d50:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6d52:	b92d      	cbnz	r5, b6d60 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6d54:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6d56:	7828      	ldrb	r0, [r5, #0]
   b6d58:	f7ff ffdc 	bl	b6d14 <_ZN6AB180510bcdToValueEh>
   b6d5c:	6188      	str	r0, [r1, #24]
}
   b6d5e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6d60:	7960      	ldrb	r0, [r4, #5]
   b6d62:	f7ff ffd7 	bl	b6d14 <_ZN6AB180510bcdToValueEh>
   b6d66:	3064      	adds	r0, #100	; 0x64
   b6d68:	1da5      	adds	r5, r4, #6
   b6d6a:	6148      	str	r0, [r1, #20]
   b6d6c:	e7f3      	b.n	b6d56 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6d70 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6d70:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6d72:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6d74:	b088      	sub	sp, #32
   b6d76:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6d78:	461a      	mov	r2, r3
   b6d7a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6d7c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6d7e:	f7ff fda4 	bl	b68ca <_ZN6AB180510isBitClearEhhb>
   b6d82:	b1f0      	cbz	r0, b6dc2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6d84:	2308      	movs	r3, #8
   b6d86:	2601      	movs	r6, #1
   b6d88:	4620      	mov	r0, r4
   b6d8a:	9600      	str	r6, [sp, #0]
   b6d8c:	eb0d 0203 	add.w	r2, sp, r3
   b6d90:	2100      	movs	r1, #0
   b6d92:	f7ff fc2f 	bl	b65f4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6d96:	4604      	mov	r4, r0
   b6d98:	b198      	cbz	r0, b6dc2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b6d9a:	4632      	mov	r2, r6
   b6d9c:	4629      	mov	r1, r5
   b6d9e:	f10d 0009 	add.w	r0, sp, #9
   b6da2:	f7ff ffbe 	bl	b6d22 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6da6:	a804      	add	r0, sp, #16
   b6da8:	f7ff ff9c 	bl	b6ce4 <_ZN6AB180510tmToStringEPK2tm>
   b6dac:	4808      	ldr	r0, [pc, #32]	; (b6dd0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b6dae:	9a04      	ldr	r2, [sp, #16]
   b6db0:	4908      	ldr	r1, [pc, #32]	; (b6dd4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6db2:	f7fd fa57 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6db6:	a804      	add	r0, sp, #16
   b6db8:	f004 fa42 	bl	bb240 <_ZN6StringD1Ev>
}
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	b008      	add	sp, #32
   b6dc0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b6dc2:	2224      	movs	r2, #36	; 0x24
   b6dc4:	2100      	movs	r1, #0
   b6dc6:	4628      	mov	r0, r5
   b6dc8:	f006 fe52 	bl	bda70 <memset>
   b6dcc:	2400      	movs	r4, #0
   b6dce:	e7f5      	b.n	b6dbc <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b6dd0:	2003e3d8 	.word	0x2003e3d8
   b6dd4:	000bec7a 	.word	0x000bec7a

000b6dd8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b6dd8:	b530      	push	{r4, r5, lr}
   b6dda:	b08b      	sub	sp, #44	; 0x2c
   b6ddc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6dde:	a901      	add	r1, sp, #4
   b6de0:	f7ff ffc6 	bl	b6d70 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6de4:	4604      	mov	r4, r0
   b6de6:	b120      	cbz	r0, b6df2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b6de8:	a801      	add	r0, sp, #4
   b6dea:	f002 f9b7 	bl	b915c <mktime>
   b6dee:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6df2:	4620      	mov	r0, r4
   b6df4:	b00b      	add	sp, #44	; 0x2c
   b6df6:	bd30      	pop	{r4, r5, pc}

000b6df8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b6df8:	230a      	movs	r3, #10
   b6dfa:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6dfe:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6e02:	fb91 f2f3 	sdiv	r2, r1, r3
   b6e06:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b6e0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6e0e:	b2c0      	uxtb	r0, r0
   b6e10:	4770      	bx	lr

000b6e12 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6e12:	b570      	push	{r4, r5, r6, lr}
   b6e14:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6e16:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6e18:	460c      	mov	r4, r1
   b6e1a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6e1c:	f7ff ffec 	bl	b6df8 <_ZN6AB180510valueToBcdEi>
   b6e20:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6e22:	6868      	ldr	r0, [r5, #4]
   b6e24:	f7ff ffe8 	bl	b6df8 <_ZN6AB180510valueToBcdEi>
   b6e28:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b6e2a:	68a8      	ldr	r0, [r5, #8]
   b6e2c:	f7ff ffe4 	bl	b6df8 <_ZN6AB180510valueToBcdEi>
   b6e30:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6e32:	68e8      	ldr	r0, [r5, #12]
   b6e34:	f7ff ffe0 	bl	b6df8 <_ZN6AB180510valueToBcdEi>
   b6e38:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6e3a:	6928      	ldr	r0, [r5, #16]
   b6e3c:	3001      	adds	r0, #1
   b6e3e:	f7ff ffdb 	bl	b6df8 <_ZN6AB180510valueToBcdEi>
   b6e42:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6e44:	b92e      	cbnz	r6, b6e52 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6e46:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6e48:	69a8      	ldr	r0, [r5, #24]
   b6e4a:	f7ff ffd5 	bl	b6df8 <_ZN6AB180510valueToBcdEi>
   b6e4e:	7030      	strb	r0, [r6, #0]
}
   b6e50:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6e52:	696a      	ldr	r2, [r5, #20]
   b6e54:	2364      	movs	r3, #100	; 0x64
   b6e56:	fb92 f0f3 	sdiv	r0, r2, r3
   b6e5a:	fb03 2010 	mls	r0, r3, r0, r2
   b6e5e:	f7ff ffcb 	bl	b6df8 <_ZN6AB180510valueToBcdEi>
   b6e62:	1da6      	adds	r6, r4, #6
   b6e64:	7160      	strb	r0, [r4, #5]
   b6e66:	e7ef      	b.n	b6e48 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6e68 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e6a:	b087      	sub	sp, #28
   b6e6c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6e6e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6e70:	4616      	mov	r6, r2
   b6e72:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6e74:	f7ff ff36 	bl	b6ce4 <_ZN6AB180510tmToStringEPK2tm>
   b6e78:	481e      	ldr	r0, [pc, #120]	; (b6ef4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6e7a:	9a02      	ldr	r2, [sp, #8]
   b6e7c:	491e      	ldr	r1, [pc, #120]	; (b6ef8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b6e7e:	f7fd f9f1 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6e82:	a802      	add	r0, sp, #8
   b6e84:	f004 f9dc 	bl	bb240 <_ZN6StringD1Ev>
    if (lock) {
   b6e88:	b116      	cbz	r6, b6e90 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6e8a:	6868      	ldr	r0, [r5, #4]
   b6e8c:	f002 fc04 	bl	b9698 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6e90:	4620      	mov	r0, r4
   b6e92:	2201      	movs	r2, #1
   b6e94:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6e98:	2700      	movs	r7, #0
   b6e9a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b6e9e:	f7ff ffb8 	bl	b6e12 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6ea2:	2301      	movs	r3, #1
   b6ea4:	461a      	mov	r2, r3
   b6ea6:	2110      	movs	r1, #16
   b6ea8:	4628      	mov	r0, r5
   b6eaa:	f7ff fd8d 	bl	b69c8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b6eae:	4604      	mov	r4, r0
   b6eb0:	b1e8      	cbz	r0, b6eee <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6eb2:	2308      	movs	r3, #8
   b6eb4:	9700      	str	r7, [sp, #0]
   b6eb6:	eb0d 0203 	add.w	r2, sp, r3
   b6eba:	4639      	mov	r1, r7
   b6ebc:	4628      	mov	r0, r5
   b6ebe:	f7ff fc3b 	bl	b6738 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b6ec2:	4604      	mov	r4, r0
   b6ec4:	b160      	cbz	r0, b6ee0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6ec6:	2301      	movs	r3, #1
   b6ec8:	461a      	mov	r2, r3
   b6eca:	2110      	movs	r1, #16
   b6ecc:	4628      	mov	r0, r5
   b6ece:	f7ff fd1a 	bl	b6906 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b6ed2:	b116      	cbz	r6, b6eda <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b6ed4:	6868      	ldr	r0, [r5, #4]
   b6ed6:	f002 fbe8 	bl	b96aa <_ZN7TwoWire6unlockEv>
}
   b6eda:	4620      	mov	r0, r4
   b6edc:	b007      	add	sp, #28
   b6ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6ee0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6ee4:	4905      	ldr	r1, [pc, #20]	; (b6efc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b6ee6:	4803      	ldr	r0, [pc, #12]	; (b6ef4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6ee8:	f7ff fb54 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
   b6eec:	e7f1      	b.n	b6ed2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6eee:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6ef2:	e7f7      	b.n	b6ee4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6ef4:	2003e3d8 	.word	0x2003e3d8
   b6ef8:	000bec88 	.word	0x000bec88
   b6efc:	000bec96 	.word	0x000bec96

000b6f00 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6f00:	b513      	push	{r0, r1, r4, lr}
   b6f02:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6f04:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6f06:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b6f0a:	f006 fd63 	bl	bd9d4 <gmtime>
    return setRtcFromTm(tm, lock);
   b6f0e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6f12:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6f14:	4620      	mov	r0, r4
   b6f16:	f7ff ffa7 	bl	b6e68 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6f1a:	b002      	add	sp, #8
   b6f1c:	bd10      	pop	{r4, pc}
	...

000b6f20 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6f22:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6f24:	b089      	sub	sp, #36	; 0x24
   b6f26:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6f28:	bb75      	cbnz	r5, b6f88 <_ZN6AB18054loopEv+0x68>
   b6f2a:	f004 fc7d 	bl	bb828 <_ZN9TimeClass7isValidEv>
   b6f2e:	b358      	cbz	r0, b6f88 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b6f30:	2600      	movs	r6, #0
   b6f32:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6f34:	a904      	add	r1, sp, #16
   b6f36:	4628      	mov	r0, r5
        tm = 0;
   b6f38:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6f3c:	f002 f836 	bl	b8fac <spark_sync_time_last>
   b6f40:	b310      	cbz	r0, b6f88 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6f42:	2501      	movs	r5, #1
   b6f44:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6f46:	f004 fc8c 	bl	bb862 <_ZN9TimeClass3nowEv>
   b6f4a:	17c3      	asrs	r3, r0, #31
   b6f4c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6f50:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6f52:	9500      	str	r5, [sp, #0]
   b6f54:	4620      	mov	r0, r4
   b6f56:	f7ff ffd3 	bl	b6f00 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6f5a:	a902      	add	r1, sp, #8
   b6f5c:	4620      	mov	r0, r4
        time = 0;
   b6f5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6f62:	f7ff ff39 	bl	b6dd8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6f66:	4b13      	ldr	r3, [pc, #76]	; (b6fb4 <_ZN6AB18054loopEv+0x94>)
   b6f68:	4913      	ldr	r1, [pc, #76]	; (b6fb8 <_ZN6AB18054loopEv+0x98>)
   b6f6a:	681b      	ldr	r3, [r3, #0]
   b6f6c:	9300      	str	r3, [sp, #0]
   b6f6e:	a804      	add	r0, sp, #16
   b6f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6f74:	f004 fc16 	bl	bb7a4 <_ZN9TimeClass6formatExPKc>
   b6f78:	4810      	ldr	r0, [pc, #64]	; (b6fbc <_ZN6AB18054loopEv+0x9c>)
   b6f7a:	9a04      	ldr	r2, [sp, #16]
   b6f7c:	4910      	ldr	r1, [pc, #64]	; (b6fc0 <_ZN6AB18054loopEv+0xa0>)
   b6f7e:	f7fd f971 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6f82:	a804      	add	r0, sp, #16
   b6f84:	f004 f95c 	bl	bb240 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6f88:	6963      	ldr	r3, [r4, #20]
   b6f8a:	b18b      	cbz	r3, b6fb0 <_ZN6AB18054loopEv+0x90>
   b6f8c:	f001 fd58 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6f90:	6923      	ldr	r3, [r4, #16]
   b6f92:	1ac0      	subs	r0, r0, r3
   b6f94:	6963      	ldr	r3, [r4, #20]
   b6f96:	4298      	cmp	r0, r3
   b6f98:	d30a      	bcc.n	b6fb0 <_ZN6AB18054loopEv+0x90>
   b6f9a:	f001 fd51 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6f9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6fa2:	6120      	str	r0, [r4, #16]
            setWDT();
   b6fa4:	4620      	mov	r0, r4
}
   b6fa6:	b009      	add	sp, #36	; 0x24
   b6fa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6fac:	f7ff bc0c 	b.w	b67c8 <_ZN6AB18056setWDTEi>
}
   b6fb0:	b009      	add	sp, #36	; 0x24
   b6fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6fb4:	2003dec8 	.word	0x2003dec8
   b6fb8:	2003e6ac 	.word	0x2003e6ac
   b6fbc:	2003e3d8 	.word	0x2003e3d8
   b6fc0:	000becb1 	.word	0x000becb1

000b6fc4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6fc4:	b530      	push	{r4, r5, lr}
   b6fc6:	4604      	mov	r4, r0
   b6fc8:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6fca:	b111      	cbz	r1, b6fd2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6fcc:	6840      	ldr	r0, [r0, #4]
   b6fce:	f002 fb11 	bl	b95f4 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6fd2:	4620      	mov	r0, r4
   b6fd4:	f7ff fb64 	bl	b66a0 <_ZN6AB180510detectChipEv>
   b6fd8:	ad06      	add	r5, sp, #24
   b6fda:	2800      	cmp	r0, #0
   b6fdc:	d037      	beq.n	b704e <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6fde:	4620      	mov	r0, r4
   b6fe0:	f7ff fc9c 	bl	b691c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6fe4:	2301      	movs	r3, #1
   b6fe6:	461a      	mov	r2, r3
   b6fe8:	2110      	movs	r1, #16
   b6fea:	4620      	mov	r0, r4
   b6fec:	f7ff fc6d 	bl	b68ca <_ZN6AB180510isBitClearEhhb>
   b6ff0:	b1d8      	cbz	r0, b702a <_ZN6AB18055setupEb+0x66>
   b6ff2:	f004 fc19 	bl	bb828 <_ZN9TimeClass7isValidEv>
   b6ff6:	b9c0      	cbnz	r0, b702a <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6ff8:	a902      	add	r1, sp, #8
   b6ffa:	4620      	mov	r0, r4
   b6ffc:	f7ff feec 	bl	b6dd8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b7000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b7004:	f004 fb15 	bl	bb632 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b7008:	4b13      	ldr	r3, [pc, #76]	; (b7058 <_ZN6AB18055setupEb+0x94>)
   b700a:	4914      	ldr	r1, [pc, #80]	; (b705c <_ZN6AB18055setupEb+0x98>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	9300      	str	r3, [sp, #0]
   b7010:	4628      	mov	r0, r5
   b7012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7016:	f004 fbc5 	bl	bb7a4 <_ZN9TimeClass6formatExPKc>
   b701a:	4811      	ldr	r0, [pc, #68]	; (b7060 <_ZN6AB18055setupEb+0x9c>)
   b701c:	9a06      	ldr	r2, [sp, #24]
   b701e:	4911      	ldr	r1, [pc, #68]	; (b7064 <_ZN6AB18055setupEb+0xa0>)
   b7020:	f7fd f920 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b7024:	4628      	mov	r0, r5
   b7026:	f004 f90b 	bl	bb240 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b702a:	4b0f      	ldr	r3, [pc, #60]	; (b7068 <_ZN6AB18055setupEb+0xa4>)
   b702c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b702e:	4b0f      	ldr	r3, [pc, #60]	; (b706c <_ZN6AB18055setupEb+0xa8>)
   b7030:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b7032:	4b0f      	ldr	r3, [pc, #60]	; (b7070 <_ZN6AB18055setupEb+0xac>)
   b7034:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b7036:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b703a:	2300      	movs	r3, #0
   b703c:	a802      	add	r0, sp, #8
   b703e:	9500      	str	r5, [sp, #0]
   b7040:	f7fd fd3a 	bl	b4ab8 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b7044:	4628      	mov	r0, r5
   b7046:	f7fd f8c3 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
}
   b704a:	b00b      	add	sp, #44	; 0x2c
   b704c:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b704e:	4909      	ldr	r1, [pc, #36]	; (b7074 <_ZN6AB18055setupEb+0xb0>)
   b7050:	4803      	ldr	r0, [pc, #12]	; (b7060 <_ZN6AB18055setupEb+0x9c>)
   b7052:	f7ff fa9f 	bl	b6594 <_ZNK5spark6Logger5errorEPKcz>
   b7056:	e7e8      	b.n	b702a <_ZN6AB18055setupEb+0x66>
   b7058:	2003dec8 	.word	0x2003dec8
   b705c:	2003e6ac 	.word	0x2003e6ac
   b7060:	2003e3d8 	.word	0x2003e3d8
   b7064:	000becc7 	.word	0x000becc7
   b7068:	000b684d 	.word	0x000b684d
   b706c:	000b417f 	.word	0x000b417f
   b7070:	000b416b 	.word	0x000b416b
   b7074:	000bece4 	.word	0x000bece4

000b7078 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7078:	4b01      	ldr	r3, [pc, #4]	; (b7080 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b707a:	4a02      	ldr	r2, [pc, #8]	; (b7084 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b707c:	601a      	str	r2, [r3, #0]
}
   b707e:	4770      	bx	lr
   b7080:	2003e3d8 	.word	0x2003e3d8
   b7084:	000becfc 	.word	0x000becfc

000b7088 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b7088:	4770      	bx	lr

000b708a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b708a:	b510      	push	{r4, lr}
}
   b708c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b708e:	4604      	mov	r4, r0
}
   b7090:	f7fd f805 	bl	b409e <_ZdlPvj>
   b7094:	4620      	mov	r0, r4
   b7096:	bd10      	pop	{r4, pc}

000b7098 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b7098:	6803      	ldr	r3, [r0, #0]
   b709a:	b2c9      	uxtb	r1, r1
   b709c:	689b      	ldr	r3, [r3, #8]
   b709e:	4718      	bx	r3

000b70a0 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b70a0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b70a2:	4d03      	ldr	r5, [pc, #12]	; (b70b0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b70a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b70a8:	e9c0 5100 	strd	r5, r1, [r0]
}
   b70ac:	bd30      	pop	{r4, r5, pc}
   b70ae:	bf00      	nop
   b70b0:	000bed28 	.word	0x000bed28

000b70b4 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b70b4:	6840      	ldr	r0, [r0, #4]
   b70b6:	f002 ba9d 	b.w	b95f4 <_ZN7TwoWire5beginEv>

000b70ba <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b70ba:	b510      	push	{r4, lr}
   b70bc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b70be:	6800      	ldr	r0, [r0, #0]
   b70c0:	f002 faf3 	bl	b96aa <_ZN7TwoWire6unlockEv>
   b70c4:	4620      	mov	r0, r4
   b70c6:	bd10      	pop	{r4, pc}

000b70c8 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b70c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b70cc:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b70ce:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b70d0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b70d2:	460d      	mov	r5, r1
   b70d4:	4616      	mov	r6, r2
   b70d6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b70d8:	f002 fade 	bl	b9698 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b70dc:	b1a7      	cbz	r7, b7108 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b70de:	68e1      	ldr	r1, [r4, #12]
   b70e0:	6860      	ldr	r0, [r4, #4]
   b70e2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b70e6:	f002 fab8 	bl	b965a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b70ea:	0a29      	lsrs	r1, r5, #8
   b70ec:	6860      	ldr	r0, [r4, #4]
   b70ee:	f7ff ffd3 	bl	b7098 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b70f2:	4629      	mov	r1, r5
   b70f4:	6860      	ldr	r0, [r4, #4]
   b70f6:	f7ff ffcf 	bl	b7098 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b70fa:	6860      	ldr	r0, [r4, #4]
   b70fc:	2100      	movs	r1, #0
   b70fe:	f002 fac7 	bl	b9690 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7102:	b148      	cbz	r0, b7118 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b7104:	2400      	movs	r4, #0
   b7106:	e000      	b.n	b710a <_ZN6MB85RC8readDataEjPhj+0x42>
   b7108:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b710a:	a801      	add	r0, sp, #4
   b710c:	f7ff ffd5 	bl	b70ba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b7110:	4620      	mov	r0, r4
   b7112:	b003      	add	sp, #12
   b7114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b7118:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b711a:	7b21      	ldrb	r1, [r4, #12]
   b711c:	6860      	ldr	r0, [r4, #4]
   b711e:	46b8      	mov	r8, r7
   b7120:	bf28      	it	cs
   b7122:	f04f 0820 	movcs.w	r8, #32
   b7126:	2301      	movs	r3, #1
   b7128:	4642      	mov	r2, r8
   b712a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b712e:	f002 fa7e 	bl	b962e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b7132:	f004 fe07 	bl	bbd44 <_Z19__fetch_global_Wirev>
   b7136:	6803      	ldr	r3, [r0, #0]
   b7138:	691b      	ldr	r3, [r3, #16]
   b713a:	4798      	blx	r3
   b713c:	4540      	cmp	r0, r8
   b713e:	dbe1      	blt.n	b7104 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b7140:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b7144:	f004 fdfe 	bl	bbd44 <_Z19__fetch_global_Wirev>
   b7148:	6803      	ldr	r3, [r0, #0]
   b714a:	695b      	ldr	r3, [r3, #20]
   b714c:	4798      	blx	r3
   b714e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b7152:	454e      	cmp	r6, r9
   b7154:	d1f6      	bne.n	b7144 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b7156:	4445      	add	r5, r8
				dataLen--;
   b7158:	eba7 0708 	sub.w	r7, r7, r8
   b715c:	e7be      	b.n	b70dc <_ZN6MB85RC8readDataEjPhj+0x14>

000b715e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b715e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7162:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7164:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7166:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7168:	460e      	mov	r6, r1
   b716a:	4690      	mov	r8, r2
   b716c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b716e:	f002 fa93 	bl	b9698 <_ZN7TwoWire4lockEv>
   b7172:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b7176:	f1b9 0f00 	cmp.w	r9, #0
   b717a:	d02a      	beq.n	b71d2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b717c:	b34d      	cbz	r5, b71d2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b717e:	68e1      	ldr	r1, [r4, #12]
   b7180:	6860      	ldr	r0, [r4, #4]
   b7182:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7186:	f002 fa68 	bl	b965a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b718a:	0a31      	lsrs	r1, r6, #8
   b718c:	6860      	ldr	r0, [r4, #4]
   b718e:	f7ff ff83 	bl	b7098 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7192:	6860      	ldr	r0, [r4, #4]
   b7194:	4631      	mov	r1, r6
   b7196:	f7ff ff7f 	bl	b7098 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b719a:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b719e:	4647      	mov	r7, r8
   b71a0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b71a4:	6860      	ldr	r0, [r4, #4]
   b71a6:	f817 1b01 	ldrb.w	r1, [r7], #1
   b71aa:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b71ac:	3d01      	subs	r5, #1
				wire.write(*data);
   b71ae:	689b      	ldr	r3, [r3, #8]
   b71b0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b71b2:	4555      	cmp	r5, sl
   b71b4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b71b8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b71ba:	d001      	beq.n	b71c0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b71bc:	2d00      	cmp	r5, #0
   b71be:	d1f1      	bne.n	b71a4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b71c0:	6860      	ldr	r0, [r4, #4]
   b71c2:	2101      	movs	r1, #1
   b71c4:	f002 fa64 	bl	b9690 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b71c8:	2800      	cmp	r0, #0
   b71ca:	d0d7      	beq.n	b717c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b71cc:	f04f 0900 	mov.w	r9, #0
   b71d0:	e7d1      	b.n	b7176 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b71d2:	a801      	add	r0, sp, #4
   b71d4:	f7ff ff71 	bl	b70ba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b71d8:	4648      	mov	r0, r9
   b71da:	b003      	add	sp, #12
   b71dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b71e0 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b71e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b71e4:	b08b      	sub	sp, #44	; 0x2c
   b71e6:	460e      	mov	r6, r1
   b71e8:	4615      	mov	r5, r2
   b71ea:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b71ec:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b71ee:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b71f0:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b71f2:	f002 fa51 	bl	b9698 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b71f6:	42ae      	cmp	r6, r5
   b71f8:	d229      	bcs.n	b724e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b71fa:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b71fc:	4425      	add	r5, r4
			while(numBytes > 0) {
   b71fe:	b18c      	cbz	r4, b7224 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b7200:	2c1e      	cmp	r4, #30
   b7202:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b7204:	f8d8 3000 	ldr.w	r3, [r8]
   b7208:	bf28      	it	cs
   b720a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b720c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b720e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7212:	aa02      	add	r2, sp, #8
   b7214:	463b      	mov	r3, r7
   b7216:	4631      	mov	r1, r6
   b7218:	4640      	mov	r0, r8
				framAddrTo -= count;
   b721a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b721c:	47c8      	blx	r9
				if (!result) {
   b721e:	b948      	cbnz	r0, b7234 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7220:	2400      	movs	r4, #0
   b7222:	e000      	b.n	b7226 <_ZN6MB85RC8moveDataEjjj+0x46>
   b7224:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b7226:	a801      	add	r0, sp, #4
   b7228:	f7ff ff47 	bl	b70ba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b722c:	4620      	mov	r0, r4
   b722e:	b00b      	add	sp, #44	; 0x2c
   b7230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b7234:	f8d8 3000 	ldr.w	r3, [r8]
   b7238:	aa02      	add	r2, sp, #8
   b723a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b723e:	4629      	mov	r1, r5
   b7240:	463b      	mov	r3, r7
   b7242:	4640      	mov	r0, r8
   b7244:	47c8      	blx	r9
				if (!result) {
   b7246:	2800      	cmp	r0, #0
   b7248:	d0ea      	beq.n	b7220 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b724a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b724c:	e7d7      	b.n	b71fe <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b724e:	d9e9      	bls.n	b7224 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b7250:	2c00      	cmp	r4, #0
   b7252:	d0e7      	beq.n	b7224 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b7254:	f8d8 3000 	ldr.w	r3, [r8]
   b7258:	2c1e      	cmp	r4, #30
   b725a:	4627      	mov	r7, r4
   b725c:	bf28      	it	cs
   b725e:	271e      	movcs	r7, #30
   b7260:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7264:	aa02      	add	r2, sp, #8
   b7266:	463b      	mov	r3, r7
   b7268:	4631      	mov	r1, r6
   b726a:	4640      	mov	r0, r8
   b726c:	47c8      	blx	r9
				if (!result) {
   b726e:	2800      	cmp	r0, #0
   b7270:	d0d6      	beq.n	b7220 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b7272:	f8d8 3000 	ldr.w	r3, [r8]
   b7276:	aa02      	add	r2, sp, #8
   b7278:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b727c:	4629      	mov	r1, r5
   b727e:	463b      	mov	r3, r7
   b7280:	4640      	mov	r0, r8
   b7282:	47c8      	blx	r9
				if (!result) {
   b7284:	2800      	cmp	r0, #0
   b7286:	d0cb      	beq.n	b7220 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b7288:	443e      	add	r6, r7
				framAddrTo += count;
   b728a:	443d      	add	r5, r7
				numBytes -= count;
   b728c:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b728e:	e7df      	b.n	b7250 <_ZN6MB85RC8moveDataEjjj+0x70>

000b7290 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b7290:	6001      	str	r1, [r0, #0]
   b7292:	7102      	strb	r2, [r0, #4]
{
}
   b7294:	4770      	bx	lr

000b7296 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b7296:	6800      	ldr	r0, [r0, #0]
   b7298:	6803      	ldr	r3, [r0, #0]
   b729a:	68db      	ldr	r3, [r3, #12]
   b729c:	4718      	bx	r3

000b729e <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b729e:	6800      	ldr	r0, [r0, #0]
   b72a0:	6803      	ldr	r3, [r0, #0]
   b72a2:	6a1b      	ldr	r3, [r3, #32]
   b72a4:	4718      	bx	r3

000b72a6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b72a6:	6800      	ldr	r0, [r0, #0]
   b72a8:	6803      	ldr	r3, [r0, #0]
   b72aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b72ac:	4718      	bx	r3

000b72ae <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b72ae:	7900      	ldrb	r0, [r0, #4]
   b72b0:	4770      	bx	lr

000b72b2 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b72b2:	6800      	ldr	r0, [r0, #0]
   b72b4:	6803      	ldr	r3, [r0, #0]
   b72b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b72b8:	4718      	bx	r3

000b72ba <_ZN10RHDatagram6sendtoEPhhh>:
{
   b72ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b72bc:	4605      	mov	r5, r0
   b72be:	460c      	mov	r4, r1
    setHeaderTo(address);
   b72c0:	4619      	mov	r1, r3
{
   b72c2:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b72c4:	f7ff fff5 	bl	b72b2 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b72c8:	6828      	ldr	r0, [r5, #0]
   b72ca:	9a01      	ldr	r2, [sp, #4]
   b72cc:	6803      	ldr	r3, [r0, #0]
   b72ce:	695b      	ldr	r3, [r3, #20]
   b72d0:	4621      	mov	r1, r4
}
   b72d2:	b003      	add	sp, #12
   b72d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b72d8:	4718      	bx	r3

000b72da <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b72da:	6800      	ldr	r0, [r0, #0]
   b72dc:	6803      	ldr	r3, [r0, #0]
   b72de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b72e0:	4718      	bx	r3

000b72e2 <_ZN10RHDatagram14setThisAddressEh>:
{
   b72e2:	b538      	push	{r3, r4, r5, lr}
   b72e4:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b72e6:	6800      	ldr	r0, [r0, #0]
   b72e8:	6803      	ldr	r3, [r0, #0]
{
   b72ea:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b72ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b72ee:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b72f0:	4629      	mov	r1, r5
   b72f2:	4620      	mov	r0, r4
   b72f4:	f7ff fff1 	bl	b72da <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b72f8:	7125      	strb	r5, [r4, #4]
}
   b72fa:	bd38      	pop	{r3, r4, r5, pc}

000b72fc <_ZN10RHDatagram4initEv>:
{
   b72fc:	b538      	push	{r3, r4, r5, lr}
   b72fe:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b7300:	6800      	ldr	r0, [r0, #0]
   b7302:	6803      	ldr	r3, [r0, #0]
   b7304:	689b      	ldr	r3, [r3, #8]
   b7306:	4798      	blx	r3
    if (ret)
   b7308:	4605      	mov	r5, r0
   b730a:	b118      	cbz	r0, b7314 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b730c:	7921      	ldrb	r1, [r4, #4]
   b730e:	4620      	mov	r0, r4
   b7310:	f7ff ffe7 	bl	b72e2 <_ZN10RHDatagram14setThisAddressEh>
}
   b7314:	4628      	mov	r0, r5
   b7316:	bd38      	pop	{r3, r4, r5, pc}

000b7318 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b7318:	6800      	ldr	r0, [r0, #0]
   b731a:	6803      	ldr	r3, [r0, #0]
   b731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b731e:	4718      	bx	r3

000b7320 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b7320:	6800      	ldr	r0, [r0, #0]
   b7322:	6803      	ldr	r3, [r0, #0]
   b7324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7326:	4718      	bx	r3

000b7328 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b7328:	6800      	ldr	r0, [r0, #0]
   b732a:	6803      	ldr	r3, [r0, #0]
   b732c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b732e:	4718      	bx	r3

000b7330 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b7330:	6800      	ldr	r0, [r0, #0]
   b7332:	6803      	ldr	r3, [r0, #0]
   b7334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7336:	4718      	bx	r3

000b7338 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b7338:	6800      	ldr	r0, [r0, #0]
   b733a:	6803      	ldr	r3, [r0, #0]
   b733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b733e:	4718      	bx	r3

000b7340 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b7340:	6800      	ldr	r0, [r0, #0]
   b7342:	6803      	ldr	r3, [r0, #0]
   b7344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7346:	4718      	bx	r3

000b7348 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b7348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b734c:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b734e:	6800      	ldr	r0, [r0, #0]
{
   b7350:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b7352:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b7354:	6803      	ldr	r3, [r0, #0]
   b7356:	691b      	ldr	r3, [r3, #16]
{
   b7358:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b735c:	4798      	blx	r3
   b735e:	4605      	mov	r5, r0
   b7360:	b1c8      	cbz	r0, b7396 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b7362:	b11e      	cbz	r6, b736c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b7364:	4620      	mov	r0, r4
   b7366:	f7ff ffe3 	bl	b7330 <_ZN10RHDatagram10headerFromEv>
   b736a:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b736c:	f1b9 0f00 	cmp.w	r9, #0
   b7370:	d004      	beq.n	b737c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b7372:	4620      	mov	r0, r4
   b7374:	f7ff ffd8 	bl	b7328 <_ZN10RHDatagram8headerToEv>
   b7378:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b737c:	f1b8 0f00 	cmp.w	r8, #0
   b7380:	d004      	beq.n	b738c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b7382:	4620      	mov	r0, r4
   b7384:	f7ff ffd8 	bl	b7338 <_ZN10RHDatagram8headerIdEv>
   b7388:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b738c:	b11f      	cbz	r7, b7396 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b738e:	4620      	mov	r0, r4
   b7390:	f7ff ffd6 	bl	b7340 <_ZN10RHDatagram11headerFlagsEv>
   b7394:	7038      	strb	r0, [r7, #0]
}
   b7396:	4628      	mov	r0, r5
   b7398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b739c <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b739c:	2001      	movs	r0, #1
   b739e:	4770      	bx	lr

000b73a0 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b73a0:	7903      	ldrb	r3, [r0, #4]
   b73a2:	2b03      	cmp	r3, #3
   b73a4:	d0fc      	beq.n	b73a0 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b73a6:	2001      	movs	r0, #1
   b73a8:	4770      	bx	lr

000b73aa <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b73aa:	2000      	movs	r0, #0
   b73ac:	4770      	bx	lr

000b73ae <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b73ae:	7181      	strb	r1, [r0, #6]
}
   b73b0:	4770      	bx	lr

000b73b2 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b73b2:	7141      	strb	r1, [r0, #5]
}
   b73b4:	4770      	bx	lr

000b73b6 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b73b6:	72c1      	strb	r1, [r0, #11]
}
   b73b8:	4770      	bx	lr

000b73ba <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b73ba:	7301      	strb	r1, [r0, #12]
}
   b73bc:	4770      	bx	lr

000b73be <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b73be:	7341      	strb	r1, [r0, #13]
}
   b73c0:	4770      	bx	lr

000b73c2 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b73c2:	7b83      	ldrb	r3, [r0, #14]
   b73c4:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b73c8:	4311      	orrs	r1, r2
   b73ca:	7381      	strb	r1, [r0, #14]
}
   b73cc:	4770      	bx	lr

000b73ce <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b73ce:	79c0      	ldrb	r0, [r0, #7]
}
   b73d0:	4770      	bx	lr

000b73d2 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b73d2:	7a00      	ldrb	r0, [r0, #8]
}
   b73d4:	4770      	bx	lr

000b73d6 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b73d6:	7a40      	ldrb	r0, [r0, #9]
}
   b73d8:	4770      	bx	lr

000b73da <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b73da:	7a80      	ldrb	r0, [r0, #10]
}
   b73dc:	4770      	bx	lr

000b73de <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b73de:	8a00      	ldrh	r0, [r0, #16]
}
   b73e0:	b200      	sxth	r0, r0
   b73e2:	4770      	bx	lr

000b73e4 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b73e4:	7900      	ldrb	r0, [r0, #4]
}
   b73e6:	4770      	bx	lr

000b73e8 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b73e8:	7101      	strb	r1, [r0, #4]
}
   b73ea:	4770      	bx	lr

000b73ec <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b73ec:	8a40      	ldrh	r0, [r0, #18]
}
   b73ee:	b280      	uxth	r0, r0
   b73f0:	4770      	bx	lr

000b73f2 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b73f2:	8a80      	ldrh	r0, [r0, #20]
}
   b73f4:	b280      	uxth	r0, r0
   b73f6:	4770      	bx	lr

000b73f8 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b73f8:	8ac0      	ldrh	r0, [r0, #22]
}
   b73fa:	b280      	uxth	r0, r0
   b73fc:	4770      	bx	lr

000b73fe <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b73fe:	b538      	push	{r3, r4, r5, lr}
   b7400:	4605      	mov	r5, r0
   b7402:	460c      	mov	r4, r1
    while (!available())
   b7404:	682b      	ldr	r3, [r5, #0]
   b7406:	4628      	mov	r0, r5
   b7408:	68db      	ldr	r3, [r3, #12]
   b740a:	4798      	blx	r3
   b740c:	b928      	cbnz	r0, b741a <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b740e:	2c00      	cmp	r4, #0
   b7410:	d0f8      	beq.n	b7404 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b7412:	4620      	mov	r0, r4
   b7414:	f001 feb6 	bl	b9184 <delay>
   b7418:	e7f4      	b.n	b7404 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b741a:	bd38      	pop	{r3, r4, r5, pc}

000b741c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b741e:	4605      	mov	r5, r0
   b7420:	460f      	mov	r7, r1
   b7422:	4614      	mov	r4, r2
   b7424:	f001 fb0c 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
   b7428:	4606      	mov	r6, r0
   b742a:	f001 fb09 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b742e:	1b80      	subs	r0, r0, r6
   b7430:	42b8      	cmp	r0, r7
   b7432:	d20a      	bcs.n	b744a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b7434:	682b      	ldr	r3, [r5, #0]
   b7436:	4628      	mov	r0, r5
   b7438:	68db      	ldr	r3, [r3, #12]
   b743a:	4798      	blx	r3
   b743c:	b930      	cbnz	r0, b744c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b743e:	2c00      	cmp	r4, #0
   b7440:	d0f3      	beq.n	b742a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b7442:	4620      	mov	r0, r4
   b7444:	f001 fe9e 	bl	b9184 <delay>
   b7448:	e7ef      	b.n	b742a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b744a:	2000      	movs	r0, #0
}
   b744c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b744e <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b744e:	b570      	push	{r4, r5, r6, lr}
   b7450:	4604      	mov	r4, r0
   b7452:	460e      	mov	r6, r1
   b7454:	f001 faf4 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
   b7458:	4605      	mov	r5, r0
   b745a:	f001 faf1 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b745e:	1b40      	subs	r0, r0, r5
   b7460:	42b0      	cmp	r0, r6
   b7462:	d204      	bcs.n	b746e <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b7464:	7923      	ldrb	r3, [r4, #4]
   b7466:	2b03      	cmp	r3, #3
   b7468:	d0f7      	beq.n	b745a <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b746a:	2001      	movs	r0, #1
}
   b746c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b746e:	2000      	movs	r0, #0
   b7470:	e7fc      	b.n	b746c <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b7472 <_ZN15RHGenericDriver7waitCADEv>:
{
   b7472:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b7474:	69c3      	ldr	r3, [r0, #28]
{
   b7476:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b7478:	b1b3      	cbz	r3, b74a8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b747a:	f001 fae1 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b747e:	2664      	movs	r6, #100	; 0x64
   b7480:	4605      	mov	r5, r0
    while (isChannelActive())
   b7482:	6823      	ldr	r3, [r4, #0]
   b7484:	4620      	mov	r0, r4
   b7486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7488:	4798      	blx	r3
   b748a:	b168      	cbz	r0, b74a8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b748c:	f001 fad8 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b7490:	69e3      	ldr	r3, [r4, #28]
   b7492:	1b40      	subs	r0, r0, r5
   b7494:	4298      	cmp	r0, r3
   b7496:	d809      	bhi.n	b74ac <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b7498:	210a      	movs	r1, #10
   b749a:	2001      	movs	r0, #1
   b749c:	f003 fdf7 	bl	bb08e <_Z6randomii>
   b74a0:	4370      	muls	r0, r6
   b74a2:	f001 fe6f 	bl	b9184 <delay>
    while (isChannelActive())
   b74a6:	e7ec      	b.n	b7482 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b74a8:	2001      	movs	r0, #1
}
   b74aa:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b74ac:	2000      	movs	r0, #0
   b74ae:	e7fc      	b.n	b74aa <_ZN15RHGenericDriver7waitCADEv+0x38>

000b74b0 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b74b0:	4a06      	ldr	r2, [pc, #24]	; (b74cc <_ZN15RHGenericDriverC1Ev+0x1c>)
   b74b2:	6002      	str	r2, [r0, #0]
   b74b4:	21ff      	movs	r1, #255	; 0xff
   b74b6:	2200      	movs	r2, #0
   b74b8:	7102      	strb	r2, [r0, #4]
   b74ba:	7141      	strb	r1, [r0, #5]
   b74bc:	8242      	strh	r2, [r0, #18]
   b74be:	72c1      	strb	r1, [r0, #11]
   b74c0:	8282      	strh	r2, [r0, #20]
   b74c2:	8181      	strh	r1, [r0, #12]
   b74c4:	7382      	strb	r2, [r0, #14]
   b74c6:	82c2      	strh	r2, [r0, #22]
   b74c8:	61c2      	str	r2, [r0, #28]
}
   b74ca:	4770      	bx	lr
   b74cc:	000bed44 	.word	0x000bed44

000b74d0 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b74d0:	4770      	bx	lr

000b74d2 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b74d2:	4770      	bx	lr

000b74d4 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b74d4:	4770      	bx	lr

000b74d6 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b74d6:	4770      	bx	lr

000b74d8 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b74d8:	4770      	bx	lr

000b74da <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b74da:	7141      	strb	r1, [r0, #5]
}
   b74dc:	4770      	bx	lr

000b74de <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b74de:	7181      	strb	r1, [r0, #6]
}
   b74e0:	4770      	bx	lr

000b74e2 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b74e2:	7101      	strb	r1, [r0, #4]
}
   b74e4:	4770      	bx	lr
	...

000b74e8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b74e8:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b74ea:	4d03      	ldr	r5, [pc, #12]	; (b74f8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b74ec:	6005      	str	r5, [r0, #0]
   b74ee:	7101      	strb	r1, [r0, #4]
   b74f0:	7142      	strb	r2, [r0, #5]
   b74f2:	7183      	strb	r3, [r0, #6]
}
   b74f4:	bd30      	pop	{r4, r5, pc}
   b74f6:	bf00      	nop
   b74f8:	000bedc4 	.word	0x000bedc4

000b74fc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b74fc:	4770      	bx	lr

000b74fe <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b74fe:	b510      	push	{r4, lr}
  }
   b7500:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b7502:	4604      	mov	r4, r0
  }
   b7504:	f7fc fdcb 	bl	b409e <_ZdlPvj>
   b7508:	4620      	mov	r0, r4
   b750a:	bd10      	pop	{r4, pc}

000b750c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b750c:	b40e      	push	{r1, r2, r3}
   b750e:	b503      	push	{r0, r1, lr}
   b7510:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b7512:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7514:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b7518:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b751a:	f003 fd7c 	bl	bb016 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b751e:	b002      	add	sp, #8
   b7520:	f85d eb04 	ldr.w	lr, [sp], #4
   b7524:	b003      	add	sp, #12
   b7526:	4770      	bx	lr

000b7528 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b7528:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b752a:	4604      	mov	r4, r0
   b752c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b752e:	7922      	ldrb	r2, [r4, #4]
   b7530:	68a3      	ldr	r3, [r4, #8]
   b7532:	b132      	cbz	r2, b7542 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b7534:	b9a3      	cbnz	r3, b7560 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b7536:	490b      	ldr	r1, [pc, #44]	; (b7564 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b7538:	b002      	add	sp, #8
   b753a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b753e:	f003 bc61 	b.w	bae04 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7542:	4a09      	ldr	r2, [pc, #36]	; (b7568 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b7544:	7b26      	ldrb	r6, [r4, #12]
   b7546:	4d09      	ldr	r5, [pc, #36]	; (b756c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b7548:	4909      	ldr	r1, [pc, #36]	; (b7570 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b754a:	7b64      	ldrb	r4, [r4, #13]
   b754c:	2e01      	cmp	r6, #1
   b754e:	bf18      	it	ne
   b7550:	4629      	movne	r1, r5
   b7552:	e9cd 1400 	strd	r1, r4, [sp]
   b7556:	4907      	ldr	r1, [pc, #28]	; (b7574 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b7558:	f7ff ffd8 	bl	b750c <_ZN5Print6printfEPKcz>
  }
   b755c:	b002      	add	sp, #8
   b755e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7560:	4a05      	ldr	r2, [pc, #20]	; (b7578 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b7562:	e7ef      	b.n	b7544 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b7564:	000bee01 	.word	0x000bee01
   b7568:	000bf1c9 	.word	0x000bf1c9
   b756c:	000bedfd 	.word	0x000bedfd
   b7570:	000bedf9 	.word	0x000bedf9
   b7574:	000bee17 	.word	0x000bee17
   b7578:	000bedf0 	.word	0x000bedf0

000b757c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b757c:	b510      	push	{r4, lr}
   b757e:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b7580:	f7ff ffb2 	bl	b74e8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b7584:	4b05      	ldr	r3, [pc, #20]	; (b759c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b7586:	6023      	str	r3, [r4, #0]
  {
   b7588:	4b05      	ldr	r3, [pc, #20]	; (b75a0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b758a:	60a3      	str	r3, [r4, #8]
   b758c:	2301      	movs	r3, #1
   b758e:	7323      	strb	r3, [r4, #12]
   b7590:	2300      	movs	r3, #0
   b7592:	6123      	str	r3, [r4, #16]
   b7594:	82a3      	strh	r3, [r4, #20]
{
}
   b7596:	4620      	mov	r0, r4
   b7598:	bd10      	pop	{r4, pc}
   b759a:	bf00      	nop
   b759c:	000bee50 	.word	0x000bee50
   b75a0:	000bee3c 	.word	0x000bee3c

000b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b75a4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b75a6:	4c0b      	ldr	r4, [pc, #44]	; (b75d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b75a8:	7821      	ldrb	r1, [r4, #0]
   b75aa:	f3bf 8f5b 	dmb	ish
   b75ae:	f011 0101 	ands.w	r1, r1, #1
   b75b2:	d10b      	bne.n	b75cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b75b4:	4620      	mov	r0, r4
   b75b6:	9101      	str	r1, [sp, #4]
   b75b8:	f7fc fd80 	bl	b40bc <__cxa_guard_acquire>
   b75bc:	9901      	ldr	r1, [sp, #4]
   b75be:	b128      	cbz	r0, b75cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b75c0:	4805      	ldr	r0, [pc, #20]	; (b75d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b75c2:	f003 fd7d 	bl	bb0c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b75c6:	4620      	mov	r0, r4
   b75c8:	f7fc fd7d 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b75cc:	4802      	ldr	r0, [pc, #8]	; (b75d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b75ce:	b002      	add	sp, #8
   b75d0:	bd10      	pop	{r4, pc}
   b75d2:	bf00      	nop
   b75d4:	2003e3e0 	.word	0x2003e3e0
   b75d8:	2003e3e4 	.word	0x2003e3e4

000b75dc <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b75dc:	b507      	push	{r0, r1, r2, lr}
   b75de:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b75e0:	f7ff ffe0 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b75e4:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b75e6:	b003      	add	sp, #12
   b75e8:	f85d eb04 	ldr.w	lr, [sp], #4
   b75ec:	f003 be20 	b.w	bb230 <_ZN8SPIClass8transferEh>

000b75f0 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b75f0:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b75f2:	f7ff ffd7 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b75f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b75fa:	f003 be1f 	b.w	bb23c <_ZN8SPIClass15attachInterruptEv>

000b75fe <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b75fe:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b7600:	f7ff ffd0 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b7604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7608:	f003 be19 	b.w	bb23e <_ZN8SPIClass15detachInterruptEv>

000b760c <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b760c:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b760e:	7903      	ldrb	r3, [r0, #4]
   b7610:	2b04      	cmp	r3, #4
   b7612:	d020      	beq.n	b7656 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b7614:	2b03      	cmp	r3, #3
   b7616:	d020      	beq.n	b765a <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b7618:	2b02      	cmp	r3, #2
   b761a:	d020      	beq.n	b765e <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b761c:	4a11      	ldr	r2, [pc, #68]	; (b7664 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b761e:	4912      	ldr	r1, [pc, #72]	; (b7668 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b7620:	2b01      	cmp	r3, #1
   b7622:	bf18      	it	ne
   b7624:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b7626:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b7628:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b762a:	3901      	subs	r1, #1
   b762c:	bf18      	it	ne
   b762e:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b7630:	b133      	cbz	r3, b7640 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b7632:	2b01      	cmp	r3, #1
   b7634:	d004      	beq.n	b7640 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b7636:	2b02      	cmp	r3, #2
   b7638:	d002      	beq.n	b7640 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b763a:	2b03      	cmp	r3, #3
   b763c:	bf18      	it	ne
   b763e:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b7640:	2400      	movs	r4, #0
   b7642:	7304      	strb	r4, [r0, #12]
   b7644:	6102      	str	r2, [r0, #16]
   b7646:	7501      	strb	r1, [r0, #20]
   b7648:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b764a:	f7ff ffab 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b764e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7652:	f003 bd3f 	b.w	bb0d4 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b7656:	4a05      	ldr	r2, [pc, #20]	; (b766c <_ZN13RHHardwareSPI5beginEv+0x60>)
   b7658:	e7e5      	b.n	b7626 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b765a:	4a05      	ldr	r2, [pc, #20]	; (b7670 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b765c:	e7e3      	b.n	b7626 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b765e:	4a05      	ldr	r2, [pc, #20]	; (b7674 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b7660:	e7e1      	b.n	b7626 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b7662:	bf00      	nop
   b7664:	001e8480 	.word	0x001e8480
   b7668:	000f4240 	.word	0x000f4240
   b766c:	00f42400 	.word	0x00f42400
   b7670:	007a1200 	.word	0x007a1200
   b7674:	003d0900 	.word	0x003d0900

000b7678 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b7678:	b508      	push	{r3, lr}
        instance().end();
   b767a:	f7ff ff93 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b767e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7682:	f003 bd3b 	b.w	bb0fc <_ZN8SPIClass3endEv>

000b7686 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b7686:	b510      	push	{r4, lr}
   b7688:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b768a:	f7ff ff8b 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b768e:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b7692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7696:	f003 bd5d 	b.w	bb154 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b769a <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b769a:	b508      	push	{r3, lr}
        instance().endTransaction();
   b769c:	f7ff ff82 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b76a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b76a4:	f003 bd3c 	b.w	bb120 <_ZN8SPIClass14endTransactionEv>

000b76a8 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b76a8:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b76aa:	f7ff ff7b 	bl	b75a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b76ae:	bd08      	pop	{r3, pc}

000b76b0 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b76b0:	2300      	movs	r3, #0
   b76b2:	4802      	ldr	r0, [pc, #8]	; (b76bc <_GLOBAL__sub_I_hardware_spi+0xc>)
   b76b4:	461a      	mov	r2, r3
   b76b6:	4619      	mov	r1, r3
   b76b8:	f7ff bf60 	b.w	b757c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b76bc:	2003e3ec 	.word	0x2003e3ec

000b76c0 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b76c0:	2a01      	cmp	r2, #1
   b76c2:	d105      	bne.n	b76d0 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b76c4:	7a00      	ldrb	r0, [r0, #8]
   b76c6:	780b      	ldrb	r3, [r1, #0]
   b76c8:	1a1b      	subs	r3, r3, r0
   b76ca:	4258      	negs	r0, r3
   b76cc:	4158      	adcs	r0, r3
   b76ce:	4770      	bx	lr
   b76d0:	2000      	movs	r0, #0
}
   b76d2:	4770      	bx	lr

000b76d4 <_ZN6RHMesh5doArpEh>:
{
   b76d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b76d8:	4c25      	ldr	r4, [pc, #148]	; (b7770 <_ZN6RHMesh5doArpEh+0x9c>)
   b76da:	2301      	movs	r3, #1
{
   b76dc:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b76de:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b76e0:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b76e2:	2300      	movs	r3, #0
{
   b76e4:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b76e6:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b76e8:	9300      	str	r3, [sp, #0]
   b76ea:	2203      	movs	r2, #3
   b76ec:	23ff      	movs	r3, #255	; 0xff
   b76ee:	4621      	mov	r1, r4
{
   b76f0:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b76f2:	f000 fbb7 	bl	b7e64 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b76f6:	b120      	cbz	r0, b7702 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b76f8:	2500      	movs	r5, #0
}
   b76fa:	4628      	mov	r0, r5
   b76fc:	b006      	add	sp, #24
   b76fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b7702:	23fa      	movs	r3, #250	; 0xfa
   b7704:	f88d 3017 	strb.w	r3, [sp, #23]
   b7708:	f001 f99a 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b770c:	f106 0904 	add.w	r9, r6, #4
   b7710:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b7712:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b7716:	f001 f993 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
   b771a:	1a29      	subs	r1, r5, r0
   b771c:	2900      	cmp	r1, #0
   b771e:	ddeb      	ble.n	b76f8 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b7720:	2200      	movs	r2, #0
   b7722:	b289      	uxth	r1, r1
   b7724:	4648      	mov	r0, r9
   b7726:	f7ff fdbe 	bl	b72a6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b772a:	2800      	cmp	r0, #0
   b772c:	d0f3      	beq.n	b7716 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b772e:	2300      	movs	r3, #0
   b7730:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7734:	e9cd 3300 	strd	r3, r3, [sp]
   b7738:	f10d 0217 	add.w	r2, sp, #23
   b773c:	4621      	mov	r1, r4
   b773e:	4630      	mov	r0, r6
   b7740:	f000 fb9a 	bl	b7e78 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7744:	4605      	mov	r5, r0
   b7746:	2800      	cmp	r0, #0
   b7748:	d0e3      	beq.n	b7712 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b774a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b774e:	2b01      	cmp	r3, #1
   b7750:	d9df      	bls.n	b7712 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7752:	f894 a000 	ldrb.w	sl, [r4]
   b7756:	f1ba 0f02 	cmp.w	sl, #2
   b775a:	d1da      	bne.n	b7712 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b775c:	4648      	mov	r0, r9
   b775e:	f7ff fde7 	bl	b7330 <_ZN10RHDatagram10headerFromEv>
   b7762:	4653      	mov	r3, sl
   b7764:	4602      	mov	r2, r0
   b7766:	4639      	mov	r1, r7
   b7768:	4630      	mov	r0, r6
   b776a:	f000 faf3 	bl	b7d54 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b776e:	e7c4      	b.n	b76fa <_ZN6RHMesh5doArpEh+0x26>
   b7770:	2003e404 	.word	0x2003e404

000b7774 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7774:	2a01      	cmp	r2, #1
{
   b7776:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b777a:	4607      	mov	r7, r0
   b777c:	460e      	mov	r6, r1
   b777e:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b7780:	d93b      	bls.n	b77fa <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7782:	794d      	ldrb	r5, [r1, #5]
   b7784:	2d02      	cmp	r5, #2
   b7786:	d130      	bne.n	b77ea <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b7788:	f100 0804 	add.w	r8, r0, #4
   b778c:	79c9      	ldrb	r1, [r1, #7]
   b778e:	9101      	str	r1, [sp, #4]
   b7790:	4640      	mov	r0, r8
   b7792:	f7ff fdcd 	bl	b7330 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7796:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b7798:	462b      	mov	r3, r5
   b779a:	4602      	mov	r2, r0
   b779c:	9901      	ldr	r1, [sp, #4]
   b779e:	4638      	mov	r0, r7
   b77a0:	f000 fad8 	bl	b7d54 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b77a4:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b77a6:	f106 0308 	add.w	r3, r6, #8
   b77aa:	2400      	movs	r4, #0
   b77ac:	4622      	mov	r2, r4
   b77ae:	4295      	cmp	r5, r2
   b77b0:	f104 0401 	add.w	r4, r4, #1
   b77b4:	b2e4      	uxtb	r4, r4
   b77b6:	d904      	bls.n	b77c2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b77b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b77bc:	7a39      	ldrb	r1, [r7, #8]
   b77be:	4291      	cmp	r1, r2
   b77c0:	d1f4      	bne.n	b77ac <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b77c2:	f104 0108 	add.w	r1, r4, #8
   b77c6:	440e      	add	r6, r1
	while (i < numRoutes)
   b77c8:	42a5      	cmp	r5, r4
   b77ca:	d916      	bls.n	b77fa <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b77cc:	f816 1b01 	ldrb.w	r1, [r6], #1
   b77d0:	9101      	str	r1, [sp, #4]
   b77d2:	4640      	mov	r0, r8
   b77d4:	f7ff fdac 	bl	b7330 <_ZN10RHDatagram10headerFromEv>
   b77d8:	3401      	adds	r4, #1
   b77da:	4602      	mov	r2, r0
   b77dc:	9901      	ldr	r1, [sp, #4]
   b77de:	2302      	movs	r3, #2
   b77e0:	4638      	mov	r0, r7
   b77e2:	b2e4      	uxtb	r4, r4
   b77e4:	f000 fab6 	bl	b7d54 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b77e8:	e7ee      	b.n	b77c8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b77ea:	2d03      	cmp	r5, #3
   b77ec:	d105      	bne.n	b77fa <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b77ee:	7989      	ldrb	r1, [r1, #6]
}
   b77f0:	b002      	add	sp, #8
   b77f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b77f6:	f000 ba96 	b.w	b7d26 <_ZN8RHRouter13deleteRouteToEh>
}
   b77fa:	b002      	add	sp, #8
   b77fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7800 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b7800:	b510      	push	{r4, lr}
   b7802:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7804:	f000 fae6 	bl	b7dd4 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b7808:	4b01      	ldr	r3, [pc, #4]	; (b7810 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b780a:	6023      	str	r3, [r4, #0]
}
   b780c:	4620      	mov	r0, r4
   b780e:	bd10      	pop	{r4, pc}
   b7810:	000bee84 	.word	0x000bee84

000b7814 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7818:	2af9      	cmp	r2, #249	; 0xf9
{
   b781a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b781e:	4606      	mov	r6, r0
   b7820:	460f      	mov	r7, r1
   b7822:	4614      	mov	r4, r2
   b7824:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7826:	d825      	bhi.n	b7874 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b7828:	2bff      	cmp	r3, #255	; 0xff
   b782a:	d114      	bne.n	b7856 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b782c:	f8df 8048 	ldr.w	r8, [pc, #72]	; b7878 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b7830:	4640      	mov	r0, r8
   b7832:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7834:	4622      	mov	r2, r4
   b7836:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7838:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b783c:	f006 f8f0 	bl	bda20 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7840:	1c62      	adds	r2, r4, #1
   b7842:	f8cd 9020 	str.w	r9, [sp, #32]
   b7846:	462b      	mov	r3, r5
   b7848:	4641      	mov	r1, r8
   b784a:	4630      	mov	r0, r6
   b784c:	b2d2      	uxtb	r2, r2
}
   b784e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7852:	f000 bb07 	b.w	b7e64 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b7856:	4619      	mov	r1, r3
   b7858:	f000 fa21 	bl	b7c9e <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b785c:	2800      	cmp	r0, #0
   b785e:	d1e5      	bne.n	b782c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b7860:	6833      	ldr	r3, [r6, #0]
   b7862:	4629      	mov	r1, r5
   b7864:	689b      	ldr	r3, [r3, #8]
   b7866:	4630      	mov	r0, r6
   b7868:	4798      	blx	r3
   b786a:	2800      	cmp	r0, #0
   b786c:	d1de      	bne.n	b782c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b786e:	2002      	movs	r0, #2
}
   b7870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7874:	2001      	movs	r0, #1
   b7876:	e7fb      	b.n	b7870 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b7878:	2003e404 	.word	0x2003e404

000b787c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7880:	b089      	sub	sp, #36	; 0x24
   b7882:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7884:	23fa      	movs	r3, #250	; 0xfa
   b7886:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b788a:	f10d 031f 	add.w	r3, sp, #31
   b788e:	9303      	str	r3, [sp, #12]
   b7890:	f10d 031e 	add.w	r3, sp, #30
   b7894:	9302      	str	r3, [sp, #8]
   b7896:	4e5d      	ldr	r6, [pc, #372]	; (b7a0c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7898:	f10d 031d 	add.w	r3, sp, #29
   b789c:	9301      	str	r3, [sp, #4]
   b789e:	ab07      	add	r3, sp, #28
   b78a0:	9300      	str	r3, [sp, #0]
{     
   b78a2:	4689      	mov	r9, r1
   b78a4:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b78a6:	f10d 031b 	add.w	r3, sp, #27
   b78aa:	f10d 021a 	add.w	r2, sp, #26
   b78ae:	4631      	mov	r1, r6
{     
   b78b0:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b78b4:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b78b6:	f000 fadf 	bl	b7e78 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b78ba:	4604      	mov	r4, r0
   b78bc:	b920      	cbnz	r0, b78c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b78be:	2400      	movs	r4, #0
}
   b78c0:	4620      	mov	r0, r4
   b78c2:	b009      	add	sp, #36	; 0x24
   b78c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b78c8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b78cc:	b373      	cbz	r3, b792c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b78ce:	7832      	ldrb	r2, [r6, #0]
   b78d0:	bb62      	cbnz	r2, b792c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b78d2:	f1b8 0f00 	cmp.w	r8, #0
   b78d6:	d003      	beq.n	b78e0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b78d8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b78dc:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b78e0:	f1bb 0f00 	cmp.w	fp, #0
   b78e4:	d003      	beq.n	b78ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b78e6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b78ea:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b78ee:	f1ba 0f00 	cmp.w	sl, #0
   b78f2:	d003      	beq.n	b78fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b78f4:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b78f8:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b78fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b78fe:	b11a      	cbz	r2, b7908 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b7900:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7902:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7906:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b7908:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b790a:	b11a      	cbz	r2, b7914 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b790c:	9915      	ldr	r1, [sp, #84]	; 0x54
   b790e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7912:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7914:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7916:	493e      	ldr	r1, [pc, #248]	; (b7a10 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b7918:	3b01      	subs	r3, #1
   b791a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b791c:	429a      	cmp	r2, r3
		*len = msgLen;
   b791e:	bf88      	it	hi
   b7920:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7922:	783a      	ldrb	r2, [r7, #0]
   b7924:	4648      	mov	r0, r9
   b7926:	f006 f87b 	bl	bda20 <memcpy>
	    return true;
   b792a:	e7c9      	b.n	b78c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b792c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7930:	2aff      	cmp	r2, #255	; 0xff
   b7932:	d1c4      	bne.n	b78be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7934:	2b01      	cmp	r3, #1
   b7936:	d9c2      	bls.n	b78be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b7938:	7832      	ldrb	r2, [r6, #0]
   b793a:	2a01      	cmp	r2, #1
   b793c:	d1bf      	bne.n	b78be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b793e:	7a2a      	ldrb	r2, [r5, #8]
   b7940:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7944:	42a2      	cmp	r2, r4
   b7946:	d0ba      	beq.n	b78be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b7948:	1edf      	subs	r7, r3, #3
   b794a:	4932      	ldr	r1, [pc, #200]	; (b7a14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b794c:	b2ff      	uxtb	r7, r7
   b794e:	2300      	movs	r3, #0
   b7950:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7954:	4547      	cmp	r7, r8
   b7956:	d906      	bls.n	b7966 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b7958:	f811 0b01 	ldrb.w	r0, [r1], #1
   b795c:	4282      	cmp	r2, r0
   b795e:	f103 0301 	add.w	r3, r3, #1
   b7962:	d1f5      	bne.n	b7950 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7964:	e7ab      	b.n	b78be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b7966:	f105 0904 	add.w	r9, r5, #4
   b796a:	4648      	mov	r0, r9
   b796c:	f7ff fce0 	bl	b7330 <_ZN10RHDatagram10headerFromEv>
   b7970:	2302      	movs	r3, #2
   b7972:	4602      	mov	r2, r0
   b7974:	4621      	mov	r1, r4
   b7976:	4628      	mov	r0, r5
   b7978:	f000 f9ec 	bl	b7d54 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b797c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7980:	b193      	cbz	r3, b79a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b7982:	4c22      	ldr	r4, [pc, #136]	; (b7a0c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7984:	1ba3      	subs	r3, r4, r6
   b7986:	b2db      	uxtb	r3, r3
   b7988:	429f      	cmp	r7, r3
   b798a:	d90c      	bls.n	b79a6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b798c:	78e1      	ldrb	r1, [r4, #3]
   b798e:	9105      	str	r1, [sp, #20]
   b7990:	4648      	mov	r0, r9
   b7992:	f7ff fccd 	bl	b7330 <_ZN10RHDatagram10headerFromEv>
   b7996:	9905      	ldr	r1, [sp, #20]
   b7998:	4602      	mov	r2, r0
   b799a:	2302      	movs	r3, #2
   b799c:	4628      	mov	r0, r5
   b799e:	f000 f9d9 	bl	b7d54 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b79a2:	3401      	adds	r4, #1
   b79a4:	e7ee      	b.n	b7984 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b79a6:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b79a8:	682b      	ldr	r3, [r5, #0]
   b79aa:	7872      	ldrb	r2, [r6, #1]
   b79ac:	68db      	ldr	r3, [r3, #12]
   b79ae:	491a      	ldr	r1, [pc, #104]	; (b7a18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b79b0:	4628      	mov	r0, r5
   b79b2:	4798      	blx	r3
   b79b4:	4604      	mov	r4, r0
   b79b6:	b160      	cbz	r0, b79d2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b79b8:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b79ba:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b79bc:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b79be:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b79c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b79c6:	4911      	ldr	r1, [pc, #68]	; (b7a0c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b79c8:	9400      	str	r4, [sp, #0]
   b79ca:	4628      	mov	r0, r5
   b79cc:	f000 fa4a 	bl	b7e64 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b79d0:	e776      	b.n	b78c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b79d2:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b79d6:	4543      	cmp	r3, r8
   b79d8:	f67f af71 	bls.w	b78be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b79dc:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b79e0:	2b00      	cmp	r3, #0
   b79e2:	f43f af6c 	beq.w	b78be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b79e6:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b79ea:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b79ec:	4907      	ldr	r1, [pc, #28]	; (b7a0c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b79ee:	443e      	add	r6, r7
		tmpMessageLen++;
   b79f0:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b79f2:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b79f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b79f8:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b79fa:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b79fc:	9300      	str	r3, [sp, #0]
   b79fe:	4628      	mov	r0, r5
   b7a00:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b7a02:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7a06:	f000 f9f7 	bl	b7df8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b7a0a:	e759      	b.n	b78c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b7a0c:	2003e404 	.word	0x2003e404
   b7a10:	2003e405 	.word	0x2003e405
   b7a14:	2003e407 	.word	0x2003e407
   b7a18:	2003e406 	.word	0x2003e406

000b7a1c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b7a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7a1e:	b085      	sub	sp, #20
   b7a20:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7a22:	3004      	adds	r0, #4
{
   b7a24:	460e      	mov	r6, r1
   b7a26:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7a28:	f7ff fc82 	bl	b7330 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b7a2c:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7a2e:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b7a30:	4631      	mov	r1, r6
   b7a32:	4628      	mov	r0, r5
   b7a34:	f000 f94a 	bl	b7ccc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7a38:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b7a3a:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7a3c:	d001      	beq.n	b7a42 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b7a3e:	2805      	cmp	r0, #5
   b7a40:	d11b      	bne.n	b7a7a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b7a42:	7831      	ldrb	r1, [r6, #0]
   b7a44:	4628      	mov	r0, r5
   b7a46:	f000 f96e 	bl	b7d26 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b7a4a:	7872      	ldrb	r2, [r6, #1]
   b7a4c:	7a2b      	ldrb	r3, [r5, #8]
   b7a4e:	429a      	cmp	r2, r3
   b7a50:	d013      	beq.n	b7a7a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b7a52:	4c0b      	ldr	r4, [pc, #44]	; (b7a80 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7a54:	2303      	movs	r3, #3
   b7a56:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b7a58:	7833      	ldrb	r3, [r6, #0]
   b7a5a:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7a5c:	7871      	ldrb	r1, [r6, #1]
   b7a5e:	2302      	movs	r3, #2
   b7a60:	463a      	mov	r2, r7
   b7a62:	4628      	mov	r0, r5
   b7a64:	f000 f976 	bl	b7d54 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b7a68:	2300      	movs	r3, #0
   b7a6a:	9300      	str	r3, [sp, #0]
   b7a6c:	4621      	mov	r1, r4
   b7a6e:	7873      	ldrb	r3, [r6, #1]
   b7a70:	2202      	movs	r2, #2
   b7a72:	4628      	mov	r0, r5
   b7a74:	f000 f9f6 	bl	b7e64 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7a78:	4604      	mov	r4, r0
}
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	b005      	add	sp, #20
   b7a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7a80:	2003e404 	.word	0x2003e404

000b7a84 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7a84:	b510      	push	{r4, lr}
   b7a86:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7a88:	f7ff fc02 	bl	b7290 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7a8c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b7a8e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b7a90:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b7a92:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7a94:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b7a96:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7a98:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b7a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
   b7a9e:	f104 0011 	add.w	r0, r4, #17
   b7aa2:	f005 ffe5 	bl	bda70 <memset>
}
   b7aa6:	4620      	mov	r0, r4
   b7aa8:	bd10      	pop	{r4, pc}

000b7aaa <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b7aaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7aac:	4604      	mov	r4, r0
   b7aae:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b7ab0:	f7ff fc32 	bl	b7318 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	2200      	movs	r2, #0
   b7ab8:	2180      	movs	r1, #128	; 0x80
   b7aba:	f7ff fc31 	bl	b7320 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b7abe:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b7ac0:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b7ac2:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b7ac6:	f10d 010f 	add.w	r1, sp, #15
   b7aca:	2201      	movs	r2, #1
   b7acc:	4620      	mov	r0, r4
   b7ace:	f7ff fbf4 	bl	b72ba <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b7ad2:	4620      	mov	r0, r4
   b7ad4:	f7ff fbe3 	bl	b729e <_ZN10RHDatagram14waitPacketSentEv>
}
   b7ad8:	b004      	add	sp, #16
   b7ada:	bd10      	pop	{r4, pc}

000b7adc <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7ae0:	7b05      	ldrb	r5, [r0, #12]
   b7ae2:	3501      	adds	r5, #1
   b7ae4:	b2ed      	uxtb	r5, r5
{
   b7ae6:	b087      	sub	sp, #28
   b7ae8:	4604      	mov	r4, r0
   b7aea:	4689      	mov	r9, r1
   b7aec:	4692      	mov	sl, r2
   b7aee:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7af0:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b7af2:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b7af4:	7c22      	ldrb	r2, [r4, #16]
   b7af6:	463b      	mov	r3, r7
   b7af8:	429a      	cmp	r2, r3
   b7afa:	f107 0701 	add.w	r7, r7, #1
   b7afe:	b2ff      	uxtb	r7, r7
   b7b00:	d36b      	bcc.n	b7bda <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b7b02:	4629      	mov	r1, r5
   b7b04:	4620      	mov	r0, r4
   b7b06:	f7ff fc07 	bl	b7318 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b7b0a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b7b0c:	bf0d      	iteet	eq
   b7b0e:	22c0      	moveq	r2, #192	; 0xc0
   b7b10:	2280      	movne	r2, #128	; 0x80
   b7b12:	2140      	movne	r1, #64	; 0x40
   b7b14:	2100      	moveq	r1, #0
   b7b16:	4620      	mov	r0, r4
   b7b18:	f7ff fc02 	bl	b7320 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b7b1c:	4643      	mov	r3, r8
   b7b1e:	4652      	mov	r2, sl
   b7b20:	4649      	mov	r1, r9
   b7b22:	4620      	mov	r0, r4
   b7b24:	f7ff fbc9 	bl	b72ba <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b7b28:	4620      	mov	r0, r4
   b7b2a:	f7ff fbb8 	bl	b729e <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b7b2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7b32:	d054      	beq.n	b7bde <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b7b34:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b7b36:	bf82      	ittt	hi
   b7b38:	68a3      	ldrhi	r3, [r4, #8]
   b7b3a:	3301      	addhi	r3, #1
   b7b3c:	60a3      	strhi	r3, [r4, #8]
   b7b3e:	f000 ff7f 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b7b42:	f44f 7180 	mov.w	r1, #256	; 0x100
   b7b46:	4683      	mov	fp, r0
   b7b48:	2000      	movs	r0, #0
   b7b4a:	89e6      	ldrh	r6, [r4, #14]
   b7b4c:	f003 fa9f 	bl	bb08e <_Z6randomii>
   b7b50:	4370      	muls	r0, r6
   b7b52:	bf48      	it	mi
   b7b54:	30ff      	addmi	r0, #255	; 0xff
   b7b56:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b7b5a:	fa1b f686 	uxtah	r6, fp, r6
   b7b5e:	f000 ff6f 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
   b7b62:	1a30      	subs	r0, r6, r0
   b7b64:	2800      	cmp	r0, #0
   b7b66:	ddc5      	ble.n	b7af4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7b68:	b281      	uxth	r1, r0
   b7b6a:	2200      	movs	r2, #0
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	f7ff fb9a 	bl	b72a6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7b72:	2800      	cmp	r0, #0
   b7b74:	d0f3      	beq.n	b7b5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7b76:	f10d 0317 	add.w	r3, sp, #23
   b7b7a:	9302      	str	r3, [sp, #8]
   b7b7c:	f10d 0316 	add.w	r3, sp, #22
   b7b80:	9301      	str	r3, [sp, #4]
   b7b82:	2200      	movs	r2, #0
   b7b84:	f10d 0315 	add.w	r3, sp, #21
   b7b88:	9300      	str	r3, [sp, #0]
   b7b8a:	4611      	mov	r1, r2
   b7b8c:	ab05      	add	r3, sp, #20
   b7b8e:	4620      	mov	r0, r4
   b7b90:	f7ff fbda 	bl	b7348 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7b94:	2800      	cmp	r0, #0
   b7b96:	d0e2      	beq.n	b7b5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7b98:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7b9c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b7ba0:	4542      	cmp	r2, r8
   b7ba2:	d10e      	bne.n	b7bc2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7ba4:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7ba8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7bac:	458c      	cmp	ip, r1
   b7bae:	d108      	bne.n	b7bc2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b7bb0:	2b00      	cmp	r3, #0
   b7bb2:	da08      	bge.n	b7bc6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b7bb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7bb8:	42ab      	cmp	r3, r5
   b7bba:	d1d0      	bne.n	b7b5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7bbc:	b007      	add	sp, #28
   b7bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b7bc2:	2b00      	cmp	r3, #0
   b7bc4:	dbcb      	blt.n	b7b5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b7bc6:	18a1      	adds	r1, r4, r2
   b7bc8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7bcc:	7c49      	ldrb	r1, [r1, #17]
   b7bce:	4299      	cmp	r1, r3
   b7bd0:	d1c5      	bne.n	b7b5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b7bd2:	4620      	mov	r0, r4
   b7bd4:	f7ff ff69 	bl	b7aaa <_ZN18RHReliableDatagram11acknowledgeEhh>
   b7bd8:	e7c1      	b.n	b7b5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b7bda:	2000      	movs	r0, #0
   b7bdc:	e7ee      	b.n	b7bbc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7bde:	2001      	movs	r0, #1
   b7be0:	e7ec      	b.n	b7bbc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b7be2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b7be2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7be6:	b089      	sub	sp, #36	; 0x24
   b7be8:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7bec:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7bf0:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7bf2:	4604      	mov	r4, r0
   b7bf4:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7bf6:	f7ff fb4e 	bl	b7296 <_ZN10RHDatagram9availableEv>
   b7bfa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b7bfe:	b920      	cbnz	r0, b7c0a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7c00:	2500      	movs	r5, #0
}
   b7c02:	4628      	mov	r0, r5
   b7c04:	b009      	add	sp, #36	; 0x24
   b7c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7c0a:	f10d 031f 	add.w	r3, sp, #31
   b7c0e:	9302      	str	r3, [sp, #8]
   b7c10:	f10d 031e 	add.w	r3, sp, #30
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	f10d 031d 	add.w	r3, sp, #29
   b7c1a:	9300      	str	r3, [sp, #0]
   b7c1c:	4620      	mov	r0, r4
   b7c1e:	ab07      	add	r3, sp, #28
   b7c20:	f7ff fb92 	bl	b7348 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7c24:	4605      	mov	r5, r0
   b7c26:	2800      	cmp	r0, #0
   b7c28:	d0ea      	beq.n	b7c00 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b7c2a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b7c2e:	2b00      	cmp	r3, #0
   b7c30:	dbe6      	blt.n	b7c00 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b7c32:	7922      	ldrb	r2, [r4, #4]
   b7c34:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7c38:	429a      	cmp	r2, r3
   b7c3a:	d106      	bne.n	b7c4a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b7c3c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7c40:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b7c44:	4620      	mov	r0, r4
   b7c46:	f7ff ff30 	bl	b7aaa <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b7c4a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7c4e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b7c52:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7c56:	f012 0f40 	tst.w	r2, #64	; 0x40
   b7c5a:	440c      	add	r4, r1
   b7c5c:	d002      	beq.n	b7c64 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b7c5e:	7c60      	ldrb	r0, [r4, #17]
   b7c60:	4298      	cmp	r0, r3
   b7c62:	d0cd      	beq.n	b7c00 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7c64:	b106      	cbz	r6, b7c68 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b7c66:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7c68:	f1b9 0f00 	cmp.w	r9, #0
   b7c6c:	d003      	beq.n	b7c76 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b7c6e:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b7c72:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b7c76:	f1b8 0f00 	cmp.w	r8, #0
   b7c7a:	d001      	beq.n	b7c80 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7c7c:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b7c80:	b107      	cbz	r7, b7c84 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b7c82:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7c84:	7463      	strb	r3, [r4, #17]
		return true;
   b7c86:	e7bc      	b.n	b7c02 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7c88 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7c88:	4770      	bx	lr

000b7c8a <_ZN8RHRouter4initEv>:
{
   b7c8a:	b510      	push	{r4, lr}
   b7c8c:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b7c8e:	3004      	adds	r0, #4
   b7c90:	f7ff fb34 	bl	b72fc <_ZN10RHDatagram4initEv>
    if (ret)
   b7c94:	b110      	cbz	r0, b7c9c <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b7c96:	231e      	movs	r3, #30
   b7c98:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7c9c:	bd10      	pop	{r4, pc}

000b7c9e <_ZN8RHRouter10getRouteToEh>:
{
   b7c9e:	b510      	push	{r4, lr}
   b7ca0:	4602      	mov	r2, r0
   b7ca2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b7ca4:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b7ca8:	428c      	cmp	r4, r1
   b7caa:	d108      	bne.n	b7cbe <_ZN8RHRouter10getRouteToEh+0x20>
   b7cac:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b7cb0:	b12c      	cbz	r4, b7cbe <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b7cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7cb6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b7cba:	4418      	add	r0, r3
}
   b7cbc:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7cbe:	3301      	adds	r3, #1
   b7cc0:	2b32      	cmp	r3, #50	; 0x32
   b7cc2:	f102 0203 	add.w	r2, r2, #3
   b7cc6:	d1ed      	bne.n	b7ca4 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b7cc8:	2000      	movs	r0, #0
   b7cca:	e7f7      	b.n	b7cbc <_ZN8RHRouter10getRouteToEh+0x1e>

000b7ccc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b7ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7cce:	780b      	ldrb	r3, [r1, #0]
   b7cd0:	2bff      	cmp	r3, #255	; 0xff
{
   b7cd2:	4605      	mov	r5, r0
   b7cd4:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7cd6:	d006      	beq.n	b7ce6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b7cd8:	4619      	mov	r1, r3
   b7cda:	9201      	str	r2, [sp, #4]
   b7cdc:	f7ff ffdf 	bl	b7c9e <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b7ce0:	b158      	cbz	r0, b7cfa <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b7ce2:	7843      	ldrb	r3, [r0, #1]
   b7ce4:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b7ce6:	4621      	mov	r1, r4
   b7ce8:	1d28      	adds	r0, r5, #4
   b7cea:	f7ff fef7 	bl	b7adc <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b7cee:	2800      	cmp	r0, #0
   b7cf0:	bf14      	ite	ne
   b7cf2:	2000      	movne	r0, #0
   b7cf4:	2005      	moveq	r0, #5
}
   b7cf6:	b003      	add	sp, #12
   b7cf8:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7cfa:	2002      	movs	r0, #2
   b7cfc:	e7fb      	b.n	b7cf6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b7cfe <_ZN8RHRouter11deleteRouteEh>:
{
   b7cfe:	b510      	push	{r4, lr}
   b7d00:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b7d04:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b7d06:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b7d0a:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b7d0e:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b7d12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7d16:	4421      	add	r1, r4
   b7d18:	4420      	add	r0, r4
   b7d1a:	f005 fe81 	bl	bda20 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b7d1e:	2300      	movs	r3, #0
   b7d20:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b7d24:	bd10      	pop	{r4, pc}

000b7d26 <_ZN8RHRouter13deleteRouteToEh>:
{
   b7d26:	b538      	push	{r3, r4, r5, lr}
   b7d28:	460a      	mov	r2, r1
   b7d2a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7d2c:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b7d30:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b7d34:	b2d9      	uxtb	r1, r3
   b7d36:	5d65      	ldrb	r5, [r4, r5]
   b7d38:	4295      	cmp	r5, r2
   b7d3a:	d103      	bne.n	b7d44 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b7d3c:	f7ff ffdf 	bl	b7cfe <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b7d40:	2001      	movs	r0, #1
}
   b7d42:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7d44:	3301      	adds	r3, #1
   b7d46:	2b32      	cmp	r3, #50	; 0x32
   b7d48:	d1f2      	bne.n	b7d30 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b7d4a:	2000      	movs	r0, #0
   b7d4c:	e7f9      	b.n	b7d42 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b7d4e <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b7d4e:	2100      	movs	r1, #0
   b7d50:	f7ff bfd5 	b.w	b7cfe <_ZN8RHRouter11deleteRouteEh>

000b7d54 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d56:	4616      	mov	r6, r2
   b7d58:	461f      	mov	r7, r3
   b7d5a:	4604      	mov	r4, r0
   b7d5c:	460d      	mov	r5, r1
   b7d5e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7d60:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7d64:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7d68:	5c11      	ldrb	r1, [r2, r0]
   b7d6a:	42a9      	cmp	r1, r5
   b7d6c:	d105      	bne.n	b7d7a <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7d6e:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7d70:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7d74:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7d7a:	3301      	adds	r3, #1
   b7d7c:	2b32      	cmp	r3, #50	; 0x32
   b7d7e:	d1f1      	bne.n	b7d64 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b7d80:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b7d82:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b7d86:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7d8a:	5c11      	ldrb	r1, [r2, r0]
   b7d8c:	b919      	cbnz	r1, b7d96 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b7d8e:	4420      	add	r0, r4
   b7d90:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b7d94:	e7ec      	b.n	b7d70 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7d96:	3301      	adds	r3, #1
   b7d98:	2b32      	cmp	r3, #50	; 0x32
   b7d9a:	d1f4      	bne.n	b7d86 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7d9c:	4620      	mov	r0, r4
   b7d9e:	f7ff ffd6 	bl	b7d4e <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7da2:	4620      	mov	r0, r4
   b7da4:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b7da8:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7dac:	b92a      	cbnz	r2, b7dba <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b7dae:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b7db2:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7db6:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7dba:	3003      	adds	r0, #3
   b7dbc:	4298      	cmp	r0, r3
   b7dbe:	d1f3      	bne.n	b7da8 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b7dc0:	e7da      	b.n	b7d78 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b7dc2 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7dc2:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b7dc6:	2200      	movs	r2, #0
   b7dc8:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7dcc:	3003      	adds	r0, #3
   b7dce:	4298      	cmp	r0, r3
   b7dd0:	d1fa      	bne.n	b7dc8 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b7dd2:	4770      	bx	lr

000b7dd4 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b7dd4:	b510      	push	{r4, lr}
   b7dd6:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b7dd8:	3004      	adds	r0, #4
   b7dda:	f7ff fe53 	bl	b7a84 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b7dde:	4b05      	ldr	r3, [pc, #20]	; (b7df4 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b7de0:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7de2:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b7de6:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7de8:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7dec:	f7ff ffe9 	bl	b7dc2 <_ZN8RHRouter17clearRoutingTableEv>
}
   b7df0:	4620      	mov	r0, r4
   b7df2:	bd10      	pop	{r4, pc}
   b7df4:	000bee9c 	.word	0x000bee9c

000b7df8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b7df8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7dfc:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7dfe:	6840      	ldr	r0, [r0, #4]
{
   b7e00:	9101      	str	r1, [sp, #4]
   b7e02:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7e04:	6803      	ldr	r3, [r0, #0]
{
   b7e06:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7e0a:	699b      	ldr	r3, [r3, #24]
{
   b7e0c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b7e10:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7e12:	4798      	blx	r3
   b7e14:	f106 0805 	add.w	r8, r6, #5
   b7e18:	4580      	cmp	r8, r0
   b7e1a:	d81c      	bhi.n	b7e56 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b7e1c:	4d10      	ldr	r5, [pc, #64]	; (b7e60 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b7e1e:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b7e20:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b7e24:	2300      	movs	r3, #0
   b7e26:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b7e28:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b7e2c:	70eb      	strb	r3, [r5, #3]
   b7e2e:	1c5a      	adds	r2, r3, #1
   b7e30:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b7e34:	1d68      	adds	r0, r5, #5
   b7e36:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b7e38:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b7e3a:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b7e3e:	f005 fdef 	bl	bda20 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7e42:	6823      	ldr	r3, [r4, #0]
   b7e44:	685b      	ldr	r3, [r3, #4]
   b7e46:	fa5f f288 	uxtb.w	r2, r8
   b7e4a:	4629      	mov	r1, r5
   b7e4c:	4620      	mov	r0, r4
}
   b7e4e:	b002      	add	sp, #8
   b7e50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7e54:	4718      	bx	r3
}
   b7e56:	2001      	movs	r0, #1
   b7e58:	b002      	add	sp, #8
   b7e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e5e:	bf00      	nop
   b7e60:	2003e4fe 	.word	0x2003e4fe

000b7e64 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7e64:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b7e66:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7e6a:	9401      	str	r4, [sp, #4]
   b7e6c:	7a04      	ldrb	r4, [r0, #8]
   b7e6e:	9400      	str	r4, [sp, #0]
   b7e70:	f7ff ffc2 	bl	b7df8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7e74:	b002      	add	sp, #8
   b7e76:	bd10      	pop	{r4, pc}

000b7e78 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e7c:	b087      	sub	sp, #28
   b7e7e:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7e80:	23ff      	movs	r3, #255	; 0xff
   b7e82:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7e86:	f10d 0317 	add.w	r3, sp, #23
   b7e8a:	9302      	str	r3, [sp, #8]
   b7e8c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7f60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b7e90:	f10d 0316 	add.w	r3, sp, #22
   b7e94:	9301      	str	r3, [sp, #4]
   b7e96:	f10d 0315 	add.w	r3, sp, #21
   b7e9a:	9300      	str	r3, [sp, #0]
{  
   b7e9c:	4604      	mov	r4, r0
   b7e9e:	4688      	mov	r8, r1
   b7ea0:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7ea2:	ab05      	add	r3, sp, #20
   b7ea4:	f10d 0213 	add.w	r2, sp, #19
   b7ea8:	4649      	mov	r1, r9
   b7eaa:	3004      	adds	r0, #4
{  
   b7eac:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7eb0:	f7ff fe97 	bl	b7be2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b7eb4:	4605      	mov	r5, r0
   b7eb6:	b908      	cbnz	r0, b7ebc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b7eb8:	2500      	movs	r5, #0
   b7eba:	e038      	b.n	b7f2e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b7ebc:	6823      	ldr	r3, [r4, #0]
   b7ebe:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7ec2:	681b      	ldr	r3, [r3, #0]
   b7ec4:	4649      	mov	r1, r9
   b7ec6:	4620      	mov	r0, r4
   b7ec8:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b7eca:	f899 3000 	ldrb.w	r3, [r9]
   b7ece:	7a22      	ldrb	r2, [r4, #8]
   b7ed0:	429a      	cmp	r2, r3
   b7ed2:	d001      	beq.n	b7ed8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b7ed4:	2bff      	cmp	r3, #255	; 0xff
   b7ed6:	d12e      	bne.n	b7f36 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b7ed8:	b117      	cbz	r7, b7ee0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b7eda:	4b21      	ldr	r3, [pc, #132]	; (b7f60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7edc:	785b      	ldrb	r3, [r3, #1]
   b7ede:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b7ee0:	f1bb 0f00 	cmp.w	fp, #0
   b7ee4:	d003      	beq.n	b7eee <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b7ee6:	4b1e      	ldr	r3, [pc, #120]	; (b7f60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7ee8:	781b      	ldrb	r3, [r3, #0]
   b7eea:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b7eee:	f1ba 0f00 	cmp.w	sl, #0
   b7ef2:	d003      	beq.n	b7efc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b7ef4:	4b1a      	ldr	r3, [pc, #104]	; (b7f60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7ef6:	78db      	ldrb	r3, [r3, #3]
   b7ef8:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b7efc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b7efe:	b11b      	cbz	r3, b7f08 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b7f00:	4b17      	ldr	r3, [pc, #92]	; (b7f60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7f02:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b7f04:	791b      	ldrb	r3, [r3, #4]
   b7f06:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b7f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7f0a:	b11b      	cbz	r3, b7f14 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b7f0c:	4b14      	ldr	r3, [pc, #80]	; (b7f60 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7f0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7f10:	789b      	ldrb	r3, [r3, #2]
   b7f12:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7f14:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b7f18:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7f1a:	4912      	ldr	r1, [pc, #72]	; (b7f64 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7f1c:	3b05      	subs	r3, #5
   b7f1e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7f20:	429a      	cmp	r2, r3
		*len = msgLen;
   b7f22:	bf88      	it	hi
   b7f24:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7f26:	7832      	ldrb	r2, [r6, #0]
   b7f28:	4640      	mov	r0, r8
   b7f2a:	f005 fd79 	bl	bda20 <memcpy>
}
   b7f2e:	4628      	mov	r0, r5
   b7f30:	b007      	add	sp, #28
   b7f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b7f36:	f899 3002 	ldrb.w	r3, [r9, #2]
   b7f3a:	1c5a      	adds	r2, r3, #1
   b7f3c:	f889 2002 	strb.w	r2, [r9, #2]
   b7f40:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b7f44:	429a      	cmp	r2, r3
   b7f46:	d9b7      	bls.n	b7eb8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b7f48:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b7f4c:	2b00      	cmp	r3, #0
   b7f4e:	d0b3      	beq.n	b7eb8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b7f50:	6823      	ldr	r3, [r4, #0]
   b7f52:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7f56:	685b      	ldr	r3, [r3, #4]
   b7f58:	4649      	mov	r1, r9
   b7f5a:	4620      	mov	r0, r4
   b7f5c:	4798      	blx	r3
   b7f5e:	e7ab      	b.n	b7eb8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b7f60:	2003e4fe 	.word	0x2003e4fe
   b7f64:	2003e503 	.word	0x2003e503

000b7f68 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7f68:	b510      	push	{r4, lr}
   b7f6a:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7f6c:	6a00      	ldr	r0, [r0, #32]
   b7f6e:	6803      	ldr	r3, [r0, #0]
   b7f70:	68db      	ldr	r3, [r3, #12]
   b7f72:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7f74:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7f78:	28ff      	cmp	r0, #255	; 0xff
   b7f7a:	d002      	beq.n	b7f82 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7f7c:	2101      	movs	r1, #1
   b7f7e:	f003 fe57 	bl	bbc30 <pinMode>

    deselectSlave();
   b7f82:	6823      	ldr	r3, [r4, #0]
   b7f84:	4620      	mov	r0, r4
   b7f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7f88:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7f8a:	2064      	movs	r0, #100	; 0x64
   b7f8c:	f001 f8fa 	bl	b9184 <delay>
#endif
    
    return true;
}
   b7f90:	2001      	movs	r0, #1
   b7f92:	bd10      	pop	{r4, pc}

000b7f94 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7f94:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7f98:	2100      	movs	r1, #0
   b7f9a:	f003 be5a 	b.w	bbc52 <digitalWrite>

000b7f9e <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7f9e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7fa2:	2101      	movs	r1, #1
   b7fa4:	f003 be55 	b.w	bbc52 <digitalWrite>

000b7fa8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7fa8:	b570      	push	{r4, r5, r6, lr}
   b7faa:	4604      	mov	r4, r0
   b7fac:	460d      	mov	r5, r1
   b7fae:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7fb0:	f7ff fa7e 	bl	b74b0 <_ZN15RHGenericDriverC1Ev>
   b7fb4:	4b03      	ldr	r3, [pc, #12]	; (b7fc4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b7fb6:	6023      	str	r3, [r4, #0]
   b7fb8:	6226      	str	r6, [r4, #32]
   b7fba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7fbe:	4620      	mov	r0, r4
   b7fc0:	bd70      	pop	{r4, r5, r6, pc}
   b7fc2:	bf00      	nop
   b7fc4:	000beeac 	.word	0x000beeac

000b7fc8 <_ZN11RHSPIDriver7spiReadEh>:
{
   b7fc8:	b538      	push	{r3, r4, r5, lr}
   b7fca:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7fcc:	6a00      	ldr	r0, [r0, #32]
   b7fce:	6803      	ldr	r3, [r0, #0]
   b7fd0:	6a1b      	ldr	r3, [r3, #32]
{
   b7fd2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7fd4:	4798      	blx	r3
    selectSlave();
   b7fd6:	6823      	ldr	r3, [r4, #0]
   b7fd8:	4620      	mov	r0, r4
   b7fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7fdc:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7fde:	6a20      	ldr	r0, [r4, #32]
   b7fe0:	6803      	ldr	r3, [r0, #0]
   b7fe2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b7fe6:	681b      	ldr	r3, [r3, #0]
   b7fe8:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7fea:	6a20      	ldr	r0, [r4, #32]
   b7fec:	6803      	ldr	r3, [r0, #0]
   b7fee:	2100      	movs	r1, #0
   b7ff0:	681b      	ldr	r3, [r3, #0]
   b7ff2:	4798      	blx	r3
    deselectSlave();
   b7ff4:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7ff6:	4605      	mov	r5, r0
    deselectSlave();
   b7ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7ffa:	4620      	mov	r0, r4
   b7ffc:	4798      	blx	r3
    _spi.endTransaction();
   b7ffe:	6a20      	ldr	r0, [r4, #32]
   b8000:	6803      	ldr	r3, [r0, #0]
   b8002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8004:	4798      	blx	r3
}
   b8006:	4628      	mov	r0, r5
   b8008:	bd38      	pop	{r3, r4, r5, pc}

000b800a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b800a:	b570      	push	{r4, r5, r6, lr}
   b800c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b800e:	6a00      	ldr	r0, [r0, #32]
   b8010:	6803      	ldr	r3, [r0, #0]
   b8012:	6a1b      	ldr	r3, [r3, #32]
{
   b8014:	4616      	mov	r6, r2
   b8016:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b8018:	4798      	blx	r3
    selectSlave();
   b801a:	6823      	ldr	r3, [r4, #0]
   b801c:	4620      	mov	r0, r4
   b801e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8020:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b8022:	6a20      	ldr	r0, [r4, #32]
   b8024:	6803      	ldr	r3, [r0, #0]
   b8026:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b802a:	681b      	ldr	r3, [r3, #0]
   b802c:	4798      	blx	r3
   b802e:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b8030:	6a20      	ldr	r0, [r4, #32]
   b8032:	6803      	ldr	r3, [r0, #0]
   b8034:	4631      	mov	r1, r6
   b8036:	681b      	ldr	r3, [r3, #0]
   b8038:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b803a:	2001      	movs	r0, #1
   b803c:	f000 fcf8 	bl	b8a30 <HAL_Delay_Microseconds>
    deselectSlave();
   b8040:	6823      	ldr	r3, [r4, #0]
   b8042:	4620      	mov	r0, r4
   b8044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8046:	4798      	blx	r3
    _spi.endTransaction();
   b8048:	6a20      	ldr	r0, [r4, #32]
   b804a:	6803      	ldr	r3, [r0, #0]
   b804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b804e:	4798      	blx	r3
}
   b8050:	4628      	mov	r0, r5
   b8052:	bd70      	pop	{r4, r5, r6, pc}

000b8054 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b8054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8056:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b8058:	6a00      	ldr	r0, [r0, #32]
{
   b805a:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b805c:	6803      	ldr	r3, [r0, #0]
   b805e:	6a1b      	ldr	r3, [r3, #32]
{
   b8060:	460f      	mov	r7, r1
   b8062:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b8064:	4798      	blx	r3
    selectSlave();
   b8066:	6823      	ldr	r3, [r4, #0]
   b8068:	4620      	mov	r0, r4
   b806a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b806c:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b806e:	6a20      	ldr	r0, [r4, #32]
   b8070:	6803      	ldr	r3, [r0, #0]
   b8072:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b8076:	681b      	ldr	r3, [r3, #0]
   b8078:	4798      	blx	r3
   b807a:	442e      	add	r6, r5
   b807c:	4607      	mov	r7, r0
    while (len--)
   b807e:	42b5      	cmp	r5, r6
   b8080:	d007      	beq.n	b8092 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b8082:	6a20      	ldr	r0, [r4, #32]
   b8084:	6803      	ldr	r3, [r0, #0]
   b8086:	2100      	movs	r1, #0
   b8088:	681b      	ldr	r3, [r3, #0]
   b808a:	4798      	blx	r3
   b808c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b8090:	e7f5      	b.n	b807e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b8092:	6823      	ldr	r3, [r4, #0]
   b8094:	4620      	mov	r0, r4
   b8096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8098:	4798      	blx	r3
    _spi.endTransaction();
   b809a:	6a20      	ldr	r0, [r4, #32]
   b809c:	6803      	ldr	r3, [r0, #0]
   b809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b80a0:	4798      	blx	r3
}
   b80a2:	4638      	mov	r0, r7
   b80a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80a6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b80a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80a8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b80aa:	6a00      	ldr	r0, [r0, #32]
{
   b80ac:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b80ae:	6803      	ldr	r3, [r0, #0]
   b80b0:	6a1b      	ldr	r3, [r3, #32]
{
   b80b2:	460f      	mov	r7, r1
   b80b4:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b80b6:	4798      	blx	r3
    selectSlave();
   b80b8:	6823      	ldr	r3, [r4, #0]
   b80ba:	4620      	mov	r0, r4
   b80bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b80be:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b80c0:	6a20      	ldr	r0, [r4, #32]
   b80c2:	6803      	ldr	r3, [r0, #0]
   b80c4:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b80c8:	681b      	ldr	r3, [r3, #0]
   b80ca:	4798      	blx	r3
   b80cc:	442e      	add	r6, r5
   b80ce:	4607      	mov	r7, r0
    while (len--)
   b80d0:	42b5      	cmp	r5, r6
   b80d2:	d006      	beq.n	b80e2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b80d4:	6a20      	ldr	r0, [r4, #32]
   b80d6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b80da:	6803      	ldr	r3, [r0, #0]
   b80dc:	681b      	ldr	r3, [r3, #0]
   b80de:	4798      	blx	r3
    while (len--)
   b80e0:	e7f6      	b.n	b80d0 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b80e2:	6823      	ldr	r3, [r4, #0]
   b80e4:	4620      	mov	r0, r4
   b80e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b80e8:	4798      	blx	r3
    _spi.endTransaction();
   b80ea:	6a20      	ldr	r0, [r4, #32]
   b80ec:	6803      	ldr	r3, [r0, #0]
   b80ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b80f0:	4798      	blx	r3
}
   b80f2:	4638      	mov	r0, r7
   b80f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80f6 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b80f6:	6a00      	ldr	r0, [r0, #32]
   b80f8:	6803      	ldr	r3, [r0, #0]
   b80fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b80fc:	4718      	bx	r3

000b80fe <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b80fe:	2001      	movs	r0, #1
   b8100:	4770      	bx	lr

000b8102 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b8102:	20fb      	movs	r0, #251	; 0xfb
   b8104:	4770      	bx	lr

000b8106 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b8106:	4770      	bx	lr

000b8108 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b8108:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b810a:	7903      	ldrb	r3, [r0, #4]
   b810c:	2b05      	cmp	r3, #5
{
   b810e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b8110:	d010      	beq.n	b8134 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b8112:	6803      	ldr	r3, [r0, #0]
   b8114:	2105      	movs	r1, #5
   b8116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b811a:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b811c:	2207      	movs	r2, #7
   b811e:	2101      	movs	r1, #1
   b8120:	4620      	mov	r0, r4
   b8122:	f7ff ff72 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b8126:	2280      	movs	r2, #128	; 0x80
   b8128:	2140      	movs	r1, #64	; 0x40
   b812a:	4620      	mov	r0, r4
   b812c:	f7ff ff6d 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b8130:	2305      	movs	r3, #5
   b8132:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b8134:	7923      	ldrb	r3, [r4, #4]
   b8136:	2b05      	cmp	r3, #5
   b8138:	d0fc      	beq.n	b8134 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b813a:	7e20      	ldrb	r0, [r4, #24]
}
   b813c:	bd10      	pop	{r4, pc}

000b813e <_ZN7RH_RF95D0Ev>:
   b813e:	b510      	push	{r4, lr}
   b8140:	f44f 7198 	mov.w	r1, #304	; 0x130
   b8144:	4604      	mov	r4, r0
   b8146:	f7fb ffaa 	bl	b409e <_ZdlPvj>
   b814a:	4620      	mov	r0, r4
   b814c:	bd10      	pop	{r4, pc}

000b814e <_ZN7RH_RF955sleepEv>:
{
   b814e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b8150:	7903      	ldrb	r3, [r0, #4]
   b8152:	2b01      	cmp	r3, #1
{
   b8154:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b8156:	d00b      	beq.n	b8170 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b8158:	6803      	ldr	r3, [r0, #0]
   b815a:	2101      	movs	r1, #1
   b815c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8160:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b8162:	2200      	movs	r2, #0
   b8164:	2101      	movs	r1, #1
   b8166:	4620      	mov	r0, r4
   b8168:	f7ff ff4f 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b816c:	2301      	movs	r3, #1
   b816e:	7123      	strb	r3, [r4, #4]
}
   b8170:	2001      	movs	r0, #1
   b8172:	bd10      	pop	{r4, pc}

000b8174 <_ZN7RH_RF954recvEPhS0_>:
{
   b8174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b8176:	6803      	ldr	r3, [r0, #0]
   b8178:	68db      	ldr	r3, [r3, #12]
{
   b817a:	4604      	mov	r4, r0
   b817c:	460f      	mov	r7, r1
   b817e:	4615      	mov	r5, r2
    if (!available())
   b8180:	4798      	blx	r3
   b8182:	4606      	mov	r6, r0
   b8184:	b1b0      	cbz	r0, b81b4 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b8186:	b187      	cbz	r7, b81aa <_ZN7RH_RF954recvEPhS0_+0x36>
   b8188:	b17d      	cbz	r5, b81aa <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b818a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b818e:	782a      	ldrb	r2, [r5, #0]
   b8190:	3b03      	subs	r3, #3
   b8192:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b8194:	bfde      	ittt	le
   b8196:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b819a:	3b04      	suble	r3, #4
   b819c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b819e:	782a      	ldrb	r2, [r5, #0]
   b81a0:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b81a4:	4638      	mov	r0, r7
   b81a6:	f005 fc3b 	bl	bda20 <memcpy>
    _rxBufValid = false;
   b81aa:	2300      	movs	r3, #0
   b81ac:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b81b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b81b4:	4630      	mov	r0, r6
   b81b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b81b8 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b81b8:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b81ba:	b538      	push	{r3, r4, r5, lr}
   b81bc:	4605      	mov	r5, r0
   b81be:	460c      	mov	r4, r1
	if (power > 20)
   b81c0:	dc14      	bgt.n	b81ec <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b81c2:	2901      	cmp	r1, #1
   b81c4:	dd14      	ble.n	b81f0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b81c6:	2911      	cmp	r1, #17
   b81c8:	dd13      	ble.n	b81f2 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b81ca:	2207      	movs	r2, #7
   b81cc:	214d      	movs	r1, #77	; 0x4d
   b81ce:	4628      	mov	r0, r5
   b81d0:	f7ff ff1b 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b81d4:	3c03      	subs	r4, #3
   b81d6:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b81d8:	1ea2      	subs	r2, r4, #2
   b81da:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b81de:	4628      	mov	r0, r5
   b81e0:	b2d2      	uxtb	r2, r2
}
   b81e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b81e6:	2109      	movs	r1, #9
   b81e8:	f7ff bf0f 	b.w	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b81ec:	2414      	movs	r4, #20
   b81ee:	e7ec      	b.n	b81ca <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b81f0:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b81f2:	2204      	movs	r2, #4
   b81f4:	214d      	movs	r1, #77	; 0x4d
   b81f6:	4628      	mov	r0, r5
   b81f8:	f7ff ff07 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
   b81fc:	e7ec      	b.n	b81d8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b8200 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b8200:	b538      	push	{r3, r4, r5, lr}
   b8202:	4604      	mov	r4, r0
   b8204:	4615      	mov	r5, r2
    _rxBufValid(0)
   b8206:	461a      	mov	r2, r3
   b8208:	f7ff fece 	bl	b7fa8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b820c:	4b09      	ldr	r3, [pc, #36]	; (b8234 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b820e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b8210:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b8212:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b8214:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b8218:	2201      	movs	r2, #1
    _rxBufValid(0)
   b821a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b821e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b8222:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b8226:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b822a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b822e:	4620      	mov	r0, r4
   b8230:	bd38      	pop	{r3, r4, r5, pc}
   b8232:	bf00      	nop
   b8234:	000bef44 	.word	0x000bef44

000b8238 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b8238:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b823c:	2b03      	cmp	r3, #3
   b823e:	d91b      	bls.n	b8278 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b8240:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b8244:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b8246:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b824a:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b824c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b8250:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b8252:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b8256:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b8258:	7983      	ldrb	r3, [r0, #6]
   b825a:	b933      	cbnz	r3, b826a <_ZN7RH_RF9513validateRxBufEv+0x32>
   b825c:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b825e:	7942      	ldrb	r2, [r0, #5]
   b8260:	429a      	cmp	r2, r3
   b8262:	d002      	beq.n	b826a <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b8264:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b8266:	2bff      	cmp	r3, #255	; 0xff
   b8268:	d106      	bne.n	b8278 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b826a:	8a83      	ldrh	r3, [r0, #20]
   b826c:	3301      	adds	r3, #1
   b826e:	b29b      	uxth	r3, r3
   b8270:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b8272:	2301      	movs	r3, #1
   b8274:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b8278:	4770      	bx	lr
   b827a:	0000      	movs	r0, r0
   b827c:	0000      	movs	r0, r0
	...

000b8280 <_ZN7RH_RF9512setFrequencyEf>:
{
   b8280:	b538      	push	{r3, r4, r5, lr}
   b8282:	4604      	mov	r4, r0
   b8284:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8288:	ee10 0a10 	vmov	r0, s0
{
   b828c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8290:	f004 ffd4 	bl	bd23c <__aeabi_f2d>
   b8294:	a317      	add	r3, pc, #92	; (adr r3, b82f4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b8296:	e9d3 2300 	ldrd	r2, r3, [r3]
   b829a:	f005 f827 	bl	bd2ec <__aeabi_dmul>
   b829e:	a317      	add	r3, pc, #92	; (adr r3, b82fc <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b82a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82a4:	f005 f94c 	bl	bd540 <__aeabi_ddiv>
   b82a8:	f005 faf8 	bl	bd89c <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b82ac:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b82ae:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b82b0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b82b4:	4620      	mov	r0, r4
   b82b6:	f7ff fea8 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b82ba:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b82be:	2107      	movs	r1, #7
   b82c0:	4620      	mov	r0, r4
   b82c2:	f7ff fea2 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b82c6:	b2ea      	uxtb	r2, r5
   b82c8:	2108      	movs	r1, #8
   b82ca:	4620      	mov	r0, r4
   b82cc:	f7ff fe9d 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b82d0:	eddf 7a07 	vldr	s15, [pc, #28]	; b82f0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b82d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b82d8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b82dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b82e0:	bfac      	ite	ge
   b82e2:	2301      	movge	r3, #1
   b82e4:	2300      	movlt	r3, #0
}
   b82e6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b82e8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b82ec:	bd38      	pop	{r3, r4, r5, pc}
   b82ee:	bf00      	nop
   b82f0:	4442c000 	.word	0x4442c000
   b82f4:	00000000 	.word	0x00000000
   b82f8:	412e8480 	.word	0x412e8480
   b82fc:	00000000 	.word	0x00000000
   b8300:	404e8480 	.word	0x404e8480

000b8304 <_ZN7RH_RF9511setModeIdleEv>:
{
   b8304:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b8306:	7903      	ldrb	r3, [r0, #4]
   b8308:	2b02      	cmp	r3, #2
{
   b830a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b830c:	d00b      	beq.n	b8326 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b830e:	6803      	ldr	r3, [r0, #0]
   b8310:	2102      	movs	r1, #2
   b8312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8316:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b8318:	2201      	movs	r2, #1
   b831a:	4611      	mov	r1, r2
   b831c:	4620      	mov	r0, r4
   b831e:	f7ff fe74 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b8322:	2302      	movs	r3, #2
   b8324:	7123      	strb	r3, [r4, #4]
}
   b8326:	bd10      	pop	{r4, pc}

000b8328 <_ZN7RH_RF9515handleInterruptEv>:
{
   b8328:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b832a:	2112      	movs	r1, #18
{
   b832c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b832e:	f7ff fe4b 	bl	b7fc8 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b8332:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b8334:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b8336:	4620      	mov	r0, r4
   b8338:	f7ff fe46 	bl	b7fc8 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b833c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b833e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8340:	2112      	movs	r1, #18
   b8342:	4620      	mov	r0, r4
   b8344:	f7ff fe61 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b8348:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b834a:	2b04      	cmp	r3, #4
   b834c:	d107      	bne.n	b835e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b834e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b8352:	d117      	bne.n	b8384 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b8354:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b8358:	b10b      	cbz	r3, b835e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b835a:	0670      	lsls	r0, r6, #25
   b835c:	d512      	bpl.n	b8384 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b835e:	7923      	ldrb	r3, [r4, #4]
   b8360:	2b04      	cmp	r3, #4
   b8362:	d101      	bne.n	b8368 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b8364:	0669      	lsls	r1, r5, #25
   b8366:	d422      	bmi.n	b83ae <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b8368:	7923      	ldrb	r3, [r4, #4]
   b836a:	2b03      	cmp	r3, #3
   b836c:	d101      	bne.n	b8372 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b836e:	072a      	lsls	r2, r5, #28
   b8370:	d468      	bmi.n	b8444 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b8372:	7923      	ldrb	r3, [r4, #4]
   b8374:	2b05      	cmp	r3, #5
   b8376:	d10e      	bne.n	b8396 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b8378:	076b      	lsls	r3, r5, #29
   b837a:	d50c      	bpl.n	b8396 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b837c:	f005 0501 	and.w	r5, r5, #1
   b8380:	7625      	strb	r5, [r4, #24]
   b8382:	e063      	b.n	b844c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b8384:	8a63      	ldrh	r3, [r4, #18]
   b8386:	3301      	adds	r3, #1
   b8388:	b29b      	uxth	r3, r3
   b838a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b838c:	2300      	movs	r3, #0
   b838e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b8392:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8396:	22ff      	movs	r2, #255	; 0xff
   b8398:	2112      	movs	r1, #18
   b839a:	4620      	mov	r0, r4
   b839c:	f7ff fe35 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b83a0:	4620      	mov	r0, r4
   b83a2:	22ff      	movs	r2, #255	; 0xff
}
   b83a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b83a8:	2112      	movs	r1, #18
   b83aa:	f7ff be2e 	b.w	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b83ae:	2113      	movs	r1, #19
   b83b0:	4620      	mov	r0, r4
   b83b2:	f7ff fe09 	bl	b7fc8 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b83b6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b83b8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b83ba:	4620      	mov	r0, r4
   b83bc:	f7ff fe04 	bl	b7fc8 <_ZN11RHSPIDriver7spiReadEh>
   b83c0:	210d      	movs	r1, #13
   b83c2:	4602      	mov	r2, r0
   b83c4:	4620      	mov	r0, r4
   b83c6:	f7ff fe20 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b83ca:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b83ce:	462b      	mov	r3, r5
   b83d0:	2100      	movs	r1, #0
   b83d2:	4620      	mov	r0, r4
   b83d4:	f7ff fe3e 	bl	b8054 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b83d8:	2119      	movs	r1, #25
	_bufLen = len;
   b83da:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b83de:	4620      	mov	r0, r4
   b83e0:	f7ff fdf2 	bl	b7fc8 <_ZN11RHSPIDriver7spiReadEh>
   b83e4:	b240      	sxtb	r0, r0
   b83e6:	2800      	cmp	r0, #0
   b83e8:	bfb8      	it	lt
   b83ea:	3003      	addlt	r0, #3
   b83ec:	1080      	asrs	r0, r0, #2
   b83ee:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b83f2:	211a      	movs	r1, #26
   b83f4:	4620      	mov	r0, r4
   b83f6:	f7ff fde7 	bl	b7fc8 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b83fa:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b83fe:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b8400:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b8402:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b8404:	bfa9      	itett	ge
   b8406:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b8408:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b840a:	b21b      	sxthge	r3, r3
   b840c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b840e:	bfb2      	itee	lt
   b8410:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b8412:	220f      	movge	r2, #15
   b8414:	fb93 f3f2 	sdivge	r3, r3, r2
   b8418:	b21b      	sxth	r3, r3
   b841a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b841c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b8420:	b16b      	cbz	r3, b843e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b8422:	8a23      	ldrh	r3, [r4, #16]
   b8424:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b8426:	b21b      	sxth	r3, r3
   b8428:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b842a:	4620      	mov	r0, r4
   b842c:	f7ff ff04 	bl	b8238 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b8430:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b8434:	2b00      	cmp	r3, #0
   b8436:	d0ae      	beq.n	b8396 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b8438:	f7ff ff64 	bl	b8304 <_ZN7RH_RF9511setModeIdleEv>
   b843c:	e7ab      	b.n	b8396 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b843e:	8a23      	ldrh	r3, [r4, #16]
   b8440:	3ba4      	subs	r3, #164	; 0xa4
   b8442:	e7f0      	b.n	b8426 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b8444:	8ae3      	ldrh	r3, [r4, #22]
   b8446:	3301      	adds	r3, #1
   b8448:	b29b      	uxth	r3, r3
   b844a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b844c:	4620      	mov	r0, r4
   b844e:	e7f3      	b.n	b8438 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b8450 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b8450:	4b02      	ldr	r3, [pc, #8]	; (b845c <_ZN7RH_RF954isr0Ev+0xc>)
   b8452:	6818      	ldr	r0, [r3, #0]
   b8454:	b108      	cbz	r0, b845a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b8456:	f7ff bf67 	b.w	b8328 <_ZN7RH_RF9515handleInterruptEv>
}
   b845a:	4770      	bx	lr
   b845c:	2003e600 	.word	0x2003e600

000b8460 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b8460:	4b02      	ldr	r3, [pc, #8]	; (b846c <_ZN7RH_RF954isr1Ev+0xc>)
   b8462:	6858      	ldr	r0, [r3, #4]
   b8464:	b108      	cbz	r0, b846a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b8466:	f7ff bf5f 	b.w	b8328 <_ZN7RH_RF9515handleInterruptEv>
}
   b846a:	4770      	bx	lr
   b846c:	2003e600 	.word	0x2003e600

000b8470 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b8470:	4b02      	ldr	r3, [pc, #8]	; (b847c <_ZN7RH_RF954isr2Ev+0xc>)
   b8472:	6898      	ldr	r0, [r3, #8]
   b8474:	b108      	cbz	r0, b847a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b8476:	f7ff bf57 	b.w	b8328 <_ZN7RH_RF9515handleInterruptEv>
}
   b847a:	4770      	bx	lr
   b847c:	2003e600 	.word	0x2003e600

000b8480 <_ZN7RH_RF959setModeRxEv>:
{
   b8480:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b8482:	7903      	ldrb	r3, [r0, #4]
   b8484:	2b04      	cmp	r3, #4
{
   b8486:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b8488:	d010      	beq.n	b84ac <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b848a:	6803      	ldr	r3, [r0, #0]
   b848c:	2104      	movs	r1, #4
   b848e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8492:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b8494:	2205      	movs	r2, #5
   b8496:	2101      	movs	r1, #1
   b8498:	4620      	mov	r0, r4
   b849a:	f7ff fdb6 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b849e:	2200      	movs	r2, #0
   b84a0:	2140      	movs	r1, #64	; 0x40
   b84a2:	4620      	mov	r0, r4
   b84a4:	f7ff fdb1 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b84a8:	2304      	movs	r3, #4
   b84aa:	7123      	strb	r3, [r4, #4]
}
   b84ac:	bd10      	pop	{r4, pc}

000b84ae <_ZN7RH_RF959availableEv>:
{
   b84ae:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b84b0:	7903      	ldrb	r3, [r0, #4]
   b84b2:	2b03      	cmp	r3, #3
{
   b84b4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b84b6:	d005      	beq.n	b84c4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b84b8:	f7ff ffe2 	bl	b8480 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b84bc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b84c0:	b2c0      	uxtb	r0, r0
}
   b84c2:	bd10      	pop	{r4, pc}
	return false;
   b84c4:	2000      	movs	r0, #0
   b84c6:	e7fc      	b.n	b84c2 <_ZN7RH_RF959availableEv+0x14>

000b84c8 <_ZN7RH_RF959setModeTxEv>:
{
   b84c8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b84ca:	7903      	ldrb	r3, [r0, #4]
   b84cc:	2b03      	cmp	r3, #3
{
   b84ce:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b84d0:	d010      	beq.n	b84f4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b84d2:	6803      	ldr	r3, [r0, #0]
   b84d4:	2103      	movs	r1, #3
   b84d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b84da:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b84dc:	2203      	movs	r2, #3
   b84de:	2101      	movs	r1, #1
   b84e0:	4620      	mov	r0, r4
   b84e2:	f7ff fd92 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b84e6:	2240      	movs	r2, #64	; 0x40
   b84e8:	4611      	mov	r1, r2
   b84ea:	4620      	mov	r0, r4
   b84ec:	f7ff fd8d 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b84f0:	2303      	movs	r3, #3
   b84f2:	7123      	strb	r3, [r4, #4]
}
   b84f4:	bd10      	pop	{r4, pc}

000b84f6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b84f6:	2afb      	cmp	r2, #251	; 0xfb
{
   b84f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b84fa:	4604      	mov	r4, r0
   b84fc:	460f      	mov	r7, r1
   b84fe:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b8500:	d902      	bls.n	b8508 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b8502:	2600      	movs	r6, #0
}
   b8504:	4630      	mov	r0, r6
   b8506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b8508:	6803      	ldr	r3, [r0, #0]
   b850a:	6a1b      	ldr	r3, [r3, #32]
   b850c:	4798      	blx	r3
    setModeIdle();
   b850e:	4620      	mov	r0, r4
   b8510:	f7ff fef8 	bl	b8304 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b8514:	6823      	ldr	r3, [r4, #0]
   b8516:	4620      	mov	r0, r4
   b8518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b851a:	4798      	blx	r3
   b851c:	4606      	mov	r6, r0
   b851e:	2800      	cmp	r0, #0
   b8520:	d0ef      	beq.n	b8502 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b8522:	2200      	movs	r2, #0
   b8524:	210d      	movs	r1, #13
   b8526:	4620      	mov	r0, r4
   b8528:	f7ff fd6f 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b852c:	7ae2      	ldrb	r2, [r4, #11]
   b852e:	2100      	movs	r1, #0
   b8530:	4620      	mov	r0, r4
   b8532:	f7ff fd6a 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b8536:	7b22      	ldrb	r2, [r4, #12]
   b8538:	2100      	movs	r1, #0
   b853a:	4620      	mov	r0, r4
   b853c:	f7ff fd65 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b8540:	7b62      	ldrb	r2, [r4, #13]
   b8542:	2100      	movs	r1, #0
   b8544:	4620      	mov	r0, r4
   b8546:	f7ff fd60 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b854a:	7ba2      	ldrb	r2, [r4, #14]
   b854c:	2100      	movs	r1, #0
   b854e:	4620      	mov	r0, r4
   b8550:	f7ff fd5b 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b8554:	462b      	mov	r3, r5
   b8556:	463a      	mov	r2, r7
   b8558:	2100      	movs	r1, #0
   b855a:	4620      	mov	r0, r4
   b855c:	f7ff fda3 	bl	b80a6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b8560:	1d2a      	adds	r2, r5, #4
   b8562:	b2d2      	uxtb	r2, r2
   b8564:	2122      	movs	r1, #34	; 0x22
   b8566:	4620      	mov	r0, r4
   b8568:	f7ff fd4f 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b856c:	4620      	mov	r0, r4
   b856e:	f7ff ffab 	bl	b84c8 <_ZN7RH_RF959setModeTxEv>
    return true;
   b8572:	e7c7      	b.n	b8504 <_ZN7RH_RF954sendEPKhh+0xe>

000b8574 <_ZN7RH_RF9510setTxPowerEab>:
{
   b8574:	b510      	push	{r4, lr}
   b8576:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b8578:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b857c:	b172      	cbz	r2, b859c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b857e:	f381 0204 	usat	r2, #4, r1
   b8582:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b8586:	b2d2      	uxtb	r2, r2
   b8588:	2109      	movs	r1, #9
   b858a:	f7ff fd3e 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b858e:	4620      	mov	r0, r4
   b8590:	2204      	movs	r2, #4
}
   b8592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b8596:	214d      	movs	r1, #77	; 0x4d
   b8598:	f7ff bd37 	b.w	b800a <_ZN11RHSPIDriver8spiWriteEhh>
}
   b859c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b85a0:	f7ff be0a 	b.w	b81b8 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b85a4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b85a4:	b538      	push	{r3, r4, r5, lr}
   b85a6:	460c      	mov	r4, r1
   b85a8:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b85aa:	780a      	ldrb	r2, [r1, #0]
   b85ac:	211d      	movs	r1, #29
   b85ae:	f7ff fd2c 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b85b2:	7862      	ldrb	r2, [r4, #1]
   b85b4:	211e      	movs	r1, #30
   b85b6:	4628      	mov	r0, r5
   b85b8:	f7ff fd27 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b85bc:	78a2      	ldrb	r2, [r4, #2]
   b85be:	4628      	mov	r0, r5
   b85c0:	2126      	movs	r1, #38	; 0x26
}
   b85c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b85c6:	f7ff bd20 	b.w	b800a <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b85cc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b85cc:	2905      	cmp	r1, #5
{
   b85ce:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b85d0:	d80f      	bhi.n	b85f2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b85d2:	4b09      	ldr	r3, [pc, #36]	; (b85f8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b85d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b85d8:	185c      	adds	r4, r3, r1
   b85da:	5a5a      	ldrh	r2, [r3, r1]
   b85dc:	78a3      	ldrb	r3, [r4, #2]
   b85de:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b85e2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b85e4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b85e8:	f7ff ffdc 	bl	b85a4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b85ec:	2001      	movs	r0, #1
}
   b85ee:	b002      	add	sp, #8
   b85f0:	bd10      	pop	{r4, pc}
        return false;
   b85f2:	2000      	movs	r0, #0
   b85f4:	e7fb      	b.n	b85ee <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b85f6:	bf00      	nop
   b85f8:	000bef2c 	.word	0x000bef2c

000b85fc <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b85fc:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b85fe:	0a0a      	lsrs	r2, r1, #8
{
   b8600:	4605      	mov	r5, r0
   b8602:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b8604:	2120      	movs	r1, #32
   b8606:	f7ff fd00 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b860a:	b2e2      	uxtb	r2, r4
   b860c:	4628      	mov	r0, r5
   b860e:	2121      	movs	r1, #33	; 0x21
}
   b8610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b8614:	f7ff bcf9 	b.w	b800a <_ZN11RHSPIDriver8spiWriteEhh>

000b8618 <_ZN7RH_RF954initEv>:
{
   b8618:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b861a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b861c:	f7ff fca4 	bl	b7f68 <_ZN11RHSPIDriver4initEv>
   b8620:	4606      	mov	r6, r0
   b8622:	b918      	cbnz	r0, b862c <_ZN7RH_RF954initEv+0x14>
	return false;
   b8624:	2600      	movs	r6, #0
}
   b8626:	4630      	mov	r0, r6
   b8628:	b002      	add	sp, #8
   b862a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b862c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b8630:	2dff      	cmp	r5, #255	; 0xff
   b8632:	d054      	beq.n	b86de <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b8634:	4629      	mov	r1, r5
   b8636:	4620      	mov	r0, r4
   b8638:	f7ff fd5d 	bl	b80f6 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b863c:	2280      	movs	r2, #128	; 0x80
   b863e:	2101      	movs	r1, #1
   b8640:	4620      	mov	r0, r4
   b8642:	f7ff fce2 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b8646:	200a      	movs	r0, #10
   b8648:	f000 fd9c 	bl	b9184 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b864c:	2101      	movs	r1, #1
   b864e:	4620      	mov	r0, r4
   b8650:	f7ff fcba 	bl	b7fc8 <_ZN11RHSPIDriver7spiReadEh>
   b8654:	2880      	cmp	r0, #128	; 0x80
   b8656:	d1e5      	bne.n	b8624 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b8658:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b865c:	28ff      	cmp	r0, #255	; 0xff
   b865e:	d01c      	beq.n	b869a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b8660:	2100      	movs	r1, #0
   b8662:	f003 fae5 	bl	bbc30 <pinMode>
	if (_myInterruptIndex == 0xff)
   b8666:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b866a:	2bff      	cmp	r3, #255	; 0xff
   b866c:	d107      	bne.n	b867e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b866e:	4a26      	ldr	r2, [pc, #152]	; (b8708 <_ZN7RH_RF954initEv+0xf0>)
   b8670:	7813      	ldrb	r3, [r2, #0]
   b8672:	2b03      	cmp	r3, #3
   b8674:	d8d6      	bhi.n	b8624 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b8676:	1c59      	adds	r1, r3, #1
   b8678:	7011      	strb	r1, [r2, #0]
   b867a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b867e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b8682:	4b22      	ldr	r3, [pc, #136]	; (b870c <_ZN7RH_RF954initEv+0xf4>)
   b8684:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b8688:	bb62      	cbnz	r2, b86e4 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b868a:	4921      	ldr	r1, [pc, #132]	; (b8710 <_ZN7RH_RF954initEv+0xf8>)
   b868c:	9200      	str	r2, [sp, #0]
   b868e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8692:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b8694:	b2a8      	uxth	r0, r5
   b8696:	f001 f813 	bl	b96c0 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b869a:	2200      	movs	r2, #0
   b869c:	210e      	movs	r1, #14
   b869e:	4620      	mov	r0, r4
   b86a0:	f7ff fcb3 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b86a4:	2200      	movs	r2, #0
   b86a6:	210f      	movs	r1, #15
   b86a8:	4620      	mov	r0, r4
   b86aa:	f7ff fcae 	bl	b800a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b86ae:	4620      	mov	r0, r4
   b86b0:	f7ff fe28 	bl	b8304 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b86b4:	2100      	movs	r1, #0
   b86b6:	4620      	mov	r0, r4
   b86b8:	f7ff ff88 	bl	b85cc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b86bc:	2108      	movs	r1, #8
   b86be:	4620      	mov	r0, r4
   b86c0:	f7ff ff9c 	bl	b85fc <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b86c4:	ed9f 0a13 	vldr	s0, [pc, #76]	; b8714 <_ZN7RH_RF954initEv+0xfc>
   b86c8:	4620      	mov	r0, r4
   b86ca:	f7ff fdd9 	bl	b8280 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b86ce:	2300      	movs	r3, #0
   b86d0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b86d4:	210d      	movs	r1, #13
   b86d6:	4620      	mov	r0, r4
   b86d8:	f7ff fd6e 	bl	b81b8 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b86dc:	e7a3      	b.n	b8626 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b86de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b86e2:	e7ab      	b.n	b863c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b86e4:	2a01      	cmp	r2, #1
   b86e6:	f04f 0300 	mov.w	r3, #0
   b86ea:	d104      	bne.n	b86f6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b86ec:	9300      	str	r3, [sp, #0]
   b86ee:	490a      	ldr	r1, [pc, #40]	; (b8718 <_ZN7RH_RF954initEv+0x100>)
   b86f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b86f4:	e7ce      	b.n	b8694 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b86f6:	2a02      	cmp	r2, #2
   b86f8:	d194      	bne.n	b8624 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b86fa:	9300      	str	r3, [sp, #0]
   b86fc:	4907      	ldr	r1, [pc, #28]	; (b871c <_ZN7RH_RF954initEv+0x104>)
   b86fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8702:	2201      	movs	r2, #1
   b8704:	e7c6      	b.n	b8694 <_ZN7RH_RF954initEv+0x7c>
   b8706:	bf00      	nop
   b8708:	2003e5fd 	.word	0x2003e5fd
   b870c:	2003e600 	.word	0x2003e600
   b8710:	000b8451 	.word	0x000b8451
   b8714:	43d90000 	.word	0x43d90000
   b8718:	000b8461 	.word	0x000b8461
   b871c:	000b8471 	.word	0x000b8471

000b8720 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b8720:	6803      	ldr	r3, [r0, #0]
   b8722:	685b      	ldr	r3, [r3, #4]
   b8724:	4718      	bx	r3

000b8726 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8726:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b8728:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b872a:	4604      	mov	r4, r0
    if (lastUpdate) {
   b872c:	b133      	cbz	r3, b873c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b872e:	b131      	cbz	r1, b873e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b8730:	6823      	ldr	r3, [r4, #0]
   b8732:	4620      	mov	r0, r4
   b8734:	689b      	ldr	r3, [r3, #8]
   b8736:	4798      	blx	r3
            lastUpdate = 0;
   b8738:	2300      	movs	r3, #0
   b873a:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b873c:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b873e:	f000 f97f 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8742:	69a3      	ldr	r3, [r4, #24]
   b8744:	1ac0      	subs	r0, r0, r3
   b8746:	69e3      	ldr	r3, [r4, #28]
   b8748:	4298      	cmp	r0, r3
   b874a:	d2f1      	bcs.n	b8730 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b874c:	e7f6      	b.n	b873c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b874e <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b874e:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b8750:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8752:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b8754:	b11b      	cbz	r3, b875e <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8756:	f000 f973 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b875a:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b875c:	bd10      	pop	{r4, pc}
        save();
   b875e:	6803      	ldr	r3, [r0, #0]
}
   b8760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b8764:	689b      	ldr	r3, [r3, #8]
   b8766:	4718      	bx	r3

000b8768 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   b8768:	f000 b942 	b.w	b89f0 <os_mutex_recursive_unlock>

000b876c <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b876c:	b507      	push	{r0, r1, r2, lr}
   b876e:	4613      	mov	r3, r2
    if (data) {
   b8770:	b139      	cbz	r1, b8782 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b8772:	2200      	movs	r2, #0
   b8774:	e9cd 2200 	strd	r2, r2, [sp]
   b8778:	460a      	mov	r2, r1
   b877a:	6801      	ldr	r1, [r0, #0]
   b877c:	201e      	movs	r0, #30
   b877e:	f000 fb4f 	bl	b8e20 <log_dump>
}
   b8782:	b003      	add	sp, #12
   b8784:	f85d fb04 	ldr.w	pc, [sp], #4

000b8788 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   b8788:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   b878a:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   b878e:	4604      	mov	r4, r0
    if (logData) {
   b8790:	b19b      	cbz	r3, b87ba <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b8792:	6883      	ldr	r3, [r0, #8]
   b8794:	4d0a      	ldr	r5, [pc, #40]	; (b87c0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   b8796:	88da      	ldrh	r2, [r3, #6]
   b8798:	490a      	ldr	r1, [pc, #40]	; (b87c4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   b879a:	4628      	mov	r0, r5
   b879c:	f7fb fd62 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b87a0:	68a1      	ldr	r1, [r4, #8]
   b87a2:	4628      	mov	r0, r5
   b87a4:	88ca      	ldrh	r2, [r1, #6]
   b87a6:	f7ff ffe1 	bl	b876c <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b87aa:	2300      	movs	r3, #0
   b87ac:	9300      	str	r3, [sp, #0]
   b87ae:	4a06      	ldr	r2, [pc, #24]	; (b87c8 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b87b0:	6829      	ldr	r1, [r5, #0]
   b87b2:	2301      	movs	r3, #1
   b87b4:	201e      	movs	r0, #30
   b87b6:	f000 fb2b 	bl	b8e10 <log_write>
        Log.print("\n");
    }
}
   b87ba:	b003      	add	sp, #12
   b87bc:	bd30      	pop	{r4, r5, pc}
   b87be:	bf00      	nop
   b87c0:	2003e654 	.word	0x2003e654
   b87c4:	000befc8 	.word	0x000befc8
   b87c8:	000bf1c8 	.word	0x000bf1c8

000b87cc <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b87cc:	b510      	push	{r4, lr}
   b87ce:	4604      	mov	r4, r0
   b87d0:	3004      	adds	r0, #4
   b87d2:	f7fd f8fb 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b87d6:	6823      	ldr	r3, [r4, #0]
   b87d8:	68e1      	ldr	r1, [r4, #12]
   b87da:	695b      	ldr	r3, [r3, #20]
   b87dc:	4620      	mov	r0, r4
   b87de:	4798      	blx	r3
   b87e0:	b918      	cbnz	r0, b87ea <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b87e2:	6823      	ldr	r3, [r4, #0]
   b87e4:	4620      	mov	r0, r4
   b87e6:	699b      	ldr	r3, [r3, #24]
   b87e8:	4798      	blx	r3
      { _M_device.unlock(); }
   b87ea:	6860      	ldr	r0, [r4, #4]
   b87ec:	f7ff ffbc 	bl	b8768 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b87f0:	2001      	movs	r0, #1
   b87f2:	bd10      	pop	{r4, pc}

000b87f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b87f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b87f6:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b87fa:	4f18      	ldr	r7, [pc, #96]	; (b885c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b87fc:	4e18      	ldr	r6, [pc, #96]	; (b8860 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b87fe:	4d19      	ldr	r5, [pc, #100]	; (b8864 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b8800:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b8802:	42a0      	cmp	r0, r4
   b8804:	d00c      	beq.n	b8820 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8806:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b880a:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b880c:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b8810:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b8812:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8814:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b8818:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b881c:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b881e:	e7f0      	b.n	b8802 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b8820:	f001 0403 	and.w	r4, r1, #3
   b8824:	4404      	add	r4, r0
    k = 0;
   b8826:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b8828:	42a0      	cmp	r0, r4
   b882a:	d004      	beq.n	b8836 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b882c:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b8830:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8834:	e7f8      	b.n	b8828 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b8836:	4809      	ldr	r0, [pc, #36]	; (b885c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b8838:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b883a:	4809      	ldr	r0, [pc, #36]	; (b8860 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b883c:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b8840:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b8842:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8844:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b8846:	4b08      	ldr	r3, [pc, #32]	; (b8868 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b8848:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b884c:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b884e:	4b07      	ldr	r3, [pc, #28]	; (b886c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b8850:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b8854:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b8856:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b885c:	cc9e2d51 	.word	0xcc9e2d51
   b8860:	1b873593 	.word	0x1b873593
   b8864:	e6546b64 	.word	0xe6546b64
   b8868:	85ebca6b 	.word	0x85ebca6b
   b886c:	c2b2ae35 	.word	0xc2b2ae35

000b8870 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b8870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8872:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8874:	3004      	adds	r0, #4
   b8876:	f7fd f8a9 	bl	b59cc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b887a:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b887c:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b887e:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b8880:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8882:	68a6      	ldr	r6, [r4, #8]
   b8884:	4a05      	ldr	r2, [pc, #20]	; (b889c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b8886:	88f1      	ldrh	r1, [r6, #6]
   b8888:	4630      	mov	r0, r6
   b888a:	f7ff ffb3 	bl	b87f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b888e:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8890:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b8892:	6860      	ldr	r0, [r4, #4]
   b8894:	f7ff ff68 	bl	b8768 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8898:	4628      	mov	r0, r5
   b889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b889c:	851c2a3f 	.word	0x851c2a3f

000b88a0 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b88a0:	b570      	push	{r4, r5, r6, lr}
   b88a2:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b88a4:	6885      	ldr	r5, [r0, #8]
   b88a6:	f7ff ffe3 	bl	b8870 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b88aa:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b88ac:	6823      	ldr	r3, [r4, #0]
   b88ae:	4620      	mov	r0, r4
   b88b0:	691b      	ldr	r3, [r3, #16]
}
   b88b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b88b6:	4718      	bx	r3

000b88b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b88b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b88ba:	4604      	mov	r4, r0
   b88bc:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   b88be:	f7ff ffd7 	bl	b8870 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   b88c2:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   b88c6:	4606      	mov	r6, r0
    if (logData) {
   b88c8:	b193      	cbz	r3, b88f0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   b88ca:	4f29      	ldr	r7, [pc, #164]	; (b8970 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b88cc:	4929      	ldr	r1, [pc, #164]	; (b8974 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   b88ce:	462a      	mov	r2, r5
   b88d0:	4638      	mov	r0, r7
   b88d2:	f7fb fcc7 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b88d6:	68a1      	ldr	r1, [r4, #8]
   b88d8:	462a      	mov	r2, r5
   b88da:	4638      	mov	r0, r7
   b88dc:	f7ff ff46 	bl	b876c <_ZNK5spark6Logger4dumpEPKvj>
   b88e0:	2300      	movs	r3, #0
   b88e2:	9300      	str	r3, [sp, #0]
   b88e4:	4a24      	ldr	r2, [pc, #144]	; (b8978 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   b88e6:	6839      	ldr	r1, [r7, #0]
   b88e8:	2301      	movs	r3, #1
   b88ea:	201e      	movs	r0, #30
   b88ec:	f000 fa90 	bl	b8e10 <log_write>
    if (dataSize >= 12 && 
   b88f0:	2d0b      	cmp	r5, #11
   b88f2:	d923      	bls.n	b893c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   b88f4:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b88f6:	6922      	ldr	r2, [r4, #16]
   b88f8:	6819      	ldr	r1, [r3, #0]
   b88fa:	4291      	cmp	r1, r2
   b88fc:	d11f      	bne.n	b893e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   b88fe:	8899      	ldrh	r1, [r3, #4]
   b8900:	8aa2      	ldrh	r2, [r4, #20]
   b8902:	4291      	cmp	r1, r2
   b8904:	d11b      	bne.n	b893e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   b8906:	88d9      	ldrh	r1, [r3, #6]
   b8908:	b2aa      	uxth	r2, r5
   b890a:	4291      	cmp	r1, r2
   b890c:	d817      	bhi.n	b893e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b890e:	689a      	ldr	r2, [r3, #8]
   b8910:	42b2      	cmp	r2, r6
   b8912:	d114      	bne.n	b893e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   b8914:	68e2      	ldr	r2, [r4, #12]
   b8916:	42aa      	cmp	r2, r5
   b8918:	d905      	bls.n	b8926 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   b891a:	2100      	movs	r1, #0
   b891c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b891e:	68e2      	ldr	r2, [r4, #12]
   b8920:	3501      	adds	r5, #1
   b8922:	42aa      	cmp	r2, r5
   b8924:	d8fa      	bhi.n	b891c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8926:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b892a:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b892c:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b892e:	68a5      	ldr	r5, [r4, #8]
   b8930:	f7ff ff9e 	bl	b8870 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8934:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b8936:	2001      	movs	r0, #1
}
   b8938:	b003      	add	sp, #12
   b893a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b893c:	b19d      	cbz	r5, b8966 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   b893e:	68a1      	ldr	r1, [r4, #8]
   b8940:	680a      	ldr	r2, [r1, #0]
   b8942:	b192      	cbz	r2, b896a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b8944:	6888      	ldr	r0, [r1, #8]
   b8946:	888b      	ldrh	r3, [r1, #4]
   b8948:	9001      	str	r0, [sp, #4]
   b894a:	88c9      	ldrh	r1, [r1, #6]
   b894c:	4808      	ldr	r0, [pc, #32]	; (b8970 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b894e:	9100      	str	r1, [sp, #0]
   b8950:	490a      	ldr	r1, [pc, #40]	; (b897c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b8952:	f7fd fe2d 	bl	b65b0 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b8956:	e9cd 5600 	strd	r5, r6, [sp]
   b895a:	8aa3      	ldrh	r3, [r4, #20]
   b895c:	6922      	ldr	r2, [r4, #16]
   b895e:	4908      	ldr	r1, [pc, #32]	; (b8980 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b8960:	4803      	ldr	r0, [pc, #12]	; (b8970 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b8962:	f7fd fe25 	bl	b65b0 <_ZNK5spark6Logger5traceEPKcz>
   b8966:	2000      	movs	r0, #0
   b8968:	e7e6      	b.n	b8938 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b896a:	4610      	mov	r0, r2
   b896c:	e7e4      	b.n	b8938 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b896e:	bf00      	nop
   b8970:	2003e654 	.word	0x2003e654
   b8974:	000befdc 	.word	0x000befdc
   b8978:	000bf1c8 	.word	0x000bf1c8
   b897c:	000beff4 	.word	0x000beff4
   b8980:	000bf025 	.word	0x000bf025

000b8984 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b8984:	b538      	push	{r3, r4, r5, lr}
   b8986:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8988:	68c2      	ldr	r2, [r0, #12]
   b898a:	6880      	ldr	r0, [r0, #8]
   b898c:	2100      	movs	r1, #0
   b898e:	f005 f86f 	bl	bda70 <memset>
    savedDataHeader->magic = savedDataMagic;
   b8992:	68a3      	ldr	r3, [r4, #8]
   b8994:	6922      	ldr	r2, [r4, #16]
   b8996:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8998:	68a3      	ldr	r3, [r4, #8]
   b899a:	8aa2      	ldrh	r2, [r4, #20]
   b899c:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b899e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b89a2:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b89a4:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b89a6:	68a5      	ldr	r5, [r4, #8]
   b89a8:	f7ff ff62 	bl	b8870 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b89ac:	60a8      	str	r0, [r5, #8]
}
   b89ae:	bd38      	pop	{r3, r4, r5, pc}

000b89b0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b89b0:	b508      	push	{r3, lr}
   b89b2:	4b02      	ldr	r3, [pc, #8]	; (b89bc <cellular_signal+0xc>)
   b89b4:	681b      	ldr	r3, [r3, #0]
   b89b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b89b8:	9301      	str	r3, [sp, #4]
   b89ba:	bd08      	pop	{r3, pc}
   b89bc:	00030274 	.word	0x00030274

000b89c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b89c0:	b508      	push	{r3, lr}
   b89c2:	4b02      	ldr	r3, [pc, #8]	; (b89cc <os_mutex_recursive_create+0xc>)
   b89c4:	681b      	ldr	r3, [r3, #0]
   b89c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b89c8:	9301      	str	r3, [sp, #4]
   b89ca:	bd08      	pop	{r3, pc}
   b89cc:	00030248 	.word	0x00030248

000b89d0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b89d0:	b508      	push	{r3, lr}
   b89d2:	4b02      	ldr	r3, [pc, #8]	; (b89dc <os_mutex_recursive_destroy+0xc>)
   b89d4:	681b      	ldr	r3, [r3, #0]
   b89d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b89d8:	9301      	str	r3, [sp, #4]
   b89da:	bd08      	pop	{r3, pc}
   b89dc:	00030248 	.word	0x00030248

000b89e0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b89e0:	b508      	push	{r3, lr}
   b89e2:	4b02      	ldr	r3, [pc, #8]	; (b89ec <os_mutex_recursive_lock+0xc>)
   b89e4:	681b      	ldr	r3, [r3, #0]
   b89e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b89e8:	9301      	str	r3, [sp, #4]
   b89ea:	bd08      	pop	{r3, pc}
   b89ec:	00030248 	.word	0x00030248

000b89f0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b89f0:	b508      	push	{r3, lr}
   b89f2:	4b02      	ldr	r3, [pc, #8]	; (b89fc <os_mutex_recursive_unlock+0xc>)
   b89f4:	681b      	ldr	r3, [r3, #0]
   b89f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b89f8:	9301      	str	r3, [sp, #4]
   b89fa:	bd08      	pop	{r3, pc}
   b89fc:	00030248 	.word	0x00030248

000b8a00 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8a00:	b508      	push	{r3, lr}
   b8a02:	4b02      	ldr	r3, [pc, #8]	; (b8a0c <HAL_Core_Runtime_Info+0xc>)
   b8a04:	681b      	ldr	r3, [r3, #0]
   b8a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8a08:	9301      	str	r3, [sp, #4]
   b8a0a:	bd08      	pop	{r3, pc}
   b8a0c:	00030234 	.word	0x00030234

000b8a10 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8a10:	b508      	push	{r3, lr}
   b8a12:	4b02      	ldr	r3, [pc, #8]	; (b8a1c <HAL_Feature_Set+0xc>)
   b8a14:	681b      	ldr	r3, [r3, #0]
   b8a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8a18:	9301      	str	r3, [sp, #4]
   b8a1a:	bd08      	pop	{r3, pc}
   b8a1c:	00030234 	.word	0x00030234

000b8a20 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8a20:	b508      	push	{r3, lr}
   b8a22:	4b02      	ldr	r3, [pc, #8]	; (b8a2c <HAL_RNG_GetRandomNumber+0xc>)
   b8a24:	681b      	ldr	r3, [r3, #0]
   b8a26:	685b      	ldr	r3, [r3, #4]
   b8a28:	9301      	str	r3, [sp, #4]
   b8a2a:	bd08      	pop	{r3, pc}
   b8a2c:	00030218 	.word	0x00030218

000b8a30 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8a30:	b508      	push	{r3, lr}
   b8a32:	4b02      	ldr	r3, [pc, #8]	; (b8a3c <HAL_Delay_Microseconds+0xc>)
   b8a34:	681b      	ldr	r3, [r3, #0]
   b8a36:	68db      	ldr	r3, [r3, #12]
   b8a38:	9301      	str	r3, [sp, #4]
   b8a3a:	bd08      	pop	{r3, pc}
   b8a3c:	00030218 	.word	0x00030218

000b8a40 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8a40:	b508      	push	{r3, lr}
   b8a42:	4b02      	ldr	r3, [pc, #8]	; (b8a4c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8a44:	681b      	ldr	r3, [r3, #0]
   b8a46:	695b      	ldr	r3, [r3, #20]
   b8a48:	9301      	str	r3, [sp, #4]
   b8a4a:	bd08      	pop	{r3, pc}
   b8a4c:	00030218 	.word	0x00030218

000b8a50 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8a50:	b508      	push	{r3, lr}
   b8a52:	4b02      	ldr	r3, [pc, #8]	; (b8a5c <hal_rtc_time_is_valid+0xc>)
   b8a54:	681b      	ldr	r3, [r3, #0]
   b8a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8a58:	9301      	str	r3, [sp, #4]
   b8a5a:	bd08      	pop	{r3, pc}
   b8a5c:	00030218 	.word	0x00030218

000b8a60 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8a60:	b508      	push	{r3, lr}
   b8a62:	4b02      	ldr	r3, [pc, #8]	; (b8a6c <hal_timer_millis+0xc>)
   b8a64:	681b      	ldr	r3, [r3, #0]
   b8a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8a68:	9301      	str	r3, [sp, #4]
   b8a6a:	bd08      	pop	{r3, pc}
   b8a6c:	00030218 	.word	0x00030218

000b8a70 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8a70:	b508      	push	{r3, lr}
   b8a72:	4b02      	ldr	r3, [pc, #8]	; (b8a7c <hal_rtc_get_time+0xc>)
   b8a74:	681b      	ldr	r3, [r3, #0]
   b8a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8a78:	9301      	str	r3, [sp, #4]
   b8a7a:	bd08      	pop	{r3, pc}
   b8a7c:	00030218 	.word	0x00030218

000b8a80 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8a80:	b508      	push	{r3, lr}
   b8a82:	4b02      	ldr	r3, [pc, #8]	; (b8a8c <hal_rtc_set_time+0xc>)
   b8a84:	681b      	ldr	r3, [r3, #0]
   b8a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8a88:	9301      	str	r3, [sp, #4]
   b8a8a:	bd08      	pop	{r3, pc}
   b8a8c:	00030218 	.word	0x00030218

000b8a90 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8a90:	b508      	push	{r3, lr}
   b8a92:	4b02      	ldr	r3, [pc, #8]	; (b8a9c <HAL_Pin_Map+0xc>)
   b8a94:	681b      	ldr	r3, [r3, #0]
   b8a96:	681b      	ldr	r3, [r3, #0]
   b8a98:	9301      	str	r3, [sp, #4]
   b8a9a:	bd08      	pop	{r3, pc}
   b8a9c:	0003022c 	.word	0x0003022c

000b8aa0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8aa0:	b508      	push	{r3, lr}
   b8aa2:	4b02      	ldr	r3, [pc, #8]	; (b8aac <HAL_Validate_Pin_Function+0xc>)
   b8aa4:	681b      	ldr	r3, [r3, #0]
   b8aa6:	685b      	ldr	r3, [r3, #4]
   b8aa8:	9301      	str	r3, [sp, #4]
   b8aaa:	bd08      	pop	{r3, pc}
   b8aac:	0003022c 	.word	0x0003022c

000b8ab0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8ab0:	b508      	push	{r3, lr}
   b8ab2:	4b02      	ldr	r3, [pc, #8]	; (b8abc <HAL_Pin_Mode+0xc>)
   b8ab4:	681b      	ldr	r3, [r3, #0]
   b8ab6:	689b      	ldr	r3, [r3, #8]
   b8ab8:	9301      	str	r3, [sp, #4]
   b8aba:	bd08      	pop	{r3, pc}
   b8abc:	0003022c 	.word	0x0003022c

000b8ac0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8ac0:	b508      	push	{r3, lr}
   b8ac2:	4b02      	ldr	r3, [pc, #8]	; (b8acc <HAL_Get_Pin_Mode+0xc>)
   b8ac4:	681b      	ldr	r3, [r3, #0]
   b8ac6:	68db      	ldr	r3, [r3, #12]
   b8ac8:	9301      	str	r3, [sp, #4]
   b8aca:	bd08      	pop	{r3, pc}
   b8acc:	0003022c 	.word	0x0003022c

000b8ad0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8ad0:	b508      	push	{r3, lr}
   b8ad2:	4b02      	ldr	r3, [pc, #8]	; (b8adc <HAL_GPIO_Write+0xc>)
   b8ad4:	681b      	ldr	r3, [r3, #0]
   b8ad6:	691b      	ldr	r3, [r3, #16]
   b8ad8:	9301      	str	r3, [sp, #4]
   b8ada:	bd08      	pop	{r3, pc}
   b8adc:	0003022c 	.word	0x0003022c

000b8ae0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8ae0:	b508      	push	{r3, lr}
   b8ae2:	4b02      	ldr	r3, [pc, #8]	; (b8aec <HAL_GPIO_Read+0xc>)
   b8ae4:	681b      	ldr	r3, [r3, #0]
   b8ae6:	695b      	ldr	r3, [r3, #20]
   b8ae8:	9301      	str	r3, [sp, #4]
   b8aea:	bd08      	pop	{r3, pc}
   b8aec:	0003022c 	.word	0x0003022c

000b8af0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8af0:	b508      	push	{r3, lr}
   b8af2:	4b02      	ldr	r3, [pc, #8]	; (b8afc <HAL_Interrupts_Attach+0xc>)
   b8af4:	681b      	ldr	r3, [r3, #0]
   b8af6:	699b      	ldr	r3, [r3, #24]
   b8af8:	9301      	str	r3, [sp, #4]
   b8afa:	bd08      	pop	{r3, pc}
   b8afc:	0003022c 	.word	0x0003022c

000b8b00 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8b00:	b508      	push	{r3, lr}
   b8b02:	4b02      	ldr	r3, [pc, #8]	; (b8b0c <HAL_Interrupts_Detach+0xc>)
   b8b04:	681b      	ldr	r3, [r3, #0]
   b8b06:	69db      	ldr	r3, [r3, #28]
   b8b08:	9301      	str	r3, [sp, #4]
   b8b0a:	bd08      	pop	{r3, pc}
   b8b0c:	0003022c 	.word	0x0003022c

000b8b10 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8b10:	b508      	push	{r3, lr}
   b8b12:	4b02      	ldr	r3, [pc, #8]	; (b8b1c <hal_adc_read+0xc>)
   b8b14:	681b      	ldr	r3, [r3, #0]
   b8b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b18:	9301      	str	r3, [sp, #4]
   b8b1a:	bd08      	pop	{r3, pc}
   b8b1c:	0003022c 	.word	0x0003022c

000b8b20 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8b20:	b508      	push	{r3, lr}
   b8b22:	4b02      	ldr	r3, [pc, #8]	; (b8b2c <hal_i2c_begin+0xc>)
   b8b24:	681b      	ldr	r3, [r3, #0]
   b8b26:	68db      	ldr	r3, [r3, #12]
   b8b28:	9301      	str	r3, [sp, #4]
   b8b2a:	bd08      	pop	{r3, pc}
   b8b2c:	00030228 	.word	0x00030228

000b8b30 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8b30:	b508      	push	{r3, lr}
   b8b32:	4b02      	ldr	r3, [pc, #8]	; (b8b3c <hal_i2c_begin_transmission+0xc>)
   b8b34:	681b      	ldr	r3, [r3, #0]
   b8b36:	699b      	ldr	r3, [r3, #24]
   b8b38:	9301      	str	r3, [sp, #4]
   b8b3a:	bd08      	pop	{r3, pc}
   b8b3c:	00030228 	.word	0x00030228

000b8b40 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8b40:	b508      	push	{r3, lr}
   b8b42:	4b02      	ldr	r3, [pc, #8]	; (b8b4c <hal_i2c_end_transmission+0xc>)
   b8b44:	681b      	ldr	r3, [r3, #0]
   b8b46:	69db      	ldr	r3, [r3, #28]
   b8b48:	9301      	str	r3, [sp, #4]
   b8b4a:	bd08      	pop	{r3, pc}
   b8b4c:	00030228 	.word	0x00030228

000b8b50 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8b50:	b508      	push	{r3, lr}
   b8b52:	4b02      	ldr	r3, [pc, #8]	; (b8b5c <hal_i2c_write+0xc>)
   b8b54:	681b      	ldr	r3, [r3, #0]
   b8b56:	6a1b      	ldr	r3, [r3, #32]
   b8b58:	9301      	str	r3, [sp, #4]
   b8b5a:	bd08      	pop	{r3, pc}
   b8b5c:	00030228 	.word	0x00030228

000b8b60 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8b60:	b508      	push	{r3, lr}
   b8b62:	4b02      	ldr	r3, [pc, #8]	; (b8b6c <hal_i2c_available+0xc>)
   b8b64:	681b      	ldr	r3, [r3, #0]
   b8b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8b68:	9301      	str	r3, [sp, #4]
   b8b6a:	bd08      	pop	{r3, pc}
   b8b6c:	00030228 	.word	0x00030228

000b8b70 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8b70:	b508      	push	{r3, lr}
   b8b72:	4b02      	ldr	r3, [pc, #8]	; (b8b7c <hal_i2c_read+0xc>)
   b8b74:	681b      	ldr	r3, [r3, #0]
   b8b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8b78:	9301      	str	r3, [sp, #4]
   b8b7a:	bd08      	pop	{r3, pc}
   b8b7c:	00030228 	.word	0x00030228

000b8b80 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8b80:	b508      	push	{r3, lr}
   b8b82:	4b02      	ldr	r3, [pc, #8]	; (b8b8c <hal_i2c_peek+0xc>)
   b8b84:	681b      	ldr	r3, [r3, #0]
   b8b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b88:	9301      	str	r3, [sp, #4]
   b8b8a:	bd08      	pop	{r3, pc}
   b8b8c:	00030228 	.word	0x00030228

000b8b90 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8b90:	b508      	push	{r3, lr}
   b8b92:	4b02      	ldr	r3, [pc, #8]	; (b8b9c <hal_i2c_flush+0xc>)
   b8b94:	681b      	ldr	r3, [r3, #0]
   b8b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b98:	9301      	str	r3, [sp, #4]
   b8b9a:	bd08      	pop	{r3, pc}
   b8b9c:	00030228 	.word	0x00030228

000b8ba0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8ba0:	b508      	push	{r3, lr}
   b8ba2:	4b02      	ldr	r3, [pc, #8]	; (b8bac <hal_i2c_is_enabled+0xc>)
   b8ba4:	681b      	ldr	r3, [r3, #0]
   b8ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8ba8:	9301      	str	r3, [sp, #4]
   b8baa:	bd08      	pop	{r3, pc}
   b8bac:	00030228 	.word	0x00030228

000b8bb0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8bb0:	b508      	push	{r3, lr}
   b8bb2:	4b02      	ldr	r3, [pc, #8]	; (b8bbc <hal_i2c_init+0xc>)
   b8bb4:	681b      	ldr	r3, [r3, #0]
   b8bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8bb8:	9301      	str	r3, [sp, #4]
   b8bba:	bd08      	pop	{r3, pc}
   b8bbc:	00030228 	.word	0x00030228

000b8bc0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b8bc0:	b508      	push	{r3, lr}
   b8bc2:	4b02      	ldr	r3, [pc, #8]	; (b8bcc <hal_i2c_lock+0xc>)
   b8bc4:	681b      	ldr	r3, [r3, #0]
   b8bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8bc8:	9301      	str	r3, [sp, #4]
   b8bca:	bd08      	pop	{r3, pc}
   b8bcc:	00030228 	.word	0x00030228

000b8bd0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b8bd0:	b508      	push	{r3, lr}
   b8bd2:	4b02      	ldr	r3, [pc, #8]	; (b8bdc <hal_i2c_unlock+0xc>)
   b8bd4:	681b      	ldr	r3, [r3, #0]
   b8bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8bd8:	9301      	str	r3, [sp, #4]
   b8bda:	bd08      	pop	{r3, pc}
   b8bdc:	00030228 	.word	0x00030228

000b8be0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8be0:	b508      	push	{r3, lr}
   b8be2:	4b02      	ldr	r3, [pc, #8]	; (b8bec <hal_i2c_request_ex+0xc>)
   b8be4:	681b      	ldr	r3, [r3, #0]
   b8be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8be8:	9301      	str	r3, [sp, #4]
   b8bea:	bd08      	pop	{r3, pc}
   b8bec:	00030228 	.word	0x00030228

000b8bf0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8bf0:	b508      	push	{r3, lr}
   b8bf2:	4b02      	ldr	r3, [pc, #8]	; (b8bfc <inet_inet_ntop+0xc>)
   b8bf4:	681b      	ldr	r3, [r3, #0]
   b8bf6:	695b      	ldr	r3, [r3, #20]
   b8bf8:	9301      	str	r3, [sp, #4]
   b8bfa:	bd08      	pop	{r3, pc}
   b8bfc:	00030264 	.word	0x00030264

000b8c00 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8c00:	b508      	push	{r3, lr}
   b8c02:	4b02      	ldr	r3, [pc, #8]	; (b8c0c <netdb_freeaddrinfo+0xc>)
   b8c04:	681b      	ldr	r3, [r3, #0]
   b8c06:	689b      	ldr	r3, [r3, #8]
   b8c08:	9301      	str	r3, [sp, #4]
   b8c0a:	bd08      	pop	{r3, pc}
   b8c0c:	00030268 	.word	0x00030268

000b8c10 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8c10:	b508      	push	{r3, lr}
   b8c12:	4b02      	ldr	r3, [pc, #8]	; (b8c1c <netdb_getaddrinfo+0xc>)
   b8c14:	681b      	ldr	r3, [r3, #0]
   b8c16:	68db      	ldr	r3, [r3, #12]
   b8c18:	9301      	str	r3, [sp, #4]
   b8c1a:	bd08      	pop	{r3, pc}
   b8c1c:	00030268 	.word	0x00030268

000b8c20 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8c20:	b508      	push	{r3, lr}
   b8c22:	4b02      	ldr	r3, [pc, #8]	; (b8c2c <hal_spi_begin+0xc>)
   b8c24:	681b      	ldr	r3, [r3, #0]
   b8c26:	681b      	ldr	r3, [r3, #0]
   b8c28:	9301      	str	r3, [sp, #4]
   b8c2a:	bd08      	pop	{r3, pc}
   b8c2c:	00030230 	.word	0x00030230

000b8c30 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8c30:	b508      	push	{r3, lr}
   b8c32:	4b02      	ldr	r3, [pc, #8]	; (b8c3c <hal_spi_end+0xc>)
   b8c34:	681b      	ldr	r3, [r3, #0]
   b8c36:	685b      	ldr	r3, [r3, #4]
   b8c38:	9301      	str	r3, [sp, #4]
   b8c3a:	bd08      	pop	{r3, pc}
   b8c3c:	00030230 	.word	0x00030230

000b8c40 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8c40:	b508      	push	{r3, lr}
   b8c42:	4b02      	ldr	r3, [pc, #8]	; (b8c4c <hal_spi_transfer+0xc>)
   b8c44:	681b      	ldr	r3, [r3, #0]
   b8c46:	695b      	ldr	r3, [r3, #20]
   b8c48:	9301      	str	r3, [sp, #4]
   b8c4a:	bd08      	pop	{r3, pc}
   b8c4c:	00030230 	.word	0x00030230

000b8c50 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8c50:	b508      	push	{r3, lr}
   b8c52:	4b02      	ldr	r3, [pc, #8]	; (b8c5c <hal_spi_init+0xc>)
   b8c54:	681b      	ldr	r3, [r3, #0]
   b8c56:	69db      	ldr	r3, [r3, #28]
   b8c58:	9301      	str	r3, [sp, #4]
   b8c5a:	bd08      	pop	{r3, pc}
   b8c5c:	00030230 	.word	0x00030230

000b8c60 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8c60:	b508      	push	{r3, lr}
   b8c62:	4b02      	ldr	r3, [pc, #8]	; (b8c6c <hal_spi_is_enabled+0xc>)
   b8c64:	681b      	ldr	r3, [r3, #0]
   b8c66:	6a1b      	ldr	r3, [r3, #32]
   b8c68:	9301      	str	r3, [sp, #4]
   b8c6a:	bd08      	pop	{r3, pc}
   b8c6c:	00030230 	.word	0x00030230

000b8c70 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8c70:	b508      	push	{r3, lr}
   b8c72:	4b02      	ldr	r3, [pc, #8]	; (b8c7c <hal_spi_info+0xc>)
   b8c74:	681b      	ldr	r3, [r3, #0]
   b8c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8c78:	9301      	str	r3, [sp, #4]
   b8c7a:	bd08      	pop	{r3, pc}
   b8c7c:	00030230 	.word	0x00030230

000b8c80 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8c80:	b508      	push	{r3, lr}
   b8c82:	4b02      	ldr	r3, [pc, #8]	; (b8c8c <hal_spi_set_settings+0xc>)
   b8c84:	681b      	ldr	r3, [r3, #0]
   b8c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8c88:	9301      	str	r3, [sp, #4]
   b8c8a:	bd08      	pop	{r3, pc}
   b8c8c:	00030230 	.word	0x00030230

000b8c90 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8c90:	b508      	push	{r3, lr}
   b8c92:	4b02      	ldr	r3, [pc, #8]	; (b8c9c <hal_spi_acquire+0xc>)
   b8c94:	681b      	ldr	r3, [r3, #0]
   b8c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8c98:	9301      	str	r3, [sp, #4]
   b8c9a:	bd08      	pop	{r3, pc}
   b8c9c:	00030230 	.word	0x00030230

000b8ca0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8ca0:	b508      	push	{r3, lr}
   b8ca2:	4b02      	ldr	r3, [pc, #8]	; (b8cac <hal_spi_release+0xc>)
   b8ca4:	681b      	ldr	r3, [r3, #0]
   b8ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ca8:	9301      	str	r3, [sp, #4]
   b8caa:	bd08      	pop	{r3, pc}
   b8cac:	00030230 	.word	0x00030230

000b8cb0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b8cb0:	b508      	push	{r3, lr}
   b8cb2:	4b02      	ldr	r3, [pc, #8]	; (b8cbc <hal_usart_end+0xc>)
   b8cb4:	681b      	ldr	r3, [r3, #0]
   b8cb6:	689b      	ldr	r3, [r3, #8]
   b8cb8:	9301      	str	r3, [sp, #4]
   b8cba:	bd08      	pop	{r3, pc}
   b8cbc:	0003023c 	.word	0x0003023c

000b8cc0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8cc0:	b508      	push	{r3, lr}
   b8cc2:	4b02      	ldr	r3, [pc, #8]	; (b8ccc <hal_usart_write+0xc>)
   b8cc4:	681b      	ldr	r3, [r3, #0]
   b8cc6:	68db      	ldr	r3, [r3, #12]
   b8cc8:	9301      	str	r3, [sp, #4]
   b8cca:	bd08      	pop	{r3, pc}
   b8ccc:	0003023c 	.word	0x0003023c

000b8cd0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8cd0:	b508      	push	{r3, lr}
   b8cd2:	4b02      	ldr	r3, [pc, #8]	; (b8cdc <hal_usart_available+0xc>)
   b8cd4:	681b      	ldr	r3, [r3, #0]
   b8cd6:	691b      	ldr	r3, [r3, #16]
   b8cd8:	9301      	str	r3, [sp, #4]
   b8cda:	bd08      	pop	{r3, pc}
   b8cdc:	0003023c 	.word	0x0003023c

000b8ce0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8ce0:	b508      	push	{r3, lr}
   b8ce2:	4b02      	ldr	r3, [pc, #8]	; (b8cec <hal_usart_read+0xc>)
   b8ce4:	681b      	ldr	r3, [r3, #0]
   b8ce6:	695b      	ldr	r3, [r3, #20]
   b8ce8:	9301      	str	r3, [sp, #4]
   b8cea:	bd08      	pop	{r3, pc}
   b8cec:	0003023c 	.word	0x0003023c

000b8cf0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8cf0:	b508      	push	{r3, lr}
   b8cf2:	4b02      	ldr	r3, [pc, #8]	; (b8cfc <hal_usart_peek+0xc>)
   b8cf4:	681b      	ldr	r3, [r3, #0]
   b8cf6:	699b      	ldr	r3, [r3, #24]
   b8cf8:	9301      	str	r3, [sp, #4]
   b8cfa:	bd08      	pop	{r3, pc}
   b8cfc:	0003023c 	.word	0x0003023c

000b8d00 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8d00:	b508      	push	{r3, lr}
   b8d02:	4b02      	ldr	r3, [pc, #8]	; (b8d0c <hal_usart_flush+0xc>)
   b8d04:	681b      	ldr	r3, [r3, #0]
   b8d06:	69db      	ldr	r3, [r3, #28]
   b8d08:	9301      	str	r3, [sp, #4]
   b8d0a:	bd08      	pop	{r3, pc}
   b8d0c:	0003023c 	.word	0x0003023c

000b8d10 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8d10:	b508      	push	{r3, lr}
   b8d12:	4b02      	ldr	r3, [pc, #8]	; (b8d1c <hal_usart_is_enabled+0xc>)
   b8d14:	681b      	ldr	r3, [r3, #0]
   b8d16:	6a1b      	ldr	r3, [r3, #32]
   b8d18:	9301      	str	r3, [sp, #4]
   b8d1a:	bd08      	pop	{r3, pc}
   b8d1c:	0003023c 	.word	0x0003023c

000b8d20 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8d20:	b508      	push	{r3, lr}
   b8d22:	4b02      	ldr	r3, [pc, #8]	; (b8d2c <hal_usart_available_data_for_write+0xc>)
   b8d24:	681b      	ldr	r3, [r3, #0]
   b8d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8d28:	9301      	str	r3, [sp, #4]
   b8d2a:	bd08      	pop	{r3, pc}
   b8d2c:	0003023c 	.word	0x0003023c

000b8d30 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8d30:	b508      	push	{r3, lr}
   b8d32:	4b02      	ldr	r3, [pc, #8]	; (b8d3c <hal_usart_begin_config+0xc>)
   b8d34:	681b      	ldr	r3, [r3, #0]
   b8d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8d38:	9301      	str	r3, [sp, #4]
   b8d3a:	bd08      	pop	{r3, pc}
   b8d3c:	0003023c 	.word	0x0003023c

000b8d40 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8d40:	b508      	push	{r3, lr}
   b8d42:	4b02      	ldr	r3, [pc, #8]	; (b8d4c <hal_usart_init_ex+0xc>)
   b8d44:	681b      	ldr	r3, [r3, #0]
   b8d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8d48:	9301      	str	r3, [sp, #4]
   b8d4a:	bd08      	pop	{r3, pc}
   b8d4c:	0003023c 	.word	0x0003023c

000b8d50 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8d50:	b508      	push	{r3, lr}
   b8d52:	4b02      	ldr	r3, [pc, #8]	; (b8d5c <HAL_USB_USART_Init+0xc>)
   b8d54:	681b      	ldr	r3, [r3, #0]
   b8d56:	681b      	ldr	r3, [r3, #0]
   b8d58:	9301      	str	r3, [sp, #4]
   b8d5a:	bd08      	pop	{r3, pc}
   b8d5c:	0003024c 	.word	0x0003024c

000b8d60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8d60:	b508      	push	{r3, lr}
   b8d62:	4b02      	ldr	r3, [pc, #8]	; (b8d6c <HAL_USB_USART_Begin+0xc>)
   b8d64:	681b      	ldr	r3, [r3, #0]
   b8d66:	685b      	ldr	r3, [r3, #4]
   b8d68:	9301      	str	r3, [sp, #4]
   b8d6a:	bd08      	pop	{r3, pc}
   b8d6c:	0003024c 	.word	0x0003024c

000b8d70 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b8d70:	b508      	push	{r3, lr}
   b8d72:	4b02      	ldr	r3, [pc, #8]	; (b8d7c <HAL_USB_USART_End+0xc>)
   b8d74:	681b      	ldr	r3, [r3, #0]
   b8d76:	689b      	ldr	r3, [r3, #8]
   b8d78:	9301      	str	r3, [sp, #4]
   b8d7a:	bd08      	pop	{r3, pc}
   b8d7c:	0003024c 	.word	0x0003024c

000b8d80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8d80:	b508      	push	{r3, lr}
   b8d82:	4b02      	ldr	r3, [pc, #8]	; (b8d8c <HAL_USB_USART_Available_Data+0xc>)
   b8d84:	681b      	ldr	r3, [r3, #0]
   b8d86:	691b      	ldr	r3, [r3, #16]
   b8d88:	9301      	str	r3, [sp, #4]
   b8d8a:	bd08      	pop	{r3, pc}
   b8d8c:	0003024c 	.word	0x0003024c

000b8d90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8d90:	b508      	push	{r3, lr}
   b8d92:	4b02      	ldr	r3, [pc, #8]	; (b8d9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8d94:	681b      	ldr	r3, [r3, #0]
   b8d96:	695b      	ldr	r3, [r3, #20]
   b8d98:	9301      	str	r3, [sp, #4]
   b8d9a:	bd08      	pop	{r3, pc}
   b8d9c:	0003024c 	.word	0x0003024c

000b8da0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8da0:	b508      	push	{r3, lr}
   b8da2:	4b02      	ldr	r3, [pc, #8]	; (b8dac <HAL_USB_USART_Receive_Data+0xc>)
   b8da4:	681b      	ldr	r3, [r3, #0]
   b8da6:	699b      	ldr	r3, [r3, #24]
   b8da8:	9301      	str	r3, [sp, #4]
   b8daa:	bd08      	pop	{r3, pc}
   b8dac:	0003024c 	.word	0x0003024c

000b8db0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8db0:	b508      	push	{r3, lr}
   b8db2:	4b02      	ldr	r3, [pc, #8]	; (b8dbc <HAL_USB_USART_Send_Data+0xc>)
   b8db4:	681b      	ldr	r3, [r3, #0]
   b8db6:	69db      	ldr	r3, [r3, #28]
   b8db8:	9301      	str	r3, [sp, #4]
   b8dba:	bd08      	pop	{r3, pc}
   b8dbc:	0003024c 	.word	0x0003024c

000b8dc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8dc0:	b508      	push	{r3, lr}
   b8dc2:	4b02      	ldr	r3, [pc, #8]	; (b8dcc <HAL_USB_USART_Flush_Data+0xc>)
   b8dc4:	681b      	ldr	r3, [r3, #0]
   b8dc6:	6a1b      	ldr	r3, [r3, #32]
   b8dc8:	9301      	str	r3, [sp, #4]
   b8dca:	bd08      	pop	{r3, pc}
   b8dcc:	0003024c 	.word	0x0003024c

000b8dd0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b8dd0:	b508      	push	{r3, lr}
   b8dd2:	4b02      	ldr	r3, [pc, #8]	; (b8ddc <HAL_USB_USART_Is_Connected+0xc>)
   b8dd4:	681b      	ldr	r3, [r3, #0]
   b8dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8dd8:	9301      	str	r3, [sp, #4]
   b8dda:	bd08      	pop	{r3, pc}
   b8ddc:	0003024c 	.word	0x0003024c

000b8de0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8de0:	b508      	push	{r3, lr}
   b8de2:	4b02      	ldr	r3, [pc, #8]	; (b8dec <panic_+0xc>)
   b8de4:	681b      	ldr	r3, [r3, #0]
   b8de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8de8:	9301      	str	r3, [sp, #4]
   b8dea:	bd08      	pop	{r3, pc}
   b8dec:	00030260 	.word	0x00030260

000b8df0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8df0:	b508      	push	{r3, lr}
   b8df2:	4b02      	ldr	r3, [pc, #8]	; (b8dfc <log_message+0xc>)
   b8df4:	681b      	ldr	r3, [r3, #0]
   b8df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8df8:	9301      	str	r3, [sp, #4]
   b8dfa:	bd08      	pop	{r3, pc}
   b8dfc:	00030260 	.word	0x00030260

000b8e00 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8e00:	b508      	push	{r3, lr}
   b8e02:	4b02      	ldr	r3, [pc, #8]	; (b8e0c <log_message_v+0xc>)
   b8e04:	681b      	ldr	r3, [r3, #0]
   b8e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8e08:	9301      	str	r3, [sp, #4]
   b8e0a:	bd08      	pop	{r3, pc}
   b8e0c:	00030260 	.word	0x00030260

000b8e10 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b8e10:	b508      	push	{r3, lr}
   b8e12:	4b02      	ldr	r3, [pc, #8]	; (b8e1c <log_write+0xc>)
   b8e14:	681b      	ldr	r3, [r3, #0]
   b8e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8e18:	9301      	str	r3, [sp, #4]
   b8e1a:	bd08      	pop	{r3, pc}
   b8e1c:	00030260 	.word	0x00030260

000b8e20 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b8e20:	b508      	push	{r3, lr}
   b8e22:	4b02      	ldr	r3, [pc, #8]	; (b8e2c <log_dump+0xc>)
   b8e24:	681b      	ldr	r3, [r3, #0]
   b8e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8e28:	9301      	str	r3, [sp, #4]
   b8e2a:	bd08      	pop	{r3, pc}
   b8e2c:	00030260 	.word	0x00030260

000b8e30 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8e30:	b508      	push	{r3, lr}
   b8e32:	4b02      	ldr	r3, [pc, #8]	; (b8e3c <log_level_name+0xc>)
   b8e34:	681b      	ldr	r3, [r3, #0]
   b8e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8e38:	9301      	str	r3, [sp, #4]
   b8e3a:	bd08      	pop	{r3, pc}
   b8e3c:	00030260 	.word	0x00030260

000b8e40 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8e40:	b508      	push	{r3, lr}
   b8e42:	4b02      	ldr	r3, [pc, #8]	; (b8e4c <log_set_callbacks+0xc>)
   b8e44:	681b      	ldr	r3, [r3, #0]
   b8e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8e48:	9301      	str	r3, [sp, #4]
   b8e4a:	bd08      	pop	{r3, pc}
   b8e4c:	00030260 	.word	0x00030260

000b8e50 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b8e50:	b508      	push	{r3, lr}
   b8e52:	4b03      	ldr	r3, [pc, #12]	; (b8e60 <led_set_status_active+0x10>)
   b8e54:	681b      	ldr	r3, [r3, #0]
   b8e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8e5a:	9301      	str	r3, [sp, #4]
   b8e5c:	bd08      	pop	{r3, pc}
   b8e5e:	0000      	.short	0x0000
   b8e60:	00030260 	.word	0x00030260

000b8e64 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8e64:	b508      	push	{r3, lr}
   b8e66:	4b03      	ldr	r3, [pc, #12]	; (b8e74 <diag_get_source+0x10>)
   b8e68:	681b      	ldr	r3, [r3, #0]
   b8e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8e6e:	9301      	str	r3, [sp, #4]
   b8e70:	bd08      	pop	{r3, pc}
   b8e72:	0000      	.short	0x0000
   b8e74:	00030260 	.word	0x00030260

000b8e78 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8e78:	b508      	push	{r3, lr}
   b8e7a:	4b02      	ldr	r3, [pc, #8]	; (b8e84 <system_mode+0xc>)
   b8e7c:	681b      	ldr	r3, [r3, #0]
   b8e7e:	681b      	ldr	r3, [r3, #0]
   b8e80:	9301      	str	r3, [sp, #4]
   b8e82:	bd08      	pop	{r3, pc}
   b8e84:	00030220 	.word	0x00030220

000b8e88 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8e88:	b508      	push	{r3, lr}
   b8e8a:	4b02      	ldr	r3, [pc, #8]	; (b8e94 <set_system_mode+0xc>)
   b8e8c:	681b      	ldr	r3, [r3, #0]
   b8e8e:	685b      	ldr	r3, [r3, #4]
   b8e90:	9301      	str	r3, [sp, #4]
   b8e92:	bd08      	pop	{r3, pc}
   b8e94:	00030220 	.word	0x00030220

000b8e98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8e98:	b508      	push	{r3, lr}
   b8e9a:	4b02      	ldr	r3, [pc, #8]	; (b8ea4 <system_delay_ms+0xc>)
   b8e9c:	681b      	ldr	r3, [r3, #0]
   b8e9e:	695b      	ldr	r3, [r3, #20]
   b8ea0:	9301      	str	r3, [sp, #4]
   b8ea2:	bd08      	pop	{r3, pc}
   b8ea4:	00030220 	.word	0x00030220

000b8ea8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b8ea8:	b508      	push	{r3, lr}
   b8eaa:	4b02      	ldr	r3, [pc, #8]	; (b8eb4 <system_subscribe_event+0xc>)
   b8eac:	681b      	ldr	r3, [r3, #0]
   b8eae:	6a1b      	ldr	r3, [r3, #32]
   b8eb0:	9301      	str	r3, [sp, #4]
   b8eb2:	bd08      	pop	{r3, pc}
   b8eb4:	00030220 	.word	0x00030220

000b8eb8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b8eb8:	b508      	push	{r3, lr}
   b8eba:	4b02      	ldr	r3, [pc, #8]	; (b8ec4 <system_thread_set_state+0xc>)
   b8ebc:	681b      	ldr	r3, [r3, #0]
   b8ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8ec0:	9301      	str	r3, [sp, #4]
   b8ec2:	bd08      	pop	{r3, pc}
   b8ec4:	00030220 	.word	0x00030220

000b8ec8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8ec8:	b508      	push	{r3, lr}
   b8eca:	4b02      	ldr	r3, [pc, #8]	; (b8ed4 <system_thread_get_state+0xc>)
   b8ecc:	681b      	ldr	r3, [r3, #0]
   b8ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8ed0:	9301      	str	r3, [sp, #4]
   b8ed2:	bd08      	pop	{r3, pc}
   b8ed4:	00030220 	.word	0x00030220

000b8ed8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b8ed8:	b508      	push	{r3, lr}
   b8eda:	4b02      	ldr	r3, [pc, #8]	; (b8ee4 <system_notify_time_changed+0xc>)
   b8edc:	681b      	ldr	r3, [r3, #0]
   b8ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8ee0:	9301      	str	r3, [sp, #4]
   b8ee2:	bd08      	pop	{r3, pc}
   b8ee4:	00030220 	.word	0x00030220

000b8ee8 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b8ee8:	b508      	push	{r3, lr}
   b8eea:	4b02      	ldr	r3, [pc, #8]	; (b8ef4 <led_pattern_period+0xc>)
   b8eec:	681b      	ldr	r3, [r3, #0]
   b8eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8ef0:	9301      	str	r3, [sp, #4]
   b8ef2:	bd08      	pop	{r3, pc}
   b8ef4:	00030220 	.word	0x00030220

000b8ef8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8ef8:	b508      	push	{r3, lr}
   b8efa:	4b03      	ldr	r3, [pc, #12]	; (b8f08 <system_ctrl_set_app_request_handler+0x10>)
   b8efc:	681b      	ldr	r3, [r3, #0]
   b8efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8f02:	9301      	str	r3, [sp, #4]
   b8f04:	bd08      	pop	{r3, pc}
   b8f06:	0000      	.short	0x0000
   b8f08:	00030220 	.word	0x00030220

000b8f0c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8f0c:	b508      	push	{r3, lr}
   b8f0e:	4b03      	ldr	r3, [pc, #12]	; (b8f1c <system_ctrl_set_result+0x10>)
   b8f10:	681b      	ldr	r3, [r3, #0]
   b8f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8f16:	9301      	str	r3, [sp, #4]
   b8f18:	bd08      	pop	{r3, pc}
   b8f1a:	0000      	.short	0x0000
   b8f1c:	00030220 	.word	0x00030220

000b8f20 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b8f20:	b508      	push	{r3, lr}
   b8f22:	4b03      	ldr	r3, [pc, #12]	; (b8f30 <system_power_management_set_config+0x10>)
   b8f24:	681b      	ldr	r3, [r3, #0]
   b8f26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8f2a:	9301      	str	r3, [sp, #4]
   b8f2c:	bd08      	pop	{r3, pc}
   b8f2e:	0000      	.short	0x0000
   b8f30:	00030220 	.word	0x00030220

000b8f34 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8f34:	b508      	push	{r3, lr}
   b8f36:	4b03      	ldr	r3, [pc, #12]	; (b8f44 <system_sleep_ext+0x10>)
   b8f38:	681b      	ldr	r3, [r3, #0]
   b8f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8f3e:	9301      	str	r3, [sp, #4]
   b8f40:	bd08      	pop	{r3, pc}
   b8f42:	0000      	.short	0x0000
   b8f44:	00030220 	.word	0x00030220

000b8f48 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b8f48:	b508      	push	{r3, lr}
   b8f4a:	4b03      	ldr	r3, [pc, #12]	; (b8f58 <system_reset+0x10>)
   b8f4c:	681b      	ldr	r3, [r3, #0]
   b8f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8f52:	9301      	str	r3, [sp, #4]
   b8f54:	bd08      	pop	{r3, pc}
   b8f56:	0000      	.short	0x0000
   b8f58:	00030220 	.word	0x00030220

000b8f5c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8f5c:	b508      	push	{r3, lr}
   b8f5e:	4b02      	ldr	r3, [pc, #8]	; (b8f68 <spark_process+0xc>)
   b8f60:	681b      	ldr	r3, [r3, #0]
   b8f62:	689b      	ldr	r3, [r3, #8]
   b8f64:	9301      	str	r3, [sp, #4]
   b8f66:	bd08      	pop	{r3, pc}
   b8f68:	00030244 	.word	0x00030244

000b8f6c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b8f6c:	b508      	push	{r3, lr}
   b8f6e:	4b02      	ldr	r3, [pc, #8]	; (b8f78 <spark_cloud_flag_connect+0xc>)
   b8f70:	681b      	ldr	r3, [r3, #0]
   b8f72:	68db      	ldr	r3, [r3, #12]
   b8f74:	9301      	str	r3, [sp, #4]
   b8f76:	bd08      	pop	{r3, pc}
   b8f78:	00030244 	.word	0x00030244

000b8f7c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8f7c:	b508      	push	{r3, lr}
   b8f7e:	4b02      	ldr	r3, [pc, #8]	; (b8f88 <spark_cloud_flag_connected+0xc>)
   b8f80:	681b      	ldr	r3, [r3, #0]
   b8f82:	695b      	ldr	r3, [r3, #20]
   b8f84:	9301      	str	r3, [sp, #4]
   b8f86:	bd08      	pop	{r3, pc}
   b8f88:	00030244 	.word	0x00030244

000b8f8c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8f8c:	b508      	push	{r3, lr}
   b8f8e:	4b02      	ldr	r3, [pc, #8]	; (b8f98 <spark_deviceID+0xc>)
   b8f90:	681b      	ldr	r3, [r3, #0]
   b8f92:	69db      	ldr	r3, [r3, #28]
   b8f94:	9301      	str	r3, [sp, #4]
   b8f96:	bd08      	pop	{r3, pc}
   b8f98:	00030244 	.word	0x00030244

000b8f9c <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8f9c:	b508      	push	{r3, lr}
   b8f9e:	4b02      	ldr	r3, [pc, #8]	; (b8fa8 <spark_sync_time_pending+0xc>)
   b8fa0:	681b      	ldr	r3, [r3, #0]
   b8fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8fa4:	9301      	str	r3, [sp, #4]
   b8fa6:	bd08      	pop	{r3, pc}
   b8fa8:	00030244 	.word	0x00030244

000b8fac <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8fac:	b508      	push	{r3, lr}
   b8fae:	4b02      	ldr	r3, [pc, #8]	; (b8fb8 <spark_sync_time_last+0xc>)
   b8fb0:	681b      	ldr	r3, [r3, #0]
   b8fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8fb4:	9301      	str	r3, [sp, #4]
   b8fb6:	bd08      	pop	{r3, pc}
   b8fb8:	00030244 	.word	0x00030244

000b8fbc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8fbc:	b508      	push	{r3, lr}
   b8fbe:	4b02      	ldr	r3, [pc, #8]	; (b8fc8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8fc0:	681b      	ldr	r3, [r3, #0]
   b8fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8fc4:	9301      	str	r3, [sp, #4]
   b8fc6:	bd08      	pop	{r3, pc}
   b8fc8:	00030244 	.word	0x00030244

000b8fcc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8fcc:	b508      	push	{r3, lr}
   b8fce:	4b02      	ldr	r3, [pc, #8]	; (b8fd8 <network_connect+0xc>)
   b8fd0:	681b      	ldr	r3, [r3, #0]
   b8fd2:	685b      	ldr	r3, [r3, #4]
   b8fd4:	9301      	str	r3, [sp, #4]
   b8fd6:	bd08      	pop	{r3, pc}
   b8fd8:	00030240 	.word	0x00030240

000b8fdc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8fdc:	b508      	push	{r3, lr}
   b8fde:	4b02      	ldr	r3, [pc, #8]	; (b8fe8 <network_connecting+0xc>)
   b8fe0:	681b      	ldr	r3, [r3, #0]
   b8fe2:	689b      	ldr	r3, [r3, #8]
   b8fe4:	9301      	str	r3, [sp, #4]
   b8fe6:	bd08      	pop	{r3, pc}
   b8fe8:	00030240 	.word	0x00030240

000b8fec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8fec:	b508      	push	{r3, lr}
   b8fee:	4b02      	ldr	r3, [pc, #8]	; (b8ff8 <network_disconnect+0xc>)
   b8ff0:	681b      	ldr	r3, [r3, #0]
   b8ff2:	68db      	ldr	r3, [r3, #12]
   b8ff4:	9301      	str	r3, [sp, #4]
   b8ff6:	bd08      	pop	{r3, pc}
   b8ff8:	00030240 	.word	0x00030240

000b8ffc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8ffc:	b508      	push	{r3, lr}
   b8ffe:	4b02      	ldr	r3, [pc, #8]	; (b9008 <network_ready+0xc>)
   b9000:	681b      	ldr	r3, [r3, #0]
   b9002:	691b      	ldr	r3, [r3, #16]
   b9004:	9301      	str	r3, [sp, #4]
   b9006:	bd08      	pop	{r3, pc}
   b9008:	00030240 	.word	0x00030240

000b900c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b900c:	b508      	push	{r3, lr}
   b900e:	4b02      	ldr	r3, [pc, #8]	; (b9018 <network_on+0xc>)
   b9010:	681b      	ldr	r3, [r3, #0]
   b9012:	695b      	ldr	r3, [r3, #20]
   b9014:	9301      	str	r3, [sp, #4]
   b9016:	bd08      	pop	{r3, pc}
   b9018:	00030240 	.word	0x00030240

000b901c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b901c:	b508      	push	{r3, lr}
   b901e:	4b02      	ldr	r3, [pc, #8]	; (b9028 <network_off+0xc>)
   b9020:	681b      	ldr	r3, [r3, #0]
   b9022:	699b      	ldr	r3, [r3, #24]
   b9024:	9301      	str	r3, [sp, #4]
   b9026:	bd08      	pop	{r3, pc}
   b9028:	00030240 	.word	0x00030240

000b902c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b902c:	b508      	push	{r3, lr}
   b902e:	4b02      	ldr	r3, [pc, #8]	; (b9038 <network_listen+0xc>)
   b9030:	681b      	ldr	r3, [r3, #0]
   b9032:	69db      	ldr	r3, [r3, #28]
   b9034:	9301      	str	r3, [sp, #4]
   b9036:	bd08      	pop	{r3, pc}
   b9038:	00030240 	.word	0x00030240

000b903c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b903c:	b508      	push	{r3, lr}
   b903e:	4b02      	ldr	r3, [pc, #8]	; (b9048 <network_listening+0xc>)
   b9040:	681b      	ldr	r3, [r3, #0]
   b9042:	6a1b      	ldr	r3, [r3, #32]
   b9044:	9301      	str	r3, [sp, #4]
   b9046:	bd08      	pop	{r3, pc}
   b9048:	00030240 	.word	0x00030240

000b904c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b904c:	b508      	push	{r3, lr}
   b904e:	4b02      	ldr	r3, [pc, #8]	; (b9058 <network_set_listen_timeout+0xc>)
   b9050:	681b      	ldr	r3, [r3, #0]
   b9052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9054:	9301      	str	r3, [sp, #4]
   b9056:	bd08      	pop	{r3, pc}
   b9058:	00030240 	.word	0x00030240

000b905c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b905c:	b508      	push	{r3, lr}
   b905e:	4b02      	ldr	r3, [pc, #8]	; (b9068 <network_get_listen_timeout+0xc>)
   b9060:	681b      	ldr	r3, [r3, #0]
   b9062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9064:	9301      	str	r3, [sp, #4]
   b9066:	bd08      	pop	{r3, pc}
   b9068:	00030240 	.word	0x00030240

000b906c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b906c:	b508      	push	{r3, lr}
   b906e:	4b02      	ldr	r3, [pc, #8]	; (b9078 <network_is_on+0xc>)
   b9070:	681b      	ldr	r3, [r3, #0]
   b9072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9074:	9301      	str	r3, [sp, #4]
   b9076:	bd08      	pop	{r3, pc}
   b9078:	00030240 	.word	0x00030240

000b907c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b907c:	b508      	push	{r3, lr}
   b907e:	4b02      	ldr	r3, [pc, #8]	; (b9088 <network_is_off+0xc>)
   b9080:	681b      	ldr	r3, [r3, #0]
   b9082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9084:	9301      	str	r3, [sp, #4]
   b9086:	bd08      	pop	{r3, pc}
   b9088:	00030240 	.word	0x00030240

000b908c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b908c:	b508      	push	{r3, lr}
   b908e:	4b02      	ldr	r3, [pc, #8]	; (b9098 <malloc+0xc>)
   b9090:	681b      	ldr	r3, [r3, #0]
   b9092:	681b      	ldr	r3, [r3, #0]
   b9094:	9301      	str	r3, [sp, #4]
   b9096:	bd08      	pop	{r3, pc}
   b9098:	0003021c 	.word	0x0003021c

000b909c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b909c:	b508      	push	{r3, lr}
   b909e:	4b02      	ldr	r3, [pc, #8]	; (b90a8 <free+0xc>)
   b90a0:	681b      	ldr	r3, [r3, #0]
   b90a2:	685b      	ldr	r3, [r3, #4]
   b90a4:	9301      	str	r3, [sp, #4]
   b90a6:	bd08      	pop	{r3, pc}
   b90a8:	0003021c 	.word	0x0003021c

000b90ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b90ac:	b508      	push	{r3, lr}
   b90ae:	4b02      	ldr	r3, [pc, #8]	; (b90b8 <realloc+0xc>)
   b90b0:	681b      	ldr	r3, [r3, #0]
   b90b2:	689b      	ldr	r3, [r3, #8]
   b90b4:	9301      	str	r3, [sp, #4]
   b90b6:	bd08      	pop	{r3, pc}
   b90b8:	0003021c 	.word	0x0003021c

000b90bc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b90bc:	b508      	push	{r3, lr}
   b90be:	4b02      	ldr	r3, [pc, #8]	; (b90c8 <siprintf+0xc>)
   b90c0:	681b      	ldr	r3, [r3, #0]
   b90c2:	691b      	ldr	r3, [r3, #16]
   b90c4:	9301      	str	r3, [sp, #4]
   b90c6:	bd08      	pop	{r3, pc}
   b90c8:	0003021c 	.word	0x0003021c

000b90cc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b90cc:	b508      	push	{r3, lr}
   b90ce:	4b02      	ldr	r3, [pc, #8]	; (b90d8 <snprintf+0xc>)
   b90d0:	681b      	ldr	r3, [r3, #0]
   b90d2:	69db      	ldr	r3, [r3, #28]
   b90d4:	9301      	str	r3, [sp, #4]
   b90d6:	bd08      	pop	{r3, pc}
   b90d8:	0003021c 	.word	0x0003021c

000b90dc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b90dc:	b508      	push	{r3, lr}
   b90de:	4b02      	ldr	r3, [pc, #8]	; (b90e8 <vsnprintf+0xc>)
   b90e0:	681b      	ldr	r3, [r3, #0]
   b90e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b90e4:	9301      	str	r3, [sp, #4]
   b90e6:	bd08      	pop	{r3, pc}
   b90e8:	0003021c 	.word	0x0003021c

000b90ec <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b90ec:	b508      	push	{r3, lr}
   b90ee:	4b02      	ldr	r3, [pc, #8]	; (b90f8 <abort+0xc>)
   b90f0:	681b      	ldr	r3, [r3, #0]
   b90f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b90f4:	9301      	str	r3, [sp, #4]
   b90f6:	bd08      	pop	{r3, pc}
   b90f8:	0003021c 	.word	0x0003021c

000b90fc <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b90fc:	b508      	push	{r3, lr}
   b90fe:	4b02      	ldr	r3, [pc, #8]	; (b9108 <__errno+0xc>)
   b9100:	681b      	ldr	r3, [r3, #0]
   b9102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9104:	9301      	str	r3, [sp, #4]
   b9106:	bd08      	pop	{r3, pc}
   b9108:	0003021c 	.word	0x0003021c

000b910c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b910c:	b508      	push	{r3, lr}
   b910e:	4b02      	ldr	r3, [pc, #8]	; (b9118 <__assert_func+0xc>)
   b9110:	681b      	ldr	r3, [r3, #0]
   b9112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9114:	9301      	str	r3, [sp, #4]
   b9116:	bd08      	pop	{r3, pc}
   b9118:	0003021c 	.word	0x0003021c

000b911c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b911c:	b508      	push	{r3, lr}
   b911e:	4b02      	ldr	r3, [pc, #8]	; (b9128 <newlib_impure_ptr_callback+0xc>)
   b9120:	681b      	ldr	r3, [r3, #0]
   b9122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9124:	9301      	str	r3, [sp, #4]
   b9126:	bd08      	pop	{r3, pc}
   b9128:	0003021c 	.word	0x0003021c

000b912c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b912c:	b508      	push	{r3, lr}
   b912e:	4b02      	ldr	r3, [pc, #8]	; (b9138 <strftime+0xc>)
   b9130:	681b      	ldr	r3, [r3, #0]
   b9132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b9134:	9301      	str	r3, [sp, #4]
   b9136:	bd08      	pop	{r3, pc}
   b9138:	0003021c 	.word	0x0003021c

000b913c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b913c:	b508      	push	{r3, lr}
   b913e:	4b02      	ldr	r3, [pc, #8]	; (b9148 <localtime_r+0xc>)
   b9140:	681b      	ldr	r3, [r3, #0]
   b9142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9144:	9301      	str	r3, [sp, #4]
   b9146:	bd08      	pop	{r3, pc}
   b9148:	0003021c 	.word	0x0003021c

000b914c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b914c:	b508      	push	{r3, lr}
   b914e:	4b02      	ldr	r3, [pc, #8]	; (b9158 <gmtime_r+0xc>)
   b9150:	681b      	ldr	r3, [r3, #0]
   b9152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9154:	9301      	str	r3, [sp, #4]
   b9156:	bd08      	pop	{r3, pc}
   b9158:	0003021c 	.word	0x0003021c

000b915c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b915c:	b508      	push	{r3, lr}
   b915e:	4b02      	ldr	r3, [pc, #8]	; (b9168 <mktime+0xc>)
   b9160:	681b      	ldr	r3, [r3, #0]
   b9162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9164:	9301      	str	r3, [sp, #4]
   b9166:	bd08      	pop	{r3, pc}
   b9168:	0003021c 	.word	0x0003021c

000b916c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b916c:	428a      	cmp	r2, r1
{
   b916e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b9170:	d007      	beq.n	b9182 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b9172:	1a44      	subs	r4, r0, r1
   b9174:	9802      	ldr	r0, [sp, #8]
   b9176:	1ac0      	subs	r0, r0, r3
   b9178:	4344      	muls	r4, r0
   b917a:	1a50      	subs	r0, r2, r1
   b917c:	fb94 f0f0 	sdiv	r0, r4, r0
   b9180:	4418      	add	r0, r3
}
   b9182:	bd10      	pop	{r4, pc}

000b9184 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9184:	2100      	movs	r1, #0
   b9186:	f7ff be87 	b.w	b8e98 <system_delay_ms>

000b918a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b918a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b918c:	6843      	ldr	r3, [r0, #4]
   b918e:	3b01      	subs	r3, #1
    {
   b9190:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b9192:	6043      	str	r3, [r0, #4]
   b9194:	b963      	cbnz	r3, b91b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b9196:	6803      	ldr	r3, [r0, #0]
   b9198:	689b      	ldr	r3, [r3, #8]
   b919a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b919c:	68a3      	ldr	r3, [r4, #8]
   b919e:	3b01      	subs	r3, #1
   b91a0:	60a3      	str	r3, [r4, #8]
   b91a2:	b92b      	cbnz	r3, b91b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b91a4:	6823      	ldr	r3, [r4, #0]
   b91a6:	4620      	mov	r0, r4
   b91a8:	68db      	ldr	r3, [r3, #12]
        }
    }
   b91aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b91ae:	4718      	bx	r3
    }
   b91b0:	bd10      	pop	{r4, pc}

000b91b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b91b2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b91b4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b91b8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b91ba:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b91be:	42ae      	cmp	r6, r5
   b91c0:	d004      	beq.n	b91cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b91c2:	4628      	mov	r0, r5
   b91c4:	f002 f83c 	bl	bb240 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b91c8:	3510      	adds	r5, #16
   b91ca:	e7f8      	b.n	b91be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b91cc:	6820      	ldr	r0, [r4, #0]
   b91ce:	f7ff ff65 	bl	b909c <free>
    AllocatorT::free(data_);
}
   b91d2:	4620      	mov	r0, r4
   b91d4:	bd70      	pop	{r4, r5, r6, pc}

000b91d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b91d6:	b510      	push	{r4, lr}
   b91d8:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b91da:	6800      	ldr	r0, [r0, #0]
   b91dc:	b108      	cbz	r0, b91e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b91de:	f7ff ffd4 	bl	b918a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b91e2:	4620      	mov	r0, r4
   b91e4:	bd10      	pop	{r4, pc}
	...

000b91e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b91e8:	4802      	ldr	r0, [pc, #8]	; (b91f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b91ea:	2300      	movs	r3, #0
   b91ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b91ee:	f7ff bbe7 	b.w	b89c0 <os_mutex_recursive_create>
   b91f2:	bf00      	nop
   b91f4:	2003e60c 	.word	0x2003e60c

000b91f8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b91f8:	2200      	movs	r2, #0
   b91fa:	6840      	ldr	r0, [r0, #4]
   b91fc:	4611      	mov	r1, r2
   b91fe:	f7ff befd 	b.w	b8ffc <network_ready>

000b9202 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b9202:	2200      	movs	r2, #0
   b9204:	6840      	ldr	r0, [r0, #4]
   b9206:	4611      	mov	r1, r2
   b9208:	f7ff bf18 	b.w	b903c <network_listening>

000b920c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b920c:	2200      	movs	r2, #0
   b920e:	6840      	ldr	r0, [r0, #4]
   b9210:	4611      	mov	r1, r2
   b9212:	f7ff bf23 	b.w	b905c <network_get_listen_timeout>

000b9216 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9216:	6840      	ldr	r0, [r0, #4]
   b9218:	2200      	movs	r2, #0
   b921a:	f7ff bf17 	b.w	b904c <network_set_listen_timeout>

000b921e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b921e:	6840      	ldr	r0, [r0, #4]
   b9220:	2200      	movs	r2, #0
   b9222:	f081 0101 	eor.w	r1, r1, #1
   b9226:	f7ff bf01 	b.w	b902c <network_listen>

000b922a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b922a:	2300      	movs	r3, #0
   b922c:	6840      	ldr	r0, [r0, #4]
   b922e:	461a      	mov	r2, r3
   b9230:	4619      	mov	r1, r3
   b9232:	f7ff bef3 	b.w	b901c <network_off>

000b9236 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9236:	2300      	movs	r3, #0
   b9238:	6840      	ldr	r0, [r0, #4]
   b923a:	461a      	mov	r2, r3
   b923c:	4619      	mov	r1, r3
   b923e:	f7ff bee5 	b.w	b900c <network_on>

000b9242 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9242:	2200      	movs	r2, #0
   b9244:	6840      	ldr	r0, [r0, #4]
   b9246:	4611      	mov	r1, r2
   b9248:	f7ff bec8 	b.w	b8fdc <network_connecting>

000b924c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b924c:	6840      	ldr	r0, [r0, #4]
   b924e:	2200      	movs	r2, #0
   b9250:	2102      	movs	r1, #2
   b9252:	f7ff becb 	b.w	b8fec <network_disconnect>

000b9256 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9256:	2300      	movs	r3, #0
   b9258:	6840      	ldr	r0, [r0, #4]
   b925a:	461a      	mov	r2, r3
   b925c:	f7ff beb6 	b.w	b8fcc <network_connect>

000b9260 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b9260:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b9262:	4b13      	ldr	r3, [pc, #76]	; (b92b0 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b9264:	6003      	str	r3, [r0, #0]
   b9266:	2518      	movs	r5, #24
   b9268:	3330      	adds	r3, #48	; 0x30
   b926a:	b086      	sub	sp, #24
   b926c:	460e      	mov	r6, r1
   b926e:	6043      	str	r3, [r0, #4]
   b9270:	462a      	mov	r2, r5
   b9272:	2100      	movs	r1, #0
   b9274:	4604      	mov	r4, r0
   b9276:	3008      	adds	r0, #8
   b9278:	f004 fbfa 	bl	bda70 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b927c:	2200      	movs	r2, #0
   b927e:	6870      	ldr	r0, [r6, #4]
   b9280:	4611      	mov	r1, r2
   b9282:	f7ff febb 	bl	b8ffc <network_ready>
   b9286:	b178      	cbz	r0, b92a8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b9288:	2100      	movs	r1, #0
   b928a:	462a      	mov	r2, r5
   b928c:	4668      	mov	r0, sp
   b928e:	f004 fbef 	bl	bda70 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b9292:	4669      	mov	r1, sp
   b9294:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b9296:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b929a:	f7ff fb89 	bl	b89b0 <cellular_signal>
   b929e:	b918      	cbnz	r0, b92a8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b92a0:	4669      	mov	r1, sp
   b92a2:	4620      	mov	r0, r4
   b92a4:	f000 f8b8 	bl	b9418 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b92a8:	4620      	mov	r0, r4
   b92aa:	b006      	add	sp, #24
   b92ac:	bd70      	pop	{r4, r5, r6, pc}
   b92ae:	bf00      	nop
   b92b0:	000bf0c0 	.word	0x000bf0c0

000b92b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b92b4:	4b08      	ldr	r3, [pc, #32]	; (b92d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b92b6:	b510      	push	{r4, lr}
   b92b8:	2428      	movs	r4, #40	; 0x28
   b92ba:	4622      	mov	r2, r4
   b92bc:	4618      	mov	r0, r3
   b92be:	2100      	movs	r1, #0
   b92c0:	f004 fbd6 	bl	bda70 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b92c4:	4b05      	ldr	r3, [pc, #20]	; (b92dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b92c6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b92c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b92cc:	6042      	str	r2, [r0, #4]
   b92ce:	2204      	movs	r2, #4
   b92d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b92d2:	4a03      	ldr	r2, [pc, #12]	; (b92e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b92d4:	601a      	str	r2, [r3, #0]
   b92d6:	bd10      	pop	{r4, pc}
   b92d8:	2003e618 	.word	0x2003e618
   b92dc:	2003e610 	.word	0x2003e610
   b92e0:	000bf084 	.word	0x000bf084

000b92e4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b92e4:	4770      	bx	lr

000b92e6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b92e6:	7b00      	ldrb	r0, [r0, #12]
   b92e8:	4770      	bx	lr

000b92ea <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b92ea:	7b03      	ldrb	r3, [r0, #12]
   b92ec:	b14b      	cbz	r3, b9302 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b92ee:	6903      	ldr	r3, [r0, #16]
   b92f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b92f4:	d005      	beq.n	b9302 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b92f6:	6980      	ldr	r0, [r0, #24]
   b92f8:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b92fc:	bf18      	it	ne
   b92fe:	2001      	movne	r0, #1
   b9300:	4770      	bx	lr
   b9302:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b9304:	4770      	bx	lr

000b9306 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b9306:	6803      	ldr	r3, [r0, #0]
   b9308:	6a1b      	ldr	r3, [r3, #32]
   b930a:	4718      	bx	r3

000b930c <_ZNK14CellularSignal7printToER5Print>:
{
   b930c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b930e:	6803      	ldr	r3, [r0, #0]
{
   b9310:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b9312:	691b      	ldr	r3, [r3, #16]
{
   b9314:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b9316:	4798      	blx	r3
   b9318:	2102      	movs	r1, #2
   b931a:	4628      	mov	r0, r5
   b931c:	f001 fe6c 	bl	baff8 <_ZN5Print5printEfi>
    n += p.print(',');
   b9320:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b9322:	4604      	mov	r4, r0
    n += p.print(',');
   b9324:	4628      	mov	r0, r5
   b9326:	f001 fd71 	bl	bae0c <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b932a:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b932c:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b932e:	699b      	ldr	r3, [r3, #24]
   b9330:	4630      	mov	r0, r6
   b9332:	4798      	blx	r3
   b9334:	2102      	movs	r1, #2
   b9336:	4628      	mov	r0, r5
   b9338:	f001 fe5e 	bl	baff8 <_ZN5Print5printEfi>
}
   b933c:	4420      	add	r0, r4
   b933e:	bd70      	pop	{r4, r5, r6, pc}

000b9340 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b9340:	f1a0 0004 	sub.w	r0, r0, #4
   b9344:	f7ff bfe2 	b.w	b930c <_ZNK14CellularSignal7printToER5Print>

000b9348 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b9348:	b510      	push	{r4, lr}
   b934a:	2120      	movs	r1, #32
   b934c:	4604      	mov	r4, r0
   b934e:	f7fa fea6 	bl	b409e <_ZdlPvj>
   b9352:	4620      	mov	r0, r4
   b9354:	bd10      	pop	{r4, pc}
	...

000b9358 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b9358:	7b03      	ldrb	r3, [r0, #12]
   b935a:	b17b      	cbz	r3, b937c <_ZNK14CellularSignal11getStrengthEv+0x24>
   b935c:	6943      	ldr	r3, [r0, #20]
   b935e:	2b00      	cmp	r3, #0
   b9360:	db0c      	blt.n	b937c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b9362:	ee07 3a90 	vmov	s15, r3
   b9366:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9384 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b936a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b936e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9372:	eddf 7a05 	vldr	s15, [pc, #20]	; b9388 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b9376:	ee20 0a27 	vmul.f32	s0, s0, s15
   b937a:	4770      	bx	lr
    return -1.0f;
   b937c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9380:	4770      	bx	lr
   b9382:	bf00      	nop
   b9384:	477fff00 	.word	0x477fff00
   b9388:	42c80000 	.word	0x42c80000

000b938c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b938c:	7b03      	ldrb	r3, [r0, #12]
   b938e:	b163      	cbz	r3, b93aa <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b9390:	6903      	ldr	r3, [r0, #16]
   b9392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9396:	d008      	beq.n	b93aa <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b9398:	ee07 3a90 	vmov	s15, r3
   b939c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b93b0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b93a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b93a4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b93a8:	4770      	bx	lr
    return 0.0f;
   b93aa:	ed9f 0a02 	vldr	s0, [pc, #8]	; b93b4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b93ae:	4770      	bx	lr
   b93b0:	42c80000 	.word	0x42c80000
   b93b4:	00000000 	.word	0x00000000

000b93b8 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b93b8:	7b03      	ldrb	r3, [r0, #12]
   b93ba:	b17b      	cbz	r3, b93dc <_ZNK14CellularSignal10getQualityEv+0x24>
   b93bc:	69c3      	ldr	r3, [r0, #28]
   b93be:	2b00      	cmp	r3, #0
   b93c0:	db0c      	blt.n	b93dc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b93c2:	ee07 3a90 	vmov	s15, r3
   b93c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; b93e4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b93ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b93ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b93d2:	eddf 7a05 	vldr	s15, [pc, #20]	; b93e8 <_ZNK14CellularSignal10getQualityEv+0x30>
   b93d6:	ee20 0a27 	vmul.f32	s0, s0, s15
   b93da:	4770      	bx	lr
    return -1.0f;
   b93dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b93e0:	4770      	bx	lr
   b93e2:	bf00      	nop
   b93e4:	477fff00 	.word	0x477fff00
   b93e8:	42c80000 	.word	0x42c80000

000b93ec <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b93ec:	7b03      	ldrb	r3, [r0, #12]
   b93ee:	b163      	cbz	r3, b940a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b93f0:	6983      	ldr	r3, [r0, #24]
   b93f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b93f6:	d008      	beq.n	b940a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b93f8:	ee07 3a90 	vmov	s15, r3
   b93fc:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9410 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b9400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9404:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9408:	4770      	bx	lr
    return 0.0f;
   b940a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9414 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b940e:	4770      	bx	lr
   b9410:	42c80000 	.word	0x42c80000
   b9414:	00000000 	.word	0x00000000

000b9418 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b9418:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b941a:	460d      	mov	r5, r1
   b941c:	f100 0408 	add.w	r4, r0, #8
   b9420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9424:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9428:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b942c:	2001      	movs	r0, #1
   b942e:	bd30      	pop	{r4, r5, pc}

000b9430 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9430:	2200      	movs	r2, #0
   b9432:	6840      	ldr	r0, [r0, #4]
   b9434:	4611      	mov	r1, r2
   b9436:	f7ff be01 	b.w	b903c <network_listening>

000b943a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b943a:	2200      	movs	r2, #0
   b943c:	6840      	ldr	r0, [r0, #4]
   b943e:	4611      	mov	r1, r2
   b9440:	f7ff be0c 	b.w	b905c <network_get_listen_timeout>

000b9444 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9444:	6840      	ldr	r0, [r0, #4]
   b9446:	2200      	movs	r2, #0
   b9448:	f7ff be00 	b.w	b904c <network_set_listen_timeout>

000b944c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b944c:	6840      	ldr	r0, [r0, #4]
   b944e:	2200      	movs	r2, #0
   b9450:	f081 0101 	eor.w	r1, r1, #1
   b9454:	f7ff bdea 	b.w	b902c <network_listen>

000b9458 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9458:	2300      	movs	r3, #0
   b945a:	6840      	ldr	r0, [r0, #4]
   b945c:	461a      	mov	r2, r3
   b945e:	4619      	mov	r1, r3
   b9460:	f7ff bddc 	b.w	b901c <network_off>

000b9464 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9464:	2300      	movs	r3, #0
   b9466:	6840      	ldr	r0, [r0, #4]
   b9468:	461a      	mov	r2, r3
   b946a:	4619      	mov	r1, r3
   b946c:	f7ff bdce 	b.w	b900c <network_on>

000b9470 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9470:	2200      	movs	r2, #0
   b9472:	6840      	ldr	r0, [r0, #4]
   b9474:	4611      	mov	r1, r2
   b9476:	f7ff bdc1 	b.w	b8ffc <network_ready>

000b947a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b947a:	2200      	movs	r2, #0
   b947c:	6840      	ldr	r0, [r0, #4]
   b947e:	4611      	mov	r1, r2
   b9480:	f7ff bdac 	b.w	b8fdc <network_connecting>

000b9484 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9484:	6840      	ldr	r0, [r0, #4]
   b9486:	2200      	movs	r2, #0
   b9488:	2102      	movs	r1, #2
   b948a:	f7ff bdaf 	b.w	b8fec <network_disconnect>

000b948e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b948e:	2300      	movs	r3, #0
   b9490:	6840      	ldr	r0, [r0, #4]
   b9492:	461a      	mov	r2, r3
   b9494:	f7ff bd9a 	b.w	b8fcc <network_connect>

000b9498 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b9498:	4b02      	ldr	r3, [pc, #8]	; (b94a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b949a:	2203      	movs	r2, #3
   b949c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b949e:	4a02      	ldr	r2, [pc, #8]	; (b94a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b94a0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b94a2:	4770      	bx	lr
   b94a4:	2003e640 	.word	0x2003e640
   b94a8:	000bf0fc 	.word	0x000bf0fc

000b94ac <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b94ac:	6800      	ldr	r0, [r0, #0]
   b94ae:	f000 b8f3 	b.w	b9698 <_ZN7TwoWire4lockEv>

000b94b2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b94b2:	b510      	push	{r4, lr}
   b94b4:	4604      	mov	r4, r0
      lock_(_lock) {
   b94b6:	6001      	str	r1, [r0, #0]
   b94b8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b94ba:	b10a      	cbz	r2, b94c0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b94bc:	f7ff fff6 	bl	b94ac <_ZN9FuelGauge4lockEv>
}
   b94c0:	4620      	mov	r0, r4
   b94c2:	bd10      	pop	{r4, pc}

000b94c4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b94c4:	b513      	push	{r0, r1, r4, lr}
   b94c6:	4604      	mov	r4, r0
   b94c8:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b94ca:	f002 fc5f 	bl	bbd8c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b94ce:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b94d0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b94d2:	4620      	mov	r0, r4
   b94d4:	f7ff ffed 	bl	b94b2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b94d8:	4620      	mov	r0, r4
   b94da:	b002      	add	sp, #8
   b94dc:	bd10      	pop	{r4, pc}

000b94de <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b94de:	6800      	ldr	r0, [r0, #0]
   b94e0:	f000 b8e3 	b.w	b96aa <_ZN7TwoWire6unlockEv>

000b94e4 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b94e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b94e8:	4604      	mov	r4, r0
   b94ea:	461d      	mov	r5, r3
   b94ec:	460f      	mov	r7, r1
   b94ee:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b94f0:	f7ff ffdc 	bl	b94ac <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b94f4:	2236      	movs	r2, #54	; 0x36
   b94f6:	2300      	movs	r3, #0
   b94f8:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b94fc:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b94fe:	f04f 0801 	mov.w	r8, #1
   b9502:	230a      	movs	r3, #10
   b9504:	4669      	mov	r1, sp
   b9506:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b950a:	f000 f8a9 	bl	b9660 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b950e:	6820      	ldr	r0, [r4, #0]
   b9510:	6803      	ldr	r3, [r0, #0]
   b9512:	4639      	mov	r1, r7
   b9514:	689b      	ldr	r3, [r3, #8]
   b9516:	4798      	blx	r3
    i2c_.write(MSB);
   b9518:	6820      	ldr	r0, [r4, #0]
   b951a:	6803      	ldr	r3, [r0, #0]
   b951c:	4631      	mov	r1, r6
   b951e:	689b      	ldr	r3, [r3, #8]
   b9520:	4798      	blx	r3
    i2c_.write(LSB);
   b9522:	6820      	ldr	r0, [r4, #0]
   b9524:	6803      	ldr	r3, [r0, #0]
   b9526:	4629      	mov	r1, r5
   b9528:	689b      	ldr	r3, [r3, #8]
   b952a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b952c:	4641      	mov	r1, r8
   b952e:	6820      	ldr	r0, [r4, #0]
   b9530:	f000 f8ae 	bl	b9690 <_ZN7TwoWire15endTransmissionEh>
   b9534:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b9536:	4620      	mov	r0, r4
   b9538:	bf0c      	ite	eq
   b953a:	2500      	moveq	r5, #0
   b953c:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b9540:	f7ff ffcd 	bl	b94de <_ZN9FuelGauge6unlockEv>
}
   b9544:	4628      	mov	r0, r5
   b9546:	b004      	add	sp, #16
   b9548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b954c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b954c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b954e:	2240      	movs	r2, #64	; 0x40
   b9550:	2300      	movs	r3, #0
   b9552:	2106      	movs	r1, #6
   b9554:	f7ff ffc6 	bl	b94e4 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b9558:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b955c:	bd08      	pop	{r3, pc}

000b955e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b955e:	4770      	bx	lr

000b9560 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9562:	4606      	mov	r6, r0
   b9564:	4615      	mov	r5, r2
   b9566:	460c      	mov	r4, r1
   b9568:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b956a:	42bc      	cmp	r4, r7
   b956c:	d006      	beq.n	b957c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b956e:	6833      	ldr	r3, [r6, #0]
   b9570:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9574:	689b      	ldr	r3, [r3, #8]
   b9576:	4630      	mov	r0, r6
   b9578:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b957a:	e7f6      	b.n	b956a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b957c:	4628      	mov	r0, r5
   b957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9580 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9580:	7c00      	ldrb	r0, [r0, #16]
   b9582:	2200      	movs	r2, #0
   b9584:	f7ff bae4 	b.w	b8b50 <hal_i2c_write>

000b9588 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9588:	7c00      	ldrb	r0, [r0, #16]
   b958a:	2100      	movs	r1, #0
   b958c:	f7ff bae8 	b.w	b8b60 <hal_i2c_available>

000b9590 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9590:	7c00      	ldrb	r0, [r0, #16]
   b9592:	2100      	movs	r1, #0
   b9594:	f7ff baec 	b.w	b8b70 <hal_i2c_read>

000b9598 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9598:	7c00      	ldrb	r0, [r0, #16]
   b959a:	2100      	movs	r1, #0
   b959c:	f7ff baf0 	b.w	b8b80 <hal_i2c_peek>

000b95a0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b95a0:	7c00      	ldrb	r0, [r0, #16]
   b95a2:	2100      	movs	r1, #0
   b95a4:	f7ff baf4 	b.w	b8b90 <hal_i2c_flush>

000b95a8 <_ZN7TwoWireD0Ev>:
   b95a8:	b510      	push	{r4, lr}
   b95aa:	2114      	movs	r1, #20
   b95ac:	4604      	mov	r4, r0
   b95ae:	f7fa fd76 	bl	b409e <_ZdlPvj>
   b95b2:	4620      	mov	r0, r4
   b95b4:	bd10      	pop	{r4, pc}
	...

000b95b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b95b8:	b538      	push	{r3, r4, r5, lr}
   b95ba:	4604      	mov	r4, r0
   b95bc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b95be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b95c2:	2200      	movs	r2, #0
   b95c4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b95c8:	4b09      	ldr	r3, [pc, #36]	; (b95f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b95ca:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b95cc:	4608      	mov	r0, r1
   b95ce:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b95d0:	4629      	mov	r1, r5
   b95d2:	f7ff faed 	bl	b8bb0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b95d6:	30bf      	adds	r0, #191	; 0xbf
   b95d8:	d108      	bne.n	b95ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b95da:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b95dc:	07db      	lsls	r3, r3, #31
   b95de:	d505      	bpl.n	b95ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b95e0:	6868      	ldr	r0, [r5, #4]
   b95e2:	f7ff fd5b 	bl	b909c <free>
    free(conf.tx_buffer);
   b95e6:	68e8      	ldr	r0, [r5, #12]
   b95e8:	f7ff fd58 	bl	b909c <free>
}
   b95ec:	4620      	mov	r0, r4
   b95ee:	bd38      	pop	{r3, r4, r5, pc}
   b95f0:	000bf138 	.word	0x000bf138

000b95f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b95f4:	2300      	movs	r3, #0
   b95f6:	7c00      	ldrb	r0, [r0, #16]
   b95f8:	461a      	mov	r2, r3
   b95fa:	4619      	mov	r1, r3
   b95fc:	f7ff ba90 	b.w	b8b20 <hal_i2c_begin>

000b9600 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9600:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9602:	2200      	movs	r2, #0
   b9604:	2314      	movs	r3, #20
   b9606:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b960a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b960e:	780b      	ldrb	r3, [r1, #0]
   b9610:	f88d 3008 	strb.w	r3, [sp, #8]
   b9614:	684b      	ldr	r3, [r1, #4]
   b9616:	9303      	str	r3, [sp, #12]
   b9618:	68cb      	ldr	r3, [r1, #12]
   b961a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b961c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b961e:	7a0b      	ldrb	r3, [r1, #8]
   b9620:	9305      	str	r3, [sp, #20]
   b9622:	a901      	add	r1, sp, #4
   b9624:	f7ff fadc 	bl	b8be0 <hal_i2c_request_ex>
}
   b9628:	b007      	add	sp, #28
   b962a:	f85d fb04 	ldr.w	pc, [sp], #4

000b962e <_ZN7TwoWire11requestFromEhjh>:
{
   b962e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9630:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9632:	f88d 1000 	strb.w	r1, [sp]
   b9636:	f04f 0164 	mov.w	r1, #100	; 0x64
   b963a:	9103      	str	r1, [sp, #12]
   b963c:	bf18      	it	ne
   b963e:	2301      	movne	r3, #1
   b9640:	4669      	mov	r1, sp
    size_ = size;
   b9642:	9201      	str	r2, [sp, #4]
   b9644:	f88d 3008 	strb.w	r3, [sp, #8]
   b9648:	f7ff ffda 	bl	b9600 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b964c:	b005      	add	sp, #20
   b964e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9652 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9652:	7c00      	ldrb	r0, [r0, #16]
   b9654:	2200      	movs	r2, #0
   b9656:	f7ff ba6b 	b.w	b8b30 <hal_i2c_begin_transmission>

000b965a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b965a:	b2c9      	uxtb	r1, r1
   b965c:	f7ff bff9 	b.w	b9652 <_ZN7TwoWire17beginTransmissionEh>

000b9660 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b9660:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9662:	2300      	movs	r3, #0
   b9664:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b9668:	684a      	ldr	r2, [r1, #4]
   b966a:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b966c:	2314      	movs	r3, #20
    };
   b966e:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9670:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9674:	780b      	ldrb	r3, [r1, #0]
    };
   b9676:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9678:	7a0a      	ldrb	r2, [r1, #8]
   b967a:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b967c:	7c00      	ldrb	r0, [r0, #16]
    };
   b967e:	f88d 3008 	strb.w	r3, [sp, #8]
   b9682:	aa01      	add	r2, sp, #4
   b9684:	4619      	mov	r1, r3
   b9686:	f7ff fa53 	bl	b8b30 <hal_i2c_begin_transmission>
}
   b968a:	b007      	add	sp, #28
   b968c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9690 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9690:	7c00      	ldrb	r0, [r0, #16]
   b9692:	2200      	movs	r2, #0
   b9694:	f7ff ba54 	b.w	b8b40 <hal_i2c_end_transmission>

000b9698 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b9698:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b969a:	2100      	movs	r1, #0
   b969c:	7c00      	ldrb	r0, [r0, #16]
   b969e:	f7ff fa8f 	bl	b8bc0 <hal_i2c_lock>
}
   b96a2:	fab0 f080 	clz	r0, r0
   b96a6:	0940      	lsrs	r0, r0, #5
   b96a8:	bd08      	pop	{r3, pc}

000b96aa <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b96aa:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b96ac:	2100      	movs	r1, #0
   b96ae:	7c00      	ldrb	r0, [r0, #16]
   b96b0:	f7ff fa8e 	bl	b8bd0 <hal_i2c_unlock>
}
   b96b4:	fab0 f080 	clz	r0, r0
   b96b8:	0940      	lsrs	r0, r0, #5
   b96ba:	bd08      	pop	{r3, pc}

000b96bc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b96bc:	4700      	bx	r0
	...

000b96c0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b96c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b96c4:	2400      	movs	r4, #0
{
   b96c6:	461d      	mov	r5, r3
   b96c8:	460f      	mov	r7, r1
   b96ca:	4690      	mov	r8, r2
   b96cc:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b96ce:	f7ff fa17 	bl	b8b00 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b96d2:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b96d4:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b96d8:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b96dc:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b96e0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b96e4:	bfa2      	ittt	ge
   b96e6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b96ea:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b96ee:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b96f0:	4907      	ldr	r1, [pc, #28]	; (b9710 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b96f2:	9400      	str	r4, [sp, #0]
   b96f4:	4643      	mov	r3, r8
   b96f6:	463a      	mov	r2, r7
   b96f8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b96fa:	bfa8      	it	ge
   b96fc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9700:	f7ff f9f6 	bl	b8af0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9704:	fab0 f080 	clz	r0, r0
   b9708:	0940      	lsrs	r0, r0, #5
   b970a:	b004      	add	sp, #16
   b970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9710:	000b96bd 	.word	0x000b96bd

000b9714 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9714:	4770      	bx	lr

000b9716 <_ZN9IPAddressD0Ev>:
   b9716:	b510      	push	{r4, lr}
   b9718:	2118      	movs	r1, #24
   b971a:	4604      	mov	r4, r0
   b971c:	f7fa fcbf 	bl	b409e <_ZdlPvj>
   b9720:	4620      	mov	r0, r4
   b9722:	bd10      	pop	{r4, pc}

000b9724 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9724:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9726:	7d03      	ldrb	r3, [r0, #20]
   b9728:	2b06      	cmp	r3, #6
{
   b972a:	b08d      	sub	sp, #52	; 0x34
   b972c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b972e:	f100 0704 	add.w	r7, r0, #4
   b9732:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9736:	d012      	beq.n	b975e <_ZNK9IPAddress7printToER5Print+0x3a>
   b9738:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b973c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9740:	220a      	movs	r2, #10
   b9742:	4630      	mov	r0, r6
   b9744:	f001 fb71 	bl	bae2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9748:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b974a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b974c:	d019      	beq.n	b9782 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b974e:	2c00      	cmp	r4, #0
   b9750:	d0f4      	beq.n	b973c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9752:	212e      	movs	r1, #46	; 0x2e
   b9754:	4630      	mov	r0, r6
   b9756:	f001 fb59 	bl	bae0c <_ZN5Print5printEc>
   b975a:	4404      	add	r4, r0
   b975c:	e7ee      	b.n	b973c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b975e:	232f      	movs	r3, #47	; 0x2f
   b9760:	466a      	mov	r2, sp
   b9762:	4639      	mov	r1, r7
   b9764:	200a      	movs	r0, #10
		buf[0] = 0;
   b9766:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b976a:	f7ff fa41 	bl	b8bf0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b976e:	4668      	mov	r0, sp
   b9770:	f004 fa1b 	bl	bdbaa <strlen>
   b9774:	6833      	ldr	r3, [r6, #0]
   b9776:	4602      	mov	r2, r0
   b9778:	68db      	ldr	r3, [r3, #12]
   b977a:	4669      	mov	r1, sp
   b977c:	4630      	mov	r0, r6
   b977e:	4798      	blx	r3
   b9780:	4604      	mov	r4, r0
    }
    return n;
}
   b9782:	4620      	mov	r0, r4
   b9784:	b00d      	add	sp, #52	; 0x34
   b9786:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9788 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9788:	b510      	push	{r4, lr}
   b978a:	4b05      	ldr	r3, [pc, #20]	; (b97a0 <_ZN9IPAddressC1Ev+0x18>)
   b978c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b978e:	2211      	movs	r2, #17
   b9790:	f840 3b04 	str.w	r3, [r0], #4
   b9794:	2100      	movs	r1, #0
   b9796:	f004 f96b 	bl	bda70 <memset>
}
   b979a:	4620      	mov	r0, r4
   b979c:	bd10      	pop	{r4, pc}
   b979e:	bf00      	nop
   b97a0:	000bf160 	.word	0x000bf160

000b97a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b97a4:	4603      	mov	r3, r0
   b97a6:	4a07      	ldr	r2, [pc, #28]	; (b97c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b97a8:	b510      	push	{r4, lr}
   b97aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b97ae:	f101 0210 	add.w	r2, r1, #16
   b97b2:	f851 4b04 	ldr.w	r4, [r1], #4
   b97b6:	f843 4b04 	str.w	r4, [r3], #4
   b97ba:	4291      	cmp	r1, r2
   b97bc:	d1f9      	bne.n	b97b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b97be:	780a      	ldrb	r2, [r1, #0]
   b97c0:	701a      	strb	r2, [r3, #0]
}
   b97c2:	bd10      	pop	{r4, pc}
   b97c4:	000bf160 	.word	0x000bf160

000b97c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b97c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b97ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b97ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b97d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b97d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b97da:	2304      	movs	r3, #4
   b97dc:	6041      	str	r1, [r0, #4]
   b97de:	7503      	strb	r3, [r0, #20]
}
   b97e0:	bd10      	pop	{r4, pc}
	...

000b97e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b97e4:	b507      	push	{r0, r1, r2, lr}
   b97e6:	4b06      	ldr	r3, [pc, #24]	; (b9800 <_ZN9IPAddressC1EPKh+0x1c>)
   b97e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b97ea:	78cb      	ldrb	r3, [r1, #3]
   b97ec:	9300      	str	r3, [sp, #0]
   b97ee:	788b      	ldrb	r3, [r1, #2]
   b97f0:	784a      	ldrb	r2, [r1, #1]
   b97f2:	7809      	ldrb	r1, [r1, #0]
   b97f4:	f7ff ffe8 	bl	b97c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b97f8:	b003      	add	sp, #12
   b97fa:	f85d fb04 	ldr.w	pc, [sp], #4
   b97fe:	bf00      	nop
   b9800:	000bf160 	.word	0x000bf160

000b9804 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b9804:	f100 0310 	add.w	r3, r0, #16
   b9808:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b980a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b980e:	2901      	cmp	r1, #1
   b9810:	4618      	mov	r0, r3
   b9812:	d108      	bne.n	b9826 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b9814:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b9818:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b981c:	3a01      	subs	r2, #1
   b981e:	f103 0310 	add.w	r3, r3, #16
   b9822:	d1f2      	bne.n	b980a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b9824:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b9826:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b9828:	bf04      	itt	eq
   b982a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b982e:	1852      	addeq	r2, r2, r1
   b9830:	e7f4      	b.n	b981c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b9832 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b9832:	b40e      	push	{r1, r2, r3}
   b9834:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9836:	b088      	sub	sp, #32
   b9838:	af00      	add	r7, sp, #0
   b983a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b983e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9840:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9844:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9846:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9848:	462b      	mov	r3, r5
   b984a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b984c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b984e:	f7ff fc45 	bl	b90dc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b9852:	280f      	cmp	r0, #15
   b9854:	687a      	ldr	r2, [r7, #4]
   b9856:	d91a      	bls.n	b988e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b9858:	f100 0308 	add.w	r3, r0, #8
   b985c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9860:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b9862:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9866:	1c41      	adds	r1, r0, #1
   b9868:	462b      	mov	r3, r5
   b986a:	4668      	mov	r0, sp
        va_start(args, fmt);
   b986c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b986e:	f7ff fc35 	bl	b90dc <vsnprintf>
        if (n > 0) {
   b9872:	1e02      	subs	r2, r0, #0
   b9874:	dd04      	ble.n	b9880 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b9876:	6823      	ldr	r3, [r4, #0]
   b9878:	4669      	mov	r1, sp
   b987a:	689b      	ldr	r3, [r3, #8]
   b987c:	4620      	mov	r0, r4
   b987e:	4798      	blx	r3
   b9880:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9882:	3720      	adds	r7, #32
   b9884:	46bd      	mov	sp, r7
   b9886:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b988a:	b003      	add	sp, #12
   b988c:	4770      	bx	lr
    } else if (n > 0) {
   b988e:	2800      	cmp	r0, #0
   b9890:	d0f7      	beq.n	b9882 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9892:	6823      	ldr	r3, [r4, #0]
   b9894:	4602      	mov	r2, r0
   b9896:	689b      	ldr	r3, [r3, #8]
   b9898:	f107 0110 	add.w	r1, r7, #16
   b989c:	4620      	mov	r0, r4
   b989e:	4798      	blx	r3
}
   b98a0:	e7ef      	b.n	b9882 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b98a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b98a2:	b538      	push	{r3, r4, r5, lr}
   b98a4:	680b      	ldr	r3, [r1, #0]
   b98a6:	6003      	str	r3, [r0, #0]
   b98a8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b98aa:	6843      	ldr	r3, [r0, #4]
   b98ac:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b98ae:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b98b0:	d008      	beq.n	b98c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b98b2:	b115      	cbz	r5, b98ba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b98b4:	686b      	ldr	r3, [r5, #4]
   b98b6:	3301      	adds	r3, #1
   b98b8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b98ba:	6860      	ldr	r0, [r4, #4]
   b98bc:	b108      	cbz	r0, b98c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b98be:	f7ff fc64 	bl	b918a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b98c2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b98c4:	bd38      	pop	{r3, r4, r5, pc}

000b98c6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b98c6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b98c8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b98ca:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b98ce:	689b      	ldr	r3, [r3, #8]
   b98d0:	2201      	movs	r2, #1
   b98d2:	f10d 0107 	add.w	r1, sp, #7
   b98d6:	4798      	blx	r3
}
   b98d8:	b003      	add	sp, #12
   b98da:	f85d fb04 	ldr.w	pc, [sp], #4

000b98de <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b98de:	460b      	mov	r3, r1
   b98e0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b98e2:	2200      	movs	r2, #0
   b98e4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b98e6:	e9c0 2200 	strd	r2, r2, [r0]
   b98ea:	4604      	mov	r4, r0
        t_ = t;
   b98ec:	6083      	str	r3, [r0, #8]
    if (t) {
   b98ee:	b90b      	cbnz	r3, b98f4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b98f0:	4620      	mov	r0, r4
   b98f2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b98f4:	f7ff ffd5 	bl	b98a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b98f8:	e7fa      	b.n	b98f0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b98fa <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b98fa:	6883      	ldr	r3, [r0, #8]
   b98fc:	b1eb      	cbz	r3, b993a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b98fe:	781a      	ldrb	r2, [r3, #0]
   b9900:	2a03      	cmp	r2, #3
   b9902:	d81a      	bhi.n	b993a <_ZNK5spark9JSONValue4typeEv+0x40>
   b9904:	e8df f002 	tbb	[pc, r2]
   b9908:	1b021704 	.word	0x1b021704
   b990c:	2005      	movs	r0, #5
   b990e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9910:	6802      	ldr	r2, [r0, #0]
   b9912:	685b      	ldr	r3, [r3, #4]
   b9914:	6852      	ldr	r2, [r2, #4]
   b9916:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b9918:	282d      	cmp	r0, #45	; 0x2d
   b991a:	d012      	beq.n	b9942 <_ZNK5spark9JSONValue4typeEv+0x48>
   b991c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9920:	2b09      	cmp	r3, #9
   b9922:	d90e      	bls.n	b9942 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9924:	2874      	cmp	r0, #116	; 0x74
   b9926:	d00e      	beq.n	b9946 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b9928:	2866      	cmp	r0, #102	; 0x66
   b992a:	d00c      	beq.n	b9946 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b992c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9930:	4258      	negs	r0, r3
   b9932:	4158      	adcs	r0, r3
   b9934:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b9936:	2006      	movs	r0, #6
   b9938:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b993a:	2000      	movs	r0, #0
   b993c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b993e:	2004      	movs	r0, #4
   b9940:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b9942:	2003      	movs	r0, #3
   b9944:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b9946:	2002      	movs	r0, #2
}
   b9948:	4770      	bx	lr

000b994a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b994a:	b510      	push	{r4, lr}
   b994c:	4604      	mov	r4, r0
    switch (type()) {
   b994e:	f7ff ffd4 	bl	b98fa <_ZNK5spark9JSONValue4typeEv>
   b9952:	2802      	cmp	r0, #2
   b9954:	d00e      	beq.n	b9974 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b9956:	1ec3      	subs	r3, r0, #3
   b9958:	b2db      	uxtb	r3, r3
   b995a:	2b01      	cmp	r3, #1
   b995c:	d814      	bhi.n	b9988 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b995e:	6822      	ldr	r2, [r4, #0]
   b9960:	68a3      	ldr	r3, [r4, #8]
   b9962:	6850      	ldr	r0, [r2, #4]
   b9964:	685b      	ldr	r3, [r3, #4]
}
   b9966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b996a:	220a      	movs	r2, #10
   b996c:	2100      	movs	r1, #0
   b996e:	4418      	add	r0, r3
   b9970:	f004 b9e0 	b.w	bdd34 <strtol>
        const char* const s = d_->json + t_->start;
   b9974:	6822      	ldr	r2, [r4, #0]
   b9976:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b9978:	6852      	ldr	r2, [r2, #4]
   b997a:	685b      	ldr	r3, [r3, #4]
   b997c:	5cd0      	ldrb	r0, [r2, r3]
   b997e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9982:	4258      	negs	r0, r3
   b9984:	4158      	adcs	r0, r3
}
   b9986:	bd10      	pop	{r4, pc}
    switch (type()) {
   b9988:	2000      	movs	r0, #0
   b998a:	e7fc      	b.n	b9986 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b998c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b998c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b998e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9990:	e9c0 3300 	strd	r3, r3, [r0]
   b9994:	4604      	mov	r4, r0
        n_(0) {
   b9996:	480e      	ldr	r0, [pc, #56]	; (b99d0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b9998:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b999c:	b1a9      	cbz	r1, b99ca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b999e:	780b      	ldrb	r3, [r1, #0]
   b99a0:	2b03      	cmp	r3, #3
   b99a2:	d006      	beq.n	b99b2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b99a4:	b98b      	cbnz	r3, b99ca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b99a6:	6813      	ldr	r3, [r2, #0]
   b99a8:	6858      	ldr	r0, [r3, #4]
   b99aa:	684b      	ldr	r3, [r1, #4]
   b99ac:	5cc3      	ldrb	r3, [r0, r3]
   b99ae:	2b6e      	cmp	r3, #110	; 0x6e
   b99b0:	d007      	beq.n	b99c2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b99b2:	6813      	ldr	r3, [r2, #0]
   b99b4:	684d      	ldr	r5, [r1, #4]
   b99b6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b99b8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b99ba:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b99bc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b99be:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b99c0:	60e3      	str	r3, [r4, #12]
   b99c2:	4611      	mov	r1, r2
   b99c4:	4620      	mov	r0, r4
   b99c6:	f7ff ff6c 	bl	b98a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b99ca:	4620      	mov	r0, r4
   b99cc:	bd38      	pop	{r3, r4, r5, pc}
   b99ce:	bf00      	nop
   b99d0:	000bf1c9 	.word	0x000bf1c9

000b99d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b99d4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b99d6:	2500      	movs	r5, #0
   b99d8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b99da:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b99de:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b99e2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b99e6:	4604      	mov	r4, r0
   b99e8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b99ea:	b14b      	cbz	r3, b9a00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b99ec:	781a      	ldrb	r2, [r3, #0]
   b99ee:	2a01      	cmp	r2, #1
   b99f0:	d106      	bne.n	b9a00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b99f2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b99f6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b99f8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b99fa:	6143      	str	r3, [r0, #20]
   b99fc:	f7ff ff51 	bl	b98a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9a00:	4620      	mov	r0, r4
   b9a02:	bd38      	pop	{r3, r4, r5, pc}

000b9a04 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9a04:	b510      	push	{r4, lr}
    if (!n_) {
   b9a06:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9a08:	4604      	mov	r4, r0
    if (!n_) {
   b9a0a:	b163      	cbz	r3, b9a26 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9a0c:	6880      	ldr	r0, [r0, #8]
   b9a0e:	60e0      	str	r0, [r4, #12]
    --n_;
   b9a10:	3b01      	subs	r3, #1
    ++t_;
   b9a12:	3010      	adds	r0, #16
   b9a14:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b9a16:	6120      	str	r0, [r4, #16]
    --n_;
   b9a18:	6163      	str	r3, [r4, #20]
    if (n_) {
   b9a1a:	b113      	cbz	r3, b9a22 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9a1c:	f7ff fef2 	bl	b9804 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9a20:	60a0      	str	r0, [r4, #8]
    return true;
   b9a22:	2001      	movs	r0, #1
   b9a24:	e000      	b.n	b9a28 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b9a26:	4618      	mov	r0, r3
}
   b9a28:	bd10      	pop	{r4, pc}

000b9a2a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9a2a:	b510      	push	{r4, lr}
    write('}');
   b9a2c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9a2e:	4604      	mov	r4, r0
    write('}');
   b9a30:	f7ff ff49 	bl	b98c6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9a34:	2301      	movs	r3, #1
   b9a36:	7123      	strb	r3, [r4, #4]
}
   b9a38:	4620      	mov	r0, r4
   b9a3a:	bd10      	pop	{r4, pc}

000b9a3c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9a3c:	b508      	push	{r3, lr}
    switch (state_) {
   b9a3e:	7903      	ldrb	r3, [r0, #4]
   b9a40:	2b01      	cmp	r3, #1
   b9a42:	d002      	beq.n	b9a4a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9a44:	2b02      	cmp	r3, #2
   b9a46:	d004      	beq.n	b9a52 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b9a48:	bd08      	pop	{r3, pc}
        write(',');
   b9a4a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9a4c:	f7ff ff3b 	bl	b98c6 <_ZN5spark10JSONWriter5writeEc>
}
   b9a50:	e7fa      	b.n	b9a48 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b9a52:	213a      	movs	r1, #58	; 0x3a
   b9a54:	e7fa      	b.n	b9a4c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b9a56 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b9a56:	b510      	push	{r4, lr}
   b9a58:	4604      	mov	r4, r0
    writeSeparator();
   b9a5a:	f7ff ffef 	bl	b9a3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9a5e:	4620      	mov	r0, r4
   b9a60:	217b      	movs	r1, #123	; 0x7b
   b9a62:	f7ff ff30 	bl	b98c6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b9a66:	2300      	movs	r3, #0
   b9a68:	7123      	strb	r3, [r4, #4]
}
   b9a6a:	4620      	mov	r0, r4
   b9a6c:	bd10      	pop	{r4, pc}
	...

000b9a70 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9a70:	b513      	push	{r0, r1, r4, lr}
   b9a72:	4604      	mov	r4, r0
   b9a74:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9a76:	f7ff ffe1 	bl	b9a3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b9a7a:	6823      	ldr	r3, [r4, #0]
   b9a7c:	9a01      	ldr	r2, [sp, #4]
   b9a7e:	68db      	ldr	r3, [r3, #12]
   b9a80:	4903      	ldr	r1, [pc, #12]	; (b9a90 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9a82:	4620      	mov	r0, r4
   b9a84:	4798      	blx	r3
    state_ = NEXT;
   b9a86:	2301      	movs	r3, #1
}
   b9a88:	4620      	mov	r0, r4
    state_ = NEXT;
   b9a8a:	7123      	strb	r3, [r4, #4]
}
   b9a8c:	b002      	add	sp, #8
   b9a8e:	bd10      	pop	{r4, pc}
   b9a90:	000be0b7 	.word	0x000be0b7

000b9a94 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9a94:	b513      	push	{r0, r1, r4, lr}
   b9a96:	4604      	mov	r4, r0
   b9a98:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9a9a:	f7ff ffcf 	bl	b9a3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9a9e:	6823      	ldr	r3, [r4, #0]
   b9aa0:	9a01      	ldr	r2, [sp, #4]
   b9aa2:	68db      	ldr	r3, [r3, #12]
   b9aa4:	4903      	ldr	r1, [pc, #12]	; (b9ab4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b9aa6:	4620      	mov	r0, r4
   b9aa8:	4798      	blx	r3
    state_ = NEXT;
   b9aaa:	2301      	movs	r3, #1
}
   b9aac:	4620      	mov	r0, r4
    state_ = NEXT;
   b9aae:	7123      	strb	r3, [r4, #4]
}
   b9ab0:	b002      	add	sp, #8
   b9ab2:	bd10      	pop	{r4, pc}
   b9ab4:	000beae2 	.word	0x000beae2

000b9ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9abc:	460d      	mov	r5, r1
    write('"');
   b9abe:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9ac0:	4690      	mov	r8, r2
   b9ac2:	4604      	mov	r4, r0
    write('"');
   b9ac4:	f7ff feff 	bl	b98c6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b9ac8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9b70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9acc:	44a8      	add	r8, r5
    const char *s = str;
   b9ace:	462f      	mov	r7, r5
    while (s != end) {
   b9ad0:	4547      	cmp	r7, r8
   b9ad2:	46ba      	mov	sl, r7
   b9ad4:	d03d      	beq.n	b9b52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b9ad6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b9ada:	2e22      	cmp	r6, #34	; 0x22
   b9adc:	d006      	beq.n	b9aec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9ade:	2e5c      	cmp	r6, #92	; 0x5c
   b9ae0:	d004      	beq.n	b9aec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9ae2:	4630      	mov	r0, r6
   b9ae4:	f003 ff94 	bl	bda10 <isprint>
   b9ae8:	2800      	cmp	r0, #0
   b9aea:	d1f1      	bne.n	b9ad0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b9aec:	6823      	ldr	r3, [r4, #0]
   b9aee:	ebaa 0205 	sub.w	r2, sl, r5
   b9af2:	689b      	ldr	r3, [r3, #8]
   b9af4:	4629      	mov	r1, r5
   b9af6:	4620      	mov	r0, r4
   b9af8:	4798      	blx	r3
            write('\\');
   b9afa:	215c      	movs	r1, #92	; 0x5c
   b9afc:	4620      	mov	r0, r4
   b9afe:	f7ff fee2 	bl	b98c6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b9b02:	2e0d      	cmp	r6, #13
   b9b04:	d80a      	bhi.n	b9b1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b9b06:	2e07      	cmp	r6, #7
   b9b08:	d91c      	bls.n	b9b44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9b0a:	f1a6 0308 	sub.w	r3, r6, #8
   b9b0e:	2b05      	cmp	r3, #5
   b9b10:	d818      	bhi.n	b9b44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9b12:	e8df f003 	tbb	[pc, r3]
   b9b16:	0f0d      	.short	0x0f0d
   b9b18:	15131711 	.word	0x15131711
   b9b1c:	2e22      	cmp	r6, #34	; 0x22
   b9b1e:	d001      	beq.n	b9b24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b9b20:	2e5c      	cmp	r6, #92	; 0x5c
   b9b22:	d10f      	bne.n	b9b44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b9b24:	4631      	mov	r1, r6
                write('b');
   b9b26:	4620      	mov	r0, r4
   b9b28:	f7ff fecd 	bl	b98c6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9b2c:	463d      	mov	r5, r7
    while (s != end) {
   b9b2e:	e7cf      	b.n	b9ad0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b9b30:	2162      	movs	r1, #98	; 0x62
   b9b32:	e7f8      	b.n	b9b26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b9b34:	2174      	movs	r1, #116	; 0x74
   b9b36:	e7f6      	b.n	b9b26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b9b38:	216e      	movs	r1, #110	; 0x6e
   b9b3a:	e7f4      	b.n	b9b26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9b3c:	2166      	movs	r1, #102	; 0x66
   b9b3e:	e7f2      	b.n	b9b26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b9b40:	2172      	movs	r1, #114	; 0x72
   b9b42:	e7f0      	b.n	b9b26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b9b44:	6823      	ldr	r3, [r4, #0]
   b9b46:	4632      	mov	r2, r6
   b9b48:	68db      	ldr	r3, [r3, #12]
   b9b4a:	4649      	mov	r1, r9
   b9b4c:	4620      	mov	r0, r4
   b9b4e:	4798      	blx	r3
                break;
   b9b50:	e7ec      	b.n	b9b2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b9b52:	42bd      	cmp	r5, r7
   b9b54:	d005      	beq.n	b9b62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b9b56:	6823      	ldr	r3, [r4, #0]
   b9b58:	1b7a      	subs	r2, r7, r5
   b9b5a:	689b      	ldr	r3, [r3, #8]
   b9b5c:	4629      	mov	r1, r5
   b9b5e:	4620      	mov	r0, r4
   b9b60:	4798      	blx	r3
    }
    write('"');
   b9b62:	2122      	movs	r1, #34	; 0x22
   b9b64:	4620      	mov	r0, r4
   b9b66:	f7ff feae 	bl	b98c6 <_ZN5spark10JSONWriter5writeEc>
}
   b9b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9b6e:	bf00      	nop
   b9b70:	000bf16c 	.word	0x000bf16c

000b9b74 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9b74:	b513      	push	{r0, r1, r4, lr}
   b9b76:	4604      	mov	r4, r0
   b9b78:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9b7c:	f7ff ff5e 	bl	b9a3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b9b80:	4620      	mov	r0, r4
   b9b82:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9b86:	f7ff ff97 	bl	b9ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b9b8a:	2302      	movs	r3, #2
}
   b9b8c:	4620      	mov	r0, r4
    state_ = VALUE;
   b9b8e:	7123      	strb	r3, [r4, #4]
}
   b9b90:	b002      	add	sp, #8
   b9b92:	bd10      	pop	{r4, pc}

000b9b94 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9b94:	b513      	push	{r0, r1, r4, lr}
   b9b96:	4604      	mov	r4, r0
   b9b98:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9b9c:	f7ff ff4e 	bl	b9a3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9ba0:	4620      	mov	r0, r4
   b9ba2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9ba6:	f7ff ff87 	bl	b9ab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b9baa:	2301      	movs	r3, #1
}
   b9bac:	4620      	mov	r0, r4
    state_ = NEXT;
   b9bae:	7123      	strb	r3, [r4, #4]
}
   b9bb0:	b002      	add	sp, #8
   b9bb2:	bd10      	pop	{r4, pc}

000b9bb4 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b9bb4:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b9bb6:	460b      	mov	r3, r1
    s->update(ticks);
   b9bb8:	6892      	ldr	r2, [r2, #8]
   b9bba:	4601      	mov	r1, r0
   b9bbc:	4618      	mov	r0, r3
   b9bbe:	4710      	bx	r2

000b9bc0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b9bc0:	b570      	push	{r4, r5, r6, lr}
   b9bc2:	4c0e      	ldr	r4, [pc, #56]	; (b9bfc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b9bc4:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b9bc6:	2500      	movs	r5, #0
   b9bc8:	241c      	movs	r4, #28
   b9bca:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b9bce:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b9bd2:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b9bd6:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b9bd8:	f004 0403 	and.w	r4, r4, #3
   b9bdc:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b9be0:	b2e4      	uxtb	r4, r4
   b9be2:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b9be4:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b9be6:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b9be8:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b9bea:	7c42      	ldrb	r2, [r0, #17]
   b9bec:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b9bee:	bf0a      	itet	eq
   b9bf0:	4b03      	ldreq	r3, [pc, #12]	; (b9c00 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b9bf2:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b9bf4:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b9bf8:	bd70      	pop	{r4, r5, r6, pc}
   b9bfa:	bf00      	nop
   b9bfc:	000be76c 	.word	0x000be76c
   b9c00:	000b9bb5 	.word	0x000b9bb5

000b9c04 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9c04:	6880      	ldr	r0, [r0, #8]
   b9c06:	6803      	ldr	r3, [r0, #0]
   b9c08:	68db      	ldr	r3, [r3, #12]
   b9c0a:	4718      	bx	r3

000b9c0c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9c0c:	4770      	bx	lr

000b9c0e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b9c0e:	4608      	mov	r0, r1
   b9c10:	b111      	cbz	r1, b9c18 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9c12:	680b      	ldr	r3, [r1, #0]
   b9c14:	685b      	ldr	r3, [r3, #4]
   b9c16:	4718      	bx	r3
}
   b9c18:	4770      	bx	lr

000b9c1a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b9c1a:	4770      	bx	lr

000b9c1c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9c1c:	4770      	bx	lr

000b9c1e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b9c1e:	4770      	bx	lr

000b9c20 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9c20:	4770      	bx	lr

000b9c22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9c22:	b538      	push	{r3, r4, r5, lr}
   b9c24:	4604      	mov	r4, r0
   b9c26:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9c28:	6800      	ldr	r0, [r0, #0]
   b9c2a:	212e      	movs	r1, #46	; 0x2e
   b9c2c:	f003 ffa1 	bl	bdb72 <strchrnul>
    size = s - category;
   b9c30:	6823      	ldr	r3, [r4, #0]
   b9c32:	1ac3      	subs	r3, r0, r3
   b9c34:	602b      	str	r3, [r5, #0]
    if (size) {
   b9c36:	b123      	cbz	r3, b9c42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9c38:	7803      	ldrb	r3, [r0, #0]
   b9c3a:	b103      	cbz	r3, b9c3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9c3c:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b9c3e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9c40:	6020      	str	r0, [r4, #0]
}
   b9c42:	4618      	mov	r0, r3
   b9c44:	bd38      	pop	{r3, r4, r5, pc}

000b9c46 <_ZN5spark16JSONStreamWriterD0Ev>:
   b9c46:	b510      	push	{r4, lr}
   b9c48:	210c      	movs	r1, #12
   b9c4a:	4604      	mov	r4, r0
   b9c4c:	f7fa fa27 	bl	b409e <_ZdlPvj>
   b9c50:	4620      	mov	r0, r4
   b9c52:	bd10      	pop	{r4, pc}

000b9c54 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9c54:	b510      	push	{r4, lr}
   b9c56:	2104      	movs	r1, #4
   b9c58:	4604      	mov	r4, r0
   b9c5a:	f7fa fa20 	bl	b409e <_ZdlPvj>
   b9c5e:	4620      	mov	r0, r4
   b9c60:	bd10      	pop	{r4, pc}

000b9c62 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9c62:	b510      	push	{r4, lr}
   b9c64:	2104      	movs	r1, #4
   b9c66:	4604      	mov	r4, r0
   b9c68:	f7fa fa19 	bl	b409e <_ZdlPvj>
   b9c6c:	4620      	mov	r0, r4
   b9c6e:	bd10      	pop	{r4, pc}

000b9c70 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9c70:	f7fe beb6 	b.w	b89e0 <os_mutex_recursive_lock>

000b9c74 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9c74:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9c76:	f003 ff86 	bl	bdb86 <strcmp>
}
   b9c7a:	fab0 f080 	clz	r0, r0
   b9c7e:	0940      	lsrs	r0, r0, #5
   b9c80:	bd08      	pop	{r3, pc}

000b9c82 <__tcf_1>:
   b9c82:	4770      	bx	lr

000b9c84 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9c84:	b510      	push	{r4, lr}
   b9c86:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9c88:	f001 fed2 	bl	bba30 <_Z16_fetch_usbserialv>
   b9c8c:	4284      	cmp	r4, r0
   b9c8e:	d010      	beq.n	b9cb2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9c90:	f002 f8bc 	bl	bbe0c <_Z22__fetch_global_Serial1v>
   b9c94:	4284      	cmp	r4, r0
   b9c96:	d105      	bne.n	b9ca4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9c98:	f002 f8b8 	bl	bbe0c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9ca0:	f001 be5f 	b.w	bb962 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9ca4:	b12c      	cbz	r4, b9cb2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b9ca6:	6823      	ldr	r3, [r4, #0]
   b9ca8:	4620      	mov	r0, r4
   b9caa:	685b      	ldr	r3, [r3, #4]
}
   b9cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9cb0:	4718      	bx	r3
   b9cb2:	bd10      	pop	{r4, pc}

000b9cb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9cb4:	680b      	ldr	r3, [r1, #0]
   b9cb6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9cb8:	684b      	ldr	r3, [r1, #4]
   b9cba:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9cbc:	b113      	cbz	r3, b9cc4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9cbe:	685a      	ldr	r2, [r3, #4]
   b9cc0:	3201      	adds	r2, #1
   b9cc2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9cc4:	4770      	bx	lr

000b9cc6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9cc6:	b513      	push	{r0, r1, r4, lr}
   b9cc8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9cca:	4608      	mov	r0, r1
   b9ccc:	9101      	str	r1, [sp, #4]
   b9cce:	f003 ff6c 	bl	bdbaa <strlen>
   b9cd2:	9901      	ldr	r1, [sp, #4]
   b9cd4:	4602      	mov	r2, r0
   b9cd6:	4620      	mov	r0, r4
}
   b9cd8:	b002      	add	sp, #8
   b9cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9cde:	f7ff bf59 	b.w	b9b94 <_ZN5spark10JSONWriter5valueEPKcj>

000b9ce2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9ce2:	b513      	push	{r0, r1, r4, lr}
   b9ce4:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9ce6:	4608      	mov	r0, r1
   b9ce8:	9101      	str	r1, [sp, #4]
   b9cea:	f003 ff5e 	bl	bdbaa <strlen>
   b9cee:	6823      	ldr	r3, [r4, #0]
   b9cf0:	9901      	ldr	r1, [sp, #4]
   b9cf2:	68db      	ldr	r3, [r3, #12]
   b9cf4:	4602      	mov	r2, r0
   b9cf6:	4620      	mov	r0, r4
}
   b9cf8:	b002      	add	sp, #8
   b9cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9cfe:	4718      	bx	r3

000b9d00 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9d00:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9d02:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9d04:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9d08:	68db      	ldr	r3, [r3, #12]
   b9d0a:	2201      	movs	r2, #1
   b9d0c:	f10d 0107 	add.w	r1, sp, #7
   b9d10:	4798      	blx	r3
}
   b9d12:	b003      	add	sp, #12
   b9d14:	f85d fb04 	ldr.w	pc, [sp], #4

000b9d18 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9d18:	b40e      	push	{r1, r2, r3}
   b9d1a:	b503      	push	{r0, r1, lr}
   b9d1c:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b9d1e:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9d20:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9d24:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b9d26:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b9d28:	f001 f975 	bl	bb016 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9d2c:	b002      	add	sp, #8
   b9d2e:	f85d eb04 	ldr.w	lr, [sp], #4
   b9d32:	b003      	add	sp, #12
   b9d34:	4770      	bx	lr

000b9d36 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9d36:	680a      	ldr	r2, [r1, #0]
   b9d38:	6002      	str	r2, [r0, #0]
   b9d3a:	684a      	ldr	r2, [r1, #4]
   b9d3c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b9d3e:	2200      	movs	r2, #0
   b9d40:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9d44:	b510      	push	{r4, lr}
   b9d46:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9d48:	688c      	ldr	r4, [r1, #8]
   b9d4a:	6084      	str	r4, [r0, #8]
   b9d4c:	68cc      	ldr	r4, [r1, #12]
   b9d4e:	60c4      	str	r4, [r0, #12]
   b9d50:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9d52:	608a      	str	r2, [r1, #8]
   b9d54:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9d56:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9d58:	610a      	str	r2, [r1, #16]
   b9d5a:	bd10      	pop	{r4, pc}

000b9d5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9d60:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9d64:	f04f 0a14 	mov.w	sl, #20
   b9d68:	9300      	str	r3, [sp, #0]
   b9d6a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9d6e:	4b18      	ldr	r3, [pc, #96]	; (b9dd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9d70:	10a4      	asrs	r4, r4, #2
   b9d72:	4617      	mov	r7, r2
   b9d74:	435c      	muls	r4, r3
   b9d76:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9d78:	2c00      	cmp	r4, #0
   b9d7a:	dd21      	ble.n	b9dc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9d7c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9d7e:	fb0a f006 	mul.w	r0, sl, r6
   b9d82:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9d86:	463a      	mov	r2, r7
   b9d88:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9d8c:	5828      	ldr	r0, [r5, r0]
   b9d8e:	9101      	str	r1, [sp, #4]
   b9d90:	455f      	cmp	r7, fp
   b9d92:	bf28      	it	cs
   b9d94:	465a      	movcs	r2, fp
   b9d96:	f003 ff10 	bl	bdbba <strncmp>
                if (cmp == 0) {
   b9d9a:	2800      	cmp	r0, #0
   b9d9c:	9901      	ldr	r1, [sp, #4]
   b9d9e:	f04f 0301 	mov.w	r3, #1
   b9da2:	d10b      	bne.n	b9dbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9da4:	455f      	cmp	r7, fp
   b9da6:	d103      	bne.n	b9db0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b9da8:	9a00      	ldr	r2, [sp, #0]
   b9daa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9dac:	4634      	mov	r4, r6
   b9dae:	e7e3      	b.n	b9d78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9db0:	d9fc      	bls.n	b9dac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9db2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9db4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9db8:	3e01      	subs	r6, #1
   b9dba:	e7f7      	b.n	b9dac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9dbc:	dbf9      	blt.n	b9db2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9dbe:	e7f5      	b.n	b9dac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9dc0:	eba5 0508 	sub.w	r5, r5, r8
}
   b9dc4:	4802      	ldr	r0, [pc, #8]	; (b9dd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9dc6:	10ad      	asrs	r5, r5, #2
   b9dc8:	4368      	muls	r0, r5
   b9dca:	b003      	add	sp, #12
   b9dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9dd0:	cccccccd 	.word	0xcccccccd

000b9dd4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9dd6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9dd8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9dda:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9ddc:	b303      	cbz	r3, b9e20 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9dde:	b1f9      	cbz	r1, b9e20 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9de0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9de2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9de6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9de8:	a903      	add	r1, sp, #12
   b9dea:	a801      	add	r0, sp, #4
   b9dec:	f7ff ff19 	bl	b9c22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9df0:	4601      	mov	r1, r0
   b9df2:	b1a8      	cbz	r0, b9e20 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9df4:	f10d 030b 	add.w	r3, sp, #11
   b9df8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9dfa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9dfe:	4620      	mov	r0, r4
   b9e00:	f7ff ffac 	bl	b9d5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9e04:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9e08:	b153      	cbz	r3, b9e20 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9e0a:	6823      	ldr	r3, [r4, #0]
   b9e0c:	2414      	movs	r4, #20
   b9e0e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9e12:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9e14:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9e18:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9e1a:	bfa8      	it	ge
   b9e1c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9e1e:	e7e3      	b.n	b9de8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9e20:	4628      	mov	r0, r5
   b9e22:	b004      	add	sp, #16
   b9e24:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9e28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9e28:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9e2a:	4c09      	ldr	r4, [pc, #36]	; (b9e50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9e2c:	7823      	ldrb	r3, [r4, #0]
   b9e2e:	f3bf 8f5b 	dmb	ish
   b9e32:	07db      	lsls	r3, r3, #31
   b9e34:	d409      	bmi.n	b9e4a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9e36:	4620      	mov	r0, r4
   b9e38:	f7fa f940 	bl	b40bc <__cxa_guard_acquire>
   b9e3c:	b128      	cbz	r0, b9e4a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9e3e:	4620      	mov	r0, r4
   b9e40:	f7fa f941 	bl	b40c6 <__cxa_guard_release>
   b9e44:	4803      	ldr	r0, [pc, #12]	; (b9e54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9e46:	f003 fdbf 	bl	bd9c8 <atexit>
}
   b9e4a:	4803      	ldr	r0, [pc, #12]	; (b9e58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9e4c:	bd10      	pop	{r4, pc}
   b9e4e:	bf00      	nop
   b9e50:	2003e64c 	.word	0x2003e64c
   b9e54:	000b9c1b 	.word	0x000b9c1b
   b9e58:	2003dec0 	.word	0x2003dec0

000b9e5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9e5c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9e5e:	4c09      	ldr	r4, [pc, #36]	; (b9e84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9e60:	7823      	ldrb	r3, [r4, #0]
   b9e62:	f3bf 8f5b 	dmb	ish
   b9e66:	07db      	lsls	r3, r3, #31
   b9e68:	d409      	bmi.n	b9e7e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9e6a:	4620      	mov	r0, r4
   b9e6c:	f7fa f926 	bl	b40bc <__cxa_guard_acquire>
   b9e70:	b128      	cbz	r0, b9e7e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9e72:	4620      	mov	r0, r4
   b9e74:	f7fa f927 	bl	b40c6 <__cxa_guard_release>
   b9e78:	4803      	ldr	r0, [pc, #12]	; (b9e88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9e7a:	f003 fda5 	bl	bd9c8 <atexit>
    return &factory;
}
   b9e7e:	4803      	ldr	r0, [pc, #12]	; (b9e8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9e80:	bd10      	pop	{r4, pc}
   b9e82:	bf00      	nop
   b9e84:	2003e650 	.word	0x2003e650
   b9e88:	000b9c83 	.word	0x000b9c83
   b9e8c:	2003dec4 	.word	0x2003dec4

000b9e90 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9e90:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9e92:	2500      	movs	r5, #0
   b9e94:	4604      	mov	r4, r0
   b9e96:	e9c0 5500 	strd	r5, r5, [r0]
   b9e9a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9e9e:	6085      	str	r5, [r0, #8]
   b9ea0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9ea2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b9ea6:	f7fe fd8b 	bl	b89c0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b9eaa:	f7ff ffbd 	bl	b9e28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9eae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9eb0:	f7ff ffd4 	bl	b9e5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9eb4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9eb6:	6220      	str	r0, [r4, #32]
}
   b9eb8:	4620      	mov	r0, r4
   b9eba:	bd38      	pop	{r3, r4, r5, pc}

000b9ebc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9ebc:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9ebe:	4c0a      	ldr	r4, [pc, #40]	; (b9ee8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9ec0:	7823      	ldrb	r3, [r4, #0]
   b9ec2:	f3bf 8f5b 	dmb	ish
   b9ec6:	07db      	lsls	r3, r3, #31
   b9ec8:	d40c      	bmi.n	b9ee4 <_ZN5spark10LogManager8instanceEv+0x28>
   b9eca:	4620      	mov	r0, r4
   b9ecc:	f7fa f8f6 	bl	b40bc <__cxa_guard_acquire>
   b9ed0:	b140      	cbz	r0, b9ee4 <_ZN5spark10LogManager8instanceEv+0x28>
   b9ed2:	4806      	ldr	r0, [pc, #24]	; (b9eec <_ZN5spark10LogManager8instanceEv+0x30>)
   b9ed4:	f7ff ffdc 	bl	b9e90 <_ZN5spark10LogManagerC1Ev>
   b9ed8:	4620      	mov	r0, r4
   b9eda:	f7fa f8f4 	bl	b40c6 <__cxa_guard_release>
   b9ede:	4804      	ldr	r0, [pc, #16]	; (b9ef0 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9ee0:	f003 fd72 	bl	bd9c8 <atexit>
    return &mgr;
}
   b9ee4:	4801      	ldr	r0, [pc, #4]	; (b9eec <_ZN5spark10LogManager8instanceEv+0x30>)
   b9ee6:	bd10      	pop	{r4, pc}
   b9ee8:	2003e648 	.word	0x2003e648
   b9eec:	2003e658 	.word	0x2003e658
   b9ef0:	000ba411 	.word	0x000ba411

000b9ef4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9ef4:	4a02      	ldr	r2, [pc, #8]	; (b9f00 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9ef6:	4903      	ldr	r1, [pc, #12]	; (b9f04 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9ef8:	4803      	ldr	r0, [pc, #12]	; (b9f08 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9efa:	2300      	movs	r3, #0
   b9efc:	f7fe bfa0 	b.w	b8e40 <log_set_callbacks>
   b9f00:	000ba1f5 	.word	0x000ba1f5
   b9f04:	000ba181 	.word	0x000ba181
   b9f08:	000ba101 	.word	0x000ba101

000b9f0c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9f0c:	2300      	movs	r3, #0
   b9f0e:	461a      	mov	r2, r3
   b9f10:	4619      	mov	r1, r3
   b9f12:	4618      	mov	r0, r3
   b9f14:	f7fe bf94 	b.w	b8e40 <log_set_callbacks>

000b9f18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9f1a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9f1c:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9f1e:	4668      	mov	r0, sp
   b9f20:	f7ff fec8 	bl	b9cb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9f24:	466a      	mov	r2, sp
   b9f26:	4629      	mov	r1, r5
   b9f28:	4620      	mov	r0, r4
   b9f2a:	f7ff fd53 	bl	b99d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9f2e:	a801      	add	r0, sp, #4
   b9f30:	f7ff f951 	bl	b91d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f34:	4620      	mov	r0, r4
   b9f36:	b003      	add	sp, #12
   b9f38:	bd30      	pop	{r4, r5, pc}

000b9f3a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9f3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9f3c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9f3e:	4604      	mov	r4, r0
   b9f40:	4668      	mov	r0, sp
   b9f42:	f7ff feb7 	bl	b9cb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9f46:	466a      	mov	r2, sp
   b9f48:	4629      	mov	r1, r5
   b9f4a:	4620      	mov	r0, r4
   b9f4c:	f7ff fd1e 	bl	b998c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9f50:	a801      	add	r0, sp, #4
   b9f52:	f7ff f940 	bl	b91d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f56:	4620      	mov	r0, r4
   b9f58:	b003      	add	sp, #12
   b9f5a:	bd30      	pop	{r4, r5, pc}

000b9f5c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9f5e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f60:	4604      	mov	r4, r0
   b9f62:	4668      	mov	r0, sp
   b9f64:	f7ff fea6 	bl	b9cb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9f68:	466a      	mov	r2, sp
   b9f6a:	4629      	mov	r1, r5
   b9f6c:	4620      	mov	r0, r4
   b9f6e:	f7ff fcb6 	bl	b98de <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9f72:	a801      	add	r0, sp, #4
   b9f74:	f7ff f92f 	bl	b91d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f78:	4620      	mov	r0, r4
   b9f7a:	b003      	add	sp, #12
   b9f7c:	bd30      	pop	{r4, r5, pc}
	...

000b9f80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9f80:	b570      	push	{r4, r5, r6, lr}
   b9f82:	b08a      	sub	sp, #40	; 0x28
   b9f84:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9f86:	4601      	mov	r1, r0
   b9f88:	a804      	add	r0, sp, #16
   b9f8a:	f7ff ffc5 	bl	b9f18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9f8e:	4e14      	ldr	r6, [pc, #80]	; (b9fe0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9f90:	a804      	add	r0, sp, #16
   b9f92:	f7ff fd37 	bl	b9a04 <_ZN5spark18JSONObjectIterator4nextEv>
   b9f96:	b1e8      	cbz	r0, b9fd4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9f98:	a904      	add	r1, sp, #16
   b9f9a:	4668      	mov	r0, sp
   b9f9c:	f7ff ffcd 	bl	b9f3a <_ZNK5spark18JSONObjectIterator4nameEv>
   b9fa0:	9802      	ldr	r0, [sp, #8]
   b9fa2:	4631      	mov	r1, r6
   b9fa4:	f7ff fe66 	bl	b9c74 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9fa8:	4604      	mov	r4, r0
   b9faa:	b110      	cbz	r0, b9fb2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9fac:	1e2c      	subs	r4, r5, #0
   b9fae:	bf18      	it	ne
   b9fb0:	2401      	movne	r4, #1
   b9fb2:	a801      	add	r0, sp, #4
   b9fb4:	f7ff f90f 	bl	b91d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9fb8:	2c00      	cmp	r4, #0
   b9fba:	d0e9      	beq.n	b9f90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9fbc:	a904      	add	r1, sp, #16
   b9fbe:	4668      	mov	r0, sp
   b9fc0:	f7ff ffcc 	bl	b9f5c <_ZNK5spark18JSONObjectIterator5valueEv>
   b9fc4:	4668      	mov	r0, sp
   b9fc6:	f7ff fcc0 	bl	b994a <_ZNK5spark9JSONValue5toIntEv>
   b9fca:	6028      	str	r0, [r5, #0]
   b9fcc:	a801      	add	r0, sp, #4
   b9fce:	f7ff f902 	bl	b91d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9fd2:	e7dd      	b.n	b9f90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9fd4:	a805      	add	r0, sp, #20
   b9fd6:	f7ff f8fe 	bl	b91d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9fda:	b00a      	add	sp, #40	; 0x28
   b9fdc:	bd70      	pop	{r4, r5, r6, pc}
   b9fde:	bf00      	nop
   b9fe0:	000bf172 	.word	0x000bf172

000b9fe4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9fe6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9fe8:	4620      	mov	r0, r4
   b9fea:	4913      	ldr	r1, [pc, #76]	; (ba038 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9fec:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9fee:	f003 fdca 	bl	bdb86 <strcmp>
   b9ff2:	b950      	cbnz	r0, ba00a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9ff4:	f001 fd1c 	bl	bba30 <_Z16_fetch_usbserialv>
   b9ff8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9ffc:	f001 fd06 	bl	bba0c <_ZN9USBSerial5beginEl>
}
   ba000:	b003      	add	sp, #12
   ba002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   ba006:	f001 bd13 	b.w	bba30 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   ba00a:	490c      	ldr	r1, [pc, #48]	; (ba03c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   ba00c:	4620      	mov	r0, r4
   ba00e:	f003 fdba 	bl	bdb86 <strcmp>
   ba012:	b978      	cbnz	r0, ba034 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   ba014:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   ba018:	a901      	add	r1, sp, #4
   ba01a:	4628      	mov	r0, r5
        int baud = 9600;
   ba01c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   ba01e:	f7ff ffaf 	bl	b9f80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   ba022:	f001 fef3 	bl	bbe0c <_Z22__fetch_global_Serial1v>
   ba026:	9901      	ldr	r1, [sp, #4]
   ba028:	f001 fc98 	bl	bb95c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   ba02c:	f001 feee 	bl	bbe0c <_Z22__fetch_global_Serial1v>
}
   ba030:	b003      	add	sp, #12
   ba032:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   ba034:	2000      	movs	r0, #0
   ba036:	e7fb      	b.n	ba030 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   ba038:	000bf177 	.word	0x000bf177
   ba03c:	000bf17e 	.word	0x000bf17e

000ba040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba040:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba042:	e9d0 5300 	ldrd	r5, r3, [r0]
   ba046:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba048:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba04a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba04e:	42ae      	cmp	r6, r5
   ba050:	d005      	beq.n	ba05e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   ba052:	f105 0008 	add.w	r0, r5, #8
   ba056:	f7ff fff3 	bl	ba040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba05a:	3514      	adds	r5, #20
   ba05c:	e7f7      	b.n	ba04e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   ba05e:	6820      	ldr	r0, [r4, #0]
   ba060:	f7ff f81c 	bl	b909c <free>
}
   ba064:	4620      	mov	r0, r4
   ba066:	bd70      	pop	{r4, r5, r6, pc}

000ba068 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   ba068:	b510      	push	{r4, lr}
   ba06a:	4604      	mov	r4, r0
   ba06c:	300c      	adds	r0, #12
   ba06e:	f7ff ffe7 	bl	ba040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba072:	4620      	mov	r0, r4
   ba074:	f7ff f89d 	bl	b91b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba078:	4620      	mov	r0, r4
   ba07a:	bd10      	pop	{r4, pc}

000ba07c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   ba07c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   ba07e:	4b04      	ldr	r3, [pc, #16]	; (ba090 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   ba080:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   ba082:	f840 3b04 	str.w	r3, [r0], #4
   ba086:	f7ff ffef 	bl	ba068 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   ba08a:	4620      	mov	r0, r4
   ba08c:	bd10      	pop	{r4, pc}
   ba08e:	bf00      	nop
   ba090:	000be2c0 	.word	0x000be2c0

000ba094 <_ZN5spark16StreamLogHandlerD0Ev>:
   ba094:	b510      	push	{r4, lr}
   ba096:	4604      	mov	r4, r0
   ba098:	f7ff fff0 	bl	ba07c <_ZN5spark16StreamLogHandlerD1Ev>
   ba09c:	4620      	mov	r0, r4
   ba09e:	2124      	movs	r1, #36	; 0x24
   ba0a0:	f7f9 fffd 	bl	b409e <_ZdlPvj>
   ba0a4:	4620      	mov	r0, r4
   ba0a6:	bd10      	pop	{r4, pc}

000ba0a8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   ba0a8:	b510      	push	{r4, lr}
   ba0aa:	4b03      	ldr	r3, [pc, #12]	; (ba0b8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   ba0ac:	6003      	str	r3, [r0, #0]
   ba0ae:	4604      	mov	r4, r0
   ba0b0:	f7ff ffe4 	bl	ba07c <_ZN5spark16StreamLogHandlerD1Ev>
   ba0b4:	4620      	mov	r0, r4
   ba0b6:	bd10      	pop	{r4, pc}
   ba0b8:	000bf214 	.word	0x000bf214

000ba0bc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   ba0bc:	b510      	push	{r4, lr}
   ba0be:	4604      	mov	r4, r0
   ba0c0:	f7ff fff2 	bl	ba0a8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   ba0c4:	4620      	mov	r0, r4
   ba0c6:	2124      	movs	r1, #36	; 0x24
   ba0c8:	f7f9 ffe9 	bl	b409e <_ZdlPvj>
   ba0cc:	4620      	mov	r0, r4
   ba0ce:	bd10      	pop	{r4, pc}

000ba0d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   ba0d0:	2200      	movs	r2, #0
   ba0d2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   ba0d6:	b510      	push	{r4, lr}
        capacity_(0) {
   ba0d8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba0da:	680c      	ldr	r4, [r1, #0]
   ba0dc:	6004      	str	r4, [r0, #0]
   ba0de:	684c      	ldr	r4, [r1, #4]
   ba0e0:	6044      	str	r4, [r0, #4]
   ba0e2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba0e4:	600a      	str	r2, [r1, #0]
   ba0e6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba0e8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba0ea:	608a      	str	r2, [r1, #8]
}
   ba0ec:	bd10      	pop	{r4, pc}

000ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   ba0ee:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba0f0:	6803      	ldr	r3, [r0, #0]
   ba0f2:	4604      	mov	r4, r0
   ba0f4:	6818      	ldr	r0, [r3, #0]
   ba0f6:	f7fe fc7b 	bl	b89f0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   ba0fa:	4620      	mov	r0, r4
   ba0fc:	bd10      	pop	{r4, pc}
	...

000ba100 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   ba100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba104:	b087      	sub	sp, #28
   ba106:	4680      	mov	r8, r0
   ba108:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   ba10a:	4b1c      	ldr	r3, [pc, #112]	; (ba17c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   ba10c:	685b      	ldr	r3, [r3, #4]
   ba10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba112:	4689      	mov	r9, r1
   ba114:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   ba116:	b96b      	cbnz	r3, ba134 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   ba118:	f7ff fed0 	bl	b9ebc <_ZN5spark10LogManager8instanceEv>
   ba11c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba11e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   ba122:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba124:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   ba126:	f7ff fda3 	bl	b9c70 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   ba12a:	7b23      	ldrb	r3, [r4, #12]
   ba12c:	b12b      	cbz	r3, ba13a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   ba12e:	a805      	add	r0, sp, #20
   ba130:	f7ff ffdd 	bl	ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   ba134:	b007      	add	sp, #28
   ba136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   ba13a:	2301      	movs	r3, #1
   ba13c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   ba13e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   ba142:	fa5f f989 	uxtb.w	r9, r9
   ba146:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba14a:	45aa      	cmp	sl, r5
   ba14c:	d012      	beq.n	ba174 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   ba14e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   ba152:	4631      	mov	r1, r6
   ba154:	1d38      	adds	r0, r7, #4
   ba156:	f7ff fe3d 	bl	b9dd4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba15a:	4581      	cmp	r9, r0
   ba15c:	d3f5      	bcc.n	ba14a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   ba15e:	683b      	ldr	r3, [r7, #0]
   ba160:	9a03      	ldr	r2, [sp, #12]
   ba162:	9200      	str	r2, [sp, #0]
   ba164:	f8d3 b008 	ldr.w	fp, [r3, #8]
   ba168:	464a      	mov	r2, r9
   ba16a:	4633      	mov	r3, r6
   ba16c:	4641      	mov	r1, r8
   ba16e:	4638      	mov	r0, r7
   ba170:	47d8      	blx	fp
   ba172:	e7ea      	b.n	ba14a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   ba174:	2300      	movs	r3, #0
   ba176:	7323      	strb	r3, [r4, #12]
   ba178:	e7d9      	b.n	ba12e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   ba17a:	bf00      	nop
   ba17c:	e000ed00 	.word	0xe000ed00

000ba180 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   ba180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba184:	469b      	mov	fp, r3
   ba186:	4b1a      	ldr	r3, [pc, #104]	; (ba1f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   ba188:	685b      	ldr	r3, [r3, #4]
   ba18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba18e:	4680      	mov	r8, r0
   ba190:	4689      	mov	r9, r1
   ba192:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   ba194:	b96b      	cbnz	r3, ba1b2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   ba196:	f7ff fe91 	bl	b9ebc <_ZN5spark10LogManager8instanceEv>
   ba19a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba19c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   ba1a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba1a2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba1a4:	f7ff fd64 	bl	b9c70 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   ba1a8:	7b23      	ldrb	r3, [r4, #12]
   ba1aa:	b12b      	cbz	r3, ba1b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   ba1ac:	a801      	add	r0, sp, #4
   ba1ae:	f7ff ff9e 	bl	ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba1b2:	b003      	add	sp, #12
   ba1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   ba1b8:	2301      	movs	r3, #1
   ba1ba:	7323      	strb	r3, [r4, #12]
   ba1bc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ba1c0:	b2f6      	uxtb	r6, r6
   ba1c2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba1c6:	4555      	cmp	r5, sl
   ba1c8:	d00e      	beq.n	ba1e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ba1ca:	f855 7b04 	ldr.w	r7, [r5], #4
   ba1ce:	4659      	mov	r1, fp
   ba1d0:	1d38      	adds	r0, r7, #4
   ba1d2:	f7ff fdff 	bl	b9dd4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba1d6:	4286      	cmp	r6, r0
   ba1d8:	d3f5      	bcc.n	ba1c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ba1da:	683b      	ldr	r3, [r7, #0]
   ba1dc:	464a      	mov	r2, r9
   ba1de:	68db      	ldr	r3, [r3, #12]
   ba1e0:	4641      	mov	r1, r8
   ba1e2:	4638      	mov	r0, r7
   ba1e4:	4798      	blx	r3
   ba1e6:	e7ee      	b.n	ba1c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ba1e8:	2300      	movs	r3, #0
   ba1ea:	7323      	strb	r3, [r4, #12]
   ba1ec:	e7de      	b.n	ba1ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ba1ee:	bf00      	nop
   ba1f0:	e000ed00 	.word	0xe000ed00

000ba1f4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ba1f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba1f8:	4b16      	ldr	r3, [pc, #88]	; (ba254 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ba1fa:	685b      	ldr	r3, [r3, #4]
   ba1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba200:	4605      	mov	r5, r0
   ba202:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ba204:	bb1b      	cbnz	r3, ba24e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ba206:	f7ff fe59 	bl	b9ebc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ba20a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ba20e:	4604      	mov	r4, r0
   ba210:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba212:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba214:	f7ff fd2c 	bl	b9c70 <_ZN14RecursiveMutex4lockEv.isra.0>
   ba218:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ba21c:	2446      	movs	r4, #70	; 0x46
   ba21e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba222:	45b0      	cmp	r8, r6
   ba224:	d109      	bne.n	ba23a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ba226:	a801      	add	r0, sp, #4
   ba228:	f7ff ff61 	bl	ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ba22c:	42a5      	cmp	r5, r4
   ba22e:	bfb4      	ite	lt
   ba230:	2000      	movlt	r0, #0
   ba232:	2001      	movge	r0, #1
}
   ba234:	b002      	add	sp, #8
   ba236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ba23a:	f856 0b04 	ldr.w	r0, [r6], #4
   ba23e:	4639      	mov	r1, r7
   ba240:	3004      	adds	r0, #4
   ba242:	f7ff fdc7 	bl	b9dd4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ba246:	4284      	cmp	r4, r0
   ba248:	bfa8      	it	ge
   ba24a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ba24c:	e7e9      	b.n	ba222 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ba24e:	2000      	movs	r0, #0
   ba250:	e7f0      	b.n	ba234 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ba252:	bf00      	nop
   ba254:	e000ed00 	.word	0xe000ed00

000ba258 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba25a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   ba25e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba260:	4604      	mov	r4, r0
   ba262:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba264:	db0d      	blt.n	ba282 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   ba266:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   ba268:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba26a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba26c:	dd04      	ble.n	ba278 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   ba26e:	00b9      	lsls	r1, r7, #2
   ba270:	f7fe ff1c 	bl	b90ac <realloc>
            if (!d) {
   ba274:	b918      	cbnz	r0, ba27e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   ba276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ba278:	f7fe ff10 	bl	b909c <free>
        T* d = nullptr;
   ba27c:	2000      	movs	r0, #0
        data_ = d;
   ba27e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba280:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba282:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba284:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba286:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   ba28a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba28c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   ba290:	1d08      	adds	r0, r1, #4
   ba292:	f003 fbd3 	bl	bda3c <memmove>
    new(p) T(std::move(value));
   ba296:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   ba29a:	6863      	ldr	r3, [r4, #4]
   ba29c:	3301      	adds	r3, #1
   ba29e:	6063      	str	r3, [r4, #4]
    return true;
   ba2a0:	2001      	movs	r0, #1
   ba2a2:	e7e8      	b.n	ba276 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000ba2a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ba2a6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba2aa:	4604      	mov	r4, r0
   ba2ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba2ae:	9301      	str	r3, [sp, #4]
   ba2b0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   ba2b2:	f7ff fcdd 	bl	b9c70 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   ba2b6:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba2ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   ba2be:	4293      	cmp	r3, r2
   ba2c0:	4619      	mov	r1, r3
   ba2c2:	d00b      	beq.n	ba2dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ba2c4:	6809      	ldr	r1, [r1, #0]
   ba2c6:	42a9      	cmp	r1, r5
   ba2c8:	f103 0304 	add.w	r3, r3, #4
   ba2cc:	d1f7      	bne.n	ba2be <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   ba2ce:	a801      	add	r0, sp, #4
   ba2d0:	f7ff ff0d 	bl	ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba2d4:	2500      	movs	r5, #0
}
   ba2d6:	4628      	mov	r0, r5
   ba2d8:	b003      	add	sp, #12
   ba2da:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ba2dc:	4629      	mov	r1, r5
   ba2de:	4620      	mov	r0, r4
   ba2e0:	f7ff ffba 	bl	ba258 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   ba2e4:	4605      	mov	r5, r0
   ba2e6:	2800      	cmp	r0, #0
   ba2e8:	d0f1      	beq.n	ba2ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ba2ea:	6863      	ldr	r3, [r4, #4]
   ba2ec:	2b01      	cmp	r3, #1
   ba2ee:	d101      	bne.n	ba2f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ba2f0:	f7ff fe00 	bl	b9ef4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba2f4:	a801      	add	r0, sp, #4
   ba2f6:	f7ff fefa 	bl	ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba2fa:	e7ec      	b.n	ba2d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ba2fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba2fc:	b570      	push	{r4, r5, r6, lr}
   ba2fe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ba300:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba304:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ba306:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ba30a:	4282      	cmp	r2, r0
   ba30c:	d00f      	beq.n	ba32e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   ba30e:	4601      	mov	r1, r0
            if (*p == value) {
   ba310:	681d      	ldr	r5, [r3, #0]
   ba312:	f851 6b04 	ldr.w	r6, [r1], #4
   ba316:	42ae      	cmp	r6, r5
   ba318:	d107      	bne.n	ba32a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba31a:	1a52      	subs	r2, r2, r1
   ba31c:	f003 fb8e 	bl	bda3c <memmove>
    --size_;
   ba320:	6863      	ldr	r3, [r4, #4]
   ba322:	3b01      	subs	r3, #1
   ba324:	6063      	str	r3, [r4, #4]
    return true;
   ba326:	2001      	movs	r0, #1
}
   ba328:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   ba32a:	4608      	mov	r0, r1
   ba32c:	e7ed      	b.n	ba30a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ba32e:	2000      	movs	r0, #0
   ba330:	e7fa      	b.n	ba328 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000ba332 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ba334:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba338:	4604      	mov	r4, r0
   ba33a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba33c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba33e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   ba340:	f7ff fc96 	bl	b9c70 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ba344:	a901      	add	r1, sp, #4
   ba346:	4620      	mov	r0, r4
   ba348:	f7ff ffd8 	bl	ba2fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ba34c:	b118      	cbz	r0, ba356 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ba34e:	6863      	ldr	r3, [r4, #4]
   ba350:	b90b      	cbnz	r3, ba356 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ba352:	f7ff fddb 	bl	b9f0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba356:	a803      	add	r0, sp, #12
   ba358:	f7ff fec9 	bl	ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba35c:	b004      	add	sp, #16
   ba35e:	bd10      	pop	{r4, pc}

000ba360 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba360:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba362:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba366:	2318      	movs	r3, #24
   ba368:	4604      	mov	r4, r0
   ba36a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba36e:	42ae      	cmp	r6, r5
   ba370:	d015      	beq.n	ba39e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba372:	f105 0110 	add.w	r1, r5, #16
   ba376:	4620      	mov	r0, r4
   ba378:	f7ff ffc0 	bl	ba2fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba37c:	6863      	ldr	r3, [r4, #4]
   ba37e:	b90b      	cbnz	r3, ba384 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba380:	f7ff fdc4 	bl	b9f0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba384:	69e0      	ldr	r0, [r4, #28]
   ba386:	6929      	ldr	r1, [r5, #16]
   ba388:	6803      	ldr	r3, [r0, #0]
   ba38a:	68db      	ldr	r3, [r3, #12]
   ba38c:	4798      	blx	r3
        if (h.stream) {
   ba38e:	6969      	ldr	r1, [r5, #20]
   ba390:	b119      	cbz	r1, ba39a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba392:	6a20      	ldr	r0, [r4, #32]
   ba394:	6803      	ldr	r3, [r0, #0]
   ba396:	68db      	ldr	r3, [r3, #12]
   ba398:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba39a:	3518      	adds	r5, #24
   ba39c:	e7e7      	b.n	ba36e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba39e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba3a2:	2618      	movs	r6, #24
   ba3a4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba3a8:	42ae      	cmp	r6, r5
   ba3aa:	d004      	beq.n	ba3b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba3ac:	4628      	mov	r0, r5
   ba3ae:	f000 ff47 	bl	bb240 <_ZN6StringD1Ev>
   ba3b2:	3518      	adds	r5, #24
   ba3b4:	e7f8      	b.n	ba3a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba3b6:	2300      	movs	r3, #0
   ba3b8:	6163      	str	r3, [r4, #20]
}
   ba3ba:	bd70      	pop	{r4, r5, r6, pc}

000ba3bc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba3bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba3be:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba3c0:	f7ff fda4 	bl	b9f0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba3c4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba3c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba3ca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba3cc:	f7ff fc50 	bl	b9c70 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba3d0:	4620      	mov	r0, r4
   ba3d2:	f7ff ffc5 	bl	ba360 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba3d6:	a801      	add	r0, sp, #4
   ba3d8:	f7ff fe89 	bl	ba0ee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba3dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba3de:	b108      	cbz	r0, ba3e4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba3e0:	f7fe faf6 	bl	b89d0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba3e4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba3e8:	2618      	movs	r6, #24
   ba3ea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba3ee:	42ae      	cmp	r6, r5
   ba3f0:	d004      	beq.n	ba3fc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba3f2:	4628      	mov	r0, r5
   ba3f4:	f000 ff24 	bl	bb240 <_ZN6StringD1Ev>
   ba3f8:	3518      	adds	r5, #24
   ba3fa:	e7f8      	b.n	ba3ee <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba3fc:	6920      	ldr	r0, [r4, #16]
   ba3fe:	f7fe fe4d 	bl	b909c <free>
   ba402:	6820      	ldr	r0, [r4, #0]
   ba404:	f7fe fe4a 	bl	b909c <free>
}
   ba408:	4620      	mov	r0, r4
   ba40a:	b002      	add	sp, #8
   ba40c:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba410 <__tcf_2>:
    static LogManager mgr;
   ba410:	4801      	ldr	r0, [pc, #4]	; (ba418 <__tcf_2+0x8>)
   ba412:	f7ff bfd3 	b.w	ba3bc <_ZN5spark10LogManagerD1Ev>
   ba416:	bf00      	nop
   ba418:	2003e658 	.word	0x2003e658

000ba41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba41c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba420:	4604      	mov	r4, r0
   ba422:	460d      	mov	r5, r1
   ba424:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba426:	d915      	bls.n	ba454 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba428:	4290      	cmp	r0, r2
   ba42a:	d214      	bcs.n	ba456 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba42c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba430:	1a75      	subs	r5, r6, r1
   ba432:	f1a1 0714 	sub.w	r7, r1, #20
   ba436:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba438:	42b7      	cmp	r7, r6
   ba43a:	d01a      	beq.n	ba472 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba43c:	b11c      	cbz	r4, ba446 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba43e:	4631      	mov	r1, r6
   ba440:	4620      	mov	r0, r4
   ba442:	f7ff fc78 	bl	b9d36 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba446:	f106 0008 	add.w	r0, r6, #8
   ba44a:	f7ff fdf9 	bl	ba040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba44e:	3e14      	subs	r6, #20
   ba450:	3c14      	subs	r4, #20
   ba452:	e7f1      	b.n	ba438 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba454:	d00d      	beq.n	ba472 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba456:	42b5      	cmp	r5, r6
   ba458:	d00b      	beq.n	ba472 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba45a:	b11c      	cbz	r4, ba464 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba45c:	4629      	mov	r1, r5
   ba45e:	4620      	mov	r0, r4
   ba460:	f7ff fc69 	bl	b9d36 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba464:	f105 0008 	add.w	r0, r5, #8
   ba468:	f7ff fdea 	bl	ba040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba46c:	3514      	adds	r5, #20
   ba46e:	3414      	adds	r4, #20
   ba470:	e7f1      	b.n	ba456 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba474 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba474:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba478:	4604      	mov	r4, r0
   ba47a:	460d      	mov	r5, r1
   ba47c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba47e:	d914      	bls.n	ba4aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba480:	4290      	cmp	r0, r2
   ba482:	d213      	bcs.n	ba4ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba484:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba488:	1a75      	subs	r5, r6, r1
   ba48a:	f1a1 0710 	sub.w	r7, r1, #16
   ba48e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba490:	42b7      	cmp	r7, r6
   ba492:	d018      	beq.n	ba4c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba494:	b11c      	cbz	r4, ba49e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba496:	4631      	mov	r1, r6
   ba498:	4620      	mov	r0, r4
   ba49a:	f000 ff4d 	bl	bb338 <_ZN6StringC1EOS_>
                end->~T();
   ba49e:	4630      	mov	r0, r6
   ba4a0:	f000 fece 	bl	bb240 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba4a4:	3e10      	subs	r6, #16
   ba4a6:	3c10      	subs	r4, #16
   ba4a8:	e7f2      	b.n	ba490 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ba4aa:	d00c      	beq.n	ba4c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ba4ac:	42b5      	cmp	r5, r6
   ba4ae:	d00a      	beq.n	ba4c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ba4b0:	b11c      	cbz	r4, ba4ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ba4b2:	4629      	mov	r1, r5
   ba4b4:	4620      	mov	r0, r4
   ba4b6:	f000 ff3f 	bl	bb338 <_ZN6StringC1EOS_>
                p->~T();
   ba4ba:	4628      	mov	r0, r5
   ba4bc:	f000 fec0 	bl	bb240 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba4c0:	3510      	adds	r5, #16
   ba4c2:	3410      	adds	r4, #16
   ba4c4:	e7f2      	b.n	ba4ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ba4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba4c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ba4c8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba4ca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba4cc:	4605      	mov	r5, r0
        if (n > 0) {
   ba4ce:	dd11      	ble.n	ba4f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba4d0:	0130      	lsls	r0, r6, #4
   ba4d2:	f7fe fddb 	bl	b908c <malloc>
            if (!d) {
   ba4d6:	4604      	mov	r4, r0
   ba4d8:	b158      	cbz	r0, ba4f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba4da:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba4de:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ba4e2:	f7ff ffc7 	bl	ba474 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ba4e6:	6828      	ldr	r0, [r5, #0]
   ba4e8:	f7fe fdd8 	bl	b909c <free>
        data_ = d;
   ba4ec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba4ee:	60ae      	str	r6, [r5, #8]
        return true;
   ba4f0:	2001      	movs	r0, #1
    }
   ba4f2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba4f4:	2400      	movs	r4, #0
   ba4f6:	e7f6      	b.n	ba4e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ba4f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4fc:	4690      	mov	r8, r2
   ba4fe:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba500:	2300      	movs	r3, #0
   ba502:	9103      	str	r1, [sp, #12]
    return size_;
   ba504:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba508:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba50a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba50c:	4299      	cmp	r1, r3
        capacity_(0) {
   ba50e:	e9c0 3300 	strd	r3, r3, [r0]
   ba512:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba516:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba51a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba51e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba520:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba522:	dc23      	bgt.n	ba56c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba524:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba528:	2314      	movs	r3, #20
   ba52a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba52e:	42af      	cmp	r7, r5
   ba530:	d03b      	beq.n	ba5aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba532:	4629      	mov	r1, r5
   ba534:	a80b      	add	r0, sp, #44	; 0x2c
   ba536:	f000 feff 	bl	bb338 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba53a:	a90b      	add	r1, sp, #44	; 0x2c
   ba53c:	a80f      	add	r0, sp, #60	; 0x3c
   ba53e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba540:	f000 fefa 	bl	bb338 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba544:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba548:	4299      	cmp	r1, r3
   ba54a:	da1b      	bge.n	ba584 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba54c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba550:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba554:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba558:	4631      	mov	r1, r6
   ba55a:	f106 0010 	add.w	r0, r6, #16
   ba55e:	f7ff ff89 	bl	ba474 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba562:	b9ee      	cbnz	r6, ba5a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba564:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba566:	3301      	adds	r3, #1
   ba568:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba56a:	e011      	b.n	ba590 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba56c:	a808      	add	r0, sp, #32
   ba56e:	f7ff ffab 	bl	ba4c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba572:	2800      	cmp	r0, #0
   ba574:	d1d6      	bne.n	ba524 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba576:	a808      	add	r0, sp, #32
   ba578:	f7fe fe1b 	bl	b91b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba57c:	4620      	mov	r0, r4
   ba57e:	b015      	add	sp, #84	; 0x54
   ba580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba584:	3101      	adds	r1, #1
   ba586:	a808      	add	r0, sp, #32
   ba588:	f7ff ff9e 	bl	ba4c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba58c:	2800      	cmp	r0, #0
   ba58e:	d1dd      	bne.n	ba54c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba590:	a80f      	add	r0, sp, #60	; 0x3c
   ba592:	f000 fe55 	bl	bb240 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba596:	a80b      	add	r0, sp, #44	; 0x2c
   ba598:	f000 fe52 	bl	bb240 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba59c:	3514      	adds	r5, #20
   ba59e:	e7c6      	b.n	ba52e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba5a0:	a90f      	add	r1, sp, #60	; 0x3c
   ba5a2:	4630      	mov	r0, r6
   ba5a4:	f000 fec8 	bl	bb338 <_ZN6StringC1EOS_>
   ba5a8:	e7dc      	b.n	ba564 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba5aa:	2600      	movs	r6, #0
   ba5ac:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba5b0:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba5b2:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba5b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba5ba:	429e      	cmp	r6, r3
   ba5bc:	da7c      	bge.n	ba6b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba5be:	0133      	lsls	r3, r6, #4
   ba5c0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba5c2:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba5c4:	b90b      	cbnz	r3, ba5ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba5c6:	3601      	adds	r6, #1
   ba5c8:	e7f5      	b.n	ba5b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba5ca:	2300      	movs	r3, #0
   ba5cc:	9307      	str	r3, [sp, #28]
   ba5ce:	fb09 f306 	mul.w	r3, r9, r6
   ba5d2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba5d4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba5d6:	a907      	add	r1, sp, #28
   ba5d8:	a806      	add	r0, sp, #24
   ba5da:	f7ff fb22 	bl	b9c22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba5de:	4682      	mov	sl, r0
   ba5e0:	2800      	cmp	r0, #0
   ba5e2:	d0f0      	beq.n	ba5c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba5e4:	f04f 0300 	mov.w	r3, #0
   ba5e8:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba5ec:	4601      	mov	r1, r0
   ba5ee:	9a07      	ldr	r2, [sp, #28]
   ba5f0:	f10d 0317 	add.w	r3, sp, #23
   ba5f4:	4628      	mov	r0, r5
   ba5f6:	f7ff fbb1 	bl	b9d5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba5fa:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba5fe:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba600:	2f00      	cmp	r7, #0
   ba602:	d14a      	bne.n	ba69a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba604:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba608:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba60c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba610:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba614:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba618:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba61c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba61e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba622:	4293      	cmp	r3, r2
   ba624:	db17      	blt.n	ba656 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba626:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba62a:	f1ba 0f00 	cmp.w	sl, #0
   ba62e:	dd30      	ble.n	ba692 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba630:	fb09 f00a 	mul.w	r0, r9, sl
   ba634:	f7fe fd2a 	bl	b908c <malloc>
            if (!d) {
   ba638:	4683      	mov	fp, r0
   ba63a:	b360      	cbz	r0, ba696 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba63c:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba640:	fb09 1202 	mla	r2, r9, r2, r1
   ba644:	f7ff feea 	bl	ba41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba648:	6828      	ldr	r0, [r5, #0]
   ba64a:	f7fe fd27 	bl	b909c <free>
        data_ = d;
   ba64e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba652:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba656:	682b      	ldr	r3, [r5, #0]
   ba658:	9a01      	ldr	r2, [sp, #4]
   ba65a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba65e:	686a      	ldr	r2, [r5, #4]
   ba660:	4651      	mov	r1, sl
   ba662:	fb09 3202 	mla	r2, r9, r2, r3
   ba666:	f10a 0014 	add.w	r0, sl, #20
   ba66a:	f7ff fed7 	bl	ba41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba66e:	f1ba 0f00 	cmp.w	sl, #0
   ba672:	d003      	beq.n	ba67c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba674:	a90f      	add	r1, sp, #60	; 0x3c
   ba676:	4650      	mov	r0, sl
   ba678:	f7ff fb5d 	bl	b9d36 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba67c:	686b      	ldr	r3, [r5, #4]
   ba67e:	3301      	adds	r3, #1
   ba680:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba682:	a811      	add	r0, sp, #68	; 0x44
   ba684:	f7ff fcdc 	bl	ba040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba688:	b13f      	cbz	r7, ba69a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba68a:	a80b      	add	r0, sp, #44	; 0x2c
   ba68c:	f7ff fcd8 	bl	ba040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba690:	e771      	b.n	ba576 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba692:	46bb      	mov	fp, r7
   ba694:	e7d8      	b.n	ba648 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba696:	2701      	movs	r7, #1
   ba698:	e7f3      	b.n	ba682 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba69a:	9b01      	ldr	r3, [sp, #4]
   ba69c:	682d      	ldr	r5, [r5, #0]
   ba69e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba6a2:	9b06      	ldr	r3, [sp, #24]
   ba6a4:	781b      	ldrb	r3, [r3, #0]
   ba6a6:	b92b      	cbnz	r3, ba6b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba6a8:	f8d8 3000 	ldr.w	r3, [r8]
   ba6ac:	9a02      	ldr	r2, [sp, #8]
   ba6ae:	4413      	add	r3, r2
   ba6b0:	7c1b      	ldrb	r3, [r3, #16]
   ba6b2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba6b4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba6b6:	e78e      	b.n	ba5d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6b8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba6ba:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6bc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba6be:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6c0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba6c2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba6c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba6c6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6c8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba6ca:	60a2      	str	r2, [r4, #8]
   ba6cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba6ce:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6d0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba6d2:	60e2      	str	r2, [r4, #12]
   ba6d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba6d6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6d8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba6da:	6122      	str	r2, [r4, #16]
   ba6dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba6de:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba6e0:	9b03      	ldr	r3, [sp, #12]
   ba6e2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba6e4:	6162      	str	r2, [r4, #20]
   ba6e6:	7623      	strb	r3, [r4, #24]
   ba6e8:	e7cf      	b.n	ba68a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba6ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba6ee:	4604      	mov	r4, r0
   ba6f0:	b087      	sub	sp, #28
   ba6f2:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba6f4:	4626      	mov	r6, r4
        stream_(&stream) {
   ba6f6:	4619      	mov	r1, r3
   ba6f8:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba6fa:	4617      	mov	r7, r2
        stream_(&stream) {
   ba6fc:	f7fa fbb5 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba700:	4b0b      	ldr	r3, [pc, #44]	; (ba730 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba702:	f846 3b04 	str.w	r3, [r6], #4
   ba706:	4669      	mov	r1, sp
   ba708:	a803      	add	r0, sp, #12
   ba70a:	f7fa fbae 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba70e:	aa03      	add	r2, sp, #12
   ba710:	4639      	mov	r1, r7
   ba712:	4630      	mov	r0, r6
   ba714:	f7ff fef0 	bl	ba4f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba718:	a803      	add	r0, sp, #12
   ba71a:	f7fa fb65 	bl	b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba71e:	4668      	mov	r0, sp
   ba720:	f7fa fb62 	bl	b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba724:	4b03      	ldr	r3, [pc, #12]	; (ba734 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba726:	6023      	str	r3, [r4, #0]
}
   ba728:	4620      	mov	r0, r4
        stream_(&stream) {
   ba72a:	6225      	str	r5, [r4, #32]
}
   ba72c:	b007      	add	sp, #28
   ba72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba730:	000be2c0 	.word	0x000be2c0
   ba734:	000bf1fc 	.word	0x000bf1fc

000ba738 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba738:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba73a:	460f      	mov	r7, r1
   ba73c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba73e:	491d      	ldr	r1, [pc, #116]	; (ba7b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba740:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba742:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba744:	4616      	mov	r6, r2
   ba746:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba748:	f003 fa1d 	bl	bdb86 <strcmp>
   ba74c:	b9c0      	cbnz	r0, ba780 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba74e:	b1a4      	cbz	r4, ba77a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba750:	4629      	mov	r1, r5
   ba752:	a801      	add	r0, sp, #4
   ba754:	f7ff fcbc 	bl	ba0d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba758:	4917      	ldr	r1, [pc, #92]	; (ba7b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba75a:	2024      	movs	r0, #36	; 0x24
   ba75c:	f001 fb7a 	bl	bbe54 <_ZnwjRKSt9nothrow_t>
   ba760:	4605      	mov	r5, r0
   ba762:	b130      	cbz	r0, ba772 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba764:	ab01      	add	r3, sp, #4
   ba766:	4632      	mov	r2, r6
   ba768:	4621      	mov	r1, r4
   ba76a:	f7ff ffbf 	bl	ba6ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba76e:	4b13      	ldr	r3, [pc, #76]	; (ba7bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba770:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba772:	a801      	add	r0, sp, #4
   ba774:	f7fa fb38 	bl	b4de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba778:	462c      	mov	r4, r5
}
   ba77a:	4620      	mov	r0, r4
   ba77c:	b005      	add	sp, #20
   ba77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba780:	490f      	ldr	r1, [pc, #60]	; (ba7c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba782:	4638      	mov	r0, r7
   ba784:	f003 f9ff 	bl	bdb86 <strcmp>
   ba788:	b990      	cbnz	r0, ba7b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba78a:	2c00      	cmp	r4, #0
   ba78c:	d0f5      	beq.n	ba77a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba78e:	4629      	mov	r1, r5
   ba790:	a801      	add	r0, sp, #4
   ba792:	f7ff fc9d 	bl	ba0d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba796:	4908      	ldr	r1, [pc, #32]	; (ba7b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba798:	2024      	movs	r0, #36	; 0x24
   ba79a:	f001 fb5b 	bl	bbe54 <_ZnwjRKSt9nothrow_t>
   ba79e:	4605      	mov	r5, r0
   ba7a0:	2800      	cmp	r0, #0
   ba7a2:	d0e6      	beq.n	ba772 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba7a4:	ab01      	add	r3, sp, #4
   ba7a6:	4632      	mov	r2, r6
   ba7a8:	4621      	mov	r1, r4
   ba7aa:	f7ff ff9f 	bl	ba6ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba7ae:	e7e0      	b.n	ba772 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba7b0:	2400      	movs	r4, #0
   ba7b2:	e7e2      	b.n	ba77a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba7b4:	000bf186 	.word	0x000bf186
   ba7b8:	000bf35c 	.word	0x000bf35c
   ba7bc:	000bf214 	.word	0x000bf214
   ba7c0:	000bf18a 	.word	0x000bf18a

000ba7c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba7c4:	4b01      	ldr	r3, [pc, #4]	; (ba7cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba7c6:	4a02      	ldr	r2, [pc, #8]	; (ba7d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba7c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba7ca:	4770      	bx	lr
   ba7cc:	2003e654 	.word	0x2003e654
   ba7d0:	000bf19b 	.word	0x000bf19b

000ba7d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba7d8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba7da:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba7de:	4604      	mov	r4, r0
   ba7e0:	460e      	mov	r6, r1
   ba7e2:	4617      	mov	r7, r2
   ba7e4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba7e6:	f001 f923 	bl	bba30 <_Z16_fetch_usbserialv>
   ba7ea:	4581      	cmp	r9, r0
   ba7ec:	d04c      	beq.n	ba888 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba7ee:	792b      	ldrb	r3, [r5, #4]
   ba7f0:	0719      	lsls	r1, r3, #28
   ba7f2:	d504      	bpl.n	ba7fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba7f4:	696a      	ldr	r2, [r5, #20]
   ba7f6:	4954      	ldr	r1, [pc, #336]	; (ba948 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba7f8:	4620      	mov	r0, r4
   ba7fa:	f7ff fa8d 	bl	b9d18 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba7fe:	f1b8 0f00 	cmp.w	r8, #0
   ba802:	d00d      	beq.n	ba820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba804:	215b      	movs	r1, #91	; 0x5b
   ba806:	4620      	mov	r0, r4
   ba808:	f7ff fa7a 	bl	b9d00 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba80c:	4641      	mov	r1, r8
   ba80e:	4620      	mov	r0, r4
   ba810:	f7ff fa67 	bl	b9ce2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba814:	6823      	ldr	r3, [r4, #0]
   ba816:	494d      	ldr	r1, [pc, #308]	; (ba94c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba818:	68db      	ldr	r3, [r3, #12]
   ba81a:	2202      	movs	r2, #2
   ba81c:	4620      	mov	r0, r4
   ba81e:	4798      	blx	r3
    if (attr.has_file) {
   ba820:	792b      	ldrb	r3, [r5, #4]
   ba822:	07da      	lsls	r2, r3, #31
   ba824:	d523      	bpl.n	ba86e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba826:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba82a:	212f      	movs	r1, #47	; 0x2f
   ba82c:	4640      	mov	r0, r8
   ba82e:	f003 f9eb 	bl	bdc08 <strrchr>
    if (s1) {
   ba832:	b108      	cbz	r0, ba838 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba834:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba838:	4641      	mov	r1, r8
   ba83a:	4620      	mov	r0, r4
   ba83c:	f7ff fa51 	bl	b9ce2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba840:	792b      	ldrb	r3, [r5, #4]
   ba842:	079b      	lsls	r3, r3, #30
   ba844:	d508      	bpl.n	ba858 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba846:	213a      	movs	r1, #58	; 0x3a
   ba848:	4620      	mov	r0, r4
   ba84a:	f7ff fa59 	bl	b9d00 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba84e:	68ea      	ldr	r2, [r5, #12]
   ba850:	493f      	ldr	r1, [pc, #252]	; (ba950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba852:	4620      	mov	r0, r4
   ba854:	f7ff fa60 	bl	b9d18 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba858:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba85a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba85c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba860:	68db      	ldr	r3, [r3, #12]
   ba862:	bf14      	ite	ne
   ba864:	493b      	ldrne	r1, [pc, #236]	; (ba954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba866:	493c      	ldreq	r1, [pc, #240]	; (ba958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba868:	2202      	movs	r2, #2
            write(": ", 2);
   ba86a:	4620      	mov	r0, r4
   ba86c:	4798      	blx	r3
    if (attr.has_function) {
   ba86e:	792b      	ldrb	r3, [r5, #4]
   ba870:	0758      	lsls	r0, r3, #29
   ba872:	d51d      	bpl.n	ba8b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba874:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba876:	460b      	mov	r3, r1
   ba878:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba87a:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba87e:	b160      	cbz	r0, ba89a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba880:	2820      	cmp	r0, #32
   ba882:	d108      	bne.n	ba896 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba884:	4619      	mov	r1, r3
   ba886:	e7f7      	b.n	ba878 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba888:	4834      	ldr	r0, [pc, #208]	; (ba95c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba88a:	f000 f966 	bl	bab5a <_ZN5spark12NetworkClass9listeningEv>
   ba88e:	2800      	cmp	r0, #0
   ba890:	d0ad      	beq.n	ba7ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba896:	2828      	cmp	r0, #40	; 0x28
   ba898:	d1ee      	bne.n	ba878 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba89a:	6823      	ldr	r3, [r4, #0]
   ba89c:	1a52      	subs	r2, r2, r1
   ba89e:	68db      	ldr	r3, [r3, #12]
   ba8a0:	4620      	mov	r0, r4
   ba8a2:	4798      	blx	r3
        write("(): ", 4);
   ba8a4:	6823      	ldr	r3, [r4, #0]
   ba8a6:	492e      	ldr	r1, [pc, #184]	; (ba960 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba8a8:	68db      	ldr	r3, [r3, #12]
   ba8aa:	2204      	movs	r2, #4
   ba8ac:	4620      	mov	r0, r4
   ba8ae:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba8b0:	2100      	movs	r1, #0
   ba8b2:	4638      	mov	r0, r7
   ba8b4:	f7fe fabc 	bl	b8e30 <log_level_name>
   ba8b8:	4601      	mov	r1, r0
    write(s);
   ba8ba:	4620      	mov	r0, r4
   ba8bc:	f7ff fa11 	bl	b9ce2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba8c0:	6823      	ldr	r3, [r4, #0]
   ba8c2:	4925      	ldr	r1, [pc, #148]	; (ba958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba8c4:	68db      	ldr	r3, [r3, #12]
   ba8c6:	2202      	movs	r2, #2
   ba8c8:	4620      	mov	r0, r4
   ba8ca:	4798      	blx	r3
    if (msg) {
   ba8cc:	b11e      	cbz	r6, ba8d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba8ce:	4631      	mov	r1, r6
   ba8d0:	4620      	mov	r0, r4
   ba8d2:	f7ff fa06 	bl	b9ce2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba8d6:	792b      	ldrb	r3, [r5, #4]
   ba8d8:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba8dc:	d02c      	beq.n	ba938 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba8de:	6823      	ldr	r3, [r4, #0]
   ba8e0:	4920      	ldr	r1, [pc, #128]	; (ba964 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba8e2:	68db      	ldr	r3, [r3, #12]
   ba8e4:	2202      	movs	r2, #2
   ba8e6:	4620      	mov	r0, r4
   ba8e8:	4798      	blx	r3
        if (attr.has_code) {
   ba8ea:	792b      	ldrb	r3, [r5, #4]
   ba8ec:	06d9      	lsls	r1, r3, #27
   ba8ee:	d50a      	bpl.n	ba906 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba8f0:	6823      	ldr	r3, [r4, #0]
   ba8f2:	491d      	ldr	r1, [pc, #116]	; (ba968 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba8f4:	68db      	ldr	r3, [r3, #12]
   ba8f6:	2207      	movs	r2, #7
   ba8f8:	4620      	mov	r0, r4
   ba8fa:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba8fc:	69aa      	ldr	r2, [r5, #24]
   ba8fe:	491b      	ldr	r1, [pc, #108]	; (ba96c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba900:	4620      	mov	r0, r4
   ba902:	f7ff fa09 	bl	b9d18 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba906:	792b      	ldrb	r3, [r5, #4]
   ba908:	069a      	lsls	r2, r3, #26
   ba90a:	d511      	bpl.n	ba930 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba90c:	06db      	lsls	r3, r3, #27
   ba90e:	d505      	bpl.n	ba91c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba910:	6823      	ldr	r3, [r4, #0]
   ba912:	4910      	ldr	r1, [pc, #64]	; (ba954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba914:	68db      	ldr	r3, [r3, #12]
   ba916:	2202      	movs	r2, #2
   ba918:	4620      	mov	r0, r4
   ba91a:	4798      	blx	r3
            write("details = ", 10);
   ba91c:	6823      	ldr	r3, [r4, #0]
   ba91e:	4914      	ldr	r1, [pc, #80]	; (ba970 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba920:	68db      	ldr	r3, [r3, #12]
   ba922:	4620      	mov	r0, r4
   ba924:	220a      	movs	r2, #10
   ba926:	4798      	blx	r3
            write(attr.details);
   ba928:	69e9      	ldr	r1, [r5, #28]
   ba92a:	4620      	mov	r0, r4
   ba92c:	f7ff f9d9 	bl	b9ce2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba930:	215d      	movs	r1, #93	; 0x5d
   ba932:	4620      	mov	r0, r4
   ba934:	f7ff f9e4 	bl	b9d00 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba938:	6823      	ldr	r3, [r4, #0]
   ba93a:	490e      	ldr	r1, [pc, #56]	; (ba974 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba93c:	68db      	ldr	r3, [r3, #12]
   ba93e:	4620      	mov	r0, r4
   ba940:	2202      	movs	r2, #2
}
   ba942:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba946:	4718      	bx	r3
   ba948:	000bf19f 	.word	0x000bf19f
   ba94c:	000bf1a6 	.word	0x000bf1a6
   ba950:	000be0b7 	.word	0x000be0b7
   ba954:	000bf1a9 	.word	0x000bf1a9
   ba958:	000bf1ae 	.word	0x000bf1ae
   ba95c:	2003e680 	.word	0x2003e680
   ba960:	000bf1ac 	.word	0x000bf1ac
   ba964:	000bf1b1 	.word	0x000bf1b1
   ba968:	000bf1b4 	.word	0x000bf1b4
   ba96c:	000bea6c 	.word	0x000bea6c
   ba970:	000bf1bc 	.word	0x000bf1bc
   ba974:	000bf1c7 	.word	0x000bf1c7

000ba978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba97c:	b085      	sub	sp, #20
    return stream_;
   ba97e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba982:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba984:	4605      	mov	r5, r0
   ba986:	460f      	mov	r7, r1
   ba988:	4690      	mov	r8, r2
   ba98a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba98c:	f001 f850 	bl	bba30 <_Z16_fetch_usbserialv>
   ba990:	4581      	cmp	r9, r0
   ba992:	d105      	bne.n	ba9a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba994:	4849      	ldr	r0, [pc, #292]	; (baabc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba996:	f000 f8e0 	bl	bab5a <_ZN5spark12NetworkClass9listeningEv>
   ba99a:	2800      	cmp	r0, #0
   ba99c:	f040 808a 	bne.w	baab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba9a0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba9a2:	4a47      	ldr	r2, [pc, #284]	; (baac0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba9a4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba9a6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba9aa:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba9ac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba9ae:	f88d 9008 	strb.w	r9, [sp, #8]
   ba9b2:	f7ff f850 	bl	b9a56 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba9b6:	4649      	mov	r1, r9
   ba9b8:	4640      	mov	r0, r8
   ba9ba:	f7fe fa39 	bl	b8e30 <log_level_name>
    json.name("l", 1).value(s);
   ba9be:	4941      	ldr	r1, [pc, #260]	; (baac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba9c0:	4680      	mov	r8, r0
   ba9c2:	2201      	movs	r2, #1
   ba9c4:	a801      	add	r0, sp, #4
   ba9c6:	f7ff f8d5 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9ca:	4641      	mov	r1, r8
   ba9cc:	f7ff f97b 	bl	b9cc6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba9d0:	b13f      	cbz	r7, ba9e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba9d2:	493d      	ldr	r1, [pc, #244]	; (baac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba9d4:	2201      	movs	r2, #1
   ba9d6:	a801      	add	r0, sp, #4
   ba9d8:	f7ff f8cc 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9dc:	4639      	mov	r1, r7
   ba9de:	f7ff f972 	bl	b9cc6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba9e2:	b13e      	cbz	r6, ba9f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba9e4:	4939      	ldr	r1, [pc, #228]	; (baacc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba9e6:	2201      	movs	r2, #1
   ba9e8:	a801      	add	r0, sp, #4
   ba9ea:	f7ff f8c3 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9ee:	4631      	mov	r1, r6
   ba9f0:	f7ff f969 	bl	b9cc6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba9f4:	7923      	ldrb	r3, [r4, #4]
   ba9f6:	07df      	lsls	r7, r3, #31
   ba9f8:	d50e      	bpl.n	baa18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba9fa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba9fc:	212f      	movs	r1, #47	; 0x2f
   ba9fe:	4630      	mov	r0, r6
   baa00:	f003 f902 	bl	bdc08 <strrchr>
    if (s1) {
   baa04:	b100      	cbz	r0, baa08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   baa06:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   baa08:	4931      	ldr	r1, [pc, #196]	; (baad0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   baa0a:	2201      	movs	r2, #1
   baa0c:	a801      	add	r0, sp, #4
   baa0e:	f7ff f8b1 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   baa12:	4631      	mov	r1, r6
   baa14:	f7ff f957 	bl	b9cc6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   baa18:	7923      	ldrb	r3, [r4, #4]
   baa1a:	079e      	lsls	r6, r3, #30
   baa1c:	d507      	bpl.n	baa2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   baa1e:	492d      	ldr	r1, [pc, #180]	; (baad4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   baa20:	2202      	movs	r2, #2
   baa22:	a801      	add	r0, sp, #4
   baa24:	f7ff f8a6 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   baa28:	68e1      	ldr	r1, [r4, #12]
   baa2a:	f7ff f821 	bl	b9a70 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   baa2e:	7923      	ldrb	r3, [r4, #4]
   baa30:	0758      	lsls	r0, r3, #29
   baa32:	d514      	bpl.n	baa5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   baa34:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   baa36:	4633      	mov	r3, r6
   baa38:	461f      	mov	r7, r3
    for (; *s; ++s) {
   baa3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   baa3e:	b12a      	cbz	r2, baa4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   baa40:	2a20      	cmp	r2, #32
   baa42:	d101      	bne.n	baa48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   baa44:	461e      	mov	r6, r3
   baa46:	e7f7      	b.n	baa38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   baa48:	2a28      	cmp	r2, #40	; 0x28
   baa4a:	d1f5      	bne.n	baa38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   baa4c:	4922      	ldr	r1, [pc, #136]	; (baad8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   baa4e:	2202      	movs	r2, #2
   baa50:	a801      	add	r0, sp, #4
   baa52:	f7ff f88f 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   baa56:	1bba      	subs	r2, r7, r6
   baa58:	4631      	mov	r1, r6
   baa5a:	f7ff f89b 	bl	b9b94 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   baa5e:	7923      	ldrb	r3, [r4, #4]
   baa60:	0719      	lsls	r1, r3, #28
   baa62:	d507      	bpl.n	baa74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   baa64:	491d      	ldr	r1, [pc, #116]	; (baadc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   baa66:	2201      	movs	r2, #1
   baa68:	a801      	add	r0, sp, #4
   baa6a:	f7ff f883 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   baa6e:	6961      	ldr	r1, [r4, #20]
   baa70:	f7ff f810 	bl	b9a94 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   baa74:	7923      	ldrb	r3, [r4, #4]
   baa76:	06da      	lsls	r2, r3, #27
   baa78:	d508      	bpl.n	baa8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   baa7a:	2204      	movs	r2, #4
   baa7c:	4918      	ldr	r1, [pc, #96]	; (baae0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   baa7e:	eb0d 0002 	add.w	r0, sp, r2
   baa82:	f7ff f877 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   baa86:	69a1      	ldr	r1, [r4, #24]
   baa88:	f7fe fff2 	bl	b9a70 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   baa8c:	7923      	ldrb	r3, [r4, #4]
   baa8e:	069b      	lsls	r3, r3, #26
   baa90:	d507      	bpl.n	baaa2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   baa92:	4914      	ldr	r1, [pc, #80]	; (baae4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   baa94:	2206      	movs	r2, #6
   baa96:	a801      	add	r0, sp, #4
   baa98:	f7ff f86c 	bl	b9b74 <_ZN5spark10JSONWriter4nameEPKcj>
   baa9c:	69e1      	ldr	r1, [r4, #28]
   baa9e:	f7ff f912 	bl	b9cc6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   baaa2:	a801      	add	r0, sp, #4
   baaa4:	f7fe ffc1 	bl	b9a2a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   baaa8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   baaaa:	490f      	ldr	r1, [pc, #60]	; (baae8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   baaac:	6803      	ldr	r3, [r0, #0]
   baaae:	2202      	movs	r2, #2
   baab0:	68db      	ldr	r3, [r3, #12]
   baab2:	4798      	blx	r3
}
   baab4:	b005      	add	sp, #20
   baab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   baaba:	bf00      	nop
   baabc:	2003e680 	.word	0x2003e680
   baac0:	000bf1e4 	.word	0x000bf1e4
   baac4:	000bf17c 	.word	0x000bf17c
   baac8:	000bf1ca 	.word	0x000bf1ca
   baacc:	000bf498 	.word	0x000bf498
   baad0:	000be5a1 	.word	0x000be5a1
   baad4:	000bf1cc 	.word	0x000bf1cc
   baad8:	000bf1cf 	.word	0x000bf1cf
   baadc:	000bea07 	.word	0x000bea07
   baae0:	000be715 	.word	0x000be715
   baae4:	000bf1d2 	.word	0x000bf1d2
   baae8:	000bf1c7 	.word	0x000bf1c7

000baaec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   baaec:	2300      	movs	r3, #0
   baaee:	6840      	ldr	r0, [r0, #4]
   baaf0:	461a      	mov	r2, r3
   baaf2:	f7fe ba6b 	b.w	b8fcc <network_connect>

000baaf6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   baaf6:	6840      	ldr	r0, [r0, #4]
   baaf8:	2200      	movs	r2, #0
   baafa:	2102      	movs	r1, #2
   baafc:	f7fe ba76 	b.w	b8fec <network_disconnect>

000bab00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bab00:	2200      	movs	r2, #0
   bab02:	6840      	ldr	r0, [r0, #4]
   bab04:	4611      	mov	r1, r2
   bab06:	f7fe ba69 	b.w	b8fdc <network_connecting>

000bab0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bab0a:	2200      	movs	r2, #0
   bab0c:	6840      	ldr	r0, [r0, #4]
   bab0e:	4611      	mov	r1, r2
   bab10:	f7fe ba74 	b.w	b8ffc <network_ready>

000bab14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bab14:	2300      	movs	r3, #0
   bab16:	6840      	ldr	r0, [r0, #4]
   bab18:	461a      	mov	r2, r3
   bab1a:	4619      	mov	r1, r3
   bab1c:	f7fe ba76 	b.w	b900c <network_on>

000bab20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bab20:	2300      	movs	r3, #0
   bab22:	6840      	ldr	r0, [r0, #4]
   bab24:	461a      	mov	r2, r3
   bab26:	4619      	mov	r1, r3
   bab28:	f7fe ba78 	b.w	b901c <network_off>

000bab2c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bab2c:	6840      	ldr	r0, [r0, #4]
   bab2e:	2100      	movs	r1, #0
   bab30:	f7fe ba9c 	b.w	b906c <network_is_on>

000bab34 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bab34:	6840      	ldr	r0, [r0, #4]
   bab36:	2100      	movs	r1, #0
   bab38:	f7fe baa0 	b.w	b907c <network_is_off>

000bab3c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bab3c:	6840      	ldr	r0, [r0, #4]
   bab3e:	2200      	movs	r2, #0
   bab40:	f081 0101 	eor.w	r1, r1, #1
   bab44:	f7fe ba72 	b.w	b902c <network_listen>

000bab48 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bab48:	6840      	ldr	r0, [r0, #4]
   bab4a:	2200      	movs	r2, #0
   bab4c:	f7fe ba7e 	b.w	b904c <network_set_listen_timeout>

000bab50 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bab50:	2200      	movs	r2, #0
   bab52:	6840      	ldr	r0, [r0, #4]
   bab54:	4611      	mov	r1, r2
   bab56:	f7fe ba81 	b.w	b905c <network_get_listen_timeout>

000bab5a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bab5a:	2200      	movs	r2, #0
   bab5c:	6840      	ldr	r0, [r0, #4]
   bab5e:	4611      	mov	r1, r2
   bab60:	f7fe ba6c 	b.w	b903c <network_listening>

000bab64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bab64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bab68:	b095      	sub	sp, #84	; 0x54
   bab6a:	4614      	mov	r4, r2
   bab6c:	460d      	mov	r5, r1
   bab6e:	4607      	mov	r7, r0
    IPAddress addr;
   bab70:	f7fe fe0a 	bl	b9788 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bab74:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bab76:	221c      	movs	r2, #28
   bab78:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bab7a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bab7c:	f002 ff78 	bl	bda70 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bab80:	2340      	movs	r3, #64	; 0x40
   bab82:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bab84:	4620      	mov	r0, r4
   bab86:	466b      	mov	r3, sp
   bab88:	aa0c      	add	r2, sp, #48	; 0x30
   bab8a:	2100      	movs	r1, #0
   bab8c:	f7fe f840 	bl	b8c10 <netdb_getaddrinfo>
    if (!r) {
   bab90:	4604      	mov	r4, r0
   bab92:	2800      	cmp	r0, #0
   bab94:	d14b      	bne.n	bac2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bab96:	4602      	mov	r2, r0
   bab98:	2101      	movs	r1, #1
   bab9a:	6868      	ldr	r0, [r5, #4]
   bab9c:	f7fe fa2e 	bl	b8ffc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baba0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   baba2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baba4:	4622      	mov	r2, r4
   baba6:	6868      	ldr	r0, [r5, #4]
   baba8:	f7fe fa28 	bl	b8ffc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   babac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   babae:	4681      	mov	r9, r0
        bool ok = false;
   babb0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   babb2:	2e00      	cmp	r6, #0
   babb4:	d03b      	beq.n	bac2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   babb6:	2900      	cmp	r1, #0
   babb8:	d139      	bne.n	bac2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   babba:	6873      	ldr	r3, [r6, #4]
   babbc:	2b02      	cmp	r3, #2
   babbe:	d003      	beq.n	babc8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   babc0:	2b0a      	cmp	r3, #10
   babc2:	d011      	beq.n	babe8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   babc4:	69f6      	ldr	r6, [r6, #28]
   babc6:	e7f4      	b.n	babb2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   babc8:	f1b8 0f00 	cmp.w	r8, #0
   babcc:	d0fa      	beq.n	babc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   babce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   babd0:	a806      	add	r0, sp, #24
   babd2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   babd4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   babd6:	f7fe fe05 	bl	b97e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   babda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   babdc:	1d3c      	adds	r4, r7, #4
   babde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   babe0:	682b      	ldr	r3, [r5, #0]
   babe2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   babe4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   babe6:	e7ed      	b.n	babc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   babe8:	f1b9 0f00 	cmp.w	r9, #0
   babec:	d0ea      	beq.n	babc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   babee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   babf0:	2210      	movs	r2, #16
   babf2:	a801      	add	r0, sp, #4
   babf4:	f002 ff3c 	bl	bda70 <memset>
                    a.v = 6;
   babf8:	2306      	movs	r3, #6
   babfa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   babfe:	ad01      	add	r5, sp, #4
   bac00:	f104 0308 	add.w	r3, r4, #8
   bac04:	3418      	adds	r4, #24
   bac06:	6818      	ldr	r0, [r3, #0]
   bac08:	6859      	ldr	r1, [r3, #4]
   bac0a:	462a      	mov	r2, r5
   bac0c:	c203      	stmia	r2!, {r0, r1}
   bac0e:	3308      	adds	r3, #8
   bac10:	42a3      	cmp	r3, r4
   bac12:	4615      	mov	r5, r2
   bac14:	d1f7      	bne.n	bac06 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bac16:	a901      	add	r1, sp, #4
   bac18:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bac1a:	ad07      	add	r5, sp, #28
   bac1c:	f7fe fdc2 	bl	b97a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bac20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bac22:	1d3c      	adds	r4, r7, #4
   bac24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bac26:	682b      	ldr	r3, [r5, #0]
   bac28:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bac2a:	4649      	mov	r1, r9
   bac2c:	e7ca      	b.n	babc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bac2e:	9800      	ldr	r0, [sp, #0]
   bac30:	f7fd ffe6 	bl	b8c00 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bac34:	4638      	mov	r0, r7
   bac36:	b015      	add	sp, #84	; 0x54
   bac38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bac3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bac3c:	4b02      	ldr	r3, [pc, #8]	; (bac48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bac3e:	4a03      	ldr	r2, [pc, #12]	; (bac4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bac40:	601a      	str	r2, [r3, #0]
   bac42:	2200      	movs	r2, #0
   bac44:	605a      	str	r2, [r3, #4]

} // spark
   bac46:	4770      	bx	lr
   bac48:	2003e680 	.word	0x2003e680
   bac4c:	000bf25c 	.word	0x000bf25c

000bac50 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bac50:	b508      	push	{r3, lr}
            return &Wire1;
   bac52:	f001 f89b 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bac56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bac5a:	f7fe bd1d 	b.w	b9698 <_ZN7TwoWire4lockEv>

000bac5e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bac5e:	b510      	push	{r4, lr}
   bac60:	4604      	mov	r4, r0
    lock_(_lock)
   bac62:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bac64:	b109      	cbz	r1, bac6a <_ZN4PMICC1Eb+0xc>
        lock();
   bac66:	f7ff fff3 	bl	bac50 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bac6a:	4620      	mov	r0, r4
   bac6c:	bd10      	pop	{r4, pc}

000bac6e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bac6e:	b508      	push	{r3, lr}
            return &Wire1;
   bac70:	f001 f88c 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bac74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bac78:	f7fe bd17 	b.w	b96aa <_ZN7TwoWire6unlockEv>

000bac7c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bac7c:	b510      	push	{r4, lr}
    if (lock_) {
   bac7e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bac80:	4604      	mov	r4, r0
    if (lock_) {
   bac82:	b10b      	cbz	r3, bac88 <_ZN4PMICD1Ev+0xc>
        unlock();
   bac84:	f7ff fff3 	bl	bac6e <_ZN4PMIC6unlockEv>
}
   bac88:	4620      	mov	r0, r4
   bac8a:	bd10      	pop	{r4, pc}

000bac8c <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bac8c:	b510      	push	{r4, lr}
   bac8e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bac90:	6800      	ldr	r0, [r0, #0]
   bac92:	f7ff ffec 	bl	bac6e <_ZN4PMIC6unlockEv>
   bac96:	4620      	mov	r0, r4
   bac98:	bd10      	pop	{r4, pc}

000bac9a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bac9a:	b530      	push	{r4, r5, lr}
   bac9c:	b087      	sub	sp, #28
   bac9e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   baca0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   baca2:	f7ff ffd5 	bl	bac50 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   baca6:	226b      	movs	r2, #107	; 0x6b
   baca8:	2300      	movs	r3, #0
   bacaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bacae:	2401      	movs	r4, #1
   bacb0:	230a      	movs	r3, #10
   bacb2:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bacb6:	f001 f869 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bacba:	a902      	add	r1, sp, #8
   bacbc:	f7fe fcd0 	bl	b9660 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bacc0:	f001 f864 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bacc4:	6803      	ldr	r3, [r0, #0]
   bacc6:	4629      	mov	r1, r5
   bacc8:	689b      	ldr	r3, [r3, #8]
   bacca:	4798      	blx	r3
            return &Wire1;
   baccc:	f001 f85e 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bacd0:	4621      	mov	r1, r4
   bacd2:	f7fe fcdd 	bl	b9690 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bacd6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bacd8:	f001 f858 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bacdc:	a902      	add	r1, sp, #8
   bacde:	f7fe fc8f 	bl	b9600 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bace2:	f001 f853 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bace6:	6803      	ldr	r3, [r0, #0]
   bace8:	695b      	ldr	r3, [r3, #20]
   bacea:	4798      	blx	r3
   bacec:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bacee:	a801      	add	r0, sp, #4
   bacf0:	f7ff ffcc 	bl	bac8c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bacf4:	b2e0      	uxtb	r0, r4
   bacf6:	b007      	add	sp, #28
   bacf8:	bd30      	pop	{r4, r5, pc}

000bacfa <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bacfa:	b570      	push	{r4, r5, r6, lr}
   bacfc:	b086      	sub	sp, #24
   bacfe:	460d      	mov	r5, r1
   bad00:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bad02:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bad04:	f7ff ffa4 	bl	bac50 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bad08:	226b      	movs	r2, #107	; 0x6b
   bad0a:	2300      	movs	r3, #0
   bad0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bad10:	2601      	movs	r6, #1
   bad12:	230a      	movs	r3, #10
   bad14:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bad18:	f001 f838 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bad1c:	a902      	add	r1, sp, #8
   bad1e:	f7fe fc9f 	bl	b9660 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bad22:	f001 f833 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bad26:	6803      	ldr	r3, [r0, #0]
   bad28:	4629      	mov	r1, r5
   bad2a:	689b      	ldr	r3, [r3, #8]
   bad2c:	4798      	blx	r3
            return &Wire1;
   bad2e:	f001 f82d 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bad32:	6803      	ldr	r3, [r0, #0]
   bad34:	4621      	mov	r1, r4
   bad36:	689b      	ldr	r3, [r3, #8]
   bad38:	4798      	blx	r3
            return &Wire1;
   bad3a:	f001 f827 	bl	bbd8c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bad3e:	4631      	mov	r1, r6
   bad40:	f7fe fca6 	bl	b9690 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bad44:	a801      	add	r0, sp, #4
   bad46:	f7ff ffa1 	bl	bac8c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bad4a:	b006      	add	sp, #24
   bad4c:	bd70      	pop	{r4, r5, r6, pc}

000bad4e <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bad4e:	b513      	push	{r0, r1, r4, lr}
   bad50:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bad52:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bad54:	f7ff ff7c 	bl	bac50 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bad58:	2101      	movs	r1, #1
   bad5a:	4620      	mov	r0, r4
   bad5c:	f7ff ff9d 	bl	bac9a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bad60:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bad64:	2b10      	cmp	r3, #16
   bad66:	d007      	beq.n	bad78 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bad68:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bad6c:	f042 0210 	orr.w	r2, r2, #16
   bad70:	2101      	movs	r1, #1
   bad72:	4620      	mov	r0, r4
   bad74:	f7ff ffc1 	bl	bacfa <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bad78:	a801      	add	r0, sp, #4
   bad7a:	f7ff ff87 	bl	bac8c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bad7e:	2001      	movs	r0, #1
   bad80:	b002      	add	sp, #8
   bad82:	bd10      	pop	{r4, pc}

000bad84 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bad84:	b513      	push	{r0, r1, r4, lr}
   bad86:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bad88:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bad8a:	f7ff ff61 	bl	bac50 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bad8e:	2101      	movs	r1, #1
   bad90:	4620      	mov	r0, r4
   bad92:	f7ff ff82 	bl	bac9a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bad96:	f010 0f30 	tst.w	r0, #48	; 0x30
   bad9a:	d005      	beq.n	bada8 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bad9c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bada0:	2101      	movs	r1, #1
   bada2:	4620      	mov	r0, r4
   bada4:	f7ff ffa9 	bl	bacfa <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bada8:	a801      	add	r0, sp, #4
   badaa:	f7ff ff6f 	bl	bac8c <_ZNSt10lock_guardI4PMICED1Ev>
}
   badae:	2001      	movs	r0, #1
   badb0:	b002      	add	sp, #8
   badb2:	bd10      	pop	{r4, pc}

000badb4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   badb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   badb6:	4606      	mov	r6, r0
   badb8:	460d      	mov	r5, r1
  size_t n = 0;
   badba:	188f      	adds	r7, r1, r2
   badbc:	2400      	movs	r4, #0
  while (size--) {
   badbe:	42bd      	cmp	r5, r7
   badc0:	d00c      	beq.n	baddc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   badc2:	6833      	ldr	r3, [r6, #0]
   badc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   badc8:	689b      	ldr	r3, [r3, #8]
   badca:	4630      	mov	r0, r6
   badcc:	4798      	blx	r3
     if (chunk>=0)
   badce:	1e03      	subs	r3, r0, #0
   badd0:	db01      	blt.n	badd6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   badd2:	441c      	add	r4, r3
  while (size--) {
   badd4:	e7f3      	b.n	badbe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   badd6:	2c00      	cmp	r4, #0
   badd8:	bf08      	it	eq
   badda:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   baddc:	4620      	mov	r0, r4
   badde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bade0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bade0:	b513      	push	{r0, r1, r4, lr}
   bade2:	4604      	mov	r4, r0
    }
   bade4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bade6:	b159      	cbz	r1, bae00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bade8:	9101      	str	r1, [sp, #4]
   badea:	f002 fede 	bl	bdbaa <strlen>
   badee:	6823      	ldr	r3, [r4, #0]
   badf0:	9901      	ldr	r1, [sp, #4]
   badf2:	68db      	ldr	r3, [r3, #12]
   badf4:	4602      	mov	r2, r0
   badf6:	4620      	mov	r0, r4
    }
   badf8:	b002      	add	sp, #8
   badfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   badfe:	4718      	bx	r3
    }
   bae00:	b002      	add	sp, #8
   bae02:	bd10      	pop	{r4, pc}

000bae04 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bae04:	b508      	push	{r3, lr}
  return write(str);
   bae06:	f7ff ffeb 	bl	bade0 <_ZN5Print5writeEPKc>
}
   bae0a:	bd08      	pop	{r3, pc}

000bae0c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bae0c:	6803      	ldr	r3, [r0, #0]
   bae0e:	689b      	ldr	r3, [r3, #8]
   bae10:	4718      	bx	r3

000bae12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bae12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bae14:	210d      	movs	r1, #13
{
   bae16:	4605      	mov	r5, r0
  size_t n = print('\r');
   bae18:	f7ff fff8 	bl	bae0c <_ZN5Print5printEc>
  n += print('\n');
   bae1c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bae1e:	4604      	mov	r4, r0
  n += print('\n');
   bae20:	4628      	mov	r0, r5
   bae22:	f7ff fff3 	bl	bae0c <_ZN5Print5printEc>
  return n;
}
   bae26:	4420      	add	r0, r4
   bae28:	bd38      	pop	{r3, r4, r5, pc}

000bae2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bae2a:	b530      	push	{r4, r5, lr}
   bae2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bae2e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bae30:	2a01      	cmp	r2, #1
  *str = '\0';
   bae32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bae36:	bf98      	it	ls
   bae38:	220a      	movls	r2, #10
   bae3a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bae3c:	460d      	mov	r5, r1
   bae3e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bae42:	fb01 5312 	mls	r3, r1, r2, r5
   bae46:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bae4a:	2b09      	cmp	r3, #9
   bae4c:	bf94      	ite	ls
   bae4e:	3330      	addls	r3, #48	; 0x30
   bae50:	3337      	addhi	r3, #55	; 0x37
   bae52:	b2db      	uxtb	r3, r3
  } while(n);
   bae54:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bae56:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bae5a:	d9ef      	bls.n	bae3c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bae5c:	4621      	mov	r1, r4
   bae5e:	f7ff ffbf 	bl	bade0 <_ZN5Print5writeEPKc>
}
   bae62:	b00b      	add	sp, #44	; 0x2c
   bae64:	bd30      	pop	{r4, r5, pc}
	...

000bae68 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bae68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bae6c:	ec55 4b10 	vmov	r4, r5, d0
   bae70:	4606      	mov	r6, r0
   bae72:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bae74:	ee10 2a10 	vmov	r2, s0
   bae78:	ee10 0a10 	vmov	r0, s0
   bae7c:	462b      	mov	r3, r5
   bae7e:	4629      	mov	r1, r5
   bae80:	f002 fcce 	bl	bd820 <__aeabi_dcmpun>
   bae84:	b140      	cbz	r0, bae98 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bae86:	4953      	ldr	r1, [pc, #332]	; (bafd4 <_ZN5Print10printFloatEdh+0x16c>)
   bae88:	4630      	mov	r0, r6
   bae8a:	f7ff ffa9 	bl	bade0 <_ZN5Print5writeEPKc>
   bae8e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bae90:	4650      	mov	r0, sl
   bae92:	b003      	add	sp, #12
   bae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bae98:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bae9c:	4b4e      	ldr	r3, [pc, #312]	; (bafd8 <_ZN5Print10printFloatEdh+0x170>)
   bae9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baea2:	4620      	mov	r0, r4
   baea4:	4649      	mov	r1, r9
   baea6:	f002 fcbb 	bl	bd820 <__aeabi_dcmpun>
   baeaa:	b948      	cbnz	r0, baec0 <_ZN5Print10printFloatEdh+0x58>
   baeac:	4b4a      	ldr	r3, [pc, #296]	; (bafd8 <_ZN5Print10printFloatEdh+0x170>)
   baeae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baeb2:	4620      	mov	r0, r4
   baeb4:	4649      	mov	r1, r9
   baeb6:	f002 fc95 	bl	bd7e4 <__aeabi_dcmple>
   baeba:	b908      	cbnz	r0, baec0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   baebc:	4947      	ldr	r1, [pc, #284]	; (bafdc <_ZN5Print10printFloatEdh+0x174>)
   baebe:	e7e3      	b.n	bae88 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   baec0:	4b47      	ldr	r3, [pc, #284]	; (bafe0 <_ZN5Print10printFloatEdh+0x178>)
   baec2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   baec6:	4620      	mov	r0, r4
   baec8:	4629      	mov	r1, r5
   baeca:	f002 fc9f 	bl	bd80c <__aeabi_dcmpgt>
   baece:	b108      	cbz	r0, baed4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   baed0:	4944      	ldr	r1, [pc, #272]	; (bafe4 <_ZN5Print10printFloatEdh+0x17c>)
   baed2:	e7d9      	b.n	bae88 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   baed4:	4b44      	ldr	r3, [pc, #272]	; (bafe8 <_ZN5Print10printFloatEdh+0x180>)
   baed6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   baeda:	4620      	mov	r0, r4
   baedc:	4629      	mov	r1, r5
   baede:	f002 fc77 	bl	bd7d0 <__aeabi_dcmplt>
   baee2:	2800      	cmp	r0, #0
   baee4:	d1f4      	bne.n	baed0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   baee6:	2200      	movs	r2, #0
   baee8:	2300      	movs	r3, #0
   baeea:	4620      	mov	r0, r4
   baeec:	4629      	mov	r1, r5
   baeee:	f002 fc6f 	bl	bd7d0 <__aeabi_dcmplt>
   baef2:	b1d0      	cbz	r0, baf2a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   baef4:	212d      	movs	r1, #45	; 0x2d
   baef6:	4630      	mov	r0, r6
   baef8:	f7ff ff88 	bl	bae0c <_ZN5Print5printEc>
     number = -number;
   baefc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   baf00:	4682      	mov	sl, r0
     number = -number;
   baf02:	461d      	mov	r5, r3
  double rounding = 0.5;
   baf04:	4939      	ldr	r1, [pc, #228]	; (bafec <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   baf06:	f8df 90ec 	ldr.w	r9, [pc, #236]	; baff4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   baf0a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   baf0e:	2000      	movs	r0, #0
    rounding /= 10.0;
   baf10:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   baf14:	fa5f f38b 	uxtb.w	r3, fp
   baf18:	429f      	cmp	r7, r3
   baf1a:	d908      	bls.n	baf2e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   baf1c:	4642      	mov	r2, r8
   baf1e:	464b      	mov	r3, r9
   baf20:	f002 fb0e 	bl	bd540 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   baf24:	f10b 0b01 	add.w	fp, fp, #1
   baf28:	e7f4      	b.n	baf14 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   baf2a:	4682      	mov	sl, r0
   baf2c:	e7ea      	b.n	baf04 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   baf2e:	4622      	mov	r2, r4
   baf30:	462b      	mov	r3, r5
   baf32:	f002 f825 	bl	bcf80 <__adddf3>
   baf36:	460d      	mov	r5, r1
   baf38:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   baf3a:	f002 fcaf 	bl	bd89c <__aeabi_d2uiz>
   baf3e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   baf40:	f002 f95a 	bl	bd1f8 <__aeabi_ui2d>
   baf44:	4602      	mov	r2, r0
   baf46:	460b      	mov	r3, r1
   baf48:	4620      	mov	r0, r4
   baf4a:	4629      	mov	r1, r5
   baf4c:	f002 f816 	bl	bcf7c <__aeabi_dsub>
        return printNumber(val, base) + t;
   baf50:	220a      	movs	r2, #10
   baf52:	4604      	mov	r4, r0
   baf54:	460d      	mov	r5, r1
   baf56:	4630      	mov	r0, r6
   baf58:	4641      	mov	r1, r8
   baf5a:	f7ff ff66 	bl	bae2a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   baf5e:	4482      	add	sl, r0
  if (digits > 0) {
   baf60:	2f00      	cmp	r7, #0
   baf62:	d095      	beq.n	bae90 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   baf64:	4922      	ldr	r1, [pc, #136]	; (baff0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   baf66:	f8df 908c 	ldr.w	r9, [pc, #140]	; baff4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   baf6a:	4630      	mov	r0, r6
   baf6c:	f7ff ff38 	bl	bade0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   baf70:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   baf74:	4482      	add	sl, r0
  while (digits-- > 0)
   baf76:	2f00      	cmp	r7, #0
   baf78:	d08a      	beq.n	bae90 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   baf7a:	4642      	mov	r2, r8
   baf7c:	464b      	mov	r3, r9
   baf7e:	4620      	mov	r0, r4
   baf80:	4629      	mov	r1, r5
   baf82:	f002 f9b3 	bl	bd2ec <__aeabi_dmul>
   baf86:	4604      	mov	r4, r0
   baf88:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   baf8a:	f002 fc5f 	bl	bd84c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   baf8e:	f1b0 0b00 	subs.w	fp, r0, #0
   baf92:	da1c      	bge.n	bafce <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   baf94:	212d      	movs	r1, #45	; 0x2d
   baf96:	4630      	mov	r0, r6
   baf98:	f7ff ff38 	bl	bae0c <_ZN5Print5printEc>
            val = -n;
   baf9c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bafa0:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bafa2:	220a      	movs	r2, #10
   bafa4:	4630      	mov	r0, r6
   bafa6:	9301      	str	r3, [sp, #4]
   bafa8:	f7ff ff3f 	bl	bae2a <_ZN5Print11printNumberEmh>
   bafac:	9b01      	ldr	r3, [sp, #4]
   bafae:	4418      	add	r0, r3
    n += print(toPrint);
   bafb0:	4482      	add	sl, r0
    remainder -= toPrint;
   bafb2:	4658      	mov	r0, fp
   bafb4:	f002 f930 	bl	bd218 <__aeabi_i2d>
   bafb8:	4602      	mov	r2, r0
   bafba:	460b      	mov	r3, r1
   bafbc:	4620      	mov	r0, r4
   bafbe:	4629      	mov	r1, r5
   bafc0:	f001 ffdc 	bl	bcf7c <__aeabi_dsub>
   bafc4:	3f01      	subs	r7, #1
   bafc6:	4604      	mov	r4, r0
   bafc8:	460d      	mov	r5, r1
   bafca:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bafcc:	e7d3      	b.n	baf76 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bafce:	4659      	mov	r1, fp
        size_t t = 0;
   bafd0:	2300      	movs	r3, #0
   bafd2:	e7e6      	b.n	bafa2 <_ZN5Print10printFloatEdh+0x13a>
   bafd4:	000bf290 	.word	0x000bf290
   bafd8:	7fefffff 	.word	0x7fefffff
   bafdc:	000bf294 	.word	0x000bf294
   bafe0:	41efffff 	.word	0x41efffff
   bafe4:	000bf298 	.word	0x000bf298
   bafe8:	c1efffff 	.word	0xc1efffff
   bafec:	3fe00000 	.word	0x3fe00000
   baff0:	000bf2d0 	.word	0x000bf2d0
   baff4:	40240000 	.word	0x40240000

000baff8 <_ZN5Print5printEfi>:
{
   baff8:	b538      	push	{r3, r4, r5, lr}
   baffa:	4604      	mov	r4, r0
   baffc:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bb000:	b2cd      	uxtb	r5, r1
   bb002:	f002 f91b 	bl	bd23c <__aeabi_f2d>
   bb006:	ec41 0b10 	vmov	d0, r0, r1
   bb00a:	4629      	mov	r1, r5
   bb00c:	4620      	mov	r0, r4
}
   bb00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bb012:	f7ff bf29 	b.w	bae68 <_ZN5Print10printFloatEdh>

000bb016 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bb016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb01a:	b086      	sub	sp, #24
   bb01c:	af00      	add	r7, sp, #0
   bb01e:	4605      	mov	r5, r0
   bb020:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bb022:	1d38      	adds	r0, r7, #4
   bb024:	2114      	movs	r1, #20
{
   bb026:	4614      	mov	r4, r2
    va_copy(args2, args);
   bb028:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bb02a:	f7fe f857 	bl	b90dc <vsnprintf>

    if (n<bufsize)
   bb02e:	2813      	cmp	r0, #19
   bb030:	d80e      	bhi.n	bb050 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bb032:	1d39      	adds	r1, r7, #4
   bb034:	4628      	mov	r0, r5
   bb036:	f7ff fed3 	bl	bade0 <_ZN5Print5writeEPKc>
   bb03a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bb03c:	b11e      	cbz	r6, bb046 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bb03e:	4628      	mov	r0, r5
   bb040:	f7ff fee7 	bl	bae12 <_ZN5Print7printlnEv>
   bb044:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bb046:	4620      	mov	r0, r4
   bb048:	3718      	adds	r7, #24
   bb04a:	46bd      	mov	sp, r7
   bb04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bb050:	f100 0308 	add.w	r3, r0, #8
   bb054:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bb058:	46e8      	mov	r8, sp
        char bigger[n+1];
   bb05a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bb05e:	4622      	mov	r2, r4
   bb060:	1c41      	adds	r1, r0, #1
   bb062:	683b      	ldr	r3, [r7, #0]
   bb064:	4668      	mov	r0, sp
   bb066:	f7fe f839 	bl	b90dc <vsnprintf>
  return write(str);
   bb06a:	4669      	mov	r1, sp
   bb06c:	4628      	mov	r0, r5
   bb06e:	f7ff feb7 	bl	bade0 <_ZN5Print5writeEPKc>
   bb072:	4604      	mov	r4, r0
   bb074:	46c5      	mov	sp, r8
   bb076:	e7e1      	b.n	bb03c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb078 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bb078:	b510      	push	{r4, lr}
  if (0 == max) {
   bb07a:	4604      	mov	r4, r0
   bb07c:	b128      	cbz	r0, bb08a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bb07e:	f002 fd2d 	bl	bdadc <rand>
   bb082:	fb90 f3f4 	sdiv	r3, r0, r4
   bb086:	fb03 0414 	mls	r4, r3, r4, r0
}
   bb08a:	4620      	mov	r0, r4
   bb08c:	bd10      	pop	{r4, pc}

000bb08e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bb08e:	4288      	cmp	r0, r1
{
   bb090:	b510      	push	{r4, lr}
   bb092:	4604      	mov	r4, r0
  if (min >= max) {
   bb094:	da03      	bge.n	bb09e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bb096:	1a08      	subs	r0, r1, r0
   bb098:	f7ff ffee 	bl	bb078 <_Z6randomi>
   bb09c:	4404      	add	r4, r0
}
   bb09e:	4620      	mov	r0, r4
   bb0a0:	bd10      	pop	{r4, pc}

000bb0a2 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bb0a2:	f002 bced 	b.w	bda80 <srand>
	...

000bb0a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bb0a8:	4b01      	ldr	r3, [pc, #4]	; (bb0b0 <_GLOBAL__sub_I_RGB+0x8>)
   bb0aa:	2200      	movs	r2, #0
   bb0ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bb0ae:	4770      	bx	lr
   bb0b0:	2003e688 	.word	0x2003e688

000bb0b4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bb0b4:	2100      	movs	r1, #0
   bb0b6:	f7fd bdf3 	b.w	b8ca0 <hal_spi_release>

000bb0ba <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bb0ba:	2100      	movs	r1, #0
   bb0bc:	f7fd bde8 	b.w	b8c90 <hal_spi_acquire>

000bb0c0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bb0c0:	b510      	push	{r4, lr}
   bb0c2:	4604      	mov	r4, r0
   bb0c4:	4608      	mov	r0, r1
{
    _spi = spi;
   bb0c6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bb0c8:	f7fd fdc2 	bl	b8c50 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bb0cc:	2300      	movs	r3, #0
   bb0ce:	6063      	str	r3, [r4, #4]
}
   bb0d0:	4620      	mov	r0, r4
   bb0d2:	bd10      	pop	{r4, pc}

000bb0d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bb0d4:	b513      	push	{r0, r1, r4, lr}
   bb0d6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bb0d8:	7800      	ldrb	r0, [r0, #0]
   bb0da:	f7ff ffee 	bl	bb0ba <_ZN8SPIClass4lockEv.isra.0>
   bb0de:	b958      	cbnz	r0, bb0f8 <_ZN8SPIClass5beginEv+0x24>
   bb0e0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bb0e2:	9001      	str	r0, [sp, #4]
   bb0e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb0e8:	f7fd fd9a 	bl	b8c20 <hal_spi_begin>
        unlock();
   bb0ec:	9801      	ldr	r0, [sp, #4]
    }
}
   bb0ee:	b002      	add	sp, #8
   bb0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb0f4:	f7ff bfde 	b.w	bb0b4 <_ZN8SPIClass6unlockEv.isra.0>
   bb0f8:	b002      	add	sp, #8
   bb0fa:	bd10      	pop	{r4, pc}

000bb0fc <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bb0fc:	b513      	push	{r0, r1, r4, lr}
   bb0fe:	4604      	mov	r4, r0
    if (!lock())
   bb100:	7800      	ldrb	r0, [r0, #0]
   bb102:	f7ff ffda 	bl	bb0ba <_ZN8SPIClass4lockEv.isra.0>
   bb106:	b948      	cbnz	r0, bb11c <_ZN8SPIClass3endEv+0x20>
   bb108:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bb10a:	9001      	str	r0, [sp, #4]
   bb10c:	f7fd fd90 	bl	b8c30 <hal_spi_end>
        unlock();
   bb110:	9801      	ldr	r0, [sp, #4]
    }
}
   bb112:	b002      	add	sp, #8
   bb114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb118:	f7ff bfcc 	b.w	bb0b4 <_ZN8SPIClass6unlockEv.isra.0>
   bb11c:	b002      	add	sp, #8
   bb11e:	bd10      	pop	{r4, pc}

000bb120 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bb120:	7800      	ldrb	r0, [r0, #0]
   bb122:	f7ff bfc7 	b.w	bb0b4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bb128 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bb128:	0840      	lsrs	r0, r0, #1
{
   bb12a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bb12c:	6018      	str	r0, [r3, #0]
   bb12e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bb130:	6818      	ldr	r0, [r3, #0]
   bb132:	4288      	cmp	r0, r1
   bb134:	b2e5      	uxtb	r5, r4
   bb136:	d906      	bls.n	bb146 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bb138:	3401      	adds	r4, #1
   bb13a:	2c08      	cmp	r4, #8
   bb13c:	d002      	beq.n	bb144 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bb13e:	0840      	lsrs	r0, r0, #1
   bb140:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bb142:	e7f5      	b.n	bb130 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bb144:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bb146:	4b02      	ldr	r3, [pc, #8]	; (bb150 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bb148:	5d5b      	ldrb	r3, [r3, r5]
   bb14a:	7013      	strb	r3, [r2, #0]
}
   bb14c:	bd30      	pop	{r4, r5, pc}
   bb14e:	bf00      	nop
   bb150:	000bf29c 	.word	0x000bf29c

000bb154 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bb154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb158:	4606      	mov	r6, r0
   bb15a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bb15c:	7800      	ldrb	r0, [r0, #0]
{
   bb15e:	460c      	mov	r4, r1
    CHECK(lock());
   bb160:	f7ff ffab 	bl	bb0ba <_ZN8SPIClass4lockEv.isra.0>
   bb164:	2800      	cmp	r0, #0
   bb166:	db1b      	blt.n	bb1a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bb168:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bb16a:	2214      	movs	r2, #20
   bb16c:	2100      	movs	r1, #0
   bb16e:	a809      	add	r0, sp, #36	; 0x24
   bb170:	f002 fc7e 	bl	bda70 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bb174:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bb176:	2200      	movs	r2, #0
   bb178:	a909      	add	r1, sp, #36	; 0x24
   bb17a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bb17c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bb180:	f7fd fd76 	bl	b8c70 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bb184:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bb188:	b113      	cbz	r3, bb190 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bb18a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bb18e:	b155      	cbz	r5, bb1a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bb190:	2700      	movs	r7, #0
   bb192:	46b9      	mov	r9, r7
   bb194:	46b8      	mov	r8, r7
   bb196:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bb198:	7923      	ldrb	r3, [r4, #4]
   bb19a:	b15d      	cbz	r5, bb1b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bb19c:	b1c3      	cbz	r3, bb1d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bb19e:	2000      	movs	r0, #0
}
   bb1a0:	b00f      	add	sp, #60	; 0x3c
   bb1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bb1a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bb1aa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bb1ae:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bb1b2:	e7f1      	b.n	bb198 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bb1b4:	2b00      	cmp	r3, #0
   bb1b6:	d135      	bne.n	bb224 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bb1b8:	68a3      	ldr	r3, [r4, #8]
   bb1ba:	4543      	cmp	r3, r8
   bb1bc:	d108      	bne.n	bb1d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bb1be:	f88d 9020 	strb.w	r9, [sp, #32]
   bb1c2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bb1c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bb1ca:	89a3      	ldrh	r3, [r4, #12]
   bb1cc:	429a      	cmp	r2, r3
   bb1ce:	d0e6      	beq.n	bb19e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bb1d0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bb1d2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bb1d4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bb1d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb1da:	ab04      	add	r3, sp, #16
   bb1dc:	f10d 020f 	add.w	r2, sp, #15
   bb1e0:	f7ff ffa2 	bl	bb128 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bb1e4:	7921      	ldrb	r1, [r4, #4]
   bb1e6:	b985      	cbnz	r5, bb20a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bb1e8:	b989      	cbnz	r1, bb20e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb1ea:	68a3      	ldr	r3, [r4, #8]
   bb1ec:	4543      	cmp	r3, r8
   bb1ee:	d30e      	bcc.n	bb20e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bb1f0:	f88d 9020 	strb.w	r9, [sp, #32]
   bb1f4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bb1f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bb1fc:	89a3      	ldrh	r3, [r4, #12]
   bb1fe:	429a      	cmp	r2, r3
   bb200:	d105      	bne.n	bb20e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bb202:	9b04      	ldr	r3, [sp, #16]
   bb204:	4543      	cmp	r3, r8
   bb206:	d102      	bne.n	bb20e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb208:	e7c9      	b.n	bb19e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bb20a:	2900      	cmp	r1, #0
   bb20c:	d1f9      	bne.n	bb202 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bb20e:	2300      	movs	r3, #0
   bb210:	9301      	str	r3, [sp, #4]
   bb212:	7b63      	ldrb	r3, [r4, #13]
   bb214:	9300      	str	r3, [sp, #0]
   bb216:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb21a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bb21c:	7830      	ldrb	r0, [r6, #0]
   bb21e:	f7fd fd2f 	bl	b8c80 <hal_spi_set_settings>
   bb222:	e7bc      	b.n	bb19e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bb224:	e9cd 5500 	strd	r5, r5, [sp]
   bb228:	462b      	mov	r3, r5
   bb22a:	462a      	mov	r2, r5
   bb22c:	2101      	movs	r1, #1
   bb22e:	e7f5      	b.n	bb21c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bb230 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bb230:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bb232:	7800      	ldrb	r0, [r0, #0]
   bb234:	f7fd fd04 	bl	b8c40 <hal_spi_transfer>
}
   bb238:	b2c0      	uxtb	r0, r0
   bb23a:	bd08      	pop	{r3, pc}

000bb23c <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bb23c:	4770      	bx	lr

000bb23e <_ZN8SPIClass15detachInterruptEv>:
   bb23e:	4770      	bx	lr

000bb240 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bb240:	b510      	push	{r4, lr}
   bb242:	4604      	mov	r4, r0
{
	free(buffer);
   bb244:	6800      	ldr	r0, [r0, #0]
   bb246:	f7fd ff29 	bl	b909c <free>
}
   bb24a:	4620      	mov	r0, r4
   bb24c:	bd10      	pop	{r4, pc}

000bb24e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bb24e:	b510      	push	{r4, lr}
   bb250:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bb252:	6800      	ldr	r0, [r0, #0]
   bb254:	b108      	cbz	r0, bb25a <_ZN6String10invalidateEv+0xc>
   bb256:	f7fd ff21 	bl	b909c <free>
	buffer = NULL;
   bb25a:	2300      	movs	r3, #0
	capacity = len = 0;
   bb25c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bb260:	6023      	str	r3, [r4, #0]
}
   bb262:	bd10      	pop	{r4, pc}

000bb264 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bb264:	b538      	push	{r3, r4, r5, lr}
   bb266:	4604      	mov	r4, r0
   bb268:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bb26a:	6800      	ldr	r0, [r0, #0]
   bb26c:	3101      	adds	r1, #1
   bb26e:	f7fd ff1d 	bl	b90ac <realloc>
	if (newbuffer) {
   bb272:	b110      	cbz	r0, bb27a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bb274:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bb278:	2001      	movs	r0, #1
	}
	return 0;
}
   bb27a:	bd38      	pop	{r3, r4, r5, pc}

000bb27c <_ZN6String7reserveEj>:
{
   bb27c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bb27e:	6803      	ldr	r3, [r0, #0]
{
   bb280:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bb282:	b123      	cbz	r3, bb28e <_ZN6String7reserveEj+0x12>
   bb284:	6843      	ldr	r3, [r0, #4]
   bb286:	428b      	cmp	r3, r1
   bb288:	d301      	bcc.n	bb28e <_ZN6String7reserveEj+0x12>
   bb28a:	2001      	movs	r0, #1
}
   bb28c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bb28e:	4620      	mov	r0, r4
   bb290:	f7ff ffe8 	bl	bb264 <_ZN6String12changeBufferEj>
   bb294:	2800      	cmp	r0, #0
   bb296:	d0f9      	beq.n	bb28c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bb298:	68a3      	ldr	r3, [r4, #8]
   bb29a:	2b00      	cmp	r3, #0
   bb29c:	d1f5      	bne.n	bb28a <_ZN6String7reserveEj+0xe>
   bb29e:	6822      	ldr	r2, [r4, #0]
   bb2a0:	7013      	strb	r3, [r2, #0]
   bb2a2:	e7f2      	b.n	bb28a <_ZN6String7reserveEj+0xe>

000bb2a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bb2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb2a6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bb2a8:	4611      	mov	r1, r2
   bb2aa:	9201      	str	r2, [sp, #4]
{
   bb2ac:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bb2ae:	f7ff ffe5 	bl	bb27c <_ZN6String7reserveEj>
   bb2b2:	9a01      	ldr	r2, [sp, #4]
   bb2b4:	b928      	cbnz	r0, bb2c2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bb2b6:	4620      	mov	r0, r4
   bb2b8:	f7ff ffc9 	bl	bb24e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bb2bc:	4620      	mov	r0, r4
   bb2be:	b003      	add	sp, #12
   bb2c0:	bd30      	pop	{r4, r5, pc}
	len = length;
   bb2c2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bb2c4:	4629      	mov	r1, r5
   bb2c6:	6820      	ldr	r0, [r4, #0]
   bb2c8:	f002 fbaa 	bl	bda20 <memcpy>
	buffer[len] = 0;
   bb2cc:	6822      	ldr	r2, [r4, #0]
   bb2ce:	68a3      	ldr	r3, [r4, #8]
   bb2d0:	2100      	movs	r1, #0
   bb2d2:	54d1      	strb	r1, [r2, r3]
	return *this;
   bb2d4:	e7f2      	b.n	bb2bc <_ZN6String4copyEPKcj+0x18>

000bb2d6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bb2d6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bb2d8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bb2da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bb2de:	4604      	mov	r4, r0
	len = 0;
   bb2e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb2e2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bb2e4:	b141      	cbz	r1, bb2f8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bb2e6:	4608      	mov	r0, r1
   bb2e8:	9101      	str	r1, [sp, #4]
   bb2ea:	f002 fc5e 	bl	bdbaa <strlen>
   bb2ee:	9901      	ldr	r1, [sp, #4]
   bb2f0:	4602      	mov	r2, r0
   bb2f2:	4620      	mov	r0, r4
   bb2f4:	f7ff ffd6 	bl	bb2a4 <_ZN6String4copyEPKcj>
}
   bb2f8:	4620      	mov	r0, r4
   bb2fa:	b002      	add	sp, #8
   bb2fc:	bd10      	pop	{r4, pc}

000bb2fe <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bb2fe:	b538      	push	{r3, r4, r5, lr}
   bb300:	4605      	mov	r5, r0
	if (buffer) {
   bb302:	6800      	ldr	r0, [r0, #0]
{
   bb304:	460c      	mov	r4, r1
	if (buffer) {
   bb306:	b168      	cbz	r0, bb324 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bb308:	686a      	ldr	r2, [r5, #4]
   bb30a:	688b      	ldr	r3, [r1, #8]
   bb30c:	429a      	cmp	r2, r3
   bb30e:	d307      	bcc.n	bb320 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bb310:	6809      	ldr	r1, [r1, #0]
   bb312:	f002 fc42 	bl	bdb9a <strcpy>
			len = rhs.len;
   bb316:	68a3      	ldr	r3, [r4, #8]
   bb318:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bb31a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bb31c:	60a3      	str	r3, [r4, #8]
}
   bb31e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bb320:	f7fd febc 	bl	b909c <free>
	buffer = rhs.buffer;
   bb324:	6823      	ldr	r3, [r4, #0]
   bb326:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bb328:	6863      	ldr	r3, [r4, #4]
   bb32a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bb32c:	68a3      	ldr	r3, [r4, #8]
   bb32e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bb330:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bb332:	e9c4 3300 	strd	r3, r3, [r4]
   bb336:	e7f1      	b.n	bb31c <_ZN6String4moveERS_+0x1e>

000bb338 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bb338:	b510      	push	{r4, lr}
	buffer = NULL;
   bb33a:	2300      	movs	r3, #0
	capacity = 0;
   bb33c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bb340:	4604      	mov	r4, r0
	len = 0;
   bb342:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb344:	7303      	strb	r3, [r0, #12]
	move(rval);
   bb346:	f7ff ffda 	bl	bb2fe <_ZN6String4moveERS_>
}
   bb34a:	4620      	mov	r0, r4
   bb34c:	bd10      	pop	{r4, pc}

000bb34e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bb34e:	4288      	cmp	r0, r1
{
   bb350:	b510      	push	{r4, lr}
   bb352:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bb354:	d005      	beq.n	bb362 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bb356:	680b      	ldr	r3, [r1, #0]
   bb358:	b12b      	cbz	r3, bb366 <_ZN6StringaSERKS_+0x18>
   bb35a:	688a      	ldr	r2, [r1, #8]
   bb35c:	4619      	mov	r1, r3
   bb35e:	f7ff ffa1 	bl	bb2a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb362:	4620      	mov	r0, r4
   bb364:	bd10      	pop	{r4, pc}
	else invalidate();
   bb366:	f7ff ff72 	bl	bb24e <_ZN6String10invalidateEv>
   bb36a:	e7fa      	b.n	bb362 <_ZN6StringaSERKS_+0x14>

000bb36c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bb36c:	b510      	push	{r4, lr}
	buffer = NULL;
   bb36e:	2300      	movs	r3, #0
String::String(const String &value)
   bb370:	4604      	mov	r4, r0
	capacity = 0;
   bb372:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bb376:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb378:	7303      	strb	r3, [r0, #12]
	*this = value;
   bb37a:	f7ff ffe8 	bl	bb34e <_ZN6StringaSERKS_>
}
   bb37e:	4620      	mov	r0, r4
   bb380:	bd10      	pop	{r4, pc}
	...

000bb384 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   bb384:	6883      	ldr	r3, [r0, #8]
   bb386:	428b      	cmp	r3, r1
   bb388:	d901      	bls.n	bb38e <_ZN6StringixEj+0xa>
   bb38a:	6800      	ldr	r0, [r0, #0]
   bb38c:	b918      	cbnz	r0, bb396 <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
   bb38e:	4803      	ldr	r0, [pc, #12]	; (bb39c <_ZN6StringixEj+0x18>)
   bb390:	2300      	movs	r3, #0
   bb392:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
   bb394:	4770      	bx	lr
	}
	return buffer[index];
   bb396:	4408      	add	r0, r1
}
   bb398:	4770      	bx	lr
   bb39a:	bf00      	nop
   bb39c:	2003e698 	.word	0x2003e698

000bb3a0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bb3a0:	b558      	push	{r3, r4, r6, lr}
   bb3a2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bb3a4:	b12a      	cbz	r2, bb3b2 <_ZNK6String8getBytesEPhjj+0x12>
   bb3a6:	b121      	cbz	r1, bb3b2 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bb3a8:	6884      	ldr	r4, [r0, #8]
   bb3aa:	42a3      	cmp	r3, r4
   bb3ac:	d302      	bcc.n	bb3b4 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bb3ae:	2300      	movs	r3, #0
   bb3b0:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bb3b2:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bb3b4:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bb3b6:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bb3b8:	6801      	ldr	r1, [r0, #0]
   bb3ba:	4294      	cmp	r4, r2
   bb3bc:	bf28      	it	cs
   bb3be:	4614      	movcs	r4, r2
   bb3c0:	4419      	add	r1, r3
   bb3c2:	4622      	mov	r2, r4
   bb3c4:	4630      	mov	r0, r6
   bb3c6:	f002 fc0c 	bl	bdbe2 <strncpy>
	buf[n] = 0;
   bb3ca:	2300      	movs	r3, #0
   bb3cc:	5533      	strb	r3, [r6, r4]
   bb3ce:	e7f0      	b.n	bb3b2 <_ZNK6String8getBytesEPhjj+0x12>

000bb3d0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bb3d0:	b40e      	push	{r1, r2, r3}
   bb3d2:	b570      	push	{r4, r5, r6, lr}
   bb3d4:	b087      	sub	sp, #28
   bb3d6:	ad0b      	add	r5, sp, #44	; 0x2c
   bb3d8:	4604      	mov	r4, r0
   bb3da:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb3de:	9201      	str	r2, [sp, #4]
   bb3e0:	462b      	mov	r3, r5
   bb3e2:	2105      	movs	r1, #5
   bb3e4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bb3e6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb3e8:	f7fd fe78 	bl	b90dc <vsnprintf>
    va_end(marker);

    String result;
   bb3ec:	490b      	ldr	r1, [pc, #44]	; (bb41c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb3ee:	4606      	mov	r6, r0
    String result;
   bb3f0:	4620      	mov	r0, r4
   bb3f2:	f7ff ff70 	bl	bb2d6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bb3f6:	4631      	mov	r1, r6
   bb3f8:	4620      	mov	r0, r4
   bb3fa:	f7ff ff3f 	bl	bb27c <_ZN6String7reserveEj>
    if (result.buffer) {
   bb3fe:	6820      	ldr	r0, [r4, #0]
   bb400:	b130      	cbz	r0, bb410 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb402:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bb404:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb406:	462b      	mov	r3, r5
   bb408:	1c71      	adds	r1, r6, #1
   bb40a:	f7fd fe67 	bl	b90dc <vsnprintf>
        va_end(marker);
        result.len = n;
   bb40e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bb410:	4620      	mov	r0, r4
   bb412:	b007      	add	sp, #28
   bb414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb418:	b003      	add	sp, #12
   bb41a:	4770      	bx	lr
   bb41c:	000bf1c9 	.word	0x000bf1c9

000bb420 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bb420:	b510      	push	{r4, lr}
   bb422:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bb424:	6800      	ldr	r0, [r0, #0]
   bb426:	b118      	cbz	r0, bb430 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bb428:	f7fd fe38 	bl	b909c <free>
            wakeupSource_ = nullptr;
   bb42c:	2300      	movs	r3, #0
   bb42e:	6023      	str	r3, [r4, #0]
        }
    }
   bb430:	bd10      	pop	{r4, pc}

000bb432 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bb432:	b538      	push	{r3, r4, r5, lr}
   bb434:	460c      	mov	r4, r1
   bb436:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb438:	f7ff fff2 	bl	bb420 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bb43c:	b154      	cbz	r4, bb454 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bb43e:	8820      	ldrh	r0, [r4, #0]
   bb440:	f7fd fe24 	bl	b908c <malloc>
   bb444:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bb446:	b128      	cbz	r0, bb454 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bb448:	8822      	ldrh	r2, [r4, #0]
   bb44a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bb44c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bb450:	f002 bae6 	b.w	bda20 <memcpy>
    }
   bb454:	bd38      	pop	{r3, r4, r5, pc}

000bb456 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb456:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bb458:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bb45c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bb45e:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bb462:	f8c0 3006 	str.w	r3, [r0, #6]
   bb466:	894b      	ldrh	r3, [r1, #10]
   bb468:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb46a:	460c      	mov	r4, r1
   bb46c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb46e:	f7ff ffd7 	bl	bb420 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bb472:	6823      	ldr	r3, [r4, #0]
   bb474:	b113      	cbz	r3, bb47c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bb476:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bb478:	2300      	movs	r3, #0
   bb47a:	6023      	str	r3, [r4, #0]
    }
   bb47c:	bd38      	pop	{r3, r4, r5, pc}

000bb47e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bb47e:	b507      	push	{r0, r1, r2, lr}
   bb480:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb482:	2100      	movs	r1, #0
{
   bb484:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb486:	9100      	str	r1, [sp, #0]
   bb488:	2001      	movs	r0, #1
   bb48a:	218c      	movs	r1, #140	; 0x8c
   bb48c:	f7fd fd5c 	bl	b8f48 <system_reset>
}
   bb490:	b003      	add	sp, #12
   bb492:	f85d fb04 	ldr.w	pc, [sp], #4

000bb496 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bb496:	4601      	mov	r1, r0
    reset(0, flags);
   bb498:	2000      	movs	r0, #0
   bb49a:	f7ff bff0 	b.w	bb47e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bb49e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bb49e:	2000      	movs	r0, #0
   bb4a0:	f7ff bff9 	b.w	bb496 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bb4a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bb4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb4a6:	4d2b      	ldr	r5, [pc, #172]	; (bb554 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bb4a8:	7d0b      	ldrb	r3, [r1, #20]
   bb4aa:	4604      	mov	r4, r0
   bb4ac:	b08b      	sub	sp, #44	; 0x2c
   bb4ae:	4608      	mov	r0, r1
   bb4b0:	1daf      	adds	r7, r5, #6
   bb4b2:	2b00      	cmp	r3, #0
   bb4b4:	d036      	beq.n	bb524 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bb4b6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bb4b8:	791b      	ldrb	r3, [r3, #4]
   bb4ba:	2b00      	cmp	r3, #0
   bb4bc:	d032      	beq.n	bb524 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bb4be:	4b26      	ldr	r3, [pc, #152]	; (bb558 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bb4c0:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bb4c2:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bb4c4:	a902      	add	r1, sp, #8
   bb4c6:	3004      	adds	r0, #4
   bb4c8:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bb4cc:	f7fd fd32 	bl	b8f34 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bb4d0:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bb4d4:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bb4d8:	b200      	sxth	r0, r0
   bb4da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bb4de:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bb4e2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bb4e4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bb4e6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb4e8:	4628      	mov	r0, r5
   bb4ea:	f7ff ffa2 	bl	bb432 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bb4ee:	a802      	add	r0, sp, #8
   bb4f0:	f7ff ff96 	bl	bb420 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bb4f4:	2300      	movs	r3, #0
   bb4f6:	6023      	str	r3, [r4, #0]
   bb4f8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bb4fa:	71a3      	strb	r3, [r4, #6]
   bb4fc:	8123      	strh	r3, [r4, #8]
   bb4fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bb502:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bb504:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bb508:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bb50a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bb50e:	f8c4 3006 	str.w	r3, [r4, #6]
   bb512:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb514:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bb516:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bb518:	4620      	mov	r0, r4
   bb51a:	f7ff ff8a 	bl	bb432 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bb51e:	4620      	mov	r0, r4
   bb520:	b00b      	add	sp, #44	; 0x2c
   bb522:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bb524:	2600      	movs	r6, #0
   bb526:	2320      	movs	r3, #32
   bb528:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bb52c:	4b0b      	ldr	r3, [pc, #44]	; (bb55c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bb52e:	9300      	str	r3, [sp, #0]
   bb530:	aa02      	add	r2, sp, #8
   bb532:	4633      	mov	r3, r6
   bb534:	490a      	ldr	r1, [pc, #40]	; (bb560 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bb536:	2032      	movs	r0, #50	; 0x32
   bb538:	f7fd fc5a 	bl	b8df0 <log_message>
            : wakeupSource_(nullptr),
   bb53c:	4b06      	ldr	r3, [pc, #24]	; (bb558 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bb53e:	4805      	ldr	r0, [pc, #20]	; (bb554 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bb540:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bb542:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bb546:	a902      	add	r1, sp, #8
   bb548:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bb54c:	f7ff ff83 	bl	bb456 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bb550:	e7cd      	b.n	bb4ee <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bb552:	bf00      	nop
   bb554:	2003e69c 	.word	0x2003e69c
   bb558:	ffff0000 	.word	0xffff0000
   bb55c:	000bf2ab 	.word	0x000bf2ab
   bb560:	000bf2a4 	.word	0x000bf2a4

000bb564 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bb564:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bb566:	2420      	movs	r4, #32
{
   bb568:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bb56a:	4622      	mov	r2, r4
   bb56c:	2100      	movs	r1, #0
   bb56e:	4668      	mov	r0, sp
   bb570:	f002 fa7e 	bl	bda70 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bb574:	2100      	movs	r1, #0
   bb576:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bb578:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bb57c:	f7fd fa40 	bl	b8a00 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bb580:	9801      	ldr	r0, [sp, #4]
   bb582:	b008      	add	sp, #32
   bb584:	bd10      	pop	{r4, pc}
	...

000bb588 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb588:	4b05      	ldr	r3, [pc, #20]	; (bb5a0 <_GLOBAL__sub_I_System+0x18>)
   bb58a:	2202      	movs	r2, #2
   bb58c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bb58e:	4b05      	ldr	r3, [pc, #20]	; (bb5a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb590:	4a05      	ldr	r2, [pc, #20]	; (bb5a8 <_GLOBAL__sub_I_System+0x20>)
   bb592:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb594:	2000      	movs	r0, #0
   bb596:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb59a:	f7fd bc75 	b.w	b8e88 <set_system_mode>
   bb59e:	bf00      	nop
   bb5a0:	2003e6a8 	.word	0x2003e6a8
   bb5a4:	2003e69c 	.word	0x2003e69c
   bb5a8:	ffff0000 	.word	0xffff0000

000bb5ac <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb5b0:	4a15      	ldr	r2, [pc, #84]	; (bb608 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb5b2:	f8df 8060 	ldr.w	r8, [pc, #96]	; bb614 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb5b6:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb5ba:	1980      	adds	r0, r0, r6
   bb5bc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb5c0:	4b12      	ldr	r3, [pc, #72]	; (bb60c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb5c2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb5c6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb5ca:	1986      	adds	r6, r0, r6
   bb5cc:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb5d0:	42bb      	cmp	r3, r7
   bb5d2:	bf08      	it	eq
   bb5d4:	42b2      	cmpeq	r2, r6
{
   bb5d6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb5d8:	d013      	beq.n	bb602 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb5da:	a903      	add	r1, sp, #12
   bb5dc:	4668      	mov	r0, sp
   bb5de:	e9cd 6700 	strd	r6, r7, [sp]
   bb5e2:	f7fd fdab 	bl	b913c <localtime_r>
	calendar_time.tm_year += 1900;
   bb5e6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb5e8:	4d09      	ldr	r5, [pc, #36]	; (bb610 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb5ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb5ee:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb5f0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb5f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb5f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb5f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb5f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb5fa:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb5fe:	6823      	ldr	r3, [r4, #0]
   bb600:	602b      	str	r3, [r5, #0]
    }
}
   bb602:	b00c      	add	sp, #48	; 0x30
   bb604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb608:	2003e6e0 	.word	0x2003e6e0
   bb60c:	2003e6d8 	.word	0x2003e6d8
   bb610:	2003e6b4 	.word	0x2003e6b4
   bb614:	2003e6e8 	.word	0x2003e6e8

000bb618 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bb618:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb61a:	2000      	movs	r0, #0
   bb61c:	f7fd fcbe 	bl	b8f9c <spark_sync_time_pending>
   bb620:	b128      	cbz	r0, bb62e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb622:	f7fd fcab 	bl	b8f7c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb626:	f080 0001 	eor.w	r0, r0, #1
   bb62a:	b2c0      	uxtb	r0, r0
    }
   bb62c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb62e:	2001      	movs	r0, #1
   bb630:	e7fc      	b.n	bb62c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000bb632 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bb632:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb634:	4602      	mov	r2, r0
   bb636:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb638:	4668      	mov	r0, sp
    struct timeval tv = {
   bb63a:	2100      	movs	r1, #0
    };
   bb63c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bb640:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb644:	f7fd fa1c 	bl	b8a80 <hal_rtc_set_time>
   bb648:	4602      	mov	r2, r0
   bb64a:	b910      	cbnz	r0, bb652 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bb64c:	4601      	mov	r1, r0
   bb64e:	f7fd fc43 	bl	b8ed8 <system_notify_time_changed>
    }
}
   bb652:	b005      	add	sp, #20
   bb654:	f85d fb04 	ldr.w	pc, [sp], #4

000bb658 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bb658:	b530      	push	{r4, r5, lr}
   bb65a:	b093      	sub	sp, #76	; 0x4c
   bb65c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bb660:	4b19      	ldr	r3, [pc, #100]	; (bb6c8 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bb662:	4604      	mov	r4, r0
    t += time_zone_cache;
   bb664:	e9d3 1000 	ldrd	r1, r0, [r3]
   bb668:	9b01      	ldr	r3, [sp, #4]
   bb66a:	1852      	adds	r2, r2, r1
   bb66c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bb670:	4816      	ldr	r0, [pc, #88]	; (bb6cc <_ZN9TimeClass7timeStrEx+0x74>)
   bb672:	e9d0 1000 	ldrd	r1, r0, [r0]
   bb676:	1852      	adds	r2, r2, r1
   bb678:	eb43 0300 	adc.w	r3, r3, r0
   bb67c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bb680:	2224      	movs	r2, #36	; 0x24
   bb682:	eb0d 0002 	add.w	r0, sp, r2
   bb686:	2100      	movs	r1, #0
   bb688:	f002 f9f2 	bl	bda70 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bb68c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bb68e:	a909      	add	r1, sp, #36	; 0x24
   bb690:	4668      	mov	r0, sp
   bb692:	f7fd fd53 	bl	b913c <localtime_r>
    char ascstr[26] = {};
   bb696:	2216      	movs	r2, #22
   bb698:	4629      	mov	r1, r5
   bb69a:	a803      	add	r0, sp, #12
   bb69c:	9502      	str	r5, [sp, #8]
   bb69e:	f002 f9e7 	bl	bda70 <memset>
    asctime_r(&calendar_time, ascstr);
   bb6a2:	a902      	add	r1, sp, #8
   bb6a4:	a809      	add	r0, sp, #36	; 0x24
   bb6a6:	f002 f969 	bl	bd97c <asctime_r>
    int len = strlen(ascstr);
   bb6aa:	a802      	add	r0, sp, #8
   bb6ac:	f002 fa7d 	bl	bdbaa <strlen>
    ascstr[len-1] = 0; // remove final newline
   bb6b0:	ab12      	add	r3, sp, #72	; 0x48
   bb6b2:	4418      	add	r0, r3
    return String(ascstr);
   bb6b4:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bb6b6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bb6ba:	4620      	mov	r0, r4
   bb6bc:	f7ff fe0b 	bl	bb2d6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb6c0:	4620      	mov	r0, r4
   bb6c2:	b013      	add	sp, #76	; 0x4c
   bb6c4:	bd30      	pop	{r4, r5, pc}
   bb6c6:	bf00      	nop
   bb6c8:	2003e6e0 	.word	0x2003e6e0
   bb6cc:	2003e6d8 	.word	0x2003e6d8

000bb6d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bb6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb6d4:	b0a4      	sub	sp, #144	; 0x90
   bb6d6:	4607      	mov	r7, r0
   bb6d8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb6da:	a814      	add	r0, sp, #80	; 0x50
{
   bb6dc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb6de:	223f      	movs	r2, #63	; 0x3f
{
   bb6e0:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb6e2:	f002 fa7e 	bl	bdbe2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb6e6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb6e8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb6ea:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb6ee:	f002 fa5c 	bl	bdbaa <strlen>
   bb6f2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bb6f4:	bb4c      	cbnz	r4, bb74a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bb6f6:	4929      	ldr	r1, [pc, #164]	; (bb79c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bb6f8:	a803      	add	r0, sp, #12
   bb6fa:	f002 fa4e 	bl	bdb9a <strcpy>
   bb6fe:	ac14      	add	r4, sp, #80	; 0x50
{
   bb700:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bb702:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bb706:	45b1      	cmp	r9, r6
   bb708:	d934      	bls.n	bb774 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bb70a:	7823      	ldrb	r3, [r4, #0]
   bb70c:	2b25      	cmp	r3, #37	; 0x25
   bb70e:	f106 0a01 	add.w	sl, r6, #1
   bb712:	d117      	bne.n	bb744 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bb714:	7863      	ldrb	r3, [r4, #1]
   bb716:	2b7a      	cmp	r3, #122	; 0x7a
   bb718:	d114      	bne.n	bb744 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bb71a:	a803      	add	r0, sp, #12
   bb71c:	f002 fa45 	bl	bdbaa <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb720:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bb722:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb724:	1830      	adds	r0, r6, r0
   bb726:	4418      	add	r0, r3
   bb728:	eba9 0206 	sub.w	r2, r9, r6
   bb72c:	1ca1      	adds	r1, r4, #2
   bb72e:	f002 f977 	bl	bda20 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb732:	462a      	mov	r2, r5
   bb734:	a903      	add	r1, sp, #12
   bb736:	4620      	mov	r0, r4
   bb738:	f002 f972 	bl	bda20 <memcpy>
            len = strlen(format_str);
   bb73c:	a814      	add	r0, sp, #80	; 0x50
   bb73e:	f002 fa34 	bl	bdbaa <strlen>
   bb742:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bb744:	3401      	adds	r4, #1
   bb746:	4656      	mov	r6, sl
   bb748:	e7db      	b.n	bb702 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bb74a:	233c      	movs	r3, #60	; 0x3c
   bb74c:	fb94 f2f3 	sdiv	r2, r4, r3
   bb750:	2a00      	cmp	r2, #0
   bb752:	bfb8      	it	lt
   bb754:	4252      	neglt	r2, r2
   bb756:	fbb2 f1f3 	udiv	r1, r2, r3
   bb75a:	fb03 2211 	mls	r2, r3, r1, r2
   bb75e:	9200      	str	r2, [sp, #0]
   bb760:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bb764:	4a0e      	ldr	r2, [pc, #56]	; (bb7a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bb766:	fb94 f3f3 	sdiv	r3, r4, r3
   bb76a:	2110      	movs	r1, #16
   bb76c:	a803      	add	r0, sp, #12
   bb76e:	f7fd fcad 	bl	b90cc <snprintf>
   bb772:	e7c4      	b.n	bb6fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bb774:	2100      	movs	r1, #0
   bb776:	222e      	movs	r2, #46	; 0x2e
   bb778:	a808      	add	r0, sp, #32
   bb77a:	9107      	str	r1, [sp, #28]
   bb77c:	f002 f978 	bl	bda70 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bb780:	4643      	mov	r3, r8
   bb782:	aa14      	add	r2, sp, #80	; 0x50
   bb784:	2132      	movs	r1, #50	; 0x32
   bb786:	a807      	add	r0, sp, #28
   bb788:	f7fd fcd0 	bl	b912c <strftime>
    return String(buf);
   bb78c:	a907      	add	r1, sp, #28
   bb78e:	4638      	mov	r0, r7
   bb790:	f7ff fda1 	bl	bb2d6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb794:	4638      	mov	r0, r7
   bb796:	b024      	add	sp, #144	; 0x90
   bb798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb79c:	000bf2d2 	.word	0x000bf2d2
   bb7a0:	000bf2d4 	.word	0x000bf2d4

000bb7a4 <_ZN9TimeClass6formatExPKc>:
{
   bb7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb7a6:	b08d      	sub	sp, #52	; 0x34
   bb7a8:	e9cd 2300 	strd	r2, r3, [sp]
   bb7ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bb7ae:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bb7b0:	b915      	cbnz	r5, bb7b8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bb7b2:	4b19      	ldr	r3, [pc, #100]	; (bb818 <_ZN9TimeClass6formatExPKc+0x74>)
   bb7b4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bb7b6:	b12d      	cbz	r5, bb7c4 <_ZN9TimeClass6formatExPKc+0x20>
   bb7b8:	4b18      	ldr	r3, [pc, #96]	; (bb81c <_ZN9TimeClass6formatExPKc+0x78>)
   bb7ba:	4628      	mov	r0, r5
   bb7bc:	6819      	ldr	r1, [r3, #0]
   bb7be:	f002 f9e2 	bl	bdb86 <strcmp>
   bb7c2:	b938      	cbnz	r0, bb7d4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bb7c4:	e9dd 2300 	ldrd	r2, r3, [sp]
   bb7c8:	4620      	mov	r0, r4
   bb7ca:	f7ff ff45 	bl	bb658 <_ZN9TimeClass7timeStrEx>
}
   bb7ce:	4620      	mov	r0, r4
   bb7d0:	b00d      	add	sp, #52	; 0x34
   bb7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bb7d4:	4e12      	ldr	r6, [pc, #72]	; (bb820 <_ZN9TimeClass6formatExPKc+0x7c>)
   bb7d6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bb7d8:	4f12      	ldr	r7, [pc, #72]	; (bb824 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bb7da:	e9d6 3200 	ldrd	r3, r2, [r6]
   bb7de:	185b      	adds	r3, r3, r1
   bb7e0:	9901      	ldr	r1, [sp, #4]
   bb7e2:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bb7e6:	e9d7 0100 	ldrd	r0, r1, [r7]
   bb7ea:	181b      	adds	r3, r3, r0
   bb7ec:	eb42 0201 	adc.w	r2, r2, r1
   bb7f0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bb7f4:	2100      	movs	r1, #0
   bb7f6:	2224      	movs	r2, #36	; 0x24
   bb7f8:	a803      	add	r0, sp, #12
   bb7fa:	f002 f939 	bl	bda70 <memset>
    localtime_r(&t, &calendar_time);
   bb7fe:	a903      	add	r1, sp, #12
   bb800:	4668      	mov	r0, sp
   bb802:	f7fd fc9b 	bl	b913c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bb806:	6832      	ldr	r2, [r6, #0]
   bb808:	683b      	ldr	r3, [r7, #0]
   bb80a:	a903      	add	r1, sp, #12
   bb80c:	4413      	add	r3, r2
   bb80e:	4620      	mov	r0, r4
   bb810:	462a      	mov	r2, r5
   bb812:	f7ff ff5d 	bl	bb6d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bb816:	e7da      	b.n	bb7ce <_ZN9TimeClass6formatExPKc+0x2a>
   bb818:	2003e6b0 	.word	0x2003e6b0
   bb81c:	2003dec8 	.word	0x2003dec8
   bb820:	2003e6e0 	.word	0x2003e6e0
   bb824:	2003e6d8 	.word	0x2003e6d8

000bb828 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bb828:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bb82a:	2000      	movs	r0, #0
   bb82c:	f7fd f910 	bl	b8a50 <hal_rtc_time_is_valid>
    if (rtcstate)
   bb830:	4604      	mov	r4, r0
   bb832:	b9a0      	cbnz	r0, bb85e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bb834:	f7fd fb20 	bl	b8e78 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bb838:	2801      	cmp	r0, #1
   bb83a:	d110      	bne.n	bb85e <_ZN9TimeClass7isValidEv+0x36>
   bb83c:	4620      	mov	r0, r4
   bb83e:	f7fd fb43 	bl	b8ec8 <system_thread_get_state>
   bb842:	b960      	cbnz	r0, bb85e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bb844:	f7ff fee8 	bl	bb618 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bb848:	b910      	cbnz	r0, bb850 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bb84a:	f7fd fb87 	bl	b8f5c <spark_process>
        while (_while() && !_condition()) {
   bb84e:	e7f9      	b.n	bb844 <_ZN9TimeClass7isValidEv+0x1c>
   bb850:	f7ff fee2 	bl	bb618 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bb854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bb858:	2000      	movs	r0, #0
   bb85a:	f7fd b8f9 	b.w	b8a50 <hal_rtc_time_is_valid>
}
   bb85e:	4620      	mov	r0, r4
   bb860:	bd10      	pop	{r4, pc}

000bb862 <_ZN9TimeClass3nowEv>:
{
   bb862:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bb864:	f7ff ffe0 	bl	bb828 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bb868:	2210      	movs	r2, #16
   bb86a:	2100      	movs	r1, #0
   bb86c:	4668      	mov	r0, sp
   bb86e:	f002 f8ff 	bl	bda70 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bb872:	2100      	movs	r1, #0
   bb874:	4668      	mov	r0, sp
   bb876:	f7fd f8fb 	bl	b8a70 <hal_rtc_get_time>
}
   bb87a:	9800      	ldr	r0, [sp, #0]
   bb87c:	b005      	add	sp, #20
   bb87e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb884 <_ZN9TimeClass4hourEv>:
{
   bb884:	b508      	push	{r3, lr}
	return hour(now());
   bb886:	f7ff ffec 	bl	bb862 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bb88a:	17c1      	asrs	r1, r0, #31
   bb88c:	f7ff fe8e 	bl	bb5ac <_ZL22Refresh_UnixTime_Cachex>
}
   bb890:	4b01      	ldr	r3, [pc, #4]	; (bb898 <_ZN9TimeClass4hourEv+0x14>)
   bb892:	6898      	ldr	r0, [r3, #8]
   bb894:	bd08      	pop	{r3, pc}
   bb896:	bf00      	nop
   bb898:	2003e6b4 	.word	0x2003e6b4

000bb89c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb89c:	4b02      	ldr	r3, [pc, #8]	; (bb8a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb89e:	681a      	ldr	r2, [r3, #0]
   bb8a0:	4b02      	ldr	r3, [pc, #8]	; (bb8ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb8a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb8a4:	4770      	bx	lr
   bb8a6:	bf00      	nop
   bb8a8:	2003dec8 	.word	0x2003dec8
   bb8ac:	2003e6b0 	.word	0x2003e6b0

000bb8b0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb8b0:	4770      	bx	lr

000bb8b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb8b2:	7441      	strb	r1, [r0, #17]
}
   bb8b4:	4770      	bx	lr

000bb8b6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb8b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb8b8:	7c00      	ldrb	r0, [r0, #16]
   bb8ba:	f7fd fa31 	bl	b8d20 <hal_usart_available_data_for_write>
}
   bb8be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb8c2:	bd08      	pop	{r3, pc}

000bb8c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb8c4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb8c6:	7c00      	ldrb	r0, [r0, #16]
   bb8c8:	f7fd fa02 	bl	b8cd0 <hal_usart_available>
}
   bb8cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb8d0:	bd08      	pop	{r3, pc}

000bb8d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb8d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb8d4:	7c00      	ldrb	r0, [r0, #16]
   bb8d6:	f7fd fa0b 	bl	b8cf0 <hal_usart_peek>
}
   bb8da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb8de:	bd08      	pop	{r3, pc}

000bb8e0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb8e0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb8e2:	7c00      	ldrb	r0, [r0, #16]
   bb8e4:	f7fd f9fc 	bl	b8ce0 <hal_usart_read>
}
   bb8e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb8ec:	bd08      	pop	{r3, pc}

000bb8ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb8ee:	7c00      	ldrb	r0, [r0, #16]
   bb8f0:	f7fd ba06 	b.w	b8d00 <hal_usart_flush>

000bb8f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb8f6:	7c45      	ldrb	r5, [r0, #17]
{
   bb8f8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb8fa:	b12d      	cbz	r5, bb908 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb8fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb8fe:	b003      	add	sp, #12
   bb900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb904:	f7fd b9dc 	b.w	b8cc0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb908:	7c00      	ldrb	r0, [r0, #16]
   bb90a:	9101      	str	r1, [sp, #4]
   bb90c:	f7fd fa08 	bl	b8d20 <hal_usart_available_data_for_write>
   bb910:	2800      	cmp	r0, #0
   bb912:	9901      	ldr	r1, [sp, #4]
   bb914:	dcf2      	bgt.n	bb8fc <_ZN11USARTSerial5writeEh+0x8>
}
   bb916:	4628      	mov	r0, r5
   bb918:	b003      	add	sp, #12
   bb91a:	bd30      	pop	{r4, r5, pc}

000bb91c <_ZN11USARTSerialD0Ev>:
   bb91c:	b510      	push	{r4, lr}
   bb91e:	2114      	movs	r1, #20
   bb920:	4604      	mov	r4, r0
   bb922:	f7f8 fbbc 	bl	b409e <_ZdlPvj>
   bb926:	4620      	mov	r0, r4
   bb928:	bd10      	pop	{r4, pc}
	...

000bb92c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb92c:	b510      	push	{r4, lr}
   bb92e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb932:	4604      	mov	r4, r0
   bb934:	4608      	mov	r0, r1
   bb936:	4611      	mov	r1, r2
   bb938:	2200      	movs	r2, #0
   bb93a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb93e:	4b04      	ldr	r3, [pc, #16]	; (bb950 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb940:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb942:	2301      	movs	r3, #1
  _serial = serial;
   bb944:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb946:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb948:	f7fd f9fa 	bl	b8d40 <hal_usart_init_ex>
}
   bb94c:	4620      	mov	r0, r4
   bb94e:	bd10      	pop	{r4, pc}
   bb950:	000bf304 	.word	0x000bf304

000bb954 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb954:	7c00      	ldrb	r0, [r0, #16]
   bb956:	2300      	movs	r3, #0
   bb958:	f7fd b9ea 	b.w	b8d30 <hal_usart_begin_config>

000bb95c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb95c:	2200      	movs	r2, #0
   bb95e:	f7ff bff9 	b.w	bb954 <_ZN11USARTSerial5beginEmm>

000bb962 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb962:	7c00      	ldrb	r0, [r0, #16]
   bb964:	f7fd b9a4 	b.w	b8cb0 <hal_usart_end>

000bb968 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb968:	7441      	strb	r1, [r0, #17]
}
   bb96a:	4770      	bx	lr

000bb96c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb96c:	4770      	bx	lr

000bb96e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb96e:	4770      	bx	lr

000bb970 <_ZN9USBSerial4readEv>:
{
   bb970:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb972:	2100      	movs	r1, #0
   bb974:	7c00      	ldrb	r0, [r0, #16]
   bb976:	f7fd fa13 	bl	b8da0 <HAL_USB_USART_Receive_Data>
}
   bb97a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb97e:	bd08      	pop	{r3, pc}

000bb980 <_ZN9USBSerial4peekEv>:
{
   bb980:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb982:	2101      	movs	r1, #1
   bb984:	7c00      	ldrb	r0, [r0, #16]
   bb986:	f7fd fa0b 	bl	b8da0 <HAL_USB_USART_Receive_Data>
}
   bb98a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb98e:	bd08      	pop	{r3, pc}

000bb990 <_ZN9USBSerial17availableForWriteEv>:
{
   bb990:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb992:	7c00      	ldrb	r0, [r0, #16]
   bb994:	f7fd f9fc 	bl	b8d90 <HAL_USB_USART_Available_Data_For_Write>
}
   bb998:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb99c:	bd08      	pop	{r3, pc}

000bb99e <_ZN9USBSerial9availableEv>:
{
   bb99e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb9a0:	7c00      	ldrb	r0, [r0, #16]
   bb9a2:	f7fd f9ed 	bl	b8d80 <HAL_USB_USART_Available_Data>
}
   bb9a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb9aa:	bd08      	pop	{r3, pc}

000bb9ac <_ZN9USBSerial5writeEh>:
{
   bb9ac:	b513      	push	{r0, r1, r4, lr}
   bb9ae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb9b0:	7c00      	ldrb	r0, [r0, #16]
{
   bb9b2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb9b4:	f7fd f9ec 	bl	b8d90 <HAL_USB_USART_Available_Data_For_Write>
   bb9b8:	2800      	cmp	r0, #0
   bb9ba:	9901      	ldr	r1, [sp, #4]
   bb9bc:	dc01      	bgt.n	bb9c2 <_ZN9USBSerial5writeEh+0x16>
   bb9be:	7c60      	ldrb	r0, [r4, #17]
   bb9c0:	b120      	cbz	r0, bb9cc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb9c2:	7c20      	ldrb	r0, [r4, #16]
   bb9c4:	f7fd f9f4 	bl	b8db0 <HAL_USB_USART_Send_Data>
   bb9c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb9cc:	b002      	add	sp, #8
   bb9ce:	bd10      	pop	{r4, pc}

000bb9d0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb9d0:	7c00      	ldrb	r0, [r0, #16]
   bb9d2:	f7fd b9f5 	b.w	b8dc0 <HAL_USB_USART_Flush_Data>

000bb9d6 <_ZN9USBSerialD0Ev>:
   bb9d6:	b510      	push	{r4, lr}
   bb9d8:	2114      	movs	r1, #20
   bb9da:	4604      	mov	r4, r0
   bb9dc:	f7f8 fb5f 	bl	b409e <_ZdlPvj>
   bb9e0:	4620      	mov	r0, r4
   bb9e2:	bd10      	pop	{r4, pc}

000bb9e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb9e4:	b510      	push	{r4, lr}
   bb9e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb9ea:	4604      	mov	r4, r0
   bb9ec:	4608      	mov	r0, r1
   bb9ee:	2100      	movs	r1, #0
   bb9f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb9f4:	4b04      	ldr	r3, [pc, #16]	; (bba08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb9f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb9f8:	2301      	movs	r3, #1
  _serial = serial;
   bb9fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb9fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb9fe:	4611      	mov	r1, r2
   bba00:	f7fd f9a6 	bl	b8d50 <HAL_USB_USART_Init>
}
   bba04:	4620      	mov	r0, r4
   bba06:	bd10      	pop	{r4, pc}
   bba08:	000bf334 	.word	0x000bf334

000bba0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bba0c:	7c00      	ldrb	r0, [r0, #16]
   bba0e:	2200      	movs	r2, #0
   bba10:	f7fd b9a6 	b.w	b8d60 <HAL_USB_USART_Begin>

000bba14 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bba14:	7c00      	ldrb	r0, [r0, #16]
   bba16:	f7fd b9ab 	b.w	b8d70 <HAL_USB_USART_End>

000bba1a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bba1a:	7c00      	ldrb	r0, [r0, #16]
   bba1c:	f7fd b9d8 	b.w	b8dd0 <HAL_USB_USART_Is_Connected>

000bba20 <_Z19acquireSerialBufferv>:
{
   bba20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bba22:	2214      	movs	r2, #20
{
   bba24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bba26:	2100      	movs	r1, #0
   bba28:	f002 f822 	bl	bda70 <memset>
}
   bba2c:	4620      	mov	r0, r4
   bba2e:	bd10      	pop	{r4, pc}

000bba30 <_Z16_fetch_usbserialv>:
{
   bba30:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bba32:	4c0f      	ldr	r4, [pc, #60]	; (bba70 <_Z16_fetch_usbserialv+0x40>)
{
   bba34:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bba36:	a803      	add	r0, sp, #12
   bba38:	f7ff fff2 	bl	bba20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bba3c:	7821      	ldrb	r1, [r4, #0]
   bba3e:	f3bf 8f5b 	dmb	ish
   bba42:	f011 0101 	ands.w	r1, r1, #1
   bba46:	d10f      	bne.n	bba68 <_Z16_fetch_usbserialv+0x38>
   bba48:	4620      	mov	r0, r4
   bba4a:	9101      	str	r1, [sp, #4]
   bba4c:	f7f8 fb36 	bl	b40bc <__cxa_guard_acquire>
   bba50:	9901      	ldr	r1, [sp, #4]
   bba52:	b148      	cbz	r0, bba68 <_Z16_fetch_usbserialv+0x38>
   bba54:	aa03      	add	r2, sp, #12
   bba56:	4807      	ldr	r0, [pc, #28]	; (bba74 <_Z16_fetch_usbserialv+0x44>)
   bba58:	f7ff ffc4 	bl	bb9e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bba5c:	4620      	mov	r0, r4
   bba5e:	f7f8 fb32 	bl	b40c6 <__cxa_guard_release>
   bba62:	4805      	ldr	r0, [pc, #20]	; (bba78 <_Z16_fetch_usbserialv+0x48>)
   bba64:	f001 ffb0 	bl	bd9c8 <atexit>
	return _usbserial;
}
   bba68:	4802      	ldr	r0, [pc, #8]	; (bba74 <_Z16_fetch_usbserialv+0x44>)
   bba6a:	b008      	add	sp, #32
   bba6c:	bd10      	pop	{r4, pc}
   bba6e:	bf00      	nop
   bba70:	2003e6f0 	.word	0x2003e6f0
   bba74:	2003e6f4 	.word	0x2003e6f4
   bba78:	000bb96d 	.word	0x000bb96d

000bba7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bba7c:	4b01      	ldr	r3, [pc, #4]	; (bba84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bba7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bba80:	4770      	bx	lr
   bba82:	bf00      	nop
   bba84:	2003ded0 	.word	0x2003ded0

000bba88 <serialEventRun>:
{
   bba88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bba8a:	4b0b      	ldr	r3, [pc, #44]	; (bbab8 <serialEventRun+0x30>)
   bba8c:	b143      	cbz	r3, bbaa0 <serialEventRun+0x18>
   bba8e:	f7ff ffcf 	bl	bba30 <_Z16_fetch_usbserialv>
   bba92:	6803      	ldr	r3, [r0, #0]
   bba94:	691b      	ldr	r3, [r3, #16]
   bba96:	4798      	blx	r3
   bba98:	2800      	cmp	r0, #0
   bba9a:	dd01      	ble.n	bbaa0 <serialEventRun+0x18>
        serialEvent();
   bba9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bbaa0:	4b06      	ldr	r3, [pc, #24]	; (bbabc <serialEventRun+0x34>)
   bbaa2:	b143      	cbz	r3, bbab6 <serialEventRun+0x2e>
   bbaa4:	f000 f9b2 	bl	bbe0c <_Z22__fetch_global_Serial1v>
   bbaa8:	6803      	ldr	r3, [r0, #0]
   bbaaa:	691b      	ldr	r3, [r3, #16]
   bbaac:	4798      	blx	r3
   bbaae:	2800      	cmp	r0, #0
   bbab0:	dd01      	ble.n	bbab6 <serialEventRun+0x2e>
        serialEvent1();
   bbab2:	f3af 8000 	nop.w
}
   bbab6:	bd08      	pop	{r3, pc}
	...

000bbac0 <_post_loop>:
{
   bbac0:	b508      	push	{r3, lr}
	serialEventRun();
   bbac2:	f7ff ffe1 	bl	bba88 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bbac6:	f7fc ffbb 	bl	b8a40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bbaca:	4b01      	ldr	r3, [pc, #4]	; (bbad0 <_post_loop+0x10>)
   bbacc:	6018      	str	r0, [r3, #0]
}
   bbace:	bd08      	pop	{r3, pc}
   bbad0:	2003e710 	.word	0x2003e710

000bbad4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbad4:	4805      	ldr	r0, [pc, #20]	; (bbaec <_Z33system_initialize_user_backup_ramv+0x18>)
   bbad6:	4a06      	ldr	r2, [pc, #24]	; (bbaf0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bbad8:	4906      	ldr	r1, [pc, #24]	; (bbaf4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bbada:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbadc:	1a12      	subs	r2, r2, r0
   bbade:	f001 ff9f 	bl	bda20 <memcpy>
    __backup_sram_signature = signature;
   bbae2:	4b05      	ldr	r3, [pc, #20]	; (bbaf8 <_Z33system_initialize_user_backup_ramv+0x24>)
   bbae4:	4a05      	ldr	r2, [pc, #20]	; (bbafc <_Z33system_initialize_user_backup_ramv+0x28>)
   bbae6:	601a      	str	r2, [r3, #0]
}
   bbae8:	bd08      	pop	{r3, pc}
   bbaea:	bf00      	nop
   bbaec:	2003f400 	.word	0x2003f400
   bbaf0:	2003f404 	.word	0x2003f404
   bbaf4:	000bf604 	.word	0x000bf604
   bbaf8:	2003f400 	.word	0x2003f400
   bbafc:	9a271c1e 	.word	0x9a271c1e

000bbb00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bbb00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbb02:	2300      	movs	r3, #0
   bbb04:	9300      	str	r3, [sp, #0]
   bbb06:	461a      	mov	r2, r3
   bbb08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbb0c:	f7fd f9fe 	bl	b8f0c <system_ctrl_set_result>
}
   bbb10:	b003      	add	sp, #12
   bbb12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbb18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bbb18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bbb1a:	8843      	ldrh	r3, [r0, #2]
   bbb1c:	2b0a      	cmp	r3, #10
   bbb1e:	d008      	beq.n	bbb32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bbb20:	2b50      	cmp	r3, #80	; 0x50
   bbb22:	d10b      	bne.n	bbb3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bbb24:	4b09      	ldr	r3, [pc, #36]	; (bbb4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bbb26:	681b      	ldr	r3, [r3, #0]
   bbb28:	b14b      	cbz	r3, bbb3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bbb2a:	b003      	add	sp, #12
   bbb2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bbb30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bbb32:	f7ff ffe5 	bl	bbb00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bbb36:	b003      	add	sp, #12
   bbb38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbb3c:	2300      	movs	r3, #0
   bbb3e:	9300      	str	r3, [sp, #0]
   bbb40:	461a      	mov	r2, r3
   bbb42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbb46:	f7fd f9e1 	bl	b8f0c <system_ctrl_set_result>
}
   bbb4a:	e7f4      	b.n	bbb36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bbb4c:	2003e70c 	.word	0x2003e70c

000bbb50 <module_user_init_hook>:
{
   bbb50:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bbb52:	4812      	ldr	r0, [pc, #72]	; (bbb9c <module_user_init_hook+0x4c>)
   bbb54:	2100      	movs	r1, #0
   bbb56:	f7fd fae1 	bl	b911c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbb5a:	4b11      	ldr	r3, [pc, #68]	; (bbba0 <module_user_init_hook+0x50>)
   bbb5c:	681a      	ldr	r2, [r3, #0]
   bbb5e:	4b11      	ldr	r3, [pc, #68]	; (bbba4 <module_user_init_hook+0x54>)
   bbb60:	429a      	cmp	r2, r3
   bbb62:	4b11      	ldr	r3, [pc, #68]	; (bbba8 <module_user_init_hook+0x58>)
   bbb64:	bf0c      	ite	eq
   bbb66:	2201      	moveq	r2, #1
   bbb68:	2200      	movne	r2, #0
   bbb6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbb6c:	d001      	beq.n	bbb72 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbb6e:	f7ff ffb1 	bl	bbad4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbb72:	f7fc ff55 	bl	b8a20 <HAL_RNG_GetRandomNumber>
   bbb76:	4604      	mov	r4, r0
    srand(seed);
   bbb78:	f001 ff82 	bl	bda80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbb7c:	4b0b      	ldr	r3, [pc, #44]	; (bbbac <module_user_init_hook+0x5c>)
   bbb7e:	b113      	cbz	r3, bbb86 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbb80:	4620      	mov	r0, r4
   bbb82:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbb86:	2100      	movs	r1, #0
   bbb88:	4808      	ldr	r0, [pc, #32]	; (bbbac <module_user_init_hook+0x5c>)
   bbb8a:	f7fd fa17 	bl	b8fbc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbb8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbb92:	4807      	ldr	r0, [pc, #28]	; (bbbb0 <module_user_init_hook+0x60>)
   bbb94:	2100      	movs	r1, #0
   bbb96:	f7fd b9af 	b.w	b8ef8 <system_ctrl_set_app_request_handler>
   bbb9a:	bf00      	nop
   bbb9c:	000bba7d 	.word	0x000bba7d
   bbba0:	2003f400 	.word	0x2003f400
   bbba4:	9a271c1e 	.word	0x9a271c1e
   bbba8:	2003e708 	.word	0x2003e708
   bbbac:	00000000 	.word	0x00000000
   bbbb0:	000bbb19 	.word	0x000bbb19

000bbbb4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bbbb4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bbbb6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bbbb8:	d902      	bls.n	bbbc0 <pinAvailable+0xc>
    return false;
   bbbba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bbbbc:	b002      	add	sp, #8
   bbbbe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bbbc0:	f1a0 030b 	sub.w	r3, r0, #11
   bbbc4:	2b02      	cmp	r3, #2
   bbbc6:	d81a      	bhi.n	bbbfe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bbbc8:	4c17      	ldr	r4, [pc, #92]	; (bbc28 <pinAvailable+0x74>)
   bbbca:	7821      	ldrb	r1, [r4, #0]
   bbbcc:	f3bf 8f5b 	dmb	ish
   bbbd0:	f011 0101 	ands.w	r1, r1, #1
   bbbd4:	d10b      	bne.n	bbbee <pinAvailable+0x3a>
   bbbd6:	4620      	mov	r0, r4
   bbbd8:	9101      	str	r1, [sp, #4]
   bbbda:	f7f8 fa6f 	bl	b40bc <__cxa_guard_acquire>
   bbbde:	9901      	ldr	r1, [sp, #4]
   bbbe0:	b128      	cbz	r0, bbbee <pinAvailable+0x3a>
   bbbe2:	4812      	ldr	r0, [pc, #72]	; (bbc2c <pinAvailable+0x78>)
   bbbe4:	f7ff fa6c 	bl	bb0c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bbbe8:	4620      	mov	r0, r4
   bbbea:	f7f8 fa6c 	bl	b40c6 <__cxa_guard_release>
   bbbee:	4b0f      	ldr	r3, [pc, #60]	; (bbc2c <pinAvailable+0x78>)
   bbbf0:	7818      	ldrb	r0, [r3, #0]
   bbbf2:	f7fd f835 	bl	b8c60 <hal_spi_is_enabled>
   bbbf6:	2800      	cmp	r0, #0
   bbbf8:	d1df      	bne.n	bbbba <pinAvailable+0x6>
  return true; // 'pin' is available
   bbbfa:	2001      	movs	r0, #1
   bbbfc:	e7de      	b.n	bbbbc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bbbfe:	2801      	cmp	r0, #1
   bbc00:	d809      	bhi.n	bbc16 <pinAvailable+0x62>
   bbc02:	f000 f89f 	bl	bbd44 <_Z19__fetch_global_Wirev>
   bbc06:	2100      	movs	r1, #0
   bbc08:	7c00      	ldrb	r0, [r0, #16]
   bbc0a:	f7fc ffc9 	bl	b8ba0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bbc0e:	f080 0001 	eor.w	r0, r0, #1
   bbc12:	b2c0      	uxtb	r0, r0
   bbc14:	e7d2      	b.n	bbbbc <pinAvailable+0x8>
   bbc16:	3809      	subs	r0, #9
   bbc18:	2801      	cmp	r0, #1
   bbc1a:	d8ee      	bhi.n	bbbfa <pinAvailable+0x46>
   bbc1c:	f000 f8f6 	bl	bbe0c <_Z22__fetch_global_Serial1v>
   bbc20:	7c00      	ldrb	r0, [r0, #16]
   bbc22:	f7fd f875 	bl	b8d10 <hal_usart_is_enabled>
   bbc26:	e7f2      	b.n	bbc0e <pinAvailable+0x5a>
   bbc28:	2003e3e0 	.word	0x2003e3e0
   bbc2c:	2003e3e4 	.word	0x2003e3e4

000bbc30 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbc30:	2823      	cmp	r0, #35	; 0x23
{
   bbc32:	b538      	push	{r3, r4, r5, lr}
   bbc34:	4604      	mov	r4, r0
   bbc36:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbc38:	d80a      	bhi.n	bbc50 <pinMode+0x20>
   bbc3a:	29ff      	cmp	r1, #255	; 0xff
   bbc3c:	d008      	beq.n	bbc50 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bbc3e:	f7ff ffb9 	bl	bbbb4 <pinAvailable>
   bbc42:	b128      	cbz	r0, bbc50 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bbc44:	4629      	mov	r1, r5
   bbc46:	4620      	mov	r0, r4
}
   bbc48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bbc4c:	f7fc bf30 	b.w	b8ab0 <HAL_Pin_Mode>
}
   bbc50:	bd38      	pop	{r3, r4, r5, pc}

000bbc52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bbc52:	b538      	push	{r3, r4, r5, lr}
   bbc54:	4604      	mov	r4, r0
   bbc56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bbc58:	f7fc ff32 	bl	b8ac0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bbc5c:	28ff      	cmp	r0, #255	; 0xff
   bbc5e:	d010      	beq.n	bbc82 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bbc60:	2806      	cmp	r0, #6
   bbc62:	d804      	bhi.n	bbc6e <digitalWrite+0x1c>
   bbc64:	234d      	movs	r3, #77	; 0x4d
   bbc66:	fa23 f000 	lsr.w	r0, r3, r0
   bbc6a:	07c3      	lsls	r3, r0, #31
   bbc6c:	d409      	bmi.n	bbc82 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bbc6e:	4620      	mov	r0, r4
   bbc70:	f7ff ffa0 	bl	bbbb4 <pinAvailable>
   bbc74:	b128      	cbz	r0, bbc82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bbc76:	4629      	mov	r1, r5
   bbc78:	4620      	mov	r0, r4
}
   bbc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bbc7e:	f7fc bf27 	b.w	b8ad0 <HAL_GPIO_Write>
}
   bbc82:	bd38      	pop	{r3, r4, r5, pc}

000bbc84 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bbc84:	b510      	push	{r4, lr}
   bbc86:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bbc88:	f7fc ff1a 	bl	b8ac0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bbc8c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bbc8e:	b2db      	uxtb	r3, r3
   bbc90:	2b01      	cmp	r3, #1
   bbc92:	d908      	bls.n	bbca6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bbc94:	4620      	mov	r0, r4
   bbc96:	f7ff ff8d 	bl	bbbb4 <pinAvailable>
   bbc9a:	b120      	cbz	r0, bbca6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bbc9c:	4620      	mov	r0, r4
}
   bbc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bbca2:	f7fc bf1d 	b.w	b8ae0 <HAL_GPIO_Read>
}
   bbca6:	2000      	movs	r0, #0
   bbca8:	bd10      	pop	{r4, pc}

000bbcaa <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bbcaa:	280d      	cmp	r0, #13
{
   bbcac:	b510      	push	{r4, lr}
   bbcae:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bbcb0:	bf9c      	itt	ls
   bbcb2:	340e      	addls	r4, #14
   bbcb4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bbcb6:	4620      	mov	r0, r4
   bbcb8:	f7ff ff7c 	bl	bbbb4 <pinAvailable>
   bbcbc:	b150      	cbz	r0, bbcd4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bbcbe:	2103      	movs	r1, #3
   bbcc0:	4620      	mov	r0, r4
   bbcc2:	f7fc feed 	bl	b8aa0 <HAL_Validate_Pin_Function>
   bbcc6:	2803      	cmp	r0, #3
   bbcc8:	d104      	bne.n	bbcd4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bbcca:	4620      	mov	r0, r4
}
   bbccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bbcd0:	f7fc bf1e 	b.w	b8b10 <hal_adc_read>
}
   bbcd4:	2000      	movs	r0, #0
   bbcd6:	bd10      	pop	{r4, pc}

000bbcd8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbcd8:	4770      	bx	lr

000bbcda <__tcf_1>:
   bbcda:	4770      	bx	lr

000bbcdc <_Z17acquireWireBufferv>:
{
   bbcdc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bbcde:	4b0a      	ldr	r3, [pc, #40]	; (bbd08 <_Z17acquireWireBufferv+0x2c>)
   bbce0:	6003      	str	r3, [r0, #0]
   bbce2:	2301      	movs	r3, #1
{
   bbce4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bbce6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbce8:	4908      	ldr	r1, [pc, #32]	; (bbd0c <_Z17acquireWireBufferv+0x30>)
   bbcea:	2020      	movs	r0, #32
   bbcec:	f000 f8b4 	bl	bbe58 <_ZnajRKSt9nothrow_t>
	};
   bbcf0:	2520      	movs	r5, #32
   bbcf2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbcf4:	4905      	ldr	r1, [pc, #20]	; (bbd0c <_Z17acquireWireBufferv+0x30>)
	};
   bbcf6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbcf8:	4628      	mov	r0, r5
   bbcfa:	f000 f8ad 	bl	bbe58 <_ZnajRKSt9nothrow_t>
	};
   bbcfe:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bbd02:	4620      	mov	r0, r4
   bbd04:	bd38      	pop	{r3, r4, r5, pc}
   bbd06:	bf00      	nop
   bbd08:	00010018 	.word	0x00010018
   bbd0c:	000bf35c 	.word	0x000bf35c

000bbd10 <_Z18acquireWire1Bufferv>:
{
   bbd10:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bbd12:	4b0a      	ldr	r3, [pc, #40]	; (bbd3c <_Z18acquireWire1Bufferv+0x2c>)
   bbd14:	6003      	str	r3, [r0, #0]
   bbd16:	2301      	movs	r3, #1
{
   bbd18:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bbd1a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd1c:	4908      	ldr	r1, [pc, #32]	; (bbd40 <_Z18acquireWire1Bufferv+0x30>)
   bbd1e:	2020      	movs	r0, #32
   bbd20:	f000 f89a 	bl	bbe58 <_ZnajRKSt9nothrow_t>
	};
   bbd24:	2520      	movs	r5, #32
   bbd26:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd28:	4905      	ldr	r1, [pc, #20]	; (bbd40 <_Z18acquireWire1Bufferv+0x30>)
	};
   bbd2a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd2c:	4628      	mov	r0, r5
   bbd2e:	f000 f893 	bl	bbe58 <_ZnajRKSt9nothrow_t>
	};
   bbd32:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bbd36:	4620      	mov	r0, r4
   bbd38:	bd38      	pop	{r3, r4, r5, pc}
   bbd3a:	bf00      	nop
   bbd3c:	00010018 	.word	0x00010018
   bbd40:	000bf35c 	.word	0x000bf35c

000bbd44 <_Z19__fetch_global_Wirev>:
{
   bbd44:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd46:	4d0e      	ldr	r5, [pc, #56]	; (bbd80 <_Z19__fetch_global_Wirev+0x3c>)
   bbd48:	7829      	ldrb	r1, [r5, #0]
   bbd4a:	f3bf 8f5b 	dmb	ish
   bbd4e:	f011 0401 	ands.w	r4, r1, #1
{
   bbd52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd54:	d111      	bne.n	bbd7a <_Z19__fetch_global_Wirev+0x36>
   bbd56:	4628      	mov	r0, r5
   bbd58:	f7f8 f9b0 	bl	b40bc <__cxa_guard_acquire>
   bbd5c:	b168      	cbz	r0, bbd7a <_Z19__fetch_global_Wirev+0x36>
   bbd5e:	4668      	mov	r0, sp
   bbd60:	f7ff ffbc 	bl	bbcdc <_Z17acquireWireBufferv>
   bbd64:	466a      	mov	r2, sp
   bbd66:	4621      	mov	r1, r4
   bbd68:	4806      	ldr	r0, [pc, #24]	; (bbd84 <_Z19__fetch_global_Wirev+0x40>)
   bbd6a:	f7fd fc25 	bl	b95b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbd6e:	4628      	mov	r0, r5
   bbd70:	f7f8 f9a9 	bl	b40c6 <__cxa_guard_release>
   bbd74:	4804      	ldr	r0, [pc, #16]	; (bbd88 <_Z19__fetch_global_Wirev+0x44>)
   bbd76:	f001 fe27 	bl	bd9c8 <atexit>
	return wire;
}
   bbd7a:	4802      	ldr	r0, [pc, #8]	; (bbd84 <_Z19__fetch_global_Wirev+0x40>)
   bbd7c:	b007      	add	sp, #28
   bbd7e:	bd30      	pop	{r4, r5, pc}
   bbd80:	2003e714 	.word	0x2003e714
   bbd84:	2003e71c 	.word	0x2003e71c
   bbd88:	000bbcd9 	.word	0x000bbcd9

000bbd8c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bbd8c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bbd8e:	4c0e      	ldr	r4, [pc, #56]	; (bbdc8 <_Z20__fetch_global_Wire1v+0x3c>)
   bbd90:	7823      	ldrb	r3, [r4, #0]
   bbd92:	f3bf 8f5b 	dmb	ish
   bbd96:	07db      	lsls	r3, r3, #31
{
   bbd98:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bbd9a:	d411      	bmi.n	bbdc0 <_Z20__fetch_global_Wire1v+0x34>
   bbd9c:	4620      	mov	r0, r4
   bbd9e:	f7f8 f98d 	bl	b40bc <__cxa_guard_acquire>
   bbda2:	b168      	cbz	r0, bbdc0 <_Z20__fetch_global_Wire1v+0x34>
   bbda4:	4668      	mov	r0, sp
   bbda6:	f7ff ffb3 	bl	bbd10 <_Z18acquireWire1Bufferv>
   bbdaa:	466a      	mov	r2, sp
   bbdac:	2101      	movs	r1, #1
   bbdae:	4807      	ldr	r0, [pc, #28]	; (bbdcc <_Z20__fetch_global_Wire1v+0x40>)
   bbdb0:	f7fd fc02 	bl	b95b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbdb4:	4620      	mov	r0, r4
   bbdb6:	f7f8 f986 	bl	b40c6 <__cxa_guard_release>
   bbdba:	4805      	ldr	r0, [pc, #20]	; (bbdd0 <_Z20__fetch_global_Wire1v+0x44>)
   bbdbc:	f001 fe04 	bl	bd9c8 <atexit>
	return wire;
}
   bbdc0:	4802      	ldr	r0, [pc, #8]	; (bbdcc <_Z20__fetch_global_Wire1v+0x40>)
   bbdc2:	b006      	add	sp, #24
   bbdc4:	bd10      	pop	{r4, pc}
   bbdc6:	bf00      	nop
   bbdc8:	2003e718 	.word	0x2003e718
   bbdcc:	2003e730 	.word	0x2003e730
   bbdd0:	000bbcdb 	.word	0x000bbcdb

000bbdd4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbdd4:	4770      	bx	lr
	...

000bbdd8 <_Z20acquireSerial1Bufferv>:
{
   bbdd8:	b538      	push	{r3, r4, r5, lr}
   bbdda:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bbddc:	2514      	movs	r5, #20
   bbdde:	462a      	mov	r2, r5
   bbde0:	2100      	movs	r1, #0
   bbde2:	f001 fe45 	bl	bda70 <memset>
   bbde6:	8025      	strh	r5, [r4, #0]
   bbde8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbdea:	4907      	ldr	r1, [pc, #28]	; (bbe08 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bbdec:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbdee:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bbdf0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbdf2:	f000 f831 	bl	bbe58 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbdf6:	4904      	ldr	r1, [pc, #16]	; (bbe08 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bbdf8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbdfa:	4628      	mov	r0, r5
   bbdfc:	f000 f82c 	bl	bbe58 <_ZnajRKSt9nothrow_t>
    };
   bbe00:	60e0      	str	r0, [r4, #12]
}
   bbe02:	4620      	mov	r0, r4
   bbe04:	bd38      	pop	{r3, r4, r5, pc}
   bbe06:	bf00      	nop
   bbe08:	000bf35c 	.word	0x000bf35c

000bbe0c <_Z22__fetch_global_Serial1v>:
{
   bbe0c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbe0e:	4d0e      	ldr	r5, [pc, #56]	; (bbe48 <_Z22__fetch_global_Serial1v+0x3c>)
   bbe10:	7829      	ldrb	r1, [r5, #0]
   bbe12:	f3bf 8f5b 	dmb	ish
   bbe16:	f011 0401 	ands.w	r4, r1, #1
{
   bbe1a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbe1c:	d111      	bne.n	bbe42 <_Z22__fetch_global_Serial1v+0x36>
   bbe1e:	4628      	mov	r0, r5
   bbe20:	f7f8 f94c 	bl	b40bc <__cxa_guard_acquire>
   bbe24:	b168      	cbz	r0, bbe42 <_Z22__fetch_global_Serial1v+0x36>
   bbe26:	a801      	add	r0, sp, #4
   bbe28:	f7ff ffd6 	bl	bbdd8 <_Z20acquireSerial1Bufferv>
   bbe2c:	aa01      	add	r2, sp, #4
   bbe2e:	4621      	mov	r1, r4
   bbe30:	4806      	ldr	r0, [pc, #24]	; (bbe4c <_Z22__fetch_global_Serial1v+0x40>)
   bbe32:	f7ff fd7b 	bl	bb92c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbe36:	4628      	mov	r0, r5
   bbe38:	f7f8 f945 	bl	b40c6 <__cxa_guard_release>
   bbe3c:	4804      	ldr	r0, [pc, #16]	; (bbe50 <_Z22__fetch_global_Serial1v+0x44>)
   bbe3e:	f001 fdc3 	bl	bd9c8 <atexit>
    return serial1;
}
   bbe42:	4802      	ldr	r0, [pc, #8]	; (bbe4c <_Z22__fetch_global_Serial1v+0x40>)
   bbe44:	b007      	add	sp, #28
   bbe46:	bd30      	pop	{r4, r5, pc}
   bbe48:	2003e744 	.word	0x2003e744
   bbe4c:	2003e748 	.word	0x2003e748
   bbe50:	000bbdd5 	.word	0x000bbdd5

000bbe54 <_ZnwjRKSt9nothrow_t>:
   bbe54:	f7f8 b91f 	b.w	b4096 <_Znwj>

000bbe58 <_ZnajRKSt9nothrow_t>:
   bbe58:	f7f8 b91f 	b.w	b409a <_Znaj>

000bbe5c <_ZSt25__throw_bad_function_callv>:
   bbe5c:	b508      	push	{r3, lr}
   bbe5e:	f7fd f945 	bl	b90ec <abort>
   bbe62:	0000      	movs	r0, r0
   bbe64:	0000      	movs	r0, r0
	...

000bbe68 <pow>:
   bbe68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbe6a:	ed2d 8b02 	vpush	{d8}
   bbe6e:	ec57 6b10 	vmov	r6, r7, d0
   bbe72:	ec55 4b11 	vmov	r4, r5, d1
   bbe76:	f000 f8cb 	bl	bc010 <__ieee754_pow>
   bbe7a:	4b63      	ldr	r3, [pc, #396]	; (bc008 <pow+0x1a0>)
   bbe7c:	eeb0 8a40 	vmov.f32	s16, s0
   bbe80:	eef0 8a60 	vmov.f32	s17, s1
   bbe84:	f993 3000 	ldrsb.w	r3, [r3]
   bbe88:	3301      	adds	r3, #1
   bbe8a:	d02a      	beq.n	bbee2 <pow+0x7a>
   bbe8c:	4622      	mov	r2, r4
   bbe8e:	462b      	mov	r3, r5
   bbe90:	4620      	mov	r0, r4
   bbe92:	4629      	mov	r1, r5
   bbe94:	f001 fcc4 	bl	bd820 <__aeabi_dcmpun>
   bbe98:	bb18      	cbnz	r0, bbee2 <pow+0x7a>
   bbe9a:	4632      	mov	r2, r6
   bbe9c:	463b      	mov	r3, r7
   bbe9e:	4630      	mov	r0, r6
   bbea0:	4639      	mov	r1, r7
   bbea2:	f001 fcbd 	bl	bd820 <__aeabi_dcmpun>
   bbea6:	2800      	cmp	r0, #0
   bbea8:	d144      	bne.n	bbf34 <pow+0xcc>
   bbeaa:	2200      	movs	r2, #0
   bbeac:	2300      	movs	r3, #0
   bbeae:	4630      	mov	r0, r6
   bbeb0:	4639      	mov	r1, r7
   bbeb2:	f001 fc83 	bl	bd7bc <__aeabi_dcmpeq>
   bbeb6:	b1d8      	cbz	r0, bbef0 <pow+0x88>
   bbeb8:	2200      	movs	r2, #0
   bbeba:	2300      	movs	r3, #0
   bbebc:	4620      	mov	r0, r4
   bbebe:	4629      	mov	r1, r5
   bbec0:	f001 fc7c 	bl	bd7bc <__aeabi_dcmpeq>
   bbec4:	2800      	cmp	r0, #0
   bbec6:	d13d      	bne.n	bbf44 <pow+0xdc>
   bbec8:	ec45 4b10 	vmov	d0, r4, r5
   bbecc:	f000 ff10 	bl	bccf0 <finite>
   bbed0:	b138      	cbz	r0, bbee2 <pow+0x7a>
   bbed2:	4620      	mov	r0, r4
   bbed4:	4629      	mov	r1, r5
   bbed6:	2200      	movs	r2, #0
   bbed8:	2300      	movs	r3, #0
   bbeda:	f001 fc79 	bl	bd7d0 <__aeabi_dcmplt>
   bbede:	2800      	cmp	r0, #0
   bbee0:	d15c      	bne.n	bbf9c <pow+0x134>
   bbee2:	eeb0 0a48 	vmov.f32	s0, s16
   bbee6:	eef0 0a68 	vmov.f32	s1, s17
   bbeea:	ecbd 8b02 	vpop	{d8}
   bbeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbef0:	eeb0 0a48 	vmov.f32	s0, s16
   bbef4:	eef0 0a68 	vmov.f32	s1, s17
   bbef8:	f000 fefa 	bl	bccf0 <finite>
   bbefc:	b358      	cbz	r0, bbf56 <pow+0xee>
   bbefe:	ec51 0b18 	vmov	r0, r1, d8
   bbf02:	2200      	movs	r2, #0
   bbf04:	2300      	movs	r3, #0
   bbf06:	f001 fc59 	bl	bd7bc <__aeabi_dcmpeq>
   bbf0a:	2800      	cmp	r0, #0
   bbf0c:	d0e9      	beq.n	bbee2 <pow+0x7a>
   bbf0e:	ec47 6b10 	vmov	d0, r6, r7
   bbf12:	f000 feed 	bl	bccf0 <finite>
   bbf16:	2800      	cmp	r0, #0
   bbf18:	d0e3      	beq.n	bbee2 <pow+0x7a>
   bbf1a:	ec45 4b10 	vmov	d0, r4, r5
   bbf1e:	f000 fee7 	bl	bccf0 <finite>
   bbf22:	2800      	cmp	r0, #0
   bbf24:	d0dd      	beq.n	bbee2 <pow+0x7a>
   bbf26:	f7fd f8e9 	bl	b90fc <__errno>
   bbf2a:	2322      	movs	r3, #34	; 0x22
   bbf2c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; bbfe8 <pow+0x180>
   bbf30:	6003      	str	r3, [r0, #0]
   bbf32:	e7d6      	b.n	bbee2 <pow+0x7a>
   bbf34:	4620      	mov	r0, r4
   bbf36:	4629      	mov	r1, r5
   bbf38:	2200      	movs	r2, #0
   bbf3a:	2300      	movs	r3, #0
   bbf3c:	f001 fc3e 	bl	bd7bc <__aeabi_dcmpeq>
   bbf40:	2800      	cmp	r0, #0
   bbf42:	d0ce      	beq.n	bbee2 <pow+0x7a>
   bbf44:	ed9f 8b2a 	vldr	d8, [pc, #168]	; bbff0 <pow+0x188>
   bbf48:	eeb0 0a48 	vmov.f32	s0, s16
   bbf4c:	eef0 0a68 	vmov.f32	s1, s17
   bbf50:	ecbd 8b02 	vpop	{d8}
   bbf54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbf56:	ec47 6b10 	vmov	d0, r6, r7
   bbf5a:	f000 fec9 	bl	bccf0 <finite>
   bbf5e:	2800      	cmp	r0, #0
   bbf60:	d0cd      	beq.n	bbefe <pow+0x96>
   bbf62:	ec45 4b10 	vmov	d0, r4, r5
   bbf66:	f000 fec3 	bl	bccf0 <finite>
   bbf6a:	2800      	cmp	r0, #0
   bbf6c:	d0c7      	beq.n	bbefe <pow+0x96>
   bbf6e:	ec53 2b18 	vmov	r2, r3, d8
   bbf72:	ee18 0a10 	vmov	r0, s16
   bbf76:	4619      	mov	r1, r3
   bbf78:	f001 fc52 	bl	bd820 <__aeabi_dcmpun>
   bbf7c:	bb20      	cbnz	r0, bbfc8 <pow+0x160>
   bbf7e:	f7fd f8bd 	bl	b90fc <__errno>
   bbf82:	4603      	mov	r3, r0
   bbf84:	2222      	movs	r2, #34	; 0x22
   bbf86:	601a      	str	r2, [r3, #0]
   bbf88:	4630      	mov	r0, r6
   bbf8a:	4639      	mov	r1, r7
   bbf8c:	2200      	movs	r2, #0
   bbf8e:	2300      	movs	r3, #0
   bbf90:	f001 fc1e 	bl	bd7d0 <__aeabi_dcmplt>
   bbf94:	b948      	cbnz	r0, bbfaa <pow+0x142>
   bbf96:	ed9f 8b18 	vldr	d8, [pc, #96]	; bbff8 <pow+0x190>
   bbf9a:	e7a2      	b.n	bbee2 <pow+0x7a>
   bbf9c:	f7fd f8ae 	bl	b90fc <__errno>
   bbfa0:	2321      	movs	r3, #33	; 0x21
   bbfa2:	ed9f 8b17 	vldr	d8, [pc, #92]	; bc000 <pow+0x198>
   bbfa6:	6003      	str	r3, [r0, #0]
   bbfa8:	e79b      	b.n	bbee2 <pow+0x7a>
   bbfaa:	ec45 4b10 	vmov	d0, r4, r5
   bbfae:	f000 feb3 	bl	bcd18 <rint>
   bbfb2:	4622      	mov	r2, r4
   bbfb4:	ec51 0b10 	vmov	r0, r1, d0
   bbfb8:	462b      	mov	r3, r5
   bbfba:	f001 fbff 	bl	bd7bc <__aeabi_dcmpeq>
   bbfbe:	2800      	cmp	r0, #0
   bbfc0:	d1e9      	bne.n	bbf96 <pow+0x12e>
   bbfc2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; bc000 <pow+0x198>
   bbfc6:	e78c      	b.n	bbee2 <pow+0x7a>
   bbfc8:	f7fd f898 	bl	b90fc <__errno>
   bbfcc:	2200      	movs	r2, #0
   bbfce:	2300      	movs	r3, #0
   bbfd0:	2121      	movs	r1, #33	; 0x21
   bbfd2:	6001      	str	r1, [r0, #0]
   bbfd4:	4610      	mov	r0, r2
   bbfd6:	4619      	mov	r1, r3
   bbfd8:	f001 fab2 	bl	bd540 <__aeabi_ddiv>
   bbfdc:	ec41 0b18 	vmov	d8, r0, r1
   bbfe0:	e77f      	b.n	bbee2 <pow+0x7a>
   bbfe2:	bf00      	nop
   bbfe4:	f3af 8000 	nop.w
	...
   bbff4:	3ff00000 	.word	0x3ff00000
   bbff8:	00000000 	.word	0x00000000
   bbffc:	7ff00000 	.word	0x7ff00000
   bc000:	00000000 	.word	0x00000000
   bc004:	fff00000 	.word	0xfff00000
   bc008:	2003decc 	.word	0x2003decc
   bc00c:	00000000 	.word	0x00000000

000bc010 <__ieee754_pow>:
   bc010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc014:	ec57 6b11 	vmov	r6, r7, d1
   bc018:	ed2d 8b0c 	vpush	{d8-d13}
   bc01c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   bc020:	ea5a 0206 	orrs.w	r2, sl, r6
   bc024:	b087      	sub	sp, #28
   bc026:	d03d      	beq.n	bc0a4 <__ieee754_pow+0x94>
   bc028:	ec55 4b10 	vmov	r4, r5, d0
   bc02c:	4972      	ldr	r1, [pc, #456]	; (bc1f8 <__ieee754_pow+0x1e8>)
   bc02e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   bc032:	4588      	cmp	r8, r1
   bc034:	ee10 2a10 	vmov	r2, s0
   bc038:	46a9      	mov	r9, r5
   bc03a:	dc2c      	bgt.n	bc096 <__ieee754_pow+0x86>
   bc03c:	ee11 3a10 	vmov	r3, s2
   bc040:	46bb      	mov	fp, r7
   bc042:	d036      	beq.n	bc0b2 <__ieee754_pow+0xa2>
   bc044:	458a      	cmp	sl, r1
   bc046:	dc26      	bgt.n	bc096 <__ieee754_pow+0x86>
   bc048:	496b      	ldr	r1, [pc, #428]	; (bc1f8 <__ieee754_pow+0x1e8>)
   bc04a:	458a      	cmp	sl, r1
   bc04c:	d021      	beq.n	bc092 <__ieee754_pow+0x82>
   bc04e:	f1b9 0f00 	cmp.w	r9, #0
   bc052:	db39      	blt.n	bc0c8 <__ieee754_pow+0xb8>
   bc054:	2100      	movs	r1, #0
   bc056:	9100      	str	r1, [sp, #0]
   bc058:	2b00      	cmp	r3, #0
   bc05a:	d151      	bne.n	bc100 <__ieee754_pow+0xf0>
   bc05c:	4b66      	ldr	r3, [pc, #408]	; (bc1f8 <__ieee754_pow+0x1e8>)
   bc05e:	459a      	cmp	sl, r3
   bc060:	f000 80a2 	beq.w	bc1a8 <__ieee754_pow+0x198>
   bc064:	4b65      	ldr	r3, [pc, #404]	; (bc1fc <__ieee754_pow+0x1ec>)
   bc066:	459a      	cmp	sl, r3
   bc068:	f000 80b0 	beq.w	bc1cc <__ieee754_pow+0x1bc>
   bc06c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   bc070:	f000 84c0 	beq.w	bc9f4 <__ieee754_pow+0x9e4>
   bc074:	4b62      	ldr	r3, [pc, #392]	; (bc200 <__ieee754_pow+0x1f0>)
   bc076:	459b      	cmp	fp, r3
   bc078:	d142      	bne.n	bc100 <__ieee754_pow+0xf0>
   bc07a:	f1b9 0f00 	cmp.w	r9, #0
   bc07e:	db3f      	blt.n	bc100 <__ieee754_pow+0xf0>
   bc080:	ec45 4b10 	vmov	d0, r4, r5
   bc084:	b007      	add	sp, #28
   bc086:	ecbd 8b0c 	vpop	{d8-d13}
   bc08a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc08e:	f000 bd59 	b.w	bcb44 <__ieee754_sqrt>
   bc092:	2b00      	cmp	r3, #0
   bc094:	d0db      	beq.n	bc04e <__ieee754_pow+0x3e>
   bc096:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bc09a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bc09e:	ea58 0302 	orrs.w	r3, r8, r2
   bc0a2:	d109      	bne.n	bc0b8 <__ieee754_pow+0xa8>
   bc0a4:	ed9f 0b50 	vldr	d0, [pc, #320]	; bc1e8 <__ieee754_pow+0x1d8>
   bc0a8:	b007      	add	sp, #28
   bc0aa:	ecbd 8b0c 	vpop	{d8-d13}
   bc0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc0b2:	b90c      	cbnz	r4, bc0b8 <__ieee754_pow+0xa8>
   bc0b4:	45c2      	cmp	sl, r8
   bc0b6:	ddc7      	ble.n	bc048 <__ieee754_pow+0x38>
   bc0b8:	4852      	ldr	r0, [pc, #328]	; (bc204 <__ieee754_pow+0x1f4>)
   bc0ba:	b007      	add	sp, #28
   bc0bc:	ecbd 8b0c 	vpop	{d8-d13}
   bc0c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc0c4:	f000 be20 	b.w	bcd08 <nan>
   bc0c8:	494f      	ldr	r1, [pc, #316]	; (bc208 <__ieee754_pow+0x1f8>)
   bc0ca:	458a      	cmp	sl, r1
   bc0cc:	f300 8085 	bgt.w	bc1da <__ieee754_pow+0x1ca>
   bc0d0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   bc0d4:	458a      	cmp	sl, r1
   bc0d6:	dd0f      	ble.n	bc0f8 <__ieee754_pow+0xe8>
   bc0d8:	ea4f 512a 	mov.w	r1, sl, asr #20
   bc0dc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   bc0e0:	2914      	cmp	r1, #20
   bc0e2:	f340 849b 	ble.w	bca1c <__ieee754_pow+0xa0c>
   bc0e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   bc0ea:	fa23 f001 	lsr.w	r0, r3, r1
   bc0ee:	fa00 f101 	lsl.w	r1, r0, r1
   bc0f2:	4299      	cmp	r1, r3
   bc0f4:	f000 84ed 	beq.w	bcad2 <__ieee754_pow+0xac2>
   bc0f8:	2100      	movs	r1, #0
   bc0fa:	9100      	str	r1, [sp, #0]
   bc0fc:	2b00      	cmp	r3, #0
   bc0fe:	d0b1      	beq.n	bc064 <__ieee754_pow+0x54>
   bc100:	ec45 4b10 	vmov	d0, r4, r5
   bc104:	9202      	str	r2, [sp, #8]
   bc106:	f000 fde9 	bl	bccdc <fabs>
   bc10a:	9a02      	ldr	r2, [sp, #8]
   bc10c:	bb5a      	cbnz	r2, bc166 <__ieee754_pow+0x156>
   bc10e:	f1b8 0f00 	cmp.w	r8, #0
   bc112:	d004      	beq.n	bc11e <__ieee754_pow+0x10e>
   bc114:	4b39      	ldr	r3, [pc, #228]	; (bc1fc <__ieee754_pow+0x1ec>)
   bc116:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   bc11a:	429a      	cmp	r2, r3
   bc11c:	d123      	bne.n	bc166 <__ieee754_pow+0x156>
   bc11e:	f1bb 0f00 	cmp.w	fp, #0
   bc122:	da07      	bge.n	bc134 <__ieee754_pow+0x124>
   bc124:	ec53 2b10 	vmov	r2, r3, d0
   bc128:	4934      	ldr	r1, [pc, #208]	; (bc1fc <__ieee754_pow+0x1ec>)
   bc12a:	2000      	movs	r0, #0
   bc12c:	f001 fa08 	bl	bd540 <__aeabi_ddiv>
   bc130:	ec41 0b10 	vmov	d0, r0, r1
   bc134:	f1b9 0f00 	cmp.w	r9, #0
   bc138:	dab6      	bge.n	bc0a8 <__ieee754_pow+0x98>
   bc13a:	9b00      	ldr	r3, [sp, #0]
   bc13c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bc140:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bc144:	ea58 0303 	orrs.w	r3, r8, r3
   bc148:	f040 848d 	bne.w	bca66 <__ieee754_pow+0xa56>
   bc14c:	ec53 2b10 	vmov	r2, r3, d0
   bc150:	4610      	mov	r0, r2
   bc152:	4619      	mov	r1, r3
   bc154:	f000 ff12 	bl	bcf7c <__aeabi_dsub>
   bc158:	4602      	mov	r2, r0
   bc15a:	460b      	mov	r3, r1
   bc15c:	f001 f9f0 	bl	bd540 <__aeabi_ddiv>
   bc160:	ec41 0b10 	vmov	d0, r0, r1
   bc164:	e7a0      	b.n	bc0a8 <__ieee754_pow+0x98>
   bc166:	9a00      	ldr	r2, [sp, #0]
   bc168:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   bc16c:	3b01      	subs	r3, #1
   bc16e:	9304      	str	r3, [sp, #16]
   bc170:	4313      	orrs	r3, r2
   bc172:	d035      	beq.n	bc1e0 <__ieee754_pow+0x1d0>
   bc174:	4b25      	ldr	r3, [pc, #148]	; (bc20c <__ieee754_pow+0x1fc>)
   bc176:	459a      	cmp	sl, r3
   bc178:	dd4c      	ble.n	bc214 <__ieee754_pow+0x204>
   bc17a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   bc17e:	459a      	cmp	sl, r3
   bc180:	4b23      	ldr	r3, [pc, #140]	; (bc210 <__ieee754_pow+0x200>)
   bc182:	f340 83db 	ble.w	bc93c <__ieee754_pow+0x92c>
   bc186:	4598      	cmp	r8, r3
   bc188:	f340 8360 	ble.w	bc84c <__ieee754_pow+0x83c>
   bc18c:	f1bb 0f00 	cmp.w	fp, #0
   bc190:	f340 8360 	ble.w	bc854 <__ieee754_pow+0x844>
   bc194:	a316      	add	r3, pc, #88	; (adr r3, bc1f0 <__ieee754_pow+0x1e0>)
   bc196:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc19a:	4610      	mov	r0, r2
   bc19c:	4619      	mov	r1, r3
   bc19e:	f001 f8a5 	bl	bd2ec <__aeabi_dmul>
   bc1a2:	ec41 0b10 	vmov	d0, r0, r1
   bc1a6:	e77f      	b.n	bc0a8 <__ieee754_pow+0x98>
   bc1a8:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   bc1ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   bc1b0:	4313      	orrs	r3, r2
   bc1b2:	f43f af77 	beq.w	bc0a4 <__ieee754_pow+0x94>
   bc1b6:	4b16      	ldr	r3, [pc, #88]	; (bc210 <__ieee754_pow+0x200>)
   bc1b8:	4598      	cmp	r8, r3
   bc1ba:	f340 837a 	ble.w	bc8b2 <__ieee754_pow+0x8a2>
   bc1be:	f1bb 0f00 	cmp.w	fp, #0
   bc1c2:	f2c0 8347 	blt.w	bc854 <__ieee754_pow+0x844>
   bc1c6:	ec47 6b10 	vmov	d0, r6, r7
   bc1ca:	e76d      	b.n	bc0a8 <__ieee754_pow+0x98>
   bc1cc:	f1bb 0f00 	cmp.w	fp, #0
   bc1d0:	f2c0 841a 	blt.w	bca08 <__ieee754_pow+0x9f8>
   bc1d4:	ec45 4b10 	vmov	d0, r4, r5
   bc1d8:	e766      	b.n	bc0a8 <__ieee754_pow+0x98>
   bc1da:	2102      	movs	r1, #2
   bc1dc:	9100      	str	r1, [sp, #0]
   bc1de:	e73b      	b.n	bc058 <__ieee754_pow+0x48>
   bc1e0:	4622      	mov	r2, r4
   bc1e2:	462b      	mov	r3, r5
   bc1e4:	e7b4      	b.n	bc150 <__ieee754_pow+0x140>
   bc1e6:	bf00      	nop
   bc1e8:	00000000 	.word	0x00000000
   bc1ec:	3ff00000 	.word	0x3ff00000
   bc1f0:	8800759c 	.word	0x8800759c
   bc1f4:	7e37e43c 	.word	0x7e37e43c
   bc1f8:	7ff00000 	.word	0x7ff00000
   bc1fc:	3ff00000 	.word	0x3ff00000
   bc200:	3fe00000 	.word	0x3fe00000
   bc204:	000bf360 	.word	0x000bf360
   bc208:	433fffff 	.word	0x433fffff
   bc20c:	41e00000 	.word	0x41e00000
   bc210:	3fefffff 	.word	0x3fefffff
   bc214:	4be4      	ldr	r3, [pc, #912]	; (bc5a8 <__ieee754_pow+0x598>)
   bc216:	ea09 0303 	and.w	r3, r9, r3
   bc21a:	2200      	movs	r2, #0
   bc21c:	b953      	cbnz	r3, bc234 <__ieee754_pow+0x224>
   bc21e:	ec51 0b10 	vmov	r0, r1, d0
   bc222:	4be2      	ldr	r3, [pc, #904]	; (bc5ac <__ieee754_pow+0x59c>)
   bc224:	f001 f862 	bl	bd2ec <__aeabi_dmul>
   bc228:	ec41 0b10 	vmov	d0, r0, r1
   bc22c:	ee10 8a90 	vmov	r8, s1
   bc230:	f06f 0234 	mvn.w	r2, #52	; 0x34
   bc234:	ea4f 5328 	mov.w	r3, r8, asr #20
   bc238:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   bc23c:	189a      	adds	r2, r3, r2
   bc23e:	4bdc      	ldr	r3, [pc, #880]	; (bc5b0 <__ieee754_pow+0x5a0>)
   bc240:	9205      	str	r2, [sp, #20]
   bc242:	f3c8 0813 	ubfx	r8, r8, #0, #20
   bc246:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   bc24a:	4598      	cmp	r8, r3
   bc24c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   bc250:	dd07      	ble.n	bc262 <__ieee754_pow+0x252>
   bc252:	4bd8      	ldr	r3, [pc, #864]	; (bc5b4 <__ieee754_pow+0x5a4>)
   bc254:	4598      	cmp	r8, r3
   bc256:	f340 8414 	ble.w	bca82 <__ieee754_pow+0xa72>
   bc25a:	3201      	adds	r2, #1
   bc25c:	9205      	str	r2, [sp, #20]
   bc25e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   bc262:	ed9f 6bb9 	vldr	d6, [pc, #740]	; bc548 <__ieee754_pow+0x538>
   bc266:	ed9f 7bba 	vldr	d7, [pc, #744]	; bc550 <__ieee754_pow+0x540>
   bc26a:	ec53 2b16 	vmov	r2, r3, d6
   bc26e:	eeb0 ca47 	vmov.f32	s24, s14
   bc272:	eef0 ca67 	vmov.f32	s25, s15
   bc276:	2500      	movs	r5, #0
   bc278:	eeb0 da47 	vmov.f32	s26, s14
   bc27c:	eef0 da67 	vmov.f32	s27, s15
   bc280:	ec5b ab10 	vmov	sl, fp, d0
   bc284:	46a3      	mov	fp, r4
   bc286:	4650      	mov	r0, sl
   bc288:	4659      	mov	r1, fp
   bc28a:	ec43 2b1a 	vmov	d10, r2, r3
   bc28e:	f000 fe75 	bl	bcf7c <__aeabi_dsub>
   bc292:	ec53 2b1a 	vmov	r2, r3, d10
   bc296:	4680      	mov	r8, r0
   bc298:	4689      	mov	r9, r1
   bc29a:	4650      	mov	r0, sl
   bc29c:	4659      	mov	r1, fp
   bc29e:	f000 fe6f 	bl	bcf80 <__adddf3>
   bc2a2:	4602      	mov	r2, r0
   bc2a4:	460b      	mov	r3, r1
   bc2a6:	2000      	movs	r0, #0
   bc2a8:	49c3      	ldr	r1, [pc, #780]	; (bc5b8 <__ieee754_pow+0x5a8>)
   bc2aa:	f001 f949 	bl	bd540 <__aeabi_ddiv>
   bc2ae:	ec41 0b1b 	vmov	d11, r0, r1
   bc2b2:	4640      	mov	r0, r8
   bc2b4:	ec53 2b1b 	vmov	r2, r3, d11
   bc2b8:	4649      	mov	r1, r9
   bc2ba:	f001 f817 	bl	bd2ec <__aeabi_dmul>
   bc2be:	ec41 0b18 	vmov	d8, r0, r1
   bc2c2:	460a      	mov	r2, r1
   bc2c4:	4601      	mov	r1, r0
   bc2c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   bc2ca:	2100      	movs	r1, #0
   bc2cc:	9102      	str	r1, [sp, #8]
   bc2ce:	1064      	asrs	r4, r4, #1
   bc2d0:	ec4b ab19 	vmov	d9, sl, fp
   bc2d4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   bc2d8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   bc2dc:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   bc2e0:	2000      	movs	r0, #0
   bc2e2:	1959      	adds	r1, r3, r5
   bc2e4:	4604      	mov	r4, r0
   bc2e6:	460d      	mov	r5, r1
   bc2e8:	4602      	mov	r2, r0
   bc2ea:	460b      	mov	r3, r1
   bc2ec:	4650      	mov	r0, sl
   bc2ee:	4659      	mov	r1, fp
   bc2f0:	f000 fffc 	bl	bd2ec <__aeabi_dmul>
   bc2f4:	4602      	mov	r2, r0
   bc2f6:	460b      	mov	r3, r1
   bc2f8:	4640      	mov	r0, r8
   bc2fa:	4649      	mov	r1, r9
   bc2fc:	f000 fe3e 	bl	bcf7c <__aeabi_dsub>
   bc300:	ec53 2b1a 	vmov	r2, r3, d10
   bc304:	4680      	mov	r8, r0
   bc306:	4689      	mov	r9, r1
   bc308:	4620      	mov	r0, r4
   bc30a:	4629      	mov	r1, r5
   bc30c:	f000 fe36 	bl	bcf7c <__aeabi_dsub>
   bc310:	4602      	mov	r2, r0
   bc312:	460b      	mov	r3, r1
   bc314:	ec51 0b19 	vmov	r0, r1, d9
   bc318:	f000 fe30 	bl	bcf7c <__aeabi_dsub>
   bc31c:	4652      	mov	r2, sl
   bc31e:	465b      	mov	r3, fp
   bc320:	f000 ffe4 	bl	bd2ec <__aeabi_dmul>
   bc324:	4602      	mov	r2, r0
   bc326:	460b      	mov	r3, r1
   bc328:	4640      	mov	r0, r8
   bc32a:	4649      	mov	r1, r9
   bc32c:	f000 fe26 	bl	bcf7c <__aeabi_dsub>
   bc330:	ec53 2b1b 	vmov	r2, r3, d11
   bc334:	f000 ffda 	bl	bd2ec <__aeabi_dmul>
   bc338:	ec53 2b18 	vmov	r2, r3, d8
   bc33c:	ec41 0b19 	vmov	d9, r0, r1
   bc340:	ec51 0b18 	vmov	r0, r1, d8
   bc344:	f000 ffd2 	bl	bd2ec <__aeabi_dmul>
   bc348:	a383      	add	r3, pc, #524	; (adr r3, bc558 <__ieee754_pow+0x548>)
   bc34a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc34e:	4604      	mov	r4, r0
   bc350:	460d      	mov	r5, r1
   bc352:	f000 ffcb 	bl	bd2ec <__aeabi_dmul>
   bc356:	a382      	add	r3, pc, #520	; (adr r3, bc560 <__ieee754_pow+0x550>)
   bc358:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc35c:	f000 fe10 	bl	bcf80 <__adddf3>
   bc360:	4622      	mov	r2, r4
   bc362:	462b      	mov	r3, r5
   bc364:	f000 ffc2 	bl	bd2ec <__aeabi_dmul>
   bc368:	a37f      	add	r3, pc, #508	; (adr r3, bc568 <__ieee754_pow+0x558>)
   bc36a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc36e:	f000 fe07 	bl	bcf80 <__adddf3>
   bc372:	4622      	mov	r2, r4
   bc374:	462b      	mov	r3, r5
   bc376:	f000 ffb9 	bl	bd2ec <__aeabi_dmul>
   bc37a:	a37d      	add	r3, pc, #500	; (adr r3, bc570 <__ieee754_pow+0x560>)
   bc37c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc380:	f000 fdfe 	bl	bcf80 <__adddf3>
   bc384:	4622      	mov	r2, r4
   bc386:	462b      	mov	r3, r5
   bc388:	f000 ffb0 	bl	bd2ec <__aeabi_dmul>
   bc38c:	a37a      	add	r3, pc, #488	; (adr r3, bc578 <__ieee754_pow+0x568>)
   bc38e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc392:	f000 fdf5 	bl	bcf80 <__adddf3>
   bc396:	4622      	mov	r2, r4
   bc398:	462b      	mov	r3, r5
   bc39a:	f000 ffa7 	bl	bd2ec <__aeabi_dmul>
   bc39e:	a378      	add	r3, pc, #480	; (adr r3, bc580 <__ieee754_pow+0x570>)
   bc3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc3a4:	f000 fdec 	bl	bcf80 <__adddf3>
   bc3a8:	4622      	mov	r2, r4
   bc3aa:	4680      	mov	r8, r0
   bc3ac:	4689      	mov	r9, r1
   bc3ae:	462b      	mov	r3, r5
   bc3b0:	4620      	mov	r0, r4
   bc3b2:	4629      	mov	r1, r5
   bc3b4:	f000 ff9a 	bl	bd2ec <__aeabi_dmul>
   bc3b8:	4602      	mov	r2, r0
   bc3ba:	460b      	mov	r3, r1
   bc3bc:	4640      	mov	r0, r8
   bc3be:	4649      	mov	r1, r9
   bc3c0:	f000 ff94 	bl	bd2ec <__aeabi_dmul>
   bc3c4:	4652      	mov	r2, sl
   bc3c6:	4604      	mov	r4, r0
   bc3c8:	460d      	mov	r5, r1
   bc3ca:	465b      	mov	r3, fp
   bc3cc:	ec51 0b18 	vmov	r0, r1, d8
   bc3d0:	f000 fdd6 	bl	bcf80 <__adddf3>
   bc3d4:	ec53 2b19 	vmov	r2, r3, d9
   bc3d8:	f000 ff88 	bl	bd2ec <__aeabi_dmul>
   bc3dc:	4622      	mov	r2, r4
   bc3de:	462b      	mov	r3, r5
   bc3e0:	f000 fdce 	bl	bcf80 <__adddf3>
   bc3e4:	4652      	mov	r2, sl
   bc3e6:	4680      	mov	r8, r0
   bc3e8:	4689      	mov	r9, r1
   bc3ea:	465b      	mov	r3, fp
   bc3ec:	4650      	mov	r0, sl
   bc3ee:	4659      	mov	r1, fp
   bc3f0:	f000 ff7c 	bl	bd2ec <__aeabi_dmul>
   bc3f4:	4602      	mov	r2, r0
   bc3f6:	460b      	mov	r3, r1
   bc3f8:	ec43 2b1a 	vmov	d10, r2, r3
   bc3fc:	4b6f      	ldr	r3, [pc, #444]	; (bc5bc <__ieee754_pow+0x5ac>)
   bc3fe:	2200      	movs	r2, #0
   bc400:	f000 fdbe 	bl	bcf80 <__adddf3>
   bc404:	4642      	mov	r2, r8
   bc406:	464b      	mov	r3, r9
   bc408:	f000 fdba 	bl	bcf80 <__adddf3>
   bc40c:	2400      	movs	r4, #0
   bc40e:	460d      	mov	r5, r1
   bc410:	4622      	mov	r2, r4
   bc412:	462b      	mov	r3, r5
   bc414:	4650      	mov	r0, sl
   bc416:	4659      	mov	r1, fp
   bc418:	f000 ff68 	bl	bd2ec <__aeabi_dmul>
   bc41c:	4b67      	ldr	r3, [pc, #412]	; (bc5bc <__ieee754_pow+0x5ac>)
   bc41e:	4682      	mov	sl, r0
   bc420:	468b      	mov	fp, r1
   bc422:	2200      	movs	r2, #0
   bc424:	4620      	mov	r0, r4
   bc426:	4629      	mov	r1, r5
   bc428:	f000 fda8 	bl	bcf7c <__aeabi_dsub>
   bc42c:	ec53 2b1a 	vmov	r2, r3, d10
   bc430:	f000 fda4 	bl	bcf7c <__aeabi_dsub>
   bc434:	4602      	mov	r2, r0
   bc436:	460b      	mov	r3, r1
   bc438:	4640      	mov	r0, r8
   bc43a:	4649      	mov	r1, r9
   bc43c:	f000 fd9e 	bl	bcf7c <__aeabi_dsub>
   bc440:	ec53 2b18 	vmov	r2, r3, d8
   bc444:	f000 ff52 	bl	bd2ec <__aeabi_dmul>
   bc448:	4622      	mov	r2, r4
   bc44a:	462b      	mov	r3, r5
   bc44c:	4604      	mov	r4, r0
   bc44e:	460d      	mov	r5, r1
   bc450:	ec51 0b19 	vmov	r0, r1, d9
   bc454:	f000 ff4a 	bl	bd2ec <__aeabi_dmul>
   bc458:	4602      	mov	r2, r0
   bc45a:	460b      	mov	r3, r1
   bc45c:	4620      	mov	r0, r4
   bc45e:	4629      	mov	r1, r5
   bc460:	f000 fd8e 	bl	bcf80 <__adddf3>
   bc464:	4680      	mov	r8, r0
   bc466:	4689      	mov	r9, r1
   bc468:	4642      	mov	r2, r8
   bc46a:	464b      	mov	r3, r9
   bc46c:	4650      	mov	r0, sl
   bc46e:	4659      	mov	r1, fp
   bc470:	f000 fd86 	bl	bcf80 <__adddf3>
   bc474:	a344      	add	r3, pc, #272	; (adr r3, bc588 <__ieee754_pow+0x578>)
   bc476:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc47a:	2000      	movs	r0, #0
   bc47c:	4604      	mov	r4, r0
   bc47e:	460d      	mov	r5, r1
   bc480:	f000 ff34 	bl	bd2ec <__aeabi_dmul>
   bc484:	4652      	mov	r2, sl
   bc486:	ec41 0b19 	vmov	d9, r0, r1
   bc48a:	465b      	mov	r3, fp
   bc48c:	4620      	mov	r0, r4
   bc48e:	4629      	mov	r1, r5
   bc490:	f000 fd74 	bl	bcf7c <__aeabi_dsub>
   bc494:	4602      	mov	r2, r0
   bc496:	460b      	mov	r3, r1
   bc498:	4640      	mov	r0, r8
   bc49a:	4649      	mov	r1, r9
   bc49c:	f000 fd6e 	bl	bcf7c <__aeabi_dsub>
   bc4a0:	a33b      	add	r3, pc, #236	; (adr r3, bc590 <__ieee754_pow+0x580>)
   bc4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4a6:	f000 ff21 	bl	bd2ec <__aeabi_dmul>
   bc4aa:	4602      	mov	r2, r0
   bc4ac:	460b      	mov	r3, r1
   bc4ae:	4620      	mov	r0, r4
   bc4b0:	4629      	mov	r1, r5
   bc4b2:	4614      	mov	r4, r2
   bc4b4:	461d      	mov	r5, r3
   bc4b6:	a338      	add	r3, pc, #224	; (adr r3, bc598 <__ieee754_pow+0x588>)
   bc4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4bc:	f000 ff16 	bl	bd2ec <__aeabi_dmul>
   bc4c0:	4602      	mov	r2, r0
   bc4c2:	460b      	mov	r3, r1
   bc4c4:	4620      	mov	r0, r4
   bc4c6:	4629      	mov	r1, r5
   bc4c8:	f000 fd5a 	bl	bcf80 <__adddf3>
   bc4cc:	ec53 2b1d 	vmov	r2, r3, d13
   bc4d0:	f000 fd56 	bl	bcf80 <__adddf3>
   bc4d4:	4680      	mov	r8, r0
   bc4d6:	9805      	ldr	r0, [sp, #20]
   bc4d8:	4689      	mov	r9, r1
   bc4da:	f000 fe9d 	bl	bd218 <__aeabi_i2d>
   bc4de:	4642      	mov	r2, r8
   bc4e0:	4682      	mov	sl, r0
   bc4e2:	468b      	mov	fp, r1
   bc4e4:	464b      	mov	r3, r9
   bc4e6:	ec51 0b19 	vmov	r0, r1, d9
   bc4ea:	f000 fd49 	bl	bcf80 <__adddf3>
   bc4ee:	ec53 2b1c 	vmov	r2, r3, d12
   bc4f2:	f000 fd45 	bl	bcf80 <__adddf3>
   bc4f6:	4652      	mov	r2, sl
   bc4f8:	465b      	mov	r3, fp
   bc4fa:	f000 fd41 	bl	bcf80 <__adddf3>
   bc4fe:	4652      	mov	r2, sl
   bc500:	465b      	mov	r3, fp
   bc502:	2000      	movs	r0, #0
   bc504:	4604      	mov	r4, r0
   bc506:	460d      	mov	r5, r1
   bc508:	f000 fd38 	bl	bcf7c <__aeabi_dsub>
   bc50c:	ec53 2b1c 	vmov	r2, r3, d12
   bc510:	f000 fd34 	bl	bcf7c <__aeabi_dsub>
   bc514:	ec53 2b19 	vmov	r2, r3, d9
   bc518:	f000 fd30 	bl	bcf7c <__aeabi_dsub>
   bc51c:	4602      	mov	r2, r0
   bc51e:	460b      	mov	r3, r1
   bc520:	4640      	mov	r0, r8
   bc522:	4649      	mov	r1, r9
   bc524:	f000 fd2a 	bl	bcf7c <__aeabi_dsub>
   bc528:	9b00      	ldr	r3, [sp, #0]
   bc52a:	9a04      	ldr	r2, [sp, #16]
   bc52c:	3b01      	subs	r3, #1
   bc52e:	4313      	orrs	r3, r2
   bc530:	4682      	mov	sl, r0
   bc532:	468b      	mov	fp, r1
   bc534:	f040 81b6 	bne.w	bc8a4 <__ieee754_pow+0x894>
   bc538:	ed9f 7b19 	vldr	d7, [pc, #100]	; bc5a0 <__ieee754_pow+0x590>
   bc53c:	eeb0 8a47 	vmov.f32	s16, s14
   bc540:	eef0 8a67 	vmov.f32	s17, s15
   bc544:	e03c      	b.n	bc5c0 <__ieee754_pow+0x5b0>
   bc546:	bf00      	nop
   bc548:	00000000 	.word	0x00000000
   bc54c:	3ff00000 	.word	0x3ff00000
	...
   bc558:	4a454eef 	.word	0x4a454eef
   bc55c:	3fca7e28 	.word	0x3fca7e28
   bc560:	93c9db65 	.word	0x93c9db65
   bc564:	3fcd864a 	.word	0x3fcd864a
   bc568:	a91d4101 	.word	0xa91d4101
   bc56c:	3fd17460 	.word	0x3fd17460
   bc570:	518f264d 	.word	0x518f264d
   bc574:	3fd55555 	.word	0x3fd55555
   bc578:	db6fabff 	.word	0xdb6fabff
   bc57c:	3fdb6db6 	.word	0x3fdb6db6
   bc580:	33333303 	.word	0x33333303
   bc584:	3fe33333 	.word	0x3fe33333
   bc588:	e0000000 	.word	0xe0000000
   bc58c:	3feec709 	.word	0x3feec709
   bc590:	dc3a03fd 	.word	0xdc3a03fd
   bc594:	3feec709 	.word	0x3feec709
   bc598:	145b01f5 	.word	0x145b01f5
   bc59c:	be3e2fe0 	.word	0xbe3e2fe0
   bc5a0:	00000000 	.word	0x00000000
   bc5a4:	bff00000 	.word	0xbff00000
   bc5a8:	7ff00000 	.word	0x7ff00000
   bc5ac:	43400000 	.word	0x43400000
   bc5b0:	0003988e 	.word	0x0003988e
   bc5b4:	000bb679 	.word	0x000bb679
   bc5b8:	3ff00000 	.word	0x3ff00000
   bc5bc:	40080000 	.word	0x40080000
   bc5c0:	2300      	movs	r3, #0
   bc5c2:	e9cd 6700 	strd	r6, r7, [sp]
   bc5c6:	9300      	str	r3, [sp, #0]
   bc5c8:	e9dd 8900 	ldrd	r8, r9, [sp]
   bc5cc:	4630      	mov	r0, r6
   bc5ce:	4642      	mov	r2, r8
   bc5d0:	464b      	mov	r3, r9
   bc5d2:	4639      	mov	r1, r7
   bc5d4:	f000 fcd2 	bl	bcf7c <__aeabi_dsub>
   bc5d8:	4622      	mov	r2, r4
   bc5da:	462b      	mov	r3, r5
   bc5dc:	f000 fe86 	bl	bd2ec <__aeabi_dmul>
   bc5e0:	4632      	mov	r2, r6
   bc5e2:	463b      	mov	r3, r7
   bc5e4:	4606      	mov	r6, r0
   bc5e6:	460f      	mov	r7, r1
   bc5e8:	4650      	mov	r0, sl
   bc5ea:	4659      	mov	r1, fp
   bc5ec:	f000 fe7e 	bl	bd2ec <__aeabi_dmul>
   bc5f0:	4602      	mov	r2, r0
   bc5f2:	460b      	mov	r3, r1
   bc5f4:	4630      	mov	r0, r6
   bc5f6:	4639      	mov	r1, r7
   bc5f8:	f000 fcc2 	bl	bcf80 <__adddf3>
   bc5fc:	4642      	mov	r2, r8
   bc5fe:	464b      	mov	r3, r9
   bc600:	4606      	mov	r6, r0
   bc602:	460f      	mov	r7, r1
   bc604:	4620      	mov	r0, r4
   bc606:	4629      	mov	r1, r5
   bc608:	f000 fe70 	bl	bd2ec <__aeabi_dmul>
   bc60c:	4604      	mov	r4, r0
   bc60e:	460d      	mov	r5, r1
   bc610:	462b      	mov	r3, r5
   bc612:	4630      	mov	r0, r6
   bc614:	4639      	mov	r1, r7
   bc616:	4622      	mov	r2, r4
   bc618:	f000 fcb2 	bl	bcf80 <__adddf3>
   bc61c:	4bc2      	ldr	r3, [pc, #776]	; (bc928 <__ieee754_pow+0x918>)
   bc61e:	4299      	cmp	r1, r3
   bc620:	4680      	mov	r8, r0
   bc622:	4689      	mov	r9, r1
   bc624:	468a      	mov	sl, r1
   bc626:	f340 8118 	ble.w	bc85a <__ieee754_pow+0x84a>
   bc62a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   bc62e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   bc632:	4303      	orrs	r3, r0
   bc634:	f040 8207 	bne.w	bca46 <__ieee754_pow+0xa36>
   bc638:	a3a3      	add	r3, pc, #652	; (adr r3, bc8c8 <__ieee754_pow+0x8b8>)
   bc63a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc63e:	4630      	mov	r0, r6
   bc640:	4639      	mov	r1, r7
   bc642:	f000 fc9d 	bl	bcf80 <__adddf3>
   bc646:	4602      	mov	r2, r0
   bc648:	460b      	mov	r3, r1
   bc64a:	4640      	mov	r0, r8
   bc64c:	4649      	mov	r1, r9
   bc64e:	4690      	mov	r8, r2
   bc650:	4699      	mov	r9, r3
   bc652:	4622      	mov	r2, r4
   bc654:	462b      	mov	r3, r5
   bc656:	f000 fc91 	bl	bcf7c <__aeabi_dsub>
   bc65a:	4602      	mov	r2, r0
   bc65c:	460b      	mov	r3, r1
   bc65e:	4640      	mov	r0, r8
   bc660:	4649      	mov	r1, r9
   bc662:	f001 f8d3 	bl	bd80c <__aeabi_dcmpgt>
   bc666:	2800      	cmp	r0, #0
   bc668:	f040 81ed 	bne.w	bca46 <__ieee754_pow+0xa36>
   bc66c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   bc670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   bc674:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   bc678:	fa42 f303 	asr.w	r3, r2, r3
   bc67c:	4453      	add	r3, sl
   bc67e:	49ab      	ldr	r1, [pc, #684]	; (bc92c <__ieee754_pow+0x91c>)
   bc680:	f3c3 520a 	ubfx	r2, r3, #20, #11
   bc684:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   bc688:	fa41 fc02 	asr.w	ip, r1, r2
   bc68c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   bc690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc694:	f1c2 0214 	rsb	r2, r2, #20
   bc698:	fa41 f202 	asr.w	r2, r1, r2
   bc69c:	2000      	movs	r0, #0
   bc69e:	ea23 010c 	bic.w	r1, r3, ip
   bc6a2:	f1ba 0f00 	cmp.w	sl, #0
   bc6a6:	9200      	str	r2, [sp, #0]
   bc6a8:	460b      	mov	r3, r1
   bc6aa:	4602      	mov	r2, r0
   bc6ac:	da02      	bge.n	bc6b4 <__ieee754_pow+0x6a4>
   bc6ae:	9900      	ldr	r1, [sp, #0]
   bc6b0:	4249      	negs	r1, r1
   bc6b2:	9100      	str	r1, [sp, #0]
   bc6b4:	4620      	mov	r0, r4
   bc6b6:	4629      	mov	r1, r5
   bc6b8:	f000 fc60 	bl	bcf7c <__aeabi_dsub>
   bc6bc:	9b00      	ldr	r3, [sp, #0]
   bc6be:	051b      	lsls	r3, r3, #20
   bc6c0:	9302      	str	r3, [sp, #8]
   bc6c2:	4602      	mov	r2, r0
   bc6c4:	460b      	mov	r3, r1
   bc6c6:	4604      	mov	r4, r0
   bc6c8:	460d      	mov	r5, r1
   bc6ca:	4630      	mov	r0, r6
   bc6cc:	4639      	mov	r1, r7
   bc6ce:	f000 fc57 	bl	bcf80 <__adddf3>
   bc6d2:	4689      	mov	r9, r1
   bc6d4:	f04f 0800 	mov.w	r8, #0
   bc6d8:	a37d      	add	r3, pc, #500	; (adr r3, bc8d0 <__ieee754_pow+0x8c0>)
   bc6da:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc6de:	4640      	mov	r0, r8
   bc6e0:	4649      	mov	r1, r9
   bc6e2:	f000 fe03 	bl	bd2ec <__aeabi_dmul>
   bc6e6:	4622      	mov	r2, r4
   bc6e8:	462b      	mov	r3, r5
   bc6ea:	4682      	mov	sl, r0
   bc6ec:	468b      	mov	fp, r1
   bc6ee:	4640      	mov	r0, r8
   bc6f0:	4649      	mov	r1, r9
   bc6f2:	f000 fc43 	bl	bcf7c <__aeabi_dsub>
   bc6f6:	4602      	mov	r2, r0
   bc6f8:	460b      	mov	r3, r1
   bc6fa:	4630      	mov	r0, r6
   bc6fc:	4639      	mov	r1, r7
   bc6fe:	f000 fc3d 	bl	bcf7c <__aeabi_dsub>
   bc702:	a375      	add	r3, pc, #468	; (adr r3, bc8d8 <__ieee754_pow+0x8c8>)
   bc704:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc708:	f000 fdf0 	bl	bd2ec <__aeabi_dmul>
   bc70c:	a374      	add	r3, pc, #464	; (adr r3, bc8e0 <__ieee754_pow+0x8d0>)
   bc70e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc712:	4604      	mov	r4, r0
   bc714:	460d      	mov	r5, r1
   bc716:	4640      	mov	r0, r8
   bc718:	4649      	mov	r1, r9
   bc71a:	f000 fde7 	bl	bd2ec <__aeabi_dmul>
   bc71e:	4602      	mov	r2, r0
   bc720:	460b      	mov	r3, r1
   bc722:	4620      	mov	r0, r4
   bc724:	4629      	mov	r1, r5
   bc726:	f000 fc2b 	bl	bcf80 <__adddf3>
   bc72a:	4606      	mov	r6, r0
   bc72c:	460f      	mov	r7, r1
   bc72e:	4632      	mov	r2, r6
   bc730:	463b      	mov	r3, r7
   bc732:	4650      	mov	r0, sl
   bc734:	4659      	mov	r1, fp
   bc736:	f000 fc23 	bl	bcf80 <__adddf3>
   bc73a:	4652      	mov	r2, sl
   bc73c:	465b      	mov	r3, fp
   bc73e:	4604      	mov	r4, r0
   bc740:	460d      	mov	r5, r1
   bc742:	f000 fc1b 	bl	bcf7c <__aeabi_dsub>
   bc746:	4602      	mov	r2, r0
   bc748:	460b      	mov	r3, r1
   bc74a:	4630      	mov	r0, r6
   bc74c:	4639      	mov	r1, r7
   bc74e:	f000 fc15 	bl	bcf7c <__aeabi_dsub>
   bc752:	4622      	mov	r2, r4
   bc754:	4680      	mov	r8, r0
   bc756:	4689      	mov	r9, r1
   bc758:	462b      	mov	r3, r5
   bc75a:	4620      	mov	r0, r4
   bc75c:	4629      	mov	r1, r5
   bc75e:	f000 fdc5 	bl	bd2ec <__aeabi_dmul>
   bc762:	a361      	add	r3, pc, #388	; (adr r3, bc8e8 <__ieee754_pow+0x8d8>)
   bc764:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc768:	4606      	mov	r6, r0
   bc76a:	460f      	mov	r7, r1
   bc76c:	f000 fdbe 	bl	bd2ec <__aeabi_dmul>
   bc770:	a35f      	add	r3, pc, #380	; (adr r3, bc8f0 <__ieee754_pow+0x8e0>)
   bc772:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc776:	f000 fc01 	bl	bcf7c <__aeabi_dsub>
   bc77a:	4632      	mov	r2, r6
   bc77c:	463b      	mov	r3, r7
   bc77e:	f000 fdb5 	bl	bd2ec <__aeabi_dmul>
   bc782:	a35d      	add	r3, pc, #372	; (adr r3, bc8f8 <__ieee754_pow+0x8e8>)
   bc784:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc788:	f000 fbfa 	bl	bcf80 <__adddf3>
   bc78c:	4632      	mov	r2, r6
   bc78e:	463b      	mov	r3, r7
   bc790:	f000 fdac 	bl	bd2ec <__aeabi_dmul>
   bc794:	a35a      	add	r3, pc, #360	; (adr r3, bc900 <__ieee754_pow+0x8f0>)
   bc796:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc79a:	f000 fbef 	bl	bcf7c <__aeabi_dsub>
   bc79e:	4632      	mov	r2, r6
   bc7a0:	463b      	mov	r3, r7
   bc7a2:	f000 fda3 	bl	bd2ec <__aeabi_dmul>
   bc7a6:	a358      	add	r3, pc, #352	; (adr r3, bc908 <__ieee754_pow+0x8f8>)
   bc7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7ac:	f000 fbe8 	bl	bcf80 <__adddf3>
   bc7b0:	4632      	mov	r2, r6
   bc7b2:	463b      	mov	r3, r7
   bc7b4:	f000 fd9a 	bl	bd2ec <__aeabi_dmul>
   bc7b8:	4602      	mov	r2, r0
   bc7ba:	460b      	mov	r3, r1
   bc7bc:	4620      	mov	r0, r4
   bc7be:	4629      	mov	r1, r5
   bc7c0:	f000 fbdc 	bl	bcf7c <__aeabi_dsub>
   bc7c4:	4606      	mov	r6, r0
   bc7c6:	460f      	mov	r7, r1
   bc7c8:	4632      	mov	r2, r6
   bc7ca:	463b      	mov	r3, r7
   bc7cc:	4620      	mov	r0, r4
   bc7ce:	4629      	mov	r1, r5
   bc7d0:	f000 fd8c 	bl	bd2ec <__aeabi_dmul>
   bc7d4:	4602      	mov	r2, r0
   bc7d6:	460b      	mov	r3, r1
   bc7d8:	4630      	mov	r0, r6
   bc7da:	4639      	mov	r1, r7
   bc7dc:	4616      	mov	r6, r2
   bc7de:	461f      	mov	r7, r3
   bc7e0:	2200      	movs	r2, #0
   bc7e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc7e6:	f000 fbc9 	bl	bcf7c <__aeabi_dsub>
   bc7ea:	4602      	mov	r2, r0
   bc7ec:	460b      	mov	r3, r1
   bc7ee:	4630      	mov	r0, r6
   bc7f0:	4639      	mov	r1, r7
   bc7f2:	f000 fea5 	bl	bd540 <__aeabi_ddiv>
   bc7f6:	4642      	mov	r2, r8
   bc7f8:	4606      	mov	r6, r0
   bc7fa:	460f      	mov	r7, r1
   bc7fc:	464b      	mov	r3, r9
   bc7fe:	4620      	mov	r0, r4
   bc800:	4629      	mov	r1, r5
   bc802:	f000 fd73 	bl	bd2ec <__aeabi_dmul>
   bc806:	4642      	mov	r2, r8
   bc808:	464b      	mov	r3, r9
   bc80a:	f000 fbb9 	bl	bcf80 <__adddf3>
   bc80e:	4602      	mov	r2, r0
   bc810:	460b      	mov	r3, r1
   bc812:	4630      	mov	r0, r6
   bc814:	4639      	mov	r1, r7
   bc816:	f000 fbb1 	bl	bcf7c <__aeabi_dsub>
   bc81a:	4622      	mov	r2, r4
   bc81c:	462b      	mov	r3, r5
   bc81e:	f000 fbad 	bl	bcf7c <__aeabi_dsub>
   bc822:	4602      	mov	r2, r0
   bc824:	460b      	mov	r3, r1
   bc826:	2000      	movs	r0, #0
   bc828:	4941      	ldr	r1, [pc, #260]	; (bc930 <__ieee754_pow+0x920>)
   bc82a:	f000 fba7 	bl	bcf7c <__aeabi_dsub>
   bc82e:	9a02      	ldr	r2, [sp, #8]
   bc830:	460b      	mov	r3, r1
   bc832:	4413      	add	r3, r2
   bc834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   bc838:	f2c0 8143 	blt.w	bcac2 <__ieee754_pow+0xab2>
   bc83c:	4619      	mov	r1, r3
   bc83e:	ec53 2b18 	vmov	r2, r3, d8
   bc842:	f000 fd53 	bl	bd2ec <__aeabi_dmul>
   bc846:	ec41 0b10 	vmov	d0, r0, r1
   bc84a:	e42d      	b.n	bc0a8 <__ieee754_pow+0x98>
   bc84c:	f1bb 0f00 	cmp.w	fp, #0
   bc850:	f6ff aca0 	blt.w	bc194 <__ieee754_pow+0x184>
   bc854:	ed9f 0b2e 	vldr	d0, [pc, #184]	; bc910 <__ieee754_pow+0x900>
   bc858:	e426      	b.n	bc0a8 <__ieee754_pow+0x98>
   bc85a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; bc938 <__ieee754_pow+0x928>
   bc85e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bc862:	4563      	cmp	r3, ip
   bc864:	f340 80e7 	ble.w	bca36 <__ieee754_pow+0xa26>
   bc868:	4b32      	ldr	r3, [pc, #200]	; (bc934 <__ieee754_pow+0x924>)
   bc86a:	440b      	add	r3, r1
   bc86c:	4303      	orrs	r3, r0
   bc86e:	d10a      	bne.n	bc886 <__ieee754_pow+0x876>
   bc870:	4622      	mov	r2, r4
   bc872:	462b      	mov	r3, r5
   bc874:	f000 fb82 	bl	bcf7c <__aeabi_dsub>
   bc878:	4632      	mov	r2, r6
   bc87a:	463b      	mov	r3, r7
   bc87c:	f000 ffbc 	bl	bd7f8 <__aeabi_dcmpge>
   bc880:	2800      	cmp	r0, #0
   bc882:	f43f aef3 	beq.w	bc66c <__ieee754_pow+0x65c>
   bc886:	a324      	add	r3, pc, #144	; (adr r3, bc918 <__ieee754_pow+0x908>)
   bc888:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc88c:	ec51 0b18 	vmov	r0, r1, d8
   bc890:	f000 fd2c 	bl	bd2ec <__aeabi_dmul>
   bc894:	a320      	add	r3, pc, #128	; (adr r3, bc918 <__ieee754_pow+0x908>)
   bc896:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc89a:	f000 fd27 	bl	bd2ec <__aeabi_dmul>
   bc89e:	ec41 0b10 	vmov	d0, r0, r1
   bc8a2:	e401      	b.n	bc0a8 <__ieee754_pow+0x98>
   bc8a4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; bc920 <__ieee754_pow+0x910>
   bc8a8:	eeb0 8a47 	vmov.f32	s16, s14
   bc8ac:	eef0 8a67 	vmov.f32	s17, s15
   bc8b0:	e686      	b.n	bc5c0 <__ieee754_pow+0x5b0>
   bc8b2:	f1bb 0f00 	cmp.w	fp, #0
   bc8b6:	dacd      	bge.n	bc854 <__ieee754_pow+0x844>
   bc8b8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   bc8bc:	ee00 6a10 	vmov	s0, r6
   bc8c0:	ee00 3a90 	vmov	s1, r3
   bc8c4:	f7ff bbf0 	b.w	bc0a8 <__ieee754_pow+0x98>
   bc8c8:	652b82fe 	.word	0x652b82fe
   bc8cc:	3c971547 	.word	0x3c971547
   bc8d0:	00000000 	.word	0x00000000
   bc8d4:	3fe62e43 	.word	0x3fe62e43
   bc8d8:	fefa39ef 	.word	0xfefa39ef
   bc8dc:	3fe62e42 	.word	0x3fe62e42
   bc8e0:	0ca86c39 	.word	0x0ca86c39
   bc8e4:	be205c61 	.word	0xbe205c61
   bc8e8:	72bea4d0 	.word	0x72bea4d0
   bc8ec:	3e663769 	.word	0x3e663769
   bc8f0:	c5d26bf1 	.word	0xc5d26bf1
   bc8f4:	3ebbbd41 	.word	0x3ebbbd41
   bc8f8:	af25de2c 	.word	0xaf25de2c
   bc8fc:	3f11566a 	.word	0x3f11566a
   bc900:	16bebd93 	.word	0x16bebd93
   bc904:	3f66c16c 	.word	0x3f66c16c
   bc908:	5555553e 	.word	0x5555553e
   bc90c:	3fc55555 	.word	0x3fc55555
	...
   bc918:	c2f8f359 	.word	0xc2f8f359
   bc91c:	01a56e1f 	.word	0x01a56e1f
   bc920:	00000000 	.word	0x00000000
   bc924:	3ff00000 	.word	0x3ff00000
   bc928:	408fffff 	.word	0x408fffff
   bc92c:	000fffff 	.word	0x000fffff
   bc930:	3ff00000 	.word	0x3ff00000
   bc934:	3f6f3400 	.word	0x3f6f3400
   bc938:	4090cbff 	.word	0x4090cbff
   bc93c:	4598      	cmp	r8, r3
   bc93e:	db85      	blt.n	bc84c <__ieee754_pow+0x83c>
   bc940:	4b7d      	ldr	r3, [pc, #500]	; (bcb38 <__ieee754_pow+0xb28>)
   bc942:	4598      	cmp	r8, r3
   bc944:	f73f ac22 	bgt.w	bc18c <__ieee754_pow+0x17c>
   bc948:	ec51 0b10 	vmov	r0, r1, d0
   bc94c:	4b7a      	ldr	r3, [pc, #488]	; (bcb38 <__ieee754_pow+0xb28>)
   bc94e:	2200      	movs	r2, #0
   bc950:	f000 fb14 	bl	bcf7c <__aeabi_dsub>
   bc954:	a368      	add	r3, pc, #416	; (adr r3, bcaf8 <__ieee754_pow+0xae8>)
   bc956:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc95a:	4604      	mov	r4, r0
   bc95c:	460d      	mov	r5, r1
   bc95e:	f000 fcc5 	bl	bd2ec <__aeabi_dmul>
   bc962:	a367      	add	r3, pc, #412	; (adr r3, bcb00 <__ieee754_pow+0xaf0>)
   bc964:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc968:	4682      	mov	sl, r0
   bc96a:	468b      	mov	fp, r1
   bc96c:	4620      	mov	r0, r4
   bc96e:	4629      	mov	r1, r5
   bc970:	f000 fcbc 	bl	bd2ec <__aeabi_dmul>
   bc974:	4b71      	ldr	r3, [pc, #452]	; (bcb3c <__ieee754_pow+0xb2c>)
   bc976:	ec41 0b18 	vmov	d8, r0, r1
   bc97a:	2200      	movs	r2, #0
   bc97c:	4620      	mov	r0, r4
   bc97e:	4629      	mov	r1, r5
   bc980:	f000 fcb4 	bl	bd2ec <__aeabi_dmul>
   bc984:	4602      	mov	r2, r0
   bc986:	460b      	mov	r3, r1
   bc988:	a15f      	add	r1, pc, #380	; (adr r1, bcb08 <__ieee754_pow+0xaf8>)
   bc98a:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc98e:	f000 faf5 	bl	bcf7c <__aeabi_dsub>
   bc992:	4622      	mov	r2, r4
   bc994:	462b      	mov	r3, r5
   bc996:	f000 fca9 	bl	bd2ec <__aeabi_dmul>
   bc99a:	4602      	mov	r2, r0
   bc99c:	460b      	mov	r3, r1
   bc99e:	2000      	movs	r0, #0
   bc9a0:	4967      	ldr	r1, [pc, #412]	; (bcb40 <__ieee754_pow+0xb30>)
   bc9a2:	f000 faeb 	bl	bcf7c <__aeabi_dsub>
   bc9a6:	4622      	mov	r2, r4
   bc9a8:	4680      	mov	r8, r0
   bc9aa:	4689      	mov	r9, r1
   bc9ac:	462b      	mov	r3, r5
   bc9ae:	4620      	mov	r0, r4
   bc9b0:	4629      	mov	r1, r5
   bc9b2:	f000 fc9b 	bl	bd2ec <__aeabi_dmul>
   bc9b6:	4602      	mov	r2, r0
   bc9b8:	460b      	mov	r3, r1
   bc9ba:	4640      	mov	r0, r8
   bc9bc:	4649      	mov	r1, r9
   bc9be:	f000 fc95 	bl	bd2ec <__aeabi_dmul>
   bc9c2:	a353      	add	r3, pc, #332	; (adr r3, bcb10 <__ieee754_pow+0xb00>)
   bc9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc9c8:	f000 fc90 	bl	bd2ec <__aeabi_dmul>
   bc9cc:	4602      	mov	r2, r0
   bc9ce:	460b      	mov	r3, r1
   bc9d0:	ec51 0b18 	vmov	r0, r1, d8
   bc9d4:	f000 fad2 	bl	bcf7c <__aeabi_dsub>
   bc9d8:	4680      	mov	r8, r0
   bc9da:	4689      	mov	r9, r1
   bc9dc:	4642      	mov	r2, r8
   bc9de:	464b      	mov	r3, r9
   bc9e0:	4650      	mov	r0, sl
   bc9e2:	4659      	mov	r1, fp
   bc9e4:	f000 facc 	bl	bcf80 <__adddf3>
   bc9e8:	2000      	movs	r0, #0
   bc9ea:	4652      	mov	r2, sl
   bc9ec:	465b      	mov	r3, fp
   bc9ee:	4604      	mov	r4, r0
   bc9f0:	460d      	mov	r5, r1
   bc9f2:	e591      	b.n	bc518 <__ieee754_pow+0x508>
   bc9f4:	4622      	mov	r2, r4
   bc9f6:	462b      	mov	r3, r5
   bc9f8:	4620      	mov	r0, r4
   bc9fa:	4629      	mov	r1, r5
   bc9fc:	f000 fc76 	bl	bd2ec <__aeabi_dmul>
   bca00:	ec41 0b10 	vmov	d0, r0, r1
   bca04:	f7ff bb50 	b.w	bc0a8 <__ieee754_pow+0x98>
   bca08:	494b      	ldr	r1, [pc, #300]	; (bcb38 <__ieee754_pow+0xb28>)
   bca0a:	2000      	movs	r0, #0
   bca0c:	4622      	mov	r2, r4
   bca0e:	462b      	mov	r3, r5
   bca10:	f000 fd96 	bl	bd540 <__aeabi_ddiv>
   bca14:	ec41 0b10 	vmov	d0, r0, r1
   bca18:	f7ff bb46 	b.w	bc0a8 <__ieee754_pow+0x98>
   bca1c:	2b00      	cmp	r3, #0
   bca1e:	d144      	bne.n	bcaaa <__ieee754_pow+0xa9a>
   bca20:	f1c1 0114 	rsb	r1, r1, #20
   bca24:	fa4a f001 	asr.w	r0, sl, r1
   bca28:	fa00 f101 	lsl.w	r1, r0, r1
   bca2c:	4551      	cmp	r1, sl
   bca2e:	d05a      	beq.n	bcae6 <__ieee754_pow+0xad6>
   bca30:	9300      	str	r3, [sp, #0]
   bca32:	f7ff bb17 	b.w	bc064 <__ieee754_pow+0x54>
   bca36:	4a42      	ldr	r2, [pc, #264]	; (bcb40 <__ieee754_pow+0xb30>)
   bca38:	4293      	cmp	r3, r2
   bca3a:	dc5b      	bgt.n	bcaf4 <__ieee754_pow+0xae4>
   bca3c:	e9dd 1200 	ldrd	r1, r2, [sp]
   bca40:	9102      	str	r1, [sp, #8]
   bca42:	9100      	str	r1, [sp, #0]
   bca44:	e646      	b.n	bc6d4 <__ieee754_pow+0x6c4>
   bca46:	a334      	add	r3, pc, #208	; (adr r3, bcb18 <__ieee754_pow+0xb08>)
   bca48:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca4c:	ec51 0b18 	vmov	r0, r1, d8
   bca50:	f000 fc4c 	bl	bd2ec <__aeabi_dmul>
   bca54:	a330      	add	r3, pc, #192	; (adr r3, bcb18 <__ieee754_pow+0xb08>)
   bca56:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca5a:	f000 fc47 	bl	bd2ec <__aeabi_dmul>
   bca5e:	ec41 0b10 	vmov	d0, r0, r1
   bca62:	f7ff bb21 	b.w	bc0a8 <__ieee754_pow+0x98>
   bca66:	9b00      	ldr	r3, [sp, #0]
   bca68:	2b01      	cmp	r3, #1
   bca6a:	f47f ab1d 	bne.w	bc0a8 <__ieee754_pow+0x98>
   bca6e:	ee10 1a90 	vmov	r1, s1
   bca72:	ee10 2a10 	vmov	r2, s0
   bca76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bca7a:	ec43 2b10 	vmov	d0, r2, r3
   bca7e:	f7ff bb13 	b.w	bc0a8 <__ieee754_pow+0x98>
   bca82:	ed9f 7b27 	vldr	d7, [pc, #156]	; bcb20 <__ieee754_pow+0xb10>
   bca86:	eeb0 ca47 	vmov.f32	s24, s14
   bca8a:	eef0 ca67 	vmov.f32	s25, s15
   bca8e:	ed9f 7b26 	vldr	d7, [pc, #152]	; bcb28 <__ieee754_pow+0xb18>
   bca92:	eeb0 da47 	vmov.f32	s26, s14
   bca96:	eef0 da67 	vmov.f32	s27, s15
   bca9a:	ed9f 7b25 	vldr	d7, [pc, #148]	; bcb30 <__ieee754_pow+0xb20>
   bca9e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   bcaa2:	ec53 2b17 	vmov	r2, r3, d7
   bcaa6:	f7ff bbeb 	b.w	bc280 <__ieee754_pow+0x270>
   bcaaa:	ec45 4b10 	vmov	d0, r4, r5
   bcaae:	9200      	str	r2, [sp, #0]
   bcab0:	f000 f914 	bl	bccdc <fabs>
   bcab4:	9a00      	ldr	r2, [sp, #0]
   bcab6:	2a00      	cmp	r2, #0
   bcab8:	f47f ab92 	bne.w	bc1e0 <__ieee754_pow+0x1d0>
   bcabc:	9200      	str	r2, [sp, #0]
   bcabe:	f7ff bb26 	b.w	bc10e <__ieee754_pow+0xfe>
   bcac2:	ec41 0b10 	vmov	d0, r0, r1
   bcac6:	9800      	ldr	r0, [sp, #0]
   bcac8:	f000 f9c2 	bl	bce50 <scalbn>
   bcacc:	ec51 0b10 	vmov	r0, r1, d0
   bcad0:	e6b5      	b.n	bc83e <__ieee754_pow+0x82e>
   bcad2:	f000 0001 	and.w	r0, r0, #1
   bcad6:	f1c0 0102 	rsb	r1, r0, #2
   bcada:	9100      	str	r1, [sp, #0]
   bcadc:	2b00      	cmp	r3, #0
   bcade:	f43f aac1 	beq.w	bc064 <__ieee754_pow+0x54>
   bcae2:	f7ff bb0d 	b.w	bc100 <__ieee754_pow+0xf0>
   bcae6:	f000 0001 	and.w	r0, r0, #1
   bcaea:	f1c0 0302 	rsb	r3, r0, #2
   bcaee:	9300      	str	r3, [sp, #0]
   bcaf0:	f7ff bab8 	b.w	bc064 <__ieee754_pow+0x54>
   bcaf4:	151b      	asrs	r3, r3, #20
   bcaf6:	e5bb      	b.n	bc670 <__ieee754_pow+0x660>
   bcaf8:	60000000 	.word	0x60000000
   bcafc:	3ff71547 	.word	0x3ff71547
   bcb00:	f85ddf44 	.word	0xf85ddf44
   bcb04:	3e54ae0b 	.word	0x3e54ae0b
   bcb08:	55555555 	.word	0x55555555
   bcb0c:	3fd55555 	.word	0x3fd55555
   bcb10:	652b82fe 	.word	0x652b82fe
   bcb14:	3ff71547 	.word	0x3ff71547
   bcb18:	8800759c 	.word	0x8800759c
   bcb1c:	7e37e43c 	.word	0x7e37e43c
   bcb20:	40000000 	.word	0x40000000
   bcb24:	3fe2b803 	.word	0x3fe2b803
   bcb28:	43cfd006 	.word	0x43cfd006
   bcb2c:	3e4cfdeb 	.word	0x3e4cfdeb
   bcb30:	00000000 	.word	0x00000000
   bcb34:	3ff80000 	.word	0x3ff80000
   bcb38:	3ff00000 	.word	0x3ff00000
   bcb3c:	3fd00000 	.word	0x3fd00000
   bcb40:	3fe00000 	.word	0x3fe00000

000bcb44 <__ieee754_sqrt>:
   bcb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcb48:	4a63      	ldr	r2, [pc, #396]	; (bccd8 <__ieee754_sqrt+0x194>)
   bcb4a:	ec55 4b10 	vmov	r4, r5, d0
   bcb4e:	43aa      	bics	r2, r5
   bcb50:	f000 809f 	beq.w	bcc92 <__ieee754_sqrt+0x14e>
   bcb54:	2d00      	cmp	r5, #0
   bcb56:	ee10 ca10 	vmov	ip, s0
   bcb5a:	462b      	mov	r3, r5
   bcb5c:	dd54      	ble.n	bcc08 <__ieee754_sqrt+0xc4>
   bcb5e:	1529      	asrs	r1, r5, #20
   bcb60:	d063      	beq.n	bcc2a <__ieee754_sqrt+0xe6>
   bcb62:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bcb66:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bcb6a:	07c9      	lsls	r1, r1, #31
   bcb6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bcb70:	d404      	bmi.n	bcb7c <__ieee754_sqrt+0x38>
   bcb72:	005b      	lsls	r3, r3, #1
   bcb74:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bcb78:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcb7c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bcb80:	2600      	movs	r6, #0
   bcb82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bcb86:	107f      	asrs	r7, r7, #1
   bcb88:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcb8c:	f04f 0e16 	mov.w	lr, #22
   bcb90:	4634      	mov	r4, r6
   bcb92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bcb96:	18a1      	adds	r1, r4, r2
   bcb98:	4299      	cmp	r1, r3
   bcb9a:	dc02      	bgt.n	bcba2 <__ieee754_sqrt+0x5e>
   bcb9c:	1a5b      	subs	r3, r3, r1
   bcb9e:	188c      	adds	r4, r1, r2
   bcba0:	4416      	add	r6, r2
   bcba2:	005b      	lsls	r3, r3, #1
   bcba4:	f1be 0e01 	subs.w	lr, lr, #1
   bcba8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bcbac:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bcbb0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcbb4:	d1ef      	bne.n	bcb96 <__ieee754_sqrt+0x52>
   bcbb6:	4675      	mov	r5, lr
   bcbb8:	2020      	movs	r0, #32
   bcbba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bcbbe:	e00a      	b.n	bcbd6 <__ieee754_sqrt+0x92>
   bcbc0:	d044      	beq.n	bcc4c <__ieee754_sqrt+0x108>
   bcbc2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bcbc6:	3801      	subs	r0, #1
   bcbc8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bcbcc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcbd0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bcbd4:	d043      	beq.n	bcc5e <__ieee754_sqrt+0x11a>
   bcbd6:	42a3      	cmp	r3, r4
   bcbd8:	eb02 010e 	add.w	r1, r2, lr
   bcbdc:	ddf0      	ble.n	bcbc0 <__ieee754_sqrt+0x7c>
   bcbde:	2900      	cmp	r1, #0
   bcbe0:	eb01 0e02 	add.w	lr, r1, r2
   bcbe4:	db0a      	blt.n	bcbfc <__ieee754_sqrt+0xb8>
   bcbe6:	46a0      	mov	r8, r4
   bcbe8:	1b1b      	subs	r3, r3, r4
   bcbea:	4561      	cmp	r1, ip
   bcbec:	bf88      	it	hi
   bcbee:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bcbf2:	ebac 0c01 	sub.w	ip, ip, r1
   bcbf6:	4415      	add	r5, r2
   bcbf8:	4644      	mov	r4, r8
   bcbfa:	e7e2      	b.n	bcbc2 <__ieee754_sqrt+0x7e>
   bcbfc:	f1be 0f00 	cmp.w	lr, #0
   bcc00:	dbf1      	blt.n	bcbe6 <__ieee754_sqrt+0xa2>
   bcc02:	f104 0801 	add.w	r8, r4, #1
   bcc06:	e7ef      	b.n	bcbe8 <__ieee754_sqrt+0xa4>
   bcc08:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bcc0c:	4322      	orrs	r2, r4
   bcc0e:	d038      	beq.n	bcc82 <__ieee754_sqrt+0x13e>
   bcc10:	2d00      	cmp	r5, #0
   bcc12:	d14e      	bne.n	bccb2 <__ieee754_sqrt+0x16e>
   bcc14:	4629      	mov	r1, r5
   bcc16:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bcc1a:	3915      	subs	r1, #21
   bcc1c:	4613      	mov	r3, r2
   bcc1e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bcc22:	2a00      	cmp	r2, #0
   bcc24:	d0f7      	beq.n	bcc16 <__ieee754_sqrt+0xd2>
   bcc26:	02d6      	lsls	r6, r2, #11
   bcc28:	d450      	bmi.n	bcccc <__ieee754_sqrt+0x188>
   bcc2a:	2000      	movs	r0, #0
   bcc2c:	005b      	lsls	r3, r3, #1
   bcc2e:	02dd      	lsls	r5, r3, #11
   bcc30:	4604      	mov	r4, r0
   bcc32:	f100 0001 	add.w	r0, r0, #1
   bcc36:	d5f9      	bpl.n	bcc2c <__ieee754_sqrt+0xe8>
   bcc38:	461a      	mov	r2, r3
   bcc3a:	4663      	mov	r3, ip
   bcc3c:	fa0c fc00 	lsl.w	ip, ip, r0
   bcc40:	f1c0 0020 	rsb	r0, r0, #32
   bcc44:	40c3      	lsrs	r3, r0
   bcc46:	1b09      	subs	r1, r1, r4
   bcc48:	4313      	orrs	r3, r2
   bcc4a:	e78a      	b.n	bcb62 <__ieee754_sqrt+0x1e>
   bcc4c:	4561      	cmp	r1, ip
   bcc4e:	d8b8      	bhi.n	bcbc2 <__ieee754_sqrt+0x7e>
   bcc50:	2900      	cmp	r1, #0
   bcc52:	eb01 0e02 	add.w	lr, r1, r2
   bcc56:	dbd1      	blt.n	bcbfc <__ieee754_sqrt+0xb8>
   bcc58:	4698      	mov	r8, r3
   bcc5a:	2300      	movs	r3, #0
   bcc5c:	e7c9      	b.n	bcbf2 <__ieee754_sqrt+0xae>
   bcc5e:	ea53 030c 	orrs.w	r3, r3, ip
   bcc62:	d110      	bne.n	bcc86 <__ieee754_sqrt+0x142>
   bcc64:	0868      	lsrs	r0, r5, #1
   bcc66:	1071      	asrs	r1, r6, #1
   bcc68:	07f3      	lsls	r3, r6, #31
   bcc6a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bcc6e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bcc72:	bf48      	it	mi
   bcc74:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bcc78:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bcc7c:	4602      	mov	r2, r0
   bcc7e:	ec43 2b10 	vmov	d0, r2, r3
   bcc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcc86:	1c6a      	adds	r2, r5, #1
   bcc88:	bf16      	itet	ne
   bcc8a:	1c68      	addne	r0, r5, #1
   bcc8c:	3601      	addeq	r6, #1
   bcc8e:	0840      	lsrne	r0, r0, #1
   bcc90:	e7e9      	b.n	bcc66 <__ieee754_sqrt+0x122>
   bcc92:	ee10 2a10 	vmov	r2, s0
   bcc96:	ee10 0a10 	vmov	r0, s0
   bcc9a:	462b      	mov	r3, r5
   bcc9c:	4629      	mov	r1, r5
   bcc9e:	f000 fb25 	bl	bd2ec <__aeabi_dmul>
   bcca2:	4622      	mov	r2, r4
   bcca4:	462b      	mov	r3, r5
   bcca6:	f000 f96b 	bl	bcf80 <__adddf3>
   bccaa:	ec41 0b10 	vmov	d0, r0, r1
   bccae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bccb2:	ee10 2a10 	vmov	r2, s0
   bccb6:	4620      	mov	r0, r4
   bccb8:	4629      	mov	r1, r5
   bccba:	f000 f95f 	bl	bcf7c <__aeabi_dsub>
   bccbe:	4602      	mov	r2, r0
   bccc0:	460b      	mov	r3, r1
   bccc2:	f000 fc3d 	bl	bd540 <__aeabi_ddiv>
   bccc6:	ec41 0b10 	vmov	d0, r0, r1
   bccca:	e7da      	b.n	bcc82 <__ieee754_sqrt+0x13e>
   bcccc:	4663      	mov	r3, ip
   bccce:	2020      	movs	r0, #32
   bccd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bccd4:	e7b6      	b.n	bcc44 <__ieee754_sqrt+0x100>
   bccd6:	bf00      	nop
   bccd8:	7ff00000 	.word	0x7ff00000

000bccdc <fabs>:
   bccdc:	ec51 0b10 	vmov	r0, r1, d0
   bcce0:	ee10 2a10 	vmov	r2, s0
   bcce4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bcce8:	ec43 2b10 	vmov	d0, r2, r3
   bccec:	4770      	bx	lr
   bccee:	bf00      	nop

000bccf0 <finite>:
   bccf0:	b082      	sub	sp, #8
   bccf2:	ed8d 0b00 	vstr	d0, [sp]
   bccf6:	9801      	ldr	r0, [sp, #4]
   bccf8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bccfc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bcd00:	0fc0      	lsrs	r0, r0, #31
   bcd02:	b002      	add	sp, #8
   bcd04:	4770      	bx	lr
   bcd06:	bf00      	nop

000bcd08 <nan>:
   bcd08:	ed9f 0b01 	vldr	d0, [pc, #4]	; bcd10 <nan+0x8>
   bcd0c:	4770      	bx	lr
   bcd0e:	bf00      	nop
   bcd10:	00000000 	.word	0x00000000
   bcd14:	7ff80000 	.word	0x7ff80000

000bcd18 <rint>:
   bcd18:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcd1a:	ec53 2b10 	vmov	r2, r3, d0
   bcd1e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bcd22:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bcd26:	2913      	cmp	r1, #19
   bcd28:	ee10 0a10 	vmov	r0, s0
   bcd2c:	b083      	sub	sp, #12
   bcd2e:	461c      	mov	r4, r3
   bcd30:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   bcd34:	dc3a      	bgt.n	bcdac <rint+0x94>
   bcd36:	2900      	cmp	r1, #0
   bcd38:	db30      	blt.n	bcd9c <rint+0x84>
   bcd3a:	4d42      	ldr	r5, [pc, #264]	; (bce44 <rint+0x12c>)
   bcd3c:	fa45 fc01 	asr.w	ip, r5, r1
   bcd40:	ea03 050c 	and.w	r5, r3, ip
   bcd44:	4315      	orrs	r5, r2
   bcd46:	d02d      	beq.n	bcda4 <rint+0x8c>
   bcd48:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   bcd4c:	4318      	orrs	r0, r3
   bcd4e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   bcd52:	d00c      	beq.n	bcd6e <rint+0x56>
   bcd54:	ea24 0c0c 	bic.w	ip, r4, ip
   bcd58:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bcd5c:	2913      	cmp	r1, #19
   bcd5e:	fa44 f101 	asr.w	r1, r4, r1
   bcd62:	bf0c      	ite	eq
   bcd64:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bcd68:	2000      	movne	r0, #0
   bcd6a:	ea4c 0401 	orr.w	r4, ip, r1
   bcd6e:	4936      	ldr	r1, [pc, #216]	; (bce48 <rint+0x130>)
   bcd70:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bcd74:	4623      	mov	r3, r4
   bcd76:	e9de 4500 	ldrd	r4, r5, [lr]
   bcd7a:	4602      	mov	r2, r0
   bcd7c:	4629      	mov	r1, r5
   bcd7e:	4620      	mov	r0, r4
   bcd80:	f000 f8fe 	bl	bcf80 <__adddf3>
   bcd84:	e9cd 0100 	strd	r0, r1, [sp]
   bcd88:	e9dd 0100 	ldrd	r0, r1, [sp]
   bcd8c:	4622      	mov	r2, r4
   bcd8e:	462b      	mov	r3, r5
   bcd90:	f000 f8f4 	bl	bcf7c <__aeabi_dsub>
   bcd94:	ec41 0b10 	vmov	d0, r0, r1
   bcd98:	b003      	add	sp, #12
   bcd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcd9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bcda0:	4311      	orrs	r1, r2
   bcda2:	d124      	bne.n	bcdee <rint+0xd6>
   bcda4:	ec43 2b10 	vmov	d0, r2, r3
   bcda8:	b003      	add	sp, #12
   bcdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcdac:	2933      	cmp	r1, #51	; 0x33
   bcdae:	dd08      	ble.n	bcdc2 <rint+0xaa>
   bcdb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bcdb4:	d1f6      	bne.n	bcda4 <rint+0x8c>
   bcdb6:	4619      	mov	r1, r3
   bcdb8:	f000 f8e2 	bl	bcf80 <__adddf3>
   bcdbc:	ec41 0b10 	vmov	d0, r0, r1
   bcdc0:	e7f2      	b.n	bcda8 <rint+0x90>
   bcdc2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bcdc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bcdca:	fa21 f10c 	lsr.w	r1, r1, ip
   bcdce:	420a      	tst	r2, r1
   bcdd0:	d0e8      	beq.n	bcda4 <rint+0x8c>
   bcdd2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bcdd6:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bcdda:	d0c8      	beq.n	bcd6e <rint+0x56>
   bcddc:	ea20 0303 	bic.w	r3, r0, r3
   bcde0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bcde4:	fa40 fc0c 	asr.w	ip, r0, ip
   bcde8:	ea43 000c 	orr.w	r0, r3, ip
   bcdec:	e7bf      	b.n	bcd6e <rint+0x56>
   bcdee:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bcdf2:	4318      	orrs	r0, r3
   bcdf4:	4a14      	ldr	r2, [pc, #80]	; (bce48 <rint+0x130>)
   bcdf6:	4243      	negs	r3, r0
   bcdf8:	4303      	orrs	r3, r0
   bcdfa:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   bcdfe:	0b1b      	lsrs	r3, r3, #12
   bce00:	0c62      	lsrs	r2, r4, #17
   bce02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   bce06:	0452      	lsls	r2, r2, #17
   bce08:	ea43 0702 	orr.w	r7, r3, r2
   bce0c:	463b      	mov	r3, r7
   bce0e:	e9de 6700 	ldrd	r6, r7, [lr]
   bce12:	ee10 2a10 	vmov	r2, s0
   bce16:	4630      	mov	r0, r6
   bce18:	4639      	mov	r1, r7
   bce1a:	f000 f8b1 	bl	bcf80 <__adddf3>
   bce1e:	e9cd 0100 	strd	r0, r1, [sp]
   bce22:	4632      	mov	r2, r6
   bce24:	463b      	mov	r3, r7
   bce26:	e9dd 0100 	ldrd	r0, r1, [sp]
   bce2a:	f000 f8a7 	bl	bcf7c <__aeabi_dsub>
   bce2e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   bce32:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bce36:	4602      	mov	r2, r0
   bce38:	ea41 0304 	orr.w	r3, r1, r4
   bce3c:	ec43 2b10 	vmov	d0, r2, r3
   bce40:	b003      	add	sp, #12
   bce42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bce44:	000fffff 	.word	0x000fffff
   bce48:	000bf368 	.word	0x000bf368
   bce4c:	00000000 	.word	0x00000000

000bce50 <scalbn>:
   bce50:	b538      	push	{r3, r4, r5, lr}
   bce52:	ec53 2b10 	vmov	r2, r3, d0
   bce56:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bce5a:	4604      	mov	r4, r0
   bce5c:	469c      	mov	ip, r3
   bce5e:	bb89      	cbnz	r1, bcec4 <scalbn+0x74>
   bce60:	ee10 1a10 	vmov	r1, s0
   bce64:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bce68:	ea5c 0101 	orrs.w	r1, ip, r1
   bce6c:	d029      	beq.n	bcec2 <scalbn+0x72>
   bce6e:	4619      	mov	r1, r3
   bce70:	2200      	movs	r2, #0
   bce72:	4b3d      	ldr	r3, [pc, #244]	; (bcf68 <scalbn+0x118>)
   bce74:	4d3d      	ldr	r5, [pc, #244]	; (bcf6c <scalbn+0x11c>)
   bce76:	ee10 0a10 	vmov	r0, s0
   bce7a:	f000 fa37 	bl	bd2ec <__aeabi_dmul>
   bce7e:	42ac      	cmp	r4, r5
   bce80:	4602      	mov	r2, r0
   bce82:	460b      	mov	r3, r1
   bce84:	db16      	blt.n	bceb4 <scalbn+0x64>
   bce86:	468c      	mov	ip, r1
   bce88:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bce8c:	3936      	subs	r1, #54	; 0x36
   bce8e:	4421      	add	r1, r4
   bce90:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bce94:	4281      	cmp	r1, r0
   bce96:	dc21      	bgt.n	bcedc <scalbn+0x8c>
   bce98:	2900      	cmp	r1, #0
   bce9a:	dc47      	bgt.n	bcf2c <scalbn+0xdc>
   bce9c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bcea0:	da34      	bge.n	bcf0c <scalbn+0xbc>
   bcea2:	f24c 3150 	movw	r1, #50000	; 0xc350
   bcea6:	428c      	cmp	r4, r1
   bcea8:	dc18      	bgt.n	bcedc <scalbn+0x8c>
   bceaa:	2b00      	cmp	r3, #0
   bceac:	a126      	add	r1, pc, #152	; (adr r1, bcf48 <scalbn+0xf8>)
   bceae:	e9d1 0100 	ldrd	r0, r1, [r1]
   bceb2:	db44      	blt.n	bcf3e <scalbn+0xee>
   bceb4:	a324      	add	r3, pc, #144	; (adr r3, bcf48 <scalbn+0xf8>)
   bceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bceba:	f000 fa17 	bl	bd2ec <__aeabi_dmul>
   bcebe:	ec41 0b10 	vmov	d0, r0, r1
   bcec2:	bd38      	pop	{r3, r4, r5, pc}
   bcec4:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bcec8:	4281      	cmp	r1, r0
   bceca:	d1e0      	bne.n	bce8e <scalbn+0x3e>
   bcecc:	ee10 0a10 	vmov	r0, s0
   bced0:	4619      	mov	r1, r3
   bced2:	f000 f855 	bl	bcf80 <__adddf3>
   bced6:	ec41 0b10 	vmov	d0, r0, r1
   bceda:	bd38      	pop	{r3, r4, r5, pc}
   bcedc:	2b00      	cmp	r3, #0
   bcede:	a11c      	add	r1, pc, #112	; (adr r1, bcf50 <scalbn+0x100>)
   bcee0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcee4:	db07      	blt.n	bcef6 <scalbn+0xa6>
   bcee6:	a31a      	add	r3, pc, #104	; (adr r3, bcf50 <scalbn+0x100>)
   bcee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bceec:	f000 f9fe 	bl	bd2ec <__aeabi_dmul>
   bcef0:	ec41 0b10 	vmov	d0, r0, r1
   bcef4:	bd38      	pop	{r3, r4, r5, pc}
   bcef6:	a118      	add	r1, pc, #96	; (adr r1, bcf58 <scalbn+0x108>)
   bcef8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcefc:	a314      	add	r3, pc, #80	; (adr r3, bcf50 <scalbn+0x100>)
   bcefe:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcf02:	f000 f9f3 	bl	bd2ec <__aeabi_dmul>
   bcf06:	ec41 0b10 	vmov	d0, r0, r1
   bcf0a:	e7f3      	b.n	bcef4 <scalbn+0xa4>
   bcf0c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bcf10:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bcf14:	3136      	adds	r1, #54	; 0x36
   bcf16:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bcf1a:	4610      	mov	r0, r2
   bcf1c:	4619      	mov	r1, r3
   bcf1e:	2200      	movs	r2, #0
   bcf20:	4b13      	ldr	r3, [pc, #76]	; (bcf70 <scalbn+0x120>)
   bcf22:	f000 f9e3 	bl	bd2ec <__aeabi_dmul>
   bcf26:	ec41 0b10 	vmov	d0, r0, r1
   bcf2a:	bd38      	pop	{r3, r4, r5, pc}
   bcf2c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bcf30:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bcf34:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bcf38:	ec43 2b10 	vmov	d0, r2, r3
   bcf3c:	bd38      	pop	{r3, r4, r5, pc}
   bcf3e:	a108      	add	r1, pc, #32	; (adr r1, bcf60 <scalbn+0x110>)
   bcf40:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcf44:	e7b6      	b.n	bceb4 <scalbn+0x64>
   bcf46:	bf00      	nop
   bcf48:	c2f8f359 	.word	0xc2f8f359
   bcf4c:	01a56e1f 	.word	0x01a56e1f
   bcf50:	8800759c 	.word	0x8800759c
   bcf54:	7e37e43c 	.word	0x7e37e43c
   bcf58:	8800759c 	.word	0x8800759c
   bcf5c:	fe37e43c 	.word	0xfe37e43c
   bcf60:	c2f8f359 	.word	0xc2f8f359
   bcf64:	81a56e1f 	.word	0x81a56e1f
   bcf68:	43500000 	.word	0x43500000
   bcf6c:	ffff3cb0 	.word	0xffff3cb0
   bcf70:	3c900000 	.word	0x3c900000

000bcf74 <__aeabi_drsub>:
   bcf74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bcf78:	e002      	b.n	bcf80 <__adddf3>
   bcf7a:	bf00      	nop

000bcf7c <__aeabi_dsub>:
   bcf7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bcf80 <__adddf3>:
   bcf80:	b530      	push	{r4, r5, lr}
   bcf82:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bcf86:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bcf8a:	ea94 0f05 	teq	r4, r5
   bcf8e:	bf08      	it	eq
   bcf90:	ea90 0f02 	teqeq	r0, r2
   bcf94:	bf1f      	itttt	ne
   bcf96:	ea54 0c00 	orrsne.w	ip, r4, r0
   bcf9a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bcf9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bcfa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcfa6:	f000 80e2 	beq.w	bd16e <__adddf3+0x1ee>
   bcfaa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bcfae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bcfb2:	bfb8      	it	lt
   bcfb4:	426d      	neglt	r5, r5
   bcfb6:	dd0c      	ble.n	bcfd2 <__adddf3+0x52>
   bcfb8:	442c      	add	r4, r5
   bcfba:	ea80 0202 	eor.w	r2, r0, r2
   bcfbe:	ea81 0303 	eor.w	r3, r1, r3
   bcfc2:	ea82 0000 	eor.w	r0, r2, r0
   bcfc6:	ea83 0101 	eor.w	r1, r3, r1
   bcfca:	ea80 0202 	eor.w	r2, r0, r2
   bcfce:	ea81 0303 	eor.w	r3, r1, r3
   bcfd2:	2d36      	cmp	r5, #54	; 0x36
   bcfd4:	bf88      	it	hi
   bcfd6:	bd30      	pophi	{r4, r5, pc}
   bcfd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bcfdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bcfe0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bcfe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bcfe8:	d002      	beq.n	bcff0 <__adddf3+0x70>
   bcfea:	4240      	negs	r0, r0
   bcfec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcff0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bcff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bcff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bcffc:	d002      	beq.n	bd004 <__adddf3+0x84>
   bcffe:	4252      	negs	r2, r2
   bd000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd004:	ea94 0f05 	teq	r4, r5
   bd008:	f000 80a7 	beq.w	bd15a <__adddf3+0x1da>
   bd00c:	f1a4 0401 	sub.w	r4, r4, #1
   bd010:	f1d5 0e20 	rsbs	lr, r5, #32
   bd014:	db0d      	blt.n	bd032 <__adddf3+0xb2>
   bd016:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd01a:	fa22 f205 	lsr.w	r2, r2, r5
   bd01e:	1880      	adds	r0, r0, r2
   bd020:	f141 0100 	adc.w	r1, r1, #0
   bd024:	fa03 f20e 	lsl.w	r2, r3, lr
   bd028:	1880      	adds	r0, r0, r2
   bd02a:	fa43 f305 	asr.w	r3, r3, r5
   bd02e:	4159      	adcs	r1, r3
   bd030:	e00e      	b.n	bd050 <__adddf3+0xd0>
   bd032:	f1a5 0520 	sub.w	r5, r5, #32
   bd036:	f10e 0e20 	add.w	lr, lr, #32
   bd03a:	2a01      	cmp	r2, #1
   bd03c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd040:	bf28      	it	cs
   bd042:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd046:	fa43 f305 	asr.w	r3, r3, r5
   bd04a:	18c0      	adds	r0, r0, r3
   bd04c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd054:	d507      	bpl.n	bd066 <__adddf3+0xe6>
   bd056:	f04f 0e00 	mov.w	lr, #0
   bd05a:	f1dc 0c00 	rsbs	ip, ip, #0
   bd05e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd062:	eb6e 0101 	sbc.w	r1, lr, r1
   bd066:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd06a:	d31b      	bcc.n	bd0a4 <__adddf3+0x124>
   bd06c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd070:	d30c      	bcc.n	bd08c <__adddf3+0x10c>
   bd072:	0849      	lsrs	r1, r1, #1
   bd074:	ea5f 0030 	movs.w	r0, r0, rrx
   bd078:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd07c:	f104 0401 	add.w	r4, r4, #1
   bd080:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd084:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd088:	f080 809a 	bcs.w	bd1c0 <__adddf3+0x240>
   bd08c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd090:	bf08      	it	eq
   bd092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd096:	f150 0000 	adcs.w	r0, r0, #0
   bd09a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd09e:	ea41 0105 	orr.w	r1, r1, r5
   bd0a2:	bd30      	pop	{r4, r5, pc}
   bd0a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd0a8:	4140      	adcs	r0, r0
   bd0aa:	eb41 0101 	adc.w	r1, r1, r1
   bd0ae:	3c01      	subs	r4, #1
   bd0b0:	bf28      	it	cs
   bd0b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd0b6:	d2e9      	bcs.n	bd08c <__adddf3+0x10c>
   bd0b8:	f091 0f00 	teq	r1, #0
   bd0bc:	bf04      	itt	eq
   bd0be:	4601      	moveq	r1, r0
   bd0c0:	2000      	moveq	r0, #0
   bd0c2:	fab1 f381 	clz	r3, r1
   bd0c6:	bf08      	it	eq
   bd0c8:	3320      	addeq	r3, #32
   bd0ca:	f1a3 030b 	sub.w	r3, r3, #11
   bd0ce:	f1b3 0220 	subs.w	r2, r3, #32
   bd0d2:	da0c      	bge.n	bd0ee <__adddf3+0x16e>
   bd0d4:	320c      	adds	r2, #12
   bd0d6:	dd08      	ble.n	bd0ea <__adddf3+0x16a>
   bd0d8:	f102 0c14 	add.w	ip, r2, #20
   bd0dc:	f1c2 020c 	rsb	r2, r2, #12
   bd0e0:	fa01 f00c 	lsl.w	r0, r1, ip
   bd0e4:	fa21 f102 	lsr.w	r1, r1, r2
   bd0e8:	e00c      	b.n	bd104 <__adddf3+0x184>
   bd0ea:	f102 0214 	add.w	r2, r2, #20
   bd0ee:	bfd8      	it	le
   bd0f0:	f1c2 0c20 	rsble	ip, r2, #32
   bd0f4:	fa01 f102 	lsl.w	r1, r1, r2
   bd0f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd0fc:	bfdc      	itt	le
   bd0fe:	ea41 010c 	orrle.w	r1, r1, ip
   bd102:	4090      	lslle	r0, r2
   bd104:	1ae4      	subs	r4, r4, r3
   bd106:	bfa2      	ittt	ge
   bd108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd10c:	4329      	orrge	r1, r5
   bd10e:	bd30      	popge	{r4, r5, pc}
   bd110:	ea6f 0404 	mvn.w	r4, r4
   bd114:	3c1f      	subs	r4, #31
   bd116:	da1c      	bge.n	bd152 <__adddf3+0x1d2>
   bd118:	340c      	adds	r4, #12
   bd11a:	dc0e      	bgt.n	bd13a <__adddf3+0x1ba>
   bd11c:	f104 0414 	add.w	r4, r4, #20
   bd120:	f1c4 0220 	rsb	r2, r4, #32
   bd124:	fa20 f004 	lsr.w	r0, r0, r4
   bd128:	fa01 f302 	lsl.w	r3, r1, r2
   bd12c:	ea40 0003 	orr.w	r0, r0, r3
   bd130:	fa21 f304 	lsr.w	r3, r1, r4
   bd134:	ea45 0103 	orr.w	r1, r5, r3
   bd138:	bd30      	pop	{r4, r5, pc}
   bd13a:	f1c4 040c 	rsb	r4, r4, #12
   bd13e:	f1c4 0220 	rsb	r2, r4, #32
   bd142:	fa20 f002 	lsr.w	r0, r0, r2
   bd146:	fa01 f304 	lsl.w	r3, r1, r4
   bd14a:	ea40 0003 	orr.w	r0, r0, r3
   bd14e:	4629      	mov	r1, r5
   bd150:	bd30      	pop	{r4, r5, pc}
   bd152:	fa21 f004 	lsr.w	r0, r1, r4
   bd156:	4629      	mov	r1, r5
   bd158:	bd30      	pop	{r4, r5, pc}
   bd15a:	f094 0f00 	teq	r4, #0
   bd15e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd162:	bf06      	itte	eq
   bd164:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd168:	3401      	addeq	r4, #1
   bd16a:	3d01      	subne	r5, #1
   bd16c:	e74e      	b.n	bd00c <__adddf3+0x8c>
   bd16e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd172:	bf18      	it	ne
   bd174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd178:	d029      	beq.n	bd1ce <__adddf3+0x24e>
   bd17a:	ea94 0f05 	teq	r4, r5
   bd17e:	bf08      	it	eq
   bd180:	ea90 0f02 	teqeq	r0, r2
   bd184:	d005      	beq.n	bd192 <__adddf3+0x212>
   bd186:	ea54 0c00 	orrs.w	ip, r4, r0
   bd18a:	bf04      	itt	eq
   bd18c:	4619      	moveq	r1, r3
   bd18e:	4610      	moveq	r0, r2
   bd190:	bd30      	pop	{r4, r5, pc}
   bd192:	ea91 0f03 	teq	r1, r3
   bd196:	bf1e      	ittt	ne
   bd198:	2100      	movne	r1, #0
   bd19a:	2000      	movne	r0, #0
   bd19c:	bd30      	popne	{r4, r5, pc}
   bd19e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bd1a2:	d105      	bne.n	bd1b0 <__adddf3+0x230>
   bd1a4:	0040      	lsls	r0, r0, #1
   bd1a6:	4149      	adcs	r1, r1
   bd1a8:	bf28      	it	cs
   bd1aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bd1ae:	bd30      	pop	{r4, r5, pc}
   bd1b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bd1b4:	bf3c      	itt	cc
   bd1b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bd1ba:	bd30      	popcc	{r4, r5, pc}
   bd1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd1c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bd1c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd1c8:	f04f 0000 	mov.w	r0, #0
   bd1cc:	bd30      	pop	{r4, r5, pc}
   bd1ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd1d2:	bf1a      	itte	ne
   bd1d4:	4619      	movne	r1, r3
   bd1d6:	4610      	movne	r0, r2
   bd1d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bd1dc:	bf1c      	itt	ne
   bd1de:	460b      	movne	r3, r1
   bd1e0:	4602      	movne	r2, r0
   bd1e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd1e6:	bf06      	itte	eq
   bd1e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bd1ec:	ea91 0f03 	teqeq	r1, r3
   bd1f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bd1f4:	bd30      	pop	{r4, r5, pc}
   bd1f6:	bf00      	nop

000bd1f8 <__aeabi_ui2d>:
   bd1f8:	f090 0f00 	teq	r0, #0
   bd1fc:	bf04      	itt	eq
   bd1fe:	2100      	moveq	r1, #0
   bd200:	4770      	bxeq	lr
   bd202:	b530      	push	{r4, r5, lr}
   bd204:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd208:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd20c:	f04f 0500 	mov.w	r5, #0
   bd210:	f04f 0100 	mov.w	r1, #0
   bd214:	e750      	b.n	bd0b8 <__adddf3+0x138>
   bd216:	bf00      	nop

000bd218 <__aeabi_i2d>:
   bd218:	f090 0f00 	teq	r0, #0
   bd21c:	bf04      	itt	eq
   bd21e:	2100      	moveq	r1, #0
   bd220:	4770      	bxeq	lr
   bd222:	b530      	push	{r4, r5, lr}
   bd224:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd228:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd22c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd230:	bf48      	it	mi
   bd232:	4240      	negmi	r0, r0
   bd234:	f04f 0100 	mov.w	r1, #0
   bd238:	e73e      	b.n	bd0b8 <__adddf3+0x138>
   bd23a:	bf00      	nop

000bd23c <__aeabi_f2d>:
   bd23c:	0042      	lsls	r2, r0, #1
   bd23e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd242:	ea4f 0131 	mov.w	r1, r1, rrx
   bd246:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd24a:	bf1f      	itttt	ne
   bd24c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd250:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd254:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd258:	4770      	bxne	lr
   bd25a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd25e:	bf08      	it	eq
   bd260:	4770      	bxeq	lr
   bd262:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd266:	bf04      	itt	eq
   bd268:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd26c:	4770      	bxeq	lr
   bd26e:	b530      	push	{r4, r5, lr}
   bd270:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd27c:	e71c      	b.n	bd0b8 <__adddf3+0x138>
   bd27e:	bf00      	nop

000bd280 <__aeabi_ul2d>:
   bd280:	ea50 0201 	orrs.w	r2, r0, r1
   bd284:	bf08      	it	eq
   bd286:	4770      	bxeq	lr
   bd288:	b530      	push	{r4, r5, lr}
   bd28a:	f04f 0500 	mov.w	r5, #0
   bd28e:	e00a      	b.n	bd2a6 <__aeabi_l2d+0x16>

000bd290 <__aeabi_l2d>:
   bd290:	ea50 0201 	orrs.w	r2, r0, r1
   bd294:	bf08      	it	eq
   bd296:	4770      	bxeq	lr
   bd298:	b530      	push	{r4, r5, lr}
   bd29a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd29e:	d502      	bpl.n	bd2a6 <__aeabi_l2d+0x16>
   bd2a0:	4240      	negs	r0, r0
   bd2a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd2a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd2aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd2ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd2b2:	f43f aed8 	beq.w	bd066 <__adddf3+0xe6>
   bd2b6:	f04f 0203 	mov.w	r2, #3
   bd2ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd2be:	bf18      	it	ne
   bd2c0:	3203      	addne	r2, #3
   bd2c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd2c6:	bf18      	it	ne
   bd2c8:	3203      	addne	r2, #3
   bd2ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd2ce:	f1c2 0320 	rsb	r3, r2, #32
   bd2d2:	fa00 fc03 	lsl.w	ip, r0, r3
   bd2d6:	fa20 f002 	lsr.w	r0, r0, r2
   bd2da:	fa01 fe03 	lsl.w	lr, r1, r3
   bd2de:	ea40 000e 	orr.w	r0, r0, lr
   bd2e2:	fa21 f102 	lsr.w	r1, r1, r2
   bd2e6:	4414      	add	r4, r2
   bd2e8:	e6bd      	b.n	bd066 <__adddf3+0xe6>
   bd2ea:	bf00      	nop

000bd2ec <__aeabi_dmul>:
   bd2ec:	b570      	push	{r4, r5, r6, lr}
   bd2ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd2f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd2f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd2fa:	bf1d      	ittte	ne
   bd2fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd300:	ea94 0f0c 	teqne	r4, ip
   bd304:	ea95 0f0c 	teqne	r5, ip
   bd308:	f000 f8de 	bleq	bd4c8 <__aeabi_dmul+0x1dc>
   bd30c:	442c      	add	r4, r5
   bd30e:	ea81 0603 	eor.w	r6, r1, r3
   bd312:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd316:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd31a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd31e:	bf18      	it	ne
   bd320:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd32c:	d038      	beq.n	bd3a0 <__aeabi_dmul+0xb4>
   bd32e:	fba0 ce02 	umull	ip, lr, r0, r2
   bd332:	f04f 0500 	mov.w	r5, #0
   bd336:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd33a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd33e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd342:	f04f 0600 	mov.w	r6, #0
   bd346:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd34a:	f09c 0f00 	teq	ip, #0
   bd34e:	bf18      	it	ne
   bd350:	f04e 0e01 	orrne.w	lr, lr, #1
   bd354:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd358:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd35c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd360:	d204      	bcs.n	bd36c <__aeabi_dmul+0x80>
   bd362:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd366:	416d      	adcs	r5, r5
   bd368:	eb46 0606 	adc.w	r6, r6, r6
   bd36c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd370:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd374:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd378:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd37c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd380:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd384:	bf88      	it	hi
   bd386:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd38a:	d81e      	bhi.n	bd3ca <__aeabi_dmul+0xde>
   bd38c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd390:	bf08      	it	eq
   bd392:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd396:	f150 0000 	adcs.w	r0, r0, #0
   bd39a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd39e:	bd70      	pop	{r4, r5, r6, pc}
   bd3a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd3a4:	ea46 0101 	orr.w	r1, r6, r1
   bd3a8:	ea40 0002 	orr.w	r0, r0, r2
   bd3ac:	ea81 0103 	eor.w	r1, r1, r3
   bd3b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd3b4:	bfc2      	ittt	gt
   bd3b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd3ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd3be:	bd70      	popgt	{r4, r5, r6, pc}
   bd3c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd3c4:	f04f 0e00 	mov.w	lr, #0
   bd3c8:	3c01      	subs	r4, #1
   bd3ca:	f300 80ab 	bgt.w	bd524 <__aeabi_dmul+0x238>
   bd3ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bd3d2:	bfde      	ittt	le
   bd3d4:	2000      	movle	r0, #0
   bd3d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bd3da:	bd70      	pople	{r4, r5, r6, pc}
   bd3dc:	f1c4 0400 	rsb	r4, r4, #0
   bd3e0:	3c20      	subs	r4, #32
   bd3e2:	da35      	bge.n	bd450 <__aeabi_dmul+0x164>
   bd3e4:	340c      	adds	r4, #12
   bd3e6:	dc1b      	bgt.n	bd420 <__aeabi_dmul+0x134>
   bd3e8:	f104 0414 	add.w	r4, r4, #20
   bd3ec:	f1c4 0520 	rsb	r5, r4, #32
   bd3f0:	fa00 f305 	lsl.w	r3, r0, r5
   bd3f4:	fa20 f004 	lsr.w	r0, r0, r4
   bd3f8:	fa01 f205 	lsl.w	r2, r1, r5
   bd3fc:	ea40 0002 	orr.w	r0, r0, r2
   bd400:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bd404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd408:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd40c:	fa21 f604 	lsr.w	r6, r1, r4
   bd410:	eb42 0106 	adc.w	r1, r2, r6
   bd414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd418:	bf08      	it	eq
   bd41a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd41e:	bd70      	pop	{r4, r5, r6, pc}
   bd420:	f1c4 040c 	rsb	r4, r4, #12
   bd424:	f1c4 0520 	rsb	r5, r4, #32
   bd428:	fa00 f304 	lsl.w	r3, r0, r4
   bd42c:	fa20 f005 	lsr.w	r0, r0, r5
   bd430:	fa01 f204 	lsl.w	r2, r1, r4
   bd434:	ea40 0002 	orr.w	r0, r0, r2
   bd438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd43c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd440:	f141 0100 	adc.w	r1, r1, #0
   bd444:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd448:	bf08      	it	eq
   bd44a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd44e:	bd70      	pop	{r4, r5, r6, pc}
   bd450:	f1c4 0520 	rsb	r5, r4, #32
   bd454:	fa00 f205 	lsl.w	r2, r0, r5
   bd458:	ea4e 0e02 	orr.w	lr, lr, r2
   bd45c:	fa20 f304 	lsr.w	r3, r0, r4
   bd460:	fa01 f205 	lsl.w	r2, r1, r5
   bd464:	ea43 0302 	orr.w	r3, r3, r2
   bd468:	fa21 f004 	lsr.w	r0, r1, r4
   bd46c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd470:	fa21 f204 	lsr.w	r2, r1, r4
   bd474:	ea20 0002 	bic.w	r0, r0, r2
   bd478:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd47c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd480:	bf08      	it	eq
   bd482:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd486:	bd70      	pop	{r4, r5, r6, pc}
   bd488:	f094 0f00 	teq	r4, #0
   bd48c:	d10f      	bne.n	bd4ae <__aeabi_dmul+0x1c2>
   bd48e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd492:	0040      	lsls	r0, r0, #1
   bd494:	eb41 0101 	adc.w	r1, r1, r1
   bd498:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd49c:	bf08      	it	eq
   bd49e:	3c01      	subeq	r4, #1
   bd4a0:	d0f7      	beq.n	bd492 <__aeabi_dmul+0x1a6>
   bd4a2:	ea41 0106 	orr.w	r1, r1, r6
   bd4a6:	f095 0f00 	teq	r5, #0
   bd4aa:	bf18      	it	ne
   bd4ac:	4770      	bxne	lr
   bd4ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd4b2:	0052      	lsls	r2, r2, #1
   bd4b4:	eb43 0303 	adc.w	r3, r3, r3
   bd4b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd4bc:	bf08      	it	eq
   bd4be:	3d01      	subeq	r5, #1
   bd4c0:	d0f7      	beq.n	bd4b2 <__aeabi_dmul+0x1c6>
   bd4c2:	ea43 0306 	orr.w	r3, r3, r6
   bd4c6:	4770      	bx	lr
   bd4c8:	ea94 0f0c 	teq	r4, ip
   bd4cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd4d0:	bf18      	it	ne
   bd4d2:	ea95 0f0c 	teqne	r5, ip
   bd4d6:	d00c      	beq.n	bd4f2 <__aeabi_dmul+0x206>
   bd4d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd4dc:	bf18      	it	ne
   bd4de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd4e2:	d1d1      	bne.n	bd488 <__aeabi_dmul+0x19c>
   bd4e4:	ea81 0103 	eor.w	r1, r1, r3
   bd4e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd4ec:	f04f 0000 	mov.w	r0, #0
   bd4f0:	bd70      	pop	{r4, r5, r6, pc}
   bd4f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd4f6:	bf06      	itte	eq
   bd4f8:	4610      	moveq	r0, r2
   bd4fa:	4619      	moveq	r1, r3
   bd4fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd500:	d019      	beq.n	bd536 <__aeabi_dmul+0x24a>
   bd502:	ea94 0f0c 	teq	r4, ip
   bd506:	d102      	bne.n	bd50e <__aeabi_dmul+0x222>
   bd508:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd50c:	d113      	bne.n	bd536 <__aeabi_dmul+0x24a>
   bd50e:	ea95 0f0c 	teq	r5, ip
   bd512:	d105      	bne.n	bd520 <__aeabi_dmul+0x234>
   bd514:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd518:	bf1c      	itt	ne
   bd51a:	4610      	movne	r0, r2
   bd51c:	4619      	movne	r1, r3
   bd51e:	d10a      	bne.n	bd536 <__aeabi_dmul+0x24a>
   bd520:	ea81 0103 	eor.w	r1, r1, r3
   bd524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd528:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd52c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd530:	f04f 0000 	mov.w	r0, #0
   bd534:	bd70      	pop	{r4, r5, r6, pc}
   bd536:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd53a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd53e:	bd70      	pop	{r4, r5, r6, pc}

000bd540 <__aeabi_ddiv>:
   bd540:	b570      	push	{r4, r5, r6, lr}
   bd542:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd54a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd54e:	bf1d      	ittte	ne
   bd550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd554:	ea94 0f0c 	teqne	r4, ip
   bd558:	ea95 0f0c 	teqne	r5, ip
   bd55c:	f000 f8a7 	bleq	bd6ae <__aeabi_ddiv+0x16e>
   bd560:	eba4 0405 	sub.w	r4, r4, r5
   bd564:	ea81 0e03 	eor.w	lr, r1, r3
   bd568:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd56c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd570:	f000 8088 	beq.w	bd684 <__aeabi_ddiv+0x144>
   bd574:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd578:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd57c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd580:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd584:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd588:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd58c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd590:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd594:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd598:	429d      	cmp	r5, r3
   bd59a:	bf08      	it	eq
   bd59c:	4296      	cmpeq	r6, r2
   bd59e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd5a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd5a6:	d202      	bcs.n	bd5ae <__aeabi_ddiv+0x6e>
   bd5a8:	085b      	lsrs	r3, r3, #1
   bd5aa:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5ae:	1ab6      	subs	r6, r6, r2
   bd5b0:	eb65 0503 	sbc.w	r5, r5, r3
   bd5b4:	085b      	lsrs	r3, r3, #1
   bd5b6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd5be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd5c2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd5c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd5ca:	bf22      	ittt	cs
   bd5cc:	1ab6      	subcs	r6, r6, r2
   bd5ce:	4675      	movcs	r5, lr
   bd5d0:	ea40 000c 	orrcs.w	r0, r0, ip
   bd5d4:	085b      	lsrs	r3, r3, #1
   bd5d6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5da:	ebb6 0e02 	subs.w	lr, r6, r2
   bd5de:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd5e2:	bf22      	ittt	cs
   bd5e4:	1ab6      	subcs	r6, r6, r2
   bd5e6:	4675      	movcs	r5, lr
   bd5e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bd5ec:	085b      	lsrs	r3, r3, #1
   bd5ee:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5f2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd5fa:	bf22      	ittt	cs
   bd5fc:	1ab6      	subcs	r6, r6, r2
   bd5fe:	4675      	movcs	r5, lr
   bd600:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bd604:	085b      	lsrs	r3, r3, #1
   bd606:	ea4f 0232 	mov.w	r2, r2, rrx
   bd60a:	ebb6 0e02 	subs.w	lr, r6, r2
   bd60e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd612:	bf22      	ittt	cs
   bd614:	1ab6      	subcs	r6, r6, r2
   bd616:	4675      	movcs	r5, lr
   bd618:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bd61c:	ea55 0e06 	orrs.w	lr, r5, r6
   bd620:	d018      	beq.n	bd654 <__aeabi_ddiv+0x114>
   bd622:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bd626:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bd62a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bd62e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bd632:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bd636:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bd63a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bd63e:	d1c0      	bne.n	bd5c2 <__aeabi_ddiv+0x82>
   bd640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd644:	d10b      	bne.n	bd65e <__aeabi_ddiv+0x11e>
   bd646:	ea41 0100 	orr.w	r1, r1, r0
   bd64a:	f04f 0000 	mov.w	r0, #0
   bd64e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bd652:	e7b6      	b.n	bd5c2 <__aeabi_ddiv+0x82>
   bd654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd658:	bf04      	itt	eq
   bd65a:	4301      	orreq	r1, r0
   bd65c:	2000      	moveq	r0, #0
   bd65e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd662:	bf88      	it	hi
   bd664:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd668:	f63f aeaf 	bhi.w	bd3ca <__aeabi_dmul+0xde>
   bd66c:	ebb5 0c03 	subs.w	ip, r5, r3
   bd670:	bf04      	itt	eq
   bd672:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd676:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd67a:	f150 0000 	adcs.w	r0, r0, #0
   bd67e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd682:	bd70      	pop	{r4, r5, r6, pc}
   bd684:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd688:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd68c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd690:	bfc2      	ittt	gt
   bd692:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd69a:	bd70      	popgt	{r4, r5, r6, pc}
   bd69c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd6a0:	f04f 0e00 	mov.w	lr, #0
   bd6a4:	3c01      	subs	r4, #1
   bd6a6:	e690      	b.n	bd3ca <__aeabi_dmul+0xde>
   bd6a8:	ea45 0e06 	orr.w	lr, r5, r6
   bd6ac:	e68d      	b.n	bd3ca <__aeabi_dmul+0xde>
   bd6ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd6b2:	ea94 0f0c 	teq	r4, ip
   bd6b6:	bf08      	it	eq
   bd6b8:	ea95 0f0c 	teqeq	r5, ip
   bd6bc:	f43f af3b 	beq.w	bd536 <__aeabi_dmul+0x24a>
   bd6c0:	ea94 0f0c 	teq	r4, ip
   bd6c4:	d10a      	bne.n	bd6dc <__aeabi_ddiv+0x19c>
   bd6c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd6ca:	f47f af34 	bne.w	bd536 <__aeabi_dmul+0x24a>
   bd6ce:	ea95 0f0c 	teq	r5, ip
   bd6d2:	f47f af25 	bne.w	bd520 <__aeabi_dmul+0x234>
   bd6d6:	4610      	mov	r0, r2
   bd6d8:	4619      	mov	r1, r3
   bd6da:	e72c      	b.n	bd536 <__aeabi_dmul+0x24a>
   bd6dc:	ea95 0f0c 	teq	r5, ip
   bd6e0:	d106      	bne.n	bd6f0 <__aeabi_ddiv+0x1b0>
   bd6e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd6e6:	f43f aefd 	beq.w	bd4e4 <__aeabi_dmul+0x1f8>
   bd6ea:	4610      	mov	r0, r2
   bd6ec:	4619      	mov	r1, r3
   bd6ee:	e722      	b.n	bd536 <__aeabi_dmul+0x24a>
   bd6f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd6f4:	bf18      	it	ne
   bd6f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd6fa:	f47f aec5 	bne.w	bd488 <__aeabi_dmul+0x19c>
   bd6fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd702:	f47f af0d 	bne.w	bd520 <__aeabi_dmul+0x234>
   bd706:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd70a:	f47f aeeb 	bne.w	bd4e4 <__aeabi_dmul+0x1f8>
   bd70e:	e712      	b.n	bd536 <__aeabi_dmul+0x24a>

000bd710 <__gedf2>:
   bd710:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd714:	e006      	b.n	bd724 <__cmpdf2+0x4>
   bd716:	bf00      	nop

000bd718 <__ledf2>:
   bd718:	f04f 0c01 	mov.w	ip, #1
   bd71c:	e002      	b.n	bd724 <__cmpdf2+0x4>
   bd71e:	bf00      	nop

000bd720 <__cmpdf2>:
   bd720:	f04f 0c01 	mov.w	ip, #1
   bd724:	f84d cd04 	str.w	ip, [sp, #-4]!
   bd728:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd72c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd730:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd734:	bf18      	it	ne
   bd736:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bd73a:	d01b      	beq.n	bd774 <__cmpdf2+0x54>
   bd73c:	b001      	add	sp, #4
   bd73e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bd742:	bf0c      	ite	eq
   bd744:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bd748:	ea91 0f03 	teqne	r1, r3
   bd74c:	bf02      	ittt	eq
   bd74e:	ea90 0f02 	teqeq	r0, r2
   bd752:	2000      	moveq	r0, #0
   bd754:	4770      	bxeq	lr
   bd756:	f110 0f00 	cmn.w	r0, #0
   bd75a:	ea91 0f03 	teq	r1, r3
   bd75e:	bf58      	it	pl
   bd760:	4299      	cmppl	r1, r3
   bd762:	bf08      	it	eq
   bd764:	4290      	cmpeq	r0, r2
   bd766:	bf2c      	ite	cs
   bd768:	17d8      	asrcs	r0, r3, #31
   bd76a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bd76e:	f040 0001 	orr.w	r0, r0, #1
   bd772:	4770      	bx	lr
   bd774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd77c:	d102      	bne.n	bd784 <__cmpdf2+0x64>
   bd77e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd782:	d107      	bne.n	bd794 <__cmpdf2+0x74>
   bd784:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd78c:	d1d6      	bne.n	bd73c <__cmpdf2+0x1c>
   bd78e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd792:	d0d3      	beq.n	bd73c <__cmpdf2+0x1c>
   bd794:	f85d 0b04 	ldr.w	r0, [sp], #4
   bd798:	4770      	bx	lr
   bd79a:	bf00      	nop

000bd79c <__aeabi_cdrcmple>:
   bd79c:	4684      	mov	ip, r0
   bd79e:	4610      	mov	r0, r2
   bd7a0:	4662      	mov	r2, ip
   bd7a2:	468c      	mov	ip, r1
   bd7a4:	4619      	mov	r1, r3
   bd7a6:	4663      	mov	r3, ip
   bd7a8:	e000      	b.n	bd7ac <__aeabi_cdcmpeq>
   bd7aa:	bf00      	nop

000bd7ac <__aeabi_cdcmpeq>:
   bd7ac:	b501      	push	{r0, lr}
   bd7ae:	f7ff ffb7 	bl	bd720 <__cmpdf2>
   bd7b2:	2800      	cmp	r0, #0
   bd7b4:	bf48      	it	mi
   bd7b6:	f110 0f00 	cmnmi.w	r0, #0
   bd7ba:	bd01      	pop	{r0, pc}

000bd7bc <__aeabi_dcmpeq>:
   bd7bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7c0:	f7ff fff4 	bl	bd7ac <__aeabi_cdcmpeq>
   bd7c4:	bf0c      	ite	eq
   bd7c6:	2001      	moveq	r0, #1
   bd7c8:	2000      	movne	r0, #0
   bd7ca:	f85d fb08 	ldr.w	pc, [sp], #8
   bd7ce:	bf00      	nop

000bd7d0 <__aeabi_dcmplt>:
   bd7d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7d4:	f7ff ffea 	bl	bd7ac <__aeabi_cdcmpeq>
   bd7d8:	bf34      	ite	cc
   bd7da:	2001      	movcc	r0, #1
   bd7dc:	2000      	movcs	r0, #0
   bd7de:	f85d fb08 	ldr.w	pc, [sp], #8
   bd7e2:	bf00      	nop

000bd7e4 <__aeabi_dcmple>:
   bd7e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7e8:	f7ff ffe0 	bl	bd7ac <__aeabi_cdcmpeq>
   bd7ec:	bf94      	ite	ls
   bd7ee:	2001      	movls	r0, #1
   bd7f0:	2000      	movhi	r0, #0
   bd7f2:	f85d fb08 	ldr.w	pc, [sp], #8
   bd7f6:	bf00      	nop

000bd7f8 <__aeabi_dcmpge>:
   bd7f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7fc:	f7ff ffce 	bl	bd79c <__aeabi_cdrcmple>
   bd800:	bf94      	ite	ls
   bd802:	2001      	movls	r0, #1
   bd804:	2000      	movhi	r0, #0
   bd806:	f85d fb08 	ldr.w	pc, [sp], #8
   bd80a:	bf00      	nop

000bd80c <__aeabi_dcmpgt>:
   bd80c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd810:	f7ff ffc4 	bl	bd79c <__aeabi_cdrcmple>
   bd814:	bf34      	ite	cc
   bd816:	2001      	movcc	r0, #1
   bd818:	2000      	movcs	r0, #0
   bd81a:	f85d fb08 	ldr.w	pc, [sp], #8
   bd81e:	bf00      	nop

000bd820 <__aeabi_dcmpun>:
   bd820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd828:	d102      	bne.n	bd830 <__aeabi_dcmpun+0x10>
   bd82a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd82e:	d10a      	bne.n	bd846 <__aeabi_dcmpun+0x26>
   bd830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd838:	d102      	bne.n	bd840 <__aeabi_dcmpun+0x20>
   bd83a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd83e:	d102      	bne.n	bd846 <__aeabi_dcmpun+0x26>
   bd840:	f04f 0000 	mov.w	r0, #0
   bd844:	4770      	bx	lr
   bd846:	f04f 0001 	mov.w	r0, #1
   bd84a:	4770      	bx	lr

000bd84c <__aeabi_d2iz>:
   bd84c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd854:	d215      	bcs.n	bd882 <__aeabi_d2iz+0x36>
   bd856:	d511      	bpl.n	bd87c <__aeabi_d2iz+0x30>
   bd858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd85c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd860:	d912      	bls.n	bd888 <__aeabi_d2iz+0x3c>
   bd862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd86a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd86e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd872:	fa23 f002 	lsr.w	r0, r3, r2
   bd876:	bf18      	it	ne
   bd878:	4240      	negne	r0, r0
   bd87a:	4770      	bx	lr
   bd87c:	f04f 0000 	mov.w	r0, #0
   bd880:	4770      	bx	lr
   bd882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd886:	d105      	bne.n	bd894 <__aeabi_d2iz+0x48>
   bd888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bd88c:	bf08      	it	eq
   bd88e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bd892:	4770      	bx	lr
   bd894:	f04f 0000 	mov.w	r0, #0
   bd898:	4770      	bx	lr
   bd89a:	bf00      	nop

000bd89c <__aeabi_d2uiz>:
   bd89c:	004a      	lsls	r2, r1, #1
   bd89e:	d211      	bcs.n	bd8c4 <__aeabi_d2uiz+0x28>
   bd8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd8a4:	d211      	bcs.n	bd8ca <__aeabi_d2uiz+0x2e>
   bd8a6:	d50d      	bpl.n	bd8c4 <__aeabi_d2uiz+0x28>
   bd8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd8b0:	d40e      	bmi.n	bd8d0 <__aeabi_d2uiz+0x34>
   bd8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd8be:	fa23 f002 	lsr.w	r0, r3, r2
   bd8c2:	4770      	bx	lr
   bd8c4:	f04f 0000 	mov.w	r0, #0
   bd8c8:	4770      	bx	lr
   bd8ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd8ce:	d102      	bne.n	bd8d6 <__aeabi_d2uiz+0x3a>
   bd8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd8d4:	4770      	bx	lr
   bd8d6:	f04f 0000 	mov.w	r0, #0
   bd8da:	4770      	bx	lr

000bd8dc <__aeabi_d2f>:
   bd8dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd8e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bd8e4:	bf24      	itt	cs
   bd8e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bd8ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bd8ee:	d90d      	bls.n	bd90c <__aeabi_d2f+0x30>
   bd8f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bd8f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bd8f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bd8fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bd900:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bd904:	bf08      	it	eq
   bd906:	f020 0001 	biceq.w	r0, r0, #1
   bd90a:	4770      	bx	lr
   bd90c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bd910:	d121      	bne.n	bd956 <__aeabi_d2f+0x7a>
   bd912:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bd916:	bfbc      	itt	lt
   bd918:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bd91c:	4770      	bxlt	lr
   bd91e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd922:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bd926:	f1c2 0218 	rsb	r2, r2, #24
   bd92a:	f1c2 0c20 	rsb	ip, r2, #32
   bd92e:	fa10 f30c 	lsls.w	r3, r0, ip
   bd932:	fa20 f002 	lsr.w	r0, r0, r2
   bd936:	bf18      	it	ne
   bd938:	f040 0001 	orrne.w	r0, r0, #1
   bd93c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd940:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bd944:	fa03 fc0c 	lsl.w	ip, r3, ip
   bd948:	ea40 000c 	orr.w	r0, r0, ip
   bd94c:	fa23 f302 	lsr.w	r3, r3, r2
   bd950:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bd954:	e7cc      	b.n	bd8f0 <__aeabi_d2f+0x14>
   bd956:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bd95a:	d107      	bne.n	bd96c <__aeabi_d2f+0x90>
   bd95c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bd960:	bf1e      	ittt	ne
   bd962:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bd966:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bd96a:	4770      	bxne	lr
   bd96c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bd970:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bd974:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bd978:	4770      	bx	lr
   bd97a:	bf00      	nop

000bd97c <asctime_r>:
   bd97c:	b510      	push	{r4, lr}
   bd97e:	460c      	mov	r4, r1
   bd980:	6941      	ldr	r1, [r0, #20]
   bd982:	6903      	ldr	r3, [r0, #16]
   bd984:	6982      	ldr	r2, [r0, #24]
   bd986:	b086      	sub	sp, #24
   bd988:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bd98c:	9104      	str	r1, [sp, #16]
   bd98e:	6801      	ldr	r1, [r0, #0]
   bd990:	9103      	str	r1, [sp, #12]
   bd992:	6841      	ldr	r1, [r0, #4]
   bd994:	9102      	str	r1, [sp, #8]
   bd996:	6881      	ldr	r1, [r0, #8]
   bd998:	9101      	str	r1, [sp, #4]
   bd99a:	68c1      	ldr	r1, [r0, #12]
   bd99c:	9100      	str	r1, [sp, #0]
   bd99e:	4907      	ldr	r1, [pc, #28]	; (bd9bc <asctime_r+0x40>)
   bd9a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bd9a4:	440b      	add	r3, r1
   bd9a6:	4906      	ldr	r1, [pc, #24]	; (bd9c0 <asctime_r+0x44>)
   bd9a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bd9ac:	440a      	add	r2, r1
   bd9ae:	4620      	mov	r0, r4
   bd9b0:	4904      	ldr	r1, [pc, #16]	; (bd9c4 <asctime_r+0x48>)
   bd9b2:	f7fb fb83 	bl	b90bc <siprintf>
   bd9b6:	4620      	mov	r0, r4
   bd9b8:	b006      	add	sp, #24
   bd9ba:	bd10      	pop	{r4, pc}
   bd9bc:	000bf3ad 	.word	0x000bf3ad
   bd9c0:	000bf398 	.word	0x000bf398
   bd9c4:	000bf378 	.word	0x000bf378

000bd9c8 <atexit>:
   bd9c8:	2300      	movs	r3, #0
   bd9ca:	4601      	mov	r1, r0
   bd9cc:	461a      	mov	r2, r3
   bd9ce:	4618      	mov	r0, r3
   bd9d0:	f000 b9ba 	b.w	bdd48 <__register_exitproc>

000bd9d4 <gmtime>:
   bd9d4:	b538      	push	{r3, r4, r5, lr}
   bd9d6:	4b0b      	ldr	r3, [pc, #44]	; (bda04 <gmtime+0x30>)
   bd9d8:	681d      	ldr	r5, [r3, #0]
   bd9da:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bd9dc:	4604      	mov	r4, r0
   bd9de:	b953      	cbnz	r3, bd9f6 <gmtime+0x22>
   bd9e0:	2024      	movs	r0, #36	; 0x24
   bd9e2:	f7fb fb53 	bl	b908c <malloc>
   bd9e6:	4602      	mov	r2, r0
   bd9e8:	63e8      	str	r0, [r5, #60]	; 0x3c
   bd9ea:	b920      	cbnz	r0, bd9f6 <gmtime+0x22>
   bd9ec:	4b06      	ldr	r3, [pc, #24]	; (bda08 <gmtime+0x34>)
   bd9ee:	4807      	ldr	r0, [pc, #28]	; (bda0c <gmtime+0x38>)
   bd9f0:	2139      	movs	r1, #57	; 0x39
   bd9f2:	f7fb fb8b 	bl	b910c <__assert_func>
   bd9f6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bd9f8:	4620      	mov	r0, r4
   bd9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd9fe:	f7fb bba5 	b.w	b914c <gmtime_r>
   bda02:	bf00      	nop
   bda04:	2003ded0 	.word	0x2003ded0
   bda08:	000bf3d1 	.word	0x000bf3d1
   bda0c:	000bf3e8 	.word	0x000bf3e8

000bda10 <isprint>:
   bda10:	4b02      	ldr	r3, [pc, #8]	; (bda1c <isprint+0xc>)
   bda12:	4418      	add	r0, r3
   bda14:	7840      	ldrb	r0, [r0, #1]
   bda16:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bda1a:	4770      	bx	lr
   bda1c:	000bf49a 	.word	0x000bf49a

000bda20 <memcpy>:
   bda20:	440a      	add	r2, r1
   bda22:	4291      	cmp	r1, r2
   bda24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bda28:	d100      	bne.n	bda2c <memcpy+0xc>
   bda2a:	4770      	bx	lr
   bda2c:	b510      	push	{r4, lr}
   bda2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bda32:	f803 4f01 	strb.w	r4, [r3, #1]!
   bda36:	4291      	cmp	r1, r2
   bda38:	d1f9      	bne.n	bda2e <memcpy+0xe>
   bda3a:	bd10      	pop	{r4, pc}

000bda3c <memmove>:
   bda3c:	4288      	cmp	r0, r1
   bda3e:	b510      	push	{r4, lr}
   bda40:	eb01 0402 	add.w	r4, r1, r2
   bda44:	d902      	bls.n	bda4c <memmove+0x10>
   bda46:	4284      	cmp	r4, r0
   bda48:	4623      	mov	r3, r4
   bda4a:	d807      	bhi.n	bda5c <memmove+0x20>
   bda4c:	1e43      	subs	r3, r0, #1
   bda4e:	42a1      	cmp	r1, r4
   bda50:	d008      	beq.n	bda64 <memmove+0x28>
   bda52:	f811 2b01 	ldrb.w	r2, [r1], #1
   bda56:	f803 2f01 	strb.w	r2, [r3, #1]!
   bda5a:	e7f8      	b.n	bda4e <memmove+0x12>
   bda5c:	4402      	add	r2, r0
   bda5e:	4601      	mov	r1, r0
   bda60:	428a      	cmp	r2, r1
   bda62:	d100      	bne.n	bda66 <memmove+0x2a>
   bda64:	bd10      	pop	{r4, pc}
   bda66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bda6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bda6e:	e7f7      	b.n	bda60 <memmove+0x24>

000bda70 <memset>:
   bda70:	4402      	add	r2, r0
   bda72:	4603      	mov	r3, r0
   bda74:	4293      	cmp	r3, r2
   bda76:	d100      	bne.n	bda7a <memset+0xa>
   bda78:	4770      	bx	lr
   bda7a:	f803 1b01 	strb.w	r1, [r3], #1
   bda7e:	e7f9      	b.n	bda74 <memset+0x4>

000bda80 <srand>:
   bda80:	b538      	push	{r3, r4, r5, lr}
   bda82:	4b10      	ldr	r3, [pc, #64]	; (bdac4 <srand+0x44>)
   bda84:	681d      	ldr	r5, [r3, #0]
   bda86:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bda88:	4604      	mov	r4, r0
   bda8a:	b9b3      	cbnz	r3, bdaba <srand+0x3a>
   bda8c:	2018      	movs	r0, #24
   bda8e:	f7fb fafd 	bl	b908c <malloc>
   bda92:	4602      	mov	r2, r0
   bda94:	63a8      	str	r0, [r5, #56]	; 0x38
   bda96:	b920      	cbnz	r0, bdaa2 <srand+0x22>
   bda98:	4b0b      	ldr	r3, [pc, #44]	; (bdac8 <srand+0x48>)
   bda9a:	480c      	ldr	r0, [pc, #48]	; (bdacc <srand+0x4c>)
   bda9c:	2142      	movs	r1, #66	; 0x42
   bda9e:	f7fb fb35 	bl	b910c <__assert_func>
   bdaa2:	490b      	ldr	r1, [pc, #44]	; (bdad0 <srand+0x50>)
   bdaa4:	4b0b      	ldr	r3, [pc, #44]	; (bdad4 <srand+0x54>)
   bdaa6:	e9c0 1300 	strd	r1, r3, [r0]
   bdaaa:	4b0b      	ldr	r3, [pc, #44]	; (bdad8 <srand+0x58>)
   bdaac:	6083      	str	r3, [r0, #8]
   bdaae:	230b      	movs	r3, #11
   bdab0:	8183      	strh	r3, [r0, #12]
   bdab2:	2100      	movs	r1, #0
   bdab4:	2001      	movs	r0, #1
   bdab6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bdaba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bdabc:	2200      	movs	r2, #0
   bdabe:	611c      	str	r4, [r3, #16]
   bdac0:	615a      	str	r2, [r3, #20]
   bdac2:	bd38      	pop	{r3, r4, r5, pc}
   bdac4:	2003ded0 	.word	0x2003ded0
   bdac8:	000bf3d1 	.word	0x000bf3d1
   bdacc:	000bf441 	.word	0x000bf441
   bdad0:	abcd330e 	.word	0xabcd330e
   bdad4:	e66d1234 	.word	0xe66d1234
   bdad8:	0005deec 	.word	0x0005deec

000bdadc <rand>:
   bdadc:	4b16      	ldr	r3, [pc, #88]	; (bdb38 <rand+0x5c>)
   bdade:	b510      	push	{r4, lr}
   bdae0:	681c      	ldr	r4, [r3, #0]
   bdae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bdae4:	b9b3      	cbnz	r3, bdb14 <rand+0x38>
   bdae6:	2018      	movs	r0, #24
   bdae8:	f7fb fad0 	bl	b908c <malloc>
   bdaec:	63a0      	str	r0, [r4, #56]	; 0x38
   bdaee:	b928      	cbnz	r0, bdafc <rand+0x20>
   bdaf0:	4602      	mov	r2, r0
   bdaf2:	4b12      	ldr	r3, [pc, #72]	; (bdb3c <rand+0x60>)
   bdaf4:	4812      	ldr	r0, [pc, #72]	; (bdb40 <rand+0x64>)
   bdaf6:	214e      	movs	r1, #78	; 0x4e
   bdaf8:	f7fb fb08 	bl	b910c <__assert_func>
   bdafc:	4a11      	ldr	r2, [pc, #68]	; (bdb44 <rand+0x68>)
   bdafe:	4b12      	ldr	r3, [pc, #72]	; (bdb48 <rand+0x6c>)
   bdb00:	e9c0 2300 	strd	r2, r3, [r0]
   bdb04:	4b11      	ldr	r3, [pc, #68]	; (bdb4c <rand+0x70>)
   bdb06:	6083      	str	r3, [r0, #8]
   bdb08:	230b      	movs	r3, #11
   bdb0a:	8183      	strh	r3, [r0, #12]
   bdb0c:	2201      	movs	r2, #1
   bdb0e:	2300      	movs	r3, #0
   bdb10:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bdb14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bdb16:	4a0e      	ldr	r2, [pc, #56]	; (bdb50 <rand+0x74>)
   bdb18:	6920      	ldr	r0, [r4, #16]
   bdb1a:	6963      	ldr	r3, [r4, #20]
   bdb1c:	490d      	ldr	r1, [pc, #52]	; (bdb54 <rand+0x78>)
   bdb1e:	4342      	muls	r2, r0
   bdb20:	fb01 2203 	mla	r2, r1, r3, r2
   bdb24:	fba0 0101 	umull	r0, r1, r0, r1
   bdb28:	1c43      	adds	r3, r0, #1
   bdb2a:	eb42 0001 	adc.w	r0, r2, r1
   bdb2e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bdb32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bdb36:	bd10      	pop	{r4, pc}
   bdb38:	2003ded0 	.word	0x2003ded0
   bdb3c:	000bf3d1 	.word	0x000bf3d1
   bdb40:	000bf441 	.word	0x000bf441
   bdb44:	abcd330e 	.word	0xabcd330e
   bdb48:	e66d1234 	.word	0xe66d1234
   bdb4c:	0005deec 	.word	0x0005deec
   bdb50:	5851f42d 	.word	0x5851f42d
   bdb54:	4c957f2d 	.word	0x4c957f2d

000bdb58 <strchr>:
   bdb58:	b2c9      	uxtb	r1, r1
   bdb5a:	4603      	mov	r3, r0
   bdb5c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bdb60:	b11a      	cbz	r2, bdb6a <strchr+0x12>
   bdb62:	428a      	cmp	r2, r1
   bdb64:	d1f9      	bne.n	bdb5a <strchr+0x2>
   bdb66:	4618      	mov	r0, r3
   bdb68:	4770      	bx	lr
   bdb6a:	2900      	cmp	r1, #0
   bdb6c:	bf18      	it	ne
   bdb6e:	2300      	movne	r3, #0
   bdb70:	e7f9      	b.n	bdb66 <strchr+0xe>

000bdb72 <strchrnul>:
   bdb72:	b510      	push	{r4, lr}
   bdb74:	4604      	mov	r4, r0
   bdb76:	f7ff ffef 	bl	bdb58 <strchr>
   bdb7a:	b918      	cbnz	r0, bdb84 <strchrnul+0x12>
   bdb7c:	4620      	mov	r0, r4
   bdb7e:	f000 f814 	bl	bdbaa <strlen>
   bdb82:	4420      	add	r0, r4
   bdb84:	bd10      	pop	{r4, pc}

000bdb86 <strcmp>:
   bdb86:	f810 2b01 	ldrb.w	r2, [r0], #1
   bdb8a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bdb8e:	2a01      	cmp	r2, #1
   bdb90:	bf28      	it	cs
   bdb92:	429a      	cmpcs	r2, r3
   bdb94:	d0f7      	beq.n	bdb86 <strcmp>
   bdb96:	1ad0      	subs	r0, r2, r3
   bdb98:	4770      	bx	lr

000bdb9a <strcpy>:
   bdb9a:	4603      	mov	r3, r0
   bdb9c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bdba0:	f803 2b01 	strb.w	r2, [r3], #1
   bdba4:	2a00      	cmp	r2, #0
   bdba6:	d1f9      	bne.n	bdb9c <strcpy+0x2>
   bdba8:	4770      	bx	lr

000bdbaa <strlen>:
   bdbaa:	4603      	mov	r3, r0
   bdbac:	f813 2b01 	ldrb.w	r2, [r3], #1
   bdbb0:	2a00      	cmp	r2, #0
   bdbb2:	d1fb      	bne.n	bdbac <strlen+0x2>
   bdbb4:	1a18      	subs	r0, r3, r0
   bdbb6:	3801      	subs	r0, #1
   bdbb8:	4770      	bx	lr

000bdbba <strncmp>:
   bdbba:	b510      	push	{r4, lr}
   bdbbc:	b17a      	cbz	r2, bdbde <strncmp+0x24>
   bdbbe:	4603      	mov	r3, r0
   bdbc0:	3901      	subs	r1, #1
   bdbc2:	1884      	adds	r4, r0, r2
   bdbc4:	f813 0b01 	ldrb.w	r0, [r3], #1
   bdbc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bdbcc:	4290      	cmp	r0, r2
   bdbce:	d101      	bne.n	bdbd4 <strncmp+0x1a>
   bdbd0:	42a3      	cmp	r3, r4
   bdbd2:	d101      	bne.n	bdbd8 <strncmp+0x1e>
   bdbd4:	1a80      	subs	r0, r0, r2
   bdbd6:	bd10      	pop	{r4, pc}
   bdbd8:	2800      	cmp	r0, #0
   bdbda:	d1f3      	bne.n	bdbc4 <strncmp+0xa>
   bdbdc:	e7fa      	b.n	bdbd4 <strncmp+0x1a>
   bdbde:	4610      	mov	r0, r2
   bdbe0:	e7f9      	b.n	bdbd6 <strncmp+0x1c>

000bdbe2 <strncpy>:
   bdbe2:	b510      	push	{r4, lr}
   bdbe4:	3901      	subs	r1, #1
   bdbe6:	4603      	mov	r3, r0
   bdbe8:	b132      	cbz	r2, bdbf8 <strncpy+0x16>
   bdbea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bdbee:	f803 4b01 	strb.w	r4, [r3], #1
   bdbf2:	3a01      	subs	r2, #1
   bdbf4:	2c00      	cmp	r4, #0
   bdbf6:	d1f7      	bne.n	bdbe8 <strncpy+0x6>
   bdbf8:	441a      	add	r2, r3
   bdbfa:	2100      	movs	r1, #0
   bdbfc:	4293      	cmp	r3, r2
   bdbfe:	d100      	bne.n	bdc02 <strncpy+0x20>
   bdc00:	bd10      	pop	{r4, pc}
   bdc02:	f803 1b01 	strb.w	r1, [r3], #1
   bdc06:	e7f9      	b.n	bdbfc <strncpy+0x1a>

000bdc08 <strrchr>:
   bdc08:	b538      	push	{r3, r4, r5, lr}
   bdc0a:	4603      	mov	r3, r0
   bdc0c:	460c      	mov	r4, r1
   bdc0e:	b969      	cbnz	r1, bdc2c <strrchr+0x24>
   bdc10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdc14:	f7ff bfa0 	b.w	bdb58 <strchr>
   bdc18:	1c43      	adds	r3, r0, #1
   bdc1a:	4605      	mov	r5, r0
   bdc1c:	4621      	mov	r1, r4
   bdc1e:	4618      	mov	r0, r3
   bdc20:	f7ff ff9a 	bl	bdb58 <strchr>
   bdc24:	2800      	cmp	r0, #0
   bdc26:	d1f7      	bne.n	bdc18 <strrchr+0x10>
   bdc28:	4628      	mov	r0, r5
   bdc2a:	bd38      	pop	{r3, r4, r5, pc}
   bdc2c:	2500      	movs	r5, #0
   bdc2e:	e7f5      	b.n	bdc1c <strrchr+0x14>

000bdc30 <_strtol_l.constprop.0>:
   bdc30:	2b01      	cmp	r3, #1
   bdc32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdc36:	d001      	beq.n	bdc3c <_strtol_l.constprop.0+0xc>
   bdc38:	2b24      	cmp	r3, #36	; 0x24
   bdc3a:	d906      	bls.n	bdc4a <_strtol_l.constprop.0+0x1a>
   bdc3c:	f7fb fa5e 	bl	b90fc <__errno>
   bdc40:	2316      	movs	r3, #22
   bdc42:	6003      	str	r3, [r0, #0]
   bdc44:	2000      	movs	r0, #0
   bdc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdc4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bdd30 <_strtol_l.constprop.0+0x100>
   bdc4e:	460d      	mov	r5, r1
   bdc50:	462e      	mov	r6, r5
   bdc52:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdc56:	f814 700c 	ldrb.w	r7, [r4, ip]
   bdc5a:	f017 0708 	ands.w	r7, r7, #8
   bdc5e:	d1f7      	bne.n	bdc50 <_strtol_l.constprop.0+0x20>
   bdc60:	2c2d      	cmp	r4, #45	; 0x2d
   bdc62:	d132      	bne.n	bdcca <_strtol_l.constprop.0+0x9a>
   bdc64:	782c      	ldrb	r4, [r5, #0]
   bdc66:	2701      	movs	r7, #1
   bdc68:	1cb5      	adds	r5, r6, #2
   bdc6a:	2b00      	cmp	r3, #0
   bdc6c:	d05b      	beq.n	bdd26 <_strtol_l.constprop.0+0xf6>
   bdc6e:	2b10      	cmp	r3, #16
   bdc70:	d109      	bne.n	bdc86 <_strtol_l.constprop.0+0x56>
   bdc72:	2c30      	cmp	r4, #48	; 0x30
   bdc74:	d107      	bne.n	bdc86 <_strtol_l.constprop.0+0x56>
   bdc76:	782c      	ldrb	r4, [r5, #0]
   bdc78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bdc7c:	2c58      	cmp	r4, #88	; 0x58
   bdc7e:	d14d      	bne.n	bdd1c <_strtol_l.constprop.0+0xec>
   bdc80:	786c      	ldrb	r4, [r5, #1]
   bdc82:	2310      	movs	r3, #16
   bdc84:	3502      	adds	r5, #2
   bdc86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bdc8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdc8e:	f04f 0c00 	mov.w	ip, #0
   bdc92:	fbb8 f9f3 	udiv	r9, r8, r3
   bdc96:	4666      	mov	r6, ip
   bdc98:	fb03 8a19 	mls	sl, r3, r9, r8
   bdc9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bdca0:	f1be 0f09 	cmp.w	lr, #9
   bdca4:	d816      	bhi.n	bdcd4 <_strtol_l.constprop.0+0xa4>
   bdca6:	4674      	mov	r4, lr
   bdca8:	42a3      	cmp	r3, r4
   bdcaa:	dd24      	ble.n	bdcf6 <_strtol_l.constprop.0+0xc6>
   bdcac:	f1bc 0f00 	cmp.w	ip, #0
   bdcb0:	db1e      	blt.n	bdcf0 <_strtol_l.constprop.0+0xc0>
   bdcb2:	45b1      	cmp	r9, r6
   bdcb4:	d31c      	bcc.n	bdcf0 <_strtol_l.constprop.0+0xc0>
   bdcb6:	d101      	bne.n	bdcbc <_strtol_l.constprop.0+0x8c>
   bdcb8:	45a2      	cmp	sl, r4
   bdcba:	db19      	blt.n	bdcf0 <_strtol_l.constprop.0+0xc0>
   bdcbc:	fb06 4603 	mla	r6, r6, r3, r4
   bdcc0:	f04f 0c01 	mov.w	ip, #1
   bdcc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdcc8:	e7e8      	b.n	bdc9c <_strtol_l.constprop.0+0x6c>
   bdcca:	2c2b      	cmp	r4, #43	; 0x2b
   bdccc:	bf04      	itt	eq
   bdcce:	782c      	ldrbeq	r4, [r5, #0]
   bdcd0:	1cb5      	addeq	r5, r6, #2
   bdcd2:	e7ca      	b.n	bdc6a <_strtol_l.constprop.0+0x3a>
   bdcd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bdcd8:	f1be 0f19 	cmp.w	lr, #25
   bdcdc:	d801      	bhi.n	bdce2 <_strtol_l.constprop.0+0xb2>
   bdcde:	3c37      	subs	r4, #55	; 0x37
   bdce0:	e7e2      	b.n	bdca8 <_strtol_l.constprop.0+0x78>
   bdce2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bdce6:	f1be 0f19 	cmp.w	lr, #25
   bdcea:	d804      	bhi.n	bdcf6 <_strtol_l.constprop.0+0xc6>
   bdcec:	3c57      	subs	r4, #87	; 0x57
   bdcee:	e7db      	b.n	bdca8 <_strtol_l.constprop.0+0x78>
   bdcf0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdcf4:	e7e6      	b.n	bdcc4 <_strtol_l.constprop.0+0x94>
   bdcf6:	f1bc 0f00 	cmp.w	ip, #0
   bdcfa:	da05      	bge.n	bdd08 <_strtol_l.constprop.0+0xd8>
   bdcfc:	2322      	movs	r3, #34	; 0x22
   bdcfe:	6003      	str	r3, [r0, #0]
   bdd00:	4646      	mov	r6, r8
   bdd02:	b942      	cbnz	r2, bdd16 <_strtol_l.constprop.0+0xe6>
   bdd04:	4630      	mov	r0, r6
   bdd06:	e79e      	b.n	bdc46 <_strtol_l.constprop.0+0x16>
   bdd08:	b107      	cbz	r7, bdd0c <_strtol_l.constprop.0+0xdc>
   bdd0a:	4276      	negs	r6, r6
   bdd0c:	2a00      	cmp	r2, #0
   bdd0e:	d0f9      	beq.n	bdd04 <_strtol_l.constprop.0+0xd4>
   bdd10:	f1bc 0f00 	cmp.w	ip, #0
   bdd14:	d000      	beq.n	bdd18 <_strtol_l.constprop.0+0xe8>
   bdd16:	1e69      	subs	r1, r5, #1
   bdd18:	6011      	str	r1, [r2, #0]
   bdd1a:	e7f3      	b.n	bdd04 <_strtol_l.constprop.0+0xd4>
   bdd1c:	2430      	movs	r4, #48	; 0x30
   bdd1e:	2b00      	cmp	r3, #0
   bdd20:	d1b1      	bne.n	bdc86 <_strtol_l.constprop.0+0x56>
   bdd22:	2308      	movs	r3, #8
   bdd24:	e7af      	b.n	bdc86 <_strtol_l.constprop.0+0x56>
   bdd26:	2c30      	cmp	r4, #48	; 0x30
   bdd28:	d0a5      	beq.n	bdc76 <_strtol_l.constprop.0+0x46>
   bdd2a:	230a      	movs	r3, #10
   bdd2c:	e7ab      	b.n	bdc86 <_strtol_l.constprop.0+0x56>
   bdd2e:	bf00      	nop
   bdd30:	000bf49b 	.word	0x000bf49b

000bdd34 <strtol>:
   bdd34:	4613      	mov	r3, r2
   bdd36:	460a      	mov	r2, r1
   bdd38:	4601      	mov	r1, r0
   bdd3a:	4802      	ldr	r0, [pc, #8]	; (bdd44 <strtol+0x10>)
   bdd3c:	6800      	ldr	r0, [r0, #0]
   bdd3e:	f7ff bf77 	b.w	bdc30 <_strtol_l.constprop.0>
   bdd42:	bf00      	nop
   bdd44:	2003ded0 	.word	0x2003ded0

000bdd48 <__register_exitproc>:
   bdd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdd4c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bde08 <__register_exitproc+0xc0>
   bdd50:	4606      	mov	r6, r0
   bdd52:	f8d8 0000 	ldr.w	r0, [r8]
   bdd56:	461f      	mov	r7, r3
   bdd58:	460d      	mov	r5, r1
   bdd5a:	4691      	mov	r9, r2
   bdd5c:	f000 f856 	bl	bde0c <__retarget_lock_acquire_recursive>
   bdd60:	4b25      	ldr	r3, [pc, #148]	; (bddf8 <__register_exitproc+0xb0>)
   bdd62:	681c      	ldr	r4, [r3, #0]
   bdd64:	b934      	cbnz	r4, bdd74 <__register_exitproc+0x2c>
   bdd66:	4c25      	ldr	r4, [pc, #148]	; (bddfc <__register_exitproc+0xb4>)
   bdd68:	601c      	str	r4, [r3, #0]
   bdd6a:	4b25      	ldr	r3, [pc, #148]	; (bde00 <__register_exitproc+0xb8>)
   bdd6c:	b113      	cbz	r3, bdd74 <__register_exitproc+0x2c>
   bdd6e:	681b      	ldr	r3, [r3, #0]
   bdd70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bdd74:	6863      	ldr	r3, [r4, #4]
   bdd76:	2b1f      	cmp	r3, #31
   bdd78:	dd07      	ble.n	bdd8a <__register_exitproc+0x42>
   bdd7a:	f8d8 0000 	ldr.w	r0, [r8]
   bdd7e:	f000 f847 	bl	bde10 <__retarget_lock_release_recursive>
   bdd82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdd8a:	b34e      	cbz	r6, bdde0 <__register_exitproc+0x98>
   bdd8c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bdd90:	b988      	cbnz	r0, bddb6 <__register_exitproc+0x6e>
   bdd92:	4b1c      	ldr	r3, [pc, #112]	; (bde04 <__register_exitproc+0xbc>)
   bdd94:	b923      	cbnz	r3, bdda0 <__register_exitproc+0x58>
   bdd96:	f8d8 0000 	ldr.w	r0, [r8]
   bdd9a:	f000 f838 	bl	bde0e <__retarget_lock_release>
   bdd9e:	e7f0      	b.n	bdd82 <__register_exitproc+0x3a>
   bdda0:	f44f 7084 	mov.w	r0, #264	; 0x108
   bdda4:	f7fb f972 	bl	b908c <malloc>
   bdda8:	2800      	cmp	r0, #0
   bddaa:	d0f4      	beq.n	bdd96 <__register_exitproc+0x4e>
   bddac:	2300      	movs	r3, #0
   bddae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bddb2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bddb6:	6863      	ldr	r3, [r4, #4]
   bddb8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bddbc:	2201      	movs	r2, #1
   bddbe:	409a      	lsls	r2, r3
   bddc0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bddc4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bddc8:	4313      	orrs	r3, r2
   bddca:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bddce:	2e02      	cmp	r6, #2
   bddd0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bddd4:	bf02      	ittt	eq
   bddd6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bddda:	4313      	orreq	r3, r2
   bdddc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bdde0:	6863      	ldr	r3, [r4, #4]
   bdde2:	f8d8 0000 	ldr.w	r0, [r8]
   bdde6:	1c5a      	adds	r2, r3, #1
   bdde8:	3302      	adds	r3, #2
   bddea:	6062      	str	r2, [r4, #4]
   bddec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bddf0:	f000 f80e 	bl	bde10 <__retarget_lock_release_recursive>
   bddf4:	2000      	movs	r0, #0
   bddf6:	e7c6      	b.n	bdd86 <__register_exitproc+0x3e>
   bddf8:	2003e7e8 	.word	0x2003e7e8
   bddfc:	2003e75c 	.word	0x2003e75c
   bde00:	00000000 	.word	0x00000000
   bde04:	000b908d 	.word	0x000b908d
   bde08:	2003df34 	.word	0x2003df34

000bde0c <__retarget_lock_acquire_recursive>:
   bde0c:	4770      	bx	lr

000bde0e <__retarget_lock_release>:
   bde0e:	4770      	bx	lr

000bde10 <__retarget_lock_release_recursive>:
   bde10:	4770      	bx	lr

000bde12 <link_code_end>:
	...

000bde14 <dynalib_user>:
   bde14:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bde24:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bde34:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   bde44:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   bde54:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   bde64:	7420 206f 7325 4e00 646f 2065 6425 7220      to %s.Node %d r
   bde74:	7465 7972 7320 6174 6574 2520 2064 6964     etry state %d di
   bde84:	6563 6f20 2066 6425 7220 7465 7972 6920     ce of %d retry i
   bde94:	206e 6c25 2075 6573 6f63 646e 0073 6e55     n %lu seconds.Un
   bdea4:	6f63 666e 6769 7275 6465 6e20 646f 2065     configured node 
   bdeb4:	202d 6f6e 6f20 6666 6573 2074 6e61 2064     - no offset and 
   bdec4:	6c25 2075 6573 6f63 646e 2073 6974 6c6c     %lu seconds till
   bded4:	6e20 7865 2074 6570 6972 646f 2500 0054      next period.%T.
   bdee4:	7453 7261 6974 676e 6120 6e20 7765 7020     Starting a new p
   bdef4:	7265 6f69 2064 6c25 2075 6573 2063 6974     eriod %lu sec ti
   bdf04:	6c6c 2520 0073 6e49 7420 7265 696d 616e     ll %s.In termina
   bdf14:	206c 6870 7361 2065 6c25 2075 6573 6f63     l phase %lu seco
   bdf24:	646e 2073 6974 6c6c 2520 0073 6e6f 6f00     nds till %s.on.o
   bdf34:	6666 5400 7972 6e69 2067 6f74 7220 6365     ff.Trying to rec
   bdf44:	6e6f 656e 7463 7420 206f 6167 6574 6177     onnect to gatewa
   bdf54:	0079 6150 6b72 6920 2073 706f 6e65 6220     y.Park is open b
   bdf64:	7475 7720 2065 6168 6576 6e20 746f 6320     ut we have not c
   bdf74:	6e6f 656e 7463 6465 6620 726f 6f20 6576     onnected for ove
   bdf84:	2072 7774 206f 6572 6f70 7472 6e69 2067     r two reporting 
   bdf94:	6570 6972 646f 2073 202d 656e 6465 7420     periods - need t
   bdfa4:	206f 6f70 6577 2072 7963 6c63 2065 6e61     o power cycle an
   bdfb4:	2064 6f67 7420 206f 2031 696d 206e 7266     d go to 1 min fr
   bdfc4:	7165 6575 636e 0079 6c53 6565 2070 6f66     equency.Sleep fo
   bdfd4:	2072 6925 7320 6365 6e6f 7364 7520 746e     r %i seconds unt
   bdfe4:	6c69 6e20 7865 2074 7665 6e65 2074 7461     il next event at
   bdff4:	2520 2073 6977 6874 7320 6e65 6f73 2072      %s with sensor 
   be004:	7325 5700 6b6f 2065 6977 6874 7520 6573     %s.Woke with use
   be014:	2072 7562 7474 6e6f 2d20 4c20 526f 2041     r button - LoRA 
   be024:	7453 7461 0065 6f57 656b 7720 7469 2068     State.Woke with 
   be034:	6573 736e 726f 6920 746e 7265 7572 7470     sensor interrupt
   be044:	5400 6d69 2065 7369 7520 2070 7461 2520     .Time is up at %
   be054:	2073 6977 6874 2520 696c 6620 6572 2065     s with %li free 
   be064:	656d 6f6d 7972 4100 656c 7472 6320 646f     memory.Alert cod
   be074:	2065 6425 202c 6977 6c6c 6820 6e61 6c64     e %d, will handl
   be084:	2065 6e69 4520 5252 524f 7320 6174 6574     e in ERROR state
   be094:	4600 6961 656c 2064 6e69 6420 7461 2061     .Failed in data 
   be0a4:	6573 646e 202c 6572 7274 5379 6174 6574     send, retryState
   be0b4:	3d20 2520 0064 6944 2064 6f6e 2074 6572      = %d.Did not re
   be0c4:	6563 7669 2065 2061 6572 7073 6e6f 6573     ceive a response
   be0d4:	4100 656c 7472 3120 2d20 4a20 696f 206e     .Alert 1 - Join 
   be0e4:	6552 7571 7365 2074 6552 7571 7269 6465     Request Required
   be0f4:	4100 656c 7472 3220 202d 654e 2077 6144     .Alert 2- New Da
   be104:	2079 6c41 7265 0074 6c41 7265 2074 2033     y Alert.Alert 3 
   be114:	202d 6552 6573 7474 6e69 2067 6564 6976     - Resetting devi
   be124:	6563 4900 696e 6974 6c61 7a69 2065 6f4c     ce.Initialize Lo
   be134:	4152 7220 6461 6f69 4900 696e 6974 6c61     RA radio.Initial
   be144:	7a69 7461 6f69 206e 7573 6363 7365 6673     ization successf
   be154:	6c75 4900 696e 6974 6c61 7a69 7461 6f69     ul.Initializatio
   be164:	206e 6f6e 2074 7573 6363 7365 6673 6c75     n not successful
   be174:	2d20 7020 776f 7265 6320 6379 656c 5500      - power cycle.U
   be184:	646e 6665 6e69 6465 4520 7272 726f 5320     ndefined Error S
   be194:	6174 6574 5200 7365 7465 6974 676e 6420     tate.Resetting d
   be1a4:	6575 7420 206f 6f6c 2077 656d 6f6d 7972     ue to low memory
   be1b4:	4c00 526f 2041 6e49 7469 6169 696c 617a     .LoRA Initializa
   be1c4:	6974 6e6f 6620 6961 756c 6572 6120 656c     tion failure ale
   be1d4:	7472 6320 646f 2065 6425 2d20 7020 776f     rt code %d - pow
   be1e4:	7265 6320 6379 656c 6920 206e 3033 4e00     er cycle in 30.N
   be1f4:	646f 2065 756e 626d 7265 6920 646e 6369     ode number indic
   be204:	7461 6465 7520 636e 6e6f 6966 7567 6572     ated unconfigure
   be214:	2064 6f6e 6564 6f20 2066 6425 7320 7465     d node of %d set
   be224:	6974 676e 6120 656c 7472 6320 646f 2065     ting alert code 
   be234:	6f74 2520 0064 7355 7265 6220 7475 6f74     to %d.User butto
   be244:	206e 7270 7365 6573 2c64 7720 6c69 206c     n pressed, will 
   be254:	6f66 6372 2065 6f63 6e6e 6365 6974 6e6f     force connection
   be264:	7420 206f 6150 7472 6369 656c 5300 6174      to Particle.Sta
   be274:	7472 7075 6320 6d6f 6c70 7465 2065 6f66     rtup complete fo
   be284:	2072 6874 2065 6f4e 6564 7720 7469 2068     r the Node with 
   be294:	6c61 7265 2074 6f63 6564 2520 2064 6e61     alert code %d an
   be2a4:	2064 616c 7473 6320 6e6f 656e 7463 2520     d last connect %
   be2b4:	0073 0000                                   s...

000be2b8 <_ZTVN5spark10LogHandlerE>:
	...
   be2c8:	40a5 000b 40cd 000b                         .@...@..

000be2d0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   be2d8:	4189 000b 41bd 000b a7d5 000b 40cf 000b     .A...A.......@..
   be2e8:	6e69 7469 6620 6961 656c 0064 6e69 4c20     init failed.in L
   be2f8:	526f 2041 6573 7574 2070 202d 6f6e 6564     oRA setup - node
   be308:	6e20 6d75 6562 2072 6425 4c00 526f 2041      number %d.LoRA 
   be318:	6152 6964 206f 6e69 7469 6169 696c 657a     Radio initialize
   be328:	2064 7361 6120 6720 7461 7765 7961 7720     d as a gateway w
   be338:	7469 2068 2061 6564 6976 6563 4449 6f20     ith a deviceID o
   be348:	2066 7325 4c00 526f 2041 6152 6964 206f     f %s.LoRA Radio 
   be358:	6e69 7469 6169 696c 657a 2064 7361 6e20     initialized as n
   be368:	646f 2065 6925 6120 646e 6120 6420 7665     ode %i and a dev
   be378:	6369 4965 2044 666f 2520 0073 6f4c 4152     iceID of %s.LoRA
   be388:	5220 6461 6f69 6920 696e 6974 6c61 7a69      Radio initializ
   be398:	6465 6120 2073 6e61 7520 636e 6e6f 6966     ed as an unconfi
   be3a8:	7567 6572 2064 6f6e 6564 2520 2069 6e61     gured node %i an
   be3b8:	2064 2061 6564 6976 6563 4449 6f20 2066     d a deviceID of 
   be3c8:	7325 7700 7469 0068 6977 6874 756f 0074     %s.with.without.
   be3d8:	706f 6e65 6300 6f6c 6573 0064 6854 2065     open.closed.The 
   be3e8:	6167 6574 6177 2079 6573 2074 6e61 6120     gateway set an a
   be3f8:	656c 7472 2520 0064 6150 6b72 6920 2073     lert %d.Park is 
   be408:	6c63 736f 6465 2d20 7220 7365 7465 6520     closed - reset e
   be418:	6576 7972 6874 6e69 0067 6144 6174 7220     verything.Data r
   be428:	7065 726f 2074 6361 6e6b 776f 656c 6764     eport acknowledg
   be438:	6465 2520 2073 6c61 7265 2074 6f66 2072     ed %s alert for 
   be448:	656d 7373 6761 2065 6425 7020 7261 206b     message %d park 
   be458:	7369 2520 2073 6e61 2064 6c61 7265 2074     is %s and alert 
   be468:	6f63 6564 6920 2073 6425 4e00 646f 2065     code is %d.Node 
   be478:	6425 4a20 696f 206e 6572 7571 7365 2074     %d Join request 
   be488:	6361 6e6b 776f 656c 6764 6465 6120 646e     acknowledged and
   be498:	7320 6e65 6f73 2072 6573 2074 6f74 2520      sensor set to %
   be4a8:	0064 614d 6967 2063 754e 626d 7265 6d20     d.Magic Number m
   be4b8:	7369 616d 6374 2068 202d 6769 6f6e 6972     ismatch - ignori
   be4c8:	676e 6d20 7365 6173 6567 5200 6365 6965     ng message.Recei
   be4d8:	6576 2064 7266 6d6f 6e20 646f 2065 6425     ved from node %d
   be4e8:	7720 7469 2068 7372 6973 253d 2064 202d      with rssi=%d - 
   be4f8:	2061 7325 6d20 7365 6173 6567 5300 7465     a %s message.Set
   be508:	6320 6f6c 6b63 7420 206f 7325 6120 646e      clock to %s and
   be518:	7220 7065 726f 2074 7266 7165 6575 636e      report frequenc
   be528:	2079 6f74 2520 2064 696d 756e 6574 0073     y to %d minutes.
   be538:	6e49 6176 656c 2064 6f4c 4152 6d20 7365     Invaled LoRA mes
   be548:	6173 6567 6620 616c 0067 6553 646e 6e69     sage flag.Sendin
   be558:	2067 6164 6174 7220 7065 726f 2074 756e     g data report nu
   be568:	626d 7265 2520 0064 6f4e 6564 2520 2064     mber %d.Node %d 
   be578:	6164 6174 7220 7065 726f 2074 6564 696c     data report deli
   be588:	6576 6572 2064 202d 7573 6363 7365 2073     vered - success 
   be598:	6172 6574 2520 2e34 6632 4e00 646f 2065     rate %4.2f.Node 
   be5a8:	6425 2d20 4420 7461 2061 6572 6f70 7472     %d - Data report
   be5b8:	7320 6e65 2064 6f74 6720 7461 7765 7961      send to gateway
   be5c8:	2520 2064 6166 6c69 6465 2d20 4e20 206f      %d failed - No 
   be5d8:	6f52 7475 2065 202d 7573 6363 7365 2073     Route - success 
   be5e8:	6172 6574 2520 2e34 6632 4e00 646f 2065     rate %4.2f.Node 
   be5f8:	6425 2d20 4420 7461 2061 6572 6f70 7472     %d - Data report
   be608:	7320 6e65 2064 6f74 6720 7461 7765 7961      send to gateway
   be618:	2520 2064 6166 6c69 6465 2d20 5520 616e      %d failed - Una
   be628:	6c62 2065 6f74 4420 6c65 7669 7265 2d20     ble to Deliver -
   be638:	7320 6375 6563 7373 7220 7461 2065 3425      success rate %4
   be648:	322e 0066 6f4e 6564 2520 2064 202d 6144     .2f.Node %d - Da
   be658:	6174 7220 7065 726f 2074 6573 646e 7420     ta report send t
   be668:	206f 6167 6574 6177 2079 6425 6620 6961     o gateway %d fai
   be678:	656c 2064 2d20 5520 6b6e 6f6e 6e77 2d20     led  - Unknown -
   be688:	7320 6375 6563 7373 7220 7461 2065 3425      success rate %4
   be698:	322e 0066 6553 646e 6e69 2067 6f6a 6e69     .2f.Sending join
   be6a8:	7220 7165 6575 7473 6620 726f 7520 636e      request for unc
   be6b8:	6e6f 6966 7567 6572 2064 6f6e 6564 5300     onfigured node.S
   be6c8:	6e65 6964 676e 6a20 696f 206e 6572 7571     ending join requ
   be6d8:	7365 2074 7361 5420 6d69 2065 7369 6e20     est as Time is n
   be6e8:	746f 7620 6c61 6469 5300 6e65 6964 676e     ot valid.Sending
   be6f8:	6a20 696f 206e 6572 7571 7365 2074 6f74      join request to
   be708:	6320 656c 7261 6120 656c 7472 6320 646f      clear alert cod
   be718:	0065 6f4a 6e69 7220 7165 6575 7473 7320     e.Join request s
   be728:	6e65 2074 6f74 6720 7461 7765 7961 7320     ent to gateway s
   be738:	6375 6563 7373 7566 6c6c 0079 6f4a 6e69     uccessfully.Join
   be748:	7220 7165 6575 7473 7420 206f 6147 6574      request to Gate
   be758:	6177 2079 6166 6c69 6465 0000               way failed..

000be764 <_ZTVN8particle9LEDStatusE>:
	...
   be76c:	4fc9 000b 4fe5 000b 4fb5 000b               .O...O...O..

000be778 <_ZTV14LoRA_Functions>:
	...
   be780:	4fb7 000b 4fb9 000b 7973 5373 6174 7574     .O...O..sysStatu
   be790:	2073 626f 656a 7463 6e20 746f 7620 6c61     s object not val
   be7a0:	6469 2d20 7220 6965 696e 6974 6c61 7a69     id - reinitializ
   be7b0:	6e69 0067 7973 5373 6174 7574 2073 626f     ing.sysStatus ob
   be7c0:	656a 7463 6920 2073 6176 696c 0064 7563     ject is valid.cu
   be7d0:	7272 6e65 2074 626f 656a 7463 6e20 746f     rrent object not
   be7e0:	7620 6c61 6469 2d20 7220 6965 696e 6974      valid - reiniti
   be7f0:	6c61 7a69 6e69 0067 7563 7272 6e65 2074     alizing.current 
   be800:	626f 656a 7463 6920 2073 6176 696c 0064     object is valid.
   be810:	6164 6174 6e20 746f 7620 6c61 6469 6620     data not valid f
   be820:	6572 7571 6e65 7963 6d20 6e69 7475 7365     requency minutes
   be830:	3d20 6425 6400 7461 2061 6f6e 2074 6176      =%d.data not va
   be840:	696c 2064 6f6e 6564 6e20 6d75 6562 2072     lid node number 
   be850:	253d 0064 7973 5373 6174 7574 2073 6164     =%d.sysStatus da
   be860:	6174 6920 2073 7325 6300 7275 6572 746e     ta is %s.current
   be870:	6420 7461 2061 6f6e 2074 6176 696c 2064      data not valid 
   be880:	6f68 7275 796c 6f43 6e75 3d74 6425 6300     hourlyCount=%d.c
   be890:	7275 6572 746e 6420 7461 2061 7369 2520     urrent data is %
   be8a0:	0073 6164 6174 6920 696e 6974 6c61 7a69     s.data initializ
   be8b0:	6465 4c00 616f 6964 676e 7320 7379 6574     ed.Loading syste
   be8c0:	206d 6564 6166 6c75 7374 4300 7275 6572     m defaults.Curre
   be8d0:	746e 4420 7461 2061 6e49 7469 6169 696c     nt Data Initiali
   be8e0:	657a 0064                                   zed.

000be8e4 <_ZTV8MB85RC64>:
	...
   be8ec:	5979 000b 598d 000b 70c9 000b 715f 000b     yY...Y...p.._q..
   be8fc:	71e1 000b                                   .q..

000be900 <_ZTV13sysStatusData>:
	...
   be908:	5aa1 000b 5a0b 000b 59e3 000b 8727 000b     .Z...Z...Y..'...
   be918:	874f 000b 5de5 000b 5fcd 000b 59a1 000b     O....]..._...Y..
   be928:	59b9 000b                                   .Y..

000be92c <_ZTV17currentStatusData>:
	...
   be934:	5bb9 000b 5a0b 000b 59e3 000b 8727 000b     .[...Z...Y..'...
   be944:	874f 000b 5e7d 000b 60a9 000b 594d 000b     O...}^...`..MY..
   be954:	5965 000b 6e49 7469 6c61 7a69 6e69 2067     eY..Initalizing 
   be964:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   be974:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   be984:	6f43 666e 6769 0000                         Config..

000be98c <BLUE_LED>:
   be98c:	0007                                        ..

000be98e <BUTTON_PIN>:
   be98e:	0004                                        ..

000be990 <INT_PIN>:
   be990:	0012                                        ..

000be992 <MODULE_POWER_PIN>:
   be992:	0011                                        ..

000be994 <RFM95_CS>:
   be994:	0005                                        ..

000be996 <RFM95_INT>:
   be996:	0002                                        ..

000be998 <RFM95_RST>:
   be998:	0006                                        ..

000be99a <TMP36_SENSE_PIN>:
   be99a:	000f 6e55 6e6b 776f 006e 6f4e 656e 5700     ..Unknown.None.W
   be9aa:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
   be9ba:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
   be9ca:	4c00 4554 435f 5441 4d5f 0031 544c 5f45     .LTE_CAT_M1.LTE_
   be9da:	4143 5f54 424e 0031 6f4e 2074 6843 7261     CAT_NB1.Not Char
   be9ea:	6967 676e 4300 6168 6772 6465 4400 7369     ging.Charged.Dis
   be9fa:	6863 7261 6967 676e 4600 7561 746c 4400     charging.Fault.D
   bea0a:	6369 6e6f 656e 7463 6465 4100 7373 7265     iconnected.Asser
   bea1a:	6974 6e6f 6146 6c69 7275 2065 702a 705f     tionFailure *p_p
   bea2a:	6e69 3c20 2820 3233 2b20 3120 2936 2500     in < (32 + 16).%
   bea3a:	2073 3a53 3225 302e 2566 2c25 5120 253a     s S:%2.0f%%, Q:%
   bea4a:	2e32 6630 2525 0020 6f43 6e75 2c74 6820     2.0f%% .Count, h
   bea5a:	756f 6c72 3a79 2520 2e69 6420 6961 796c     ourly: %i. daily
   bea6a:	203a 6925 4100 7373 7265 6974 6e6f 6146     : %i.AssertionFa
   bea7a:	6c69 7275 2065 7273 2063 2626 7320 6372     ilure src && src
   bea8a:	3e2d 6163 6c6c 6162 6b63 0000 0000 e99c     ->callback......
   bea9a:	000b e9a4 000b e9a9 000b e9ae 000b e9b2     ................
   beaaa:	000b e9b7 000b e9bc 000b e9c0 000b e9cb     ................
   beaba:	000b e9d6 000b 6166 6c69 6465 7420 206f     ......failed to 
   beaca:	6572 6461 7220 6765 6441 7264 253d 3230     read regAddr=%02
   beada:	2078 6f63 6e75 3d74 7525 6600 6961 656c     x count=%u.faile
   beaea:	2064 6f74 7220 6165 2064 6572 4167 6464     d to read regAdd
   beafa:	3d72 3025 7832 7320 6174 3d74 6425 4600     r=%02x stat=%d.F
   beb0a:	554f 2054 6964 2064 6f6e 2074 6f67 4820     OUT did not go H
   beb1a:	4749 0048 6f6e 2074 6564 6574 7463 6465     IGH.not detected
   beb2a:	6600 6961 656c 2064 6f74 7720 6972 6574     .failed to write
   beb3a:	7220 6765 6441 7264 253d 3230 2078 7473      regAddr=%02x st
   beb4a:	7461 253d 0064 6573 5774 5444 2520 0064     at=%d.setWDT %d.
   beb5a:	6177 6374 6468 676f 6320 656c 7261 6465     watchdog cleared
   beb6a:	6220 6552 7573 746c 253d 0064 6177 6374      bResult=%d.watc
   beb7a:	6468 676f 7320 7465 6620 756f 5372 6365     hdog set fourSec
   beb8a:	3d73 6425 6220 6552 7573 746c 253d 0064     s=%d bResult=%d.
   beb9a:	4157 4354 4448 474f 4400 4545 5f50 4f50     WATCHDOG.DEEP_PO
   bebaa:	4557 5f52 4f44 4e57 4300 554f 544e 4f44     WER_DOWN.COUNTDO
   bebba:	4e57 545f 4d49 5245 4100 414c 4d52 6600     WN_TIMER.ALARM.f
   bebca:	6961 756c 6572 6920 206e 7075 6164 6574     ailure in update
   bebda:	6157 656b 6552 7361 6e6f 2520 0064 6177     WakeReason %d.wa
   bebea:	656b 7220 6165 6f73 206e 203d 7325 6600     ke reason = %s.f
   bebfa:	6961 756c 6572 6920 206e 6573 4374 756f     ailure in setCou
   bec0a:	746e 6f64 6e77 6954 656d 2072 6425 6600     ntdownTimer %d.f
   bec1a:	6961 756c 6572 6920 206e 6564 7065 6f50     ailure in deepPo
   bec2a:	6577 4472 776f 206e 6425 5200 4745 535f     werDown %d.REG_S
   bec3a:	454c 5045 435f 5254 3d4c 7830 3225 0078     LEEP_CTRL=0x%2x.
   bec4a:	6964 6e64 7427 7020 776f 7265 6420 776f     didn't power dow
   bec5a:	006e 3025 6434 252d 3230 2d64 3025 6432     n.%04d-%02d-%02d
   bec6a:	2520 3230 3a64 3025 6432 253a 3230 0064      %02d:%02d:%02d.
   bec7a:	6567 5274 6374 7341 6d54 2520 0073 6573     getRtcAsTm %s.se
   bec8a:	5274 6374 7341 6d54 2520 0073 6166 6c69     tRtcAsTm %s.fail
   bec9a:	7275 2065 6e69 7320 7465 7452 4663 6f72     ure in setRtcFro
   becaa:	546d 206d 6425 7300 7465 5220 4354 6620     mTm %d.set RTC f
   becba:	6f72 206d 6c63 756f 2064 7325 7300 7465     rom cloud %s.set
   becca:	7320 7379 6574 206d 6c63 636f 206b 7266      system clock fr
   becda:	6d6f 5220 4354 2520 0073 6166 6c69 6465     om RTC %s.failed
   becea:	7420 206f 6564 6574 7463 4120 3142 3038      to detect AB180
   becfa:	0035 7061 2e70 6261 3831 3530 0000          5.app.ab1805..

000bed08 <_ZTV6AB1805>:
	...
   bed10:	6561 000b 6563 000b 6bd9 000b 6c5f 000b     ae..ce...k.._l..

000bed20 <_ZTV6MB85RC>:
	...
   bed28:	7089 000b 708b 000b 70c9 000b 715f 000b     .p...p...p.._q..
   bed38:	71e1 000b                                   .q..

000bed3c <_ZTV15RHGenericDriver>:
	...
   bed4c:	739d 000b 40a5 000b 40a5 000b 40a5 000b     .s...@...@...@..
   bed5c:	40a5 000b 73ff 000b 73a1 000b 744f 000b     .@...s...s..Ot..
   bed6c:	741d 000b 7473 000b 73ab 000b 73b3 000b     .t..st...s...s..
   bed7c:	73b7 000b 73bb 000b 73bf 000b 73c3 000b     .s...s...s...s..
   bed8c:	73af 000b 73cf 000b 73d3 000b 73d7 000b     .s...s...s...s..
   bed9c:	73db 000b 73df 000b 73e5 000b 73e9 000b     .s...s...s...s..
   bedac:	73ab 000b 73ed 000b 73f3 000b 73f9 000b     .s...s...s...s..

000bedbc <_ZTV12RHGenericSPI>:
	...
   bedc4:	40a5 000b 74d1 000b 74d3 000b 40a5 000b     .@...t...t...@..
   bedd4:	40a5 000b 74db 000b 74df 000b 74e3 000b     .@...t...t...t..
   bede4:	74d5 000b 74d7 000b 74d9 000b 6564 6166     .t...t...t..defa
   bedf4:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bee04:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bee14:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bee24:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bee34 <_ZTVN8particle11SPISettingsE>:
	...
   bee3c:	7529 000b 74fd 000b 74ff 000b               )u...t...t..

000bee48 <_ZTV13RHHardwareSPI>:
	...
   bee50:	75dd 000b 75f1 000b 75ff 000b 760d 000b     .u...u...u...v..
   bee60:	7679 000b 74db 000b 74df 000b 74e3 000b     yv...t...t...t..
   bee70:	7687 000b 769b 000b 76a9 000b               .v...v...v..

000bee7c <_ZTV6RHMesh>:
	...
   bee84:	7775 000b 7a1d 000b 76d5 000b 76c1 000b     uw...z...v...v..

000bee94 <_ZTV8RHRouter>:
	...
   bee9c:	7c89 000b 7ccd 000b                         .|...|..

000beea4 <_ZTV11RHSPIDriver>:
	...
   beeb4:	7f69 000b 40a5 000b 40a5 000b 40a5 000b     i....@...@...@..
   beec4:	40a5 000b 73ff 000b 73a1 000b 744f 000b     .@...s...s..Ot..
   beed4:	741d 000b 7473 000b 73ab 000b 73b3 000b     .t..st...s...s..
   beee4:	73b7 000b 73bb 000b 73bf 000b 73c3 000b     .s...s...s...s..
   beef4:	73af 000b 73cf 000b 73d3 000b 73d7 000b     .s...s...s...s..
   bef04:	73db 000b 73df 000b 73e5 000b 73e9 000b     .s...s...s...s..
   bef14:	73ab 000b 73ed 000b 73f3 000b 73f9 000b     .s...s...s...s..
   bef24:	7f95 000b 7f9f 000b                         ........

000bef2c <_ZL18MODEM_CONFIG_TABLE>:
   bef2c:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bef3c <_ZTV7RH_RF95>:
	...
   bef44:	8107 000b 813f 000b 8619 000b 84af 000b     ....?...........
   bef54:	8175 000b 84f7 000b 8103 000b 73ff 000b     u............s..
   bef64:	73a1 000b 744f 000b 741d 000b 7473 000b     .s..Ot...t..st..
   bef74:	8109 000b 73b3 000b 73b7 000b 73bb 000b     .....s...s...s..
   bef84:	73bf 000b 73c3 000b 73af 000b 73cf 000b     .s...s...s...s..
   bef94:	73d3 000b 73d7 000b 73db 000b 73df 000b     .s...s...s...s..
   befa4:	73e5 000b 73e9 000b 814f 000b 73ed 000b     .s...s..O....s..
   befb4:	73f3 000b 73f9 000b 7f95 000b 7f9f 000b     .s...s..........
   befc4:	80ff 000b 6173 6976 676e 6420 7461 2061     ....saving data 
   befd4:	6973 657a 253d 0064 6176 696c 6164 6974     size=%d.validati
   befe4:	676e 6420 7461 2061 6973 657a 253d 0064     ng data size=%d.
   beff4:	6f67 3a74 6d20 6761 6369 253d 3830 2078     got: magic=%08x 
   bf004:	6576 7372 6f69 3d6e 3025 7834 7320 7a69     version=%04x siz
   bf014:	3d65 3025 7834 6820 7361 3d68 3025 7838     e=%04x hash=%08x
   bf024:	6500 7078 203a 616d 6967 3d63 3025 7838     .exp: magic=%08x
   bf034:	7620 7265 6973 6e6f 253d 3430 2078 6973      version=%04x si
   bf044:	657a 253d 3430 2078 6168 6873 253d 3830     ze=%04x hash=%08
   bf054:	0078 0000                                   x...

000bf058 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bf060:	8721 000b 87cd 000b 8789 000b 8727 000b     !...........'...
   bf070:	874f 000b 88b9 000b 8985 000b               O...........

000bf07c <_ZTVN5spark13CellularClassE>:
	...
   bf084:	9257 000b 924d 000b 9243 000b 91f9 000b     W...M...C.......
   bf094:	9237 000b 922b 000b ab2d 000b ab35 000b     7...+...-...5...
   bf0a4:	921f 000b 9217 000b 920d 000b 9203 000b     ................
   bf0b4:	ab65 000b                                   e...

000bf0b8 <_ZTV14CellularSignal>:
	...
   bf0c0:	92e5 000b 9349 000b 92e7 000b 9359 000b     ....I.......Y...
   bf0d0:	938d 000b 93b9 000b 93ed 000b 930d 000b     ................
   bf0e0:	92eb 000b 9307 000b fffc ffff 0000 0000     ................
   bf0f0:	9341 000b                                   A...

000bf0f4 <_ZTVN5spark13EthernetClassE>:
	...
   bf0fc:	948f 000b 9485 000b 947b 000b 9471 000b     ........{...q...
   bf10c:	9465 000b 9459 000b ab2d 000b ab35 000b     e...Y...-...5...
   bf11c:	944d 000b 9445 000b 943b 000b 9431 000b     M...E...;...1...
   bf12c:	ab65 000b                                   e...

000bf130 <_ZTV7TwoWire>:
	...
   bf138:	955f 000b 95a9 000b 9581 000b 9561 000b     _...........a...
   bf148:	9589 000b 9591 000b 9599 000b 95a1 000b     ................

000bf158 <_ZTV9IPAddress>:
	...
   bf160:	9725 000b 9715 000b 9717 000b 2575 3430     %...........u%04
   bf170:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bf180:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bf190:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bf1a0:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bf1b0:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bf1c0:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bf1d0:	006e 6564 6174 6c69 0000 0000               n.detail....

000bf1dc <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf1e4:	9c21 000b 9c47 000b 9c05 000b 9833 000b     !...G.......3...

000bf1f4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf1fc:	a07d 000b a095 000b a7d5 000b 40cf 000b     }............@..

000bf20c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf214:	a0a9 000b a0bd 000b a979 000b 9c0d 000b     ........y.......

000bf224 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf22c:	9c1f 000b 9c55 000b a739 000b 9c0f 000b     ....U...9.......

000bf23c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf244:	9c1d 000b 9c63 000b 9fe5 000b 9c85 000b     ....c...........

000bf254 <_ZTVN5spark12NetworkClassE>:
	...
   bf25c:	aaed 000b aaf7 000b ab01 000b ab0b 000b     ................
   bf26c:	ab15 000b ab21 000b ab2d 000b ab35 000b     ....!...-...5...
   bf27c:	ab3d 000b ab49 000b ab51 000b ab5b 000b     =...I...Q...[...
   bf28c:	ab65 000b 616e 006e 6e69 0066 766f 0066     e...nan.inf.ovf.

000bf29c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bf29c:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bf2ac:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bf2bc:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bf2cc:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bf2dc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bf2ec:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bf2fc <_ZTV11USARTSerial>:
	...
   bf304:	b8b1 000b b91d 000b b8f5 000b adb5 000b     ................
   bf314:	b8c5 000b b8e1 000b b8d3 000b b8ef 000b     ................
   bf324:	b8b3 000b b8b7 000b                         ........

000bf32c <_ZTV9USBSerial>:
	...
   bf334:	b96f 000b b9d7 000b b9ad 000b adb5 000b     o...............
   bf344:	b99f 000b b971 000b b981 000b b9d1 000b     ....q...........
   bf354:	b991 000b b969 000b                         ....i...

000bf35c <_ZSt7nothrow>:
	...

000bf368 <TWO52>:
   bf368:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   bf378:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   bf388:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000bf398 <day_name.1>:
   bf398:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bf3a8:	6972 6153                                    riSat

000bf3ad <mon_name.0>:
   bf3ad:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bf3bd:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bf3cd:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bf3dd:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bf3ed:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bf3fd:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bf40d:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bf41d:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bf42d:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bf43d:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bf44d:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf45d:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf46d:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf47d:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf48d:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bf49a <_ctype_>:
   bf49a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf4aa:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf4ba:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf4ca:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf4da:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf4ea:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf4fa:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf50a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf51a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bf59b <link_const_variable_data_end>:
	...

000bf59c <link_constructors_location>:
   bf59c:	000b4ed1 	.word	0x000b4ed1
   bf5a0:	000b5915 	.word	0x000b5915
   bf5a4:	000b60d1 	.word	0x000b60d1
   bf5a8:	000b6555 	.word	0x000b6555
   bf5ac:	000b7079 	.word	0x000b7079
   bf5b0:	000b76b1 	.word	0x000b76b1
   bf5b4:	000b91e9 	.word	0x000b91e9
   bf5b8:	000b92b5 	.word	0x000b92b5
   bf5bc:	000b9499 	.word	0x000b9499
   bf5c0:	000ba7c5 	.word	0x000ba7c5
   bf5c4:	000bac3d 	.word	0x000bac3d
   bf5c8:	000bb0a9 	.word	0x000bb0a9
   bf5cc:	000bb589 	.word	0x000bb589
   bf5d0:	000bb89d 	.word	0x000bb89d

000bf5d4 <link_constructors_end>:
	...
