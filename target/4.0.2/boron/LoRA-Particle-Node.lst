
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.2/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b900  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf920  000bf920  0000f920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf944  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  2003ddbc  000bf948  0002ddbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0003df38  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bfac4  000bfac4  0002fac4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bfaf0  000bfaf0  0002faf0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001f8d08  00000000  00000000  0002faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00024746  00000000  00000000  002287fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00051af3  00000000  00000000  0024cf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004288  00000000  00000000  0029ea35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e540  00000000  00000000  002a2cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00055099  00000000  00000000  002b11fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0007816f  00000000  00000000  00306296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cf07  00000000  00000000  0037e405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000c194  00000000  00000000  004cb30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 fe6d 	bl	bdd10 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 fe8f 	bl	bdd60 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003ddbc 	.word	0x2003ddbc
   b404c:	000bf948 	.word	0x000bf948
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fed7 	bl	bbe14 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf8e4 	.word	0x000bf8e4
   b4080:	000bf91c 	.word	0x000bf91c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bf8a 	b.w	b4f9c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa19 	bl	b44c0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 be77 	b.w	bbd84 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 b941 	b.w	b931c <malloc>

000b409a <_Znaj>:
   b409a:	f005 b93f 	b.w	b931c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 b945 	b.w	b932c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 ffd8 	bl	b9060 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8cb1 	.word	0x000b8cb1
   b40b8:	000be118 	.word	0x000be118

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z18outOfMemoryHandleryi+0x8>)
   b40da:	601a      	str	r2, [r3, #0]
}
   b40dc:	4770      	bx	lr
   b40de:	bf00      	nop
   b40e0:	2003ddbc 	.word	0x2003ddbc

000b40e4 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40e4:	4b01      	ldr	r3, [pc, #4]	; (b40ec <_Z13userSwitchISRv+0x8>)
   b40e6:	2201      	movs	r2, #1
   b40e8:	701a      	strb	r2, [r3, #0]
}
   b40ea:	4770      	bx	lr
   b40ec:	2003dfce 	.word	0x2003dfce

000b40f0 <_Z9sensorISRv>:

void sensorISR()
{
   b40f0:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b40f2:	4c08      	ldr	r4, [pc, #32]	; (b4114 <_Z9sensorISRv+0x24>)
   b40f4:	7823      	ldrb	r3, [r4, #0]
   b40f6:	b12b      	cbz	r3, b4104 <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b40f8:	4b07      	ldr	r3, [pc, #28]	; (b4118 <_Z9sensorISRv+0x28>)
   b40fa:	2201      	movs	r2, #1
   b40fc:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b40fe:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b4100:	7023      	strb	r3, [r4, #0]
}
   b4102:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b4104:	f001 fdfe 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4108:	f001 ff1e 	bl	b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>
   b410c:	2801      	cmp	r0, #1
   b410e:	d0f3      	beq.n	b40f8 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b4110:	2301      	movs	r3, #1
   b4112:	e7f5      	b.n	b4100 <_Z9sensorISRv+0x10>
   b4114:	2003df64 	.word	0x2003df64
   b4118:	2003dfcc 	.word	0x2003dfcc

000b411c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b411c:	b530      	push	{r4, r5, lr}
   b411e:	b085      	sub	sp, #20
   b4120:	4604      	mov	r4, r0
   b4122:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4124:	b160      	cbz	r0, b4140 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4126:	6840      	ldr	r0, [r0, #4]
   b4128:	b150      	cbz	r0, b4140 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b412a:	6885      	ldr	r5, [r0, #8]
   b412c:	b145      	cbz	r5, b4140 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b412e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4132:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4136:	68c4      	ldr	r4, [r0, #12]
   b4138:	ab01      	add	r3, sp, #4
   b413a:	466a      	mov	r2, sp
   b413c:	a902      	add	r1, sp, #8
   b413e:	47a0      	blx	r4
    }
   b4140:	b005      	add	sp, #20
   b4142:	bd30      	pop	{r4, r5, pc}

000b4144 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4144:	b530      	push	{r4, r5, lr}
   b4146:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4148:	6800      	ldr	r0, [r0, #0]
   b414a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b414c:	9301      	str	r3, [sp, #4]
   b414e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4152:	6883      	ldr	r3, [r0, #8]
   b4154:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4158:	b90b      	cbnz	r3, b415e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b415a:	f007 fff9 	bl	bc150 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b415e:	68c3      	ldr	r3, [r0, #12]
   b4160:	aa01      	add	r2, sp, #4
   b4162:	a902      	add	r1, sp, #8
   b4164:	4798      	blx	r3
      }
   b4166:	b005      	add	sp, #20
   b4168:	bd30      	pop	{r4, r5, pc}

000b416a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b416a:	2a01      	cmp	r2, #1
   b416c:	d102      	bne.n	b4174 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416e:	6001      	str	r1, [r0, #0]
      }
   b4170:	2000      	movs	r0, #0
   b4172:	4770      	bx	lr
	  switch (__op)
   b4174:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4176:	bf04      	itt	eq
   b4178:	680b      	ldreq	r3, [r1, #0]
   b417a:	6003      	streq	r3, [r0, #0]
	      break;
   b417c:	e7f8      	b.n	b4170 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417e:	6803      	ldr	r3, [r0, #0]
   b4180:	6812      	ldr	r2, [r2, #0]
   b4182:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4186:	4718      	bx	r3

000b4188 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4188:	4b0a      	ldr	r3, [pc, #40]	; (b41b4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b418a:	b510      	push	{r4, lr}
   b418c:	4604      	mov	r4, r0
   b418e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4190:	f005 fff6 	bl	ba180 <_ZN5spark10LogManager8instanceEv>
   b4194:	4621      	mov	r1, r4
   b4196:	f006 fa2e 	bl	ba5f6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b419a:	f007 fdab 	bl	bbcf4 <_Z16_fetch_usbserialv>
   b419e:	f007 fd9b 	bl	bbcd8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b41a2:	4620      	mov	r0, r4
   b41a4:	4b04      	ldr	r3, [pc, #16]	; (b41b8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b41a6:	f840 3b04 	str.w	r3, [r0], #4
   b41aa:	f006 f8bf 	bl	ba32c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b41ae:	4620      	mov	r0, r4
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	000be6a4 	.word	0x000be6a4
   b41b8:	000be68c 	.word	0x000be68c

000b41bc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b41bc:	b510      	push	{r4, lr}
   b41be:	4604      	mov	r4, r0
    }
   b41c0:	f7ff ffe2 	bl	b4188 <_ZN5spark16SerialLogHandlerD1Ev>
   b41c4:	4620      	mov	r0, r4
   b41c6:	2124      	movs	r1, #36	; 0x24
   b41c8:	f7ff ff69 	bl	b409e <_ZdlPvj>
   b41cc:	4620      	mov	r0, r4
   b41ce:	bd10      	pop	{r4, pc}

000b41d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b41d0:	b510      	push	{r4, lr}
      if (_M_manager)
   b41d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b41d4:	4604      	mov	r4, r0
      if (_M_manager)
   b41d6:	b113      	cbz	r3, b41de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b41d8:	2203      	movs	r2, #3
   b41da:	4601      	mov	r1, r0
   b41dc:	4798      	blx	r3
    }
   b41de:	4620      	mov	r0, r4
   b41e0:	bd10      	pop	{r4, pc}

000b41e2 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b41e2:	b510      	push	{r4, lr}
            delete callableWrapper;
   b41e4:	4604      	mov	r4, r0
   b41e6:	b138      	cbz	r0, b41f8 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b41e8:	f7ff fff2 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b41ec:	4620      	mov	r0, r4
   b41ee:	2110      	movs	r1, #16
        };
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b41f4:	f7ff bf53 	b.w	b409e <_ZdlPvj>
        };
   b41f8:	bd10      	pop	{r4, pc}
	...

000b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b41fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4200:	4605      	mov	r5, r0
   b4202:	460f      	mov	r7, r1
   b4204:	4616      	mov	r6, r2
        if (valid_) {
   b4206:	b18b      	cbz	r3, b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4208:	6803      	ldr	r3, [r0, #0]
   b420a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b420c:	b183      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b420e:	889a      	ldrh	r2, [r3, #4]
   b4210:	2a01      	cmp	r2, #1
   b4212:	d006      	beq.n	b4222 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b4214:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4216:	e7f9      	b.n	b420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4218:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b421a:	b14b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b421c:	889a      	ldrh	r2, [r3, #4]
   b421e:	2a01      	cmp	r2, #1
   b4220:	d1fa      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b4222:	b12b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b4224:	899a      	ldrh	r2, [r3, #12]
   b4226:	42ba      	cmp	r2, r7
   b4228:	d1f6      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b422a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b422c:	4628      	mov	r0, r5
   b422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4230:	490a      	ldr	r1, [pc, #40]	; (b425c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b4232:	2010      	movs	r0, #16
   b4234:	f007 ff88 	bl	bc148 <_ZnwjRKSt9nothrow_t>
   b4238:	4604      	mov	r4, r0
   b423a:	b168      	cbz	r0, b4258 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b423c:	2210      	movs	r2, #16
   b423e:	2100      	movs	r1, #0
   b4240:	f009 fd8e 	bl	bdd60 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4244:	4b06      	ldr	r3, [pc, #24]	; (b4260 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b4246:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4248:	2301      	movs	r3, #1
   b424a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b424c:	692b      	ldr	r3, [r5, #16]
   b424e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4250:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b4252:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4254:	612c      	str	r4, [r5, #16]
   b4256:	e7e9      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4258:	7528      	strb	r0, [r5, #20]
                return *this;
   b425a:	e7e7      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b425c:	000bf6a4 	.word	0x000bf6a4
   b4260:	00030010 	.word	0x00030010

000b4264 <_ZN11SystemClass6millisEv>:
        return hal_timer_millis(nullptr);
   b4264:	2000      	movs	r0, #0
   b4266:	f004 bd3b 	b.w	b8ce0 <hal_timer_millis>
	...

000b426c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b426c:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b426e:	f004 fd27 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4272:	4b03      	ldr	r3, [pc, #12]	; (b4280 <_ZN10CloudClass7processEv+0x14>)
   b4274:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b4276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b427a:	f004 bfaf 	b.w	b91dc <spark_process>
   b427e:	bf00      	nop
   b4280:	2003e710 	.word	0x2003e710

000b4284 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4284:	b40e      	push	{r1, r2, r3}
   b4286:	b500      	push	{lr}
   b4288:	b08c      	sub	sp, #48	; 0x30
   b428a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b428c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4290:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4294:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4296:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b429a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b429c:	6801      	ldr	r1, [r0, #0]
   b429e:	aa04      	add	r2, sp, #16
   b42a0:	201e      	movs	r0, #30
    attr.flags = 0;
   b42a2:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b42a6:	f004 feeb 	bl	b9080 <log_message_v>
}
   b42aa:	b00c      	add	sp, #48	; 0x30
   b42ac:	f85d eb04 	ldr.w	lr, [sp], #4
   b42b0:	b003      	add	sp, #12
   b42b2:	4770      	bx	lr

000b42b4 <_Z22publishStateTransitionv>:
{
   b42b4:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b42b6:	4e13      	ldr	r6, [pc, #76]	; (b4304 <_Z22publishStateTransitionv+0x50>)
   b42b8:	4c13      	ldr	r4, [pc, #76]	; (b4308 <_Z22publishStateTransitionv+0x54>)
   b42ba:	7832      	ldrb	r2, [r6, #0]
   b42bc:	4d13      	ldr	r5, [pc, #76]	; (b430c <_Z22publishStateTransitionv+0x58>)
   b42be:	2a02      	cmp	r2, #2
{
   b42c0:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b42c2:	d117      	bne.n	b42f4 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b42c4:	f007 fc12 	bl	bbaec <_ZN9TimeClass7isValidEv>
   b42c8:	7832      	ldrb	r2, [r6, #0]
   b42ca:	782b      	ldrb	r3, [r5, #0]
   b42cc:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42d0:	9200      	str	r2, [sp, #0]
   b42d2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42d6:	b998      	cbnz	r0, b4300 <_Z22publishStateTransitionv+0x4c>
   b42d8:	4a0d      	ldr	r2, [pc, #52]	; (b4310 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42da:	f44f 7180 	mov.w	r1, #256	; 0x100
   b42de:	a802      	add	r0, sp, #8
   b42e0:	f005 f83c 	bl	b935c <snprintf>
	oldState = state;
   b42e4:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b42e6:	480b      	ldr	r0, [pc, #44]	; (b4314 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b42e8:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b42ea:	a902      	add	r1, sp, #8
   b42ec:	f7ff ffca 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
}
   b42f0:	b042      	add	sp, #264	; 0x108
   b42f2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42f4:	782b      	ldrb	r3, [r5, #0]
   b42f6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42fa:	9200      	str	r2, [sp, #0]
   b42fc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4300:	4a05      	ldr	r2, [pc, #20]	; (b4318 <_Z22publishStateTransitionv+0x64>)
   b4302:	e7ea      	b.n	b42da <_Z22publishStateTransitionv+0x26>
   b4304:	2003dfcd 	.word	0x2003dfcd
   b4308:	2003ddc0 	.word	0x2003ddc0
   b430c:	2003dfc4 	.word	0x2003dfc4
   b4310:	000be12d 	.word	0x000be12d
   b4314:	2003e654 	.word	0x2003e654
   b4318:	000be14d 	.word	0x000be14d
   b431c:	00000000 	.word	0x00000000

000b4320 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static time_t nextPeriodBegins = 0;
	// First we will calculate the adjustment to the wakeboundary due to node number and retries
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b4324:	4d5c      	ldr	r5, [pc, #368]	; (b4498 <_Z21secondsUntilNextEventv+0x178>)
   b4326:	682e      	ldr	r6, [r5, #0]
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4328:	b087      	sub	sp, #28
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b432a:	2e00      	cmp	r6, #0
   b432c:	d042      	beq.n	b43b4 <_Z21secondsUntilNextEventv+0x94>
		int fiftyFifty = random(2);											// Flip a coin - seed in Setup()
   b432e:	2002      	movs	r0, #2
   b4330:	f007 f804 	bl	bb33c <_Z6randomi>
   b4334:	4606      	mov	r6, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4336:	6828      	ldr	r0, [r5, #0]
   b4338:	f009 f8e6 	bl	bd508 <__aeabi_i2d>
   b433c:	ed9f 0b54 	vldr	d0, [pc, #336]	; b4490 <_Z21secondsUntilNextEventv+0x170>
   b4340:	ec41 0b11 	vmov	d1, r0, r1
   b4344:	f007 ff08 	bl	bc158 <pow>
		unsigned long offset = 10UL + NODENUMBEROFFSET * fiftyFifty * pow(2, retryState); // This is an exponential back-off - adding 10 seconds to increase odds
   b4348:	200a      	movs	r0, #10
   b434a:	ec59 8b10 	vmov	r8, r9, d0
   b434e:	4370      	muls	r0, r6
   b4350:	f009 f8ca 	bl	bd4e8 <__aeabi_ui2d>
   b4354:	4642      	mov	r2, r8
   b4356:	464b      	mov	r3, r9
   b4358:	f009 f940 	bl	bd5dc <__aeabi_dmul>
   b435c:	4b4f      	ldr	r3, [pc, #316]	; (b449c <_Z21secondsUntilNextEventv+0x17c>)
   b435e:	2200      	movs	r2, #0
   b4360:	f008 ff86 	bl	bd270 <__adddf3>
   b4364:	f009 fc12 	bl	bdb8c <__aeabi_d2uiz>
   b4368:	4604      	mov	r4, r0
		Log.info("Node %d retry state %d dice of %d retry in %lu seconds", sysStatus.get_nodeNumber(), retryState, fiftyFifty, offset);
   b436a:	f001 fccb 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b436e:	f001 fddc 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4372:	e9cd 6400 	strd	r6, r4, [sp]
   b4376:	4602      	mov	r2, r0
   b4378:	682b      	ldr	r3, [r5, #0]
   b437a:	4949      	ldr	r1, [pc, #292]	; (b44a0 <_Z21secondsUntilNextEventv+0x180>)
   b437c:	4849      	ldr	r0, [pc, #292]	; (b44a4 <_Z21secondsUntilNextEventv+0x184>)
   b437e:	f7ff ff81 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		if (retryState >= 3) {
   b4382:	682b      	ldr	r3, [r5, #0]
   b4384:	2b02      	cmp	r3, #2
   b4386:	dd11      	ble.n	b43ac <_Z21secondsUntilNextEventv+0x8c>
			retryState = -1;							    				// Going to stop re-trying and wait until the next period
   b4388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b438c:	602b      	str	r3, [r5, #0]
			sysStatus.set_alertCodeNode(4);									// This will trigger a reinitialization of the radio
   b438e:	f001 fcb9 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4392:	2104      	movs	r1, #4
   b4394:	f001 fe1b 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
			sysStatus.set_alertTimestampNode(Time.now());					// Alert Time stamp
   b4398:	f001 fcb4 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b439c:	4605      	mov	r5, r0
   b439e:	f007 fbc2 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b43a2:	4602      	mov	r2, r0
   b43a4:	17c3      	asrs	r3, r0, #31
   b43a6:	4628      	mov	r0, r5
   b43a8:	f001 ff3c 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
			// Log.info("In current period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
		}
		return secondsToReturn;
    }
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
}
   b43ac:	4620      	mov	r0, r4
   b43ae:	b007      	add	sp, #28
   b43b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (Time.isValid()) {												// The general case - has to handle node-number specific timing
   b43b4:	f007 fb9a 	bl	bbaec <_ZN9TimeClass7isValidEv>
   b43b8:	2800      	cmp	r0, #0
   b43ba:	d065      	beq.n	b4488 <_Z21secondsUntilNextEventv+0x168>
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43bc:	f001 fca2 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b43c0:	f001 fdb3 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b43c4:	4605      	mov	r5, r0
		unsigned long wakeBoundary = (sysStatus.get_frequencyMinutes() * 60UL);
   b43c6:	f001 fc9d 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b43ca:	f001 fe3b 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b43ce:	243c      	movs	r4, #60	; 0x3c
   b43d0:	fb04 f700 	mul.w	r7, r4, r0
		unsigned long secondsToReturn = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b43d4:	f007 fba7 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b43d8:	fbb0 f4f7 	udiv	r4, r0, r7
   b43dc:	fb04 0417 	mls	r4, r4, r7, r0
   b43e0:	1b3c      	subs	r4, r7, r4
   b43e2:	42bc      	cmp	r4, r7
   b43e4:	bf28      	it	cs
   b43e6:	463c      	movcs	r4, r7
		if (sysStatus.get_nodeNumber() >= 11)  {							// We need to test here as the off-set can cause missed reporting if awoken by the sensor at the period boundary
   b43e8:	f001 fc8c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b43ec:	f001 fd9d 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b43f0:	280a      	cmp	r0, #10
   b43f2:	d905      	bls.n	b4400 <_Z21secondsUntilNextEventv+0xe0>
			Log.info("Unconfigured node - no offset and %lu seconds till next period",secondsToReturn);
   b43f4:	492c      	ldr	r1, [pc, #176]	; (b44a8 <_Z21secondsUntilNextEventv+0x188>)
   b43f6:	482b      	ldr	r0, [pc, #172]	; (b44a4 <_Z21secondsUntilNextEventv+0x184>)
   b43f8:	4622      	mov	r2, r4
   b43fa:	f7ff ff43 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
			return secondsToReturn;
   b43fe:	e7d5      	b.n	b43ac <_Z21secondsUntilNextEventv+0x8c>
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b4400:	4f2a      	ldr	r7, [pc, #168]	; (b44ac <_Z21secondsUntilNextEventv+0x18c>)
   b4402:	f007 fb90 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4406:	e9d7 8900 	ldrd	r8, r9, [r7]
   b440a:	17c3      	asrs	r3, r0, #31
   b440c:	ebb0 0008 	subs.w	r0, r0, r8
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b4410:	b22d      	sxth	r5, r5
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b4412:	eb63 0309 	sbc.w	r3, r3, r9
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b4416:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b441a:	2b00      	cmp	r3, #0
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b441c:	ea4f 0545 	mov.w	r5, r5, lsl #1
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b4420:	db16      	blt.n	b4450 <_Z21secondsUntilNextEventv+0x130>
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4422:	f007 fb80 	bl	bbb26 <_ZN9TimeClass3nowEv>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4426:	442c      	add	r4, r5
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4428:	1902      	adds	r2, r0, r4
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b442a:	4b21      	ldr	r3, [pc, #132]	; (b44b0 <_Z21secondsUntilNextEventv+0x190>)
   b442c:	4921      	ldr	r1, [pc, #132]	; (b44b4 <_Z21secondsUntilNextEventv+0x194>)
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b442e:	e9c7 2600 	strd	r2, r6, [r7]
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b4432:	a802      	add	r0, sp, #8
   b4434:	9300      	str	r3, [sp, #0]
   b4436:	4633      	mov	r3, r6
   b4438:	f007 fb16 	bl	bba68 <_ZN9TimeClass6formatExPKc>
   b443c:	9b02      	ldr	r3, [sp, #8]
   b443e:	491e      	ldr	r1, [pc, #120]	; (b44b8 <_Z21secondsUntilNextEventv+0x198>)
   b4440:	4622      	mov	r2, r4
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4442:	4818      	ldr	r0, [pc, #96]	; (b44a4 <_Z21secondsUntilNextEventv+0x184>)
   b4444:	f7ff ff1e 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b4448:	a802      	add	r0, sp, #8
   b444a:	f007 f85b 	bl	bb504 <_ZN6StringD1Ev>
   b444e:	e7ad      	b.n	b43ac <_Z21secondsUntilNextEventv+0x8c>
		else if (nextPeriodBegins - Time.now() <= nodeSpecificOffset) {		// Not at new period yet but within the node offset
   b4450:	f007 fb69 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4454:	ebb8 0800 	subs.w	r8, r8, r0
   b4458:	eb69 70e0 	sbc.w	r0, r9, r0, asr #31
   b445c:	4545      	cmp	r5, r8
   b445e:	eb76 0300 	sbcs.w	r3, r6, r0
   b4462:	db0f      	blt.n	b4484 <_Z21secondsUntilNextEventv+0x164>
			secondsToReturn = nextPeriodBegins - Time.now();
   b4464:	683c      	ldr	r4, [r7, #0]
   b4466:	f007 fb5e 	bl	bbb26 <_ZN9TimeClass3nowEv>
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b446a:	4b11      	ldr	r3, [pc, #68]	; (b44b0 <_Z21secondsUntilNextEventv+0x190>)
   b446c:	9300      	str	r3, [sp, #0]
   b446e:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4472:	4910      	ldr	r1, [pc, #64]	; (b44b4 <_Z21secondsUntilNextEventv+0x194>)
			secondsToReturn = nextPeriodBegins - Time.now();
   b4474:	1a24      	subs	r4, r4, r0
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4476:	a802      	add	r0, sp, #8
   b4478:	f007 faf6 	bl	bba68 <_ZN9TimeClass6formatExPKc>
   b447c:	9b02      	ldr	r3, [sp, #8]
   b447e:	490f      	ldr	r1, [pc, #60]	; (b44bc <_Z21secondsUntilNextEventv+0x19c>)
   b4480:	4622      	mov	r2, r4
   b4482:	e7de      	b.n	b4442 <_Z21secondsUntilNextEventv+0x122>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4484:	442c      	add	r4, r5
		return secondsToReturn;
   b4486:	e791      	b.n	b43ac <_Z21secondsUntilNextEventv+0x8c>
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b4488:	243c      	movs	r4, #60	; 0x3c
   b448a:	e78f      	b.n	b43ac <_Z21secondsUntilNextEventv+0x8c>
   b448c:	f3af 8000 	nop.w
   b4490:	00000000 	.word	0x00000000
   b4494:	40000000 	.word	0x40000000
   b4498:	2003dfc8 	.word	0x2003dfc8
   b449c:	40240000 	.word	0x40240000
   b44a0:	000be15b 	.word	0x000be15b
   b44a4:	2003e654 	.word	0x2003e654
   b44a8:	000be192 	.word	0x000be192
   b44ac:	2003df50 	.word	0x2003df50
   b44b0:	000be1d1 	.word	0x000be1d1
   b44b4:	2003e6ac 	.word	0x2003e6ac
   b44b8:	000be1d4 	.word	0x000be1d4
   b44bc:	000be1fa 	.word	0x000be1fa

000b44c0 <loop>:
void loop() {
   b44c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b44c4:	4cb2      	ldr	r4, [pc, #712]	; (b4790 <loop+0x2d0>)
   b44c6:	7823      	ldrb	r3, [r4, #0]
   b44c8:	3b01      	subs	r3, #1
void loop() {
   b44ca:	b08c      	sub	sp, #48	; 0x30
   b44cc:	2b04      	cmp	r3, #4
   b44ce:	f200 8121 	bhi.w	b4714 <loop+0x254>
   b44d2:	e8df f013 	tbh	[pc, r3, lsl #1]
   b44d6:	024e      	.short	0x024e
   b44d8:	005e0005 	.word	0x005e0005
   b44dc:	01ea01a2 	.word	0x01ea01a2
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b44e0:	4bac      	ldr	r3, [pc, #688]	; (b4794 <loop+0x2d4>)
   b44e2:	781b      	ldrb	r3, [r3, #0]
   b44e4:	2b02      	cmp	r3, #2
   b44e6:	d001      	beq.n	b44ec <loop+0x2c>
   b44e8:	f7ff fee4 	bl	b42b4 <_Z22publishStateTransitionv>
			if (sysStatus.get_frequencyMinutes() == 1) Log.info("Trying to reconnect to gateway");  // Something is wrong - attempting every minute to connect
   b44ec:	f001 fc0a 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b44f0:	f001 fda8 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44f4:	2801      	cmp	r0, #1
   b44f6:	d10d      	bne.n	b4514 <loop+0x54>
   b44f8:	49a7      	ldr	r1, [pc, #668]	; (b4798 <loop+0x2d8>)
   b44fa:	48a8      	ldr	r0, [pc, #672]	; (b479c <loop+0x2dc>)
   b44fc:	f7ff fec2 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
			if (sysStatus.get_alertCodeNode() != 0) state = ERROR_STATE;
   b4500:	f001 fc00 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4504:	f001 fd1b 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4508:	2800      	cmp	r0, #0
   b450a:	f000 824a 	beq.w	b49a2 <loop+0x4e2>
   b450e:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b4510:	7023      	strb	r3, [r4, #0]
			break;
   b4512:	e0ff      	b.n	b4714 <loop+0x254>
			else if ((Time.now() - sysStatus.get_lastConnection() > 2 * sysStatus.get_frequencyMinutes() * 60UL) && sysStatus.get_openHours()) { // Park is open but no connect for over two hours
   b4514:	f007 fb07 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4518:	4605      	mov	r5, r0
   b451a:	f001 fbf3 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b451e:	f001 fe59 	bl	b61d4 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4522:	17eb      	asrs	r3, r5, #31
   b4524:	1a2d      	subs	r5, r5, r0
   b4526:	eb63 0601 	sbc.w	r6, r3, r1
   b452a:	f001 fbeb 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b452e:	f001 fd89 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4532:	2378      	movs	r3, #120	; 0x78
   b4534:	4358      	muls	r0, r3
   b4536:	42a8      	cmp	r0, r5
   b4538:	f04f 0300 	mov.w	r3, #0
   b453c:	41b3      	sbcs	r3, r6
   b453e:	dadf      	bge.n	b4500 <loop+0x40>
   b4540:	f001 fbe0 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4544:	f001 fc04 	bl	b5d50 <_ZNK13sysStatusData13get_openHoursEv>
   b4548:	2800      	cmp	r0, #0
   b454a:	d0d9      	beq.n	b4500 <loop+0x40>
				Log.info("Park is open but we have not connected for over two reporting periods - need to power cycle and go to 1 min frequency");
   b454c:	4994      	ldr	r1, [pc, #592]	; (b47a0 <loop+0x2e0>)
   b454e:	4893      	ldr	r0, [pc, #588]	; (b479c <loop+0x2dc>)
   b4550:	f7ff fe98 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(3);								// This will trigger a power cycle reset
   b4554:	f001 fbd6 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4558:	2103      	movs	r1, #3
   b455a:	f001 fd38 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());		
   b455e:	f001 fbd1 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4562:	4605      	mov	r5, r0
   b4564:	f007 fadf 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4568:	4602      	mov	r2, r0
   b456a:	17c3      	asrs	r3, r0, #31
   b456c:	4628      	mov	r0, r5
   b456e:	f001 fe59 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				sysStatus.set_frequencyMinutes(1);							// Will wake every minute to send data - have to catch gateway when it is awake
   b4572:	f001 fbc7 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4576:	2101      	movs	r1, #1
   b4578:	f001 fe03 	bl	b6182 <_ZN13sysStatusData20set_frequencyMinutesEt>
				sysStatus.set_lastConnection(Time.now());					// Prevents cyclical resets
   b457c:	f001 fbc2 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4580:	4605      	mov	r5, r0
   b4582:	f007 fad0 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4586:	4602      	mov	r2, r0
   b4588:	17c3      	asrs	r3, r0, #31
   b458a:	4628      	mov	r0, r5
   b458c:	f001 fe45 	bl	b621a <_ZN13sysStatusData18set_lastConnectionEx>
   b4590:	e7b6      	b.n	b4500 <loop+0x40>
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4592:	4b80      	ldr	r3, [pc, #512]	; (b4794 <loop+0x2d4>)
   b4594:	781b      	ldrb	r3, [r3, #0]
   b4596:	2b03      	cmp	r3, #3
   b4598:	d001      	beq.n	b459e <loop+0xde>
   b459a:	f7ff fe8b 	bl	b42b4 <_Z22publishStateTransitionv>
			int wakeInSeconds = secondsUntilNextEvent();					// Figure out how long to sleep 
   b459e:	f7ff febf 	bl	b4320 <_Z21secondsUntilNextEventv>
   b45a2:	4607      	mov	r7, r0
			time_t time = Time.now() + wakeInSeconds;
   b45a4:	f007 fabf 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b45a8:	4605      	mov	r5, r0
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b45aa:	f007 fa9f 	bl	bbaec <_ZN9TimeClass7isValidEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b45ae:	4606      	mov	r6, r0
   b45b0:	2800      	cmp	r0, #0
   b45b2:	d052      	beq.n	b465a <loop+0x19a>
			time_t time = Time.now() + wakeInSeconds;
   b45b4:	19ea      	adds	r2, r5, r7
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b45b6:	4b7b      	ldr	r3, [pc, #492]	; (b47a4 <loop+0x2e4>)
   b45b8:	9300      	str	r3, [sp, #0]
   b45ba:	497b      	ldr	r1, [pc, #492]	; (b47a8 <loop+0x2e8>)
   b45bc:	17d3      	asrs	r3, r2, #31
   b45be:	a808      	add	r0, sp, #32
   b45c0:	f007 fa52 	bl	bba68 <_ZN9TimeClass6formatExPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b45c4:	9d08      	ldr	r5, [sp, #32]
   b45c6:	f001 fb9d 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b45ca:	f001 fbc1 	bl	b5d50 <_ZNK13sysStatusData13get_openHoursEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b45ce:	4b77      	ldr	r3, [pc, #476]	; (b47ac <loop+0x2ec>)
   b45d0:	4a77      	ldr	r2, [pc, #476]	; (b47b0 <loop+0x2f0>)
   b45d2:	4978      	ldr	r1, [pc, #480]	; (b47b4 <loop+0x2f4>)
   b45d4:	2800      	cmp	r0, #0
   b45d6:	bf08      	it	eq
   b45d8:	461a      	moveq	r2, r3
   b45da:	9200      	str	r2, [sp, #0]
   b45dc:	486f      	ldr	r0, [pc, #444]	; (b479c <loop+0x2dc>)
   b45de:	462b      	mov	r3, r5
   b45e0:	463a      	mov	r2, r7
   b45e2:	f7ff fe4f 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b45e6:	b116      	cbz	r6, b45ee <loop+0x12e>
   b45e8:	a808      	add	r0, sp, #32
   b45ea:	f006 ff8b 	bl	bb504 <_ZN6StringD1Ev>
			if (!sysStatus.get_openHours()) if (sysStatus.get_openHours()) sensorControl(sysStatus.get_sensorType(),false);
   b45ee:	f001 fb89 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b45f2:	f001 fbad 	bl	b5d50 <_ZNK13sysStatusData13get_openHoursEv>
   b45f6:	4605      	mov	r5, r0
   b45f8:	b958      	cbnz	r0, b4612 <loop+0x152>
   b45fa:	f001 fb83 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b45fe:	f001 fba7 	bl	b5d50 <_ZNK13sysStatusData13get_openHoursEv>
   b4602:	b130      	cbz	r0, b4612 <loop+0x152>
   b4604:	f001 fb7e 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4608:	f001 fc9e 	bl	b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>
   b460c:	4629      	mov	r1, r5
   b460e:	f001 fec7 	bl	b63a0 <_Z13sensorControlib>
        if (valid_) {
   b4612:	4b69      	ldr	r3, [pc, #420]	; (b47b8 <loop+0x2f8>)
   b4614:	7d1a      	ldrb	r2, [r3, #20]
   b4616:	b10a      	cbz	r2, b461c <loop+0x15c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4618:	2202      	movs	r2, #2
   b461a:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b461c:	4b67      	ldr	r3, [pc, #412]	; (b47bc <loop+0x2fc>)
   b461e:	4866      	ldr	r0, [pc, #408]	; (b47b8 <loop+0x2f8>)
   b4620:	f8b3 9000 	ldrh.w	r9, [r3]
   b4624:	2200      	movs	r2, #0
   b4626:	4649      	mov	r1, r9
   b4628:	f7ff fde8 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b462c:	4b64      	ldr	r3, [pc, #400]	; (b47c0 <loop+0x300>)
   b462e:	f8b3 a000 	ldrh.w	sl, [r3]
   b4632:	2201      	movs	r2, #1
   b4634:	4651      	mov	r1, sl
   b4636:	f7ff fde1 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b463a:	7d03      	ldrb	r3, [r0, #20]
   b463c:	4606      	mov	r6, r0
   b463e:	b313      	cbz	r3, b4686 <loop+0x1c6>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4640:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b4642:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4646:	68db      	ldr	r3, [r3, #12]
   b4648:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b464c:	b13b      	cbz	r3, b465e <loop+0x19e>
            if (start->type == type) {
   b464e:	889a      	ldrh	r2, [r3, #4]
   b4650:	2a04      	cmp	r2, #4
   b4652:	f000 826b 	beq.w	b4b2c <loop+0x66c>
            start = start->next;
   b4656:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4658:	e7f8      	b.n	b464c <loop+0x18c>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b465a:	4d5a      	ldr	r5, [pc, #360]	; (b47c4 <loop+0x304>)
   b465c:	e7b3      	b.n	b45c6 <loop+0x106>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b465e:	495a      	ldr	r1, [pc, #360]	; (b47c8 <loop+0x308>)
   b4660:	2010      	movs	r0, #16
   b4662:	f007 fd71 	bl	bc148 <_ZnwjRKSt9nothrow_t>
   b4666:	4605      	mov	r5, r0
   b4668:	2800      	cmp	r0, #0
   b466a:	f000 8230 	beq.w	b4ace <loop+0x60e>
   b466e:	2210      	movs	r2, #16
   b4670:	2100      	movs	r1, #0
   b4672:	f009 fb75 	bl	bdd60 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4676:	4b55      	ldr	r3, [pc, #340]	; (b47cc <loop+0x30c>)
   b4678:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b467a:	2304      	movs	r3, #4
   b467c:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b467e:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4680:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4684:	6135      	str	r5, [r6, #16]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4686:	2100      	movs	r1, #0
   b4688:	4851      	ldr	r0, [pc, #324]	; (b47d0 <loop+0x310>)
   b468a:	f002 f9df 	bl	b6a4c <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b468e:	494a      	ldr	r1, [pc, #296]	; (b47b8 <loop+0x2f8>)
   b4690:	a805      	add	r0, sp, #20
   b4692:	f007 f869 	bl	bb768 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4696:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b469a:	484d      	ldr	r0, [pc, #308]	; (b47d0 <loop+0x310>)
   b469c:	f002 f9d6 	bl	b6a4c <_ZN6AB18056setWDTEi>
			sensorControl(sysStatus.get_sensorType(),true);				// Enable the sensor
   b46a0:	f001 fb30 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b46a4:	f001 fc50 	bl	b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>
   b46a8:	2101      	movs	r1, #1
   b46aa:	f001 fe79 	bl	b63a0 <_Z13sensorControlib>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b46ae:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b46b0:	b1db      	cbz	r3, b46ea <loop+0x22a>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b46b2:	889a      	ldrh	r2, [r3, #4]
   b46b4:	2a01      	cmp	r2, #1
   b46b6:	d118      	bne.n	b46ea <loop+0x22a>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b46b8:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b46ba:	4599      	cmp	r9, r3
   b46bc:	d14f      	bne.n	b475e <loop+0x29e>
        const system_tick_t start = millis();
   b46be:	f7ff fdd1 	bl	b4264 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b46c2:	f242 7610 	movw	r6, #10000	; 0x2710
        const system_tick_t start = millis();
   b46c6:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b46c8:	f7ff fdcc 	bl	b4264 <_ZN11SystemClass6millisEv>
   b46cc:	1b40      	subs	r0, r0, r5
   b46ce:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b46d2:	42b0      	cmp	r0, r6
   b46d4:	f171 0300 	sbcs.w	r3, r1, #0
   b46d8:	d20a      	bcs.n	b46f0 <loop+0x230>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b46da:	f007 fb0b 	bl	bbcf4 <_Z16_fetch_usbserialv>
   b46de:	f007 fafe 	bl	bbcde <_ZN9USBSerial11isConnectedEv>
   b46e2:	b928      	cbnz	r0, b46f0 <loop+0x230>
            spark_process();
   b46e4:	f004 fd7a 	bl	b91dc <spark_process>
        while (_while() && !_condition()) {
   b46e8:	e7ee      	b.n	b46c8 <loop+0x208>
            return std::numeric_limits<pin_t>::max();
   b46ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b46ee:	e7e4      	b.n	b46ba <loop+0x1fa>
   b46f0:	f007 fb00 	bl	bbcf4 <_Z16_fetch_usbserialv>
   b46f4:	f007 faf3 	bl	bbcde <_ZN9USBSerial11isConnectedEv>
				delay(1000);
   b46f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b46fc:	f004 fe8a 	bl	b9414 <delay>
				Log.info("Woke with user button - LoRA State");
   b4700:	4934      	ldr	r1, [pc, #208]	; (b47d4 <loop+0x314>)
   b4702:	4826      	ldr	r0, [pc, #152]	; (b479c <loop+0x2dc>)
   b4704:	f7ff fdbe 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;
   b4708:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b470a:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b470c:	7023      	strb	r3, [r4, #0]
   b470e:	b108      	cbz	r0, b4714 <loop+0x254>
            free(wakeupSource_);
   b4710:	f004 fe0c 	bl	b932c <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4714:	482e      	ldr	r0, [pc, #184]	; (b47d0 <loop+0x310>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b4716:	4c30      	ldr	r4, [pc, #192]	; (b47d8 <loop+0x318>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4718:	f002 fd44 	bl	b71a4 <_ZN6AB18054loopEv>
	current.loop();
   b471c:	f001 fb64 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b4720:	f001 fb7f 	bl	b5e22 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4724:	f001 faee 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4728:	f001 fb09 	bl	b5d3e <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b472c:	7823      	ldrb	r3, [r4, #0]
   b472e:	b123      	cbz	r3, b473a <loop+0x27a>
		if (recordCount()) sensorDetect = false;
   b4730:	f001 ff1c 	bl	b656c <_Z11recordCountv>
   b4734:	b108      	cbz	r0, b473a <loop+0x27a>
   b4736:	2300      	movs	r3, #0
   b4738:	7023      	strb	r3, [r4, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b473a:	4b28      	ldr	r3, [pc, #160]	; (b47dc <loop+0x31c>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	2b00      	cmp	r3, #0
   b4740:	f2c0 81f7 	blt.w	b4b32 <loop+0x672>
		Log.info("Resetting due to low memory");
   b4744:	4926      	ldr	r1, [pc, #152]	; (b47e0 <loop+0x320>)
   b4746:	4815      	ldr	r0, [pc, #84]	; (b479c <loop+0x2dc>)
   b4748:	f7ff fd9c 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b474c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4750:	f004 fe60 	bl	b9414 <delay>
}
   b4754:	b00c      	add	sp, #48	; 0x30
   b4756:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		System.reset();
   b475a:	f007 b802 	b.w	bb762 <_ZN11SystemClass5resetEv>
			else if (result.wakeupPin() == INT_PIN) {
   b475e:	459a      	cmp	sl, r3
   b4760:	d142      	bne.n	b47e8 <loop+0x328>
				Log.info("Woke with sensor interrupt");						// Will count at the bottom of the main loop
   b4762:	4920      	ldr	r1, [pc, #128]	; (b47e4 <loop+0x324>)
   b4764:	480d      	ldr	r0, [pc, #52]	; (b479c <loop+0x2dc>)
   b4766:	f7ff fd8d 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
				if (secondsUntilNextEvent() <= 2 || \
   b476a:	f7ff fdd9 	bl	b4320 <_Z21secondsUntilNextEventv>
   b476e:	2802      	cmp	r0, #2
   b4770:	dd51      	ble.n	b4816 <loop+0x356>
					secondsUntilNextEvent() >= ((sysStatus.get_frequencyMinutes() * 60) - 2)) \
   b4772:	f7ff fdd5 	bl	b4320 <_Z21secondsUntilNextEventv>
   b4776:	4605      	mov	r5, r0
   b4778:	f001 fac4 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b477c:	f001 fc62 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4780:	233c      	movs	r3, #60	; 0x3c
   b4782:	4343      	muls	r3, r0
   b4784:	3b02      	subs	r3, #2
				if (secondsUntilNextEvent() <= 2 || \
   b4786:	429d      	cmp	r5, r3
   b4788:	da45      	bge.n	b4816 <loop+0x356>
				else state = SLEEPING_STATE;								// This is the normal behavioud
   b478a:	2303      	movs	r3, #3
   b478c:	e7bd      	b.n	b470a <loop+0x24a>
   b478e:	bf00      	nop
   b4790:	2003dfcd 	.word	0x2003dfcd
   b4794:	2003dfc4 	.word	0x2003dfc4
   b4798:	000be224 	.word	0x000be224
   b479c:	2003e654 	.word	0x2003e654
   b47a0:	000be243 	.word	0x000be243
   b47a4:	000be1d1 	.word	0x000be1d1
   b47a8:	2003e6ac 	.word	0x2003e6ac
   b47ac:	000be220 	.word	0x000be220
   b47b0:	000be4c8 	.word	0x000be4c8
   b47b4:	000be2b9 	.word	0x000be2b9
   b47b8:	2003df88 	.word	0x2003df88
   b47bc:	000becde 	.word	0x000becde
   b47c0:	000bece0 	.word	0x000bece0
   b47c4:	000be140 	.word	0x000be140
   b47c8:	000bf6a4 	.word	0x000bf6a4
   b47cc:	00030010 	.word	0x00030010
   b47d0:	2003df68 	.word	0x2003df68
   b47d4:	000be2f4 	.word	0x000be2f4
   b47d8:	2003dfcc 	.word	0x2003dfcc
   b47dc:	2003ddbc 	.word	0x2003ddbc
   b47e0:	000be486 	.word	0x000be486
   b47e4:	000be317 	.word	0x000be317
				Log.info("Time is up at %s with %li free memory", Time.format((Time.now()+wakeInSeconds), "%T").c_str(), System.freeMemory());
   b47e8:	f007 f99d 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b47ec:	4bb9      	ldr	r3, [pc, #740]	; (b4ad4 <loop+0x614>)
   b47ee:	49ba      	ldr	r1, [pc, #744]	; (b4ad8 <loop+0x618>)
   b47f0:	9300      	str	r3, [sp, #0]
   b47f2:	19c2      	adds	r2, r0, r7
   b47f4:	17d3      	asrs	r3, r2, #31
   b47f6:	a808      	add	r0, sp, #32
   b47f8:	f007 f936 	bl	bba68 <_ZN9TimeClass6formatExPKc>
   b47fc:	9a08      	ldr	r2, [sp, #32]
   b47fe:	9203      	str	r2, [sp, #12]
   b4800:	f007 f812 	bl	bb828 <_ZN11SystemClass10freeMemoryEv>
   b4804:	9a03      	ldr	r2, [sp, #12]
   b4806:	49b5      	ldr	r1, [pc, #724]	; (b4adc <loop+0x61c>)
   b4808:	4603      	mov	r3, r0
   b480a:	48b5      	ldr	r0, [pc, #724]	; (b4ae0 <loop+0x620>)
   b480c:	f7ff fd3a 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b4810:	a808      	add	r0, sp, #32
   b4812:	f006 fe77 	bl	bb504 <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b4816:	2302      	movs	r3, #2
   b4818:	e777      	b.n	b470a <loop+0x24a>
			if (state != oldState) {
   b481a:	4bb2      	ldr	r3, [pc, #712]	; (b4ae4 <loop+0x624>)
   b481c:	781b      	ldrb	r3, [r3, #0]
   b481e:	2b04      	cmp	r3, #4
   b4820:	f43f af78 	beq.w	b4714 <loop+0x254>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4824:	f7ff fd46 	bl	b42b4 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b4828:	f000 fd12 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b482c:	f000 fda4 	bl	b5378 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b4830:	f001 ffae 	bl	b6790 <_Z16takeMeasurementsv>
				if (sysStatus.get_alertCodeNode() == 0) result = LoRA_Functions::instance().composeDataReportNode();
   b4834:	f001 fa66 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4838:	f001 fb81 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b483c:	4daa      	ldr	r5, [pc, #680]	; (b4ae8 <loop+0x628>)
   b483e:	b940      	cbnz	r0, b4852 <loop+0x392>
   b4840:	f000 fd06 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b4844:	f000 ffe8 	bl	b5818 <_ZN14LoRA_Functions21composeDataReportNodeEv>
				if (!result) {
   b4848:	b1c0      	cbz	r0, b487c <loop+0x3bc>
					retryState = 0;
   b484a:	2300      	movs	r3, #0
   b484c:	602b      	str	r3, [r5, #0]
					state = LoRA_LISTENING_STATE;
   b484e:	2305      	movs	r3, #5
   b4850:	e65e      	b.n	b4510 <loop+0x50>
				else if (sysStatus.get_alertCodeNode() == 1 || sysStatus.get_alertCodeNode() == 2) result = LoRA_Functions::instance().composeJoinRequesttNode();
   b4852:	f001 fa57 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4856:	f001 fb72 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b485a:	2801      	cmp	r0, #1
   b485c:	d020      	beq.n	b48a0 <loop+0x3e0>
   b485e:	f001 fa51 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4862:	f001 fb6c 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4866:	2802      	cmp	r0, #2
   b4868:	d01a      	beq.n	b48a0 <loop+0x3e0>
				else Log.info("Alert code %d, will handle in ERROR state", sysStatus.get_alertCodeNode());
   b486a:	f001 fa4b 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b486e:	f001 fb66 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4872:	499e      	ldr	r1, [pc, #632]	; (b4aec <loop+0x62c>)
   b4874:	4602      	mov	r2, r0
   b4876:	489a      	ldr	r0, [pc, #616]	; (b4ae0 <loop+0x620>)
   b4878:	f7ff fd04 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
					retryState++;
   b487c:	682b      	ldr	r3, [r5, #0]
   b487e:	3301      	adds	r3, #1
   b4880:	602b      	str	r3, [r5, #0]
					if (sysStatus.get_frequencyMinutes() == 1) retryState = 0;	// When we are in recovery mode, we don't need retries as we are sending every minute
   b4882:	f001 fa3f 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4886:	f001 fbdd 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b488a:	2801      	cmp	r0, #1
   b488c:	bf04      	itt	eq
   b488e:	2300      	moveq	r3, #0
   b4890:	602b      	streq	r3, [r5, #0]
					Log.info("Failed in data send, retryState = %d",retryState);
   b4892:	682a      	ldr	r2, [r5, #0]
   b4894:	4996      	ldr	r1, [pc, #600]	; (b4af0 <loop+0x630>)
   b4896:	4892      	ldr	r0, [pc, #584]	; (b4ae0 <loop+0x620>)
   b4898:	f7ff fcf4 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
				state = SLEEPING_STATE;										// Once we clear the counts - go to sleep
   b489c:	2303      	movs	r3, #3
   b489e:	e637      	b.n	b4510 <loop+0x50>
				else if (sysStatus.get_alertCodeNode() == 1 || sysStatus.get_alertCodeNode() == 2) result = LoRA_Functions::instance().composeJoinRequesttNode();
   b48a0:	f000 fcd6 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b48a4:	f001 f8f4 	bl	b5a90 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b48a8:	e7ce      	b.n	b4848 <loop+0x388>
			if (state != oldState) {
   b48aa:	4b8e      	ldr	r3, [pc, #568]	; (b4ae4 <loop+0x624>)
   b48ac:	4d91      	ldr	r5, [pc, #580]	; (b4af4 <loop+0x634>)
   b48ae:	781b      	ldrb	r3, [r3, #0]
   b48b0:	2b05      	cmp	r3, #5
   b48b2:	d006      	beq.n	b48c2 <loop+0x402>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b48b4:	f7ff fcfe 	bl	b42b4 <_Z22publishStateTransitionv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b48b8:	f004 fa02 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEPING_STATE;
   b48bc:	2303      	movs	r3, #3
				startListening = millis();
   b48be:	6028      	str	r0, [r5, #0]
				state = SLEEPING_STATE;
   b48c0:	7023      	strb	r3, [r4, #0]
			while (millis() - startListening < 5000) {
   b48c2:	f241 3687 	movw	r6, #4999	; 0x1387
   b48c6:	f004 f9fb 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
   b48ca:	682b      	ldr	r3, [r5, #0]
   b48cc:	1ac0      	subs	r0, r0, r3
   b48ce:	42b0      	cmp	r0, r6
   b48d0:	d84a      	bhi.n	b4968 <loop+0x4a8>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {// Listen for acknowledgement
   b48d2:	f000 fcbd 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b48d6:	f000 fed3 	bl	b5680 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b48da:	2800      	cmp	r0, #0
   b48dc:	d0f3      	beq.n	b48c6 <loop+0x406>
					sysStatus.set_lastConnection(Time.now());
   b48de:	f001 fa11 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b48e2:	4605      	mov	r5, r0
   b48e4:	f007 f91f 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b48e8:	4602      	mov	r2, r0
   b48ea:	17c3      	asrs	r3, r0, #31
   b48ec:	4628      	mov	r0, r5
   b48ee:	f001 fc94 	bl	b621a <_ZN13sysStatusData18set_lastConnectionEx>
					randomSeed(sysStatus.get_lastConnection());				// Done so we can genrate rando numbers later
   b48f2:	f001 fa07 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b48f6:	f001 fc6d 	bl	b61d4 <_ZNK13sysStatusData18get_lastConnectionEv>
   b48fa:	f006 fd34 	bl	bb366 <_Z10randomSeedj>
					ab1805.setRtcFromTime(Time.now());
   b48fe:	f007 f912 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4902:	2301      	movs	r3, #1
   b4904:	4602      	mov	r2, r0
   b4906:	9300      	str	r3, [sp, #0]
   b4908:	17c3      	asrs	r3, r0, #31
   b490a:	487b      	ldr	r0, [pc, #492]	; (b4af8 <loop+0x638>)
   b490c:	f002 fc3a 	bl	b7184 <_ZN6AB180514setRtcFromTimeExb>
					if (sysStatus.get_alertCodeNode() > 0) {				// If we are reporting an alert we will also report data
   b4910:	f001 f9f8 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4914:	f001 fb13 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4918:	b130      	cbz	r0, b4928 <loop+0x468>
						state = IDLE_STATE;									// This is enable us to send the data now that alert is reported
   b491a:	2302      	movs	r3, #2
   b491c:	7023      	strb	r3, [r4, #0]
					LoRA_Functions::instance().sleepLoRaRadio();			// Done with LoRA - put radio to sleep
   b491e:	f000 fc97 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b4922:	f000 fd39 	bl	b5398 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
			if (!messageReceived) Log.info("Did not receive a response");
   b4926:	e6f5      	b.n	b4714 <loop+0x254>
						static int lastReportingHour = Time.hour();
   b4928:	4d74      	ldr	r5, [pc, #464]	; (b4afc <loop+0x63c>)
   b492a:	4c75      	ldr	r4, [pc, #468]	; (b4b00 <loop+0x640>)
   b492c:	782b      	ldrb	r3, [r5, #0]
   b492e:	f3bf 8f5b 	dmb	ish
   b4932:	f013 0f01 	tst.w	r3, #1
   b4936:	d109      	bne.n	b494c <loop+0x48c>
   b4938:	4628      	mov	r0, r5
   b493a:	f7ff fbbf 	bl	b40bc <__cxa_guard_acquire>
   b493e:	b128      	cbz	r0, b494c <loop+0x48c>
   b4940:	f007 f902 	bl	bbb48 <_ZN9TimeClass4hourEv>
   b4944:	6020      	str	r0, [r4, #0]
   b4946:	4628      	mov	r0, r5
   b4948:	f7ff fbbd 	bl	b40c6 <__cxa_guard_release>
						if (Time.hour() != lastReportingHour) {
   b494c:	f007 f8fc 	bl	bbb48 <_ZN9TimeClass4hourEv>
   b4950:	6823      	ldr	r3, [r4, #0]
   b4952:	4298      	cmp	r0, r3
   b4954:	d0e3      	beq.n	b491e <loop+0x45e>
							current.set_hourlyCount(0);					    // Zero the hourly count
   b4956:	f001 fa47 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b495a:	2100      	movs	r1, #0
   b495c:	f001 fc17 	bl	b618e <_ZN17currentStatusData15set_hourlyCountEt>
							lastReportingHour = Time.hour();
   b4960:	f007 f8f2 	bl	bbb48 <_ZN9TimeClass4hourEv>
   b4964:	6020      	str	r0, [r4, #0]
   b4966:	e7da      	b.n	b491e <loop+0x45e>
			if (!messageReceived) Log.info("Did not receive a response");
   b4968:	4966      	ldr	r1, [pc, #408]	; (b4b04 <loop+0x644>)
   b496a:	485d      	ldr	r0, [pc, #372]	; (b4ae0 <loop+0x620>)
   b496c:	f7ff fc8a 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b4970:	e6d0      	b.n	b4714 <loop+0x254>
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4972:	4b5c      	ldr	r3, [pc, #368]	; (b4ae4 <loop+0x624>)
   b4974:	781b      	ldrb	r3, [r3, #0]
   b4976:	2b01      	cmp	r3, #1
   b4978:	d001      	beq.n	b497e <loop+0x4be>
   b497a:	f7ff fc9b 	bl	b42b4 <_Z22publishStateTransitionv>
			switch (sysStatus.get_alertCodeNode())
   b497e:	f001 f9c1 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4982:	f001 fadc 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4986:	3801      	subs	r0, #1
   b4988:	2806      	cmp	r0, #6
   b498a:	f200 8096 	bhi.w	b4aba <loop+0x5fa>
   b498e:	e8df f000 	tbb	[pc, r0]
   b4992:	0a04      	.short	0x0a04
   b4994:	8a71490c 	.word	0x8a71490c
   b4998:	8e          	.byte	0x8e
   b4999:	00          	.byte	0x00
				Log.info("Alert 1 - Join Request Required");
   b499a:	495b      	ldr	r1, [pc, #364]	; (b4b08 <loop+0x648>)
   b499c:	4850      	ldr	r0, [pc, #320]	; (b4ae0 <loop+0x620>)
   b499e:	f7ff fc71 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;							// Sends the alert and clears alert code
   b49a2:	2304      	movs	r3, #4
   b49a4:	e5b4      	b.n	b4510 <loop+0x50>
				Log.info("Alert 2- New Day Alert");
   b49a6:	4959      	ldr	r1, [pc, #356]	; (b4b0c <loop+0x64c>)
   b49a8:	e7f8      	b.n	b499c <loop+0x4dc>
				static system_tick_t enteredState = millis();
   b49aa:	4c59      	ldr	r4, [pc, #356]	; (b4b10 <loop+0x650>)
   b49ac:	4d59      	ldr	r5, [pc, #356]	; (b4b14 <loop+0x654>)
   b49ae:	7823      	ldrb	r3, [r4, #0]
   b49b0:	f3bf 8f5b 	dmb	ish
   b49b4:	f013 0f01 	tst.w	r3, #1
   b49b8:	d109      	bne.n	b49ce <loop+0x50e>
   b49ba:	4620      	mov	r0, r4
   b49bc:	f7ff fb7e 	bl	b40bc <__cxa_guard_acquire>
   b49c0:	b128      	cbz	r0, b49ce <loop+0x50e>
   b49c2:	f004 f97d 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
   b49c6:	6028      	str	r0, [r5, #0]
   b49c8:	4620      	mov	r0, r4
   b49ca:	f7ff fb7c 	bl	b40c6 <__cxa_guard_release>
   b49ce:	f004 f977 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b49d2:	682b      	ldr	r3, [r5, #0]
   b49d4:	1ac0      	subs	r0, r0, r3
   b49d6:	f247 5330 	movw	r3, #30000	; 0x7530
   b49da:	4298      	cmp	r0, r3
   b49dc:	f67f ae9a 	bls.w	b4714 <loop+0x254>
					Log.info("Alert 3 - Resetting device");
   b49e0:	494d      	ldr	r1, [pc, #308]	; (b4b18 <loop+0x658>)
   b49e2:	483f      	ldr	r0, [pc, #252]	; (b4ae0 <loop+0x620>)
   b49e4:	f7ff fc4e 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(0);							// Need to clear so we don't get in a retry cycle
   b49e8:	f001 f98c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b49ec:	2100      	movs	r1, #0
   b49ee:	f001 faee 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());
   b49f2:	f001 f987 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b49f6:	4604      	mov	r4, r0
   b49f8:	f007 f895 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b49fc:	4602      	mov	r2, r0
   b49fe:	17c3      	asrs	r3, r0, #31
   b4a00:	4620      	mov	r0, r4
   b4a02:	f001 fc0f 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
					sysStatus.flush(true);									// All this is required as we are done trainsiting loop
   b4a06:	f001 f97d 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4a0a:	6803      	ldr	r3, [r0, #0]
   b4a0c:	2101      	movs	r1, #1
   b4a0e:	68db      	ldr	r3, [r3, #12]
   b4a10:	4798      	blx	r3
					delay(2000);
   b4a12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4a16:	f004 fcfd 	bl	b9414 <delay>
					ab1805.deepPowerDown();
   b4a1a:	211e      	movs	r1, #30
   b4a1c:	4836      	ldr	r0, [pc, #216]	; (b4af8 <loop+0x638>)
   b4a1e:	f002 f96f 	bl	b6d00 <_ZN6AB180513deepPowerDownEi>
   b4a22:	e677      	b.n	b4714 <loop+0x254>
				Log.info("Initialize LoRA radio");
   b4a24:	493d      	ldr	r1, [pc, #244]	; (b4b1c <loop+0x65c>)
   b4a26:	482e      	ldr	r0, [pc, #184]	; (b4ae0 <loop+0x620>)
   b4a28:	f7ff fc2c 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
				if(LoRA_Functions::instance().initializeRadio()) {
   b4a2c:	f000 fc10 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b4a30:	f000 fcb8 	bl	b53a4 <_ZN14LoRA_Functions15initializeRadioEv>
   b4a34:	b148      	cbz	r0, b4a4a <loop+0x58a>
					Log.info("Initialization successful");	
   b4a36:	493a      	ldr	r1, [pc, #232]	; (b4b20 <loop+0x660>)
   b4a38:	4829      	ldr	r0, [pc, #164]	; (b4ae0 <loop+0x620>)
   b4a3a:	f7ff fc23 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(0);							// Modem reinitialized successfully, going back to retransmit
   b4a3e:	f001 f961 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4a42:	2100      	movs	r1, #0
   b4a44:	f001 fac3 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
					state = LoRA_TRANSMISSION_STATE;						// Sends the alert and clears alert code
   b4a48:	e7ab      	b.n	b49a2 <loop+0x4e2>
					Log.info(("Initialization not successful - power cycle"));
   b4a4a:	4936      	ldr	r1, [pc, #216]	; (b4b24 <loop+0x664>)
   b4a4c:	4824      	ldr	r0, [pc, #144]	; (b4ae0 <loop+0x620>)
   b4a4e:	f7ff fc19 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(3);							// Next time through - will transition to power cycle
   b4a52:	f001 f957 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4a56:	2103      	movs	r1, #3
   b4a58:	f001 fab9 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());
   b4a5c:	f001 f952 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4a60:	4605      	mov	r5, r0
   b4a62:	f007 f860 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4a66:	4602      	mov	r2, r0
   b4a68:	17c3      	asrs	r3, r0, #31
   b4a6a:	4628      	mov	r0, r5
   b4a6c:	f001 fbda 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				state = IDLE_STATE;
   b4a70:	2302      	movs	r3, #2
   b4a72:	e54d      	b.n	b4510 <loop+0x50>
				sysStatus.initialize();										// Resets the sysStatus values to factory default
   b4a74:	f001 f946 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4a78:	6803      	ldr	r3, [r0, #0]
   b4a7a:	699b      	ldr	r3, [r3, #24]
   b4a7c:	4798      	blx	r3
				current.resetEverything();									// Resets the node counts
   b4a7e:	f001 f9b3 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b4a82:	f001 fc1c 	bl	b62be <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b4a86:	f001 f93d 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4a8a:	2101      	movs	r1, #1
   b4a8c:	f001 fa9f 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());			
   b4a90:	f001 f938 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4a94:	4605      	mov	r5, r0
   b4a96:	f007 f846 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4a9a:	4602      	mov	r2, r0
   b4a9c:	17c3      	asrs	r3, r0, #31
   b4a9e:	4628      	mov	r0, r5
   b4aa0:	f001 fbc0 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				state = LoRA_TRANSMISSION_STATE;							// Sends the alert and clears alert code
   b4aa4:	e77d      	b.n	b49a2 <loop+0x4e2>
				current.resetEverything();
   b4aa6:	f001 f99f 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b4aaa:	f001 fc08 	bl	b62be <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(0);
   b4aae:	f001 f929 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4ab2:	2100      	movs	r1, #0
   b4ab4:	f001 fa8b 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4ab8:	e6f0      	b.n	b489c <loop+0x3dc>
				Log.info("Undefined Error State");
   b4aba:	491b      	ldr	r1, [pc, #108]	; (b4b28 <loop+0x668>)
   b4abc:	4808      	ldr	r0, [pc, #32]	; (b4ae0 <loop+0x620>)
   b4abe:	f7ff fbe1 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(0);
   b4ac2:	f001 f91f 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4ac6:	2100      	movs	r1, #0
   b4ac8:	f001 fa81 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4acc:	e7d0      	b.n	b4a70 <loop+0x5b0>
                valid_ = false;
   b4ace:	7530      	strb	r0, [r6, #20]
                return *this;
   b4ad0:	e5d9      	b.n	b4686 <loop+0x1c6>
   b4ad2:	bf00      	nop
   b4ad4:	000be1d1 	.word	0x000be1d1
   b4ad8:	2003e6ac 	.word	0x2003e6ac
   b4adc:	000be332 	.word	0x000be332
   b4ae0:	2003e654 	.word	0x2003e654
   b4ae4:	2003dfc4 	.word	0x2003dfc4
   b4ae8:	2003dfc8 	.word	0x2003dfc8
   b4aec:	000be358 	.word	0x000be358
   b4af0:	000be382 	.word	0x000be382
   b4af4:	2003df5c 	.word	0x2003df5c
   b4af8:	2003df68 	.word	0x2003df68
   b4afc:	2003df48 	.word	0x2003df48
   b4b00:	2003df60 	.word	0x2003df60
   b4b04:	000be3a7 	.word	0x000be3a7
   b4b08:	000be3c2 	.word	0x000be3c2
   b4b0c:	000be3e2 	.word	0x000be3e2
   b4b10:	2003df44 	.word	0x2003df44
   b4b14:	2003df58 	.word	0x2003df58
   b4b18:	000be3f9 	.word	0x000be3f9
   b4b1c:	000be414 	.word	0x000be414
   b4b20:	000be42a 	.word	0x000be42a
   b4b24:	000be444 	.word	0x000be444
   b4b28:	000be470 	.word	0x000be470
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4b2c:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4b30:	e5a9      	b.n	b4686 <loop+0x1c6>
}
   b4b32:	b00c      	add	sp, #48	; 0x30
   b4b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4b38 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4b38:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4b3a:	2300      	movs	r3, #0
   b4b3c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4b3e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4b40:	4604      	mov	r4, r0
   b4b42:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4b44:	b12b      	cbz	r3, b4b52 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4b46:	2202      	movs	r2, #2
   b4b48:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4b4a:	68eb      	ldr	r3, [r5, #12]
   b4b4c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4b4e:	68ab      	ldr	r3, [r5, #8]
   b4b50:	60a3      	str	r3, [r4, #8]
    }
   b4b52:	4620      	mov	r0, r4
   b4b54:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4b58 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4b5c:	b095      	sub	sp, #84	; 0x54
   b4b5e:	4605      	mov	r5, r0
        };
   b4b60:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4b62:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4b64:	4690      	mov	r8, r2
   b4b66:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4b68:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4b6a:	f7ff ffe5 	bl	b4b38 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4b6e:	a904      	add	r1, sp, #16
   b4b70:	a808      	add	r0, sp, #32
   b4b72:	f7ff ffe1 	bl	b4b38 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4b76:	a908      	add	r1, sp, #32
   b4b78:	4630      	mov	r0, r6
   b4b7a:	f7ff ffdd 	bl	b4b38 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4b7e:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b82:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4b84:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b88:	f7ff fa85 	bl	b4096 <_Znwj>
   b4b8c:	4604      	mov	r4, r0
   b4b8e:	b1a0      	cbz	r0, b4bba <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b90:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4b94:	ab01      	add	r3, sp, #4
   b4b96:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4b9e:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4ba2:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4ba8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4baa:	60a3      	str	r3, [r4, #8]
   b4bac:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4bb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4bb6:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4bb8:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4bba:	4b24      	ldr	r3, [pc, #144]	; (b4c4c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4bbc:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4bbe:	4b24      	ldr	r3, [pc, #144]	; (b4c50 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4bc0:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4bc2:	2200      	movs	r2, #0
   b4bc4:	2300      	movs	r3, #0
   b4bc6:	f04f 0900 	mov.w	r9, #0
   b4bca:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4bce:	4b21      	ldr	r3, [pc, #132]	; (b4c54 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4bd0:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4bd4:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4bd6:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4bd8:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4bdc:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4be0:	f7ff fa59 	bl	b4096 <_Znwj>
   b4be4:	4604      	mov	r4, r0
   b4be6:	b1d8      	cbz	r0, b4c20 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4bea:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4bee:	b133      	cbz	r3, b4bfe <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4bf0:	2202      	movs	r2, #2
   b4bf2:	a910      	add	r1, sp, #64	; 0x40
   b4bf4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4bf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4bf8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4bfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4bfc:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4bfe:	4b16      	ldr	r3, [pc, #88]	; (b4c58 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4c00:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4c02:	4a16      	ldr	r2, [pc, #88]	; (b4c5c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4c04:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4c06:	ab01      	add	r3, sp, #4
   b4c08:	4640      	mov	r0, r8
   b4c0a:	4639      	mov	r1, r7
   b4c0c:	f004 fa8c 	bl	b9128 <system_subscribe_event>
        if (r) {
   b4c10:	b1b0      	cbz	r0, b4c40 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4c12:	4620      	mov	r0, r4
   b4c14:	f7ff fadc 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4c18:	2110      	movs	r1, #16
   b4c1a:	4620      	mov	r0, r4
   b4c1c:	f7ff fa3f 	bl	b409e <_ZdlPvj>
   b4c20:	a810      	add	r0, sp, #64	; 0x40
   b4c22:	f7ff fad5 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4c26:	4630      	mov	r0, r6
   b4c28:	f7ff fad2 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4c2c:	a808      	add	r0, sp, #32
   b4c2e:	f7ff facf 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4c32:	a804      	add	r0, sp, #16
   b4c34:	f7ff facc 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
    }
   b4c38:	4628      	mov	r0, r5
   b4c3a:	b015      	add	sp, #84	; 0x54
   b4c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4c40:	9b02      	ldr	r3, [sp, #8]
   b4c42:	60ab      	str	r3, [r5, #8]
   b4c44:	e9c5 8700 	strd	r8, r7, [r5]
   b4c48:	e7ea      	b.n	b4c20 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4c4a:	bf00      	nop
   b4c4c:	000b4145 	.word	0x000b4145
   b4c50:	000b4c61 	.word	0x000b4c61
   b4c54:	000c0002 	.word	0x000c0002
   b4c58:	000b41e3 	.word	0x000b41e3
   b4c5c:	000b411d 	.word	0x000b411d

000b4c60 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4c60:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c64:	4604      	mov	r4, r0
	switch (__op)
   b4c66:	d104      	bne.n	b4c72 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4c68:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4c6a:	6003      	str	r3, [r0, #0]
      }
   b4c6c:	2000      	movs	r0, #0
   b4c6e:	b003      	add	sp, #12
   b4c70:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4c72:	2a02      	cmp	r2, #2
   b4c74:	d00c      	beq.n	b4c90 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4c76:	2a03      	cmp	r2, #3
   b4c78:	d1f8      	bne.n	b4c6c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4c7a:	6804      	ldr	r4, [r0, #0]
   b4c7c:	2c00      	cmp	r4, #0
   b4c7e:	d0f5      	beq.n	b4c6c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4c80:	4620      	mov	r0, r4
   b4c82:	f7ff faa5 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4c86:	2110      	movs	r1, #16
   b4c88:	4620      	mov	r0, r4
   b4c8a:	f7ff fa08 	bl	b409e <_ZdlPvj>
   b4c8e:	e7ed      	b.n	b4c6c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4c90:	6809      	ldr	r1, [r1, #0]
   b4c92:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c94:	2010      	movs	r0, #16
   b4c96:	f7ff f9fe 	bl	b4096 <_Znwj>
   b4c9a:	4605      	mov	r5, r0
   b4c9c:	b110      	cbz	r0, b4ca4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4c9e:	9901      	ldr	r1, [sp, #4]
   b4ca0:	f7ff ff4a 	bl	b4b38 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4ca4:	6025      	str	r5, [r4, #0]
	}
   b4ca6:	e7e1      	b.n	b4c6c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4ca8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4caa:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4cae:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4cb0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4cb2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4cb6:	42ae      	cmp	r6, r5
   b4cb8:	d004      	beq.n	b4cc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4cba:	4628      	mov	r0, r5
   b4cbc:	f006 fc22 	bl	bb504 <_ZN6StringD1Ev>
   b4cc0:	3514      	adds	r5, #20
   b4cc2:	e7f8      	b.n	b4cb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4cc4:	6820      	ldr	r0, [r4, #0]
   b4cc6:	f004 fb31 	bl	b932c <free>
    AllocatorT::free(data_);
}
   b4cca:	4620      	mov	r0, r4
   b4ccc:	bd70      	pop	{r4, r5, r6, pc}

000b4cce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4cce:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4cd2:	4604      	mov	r4, r0
   b4cd4:	460d      	mov	r5, r1
   b4cd6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4cd8:	d916      	bls.n	b4d08 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4cda:	4290      	cmp	r0, r2
   b4cdc:	d215      	bcs.n	b4d0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4cde:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4ce2:	1a75      	subs	r5, r6, r1
   b4ce4:	f1a1 0714 	sub.w	r7, r1, #20
   b4ce8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4cea:	42b7      	cmp	r7, r6
   b4cec:	d01c      	beq.n	b4d28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4cee:	b12c      	cbz	r4, b4cfc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4cf0:	4631      	mov	r1, r6
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	f006 fc82 	bl	bb5fc <_ZN6StringC1EOS_>
   b4cf8:	7c33      	ldrb	r3, [r6, #16]
   b4cfa:	7423      	strb	r3, [r4, #16]
   b4cfc:	4630      	mov	r0, r6
   b4cfe:	f006 fc01 	bl	bb504 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4d02:	3e14      	subs	r6, #20
   b4d04:	3c14      	subs	r4, #20
   b4d06:	e7f0      	b.n	b4cea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4d08:	d00e      	beq.n	b4d28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4d0a:	42b5      	cmp	r5, r6
   b4d0c:	d00c      	beq.n	b4d28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4d0e:	b12c      	cbz	r4, b4d1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4d10:	4629      	mov	r1, r5
   b4d12:	4620      	mov	r0, r4
   b4d14:	f006 fc72 	bl	bb5fc <_ZN6StringC1EOS_>
   b4d18:	7c2b      	ldrb	r3, [r5, #16]
   b4d1a:	7423      	strb	r3, [r4, #16]
   b4d1c:	4628      	mov	r0, r5
   b4d1e:	f006 fbf1 	bl	bb504 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4d22:	3514      	adds	r5, #20
   b4d24:	3414      	adds	r4, #20
   b4d26:	e7f0      	b.n	b4d0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4d2e:	2300      	movs	r3, #0
   b4d30:	e9c0 3300 	strd	r3, r3, [r0]
   b4d34:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4d36:	684f      	ldr	r7, [r1, #4]
   b4d38:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4d3a:	4604      	mov	r4, r0
   b4d3c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4d3e:	dd23      	ble.n	b4d88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4d40:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4d44:	fb08 f007 	mul.w	r0, r8, r7
   b4d48:	f004 fae8 	bl	b931c <malloc>
            if (!d) {
   b4d4c:	4605      	mov	r5, r0
   b4d4e:	b1d8      	cbz	r0, b4d88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4d50:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4d54:	fb08 1202 	mla	r2, r8, r2, r1
   b4d58:	f7ff ffb9 	bl	b4cce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4d5c:	6820      	ldr	r0, [r4, #0]
   b4d5e:	f004 fae5 	bl	b932c <free>
        data_ = d;
   b4d62:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4d64:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4d66:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4d6a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4d6e:	45b8      	cmp	r8, r7
   b4d70:	d008      	beq.n	b4d84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4d72:	4639      	mov	r1, r7
   b4d74:	4628      	mov	r0, r5
   b4d76:	f006 fc5b 	bl	bb630 <_ZN6StringC1ERKS_>
   b4d7a:	7c3b      	ldrb	r3, [r7, #16]
   b4d7c:	742b      	strb	r3, [r5, #16]
   b4d7e:	3714      	adds	r7, #20
   b4d80:	3514      	adds	r5, #20
   b4d82:	e7f4      	b.n	b4d6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4d84:	6873      	ldr	r3, [r6, #4]
   b4d86:	6063      	str	r3, [r4, #4]
}
   b4d88:	4620      	mov	r0, r4
   b4d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4d90 <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b4d90:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4d92:	4b36      	ldr	r3, [pc, #216]	; (b4e6c <_GLOBAL__sub_I_SystemMode+0xdc>)
    SleepResult() {}
   b4d94:	4a36      	ldr	r2, [pc, #216]	; (b4e70 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b4d96:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4d98:	2400      	movs	r4, #0
   b4d9a:	b08d      	sub	sp, #52	; 0x34
   b4d9c:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4da0:	2003      	movs	r0, #3
   b4da2:	f004 f9b1 	bl	b9108 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b4da6:	4621      	mov	r1, r4
   b4da8:	2001      	movs	r0, #1
   b4daa:	f004 f9c5 	bl	b9138 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b4dae:	2101      	movs	r1, #1
   b4db0:	2004      	movs	r0, #4
   b4db2:	f003 ff6d 	bl	b8c90 <HAL_Feature_Set>
        capacity_(0) {
   b4db6:	e9cd 4400 	strd	r4, r4, [sp]
   b4dba:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4dbc:	f006 ff9a 	bl	bbcf4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4dc0:	4d2c      	ldr	r5, [pc, #176]	; (b4e74 <_GLOBAL__sub_I_SystemMode+0xe4>)
   b4dc2:	4606      	mov	r6, r0
   b4dc4:	4669      	mov	r1, sp
   b4dc6:	a803      	add	r0, sp, #12
   b4dc8:	f7ff ffaf 	bl	b4d2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4dcc:	462f      	mov	r7, r5
        stream_(&stream) {
   b4dce:	a903      	add	r1, sp, #12
   b4dd0:	a806      	add	r0, sp, #24
   b4dd2:	f7ff ffaa 	bl	b4d2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4dd6:	4b28      	ldr	r3, [pc, #160]	; (b4e78 <_GLOBAL__sub_I_SystemMode+0xe8>)
   b4dd8:	f847 3b04 	str.w	r3, [r7], #4
   b4ddc:	a906      	add	r1, sp, #24
   b4dde:	a809      	add	r0, sp, #36	; 0x24
   b4de0:	f7ff ffa3 	bl	b4d2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4de4:	aa09      	add	r2, sp, #36	; 0x24
   b4de6:	211e      	movs	r1, #30
   b4de8:	4638      	mov	r0, r7
   b4dea:	f005 fce7 	bl	ba7bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4dee:	a809      	add	r0, sp, #36	; 0x24
   b4df0:	f7ff ff5a 	bl	b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4df4:	a806      	add	r0, sp, #24
   b4df6:	f7ff ff57 	bl	b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4dfa:	4b20      	ldr	r3, [pc, #128]	; (b4e7c <_GLOBAL__sub_I_SystemMode+0xec>)
   b4dfc:	602b      	str	r3, [r5, #0]
   b4dfe:	a803      	add	r0, sp, #12
   b4e00:	622e      	str	r6, [r5, #32]
   b4e02:	f7ff ff51 	bl	b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e06:	4b1e      	ldr	r3, [pc, #120]	; (b4e80 <_GLOBAL__sub_I_SystemMode+0xf0>)
   b4e08:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4e0a:	f006 ff73 	bl	bbcf4 <_Z16_fetch_usbserialv>
   b4e0e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e12:	f006 ff5d 	bl	bbcd0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4e16:	f005 f9b3 	bl	ba180 <_ZN5spark10LogManager8instanceEv>
   b4e1a:	4629      	mov	r1, r5
   b4e1c:	f005 fba4 	bl	ba568 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b4e20:	4668      	mov	r0, sp
   b4e22:	f7ff ff41 	bl	b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4e26:	f007 f827 	bl	bbe78 <spark_protocol_instance>
   b4e2a:	4623      	mov	r3, r4
   b4e2c:	4622      	mov	r2, r4
   b4e2e:	2107      	movs	r1, #7
   b4e30:	f007 f832 	bl	bbe98 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4e34:	f007 f820 	bl	bbe78 <spark_protocol_instance>
   b4e38:	4623      	mov	r3, r4
   b4e3a:	4622      	mov	r2, r4
   b4e3c:	210d      	movs	r1, #13
   b4e3e:	f007 f823 	bl	bbe88 <spark_protocol_set_product_id>
        : config_(config) {
   b4e42:	4b10      	ldr	r3, [pc, #64]	; (b4e84 <_GLOBAL__sub_I_SystemMode+0xf4>)
   b4e44:	1d1a      	adds	r2, r3, #4
   b4e46:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4e48:	4a0f      	ldr	r2, [pc, #60]	; (b4e88 <_GLOBAL__sub_I_SystemMode+0xf8>)
   b4e4a:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4e4c:	2201      	movs	r2, #1
   b4e4e:	751a      	strb	r2, [r3, #20]
   b4e50:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4e54:	611c      	str	r4, [r3, #16]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4e56:	f007 f8ef 	bl	bc038 <_Z19__fetch_global_Wirev>
   b4e5a:	4601      	mov	r1, r0
   b4e5c:	480b      	ldr	r0, [pc, #44]	; (b4e8c <_GLOBAL__sub_I_SystemMode+0xfc>)
   b4e5e:	2269      	movs	r2, #105	; 0x69
   b4e60:	b00d      	add	sp, #52	; 0x34
   b4e62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4e66:	f001 bcf3 	b.w	b6850 <_ZN6AB1805C1ER7TwoWireh>
   b4e6a:	bf00      	nop
   b4e6c:	2003df38 	.word	0x2003df38
   b4e70:	ffff0000 	.word	0xffff0000
   b4e74:	2003dfa0 	.word	0x2003dfa0
   b4e78:	000be68c 	.word	0x000be68c
   b4e7c:	000bf544 	.word	0x000bf544
   b4e80:	000be6a4 	.word	0x000be6a4
   b4e84:	2003df88 	.word	0x2003df88
   b4e88:	00030010 	.word	0x00030010
   b4e8c:	2003df68 	.word	0x2003df68

000b4e90 <_Z22disconnectFromParticlev>:
{
   b4e90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  time_t startTime = Time.now();
   b4e94:	f006 fe47 	bl	bbb26 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b4e98:	4939      	ldr	r1, [pc, #228]	; (b4f80 <_Z22disconnectFromParticlev+0xf0>)
  time_t startTime = Time.now();
   b4e9a:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b4e9c:	4839      	ldr	r0, [pc, #228]	; (b4f84 <_Z22disconnectFromParticlev+0xf4>)
   b4e9e:	f7ff f9f1 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4ea2:	2300      	movs	r3, #0
  Particle.disconnect();                                               		// Disconnect from Particle
   b4ea4:	a801      	add	r0, sp, #4
   b4ea6:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b4eaa:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4eae:	f004 fc07 	bl	b96c0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   b4eb2:	f7ff f9d7 	bl	b4264 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b4eb6:	f643 2698 	movw	r6, #15000	; 0x3a98
        const system_tick_t start = millis();
   b4eba:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4ebc:	f7ff f9d2 	bl	b4264 <_ZN11SystemClass6millisEv>
   b4ec0:	1b03      	subs	r3, r0, r4
   b4ec2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4ec6:	42b3      	cmp	r3, r6
   b4ec8:	f171 0300 	sbcs.w	r3, r1, #0
   b4ecc:	d205      	bcs.n	b4eda <_Z22disconnectFromParticlev+0x4a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4ece:	f004 f995 	bl	b91fc <spark_cloud_flag_connected>
   b4ed2:	b110      	cbz	r0, b4eda <_Z22disconnectFromParticlev+0x4a>
            spark_process();
   b4ed4:	f004 f982 	bl	b91dc <spark_process>
        while (_while() && !_condition()) {
   b4ed8:	e7f0      	b.n	b4ebc <_Z22disconnectFromParticlev+0x2c>
   b4eda:	f004 f98f 	bl	b91fc <spark_cloud_flag_connected>
  Particle.process();
   b4ede:	f7ff f9c5 	bl	b426c <_ZN10CloudClass7processEv>
   b4ee2:	f004 f98b 	bl	b91fc <spark_cloud_flag_connected>
  if (Particle.connected()) {                      							// As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b4ee6:	4604      	mov	r4, r0
   b4ee8:	b140      	cbz	r0, b4efc <_Z22disconnectFromParticlev+0x6c>
    Log.info("Failed to disconnect from Particle");
   b4eea:	4927      	ldr	r1, [pc, #156]	; (b4f88 <_Z22disconnectFromParticlev+0xf8>)
   b4eec:	4825      	ldr	r0, [pc, #148]	; (b4f84 <_Z22disconnectFromParticlev+0xf4>)
   b4eee:	f7ff f9c9 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b4ef2:	2400      	movs	r4, #0
   b4ef4:	4620      	mov	r0, r4
   b4ef6:	b004      	add	sp, #16
   b4ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b4efc:	f006 fe13 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4f00:	4922      	ldr	r1, [pc, #136]	; (b4f8c <_Z22disconnectFromParticlev+0xfc>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4f02:	4f23      	ldr	r7, [pc, #140]	; (b4f90 <_Z22disconnectFromParticlev+0x100>)
   b4f04:	1b42      	subs	r2, r0, r5
   b4f06:	481f      	ldr	r0, [pc, #124]	; (b4f84 <_Z22disconnectFromParticlev+0xf4>)
   b4f08:	f7ff f9bc 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b4f0c:	f006 fe0b 	bl	bbb26 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f10:	4622      	mov	r2, r4
   b4f12:	2102      	movs	r1, #2
   b4f14:	4606      	mov	r6, r0
   b4f16:	6878      	ldr	r0, [r7, #4]
   b4f18:	f004 f9b0 	bl	b927c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b4f1c:	6878      	ldr	r0, [r7, #4]
   b4f1e:	4623      	mov	r3, r4
   b4f20:	4622      	mov	r2, r4
   b4f22:	4621      	mov	r1, r4
   b4f24:	f004 f9c2 	bl	b92ac <network_off>
        const system_tick_t start = millis();
   b4f28:	f7ff f99c 	bl	b4264 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b4f2c:	f247 5830 	movw	r8, #30000	; 0x7530
        const system_tick_t start = millis();
   b4f30:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4f32:	f7ff f997 	bl	b4264 <_ZN11SystemClass6millisEv>
   b4f36:	1b43      	subs	r3, r0, r5
   b4f38:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4f3c:	4543      	cmp	r3, r8
   b4f3e:	f171 0300 	sbcs.w	r3, r1, #0
   b4f42:	d206      	bcs.n	b4f52 <_Z22disconnectFromParticlev+0xc2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b4f44:	4638      	mov	r0, r7
   b4f46:	f005 ff57 	bl	badf8 <_ZN5spark12NetworkClass5isOffEv>
   b4f4a:	b910      	cbnz	r0, b4f52 <_Z22disconnectFromParticlev+0xc2>
            spark_process();
   b4f4c:	f004 f946 	bl	b91dc <spark_process>
        while (_while() && !_condition()) {
   b4f50:	e7ef      	b.n	b4f32 <_Z22disconnectFromParticlev+0xa2>
   b4f52:	480f      	ldr	r0, [pc, #60]	; (b4f90 <_Z22disconnectFromParticlev+0x100>)
   b4f54:	f005 ff50 	bl	badf8 <_ZN5spark12NetworkClass5isOffEv>
  Particle.process();
   b4f58:	f7ff f988 	bl	b426c <_ZN10CloudClass7processEv>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b4f5c:	480c      	ldr	r0, [pc, #48]	; (b4f90 <_Z22disconnectFromParticlev+0x100>)
   b4f5e:	f005 ff47 	bl	badf0 <_ZN5spark12NetworkClass4isOnEv>
   b4f62:	b120      	cbz	r0, b4f6e <_Z22disconnectFromParticlev+0xde>
    Log.info("Failed to turn off the Cellular modem");
   b4f64:	490b      	ldr	r1, [pc, #44]	; (b4f94 <_Z22disconnectFromParticlev+0x104>)
   b4f66:	4807      	ldr	r0, [pc, #28]	; (b4f84 <_Z22disconnectFromParticlev+0xf4>)
   b4f68:	f7ff f98c 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b4f6c:	e7c2      	b.n	b4ef4 <_Z22disconnectFromParticlev+0x64>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b4f6e:	f006 fdda 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b4f72:	4909      	ldr	r1, [pc, #36]	; (b4f98 <_Z22disconnectFromParticlev+0x108>)
   b4f74:	1b82      	subs	r2, r0, r6
   b4f76:	4803      	ldr	r0, [pc, #12]	; (b4f84 <_Z22disconnectFromParticlev+0xf4>)
   b4f78:	f7ff f984 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b4f7c:	2401      	movs	r4, #1
   b4f7e:	e7b9      	b.n	b4ef4 <_Z22disconnectFromParticlev+0x64>
   b4f80:	000be4a2 	.word	0x000be4a2
   b4f84:	2003e654 	.word	0x2003e654
   b4f88:	000be4cb 	.word	0x000be4cb
   b4f8c:	000be4ee 	.word	0x000be4ee
   b4f90:	2003e610 	.word	0x2003e610
   b4f94:	000be517 	.word	0x000be517
   b4f98:	000be53d 	.word	0x000be53d

000b4f9c <setup>:
void setup() {
   b4f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4fa0:	b08d      	sub	sp, #52	; 0x34
        const system_tick_t start = millis();
   b4fa2:	f7ff f95f 	bl	b4264 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   b4fa6:	f242 7510 	movw	r5, #10000	; 0x2710
        const system_tick_t start = millis();
   b4faa:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4fac:	f7ff f95a 	bl	b4264 <_ZN11SystemClass6millisEv>
   b4fb0:	1b00      	subs	r0, r0, r4
   b4fb2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4fb6:	42a8      	cmp	r0, r5
   b4fb8:	f171 0300 	sbcs.w	r3, r1, #0
   b4fbc:	d207      	bcs.n	b4fce <setup+0x32>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4fbe:	f006 fe99 	bl	bbcf4 <_Z16_fetch_usbserialv>
   b4fc2:	f006 fe8c 	bl	bbcde <_ZN9USBSerial11isConnectedEv>
   b4fc6:	b910      	cbnz	r0, b4fce <setup+0x32>
            spark_process();
   b4fc8:	f004 f908 	bl	b91dc <spark_process>
        while (_while() && !_condition()) {
   b4fcc:	e7ee      	b.n	b4fac <setup+0x10>
   b4fce:	f006 fe91 	bl	bbcf4 <_Z16_fetch_usbserialv>
   b4fd2:	f006 fe84 	bl	bbcde <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b4fd6:	f001 f9bf 	bl	b6358 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4fda:	f001 f9f7 	bl	b63cc <_Z18initializePowerCfgv>
	sysStatus.setup();								// Initialize persistent storage
   b4fde:	f000 fe91 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b4fe2:	6803      	ldr	r3, [r0, #0]
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	4798      	blx	r3
	current.setup();
   b4fe8:	f000 fefe 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b4fec:	6803      	ldr	r3, [r0, #0]
   b4fee:	681b      	ldr	r3, [r3, #0]
   b4ff0:	4798      	blx	r3
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4ff2:	4872      	ldr	r0, [pc, #456]	; (b51bc <setup+0x220>)
   b4ff4:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// The carrier board has D8 connected to FOUT for wake interrupts
   b4ff6:	2101      	movs	r1, #1
   b4ff8:	8143      	strh	r3, [r0, #10]
   b4ffa:	f002 f925 	bl	b7248 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b4ffe:	217c      	movs	r1, #124	; 0x7c
   b5000:	486e      	ldr	r0, [pc, #440]	; (b51bc <setup+0x220>)
   b5002:	f001 fd23 	bl	b6a4c <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5006:	4b6e      	ldr	r3, [pc, #440]	; (b51c0 <setup+0x224>)
   b5008:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b500a:	4b6e      	ldr	r3, [pc, #440]	; (b51c4 <setup+0x228>)
   b500c:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b500e:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b5010:	4b6d      	ldr	r3, [pc, #436]	; (b51c8 <setup+0x22c>)
   b5012:	930a      	str	r3, [sp, #40]	; 0x28
   b5014:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5018:	2300      	movs	r3, #0
   b501a:	a804      	add	r0, sp, #16
   b501c:	9400      	str	r4, [sp, #0]
   b501e:	f7ff fd9b 	bl	b4b58 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5022:	4620      	mov	r0, r4
   b5024:	f7ff f8d4 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b5028:	f000 f912 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b502c:	2100      	movs	r1, #0
   b502e:	f000 f921 	bl	b5274 <_ZN14LoRA_Functions5setupEb>
   b5032:	2800      	cmp	r0, #0
   b5034:	d13f      	bne.n	b50b6 <setup+0x11a>
		sysStatus.set_alertCodeNode(3);										// Initialization failure
   b5036:	f000 fe65 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b503a:	2103      	movs	r1, #3
   b503c:	f000 ffc7 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b5040:	f000 fe60 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5044:	4605      	mov	r5, r0
   b5046:	f006 fd6e 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b504a:	4602      	mov	r2, r0
   b504c:	17c3      	asrs	r3, r0, #31
   b504e:	4628      	mov	r0, r5
   b5050:	f001 f8e8 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", sysStatus.get_alertCodeNode());
   b5054:	f000 fe56 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5058:	f000 ff71 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b505c:	495b      	ldr	r1, [pc, #364]	; (b51cc <setup+0x230>)
   b505e:	4602      	mov	r2, r0
   b5060:	485b      	ldr	r0, [pc, #364]	; (b51d0 <setup+0x234>)
   b5062:	f7ff f90f 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b5066:	f001 fb93 	bl	b6790 <_Z16takeMeasurementsv>
	if (!digitalRead(BUTTON_PIN)) {
   b506a:	4b5a      	ldr	r3, [pc, #360]	; (b51d4 <setup+0x238>)
   b506c:	4f5a      	ldr	r7, [pc, #360]	; (b51d8 <setup+0x23c>)
   b506e:	f8b3 8000 	ldrh.w	r8, [r3]
   b5072:	4640      	mov	r0, r8
   b5074:	f006 ff80 	bl	bbf78 <digitalRead>
   b5078:	4605      	mov	r5, r0
   b507a:	2800      	cmp	r0, #0
   b507c:	d159      	bne.n	b5132 <setup+0x196>
		Log.info("User button pressed at startup - attempt to connect");
   b507e:	4957      	ldr	r1, [pc, #348]	; (b51dc <setup+0x240>)
   b5080:	4853      	ldr	r0, [pc, #332]	; (b51d0 <setup+0x234>)
   b5082:	f8df 9184 	ldr.w	r9, [pc, #388]	; b5208 <setup+0x26c>
   b5086:	f7ff f8fd 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		state = LoRA_TRANSMISSION_STATE;
   b508a:	2304      	movs	r3, #4
   b508c:	703b      	strb	r3, [r7, #0]
        spark_cloud_flag_connect();
   b508e:	f004 f8ad 	bl	b91ec <spark_cloud_flag_connect>
        const system_tick_t start = millis();
   b5092:	f7ff f8e7 	bl	b4264 <_ZN11SystemClass6millisEv>
   b5096:	4606      	mov	r6, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5098:	f7ff f8e4 	bl	b4264 <_ZN11SystemClass6millisEv>
   b509c:	1b80      	subs	r0, r0, r6
   b509e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b50a2:	4581      	cmp	r9, r0
   b50a4:	eb75 0301 	sbcs.w	r3, r5, r1
   b50a8:	d325      	bcc.n	b50f6 <setup+0x15a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50aa:	f004 f8a7 	bl	b91fc <spark_cloud_flag_connected>
   b50ae:	bb10      	cbnz	r0, b50f6 <setup+0x15a>
            spark_process();
   b50b0:	f004 f894 	bl	b91dc <spark_process>
        while (_while() && !_condition()) {
   b50b4:	e7f0      	b.n	b5098 <setup+0xfc>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b50b6:	f000 fe25 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b50ba:	f000 ff36 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b50be:	280a      	cmp	r0, #10
   b50c0:	d914      	bls.n	b50ec <setup+0x150>
		sysStatus.set_alertCodeNode(1); 									// Will initiate a join request
   b50c2:	f000 fe1f 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b50c6:	2101      	movs	r1, #1
   b50c8:	f000 ff81 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", sysStatus.get_nodeNumber(), sysStatus.get_alertCodeNode());
   b50cc:	f000 fe1a 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b50d0:	f000 ff2b 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b50d4:	9003      	str	r0, [sp, #12]
   b50d6:	f000 fe15 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b50da:	f000 ff30 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b50de:	9a03      	ldr	r2, [sp, #12]
   b50e0:	493f      	ldr	r1, [pc, #252]	; (b51e0 <setup+0x244>)
   b50e2:	4603      	mov	r3, r0
   b50e4:	483a      	ldr	r0, [pc, #232]	; (b51d0 <setup+0x234>)
   b50e6:	f7ff f8cd 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b50ea:	e7bc      	b.n	b5066 <setup+0xca>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b50ec:	f006 fcfe 	bl	bbaec <_ZN9TimeClass7isValidEv>
   b50f0:	2800      	cmp	r0, #0
   b50f2:	d0e6      	beq.n	b50c2 <setup+0x126>
   b50f4:	e7b7      	b.n	b5066 <setup+0xca>
   b50f6:	f004 f881 	bl	b91fc <spark_cloud_flag_connected>
		if (!waitFor(Particle.connected,600000)) System.reset();
   b50fa:	b908      	cbnz	r0, b5100 <setup+0x164>
   b50fc:	f006 fb31 	bl	bb762 <_ZN11SystemClass5resetEv>
		Log.info("Connected - staying online");
   b5100:	4938      	ldr	r1, [pc, #224]	; (b51e4 <setup+0x248>)
   b5102:	4833      	ldr	r0, [pc, #204]	; (b51d0 <setup+0x234>)
        while (millis() - start < (120 * 1000)) {							// Stay on-line for two minutes
   b5104:	4e38      	ldr	r6, [pc, #224]	; (b51e8 <setup+0x24c>)
		Log.info("Connected - staying online");
   b5106:	f7ff f8bd 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b510a:	f003 fdd9 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
    bool stopWDT() { return setWDT(0); };
   b510e:	2100      	movs	r1, #0
   b5110:	4605      	mov	r5, r0
   b5112:	482a      	ldr	r0, [pc, #168]	; (b51bc <setup+0x220>)
   b5114:	f001 fc9a 	bl	b6a4c <_ZN6AB18056setWDTEi>
   b5118:	f003 fdd2 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
        while (millis() - start < (120 * 1000)) {							// Stay on-line for two minutes
   b511c:	1b40      	subs	r0, r0, r5
   b511e:	42b0      	cmp	r0, r6
   b5120:	d802      	bhi.n	b5128 <setup+0x18c>
            Particle.process();
   b5122:	f7ff f8a3 	bl	b426c <_ZN10CloudClass7processEv>
        while (millis() - start < (120 * 1000)) {							// Stay on-line for two minutes
   b5126:	e7f7      	b.n	b5118 <setup+0x17c>
		if (!disconnectFromParticle()) System.reset();        				// You won't reach this point if there is an update but we need to reset to take the device back off-line
   b5128:	f7ff feb2 	bl	b4e90 <_Z22disconnectFromParticlev>
   b512c:	b908      	cbnz	r0, b5132 <setup+0x196>
   b512e:	f006 fb18 	bl	bb762 <_ZN11SystemClass5resetEv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b5132:	482e      	ldr	r0, [pc, #184]	; (b51ec <setup+0x250>)
   b5134:	492e      	ldr	r1, [pc, #184]	; (b51f0 <setup+0x254>)
   b5136:	8800      	ldrh	r0, [r0, #0]
   b5138:	2500      	movs	r5, #0
   b513a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b513e:	2201      	movs	r2, #1
   b5140:	9500      	str	r5, [sp, #0]
   b5142:	f004 fc1f 	bl	b9984 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b5146:	492b      	ldr	r1, [pc, #172]	; (b51f4 <setup+0x258>)
   b5148:	9500      	str	r5, [sp, #0]
   b514a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b514e:	462a      	mov	r2, r5
   b5150:	4640      	mov	r0, r8
   b5152:	f004 fc17 	bl	b9984 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (sysStatus.get_openHours()) sensorControl(sysStatus.get_sensorType(),true); // Turn the sensor on during open hours
   b5156:	f000 fdd5 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b515a:	f000 fdf9 	bl	b5d50 <_ZNK13sysStatusData13get_openHoursEv>
   b515e:	b130      	cbz	r0, b516e <setup+0x1d2>
   b5160:	f000 fdd0 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5164:	f000 fef0 	bl	b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5168:	2101      	movs	r1, #1
   b516a:	f001 f919 	bl	b63a0 <_Z13sensorControlib>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b516e:	783b      	ldrb	r3, [r7, #0]
   b5170:	b90b      	cbnz	r3, b5176 <setup+0x1da>
   b5172:	2303      	movs	r3, #3
   b5174:	703b      	strb	r3, [r7, #0]
  	Log.info("Startup complete for the Node with alert code %d and last connect %s", sysStatus.get_alertCodeNode(), Time.format(sysStatus.get_lastConnection(), "%T").c_str());
   b5176:	f000 fdc5 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b517a:	f000 fee0 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b517e:	4605      	mov	r5, r0
   b5180:	f000 fdc0 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5184:	f001 f826 	bl	b61d4 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5188:	460b      	mov	r3, r1
   b518a:	491b      	ldr	r1, [pc, #108]	; (b51f8 <setup+0x25c>)
   b518c:	9100      	str	r1, [sp, #0]
   b518e:	4602      	mov	r2, r0
   b5190:	491a      	ldr	r1, [pc, #104]	; (b51fc <setup+0x260>)
   b5192:	4620      	mov	r0, r4
   b5194:	f006 fc68 	bl	bba68 <_ZN9TimeClass6formatExPKc>
   b5198:	9b08      	ldr	r3, [sp, #32]
   b519a:	4919      	ldr	r1, [pc, #100]	; (b5200 <setup+0x264>)
   b519c:	480c      	ldr	r0, [pc, #48]	; (b51d0 <setup+0x234>)
   b519e:	462a      	mov	r2, r5
   b51a0:	f7ff f870 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b51a4:	4620      	mov	r0, r4
   b51a6:	f006 f9ad 	bl	bb504 <_ZN6StringD1Ev>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b51aa:	4b16      	ldr	r3, [pc, #88]	; (b5204 <setup+0x268>)
   b51ac:	8818      	ldrh	r0, [r3, #0]
   b51ae:	2100      	movs	r1, #0
}
   b51b0:	b00d      	add	sp, #52	; 0x34
   b51b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b51b6:	f006 bec6 	b.w	bbf46 <digitalWrite>
   b51ba:	bf00      	nop
   b51bc:	2003df68 	.word	0x2003df68
   b51c0:	000b40d9 	.word	0x000b40d9
   b51c4:	000b417f 	.word	0x000b417f
   b51c8:	000b416b 	.word	0x000b416b
   b51cc:	000be569 	.word	0x000be569
   b51d0:	2003e654 	.word	0x2003e654
   b51d4:	000becde 	.word	0x000becde
   b51d8:	2003dfcd 	.word	0x2003dfcd
   b51dc:	000be5ee 	.word	0x000be5ee
   b51e0:	000be5a7 	.word	0x000be5a7
   b51e4:	000be622 	.word	0x000be622
   b51e8:	0001d4bf 	.word	0x0001d4bf
   b51ec:	000bece0 	.word	0x000bece0
   b51f0:	000b40f1 	.word	0x000b40f1
   b51f4:	000b40e5 	.word	0x000b40e5
   b51f8:	000be1d1 	.word	0x000be1d1
   b51fc:	2003e6ac 	.word	0x2003e6ac
   b5200:	000be63d 	.word	0x000be63d
   b5204:	000becdc 	.word	0x000becdc
   b5208:	000927bf 	.word	0x000927bf

000b520c <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b520c:	4770      	bx	lr

000b520e <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b520e:	4770      	bx	lr

000b5210 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b5210:	b510      	push	{r4, lr}
}
   b5212:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b5214:	4604      	mov	r4, r0
}
   b5216:	f7fe ff42 	bl	b409e <_ZdlPvj>
   b521a:	4620      	mov	r0, r4
   b521c:	bd10      	pop	{r4, pc}
	...

000b5220 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b5220:	b510      	push	{r4, lr}
   b5222:	4b05      	ldr	r3, [pc, #20]	; (b5238 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b5224:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b5226:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b5228:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b522a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b522e:	f003 ff4f 	bl	b90d0 <led_set_status_active>
}
   b5232:	4620      	mov	r0, r4
   b5234:	bd10      	pop	{r4, pc}
   b5236:	bf00      	nop
   b5238:	000beb44 	.word	0x000beb44

000b523c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b523c:	b510      	push	{r4, lr}
   b523e:	4604      	mov	r4, r0
}
   b5240:	f7ff ffee 	bl	b5220 <_ZN8particle9LEDStatusD1Ev>
   b5244:	4620      	mov	r0, r4
   b5246:	2120      	movs	r1, #32
   b5248:	f7fe ff29 	bl	b409e <_ZdlPvj>
   b524c:	4620      	mov	r0, r4
   b524e:	bd10      	pop	{r4, pc}

000b5250 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b5250:	b510      	push	{r4, lr}
    if (!_instance) {
   b5252:	4c06      	ldr	r4, [pc, #24]	; (b526c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b5254:	6823      	ldr	r3, [r4, #0]
   b5256:	b933      	cbnz	r3, b5266 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b5258:	2004      	movs	r0, #4
   b525a:	f7fe ff1c 	bl	b4096 <_Znwj>
   b525e:	b108      	cbz	r0, b5264 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b5260:	4b03      	ldr	r3, [pc, #12]	; (b5270 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b5262:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b5264:	6020      	str	r0, [r4, #0]
}
   b5266:	6820      	ldr	r0, [r4, #0]
   b5268:	bd10      	pop	{r4, pc}
   b526a:	bf00      	nop
   b526c:	2003dfd0 	.word	0x2003dfd0
   b5270:	000beb58 	.word	0x000beb58

000b5274 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b5274:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b5276:	4836      	ldr	r0, [pc, #216]	; (b5350 <_ZN14LoRA_Functions5setupEb+0xdc>)
bool LoRA_Functions::setup(bool gatewayID) {
   b5278:	b087      	sub	sp, #28
   b527a:	460d      	mov	r5, r1
	if (!manager.init()) {
   b527c:	f002 fe47 	bl	b7f0e <_ZN8RHRouter4initEv>
   b5280:	4604      	mov	r4, r0
   b5282:	b930      	cbnz	r0, b5292 <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b5284:	4933      	ldr	r1, [pc, #204]	; (b5354 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b5286:	4834      	ldr	r0, [pc, #208]	; (b5358 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b5288:	f7fe fffc 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}

	return true;
}
   b528c:	4620      	mov	r0, r4
   b528e:	b007      	add	sp, #28
   b5290:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b5292:	ed9f 0a32 	vldr	s0, [pc, #200]	; b535c <_ZN14LoRA_Functions5setupEb+0xe8>
   b5296:	4832      	ldr	r0, [pc, #200]	; (b5360 <_ZN14LoRA_Functions5setupEb+0xec>)
   b5298:	f003 f932 	bl	b8500 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b529c:	2200      	movs	r2, #0
   b529e:	2117      	movs	r1, #23
   b52a0:	482f      	ldr	r0, [pc, #188]	; (b5360 <_ZN14LoRA_Functions5setupEb+0xec>)
   b52a2:	f003 faa7 	bl	b87f4 <_ZN7RH_RF9510setTxPowerEab>
	Log.info("in LoRA setup - node number %d",sysStatus.get_nodeNumber());
   b52a6:	f000 fd2d 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b52aa:	f000 fe3e 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b52ae:	492d      	ldr	r1, [pc, #180]	; (b5364 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b52b0:	4602      	mov	r2, r0
   b52b2:	4829      	ldr	r0, [pc, #164]	; (b5358 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b52b4:	f7fe ffe6 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
	if (gatewayID == true) {
   b52b8:	b18d      	cbz	r5, b52de <_ZN14LoRA_Functions5setupEb+0x6a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b52ba:	f000 fd23 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b52be:	2100      	movs	r1, #0
   b52c0:	f000 fe73 	bl	b5faa <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b52c4:	a802      	add	r0, sp, #8
   b52c6:	f003 ffa1 	bl	b920c <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b52ca:	9a02      	ldr	r2, [sp, #8]
   b52cc:	4926      	ldr	r1, [pc, #152]	; (b5368 <_ZN14LoRA_Functions5setupEb+0xf4>)
   b52ce:	4822      	ldr	r0, [pc, #136]	; (b5358 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b52d0:	f7fe ffd8 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b52d4:	a802      	add	r0, sp, #8
   b52d6:	f006 f915 	bl	bb504 <_ZN6StringD1Ev>
   b52da:	462c      	mov	r4, r5
   b52dc:	e7d6      	b.n	b528c <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b52de:	f000 fd11 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b52e2:	f000 fe22 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b52e6:	b1f0      	cbz	r0, b5326 <_ZN14LoRA_Functions5setupEb+0xb2>
   b52e8:	f000 fd0c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b52ec:	f000 fe1d 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b52f0:	280a      	cmp	r0, #10
   b52f2:	d818      	bhi.n	b5326 <_ZN14LoRA_Functions5setupEb+0xb2>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b52f4:	f000 fd06 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b52f8:	f000 fe17 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b52fc:	4601      	mov	r1, r0
   b52fe:	481b      	ldr	r0, [pc, #108]	; (b536c <_ZN14LoRA_Functions5setupEb+0xf8>)
   b5300:	f002 f931 	bl	b7566 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5304:	4819      	ldr	r0, [pc, #100]	; (b536c <_ZN14LoRA_Functions5setupEb+0xf8>)
   b5306:	f002 f914 	bl	b7532 <_ZN10RHDatagram11thisAddressEv>
   b530a:	9001      	str	r0, [sp, #4]
   b530c:	a802      	add	r0, sp, #8
   b530e:	f003 ff7d 	bl	b920c <spark_deviceID>
   b5312:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b5316:	4916      	ldr	r1, [pc, #88]	; (b5370 <_ZN14LoRA_Functions5setupEb+0xfc>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5318:	480f      	ldr	r0, [pc, #60]	; (b5358 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b531a:	f7fe ffb3 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b531e:	a802      	add	r0, sp, #8
   b5320:	f006 f8f0 	bl	bb504 <_ZN6StringD1Ev>
   b5324:	e7b2      	b.n	b528c <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b5326:	f000 fced 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b532a:	210b      	movs	r1, #11
   b532c:	f000 fe3d 	bl	b5faa <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b5330:	210b      	movs	r1, #11
   b5332:	480e      	ldr	r0, [pc, #56]	; (b536c <_ZN14LoRA_Functions5setupEb+0xf8>)
   b5334:	f002 f917 	bl	b7566 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5338:	480c      	ldr	r0, [pc, #48]	; (b536c <_ZN14LoRA_Functions5setupEb+0xf8>)
   b533a:	f002 f8fa 	bl	b7532 <_ZN10RHDatagram11thisAddressEv>
   b533e:	9001      	str	r0, [sp, #4]
   b5340:	a802      	add	r0, sp, #8
   b5342:	f003 ff63 	bl	b920c <spark_deviceID>
   b5346:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b534a:	490a      	ldr	r1, [pc, #40]	; (b5374 <_ZN14LoRA_Functions5setupEb+0x100>)
   b534c:	e7e4      	b.n	b5318 <_ZN14LoRA_Functions5setupEb+0xa4>
   b534e:	bf00      	nop
   b5350:	2003e200 	.word	0x2003e200
   b5354:	000be6b4 	.word	0x000be6b4
   b5358:	2003e654 	.word	0x2003e654
   b535c:	4464c000 	.word	0x4464c000
   b5360:	2003e0d0 	.word	0x2003e0d0
   b5364:	000be6c0 	.word	0x000be6c0
   b5368:	000be6df 	.word	0x000be6df
   b536c:	2003e204 	.word	0x2003e204
   b5370:	000be719 	.word	0x000be719
   b5374:	000be750 	.word	0x000be750

000b5378 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b5378:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b537a:	4c06      	ldr	r4, [pc, #24]	; (b5394 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b537c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b537e:	f10d 0203 	add.w	r2, sp, #3
   b5382:	a901      	add	r1, sp, #4
   b5384:	4620      	mov	r0, r4
   b5386:	f003 f837 	bl	b83f8 <_ZN7RH_RF954recvEPhS0_>
   b538a:	2800      	cmp	r0, #0
   b538c:	d1f7      	bne.n	b537e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b538e:	b040      	add	sp, #256	; 0x100
   b5390:	bd10      	pop	{r4, pc}
   b5392:	bf00      	nop
   b5394:	2003e0d0 	.word	0x2003e0d0

000b5398 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b5398:	4801      	ldr	r0, [pc, #4]	; (b53a0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b539a:	f003 b81a 	b.w	b83d2 <_ZN7RH_RF955sleepEv>
   b539e:	bf00      	nop
   b53a0:	2003e0d0 	.word	0x2003e0d0

000b53a4 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b53a4:	4b13      	ldr	r3, [pc, #76]	; (b53f4 <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b53a6:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b53a8:	881c      	ldrh	r4, [r3, #0]
   b53aa:	2100      	movs	r1, #0
   b53ac:	4620      	mov	r0, r4
   b53ae:	f006 fdca 	bl	bbf46 <digitalWrite>
	delay(10);
   b53b2:	200a      	movs	r0, #10
   b53b4:	f004 f82e 	bl	b9414 <delay>
	digitalWrite(RFM95_RST,HIGH);
   b53b8:	2101      	movs	r1, #1
   b53ba:	4620      	mov	r0, r4
   b53bc:	f006 fdc3 	bl	bbf46 <digitalWrite>
	delay(10);
   b53c0:	200a      	movs	r0, #10
   b53c2:	f004 f827 	bl	b9414 <delay>

	if (!manager.init()) {
   b53c6:	480c      	ldr	r0, [pc, #48]	; (b53f8 <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b53c8:	f002 fda1 	bl	b7f0e <_ZN8RHRouter4initEv>
   b53cc:	4604      	mov	r4, r0
   b53ce:	b928      	cbnz	r0, b53dc <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b53d0:	490a      	ldr	r1, [pc, #40]	; (b53fc <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b53d2:	480b      	ldr	r0, [pc, #44]	; (b5400 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b53d4:	f7fe ff56 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b53d8:	4620      	mov	r0, r4
   b53da:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b53dc:	ed9f 0a09 	vldr	s0, [pc, #36]	; b5404 <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b53e0:	4809      	ldr	r0, [pc, #36]	; (b5408 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b53e2:	f003 f88d 	bl	b8500 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b53e6:	4808      	ldr	r0, [pc, #32]	; (b5408 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b53e8:	2200      	movs	r2, #0
   b53ea:	2117      	movs	r1, #23
   b53ec:	f003 fa02 	bl	b87f4 <_ZN7RH_RF9510setTxPowerEab>
return true;
   b53f0:	e7f2      	b.n	b53d8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b53f2:	bf00      	nop
   b53f4:	000bece6 	.word	0x000bece6
   b53f8:	2003e200 	.word	0x2003e200
   b53fc:	000be6b4 	.word	0x000be6b4
   b5400:	2003e654 	.word	0x2003e654
   b5404:	4464c000 	.word	0x4464c000
   b5408:	2003e0d0 	.word	0x2003e0d0

000b540c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b540c:	b570      	push	{r4, r5, r6, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b540e:	2200      	movs	r2, #0
   b5410:	b090      	sub	sp, #64	; 0x40
   b5412:	2114      	movs	r1, #20
   b5414:	2002      	movs	r0, #2
   b5416:	f003 fea7 	bl	b9168 <led_pattern_period>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	// contents of response for 1-7 handled in common function above
	byte alertSetByGateway = buf[8];
   b541a:	4d5a      	ldr	r5, [pc, #360]	; (b5584 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x178>)
   b541c:	221e      	movs	r2, #30
   b541e:	2101      	movs	r1, #1
   b5420:	e9cd 2100 	strd	r2, r1, [sp]
   b5424:	4603      	mov	r3, r0
   b5426:	2202      	movs	r2, #2
   b5428:	21ff      	movs	r1, #255	; 0xff
   b542a:	a808      	add	r0, sp, #32
   b542c:	f004 fd2a 	bl	b9e84 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b5430:	7a2c      	ldrb	r4, [r5, #8]
	if (alertSetByGateway == 1) {								// Gateway did not recognize our node number, need to re-join
   b5432:	2c01      	cmp	r4, #1
   b5434:	d17b      	bne.n	b552e <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x122>
		sysStatus.set_nodeNumber(11);
   b5436:	f000 fc65 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b543a:	210b      	movs	r1, #11
   b543c:	f000 fdb5 	bl	b5faa <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b5440:	210b      	movs	r1, #11
   b5442:	4851      	ldr	r0, [pc, #324]	; (b5588 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x17c>)
   b5444:	f002 f88f 	bl	b7566 <_ZN10RHDatagram14setThisAddressEh>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
   b5448:	f000 fc5c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b544c:	4621      	mov	r1, r4
   b544e:	f000 fdbe 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());	
   b5452:	f000 fc57 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5456:	4606      	mov	r6, r0
   b5458:	f006 fb65 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b545c:	4602      	mov	r2, r0
   b545e:	17c3      	asrs	r3, r0, #31
   b5460:	4630      	mov	r0, r6
   b5462:	f000 fedf 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5466:	4848      	ldr	r0, [pc, #288]	; (b5588 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x17c>)
   b5468:	f002 f863 	bl	b7532 <_ZN10RHDatagram11thisAddressEv>
   b546c:	9002      	str	r0, [sp, #8]
   b546e:	a804      	add	r0, sp, #16
   b5470:	f003 fecc 	bl	b920c <spark_deviceID>
   b5474:	4845      	ldr	r0, [pc, #276]	; (b558c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x180>)
   b5476:	9b04      	ldr	r3, [sp, #16]
   b5478:	9a02      	ldr	r2, [sp, #8]
   b547a:	4945      	ldr	r1, [pc, #276]	; (b5590 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x184>)
   b547c:	f7fe ff02 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b5480:	a804      	add	r0, sp, #16
   b5482:	f006 f83f 	bl	bb504 <_ZN6StringD1Ev>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
		sysStatus.set_alertTimestampNode(Time.now());			
	}
	else sysStatus.set_alertCodeNode(0);

	if (buf[10] == 0) {								// Open Hours Processing
   b5486:	7aae      	ldrb	r6, [r5, #10]
   b5488:	2e00      	cmp	r6, #0
   b548a:	d174      	bne.n	b5576 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x16a>
		sysStatus.set_openHours(false);				// Open hours or not - impacts whether we power down the sensor for sleep
   b548c:	f000 fc3a 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5490:	4631      	mov	r1, r6
   b5492:	f000 fc6f 	bl	b5d74 <_ZN13sysStatusData13set_openHoursEb>
		current.resetEverything();					// Since we are not open anymore and will stop reporting - might as well zero counts
   b5496:	f000 fca7 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b549a:	f000 ff10 	bl	b62be <_ZN17currentStatusData15resetEverythingEv>
		sysStatus.set_alertCodeNode(6);				// This will reset the counts and go to sleep
   b549e:	f000 fc31 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b54a2:	2106      	movs	r1, #6
   b54a4:	f000 fd93 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Park is closed - reset everything");
   b54a8:	493a      	ldr	r1, [pc, #232]	; (b5594 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x188>)
   b54aa:	4838      	ldr	r0, [pc, #224]	; (b558c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x180>)
   b54ac:	f7fe feea 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
	}
	else sysStatus.set_openHours(true);

	Log.info("Data report acknowledged %s alert for message %d park is %s and alert code is %d", (alertSetByGateway > 0) ? "with":"without", buf[11], (buf[10] ==1) ? "open":"closed", sysStatus.get_alertCodeNode());
   b54b0:	4b39      	ldr	r3, [pc, #228]	; (b5598 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x18c>)
   b54b2:	4a3a      	ldr	r2, [pc, #232]	; (b559c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x190>)
   b54b4:	493a      	ldr	r1, [pc, #232]	; (b55a0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x194>)
   b54b6:	7aa8      	ldrb	r0, [r5, #10]
   b54b8:	2c00      	cmp	r4, #0
   b54ba:	bf08      	it	eq
   b54bc:	461a      	moveq	r2, r3
   b54be:	4c39      	ldr	r4, [pc, #228]	; (b55a4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x198>)
   b54c0:	7aeb      	ldrb	r3, [r5, #11]
   b54c2:	9203      	str	r2, [sp, #12]
   b54c4:	2801      	cmp	r0, #1
   b54c6:	bf18      	it	ne
   b54c8:	460c      	movne	r4, r1
   b54ca:	9302      	str	r3, [sp, #8]
   b54cc:	f000 fc1a 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b54d0:	f000 fd35 	bl	b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b54d4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b54d8:	e9cd 4000 	strd	r4, r0, [sp]
   b54dc:	4932      	ldr	r1, [pc, #200]	; (b55a8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x19c>)
   b54de:	482b      	ldr	r0, [pc, #172]	; (b558c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x180>)
   b54e0:	f7fe fed0 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    led_set_status_active(&d_, active, nullptr);
   b54e4:	2200      	movs	r2, #0
   b54e6:	2101      	movs	r1, #1
   b54e8:	a809      	add	r0, sp, #36	; 0x24
   b54ea:	f003 fdf1 	bl	b90d0 <led_set_status_active>
	
	blinkBlue.setActive(true);
	unsigned long strength = (unsigned long)(map(current.get_RSSI(),-10,-140,3000,0));
   b54ee:	2400      	movs	r4, #0
   b54f0:	f000 fc7a 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b54f4:	f000 fcdd 	bl	b5eb2 <_ZNK17currentStatusData8get_RSSIEv>
   b54f8:	f06f 028b 	mvn.w	r2, #139	; 0x8b
   b54fc:	f06f 0109 	mvn.w	r1, #9
   b5500:	9400      	str	r4, [sp, #0]
   b5502:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b5506:	f003 ff79 	bl	b93fc <_Z3mapiiiii>
	strength = constrain(strength,0UL,3000UL);
    delay(strength);
   b550a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b550e:	4298      	cmp	r0, r3
   b5510:	bf28      	it	cs
   b5512:	4618      	movcs	r0, r3
   b5514:	f003 ff7e 	bl	b9414 <delay>
   b5518:	4622      	mov	r2, r4
   b551a:	4621      	mov	r1, r4
   b551c:	a809      	add	r0, sp, #36	; 0x24
   b551e:	f003 fdd7 	bl	b90d0 <led_set_status_active>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b5522:	a808      	add	r0, sp, #32
   b5524:	f7ff fe7c 	bl	b5220 <_ZN8particle9LEDStatusD1Ev>
    blinkBlue.setActive(false);

	return true;
}
   b5528:	2001      	movs	r0, #1
   b552a:	b010      	add	sp, #64	; 0x40
   b552c:	bd70      	pop	{r4, r5, r6, pc}
	else if (alertSetByGateway == 7) {
   b552e:	2c07      	cmp	r4, #7
   b5530:	d105      	bne.n	b553e <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x132>
		sysStatus.set_sensorType(buf[9]);
   b5532:	f000 fbe7 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5536:	7a69      	ldrb	r1, [r5, #9]
   b5538:	f000 fd4f 	bl	b5fda <_ZN13sysStatusData14set_sensorTypeEh>
   b553c:	e7a3      	b.n	b5486 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
	else if (alertSetByGateway > 0) {							// the Gateway set an alert
   b553e:	b1a4      	cbz	r4, b556a <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x15e>
		Log.info("The gateway set an alert %d", alertSetByGateway);
   b5540:	4622      	mov	r2, r4
   b5542:	491a      	ldr	r1, [pc, #104]	; (b55ac <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x1a0>)
   b5544:	4811      	ldr	r0, [pc, #68]	; (b558c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x180>)
   b5546:	f7fe fe9d 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
   b554a:	f000 fbdb 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b554e:	4621      	mov	r1, r4
   b5550:	f000 fd3d 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());			
   b5554:	f000 fbd6 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5558:	4606      	mov	r6, r0
   b555a:	f006 fae4 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b555e:	4602      	mov	r2, r0
   b5560:	17c3      	asrs	r3, r0, #31
   b5562:	4630      	mov	r0, r6
   b5564:	f000 fe5e 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
   b5568:	e78d      	b.n	b5486 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
	else sysStatus.set_alertCodeNode(0);
   b556a:	f000 fbcb 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b556e:	4621      	mov	r1, r4
   b5570:	f000 fd2d 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
   b5574:	e787      	b.n	b5486 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
	else sysStatus.set_openHours(true);
   b5576:	f000 fbc5 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b557a:	2101      	movs	r1, #1
   b557c:	f000 fbfa 	bl	b5d74 <_ZN13sysStatusData13set_openHoursEb>
   b5580:	e796      	b.n	b54b0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xa4>
   b5582:	bf00      	nop
   b5584:	2003dfd4 	.word	0x2003dfd4
   b5588:	2003e204 	.word	0x2003e204
   b558c:	2003e654 	.word	0x2003e654
   b5590:	000be750 	.word	0x000be750
   b5594:	000be7cc 	.word	0x000be7cc
   b5598:	000be79c 	.word	0x000be79c
   b559c:	000be797 	.word	0x000be797
   b55a0:	000be7a9 	.word	0x000be7a9
   b55a4:	000be7a4 	.word	0x000be7a4
   b55a8:	000be7ee 	.word	0x000be7ee
   b55ac:	000be7b0 	.word	0x000be7b0

000b55b0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b55b0:	b510      	push	{r4, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b55b2:	2200      	movs	r2, #0
   b55b4:	b08c      	sub	sp, #48	; 0x30
   b55b6:	2114      	movs	r1, #20
   b55b8:	2002      	movs	r0, #2
   b55ba:	f003 fdd5 	bl	b9168 <led_pattern_period>
   b55be:	221e      	movs	r2, #30
   b55c0:	2101      	movs	r1, #1
   b55c2:	4603      	mov	r3, r0
   b55c4:	e9cd 2100 	strd	r2, r1, [sp]
   b55c8:	a804      	add	r0, sp, #16
   b55ca:	4928      	ldr	r1, [pc, #160]	; (b566c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xbc>)
   b55cc:	4c28      	ldr	r4, [pc, #160]	; (b5670 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc0>)
   b55ce:	2202      	movs	r2, #2
   b55d0:	f004 fc58 	bl	b9e84 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	if (sysStatus.get_nodeNumber() > 10) sysStatus.set_nodeNumber(buf[9]);
   b55d4:	f000 fb96 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b55d8:	f000 fca7 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b55dc:	280a      	cmp	r0, #10
   b55de:	d904      	bls.n	b55ea <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x3a>
   b55e0:	f000 fb90 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b55e4:	7a61      	ldrb	r1, [r4, #9]
   b55e6:	f000 fce0 	bl	b5faa <_ZN13sysStatusData14set_nodeNumberEh>
	sysStatus.set_sensorType(buf[10]);
   b55ea:	f000 fb8b 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b55ee:	7aa1      	ldrb	r1, [r4, #10]
   b55f0:	f000 fcf3 	bl	b5fda <_ZN13sysStatusData14set_sensorTypeEh>
	Log.info("Node %d Join request acknowledged and sensor set to %d", sysStatus.get_nodeNumber(), sysStatus.get_sensorType());
   b55f4:	f000 fb86 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b55f8:	f000 fc97 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b55fc:	9003      	str	r0, [sp, #12]
   b55fe:	f000 fb81 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5602:	f000 fca1 	bl	b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5606:	9a03      	ldr	r2, [sp, #12]
   b5608:	491a      	ldr	r1, [pc, #104]	; (b5674 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc4>)
   b560a:	4603      	mov	r3, r0
   b560c:	481a      	ldr	r0, [pc, #104]	; (b5678 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc8>)
   b560e:	f7fe fe39 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());
   b5612:	f000 fb77 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5616:	f000 fc88 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b561a:	4601      	mov	r1, r0
   b561c:	4817      	ldr	r0, [pc, #92]	; (b567c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xcc>)
   b561e:	f001 ffa2 	bl	b7566 <_ZN10RHDatagram14setThisAddressEh>
    led_set_status_active(&d_, active, nullptr);
   b5622:	2200      	movs	r2, #0
   b5624:	2101      	movs	r1, #1
   b5626:	a805      	add	r0, sp, #20
   b5628:	f003 fd52 	bl	b90d0 <led_set_status_active>

    blinkOrange.setActive(true);
	unsigned long strength = (unsigned long)(map(current.get_RSSI(),-10,-140,3000,0));
   b562c:	2400      	movs	r4, #0
   b562e:	f000 fbdb 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5632:	f000 fc3e 	bl	b5eb2 <_ZNK17currentStatusData8get_RSSIEv>
   b5636:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b563a:	f06f 028b 	mvn.w	r2, #139	; 0x8b
   b563e:	f06f 0109 	mvn.w	r1, #9
   b5642:	9400      	str	r4, [sp, #0]
   b5644:	f003 feda 	bl	b93fc <_Z3mapiiiii>
	strength = constrain(strength,0UL,2000UL);
    delay(strength);
   b5648:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b564c:	bf28      	it	cs
   b564e:	f44f 60fa 	movcs.w	r0, #2000	; 0x7d0
   b5652:	f003 fedf 	bl	b9414 <delay>
   b5656:	4622      	mov	r2, r4
   b5658:	4621      	mov	r1, r4
   b565a:	a805      	add	r0, sp, #20
   b565c:	f003 fd38 	bl	b90d0 <led_set_status_active>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b5660:	a804      	add	r0, sp, #16
   b5662:	f7ff fddd 	bl	b5220 <_ZN8particle9LEDStatusD1Ev>
    blinkOrange.setActive(false);

	return true;
}
   b5666:	2001      	movs	r0, #1
   b5668:	b00c      	add	sp, #48	; 0x30
   b566a:	bd10      	pop	{r4, pc}
   b566c:	00ff6000 	.word	0x00ff6000
   b5670:	2003dfd4 	.word	0x2003dfd4
   b5674:	000be83f 	.word	0x000be83f
   b5678:	2003e654 	.word	0x2003e654
   b567c:	2003e204 	.word	0x2003e204

000b5680 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b5680:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5682:	b08d      	sub	sp, #52	; 0x34
	uint8_t len = sizeof(buf);
   b5684:	23f9      	movs	r3, #249	; 0xf9
   b5686:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b568a:	f10d 031f 	add.w	r3, sp, #31
   b568e:	9303      	str	r3, [sp, #12]
   b5690:	f10d 031e 	add.w	r3, sp, #30
   b5694:	4d45      	ldr	r5, [pc, #276]	; (b57ac <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x12c>)
   b5696:	9302      	str	r3, [sp, #8]
   b5698:	f10d 031d 	add.w	r3, sp, #29
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	ab07      	add	r3, sp, #28
   b56a0:	9300      	str	r3, [sp, #0]
   b56a2:	4843      	ldr	r0, [pc, #268]	; (b57b0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x130>)
   b56a4:	f10d 031b 	add.w	r3, sp, #27
   b56a8:	f10d 021a 	add.w	r2, sp, #26
   b56ac:	4629      	mov	r1, r5
   b56ae:	f002 fa27 	bl	b7b00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b56b2:	2800      	cmp	r0, #0
   b56b4:	d06e      	beq.n	b5794 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>
		buf[len] = 0;
   b56b6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b56ba:	2400      	movs	r4, #0
   b56bc:	54ec      	strb	r4, [r5, r3]
		if ((buf[0] << 8 | buf[1]) != sysStatus.get_magicNumber()) {
   b56be:	882e      	ldrh	r6, [r5, #0]
   b56c0:	f000 fb20 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b56c4:	f000 fcb9 	bl	b603a <_ZNK13sysStatusData15get_magicNumberEv>
   b56c8:	ba76      	rev16	r6, r6
   b56ca:	b2b6      	uxth	r6, r6
   b56cc:	42b0      	cmp	r0, r6
   b56ce:	d005      	beq.n	b56dc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x5c>
			Log.info("Magic Number mismatch - ignoring message");
   b56d0:	4938      	ldr	r1, [pc, #224]	; (b57b4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
		else {Log.info("Invaled LoRA message flag"); return false;}
   b56d2:	4839      	ldr	r0, [pc, #228]	; (b57b8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b56d4:	f7fe fdd6 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b56d8:	4620      	mov	r0, r4
   b56da:	e05b      	b.n	b5794 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>
		lora_state = (LoRA_State)messageFlag;
   b56dc:	4e37      	ldr	r6, [pc, #220]	; (b57bc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x13c>)
   b56de:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b56e2:	7033      	strb	r3, [r6, #0]
		current.set_RSSI(driver.lastRssi());
   b56e4:	f000 fb80 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b56e8:	4607      	mov	r7, r0
   b56ea:	4835      	ldr	r0, [pc, #212]	; (b57c0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x140>)
   b56ec:	f001 ffb9 	bl	b7662 <_ZN15RHGenericDriver8lastRssiEv>
   b56f0:	4601      	mov	r1, r0
   b56f2:	4638      	mov	r0, r7
   b56f4:	f000 fbef 	bl	b5ed6 <_ZN17currentStatusData8set_RSSIEs>
		Log.info("Received from node %d with rssi=%d - a %s message with %d hops", from, current.get_RSSI(), loraStateNames[lora_state], hops);
   b56f8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b56fc:	9205      	str	r2, [sp, #20]
   b56fe:	f000 fb73 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5702:	f000 fbd6 	bl	b5eb2 <_ZNK17currentStatusData8get_RSSIEv>
   b5706:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b570a:	9101      	str	r1, [sp, #4]
   b570c:	4603      	mov	r3, r0
   b570e:	492d      	ldr	r1, [pc, #180]	; (b57c4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x144>)
   b5710:	7830      	ldrb	r0, [r6, #0]
   b5712:	9a05      	ldr	r2, [sp, #20]
   b5714:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b5718:	9100      	str	r1, [sp, #0]
   b571a:	4827      	ldr	r0, [pc, #156]	; (b57b8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b571c:	492a      	ldr	r1, [pc, #168]	; (b57c8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x148>)
   b571e:	f7fe fdb1 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[2] << 24) | (buf[3] << 16) | (buf[4] << 8) | buf[5]));  // Set time based on response from gateway
   b5722:	f8d5 0002 	ldr.w	r0, [r5, #2]
   b5726:	ba00      	rev	r0, r0
   b5728:	17c1      	asrs	r1, r0, #31
   b572a:	f006 f8e4 	bl	bb8f6 <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[6] << 8 | buf[7]));			// Frequency of reporting set by Gateway
   b572e:	f000 fae9 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5732:	88e9      	ldrh	r1, [r5, #6]
   b5734:	ba49      	rev16	r1, r1
   b5736:	b289      	uxth	r1, r1
   b5738:	f000 fd23 	bl	b6182 <_ZN13sysStatusData20set_frequencyMinutesEt>
		sysStatus.set_alertCodeNode(buf[8]);
   b573c:	f000 fae2 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5740:	7a29      	ldrb	r1, [r5, #8]
   b5742:	f000 fc44 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b5746:	f000 fadd 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b574a:	4605      	mov	r5, r0
   b574c:	f006 f9eb 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b5750:	4602      	mov	r2, r0
   b5752:	17c3      	asrs	r3, r0, #31
   b5754:	4628      	mov	r0, r5
   b5756:	f000 fd65 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b575a:	f006 f9e4 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b575e:	17c3      	asrs	r3, r0, #31
   b5760:	4602      	mov	r2, r0
   b5762:	a808      	add	r0, sp, #32
   b5764:	f006 f8da 	bl	bb91c <_ZN9TimeClass7timeStrEx>
   b5768:	9a08      	ldr	r2, [sp, #32]
   b576a:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b576c:	f000 faca 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5770:	f000 fc68 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5774:	9a05      	ldr	r2, [sp, #20]
   b5776:	4915      	ldr	r1, [pc, #84]	; (b57cc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x14c>)
   b5778:	4603      	mov	r3, r0
   b577a:	480f      	ldr	r0, [pc, #60]	; (b57b8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b577c:	f7fe fd82 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b5780:	a808      	add	r0, sp, #32
   b5782:	f005 febf 	bl	bb504 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5786:	7833      	ldrb	r3, [r6, #0]
   b5788:	2b04      	cmp	r3, #4
   b578a:	d105      	bne.n	b5798 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>
   b578c:	f7ff fd60 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b5790:	f7ff fe3c 	bl	b540c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
}
   b5794:	b00d      	add	sp, #52	; 0x34
   b5796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b5798:	2b02      	cmp	r3, #2
   b579a:	d104      	bne.n	b57a6 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x126>
   b579c:	f7ff fd58 	bl	b5250 <_ZN14LoRA_Functions8instanceEv>
   b57a0:	f7ff ff06 	bl	b55b0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b57a4:	e7f6      	b.n	b5794 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>
		else {Log.info("Invaled LoRA message flag"); return false;}
   b57a6:	490a      	ldr	r1, [pc, #40]	; (b57d0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x150>)
   b57a8:	e793      	b.n	b56d2 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x52>
   b57aa:	bf00      	nop
   b57ac:	2003dfd4 	.word	0x2003dfd4
   b57b0:	2003e200 	.word	0x2003e200
   b57b4:	000be876 	.word	0x000be876
   b57b8:	2003e654 	.word	0x2003e654
   b57bc:	2003dfcf 	.word	0x2003dfcf
   b57c0:	2003e0d0 	.word	0x2003e0d0
   b57c4:	2003de50 	.word	0x2003de50
   b57c8:	000be89f 	.word	0x000be89f
   b57cc:	000be8de 	.word	0x000be8de
   b57d0:	000be911 	.word	0x000be911

000b57d4 <_ZN14LoRA_Functions14stringCheckSumE6String>:


int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b57d4:	b570      	push	{r4, r5, r6, lr}
    int result = 0;
    for(unsigned int i = 0; i < str.length(); i++){
   b57d6:	2500      	movs	r5, #0
int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b57d8:	460e      	mov	r6, r1
    int result = 0;
   b57da:	462c      	mov	r4, r5
    for(unsigned int i = 0; i < str.length(); i++){
   b57dc:	68b3      	ldr	r3, [r6, #8]
   b57de:	429d      	cmp	r5, r3
   b57e0:	d218      	bcs.n	b5814 <_ZN14LoRA_Functions14stringCheckSumE6String+0x40>
      int asciiCode = (int)str[i];
   b57e2:	4629      	mov	r1, r5
   b57e4:	4630      	mov	r0, r6
   b57e6:	f005 ff2f 	bl	bb648 <_ZN6StringixEj>
   b57ea:	7803      	ldrb	r3, [r0, #0]

      if (asciiCode >=48 && asciiCode <58) {              // 0-9
   b57ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b57f0:	2a09      	cmp	r2, #9
   b57f2:	d802      	bhi.n	b57fa <_ZN14LoRA_Functions14stringCheckSumE6String+0x26>
        result += asciiCode - 48;
   b57f4:	4414      	add	r4, r2
    for(unsigned int i = 0; i < str.length(); i++){
   b57f6:	3501      	adds	r5, #1
   b57f8:	e7f0      	b.n	b57dc <_ZN14LoRA_Functions14stringCheckSumE6String+0x8>
      } 
      else if (asciiCode >=65 && asciiCode < 71) {        // A-F
   b57fa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   b57fe:	2a05      	cmp	r2, #5
   b5800:	d802      	bhi.n	b5808 <_ZN14LoRA_Functions14stringCheckSumE6String+0x34>
        result += 10 + asciiCode -65;
   b5802:	3b37      	subs	r3, #55	; 0x37
      }
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
        result += 10 + asciiCode -97;
   b5804:	441c      	add	r4, r3
   b5806:	e7f6      	b.n	b57f6 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
   b5808:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   b580c:	2a05      	cmp	r2, #5
   b580e:	d8f2      	bhi.n	b57f6 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
        result += 10 + asciiCode -97;
   b5810:	3b57      	subs	r3, #87	; 0x57
   b5812:	e7f7      	b.n	b5804 <_ZN14LoRA_Functions14stringCheckSumE6String+0x30>
      }
    }
    return result;
}
   b5814:	4620      	mov	r0, r4
   b5816:	bd70      	pop	{r4, r5, r6, pc}

000b5818 <_ZN14LoRA_Functions21composeDataReportNodeEv>:
bool LoRA_Functions::composeDataReportNode() {
   b5818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b581c:	b089      	sub	sp, #36	; 0x24
   b581e:	4604      	mov	r4, r0
	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5820:	f000 fae2 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5824:	f000 fba4 	bl	b5f70 <_ZNK17currentStatusData16get_successCountEv>
   b5828:	4606      	mov	r6, r0
   b582a:	f000 fadd 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b582e:	f000 fb9a 	bl	b5f66 <_ZNK17currentStatusData16get_messageCountEv>
   b5832:	4605      	mov	r5, r0
   b5834:	4630      	mov	r0, r6
   b5836:	f007 fe67 	bl	bd508 <__aeabi_i2d>
   b583a:	4606      	mov	r6, r0
   b583c:	4628      	mov	r0, r5
   b583e:	460f      	mov	r7, r1
   b5840:	f007 fe62 	bl	bd508 <__aeabi_i2d>
   b5844:	4602      	mov	r2, r0
   b5846:	460b      	mov	r3, r1
   b5848:	4630      	mov	r0, r6
   b584a:	4639      	mov	r1, r7
   b584c:	f007 fff0 	bl	bd830 <__aeabi_ddiv>
   b5850:	2200      	movs	r2, #0
   b5852:	4b85      	ldr	r3, [pc, #532]	; (b5a68 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x250>)
   b5854:	f007 fec2 	bl	bd5dc <__aeabi_dmul>
   b5858:	f008 f9b8 	bl	bdbcc <__aeabi_d2f>
	digitalWrite(BLUE_LED,HIGH);
   b585c:	4b83      	ldr	r3, [pc, #524]	; (b5a6c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x254>)
   b585e:	881f      	ldrh	r7, [r3, #0]
   b5860:	2101      	movs	r1, #1
	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5862:	4605      	mov	r5, r0
	digitalWrite(BLUE_LED,HIGH);
   b5864:	4638      	mov	r0, r7
   b5866:	f006 fb6e 	bl	bbf46 <digitalWrite>
	if (current.get_messageCount() == 255) {		// This should not happen in a day unless we pick a very small reporting freq
   b586a:	f000 fabd 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b586e:	f000 fb7a 	bl	b5f66 <_ZNK17currentStatusData16get_messageCountEv>
   b5872:	28ff      	cmp	r0, #255	; 0xff
   b5874:	f040 80b5 	bne.w	b59e2 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ca>
		current.set_messageCount(0);				// Prevent divide by zero
   b5878:	f000 fab6 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b587c:	2100      	movs	r1, #0
   b587e:	f000 fbbe 	bl	b5ffe <_ZN17currentStatusData16set_messageCountEh>
		current.set_successCount(0);				// Zero as well
   b5882:	f000 fab1 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5886:	2100      	movs	r1, #0
   b5888:	f000 fbbf 	bl	b600a <_ZN17currentStatusData16set_successCountEh>
	Log.info("Sending data report number %d",current.get_messageCount());
   b588c:	f000 faac 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5890:	f000 fb69 	bl	b5f66 <_ZNK17currentStatusData16get_messageCountEv>
   b5894:	4976      	ldr	r1, [pc, #472]	; (b5a70 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x258>)
   b5896:	4602      	mov	r2, r0
   b5898:	4876      	ldr	r0, [pc, #472]	; (b5a74 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x25c>)
   b589a:	f7fe fcf3 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b589e:	a804      	add	r0, sp, #16
   b58a0:	f003 fcb4 	bl	b920c <spark_deviceID>
	int deviceIDCheckSum = stringCheckSum(System.deviceID());
   b58a4:	a904      	add	r1, sp, #16
   b58a6:	4620      	mov	r0, r4
   b58a8:	f7ff ff94 	bl	b57d4 <_ZN14LoRA_Functions14stringCheckSumE6String>
   b58ac:	4606      	mov	r6, r0
   b58ae:	a804      	add	r0, sp, #16
   b58b0:	f005 fe28 	bl	bb504 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());
   b58b4:	f000 fa26 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b58b8:	f000 fbbf 	bl	b603a <_ZNK13sysStatusData15get_magicNumberEv>
   b58bc:	4c6e      	ldr	r4, [pc, #440]	; (b5a78 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x260>)
   b58be:	0a00      	lsrs	r0, r0, #8
   b58c0:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b58c2:	f000 fa1f 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b58c6:	f000 fbb8 	bl	b603a <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = highByte(deviceIDCheckSum);
   b58ca:	1233      	asrs	r3, r6, #8
   b58cc:	70a3      	strb	r3, [r4, #2]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b58ce:	7060      	strb	r0, [r4, #1]
	buf[3] = lowByte(deviceIDCheckSum);
   b58d0:	70e6      	strb	r6, [r4, #3]
	buf[4] = highByte(current.get_hourlyCount());
   b58d2:	f000 fa89 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b58d6:	f000 fbfd 	bl	b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>
   b58da:	0a00      	lsrs	r0, r0, #8
   b58dc:	7120      	strb	r0, [r4, #4]
	buf[5] = lowByte(current.get_hourlyCount()); 
   b58de:	f000 fa83 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b58e2:	f000 fbf7 	bl	b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>
   b58e6:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(current.get_dailyCount());
   b58e8:	f000 fa7e 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b58ec:	f000 fc26 	bl	b613c <_ZNK17currentStatusData14get_dailyCountEv>
   b58f0:	0a00      	lsrs	r0, r0, #8
   b58f2:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(current.get_dailyCount()); 
   b58f4:	f000 fa78 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b58f8:	f000 fc20 	bl	b613c <_ZNK17currentStatusData14get_dailyCountEv>
   b58fc:	71e0      	strb	r0, [r4, #7]
	buf[8] = sysStatus.get_sensorType();
   b58fe:	f000 fa01 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5902:	f000 fb21 	bl	b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5906:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_internalTempC();
   b5908:	f000 fa6e 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b590c:	f000 fb21 	bl	b5f52 <_ZNK17currentStatusData17get_internalTempCEv>
   b5910:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_stateOfCharge();
   b5912:	f000 fa69 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5916:	f000 fa8f 	bl	b5e38 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b591a:	ec51 0b10 	vmov	r0, r1, d0
   b591e:	f008 f935 	bl	bdb8c <__aeabi_d2uiz>
   b5922:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_batteryState();	
   b5924:	f000 fa60 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5928:	f000 fb18 	bl	b5f5c <_ZNK17currentStatusData16get_batteryStateEv>
   b592c:	72e0      	strb	r0, [r4, #11]
	buf[12] = sysStatus.get_resetCount();
   b592e:	f000 f9e9 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5932:	f000 faff 	bl	b5f34 <_ZNK13sysStatusData14get_resetCountEv>
   b5936:	7320      	strb	r0, [r4, #12]
	buf[13] = current.get_messageCount();
   b5938:	f000 fa56 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b593c:	f000 fb13 	bl	b5f66 <_ZNK17currentStatusData16get_messageCountEv>
   b5940:	7360      	strb	r0, [r4, #13]
	buf[14] = current.get_successCount();
   b5942:	f000 fa51 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5946:	f000 fb13 	bl	b5f70 <_ZNK17currentStatusData16get_successCountEv>
	unsigned char result = manager.sendtoWait(buf, 15, GATEWAY_ADDRESS, DATA_RPT);
   b594a:	2303      	movs	r3, #3
	buf[14] = current.get_successCount();
   b594c:	73a0      	strb	r0, [r4, #14]
	unsigned char result = manager.sendtoWait(buf, 15, GATEWAY_ADDRESS, DATA_RPT);
   b594e:	4621      	mov	r1, r4
   b5950:	9300      	str	r3, [sp, #0]
   b5952:	484a      	ldr	r0, [pc, #296]	; (b5a7c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x264>)
   b5954:	2300      	movs	r3, #0
   b5956:	220f      	movs	r2, #15
   b5958:	f002 f89e 	bl	b7a98 <_ZN6RHMesh10sendtoWaitEPhhhh>
	if ( result == RH_ROUTER_ERROR_NONE) {
   b595c:	4604      	mov	r4, r0
   b595e:	2800      	cmp	r0, #0
   b5960:	d14c      	bne.n	b59fc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1e4>
		current.set_successCount(current.get_successCount()+1);
   b5962:	f000 fa41 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5966:	4605      	mov	r5, r0
   b5968:	f000 fa3e 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b596c:	f000 fb00 	bl	b5f70 <_ZNK17currentStatusData16get_successCountEv>
   b5970:	3001      	adds	r0, #1
   b5972:	b2c1      	uxtb	r1, r0
   b5974:	4628      	mov	r0, r5
   b5976:	f000 fb48 	bl	b600a <_ZN17currentStatusData16set_successCountEh>
		percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b597a:	f000 fa35 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b597e:	f000 faf7 	bl	b5f70 <_ZNK17currentStatusData16get_successCountEv>
   b5982:	4680      	mov	r8, r0
   b5984:	f000 fa30 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5988:	f000 faed 	bl	b5f66 <_ZNK17currentStatusData16get_messageCountEv>
   b598c:	4606      	mov	r6, r0
		Log.info("Node %d data report delivered - success rate %4.2f",sysStatus.get_nodeNumber(),percentSuccess);
   b598e:	f000 f9b9 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5992:	f000 faca 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5996:	4605      	mov	r5, r0
		percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5998:	4640      	mov	r0, r8
   b599a:	f007 fdb5 	bl	bd508 <__aeabi_i2d>
   b599e:	4680      	mov	r8, r0
   b59a0:	4630      	mov	r0, r6
   b59a2:	4689      	mov	r9, r1
   b59a4:	f007 fdb0 	bl	bd508 <__aeabi_i2d>
   b59a8:	4602      	mov	r2, r0
   b59aa:	460b      	mov	r3, r1
   b59ac:	4640      	mov	r0, r8
   b59ae:	4649      	mov	r1, r9
   b59b0:	f007 ff3e 	bl	bd830 <__aeabi_ddiv>
   b59b4:	4b2c      	ldr	r3, [pc, #176]	; (b5a68 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x250>)
   b59b6:	2200      	movs	r2, #0
   b59b8:	f007 fe10 	bl	bd5dc <__aeabi_dmul>
   b59bc:	f008 f906 	bl	bdbcc <__aeabi_d2f>
		Log.info("Node %d data report delivered - success rate %4.2f",sysStatus.get_nodeNumber(),percentSuccess);
   b59c0:	f007 fdb4 	bl	bd52c <__aeabi_f2d>
   b59c4:	462a      	mov	r2, r5
   b59c6:	e9cd 0100 	strd	r0, r1, [sp]
   b59ca:	492d      	ldr	r1, [pc, #180]	; (b5a80 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x268>)
   b59cc:	4829      	ldr	r0, [pc, #164]	; (b5a74 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x25c>)
   b59ce:	f7fe fc59 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b59d2:	4638      	mov	r0, r7
   b59d4:	4621      	mov	r1, r4
   b59d6:	f006 fab6 	bl	bbf46 <digitalWrite>
		return true;
   b59da:	2001      	movs	r0, #1
}
   b59dc:	b009      	add	sp, #36	; 0x24
   b59de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else current.set_messageCount(current.get_messageCount()+1);
   b59e2:	f000 fa01 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b59e6:	4606      	mov	r6, r0
   b59e8:	f000 f9fe 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b59ec:	f000 fabb 	bl	b5f66 <_ZNK17currentStatusData16get_messageCountEv>
   b59f0:	3001      	adds	r0, #1
   b59f2:	b2c1      	uxtb	r1, r0
   b59f4:	4630      	mov	r0, r6
   b59f6:	f000 fb02 	bl	b5ffe <_ZN17currentStatusData16set_messageCountEh>
   b59fa:	e747      	b.n	b588c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x74>
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b59fc:	2802      	cmp	r0, #2
   b59fe:	d115      	bne.n	b5a2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x214>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, percentSuccess);
   b5a00:	f000 f980 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5a04:	f000 fa91 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5a08:	9003      	str	r0, [sp, #12]
   b5a0a:	4628      	mov	r0, r5
   b5a0c:	f007 fd8e 	bl	bd52c <__aeabi_f2d>
   b5a10:	9a03      	ldr	r2, [sp, #12]
   b5a12:	e9cd 0100 	strd	r0, r1, [sp]
   b5a16:	491b      	ldr	r1, [pc, #108]	; (b5a84 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x26c>)
   b5a18:	2300      	movs	r3, #0
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5a1a:	4816      	ldr	r0, [pc, #88]	; (b5a74 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x25c>)
   b5a1c:	f7fe fc32 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b5a20:	4638      	mov	r0, r7
   b5a22:	2100      	movs	r1, #0
   b5a24:	f006 fa8f 	bl	bbf46 <digitalWrite>
	return false;
   b5a28:	2000      	movs	r0, #0
   b5a2a:	e7d7      	b.n	b59dc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c4>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b5a2c:	2805      	cmp	r0, #5
   b5a2e:	d10d      	bne.n	b5a4c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x234>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5a30:	f000 f968 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5a34:	f000 fa79 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5a38:	9003      	str	r0, [sp, #12]
   b5a3a:	4628      	mov	r0, r5
   b5a3c:	f007 fd76 	bl	bd52c <__aeabi_f2d>
   b5a40:	9a03      	ldr	r2, [sp, #12]
   b5a42:	e9cd 0100 	strd	r0, r1, [sp]
   b5a46:	2300      	movs	r3, #0
   b5a48:	490f      	ldr	r1, [pc, #60]	; (b5a88 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x270>)
   b5a4a:	e7e6      	b.n	b5a1a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x202>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5a4c:	f000 f95a 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5a50:	f000 fa6b 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5a54:	9003      	str	r0, [sp, #12]
   b5a56:	4628      	mov	r0, r5
   b5a58:	f007 fd68 	bl	bd52c <__aeabi_f2d>
   b5a5c:	9a03      	ldr	r2, [sp, #12]
   b5a5e:	e9cd 0100 	strd	r0, r1, [sp]
   b5a62:	2300      	movs	r3, #0
   b5a64:	4909      	ldr	r1, [pc, #36]	; (b5a8c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x274>)
   b5a66:	e7d8      	b.n	b5a1a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x202>
   b5a68:	40590000 	.word	0x40590000
   b5a6c:	000becdc 	.word	0x000becdc
   b5a70:	000be92b 	.word	0x000be92b
   b5a74:	2003e654 	.word	0x2003e654
   b5a78:	2003dfd4 	.word	0x2003dfd4
   b5a7c:	2003e200 	.word	0x2003e200
   b5a80:	000be949 	.word	0x000be949
   b5a84:	000be97c 	.word	0x000be97c
   b5a88:	000be9cc 	.word	0x000be9cc
   b5a8c:	000bea25 	.word	0x000bea25

000b5a90 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:
bool LoRA_Functions::composeJoinRequesttNode() {
   b5a90:	b5f0      	push	{r4, r5, r6, r7, lr}
	digitalWrite(BLUE_LED,HIGH);
   b5a92:	4b38      	ldr	r3, [pc, #224]	; (b5b74 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe4>)
   b5a94:	881e      	ldrh	r6, [r3, #0]
bool LoRA_Functions::composeJoinRequesttNode() {
   b5a96:	b08f      	sub	sp, #60	; 0x3c
   b5a98:	4604      	mov	r4, r0
	digitalWrite(BLUE_LED,HIGH);
   b5a9a:	2101      	movs	r1, #1
   b5a9c:	4630      	mov	r0, r6
   b5a9e:	f006 fa52 	bl	bbf46 <digitalWrite>
   b5aa2:	a803      	add	r0, sp, #12
   b5aa4:	f003 fbb2 	bl	b920c <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5aa8:	2300      	movs	r3, #0
   b5aaa:	2219      	movs	r2, #25
   b5aac:	a907      	add	r1, sp, #28
   b5aae:	a803      	add	r0, sp, #12
   b5ab0:	f005 fdd8 	bl	bb664 <_ZNK6String8getBytesEPhjj>
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long
   b5ab4:	a803      	add	r0, sp, #12
   b5ab6:	f005 fd25 	bl	bb504 <_ZN6StringD1Ev>
   b5aba:	a803      	add	r0, sp, #12
   b5abc:	f003 fba6 	bl	b920c <spark_deviceID>
	int deviceIDCheckSum = stringCheckSum(System.deviceID());
   b5ac0:	a903      	add	r1, sp, #12
   b5ac2:	4620      	mov	r0, r4
   b5ac4:	f7ff fe86 	bl	b57d4 <_ZN14LoRA_Functions14stringCheckSumE6String>
   b5ac8:	4605      	mov	r5, r0
   b5aca:	a803      	add	r0, sp, #12
   b5acc:	f005 fd1a 	bl	bb504 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5ad0:	f000 f918 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5ad4:	f000 fab1 	bl	b603a <_ZNK13sysStatusData15get_magicNumberEv>
   b5ad8:	4c27      	ldr	r4, [pc, #156]	; (b5b78 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe8>)
   b5ada:	0a00      	lsrs	r0, r0, #8
   b5adc:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5ade:	f000 f911 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5ae2:	f000 faaa 	bl	b603a <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = highByte(deviceIDCheckSum);
   b5ae6:	122b      	asrs	r3, r5, #8
   b5ae8:	70a3      	strb	r3, [r4, #2]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5aea:	7060      	strb	r0, [r4, #1]
	buf[3] = lowByte(deviceIDCheckSum);
   b5aec:	70e5      	strb	r5, [r4, #3]
		buf[i+4] = deviceID[i];
   b5aee:	ab07      	add	r3, sp, #28
   b5af0:	1d22      	adds	r2, r4, #4
   b5af2:	af0d      	add	r7, sp, #52	; 0x34
   b5af4:	461d      	mov	r5, r3
   b5af6:	cd03      	ldmia	r5!, {r0, r1}
   b5af8:	42bd      	cmp	r5, r7
   b5afa:	6010      	str	r0, [r2, #0]
   b5afc:	6051      	str	r1, [r2, #4]
   b5afe:	462b      	mov	r3, r5
   b5b00:	f102 0208 	add.w	r2, r2, #8
   b5b04:	d1f6      	bne.n	b5af4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x64>
   b5b06:	782b      	ldrb	r3, [r5, #0]
   b5b08:	7013      	strb	r3, [r2, #0]
	buf[29] = sysStatus.get_sensorType();
   b5b0a:	f000 f8fb 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5b0e:	f000 fa1b 	bl	b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5b12:	7760      	strb	r0, [r4, #29]
	if (sysStatus.get_nodeNumber() > 10) Log.info("Sending join request for unconfigured node");
   b5b14:	f000 f8f6 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5b18:	f000 fa07 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5b1c:	280a      	cmp	r0, #10
   b5b1e:	d918      	bls.n	b5b52 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc2>
   b5b20:	4916      	ldr	r1, [pc, #88]	; (b5b7c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xec>)
	else Log.info("Sending join request to clear alert code");
   b5b22:	4817      	ldr	r0, [pc, #92]	; (b5b80 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf0>)
	if (manager.sendtoWait(buf, 30, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b5b24:	2401      	movs	r4, #1
	else Log.info("Sending join request to clear alert code");
   b5b26:	f7fe fbad 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 30, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b5b2a:	4913      	ldr	r1, [pc, #76]	; (b5b78 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe8>)
   b5b2c:	4815      	ldr	r0, [pc, #84]	; (b5b84 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf4>)
   b5b2e:	9400      	str	r4, [sp, #0]
   b5b30:	2300      	movs	r3, #0
   b5b32:	221e      	movs	r2, #30
   b5b34:	f001 ffb0 	bl	b7a98 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5b38:	4605      	mov	r5, r0
   b5b3a:	b988      	cbnz	r0, b5b60 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>
		Log.info("Join request sent to gateway successfully");
   b5b3c:	4912      	ldr	r1, [pc, #72]	; (b5b88 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf8>)
   b5b3e:	4810      	ldr	r0, [pc, #64]	; (b5b80 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf0>)
   b5b40:	f7fe fba0 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5b44:	4630      	mov	r0, r6
   b5b46:	4629      	mov	r1, r5
   b5b48:	f006 f9fd 	bl	bbf46 <digitalWrite>
		return true;
   b5b4c:	4620      	mov	r0, r4
}
   b5b4e:	b00f      	add	sp, #60	; 0x3c
   b5b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (!Time.isValid()) Log.info("Sending join request as Time is not valid");
   b5b52:	f005 ffcb 	bl	bbaec <_ZN9TimeClass7isValidEv>
   b5b56:	b908      	cbnz	r0, b5b5c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>
   b5b58:	490c      	ldr	r1, [pc, #48]	; (b5b8c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xfc>)
   b5b5a:	e7e2      	b.n	b5b22 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x92>
	else Log.info("Sending join request to clear alert code");
   b5b5c:	490c      	ldr	r1, [pc, #48]	; (b5b90 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x100>)
   b5b5e:	e7e0      	b.n	b5b22 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x92>
		Log.info("Join request to Gateway failed");
   b5b60:	490c      	ldr	r1, [pc, #48]	; (b5b94 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x104>)
   b5b62:	4807      	ldr	r0, [pc, #28]	; (b5b80 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xf0>)
   b5b64:	f7fe fb8e 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5b68:	4630      	mov	r0, r6
   b5b6a:	2100      	movs	r1, #0
   b5b6c:	f006 f9eb 	bl	bbf46 <digitalWrite>
		return false;
   b5b70:	2000      	movs	r0, #0
   b5b72:	e7ec      	b.n	b5b4e <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbe>
   b5b74:	000becdc 	.word	0x000becdc
   b5b78:	2003dfd4 	.word	0x2003dfd4
   b5b7c:	000bea75 	.word	0x000bea75
   b5b80:	2003e654 	.word	0x2003e654
   b5b84:	2003e200 	.word	0x2003e200
   b5b88:	000beaf3 	.word	0x000beaf3
   b5b8c:	000beaa0 	.word	0x000beaa0
   b5b90:	000beaca 	.word	0x000beaca
   b5b94:	000beb1d 	.word	0x000beb1d

000b5b98 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b5b98:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b5b9a:	4a08      	ldr	r2, [pc, #32]	; (b5bbc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b5b9c:	4c08      	ldr	r4, [pc, #32]	; (b5bc0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b5b9e:	4909      	ldr	r1, [pc, #36]	; (b5bc4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b5ba0:	7812      	ldrb	r2, [r2, #0]
   b5ba2:	7809      	ldrb	r1, [r1, #0]
   b5ba4:	4b08      	ldr	r3, [pc, #32]	; (b5bc8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f002 fc6c 	bl	b8484 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5bac:	4621      	mov	r1, r4
   b5bae:	4807      	ldr	r0, [pc, #28]	; (b5bcc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b5bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5bb4:	2200      	movs	r2, #0
   b5bb6:	f001 bf65 	b.w	b7a84 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b5bba:	bf00      	nop
   b5bbc:	000bece4 	.word	0x000bece4
   b5bc0:	2003e0d0 	.word	0x2003e0d0
   b5bc4:	000bece2 	.word	0x000bece2
   b5bc8:	2003e3ec 	.word	0x2003e3ec
   b5bcc:	2003e200 	.word	0x2003e200

000b5bd0 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5bd0:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b5bd2:	4b04      	ldr	r3, [pc, #16]	; (b5be4 <_ZN17currentStatusDataD1Ev+0x14>)
   b5bd4:	6003      	str	r3, [r0, #0]
   b5bd6:	4604      	mov	r4, r0
            if (handle_) {
   b5bd8:	6840      	ldr	r0, [r0, #4]
   b5bda:	b108      	cbz	r0, b5be0 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5bdc:	f003 f838 	bl	b8c50 <os_mutex_recursive_destroy>
}
   b5be0:	4620      	mov	r0, r4
   b5be2:	bd10      	pop	{r4, pc}
   b5be4:	000bf3ac 	.word	0x000bf3ac

000b5be8 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5be8:	b510      	push	{r4, lr}
   b5bea:	4604      	mov	r4, r0
}
   b5bec:	f7ff fff0 	bl	b5bd0 <_ZN17currentStatusDataD1Ev>
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	2178      	movs	r1, #120	; 0x78
   b5bf4:	f7fe fa53 	bl	b409e <_ZdlPvj>
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	bd10      	pop	{r4, pc}

000b5bfc <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5bfc:	b510      	push	{r4, lr}
   b5bfe:	4b03      	ldr	r3, [pc, #12]	; (b5c0c <_ZN8MB85RC64D1Ev+0x10>)
   b5c00:	6003      	str	r3, [r0, #0]
   b5c02:	4604      	mov	r4, r0
   b5c04:	f001 fb82 	bl	b730c <_ZN6MB85RCD1Ev>
   b5c08:	4620      	mov	r0, r4
   b5c0a:	bd10      	pop	{r4, pc}
   b5c0c:	000bec3c 	.word	0x000bec3c

000b5c10 <_ZN8MB85RC64D0Ev>:
   b5c10:	b510      	push	{r4, lr}
   b5c12:	4604      	mov	r4, r0
   b5c14:	f7ff fff2 	bl	b5bfc <_ZN8MB85RC64D1Ev>
   b5c18:	4620      	mov	r0, r4
   b5c1a:	2110      	movs	r1, #16
   b5c1c:	f7fe fa3f 	bl	b409e <_ZdlPvj>
   b5c20:	4620      	mov	r0, r4
   b5c22:	bd10      	pop	{r4, pc}

000b5c24 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b5c24:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5c26:	4b04      	ldr	r3, [pc, #16]	; (b5c38 <_ZN13sysStatusDataD1Ev+0x14>)
   b5c28:	6003      	str	r3, [r0, #0]
   b5c2a:	4604      	mov	r4, r0
            if (handle_) {
   b5c2c:	6840      	ldr	r0, [r0, #4]
   b5c2e:	b108      	cbz	r0, b5c34 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5c30:	f003 f80e 	bl	b8c50 <os_mutex_recursive_destroy>
}
   b5c34:	4620      	mov	r0, r4
   b5c36:	bd10      	pop	{r4, pc}
   b5c38:	000bf3ac 	.word	0x000bf3ac

000b5c3c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5c3c:	b510      	push	{r4, lr}
   b5c3e:	4604      	mov	r4, r0
}
   b5c40:	f7ff fff0 	bl	b5c24 <_ZN13sysStatusDataD1Ev>
   b5c44:	4620      	mov	r0, r4
   b5c46:	2168      	movs	r1, #104	; 0x68
   b5c48:	f7fe fa29 	bl	b409e <_ZdlPvj>
   b5c4c:	4620      	mov	r0, r4
   b5c4e:	bd10      	pop	{r4, pc}

000b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5c50:	b510      	push	{r4, lr}
            if (!handle_) {
   b5c52:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5c54:	4604      	mov	r4, r0
            if (!handle_) {
   b5c56:	b90b      	cbnz	r3, b5c5c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5c58:	f002 fff2 	bl	b8c40 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5c5c:	6820      	ldr	r0, [r4, #0]
        }
   b5c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5c62:	f002 bffd 	b.w	b8c60 <os_mutex_recursive_lock>

000b5c66 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5c66:	b538      	push	{r3, r4, r5, lr}
   b5c68:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5c6a:	3004      	adds	r0, #4
   b5c6c:	f7ff fff0 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5c70:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5c74:	6803      	ldr	r3, [r0, #0]
   b5c76:	68dd      	ldr	r5, [r3, #12]
   b5c78:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5c7c:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5c7e:	6860      	ldr	r0, [r4, #4]
   b5c80:	f002 fff6 	bl	b8c70 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b5c84:	4620      	mov	r0, r4
        } 
   b5c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b5c8a:	f002 bebd 	b.w	b8a08 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b5c8e <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5c8e:	b538      	push	{r3, r4, r5, lr}
   b5c90:	4604      	mov	r4, r0
   b5c92:	3004      	adds	r0, #4
   b5c94:	f7ff ffdc 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5c98:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5c9c:	6803      	ldr	r3, [r0, #0]
   b5c9e:	689d      	ldr	r5, [r3, #8]
   b5ca0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5ca4:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5ca6:	68a2      	ldr	r2, [r4, #8]
   b5ca8:	6823      	ldr	r3, [r4, #0]
   b5caa:	88d1      	ldrh	r1, [r2, #6]
   b5cac:	695b      	ldr	r3, [r3, #20]
   b5cae:	4620      	mov	r0, r4
   b5cb0:	4798      	blx	r3
   b5cb2:	b918      	cbnz	r0, b5cbc <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5cb4:	6823      	ldr	r3, [r4, #0]
   b5cb6:	4620      	mov	r0, r4
   b5cb8:	699b      	ldr	r3, [r3, #24]
   b5cba:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5cbc:	6860      	ldr	r0, [r4, #4]
   b5cbe:	f002 ffd7 	bl	b8c70 <os_mutex_recursive_unlock>
        }
   b5cc2:	2001      	movs	r0, #1
   b5cc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5cc8 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5cc8:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ccc:	6081      	str	r1, [r0, #8]
   b5cce:	490a      	ldr	r1, [pc, #40]	; (b5cf8 <_ZN13sysStatusDataC1Ev+0x30>)
   b5cd0:	f04f 0c38 	mov.w	ip, #56	; 0x38
   b5cd4:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5cd8:	2102      	movs	r1, #2
   b5cda:	8281      	strh	r1, [r0, #20]
   b5cdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5ce0:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ce2:	4906      	ldr	r1, [pc, #24]	; (b5cfc <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5ce4:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ce6:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b5cea:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5cec:	6182      	str	r2, [r0, #24]
   b5cee:	f880 2020 	strb.w	r2, [r0, #32]
   b5cf2:	4a03      	ldr	r2, [pc, #12]	; (b5d00 <_ZN13sysStatusDataC1Ev+0x38>)
   b5cf4:	6002      	str	r2, [r0, #0]
};
   b5cf6:	4770      	bx	lr
   b5cf8:	20a99e75 	.word	0x20a99e75
   b5cfc:	2003e3b8 	.word	0x2003e3b8
   b5d00:	000bec58 	.word	0x000bec58

000b5d04 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5d04:	b510      	push	{r4, lr}
    if (!_instance) {
   b5d06:	4c06      	ldr	r4, [pc, #24]	; (b5d20 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5d08:	6823      	ldr	r3, [r4, #0]
   b5d0a:	b93b      	cbnz	r3, b5d1c <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5d0c:	2068      	movs	r0, #104	; 0x68
   b5d0e:	f7fe f9c2 	bl	b4096 <_Znwj>
   b5d12:	4603      	mov	r3, r0
   b5d14:	b108      	cbz	r0, b5d1a <_ZN13sysStatusData8instanceEv+0x16>
   b5d16:	f7ff ffd7 	bl	b5cc8 <_ZN13sysStatusDataC1Ev>
   b5d1a:	6023      	str	r3, [r4, #0]
}
   b5d1c:	6820      	ldr	r0, [r4, #0]
   b5d1e:	bd10      	pop	{r4, pc}
   b5d20:	2003e3b0 	.word	0x2003e3b0

000b5d24 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5d24:	b510      	push	{r4, lr}
    fram.begin();
   b5d26:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5d28:	f001 fb06 	bl	b7338 <_ZN6MB85RC5beginEv>
    sysStatus
   b5d2c:	f7ff ffea 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b5d30:	2264      	movs	r2, #100	; 0x64
        .load();
   b5d32:	6803      	ldr	r3, [r0, #0]
   b5d34:	61c2      	str	r2, [r0, #28]
}
   b5d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5d3a:	685b      	ldr	r3, [r3, #4]
   b5d3c:	4718      	bx	r3

000b5d3e <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5d3e:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5d40:	f7ff ffe0 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b5d44:	6803      	ldr	r3, [r0, #0]
}
   b5d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5d4a:	68db      	ldr	r3, [r3, #12]
   b5d4c:	2100      	movs	r1, #0
   b5d4e:	4718      	bx	r3

000b5d50 <_ZNK13sysStatusData13get_openHoursEv>:
bool sysStatusData::get_openHours() const {
   b5d50:	b538      	push	{r3, r4, r5, lr}
   b5d52:	4604      	mov	r4, r0
   b5d54:	3004      	adds	r0, #4
   b5d56:	f7ff ff7b 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d5a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5d5c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d5e:	3b01      	subs	r3, #1
   b5d60:	2b30      	cmp	r3, #48	; 0x30
                    result = *(const T *)p;
   b5d62:	bf86      	itte	hi
   b5d64:	68a3      	ldrhi	r3, [r4, #8]
   b5d66:	f893 5031 	ldrbhi.w	r5, [r3, #49]	; 0x31
            T result = 0;
   b5d6a:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5d6c:	f002 ff80 	bl	b8c70 <os_mutex_recursive_unlock>
}
   b5d70:	4628      	mov	r0, r5
   b5d72:	bd38      	pop	{r3, r4, r5, pc}

000b5d74 <_ZN13sysStatusData13set_openHoursEb>:
void sysStatusData::set_openHours(bool value) {
   b5d74:	b538      	push	{r3, r4, r5, lr}
   b5d76:	4604      	mov	r4, r0
   b5d78:	3004      	adds	r0, #4
   b5d7a:	460d      	mov	r5, r1
   b5d7c:	f7ff ff68 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d80:	68e3      	ldr	r3, [r4, #12]
   b5d82:	3b01      	subs	r3, #1
   b5d84:	2b30      	cmp	r3, #48	; 0x30
   b5d86:	d909      	bls.n	b5d9c <_ZN13sysStatusData13set_openHoursEb+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5d88:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5d8a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
   b5d8e:	42aa      	cmp	r2, r5
   b5d90:	d004      	beq.n	b5d9c <_ZN13sysStatusData13set_openHoursEb+0x28>
                        *(T *)p = value;
   b5d92:	f883 5031 	strb.w	r5, [r3, #49]	; 0x31
                        updateHash();
   b5d96:	4620      	mov	r0, r4
   b5d98:	f002 fec2 	bl	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5d9c:	6860      	ldr	r0, [r4, #4]
}
   b5d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5da2:	f002 bf65 	b.w	b8c70 <os_mutex_recursive_unlock>
	...

000b5da8 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5da8:	f100 0130 	add.w	r1, r0, #48	; 0x30
        CustomRecursiveMutex() : handle_(nullptr) {
   b5dac:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5dae:	6081      	str	r1, [r0, #8]
   b5db0:	490a      	ldr	r1, [pc, #40]	; (b5ddc <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5db2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5db4:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b5db8:	6182      	str	r2, [r0, #24]
   b5dba:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5dbe:	4a08      	ldr	r2, [pc, #32]	; (b5de0 <_ZN17currentStatusDataC1Ev+0x38>)
   b5dc0:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5dc2:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5dc6:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5dc8:	2102      	movs	r1, #2
   b5dca:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5dcc:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5dce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5dd2:	4a04      	ldr	r2, [pc, #16]	; (b5de4 <_ZN17currentStatusDataC1Ev+0x3c>)
   b5dd4:	61c1      	str	r1, [r0, #28]
   b5dd6:	6002      	str	r2, [r0, #0]
};
   b5dd8:	4770      	bx	lr
   b5dda:	bf00      	nop
   b5ddc:	20a99e74 	.word	0x20a99e74
   b5de0:	2003e3b8 	.word	0x2003e3b8
   b5de4:	000bec84 	.word	0x000bec84

000b5de8 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5de8:	b510      	push	{r4, lr}
    if (!_instance) {
   b5dea:	4c06      	ldr	r4, [pc, #24]	; (b5e04 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5dec:	6823      	ldr	r3, [r4, #0]
   b5dee:	b93b      	cbnz	r3, b5e00 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5df0:	2078      	movs	r0, #120	; 0x78
   b5df2:	f7fe f950 	bl	b4096 <_Znwj>
   b5df6:	4603      	mov	r3, r0
   b5df8:	b108      	cbz	r0, b5dfe <_ZN17currentStatusData8instanceEv+0x16>
   b5dfa:	f7ff ffd5 	bl	b5da8 <_ZN17currentStatusDataC1Ev>
   b5dfe:	6023      	str	r3, [r4, #0]
}
   b5e00:	6820      	ldr	r0, [r4, #0]
   b5e02:	bd10      	pop	{r4, pc}
   b5e04:	2003e3b4 	.word	0x2003e3b4

000b5e08 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5e08:	b510      	push	{r4, lr}
    fram.begin();
   b5e0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5e0c:	f001 fa94 	bl	b7338 <_ZN6MB85RC5beginEv>

    current
   b5e10:	f7ff ffea 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b5e14:	22fa      	movs	r2, #250	; 0xfa
    //    .withLogData(true)
        .withSaveDelayMs(250)
        .load();
   b5e16:	6803      	ldr	r3, [r0, #0]
   b5e18:	61c2      	str	r2, [r0, #28]
}
   b5e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5e1e:	685b      	ldr	r3, [r3, #4]
   b5e20:	4718      	bx	r3

000b5e22 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5e22:	b510      	push	{r4, lr}
    current.flush(false);
   b5e24:	f7ff ffe0 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b5e28:	6803      	ldr	r3, [r0, #0]
}
   b5e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b5e2e:	68db      	ldr	r3, [r3, #12]
   b5e30:	2100      	movs	r1, #0
   b5e32:	4718      	bx	r3
   b5e34:	0000      	movs	r0, r0
	...

000b5e38 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5e38:	b510      	push	{r4, lr}
   b5e3a:	4604      	mov	r4, r0
   b5e3c:	ed2d 8b02 	vpush	{d8}
   b5e40:	3004      	adds	r0, #4
   b5e42:	f7ff ff05 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e46:	68e3      	ldr	r3, [r4, #12]
   b5e48:	3b08      	subs	r3, #8
   b5e4a:	2b17      	cmp	r3, #23
   b5e4c:	d90c      	bls.n	b5e68 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5e4e:	68a3      	ldr	r3, [r4, #8]
   b5e50:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5e54:	6860      	ldr	r0, [r4, #4]
   b5e56:	f002 ff0b 	bl	b8c70 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5e5a:	eeb0 0a48 	vmov.f32	s0, s16
   b5e5e:	eef0 0a68 	vmov.f32	s1, s17
   b5e62:	ecbd 8b02 	vpop	{d8}
   b5e66:	bd10      	pop	{r4, pc}
            T result = 0;
   b5e68:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5e70 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5e6c:	e7f2      	b.n	b5e54 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5e6e:	bf00      	nop
	...

000b5e78 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e7a:	4604      	mov	r4, r0
   b5e7c:	3004      	adds	r0, #4
   b5e7e:	ec57 6b10 	vmov	r6, r7, d0
   b5e82:	f7ff fee5 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e86:	68e3      	ldr	r3, [r4, #12]
   b5e88:	3b08      	subs	r3, #8
   b5e8a:	2b17      	cmp	r3, #23
   b5e8c:	d90c      	bls.n	b5ea8 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5e8e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5e90:	4630      	mov	r0, r6
   b5e92:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5e96:	4639      	mov	r1, r7
   b5e98:	f007 fe08 	bl	bdaac <__aeabi_dcmpeq>
   b5e9c:	b920      	cbnz	r0, b5ea8 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                        *(T *)p = value;
   b5e9e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        updateHash();
   b5ea2:	4620      	mov	r0, r4
   b5ea4:	f002 fe3c 	bl	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5ea8:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5eaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5eae:	f002 bedf 	b.w	b8c70 <os_mutex_recursive_unlock>

000b5eb2 <_ZNK17currentStatusData8get_RSSIEv>:

void currentStatusData::set_lastSampleTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastSampleTime), value);
}

int16_t currentStatusData::get_RSSI() const {
   b5eb2:	b538      	push	{r3, r4, r5, lr}
   b5eb4:	4604      	mov	r4, r0
   b5eb6:	3004      	adds	r0, #4
   b5eb8:	f7ff feca 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ebc:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5ebe:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ec0:	3b02      	subs	r3, #2
   b5ec2:	2b2f      	cmp	r3, #47	; 0x2f
                    result = *(const T *)p;
   b5ec4:	bf86      	itte	hi
   b5ec6:	68a3      	ldrhi	r3, [r4, #8]
   b5ec8:	f9b3 5030 	ldrshhi.w	r5, [r3, #48]	; 0x30
            T result = 0;
   b5ecc:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5ece:	f002 fecf 	bl	b8c70 <os_mutex_recursive_unlock>
    return getValue<int16_t>(offsetof(CurrentData, RSSI));
}
   b5ed2:	4628      	mov	r0, r5
   b5ed4:	bd38      	pop	{r3, r4, r5, pc}

000b5ed6 <_ZN17currentStatusData8set_RSSIEs>:

void currentStatusData::set_RSSI(int16_t value) {
   b5ed6:	b538      	push	{r3, r4, r5, lr}
   b5ed8:	4604      	mov	r4, r0
   b5eda:	3004      	adds	r0, #4
   b5edc:	460d      	mov	r5, r1
   b5ede:	f7ff feb7 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ee2:	68e3      	ldr	r3, [r4, #12]
   b5ee4:	3b02      	subs	r3, #2
   b5ee6:	2b2f      	cmp	r3, #47	; 0x2f
   b5ee8:	d908      	bls.n	b5efc <_ZN17currentStatusData8set_RSSIEs+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5eea:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5eec:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
   b5ef0:	42aa      	cmp	r2, r5
   b5ef2:	d003      	beq.n	b5efc <_ZN17currentStatusData8set_RSSIEs+0x26>
                        *(T *)p = value;
   b5ef4:	861d      	strh	r5, [r3, #48]	; 0x30
                        updateHash();
   b5ef6:	4620      	mov	r0, r4
   b5ef8:	f002 fe12 	bl	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5efc:	6860      	ldr	r0, [r4, #4]
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
}
   b5efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5f02:	f002 beb5 	b.w	b8c70 <os_mutex_recursive_unlock>

000b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5f06:	b538      	push	{r3, r4, r5, lr}
   b5f08:	4604      	mov	r4, r0
   b5f0a:	3004      	adds	r0, #4
   b5f0c:	460d      	mov	r5, r1
   b5f0e:	f7ff fe9f 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f12:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5f14:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f16:	3b01      	subs	r3, #1
   b5f18:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5f1a:	bf26      	itte	cs
   b5f1c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5f1e:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5f20:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5f22:	f002 fea5 	bl	b8c70 <os_mutex_recursive_unlock>
        }
   b5f26:	4628      	mov	r0, r5
   b5f28:	bd38      	pop	{r3, r4, r5, pc}

000b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5f2a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5f2c:	2110      	movs	r1, #16
   b5f2e:	f7ff ffea 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f32:	bd08      	pop	{r3, pc}

000b5f34 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5f34:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5f36:	2117      	movs	r1, #23
   b5f38:	f7ff ffe5 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f3c:	bd08      	pop	{r3, pc}

000b5f3e <_ZNK13sysStatusData17get_alertCodeNodeEv>:
uint8_t sysStatusData::get_alertCodeNode() const {
   b5f3e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeNode));
   b5f40:	2122      	movs	r1, #34	; 0x22
   b5f42:	f7ff ffe0 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f46:	bd08      	pop	{r3, pc}

000b5f48 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5f48:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b5f4a:	2130      	movs	r1, #48	; 0x30
   b5f4c:	f7ff ffdb 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f50:	bd08      	pop	{r3, pc}

000b5f52 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5f52:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5f54:	2110      	movs	r1, #16
   b5f56:	f7ff ffd6 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f5a:	bd08      	pop	{r3, pc}

000b5f5c <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5f5c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5f5e:	2120      	movs	r1, #32
   b5f60:	f7ff ffd1 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f64:	bd08      	pop	{r3, pc}

000b5f66 <_ZNK17currentStatusData16get_messageCountEv>:

uint8_t currentStatusData::get_messageCount() const {
   b5f66:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b5f68:	2132      	movs	r1, #50	; 0x32
   b5f6a:	f7ff ffcc 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f6e:	bd08      	pop	{r3, pc}

000b5f70 <_ZNK17currentStatusData16get_successCountEv>:

void currentStatusData::set_messageCount(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
}

uint8_t currentStatusData::get_successCount() const {
   b5f70:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b5f72:	2133      	movs	r1, #51	; 0x33
   b5f74:	f7ff ffc7 	bl	b5f06 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5f78:	bd08      	pop	{r3, pc}

000b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5f7a:	b570      	push	{r4, r5, r6, lr}
   b5f7c:	4604      	mov	r4, r0
   b5f7e:	3004      	adds	r0, #4
   b5f80:	460d      	mov	r5, r1
   b5f82:	4616      	mov	r6, r2
   b5f84:	f7ff fe64 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f88:	68e3      	ldr	r3, [r4, #12]
   b5f8a:	3b01      	subs	r3, #1
   b5f8c:	42ab      	cmp	r3, r5
   b5f8e:	d307      	bcc.n	b5fa0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5f90:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5f92:	5d5a      	ldrb	r2, [r3, r5]
   b5f94:	42b2      	cmp	r2, r6
   b5f96:	d003      	beq.n	b5fa0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b5f98:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	f002 fdc0 	bl	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5fa0:	6860      	ldr	r0, [r4, #4]
        }
   b5fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5fa6:	f002 be63 	b.w	b8c70 <os_mutex_recursive_unlock>

000b5faa <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5faa:	b508      	push	{r3, lr}
   b5fac:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5fae:	2110      	movs	r1, #16
   b5fb0:	f7ff ffe3 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5fb4:	bd08      	pop	{r3, pc}

000b5fb6 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5fb6:	b508      	push	{r3, lr}
   b5fb8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b5fba:	2112      	movs	r1, #18
   b5fbc:	f7ff ffdd 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5fc0:	bd08      	pop	{r3, pc}

000b5fc2 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5fc2:	b508      	push	{r3, lr}
   b5fc4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5fc6:	2117      	movs	r1, #23
   b5fc8:	f7ff ffd7 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5fcc:	bd08      	pop	{r3, pc}

000b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>:
void sysStatusData::set_alertCodeNode(uint8_t value) {
   b5fce:	b508      	push	{r3, lr}
   b5fd0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeNode), value);
   b5fd2:	2122      	movs	r1, #34	; 0x22
   b5fd4:	f7ff ffd1 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5fd8:	bd08      	pop	{r3, pc}

000b5fda <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b5fda:	b508      	push	{r3, lr}
   b5fdc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b5fde:	2130      	movs	r1, #48	; 0x30
   b5fe0:	f7ff ffcb 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5fe4:	bd08      	pop	{r3, pc}

000b5fe6 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5fe6:	b508      	push	{r3, lr}
   b5fe8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5fea:	2110      	movs	r1, #16
   b5fec:	f7ff ffc5 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ff0:	bd08      	pop	{r3, pc}

000b5ff2 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5ff2:	b508      	push	{r3, lr}
   b5ff4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5ff6:	2120      	movs	r1, #32
   b5ff8:	f7ff ffbf 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ffc:	bd08      	pop	{r3, pc}

000b5ffe <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b5ffe:	b508      	push	{r3, lr}
   b6000:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b6002:	2132      	movs	r1, #50	; 0x32
   b6004:	f7ff ffb9 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6008:	bd08      	pop	{r3, pc}

000b600a <_ZN17currentStatusData16set_successCountEh>:

void currentStatusData::set_successCount(uint8_t value) {
   b600a:	b508      	push	{r3, lr}
   b600c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b600e:	2133      	movs	r1, #51	; 0x33
   b6010:	f7ff ffb3 	bl	b5f7a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6014:	bd08      	pop	{r3, pc}

000b6016 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b6016:	b538      	push	{r3, r4, r5, lr}
   b6018:	4604      	mov	r4, r0
   b601a:	3004      	adds	r0, #4
   b601c:	460d      	mov	r5, r1
   b601e:	f7ff fe17 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6022:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6024:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6026:	3b02      	subs	r3, #2
   b6028:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b602a:	bf26      	itte	cs
   b602c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b602e:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b6030:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6032:	f002 fe1d 	bl	b8c70 <os_mutex_recursive_unlock>
        }
   b6036:	4628      	mov	r0, r5
   b6038:	bd38      	pop	{r3, r4, r5, pc}

000b603a <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b603a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b603c:	2114      	movs	r1, #20
   b603e:	f7ff ffea 	bl	b6016 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6042:	bd08      	pop	{r3, pc}

000b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b6044:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b6046:	2120      	movs	r1, #32
   b6048:	f7ff ffe5 	bl	b6016 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b604c:	bd08      	pop	{r3, pc}
	...

000b6050 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b6050:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6052:	f002 fd71 	bl	b8b38 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b6056:	4604      	mov	r4, r0
   b6058:	b170      	cbz	r0, b6078 <_ZN13sysStatusData8validateEj+0x28>
        if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b605a:	f7ff fe53 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b605e:	f7ff fff1 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6062:	b958      	cbnz	r0, b607c <_ZN13sysStatusData8validateEj+0x2c>
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencyMinutes());
   b6064:	f7ff fe4e 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6068:	f7ff ffec 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b606c:	4913      	ldr	r1, [pc, #76]	; (b60bc <_ZN13sysStatusData8validateEj+0x6c>)
   b606e:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b6070:	4813      	ldr	r0, [pc, #76]	; (b60c0 <_ZN13sysStatusData8validateEj+0x70>)
   b6072:	f7fe f907 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b6076:	2400      	movs	r4, #0
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b6078:	4a12      	ldr	r2, [pc, #72]	; (b60c4 <_ZN13sysStatusData8validateEj+0x74>)
   b607a:	e018      	b.n	b60ae <_ZN13sysStatusData8validateEj+0x5e>
        if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b607c:	f7ff fe42 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6080:	f7ff ffe0 	bl	b6044 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6084:	283c      	cmp	r0, #60	; 0x3c
   b6086:	d8ed      	bhi.n	b6064 <_ZN13sysStatusData8validateEj+0x14>
        else if (sysStatus.get_nodeNumber() < 1 || sysStatus.get_nodeNumber() > 11) {
   b6088:	f7ff fe3c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b608c:	f7ff ff4d 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b6090:	b930      	cbnz	r0, b60a0 <_ZN13sysStatusData8validateEj+0x50>
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b6092:	f7ff fe37 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6096:	f7ff ff48 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b609a:	490b      	ldr	r1, [pc, #44]	; (b60c8 <_ZN13sysStatusData8validateEj+0x78>)
   b609c:	4602      	mov	r2, r0
   b609e:	e7e7      	b.n	b6070 <_ZN13sysStatusData8validateEj+0x20>
        else if (sysStatus.get_nodeNumber() < 1 || sysStatus.get_nodeNumber() > 11) {
   b60a0:	f7ff fe30 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b60a4:	f7ff ff41 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b60a8:	280b      	cmp	r0, #11
   b60aa:	d8f2      	bhi.n	b6092 <_ZN13sysStatusData8validateEj+0x42>
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b60ac:	4a07      	ldr	r2, [pc, #28]	; (b60cc <_ZN13sysStatusData8validateEj+0x7c>)
   b60ae:	4908      	ldr	r1, [pc, #32]	; (b60d0 <_ZN13sysStatusData8validateEj+0x80>)
   b60b0:	4803      	ldr	r0, [pc, #12]	; (b60c0 <_ZN13sysStatusData8validateEj+0x70>)
   b60b2:	f7fe f8e7 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
}
   b60b6:	4620      	mov	r0, r4
   b60b8:	bd10      	pop	{r4, pc}
   b60ba:	bf00      	nop
   b60bc:	000beb60 	.word	0x000beb60
   b60c0:	2003e654 	.word	0x2003e654
   b60c4:	000beac0 	.word	0x000beac0
   b60c8:	000beb85 	.word	0x000beb85
   b60cc:	000beac4 	.word	0x000beac4
   b60d0:	000beba4 	.word	0x000beba4

000b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b60d4:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b60d6:	2140      	movs	r1, #64	; 0x40
   b60d8:	f7ff ff9d 	bl	b6016 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b60dc:	bd08      	pop	{r3, pc}
	...

000b60e0 <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b60e0:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b60e2:	f002 fd29 	bl	b8b38 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b60e6:	4604      	mov	r4, r0
   b60e8:	b1a0      	cbz	r0, b6114 <_ZN17currentStatusData8validateEj+0x34>
        if (current.get_hourlyCount() < 0 || current.get_hourlyCount()  > 1024) {
   b60ea:	f7ff fe7d 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b60ee:	f7ff fff1 	bl	b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>
   b60f2:	f7ff fe79 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b60f6:	f7ff ffed 	bl	b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>
   b60fa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b60fe:	d910      	bls.n	b6122 <_ZN17currentStatusData8validateEj+0x42>
            Log.info("current data not valid hourlyCount=%d" , current.get_hourlyCount());
   b6100:	f7ff fe72 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b6104:	f7ff ffe6 	bl	b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6108:	4907      	ldr	r1, [pc, #28]	; (b6128 <_ZN17currentStatusData8validateEj+0x48>)
   b610a:	4602      	mov	r2, r0
   b610c:	4807      	ldr	r0, [pc, #28]	; (b612c <_ZN17currentStatusData8validateEj+0x4c>)
   b610e:	f7fe f8b9 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b6112:	2400      	movs	r4, #0
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b6114:	4a06      	ldr	r2, [pc, #24]	; (b6130 <_ZN17currentStatusData8validateEj+0x50>)
   b6116:	4907      	ldr	r1, [pc, #28]	; (b6134 <_ZN17currentStatusData8validateEj+0x54>)
   b6118:	4804      	ldr	r0, [pc, #16]	; (b612c <_ZN17currentStatusData8validateEj+0x4c>)
   b611a:	f7fe f8b3 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
}
   b611e:	4620      	mov	r0, r4
   b6120:	bd10      	pop	{r4, pc}
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b6122:	4a05      	ldr	r2, [pc, #20]	; (b6138 <_ZN17currentStatusData8validateEj+0x58>)
   b6124:	e7f7      	b.n	b6116 <_ZN17currentStatusData8validateEj+0x36>
   b6126:	bf00      	nop
   b6128:	000bebb9 	.word	0x000bebb9
   b612c:	2003e654 	.word	0x2003e654
   b6130:	000beac0 	.word	0x000beac0
   b6134:	000bebdf 	.word	0x000bebdf
   b6138:	000beac4 	.word	0x000beac4

000b613c <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b613c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b613e:	2142      	movs	r1, #66	; 0x42
   b6140:	f7ff ff69 	bl	b6016 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6144:	bd08      	pop	{r3, pc}

000b6146 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6146:	b570      	push	{r4, r5, r6, lr}
   b6148:	4604      	mov	r4, r0
   b614a:	3004      	adds	r0, #4
   b614c:	460d      	mov	r5, r1
   b614e:	4616      	mov	r6, r2
   b6150:	f7ff fd7e 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6154:	68e3      	ldr	r3, [r4, #12]
   b6156:	3b02      	subs	r3, #2
   b6158:	42ab      	cmp	r3, r5
   b615a:	d307      	bcc.n	b616c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b615c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b615e:	5b5a      	ldrh	r2, [r3, r5]
   b6160:	42b2      	cmp	r2, r6
   b6162:	d003      	beq.n	b616c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b6164:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6166:	4620      	mov	r0, r4
   b6168:	f002 fcda 	bl	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b616c:	6860      	ldr	r0, [r4, #4]
        }
   b616e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6172:	f002 bd7d 	b.w	b8c70 <os_mutex_recursive_unlock>

000b6176 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b6176:	b508      	push	{r3, lr}
   b6178:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b617a:	2114      	movs	r1, #20
   b617c:	f7ff ffe3 	bl	b6146 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6180:	bd08      	pop	{r3, pc}

000b6182 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b6182:	b508      	push	{r3, lr}
   b6184:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b6186:	2120      	movs	r1, #32
   b6188:	f7ff ffdd 	bl	b6146 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b618c:	bd08      	pop	{r3, pc}

000b618e <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b618e:	b508      	push	{r3, lr}
   b6190:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b6192:	2140      	movs	r1, #64	; 0x40
   b6194:	f7ff ffd7 	bl	b6146 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6198:	bd08      	pop	{r3, pc}

000b619a <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b619a:	b508      	push	{r3, lr}
   b619c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b619e:	2142      	movs	r1, #66	; 0x42
   b61a0:	f7ff ffd1 	bl	b6146 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b61a4:	bd08      	pop	{r3, pc}

000b61a6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b61a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61a8:	4604      	mov	r4, r0
   b61aa:	3004      	adds	r0, #4
   b61ac:	460d      	mov	r5, r1
   b61ae:	f7ff fd4f 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b61b2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b61b4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b61b6:	3b08      	subs	r3, #8
   b61b8:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b61ba:	bf23      	ittte	cs
   b61bc:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b61be:	1949      	addcs	r1, r1, r5
   b61c0:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b61c4:	2600      	movcc	r6, #0
   b61c6:	bf38      	it	cc
   b61c8:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b61ca:	f002 fd51 	bl	b8c70 <os_mutex_recursive_unlock>
        }
   b61ce:	4630      	mov	r0, r6
   b61d0:	4639      	mov	r1, r7
   b61d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61d4 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b61d4:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b61d6:	2118      	movs	r1, #24
   b61d8:	f7ff ffe5 	bl	b61a6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b61dc:	bd08      	pop	{r3, pc}

000b61de <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b61de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61e0:	4604      	mov	r4, r0
   b61e2:	3004      	adds	r0, #4
   b61e4:	460d      	mov	r5, r1
   b61e6:	461e      	mov	r6, r3
   b61e8:	4617      	mov	r7, r2
   b61ea:	f7ff fd31 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b61ee:	68e3      	ldr	r3, [r4, #12]
   b61f0:	3b08      	subs	r3, #8
   b61f2:	42ab      	cmp	r3, r5
   b61f4:	d30c      	bcc.n	b6210 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b61f6:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b61f8:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b61fa:	5958      	ldr	r0, [r3, r5]
   b61fc:	6851      	ldr	r1, [r2, #4]
   b61fe:	42b1      	cmp	r1, r6
   b6200:	bf08      	it	eq
   b6202:	42b8      	cmpeq	r0, r7
   b6204:	d004      	beq.n	b6210 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b6206:	515f      	str	r7, [r3, r5]
                        updateHash();
   b6208:	4620      	mov	r0, r4
                        *(T *)p = value;
   b620a:	6056      	str	r6, [r2, #4]
                        updateHash();
   b620c:	f002 fc88 	bl	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6210:	6860      	ldr	r0, [r4, #4]
        }
   b6212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6216:	f002 bd2b 	b.w	b8c70 <os_mutex_recursive_unlock>

000b621a <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b621a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b621c:	2118      	movs	r1, #24
   b621e:	f7ff ffde 	bl	b61de <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6222:	bd08      	pop	{r3, pc}

000b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>:
void sysStatusData::set_alertTimestampNode(time_t value) {
   b6224:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampNode), value);
   b6226:	2128      	movs	r1, #40	; 0x28
   b6228:	f7ff ffd9 	bl	b61de <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b622c:	bd08      	pop	{r3, pc}
	...

000b6230 <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b6230:	b510      	push	{r4, lr}
   b6232:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6234:	f002 fce6 	bl	b8c04 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b6238:	481b      	ldr	r0, [pc, #108]	; (b62a8 <_ZN13sysStatusData10initializeEv+0x78>)
   b623a:	491c      	ldr	r1, [pc, #112]	; (b62ac <_ZN13sysStatusData10initializeEv+0x7c>)
   b623c:	f7fe f822 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b6240:	491b      	ldr	r1, [pc, #108]	; (b62b0 <_ZN13sysStatusData10initializeEv+0x80>)
   b6242:	4819      	ldr	r0, [pc, #100]	; (b62a8 <_ZN13sysStatusData10initializeEv+0x78>)
   b6244:	f7fe f81e 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(11);
   b6248:	f7ff fd5c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b624c:	210b      	movs	r1, #11
   b624e:	f7ff feac 	bl	b5faa <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b6252:	f7ff fd57 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6256:	2101      	movs	r1, #1
   b6258:	f7ff fead 	bl	b5fb6 <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b625c:	f7ff fd52 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6260:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6264:	f7ff ff87 	bl	b6176 <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_resetCount(0);
   b6268:	f7ff fd4c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b626c:	2100      	movs	r1, #0
   b626e:	f7ff fea8 	bl	b5fc2 <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_frequencyMinutes(60);
   b6272:	f7ff fd47 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6276:	213c      	movs	r1, #60	; 0x3c
   b6278:	f7ff ff83 	bl	b6182 <_ZN13sysStatusData20set_frequencyMinutesEt>
    sysStatus.set_alertCodeNode(1);
   b627c:	f7ff fd42 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6280:	2101      	movs	r1, #1
   b6282:	f7ff fea4 	bl	b5fce <_ZN13sysStatusData17set_alertCodeNodeEh>
    sysStatus.set_alertTimestampNode(0);
   b6286:	f7ff fd3d 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b628a:	2200      	movs	r2, #0
   b628c:	2300      	movs	r3, #0
   b628e:	f7ff ffc9 	bl	b6224 <_ZN13sysStatusData22set_alertTimestampNodeEx>
    sysStatus.set_openHours(true);
   b6292:	f7ff fd37 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b6296:	2101      	movs	r1, #1
   b6298:	f7ff fd6c 	bl	b5d74 <_ZN13sysStatusData13set_openHoursEb>
    updateHash();
   b629c:	4620      	mov	r0, r4
}
   b629e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b62a2:	f002 bc3d 	b.w	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b62a6:	bf00      	nop
   b62a8:	2003e654 	.word	0x2003e654
   b62ac:	000bebf2 	.word	0x000bebf2
   b62b0:	000bec03 	.word	0x000bec03

000b62b4 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b62b4:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b62b6:	2138      	movs	r1, #56	; 0x38
   b62b8:	f7ff ff91 	bl	b61de <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b62bc:	bd08      	pop	{r3, pc}

000b62be <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b62be:	b510      	push	{r4, lr}
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b62c0:	f7ff fd92 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b62c4:	2100      	movs	r1, #0
   b62c6:	f7ff ff68 	bl	b619a <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b62ca:	f7ff fd8d 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b62ce:	2100      	movs	r1, #0
   b62d0:	f7ff ff5d 	bl	b618e <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b62d4:	f7ff fd88 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b62d8:	4604      	mov	r4, r0
   b62da:	f005 fc24 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b62de:	4602      	mov	r2, r0
   b62e0:	17c3      	asrs	r3, r0, #31
   b62e2:	4620      	mov	r0, r4
   b62e4:	f7ff ffe6 	bl	b62b4 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b62e8:	f7ff fd0c 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b62ec:	2100      	movs	r1, #0
   b62ee:	f7ff fe68 	bl	b5fc2 <_ZN13sysStatusData14set_resetCountEh>
  current.set_messageCount(0);
   b62f2:	f7ff fd79 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b62f6:	2100      	movs	r1, #0
   b62f8:	f7ff fe81 	bl	b5ffe <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b62fc:	f7ff fd74 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
}
   b6300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  current.set_successCount(0);
   b6304:	2100      	movs	r1, #0
   b6306:	f7ff be80 	b.w	b600a <_ZN17currentStatusData16set_successCountEh>
	...

000b630c <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b630c:	b510      	push	{r4, lr}
   b630e:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6310:	f002 fc78 	bl	b8c04 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b6314:	4905      	ldr	r1, [pc, #20]	; (b632c <_ZN17currentStatusData10initializeEv+0x20>)
   b6316:	4806      	ldr	r0, [pc, #24]	; (b6330 <_ZN17currentStatusData10initializeEv+0x24>)
   b6318:	f7fd ffb4 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b631c:	4620      	mov	r0, r4
   b631e:	f7ff ffce 	bl	b62be <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b6322:	4620      	mov	r0, r4
}
   b6324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6328:	f002 bbfa 	b.w	b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b632c:	000bec1b 	.word	0x000bec1b
   b6330:	2003e654 	.word	0x2003e654

000b6334 <_GLOBAL__sub_I_fram>:
}
   b6334:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);  
   b6336:	f005 fe7f 	bl	bc038 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b633a:	4c05      	ldr	r4, [pc, #20]	; (b6350 <_GLOBAL__sub_I_fram+0x1c>)
   b633c:	4601      	mov	r1, r0
   b633e:	2300      	movs	r3, #0
   b6340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6344:	4620      	mov	r0, r4
   b6346:	f000 ffed 	bl	b7324 <_ZN6MB85RCC1ER7TwoWireji>
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <_GLOBAL__sub_I_fram+0x20>)
   b634c:	6023      	str	r3, [r4, #0]
}
   b634e:	bd10      	pop	{r4, pc}
   b6350:	2003e3b8 	.word	0x2003e3b8
   b6354:	000bec3c 	.word	0x000bec3c

000b6358 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b6358:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b635a:	490f      	ldr	r1, [pc, #60]	; (b6398 <_Z18initializePinModesv+0x40>)
   b635c:	480f      	ldr	r0, [pc, #60]	; (b639c <_Z18initializePinModesv+0x44>)
   b635e:	f7fd ff91 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b6362:	2102      	movs	r1, #2
   b6364:	2004      	movs	r0, #4
   b6366:	f005 fddd 	bl	bbf24 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b636a:	2100      	movs	r1, #0
   b636c:	2008      	movs	r0, #8
   b636e:	f005 fdd9 	bl	bbf24 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b6372:	2101      	movs	r1, #1
   b6374:	2007      	movs	r0, #7
   b6376:	f005 fdd5 	bl	bbf24 <pinMode>
    pinMode(INT_PIN, INPUT);
   b637a:	2100      	movs	r1, #0
   b637c:	2012      	movs	r0, #18
   b637e:	f005 fdd1 	bl	bbf24 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b6382:	2101      	movs	r1, #1
   b6384:	2011      	movs	r0, #17
   b6386:	f005 fdcd 	bl	bbf24 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b638a:	2101      	movs	r1, #1
   b638c:	2010      	movs	r0, #16
   b638e:	f005 fdc9 	bl	bbf24 <pinMode>
    return true;
}
   b6392:	2001      	movs	r0, #1
   b6394:	bd08      	pop	{r3, pc}
   b6396:	bf00      	nop
   b6398:	000beca8 	.word	0x000beca8
   b639c:	2003e654 	.word	0x2003e654

000b63a0 <_Z13sensorControlib>:

void sensorControl(int sensorType, bool enableSensor) { // What is the sensor type - 0-Pressure Sensor, 1-PIR Sensor
   b63a0:	b510      	push	{r4, lr}
   b63a2:	4604      	mov	r4, r0

  if (enableSensor) {
   b63a4:	b151      	cbz	r1, b63bc <_Z13sensorControlib+0x1c>
    digitalWrite(MODULE_POWER_PIN,false);           // Enable or disable the sensor
   b63a6:	2100      	movs	r1, #0
   b63a8:	2011      	movs	r0, #17
   b63aa:	f005 fdcc 	bl	bbf46 <digitalWrite>

    if (sensorType == 0) {                          // This is the pressure sensor and we are enabling it
   b63ae:	b95c      	cbnz	r4, b63c8 <_Z13sensorControlib+0x28>
        digitalWrite(LED_POWER_PIN,HIGH);        // For the pressure sensor, this is how you activate it
   b63b0:	2101      	movs	r1, #1
    else {
        digitalWrite(LED_POWER_PIN,HIGH);        // Turns off the LED on the PIR sensor board
    }
  }

}
   b63b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(LED_POWER_PIN,LOW);         // Turns on the LED on the PIR sensor board
   b63b6:	2010      	movs	r0, #16
   b63b8:	f005 bdc5 	b.w	bbf46 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,true);
   b63bc:	2101      	movs	r1, #1
   b63be:	2011      	movs	r0, #17
   b63c0:	f005 fdc1 	bl	bbf46 <digitalWrite>
    if (sensorType == 0) {                          // This is the pressure sensor and we are enabling it
   b63c4:	2c00      	cmp	r4, #0
   b63c6:	d1f3      	bne.n	b63b0 <_Z13sensorControlib+0x10>
        digitalWrite(LED_POWER_PIN,LOW);         // Turns on the LED on the PIR sensor board
   b63c8:	2100      	movs	r1, #0
   b63ca:	e7f2      	b.n	b63b2 <_Z13sensorControlib+0x12>

000b63cc <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b63cc:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b63ce:	4918      	ldr	r1, [pc, #96]	; (b6430 <_Z18initializePowerCfgv+0x64>)
   b63d0:	4818      	ldr	r0, [pc, #96]	; (b6434 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b63d2:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b63d4:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b63d6:	f7fd ff55 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b63da:	4622      	mov	r2, r4
   b63dc:	2100      	movs	r1, #0
   b63de:	4668      	mov	r0, sp
   b63e0:	f007 fcbe 	bl	bdd60 <memset>
   b63e4:	4622      	mov	r2, r4
   b63e6:	2100      	movs	r1, #0
   b63e8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b63ec:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b63f0:	f007 fcb6 	bl	bdd60 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b63f4:	2100      	movs	r1, #0
   b63f6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b63fa:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b63fe:	f002 fecf 	bl	b91a0 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b6402:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b6406:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b640a:	4b0b      	ldr	r3, [pc, #44]	; (b6438 <_Z18initializePowerCfgv+0x6c>)
   b640c:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b640e:	f241 0370 	movw	r3, #4208	; 0x1070
   b6412:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b6416:	9b00      	ldr	r3, [sp, #0]
   b6418:	2100      	movs	r1, #0
   b641a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b641e:	4668      	mov	r0, sp
   b6420:	9300      	str	r3, [sp, #0]
   b6422:	f002 febd 	bl	b91a0 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b6426:	3800      	subs	r0, #0
   b6428:	bf18      	it	ne
   b642a:	2001      	movne	r0, #1
   b642c:	b010      	add	sp, #64	; 0x40
   b642e:	bd10      	pop	{r4, pc}
   b6430:	000becc1 	.word	0x000becc1
   b6434:	2003e654 	.word	0x2003e654
   b6438:	03840384 	.word	0x03840384

000b643c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b643c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b643e:	6803      	ldr	r3, [r0, #0]
   b6440:	2b2f      	cmp	r3, #47	; 0x2f
{
   b6442:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b6444:	d904      	bls.n	b6450 <nrf_gpio_pin_port_decode+0x14>
   b6446:	4a07      	ldr	r2, [pc, #28]	; (b6464 <nrf_gpio_pin_port_decode+0x28>)
   b6448:	4907      	ldr	r1, [pc, #28]	; (b6468 <nrf_gpio_pin_port_decode+0x2c>)
   b644a:	200a      	movs	r0, #10
   b644c:	f002 fe08 	bl	b9060 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b6450:	6823      	ldr	r3, [r4, #0]
   b6452:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b6454:	bf83      	ittte	hi
   b6456:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b645a:	4804      	ldrhi	r0, [pc, #16]	; (b646c <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b645c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b645e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b6462:	bd10      	pop	{r4, pc}
   b6464:	000b8cb1 	.word	0x000b8cb1
   b6468:	000bed63 	.word	0x000bed63
   b646c:	50000300 	.word	0x50000300

000b6470 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b6470:	ee07 0a90 	vmov	s15, r0
   b6474:	ed9f 7a09 	vldr	s14, [pc, #36]	; b649c <_Z17tmp36TemperatureCi+0x2c>
   b6478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b647c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6480:	ed9f 7a07 	vldr	s14, [pc, #28]	; b64a0 <_Z17tmp36TemperatureCi+0x30>
   b6484:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6488:	eddf 7a06 	vldr	s15, [pc, #24]	; b64a4 <_Z17tmp36TemperatureCi+0x34>
   b648c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6490:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6494:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6498:	4770      	bx	lr
   b649a:	bf00      	nop
   b649c:	454e4000 	.word	0x454e4000
   b64a0:	457ff000 	.word	0x457ff000
   b64a4:	43fa0000 	.word	0x43fa0000

000b64a8 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b64a8:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b64aa:	2101      	movs	r1, #1
   b64ac:	a801      	add	r0, sp, #4
   b64ae:	f004 fd38 	bl	baf22 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b64b2:	f7ff fc99 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b64b6:	f7ff fd4c 	bl	b5f52 <_ZNK17currentStatusData17get_internalTempCEv>
   b64ba:	f7ff fc95 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b64be:	f7ff fd48 	bl	b5f52 <_ZNK17currentStatusData17get_internalTempCEv>
   b64c2:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b64c4:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b64c6:	d90d      	bls.n	b64e4 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b64c8:	f004 fdbe 	bl	bb048 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b64cc:	f7ff fc8c 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b64d0:	2101      	movs	r1, #1
   b64d2:	f7ff fd8e 	bl	b5ff2 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b64d6:	2400      	movs	r4, #0
  PMIC pmic(true);
   b64d8:	a801      	add	r0, sp, #4
   b64da:	f004 fd31 	bl	baf40 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b64de:	4620      	mov	r0, r4
   b64e0:	b002      	add	sp, #8
   b64e2:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b64e4:	f004 fd95 	bl	bb012 <_ZN4PMIC14enableChargingEv>
    return true;
   b64e8:	2401      	movs	r4, #1
   b64ea:	e7f5      	b.n	b64d8 <_Z16isItSafeToChargev+0x30>

000b64ec <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b64ec:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b64ee:	4d1b      	ldr	r5, [pc, #108]	; (b655c <_Z17getSignalStrengthv+0x70>)
   b64f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b64f2:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b64f4:	ac10      	add	r4, sp, #64	; 0x40
   b64f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b64f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b64fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b64fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6500:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6504:	4916      	ldr	r1, [pc, #88]	; (b6560 <_Z17getSignalStrengthv+0x74>)
   b6506:	a808      	add	r0, sp, #32
   b6508:	f002 fff2 	bl	b94f0 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b650c:	a808      	add	r0, sp, #32
   b650e:	f003 f832 	bl	b9576 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6512:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6514:	a808      	add	r0, sp, #32
   b6516:	f003 f867 	bl	b95e8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b651a:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b651c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6520:	f003 f892 	bl	b9648 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6524:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b6526:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b652a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b652e:	f006 fffd 	bl	bd52c <__aeabi_f2d>
   b6532:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6536:	4628      	mov	r0, r5
   b6538:	f006 fff8 	bl	bd52c <__aeabi_f2d>
   b653c:	e9cd 0100 	strd	r0, r1, [sp]
   b6540:	2110      	movs	r1, #16
   b6542:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6546:	4a07      	ldr	r2, [pc, #28]	; (b6564 <_Z17getSignalStrengthv+0x78>)
   b6548:	eb0d 0001 	add.w	r0, sp, r1
   b654c:	f002 ff06 	bl	b935c <snprintf>
  Log.info(signalStr);
   b6550:	4805      	ldr	r0, [pc, #20]	; (b6568 <_Z17getSignalStrengthv+0x7c>)
   b6552:	a904      	add	r1, sp, #16
   b6554:	f7fd fe96 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
}
   b6558:	b01b      	add	sp, #108	; 0x6c
   b655a:	bd30      	pop	{r4, r5, pc}
   b655c:	000bede4 	.word	0x000bede4
   b6560:	2003e610 	.word	0x2003e610
   b6564:	000bed87 	.word	0x000bed87
   b6568:	2003e654 	.word	0x2003e654

000b656c <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b656c:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b656e:	4e50      	ldr	r6, [pc, #320]	; (b66b0 <_Z11recordCountv+0x144>)
   b6570:	4c50      	ldr	r4, [pc, #320]	; (b66b4 <_Z11recordCountv+0x148>)
   b6572:	7833      	ldrb	r3, [r6, #0]
   b6574:	f3bf 8f5b 	dmb	ish
   b6578:	f013 0f01 	tst.w	r3, #1
   b657c:	b085      	sub	sp, #20
   b657e:	d109      	bne.n	b6594 <_Z11recordCountv+0x28>
   b6580:	4630      	mov	r0, r6
   b6582:	f7fd fd9b 	bl	b40bc <__cxa_guard_acquire>
   b6586:	b128      	cbz	r0, b6594 <_Z11recordCountv+0x28>
   b6588:	f002 fbc2 	bl	b8d10 <HAL_Pin_Map>
   b658c:	6020      	str	r0, [r4, #0]
   b658e:	4630      	mov	r0, r6
   b6590:	f7fd fd99 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6594:	4b48      	ldr	r3, [pc, #288]	; (b66b8 <_Z11recordCountv+0x14c>)
   b6596:	881d      	ldrh	r5, [r3, #0]
   b6598:	6823      	ldr	r3, [r4, #0]
   b659a:	012d      	lsls	r5, r5, #4
   b659c:	5d5b      	ldrb	r3, [r3, r5]
   b659e:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b65a0:	7833      	ldrb	r3, [r6, #0]
   b65a2:	f3bf 8f5b 	dmb	ish
   b65a6:	07d9      	lsls	r1, r3, #31
   b65a8:	d409      	bmi.n	b65be <_Z11recordCountv+0x52>
   b65aa:	4841      	ldr	r0, [pc, #260]	; (b66b0 <_Z11recordCountv+0x144>)
   b65ac:	f7fd fd86 	bl	b40bc <__cxa_guard_acquire>
   b65b0:	b128      	cbz	r0, b65be <_Z11recordCountv+0x52>
   b65b2:	f002 fbad 	bl	b8d10 <HAL_Pin_Map>
   b65b6:	6020      	str	r0, [r4, #0]
   b65b8:	483d      	ldr	r0, [pc, #244]	; (b66b0 <_Z11recordCountv+0x144>)
   b65ba:	f7fd fd84 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b65be:	6823      	ldr	r3, [r4, #0]
   b65c0:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b65c2:	a803      	add	r0, sp, #12
   b65c4:	785b      	ldrb	r3, [r3, #1]
   b65c6:	f003 031f 	and.w	r3, r3, #31
   b65ca:	433b      	orrs	r3, r7
   b65cc:	9303      	str	r3, [sp, #12]
   b65ce:	f7ff ff35 	bl	b643c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b65d2:	9a03      	ldr	r2, [sp, #12]
   b65d4:	2301      	movs	r3, #1
   b65d6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b65d8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b65dc:	f7ff fc04 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b65e0:	4607      	mov	r7, r0
   b65e2:	f005 faa0 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b65e6:	4602      	mov	r2, r0
   b65e8:	17c3      	asrs	r3, r0, #31
   b65ea:	4638      	mov	r0, r7
   b65ec:	f7ff fe62 	bl	b62b4 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b65f0:	f7ff fbfa 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b65f4:	4607      	mov	r7, r0
   b65f6:	f7ff fbf7 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b65fa:	f7ff fd6b 	bl	b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>
   b65fe:	3001      	adds	r0, #1
   b6600:	b281      	uxth	r1, r0
   b6602:	4638      	mov	r0, r7
   b6604:	f7ff fdc3 	bl	b618e <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b6608:	f7ff fbee 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b660c:	4607      	mov	r7, r0
   b660e:	f7ff fbeb 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b6612:	f7ff fd93 	bl	b613c <_ZNK17currentStatusData14get_dailyCountEv>
   b6616:	3001      	adds	r0, #1
   b6618:	b281      	uxth	r1, r0
   b661a:	4638      	mov	r0, r7
   b661c:	f7ff fdbd 	bl	b619a <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b6620:	f7ff fbe2 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b6624:	f7ff fd56 	bl	b60d4 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6628:	9001      	str	r0, [sp, #4]
   b662a:	f7ff fbdd 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b662e:	f7ff fd85 	bl	b613c <_ZNK17currentStatusData14get_dailyCountEv>
   b6632:	9a01      	ldr	r2, [sp, #4]
   b6634:	4921      	ldr	r1, [pc, #132]	; (b66bc <_Z11recordCountv+0x150>)
   b6636:	4603      	mov	r3, r0
   b6638:	4821      	ldr	r0, [pc, #132]	; (b66c0 <_Z11recordCountv+0x154>)
   b663a:	f7fd fe23 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
  
  delay(500);
   b663e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6642:	f002 fee7 	bl	b9414 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b6646:	7833      	ldrb	r3, [r6, #0]
   b6648:	f3bf 8f5b 	dmb	ish
   b664c:	07da      	lsls	r2, r3, #31
   b664e:	d409      	bmi.n	b6664 <_Z11recordCountv+0xf8>
   b6650:	4817      	ldr	r0, [pc, #92]	; (b66b0 <_Z11recordCountv+0x144>)
   b6652:	f7fd fd33 	bl	b40bc <__cxa_guard_acquire>
   b6656:	b128      	cbz	r0, b6664 <_Z11recordCountv+0xf8>
   b6658:	f002 fb5a 	bl	b8d10 <HAL_Pin_Map>
   b665c:	6020      	str	r0, [r4, #0]
   b665e:	4814      	ldr	r0, [pc, #80]	; (b66b0 <_Z11recordCountv+0x144>)
   b6660:	f7fd fd31 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6664:	6823      	ldr	r3, [r4, #0]
   b6666:	5d5b      	ldrb	r3, [r3, r5]
   b6668:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b666a:	7833      	ldrb	r3, [r6, #0]
   b666c:	f3bf 8f5b 	dmb	ish
   b6670:	07db      	lsls	r3, r3, #31
   b6672:	d409      	bmi.n	b6688 <_Z11recordCountv+0x11c>
   b6674:	480e      	ldr	r0, [pc, #56]	; (b66b0 <_Z11recordCountv+0x144>)
   b6676:	f7fd fd21 	bl	b40bc <__cxa_guard_acquire>
   b667a:	b128      	cbz	r0, b6688 <_Z11recordCountv+0x11c>
   b667c:	f002 fb48 	bl	b8d10 <HAL_Pin_Map>
   b6680:	6020      	str	r0, [r4, #0]
   b6682:	480b      	ldr	r0, [pc, #44]	; (b66b0 <_Z11recordCountv+0x144>)
   b6684:	f7fd fd1f 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6688:	6823      	ldr	r3, [r4, #0]
   b668a:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b668c:	a803      	add	r0, sp, #12
   b668e:	786b      	ldrb	r3, [r5, #1]
   b6690:	f003 031f 	and.w	r3, r3, #31
   b6694:	433b      	orrs	r3, r7
   b6696:	9303      	str	r3, [sp, #12]
   b6698:	f7ff fed0 	bl	b643c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b669c:	9b03      	ldr	r3, [sp, #12]
   b669e:	2201      	movs	r2, #1
   b66a0:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b66a4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
   b66a8:	4610      	mov	r0, r2
   b66aa:	b005      	add	sp, #20
   b66ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b66ae:	bf00      	nop
   b66b0:	2003e3c8 	.word	0x2003e3c8
   b66b4:	2003e3cc 	.word	0x2003e3cc
   b66b8:	000becdc 	.word	0x000becdc
   b66bc:	000beda0 	.word	0x000beda0
   b66c0:	2003e654 	.word	0x2003e654

000b66c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b66c4:	b530      	push	{r4, r5, lr}
   b66c6:	b085      	sub	sp, #20
   b66c8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b66ca:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b66cc:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b66ce:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b66d0:	f002 fd08 	bl	b90e4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b66d4:	b990      	cbnz	r0, b66fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b66d6:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b66d8:	b10c      	cbz	r4, b66de <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b66da:	6923      	ldr	r3, [r4, #16]
   b66dc:	b923      	cbnz	r3, b66e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b66de:	4a08      	ldr	r2, [pc, #32]	; (b6700 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b66e0:	4908      	ldr	r1, [pc, #32]	; (b6704 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b66e2:	200a      	movs	r0, #10
   b66e4:	f002 fcbc 	bl	b9060 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b66e8:	230c      	movs	r3, #12
   b66ea:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b66ee:	2304      	movs	r3, #4
   b66f0:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b66f2:	aa01      	add	r2, sp, #4
   b66f4:	6923      	ldr	r3, [r4, #16]
   b66f6:	2101      	movs	r1, #1
   b66f8:	4620      	mov	r0, r4
   b66fa:	4798      	blx	r3
}
   b66fc:	b005      	add	sp, #20
   b66fe:	bd30      	pop	{r4, r5, pc}
   b6700:	000b8cb1 	.word	0x000b8cb1
   b6704:	000bedbd 	.word	0x000bedbd

000b6708 <_Z12batteryStatev>:
bool batteryState() {
   b6708:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b670a:	f7ff fb6d 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b670e:	a901      	add	r1, sp, #4
   b6710:	4604      	mov	r4, r0
   b6712:	2007      	movs	r0, #7
   b6714:	f7ff ffd6 	bl	b66c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6718:	1e01      	subs	r1, r0, #0
        return val;
   b671a:	bfa8      	it	ge
   b671c:	9901      	ldrge	r1, [sp, #4]
   b671e:	4620      	mov	r0, r4
   b6720:	b2c9      	uxtb	r1, r1
   b6722:	f7ff fc66 	bl	b5ff2 <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b6726:	4818      	ldr	r0, [pc, #96]	; (b6788 <_Z12batteryStatev+0x80>)
   b6728:	f003 f872 	bl	b9810 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b672c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6730:	f002 fe70 	bl	b9414 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6734:	f7ff fb58 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b6738:	a901      	add	r1, sp, #4
   b673a:	4604      	mov	r4, r0
   b673c:	2003      	movs	r0, #3
   b673e:	f7ff ffc1 	bl	b66c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6742:	b9e8      	cbnz	r0, b6780 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6744:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6748:	ee07 3a90 	vmov	s15, r3
   b674c:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6750:	ee17 0a90 	vmov	r0, s15
   b6754:	f006 feea 	bl	bd52c <__aeabi_f2d>
   b6758:	ec41 0b10 	vmov	d0, r0, r1
   b675c:	4620      	mov	r0, r4
   b675e:	f7ff fb8b 	bl	b5e78 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6762:	f7ff fb41 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b6766:	f7ff fb67 	bl	b5e38 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b676a:	4b08      	ldr	r3, [pc, #32]	; (b678c <_Z12batteryStatev+0x84>)
   b676c:	ec51 0b10 	vmov	r0, r1, d0
   b6770:	2200      	movs	r2, #0
   b6772:	f007 f9c3 	bl	bdafc <__aeabi_dcmpgt>
}
   b6776:	3800      	subs	r0, #0
   b6778:	bf18      	it	ne
   b677a:	2001      	movne	r0, #1
   b677c:	b002      	add	sp, #8
   b677e:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6780:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6784:	e7e4      	b.n	b6750 <_Z12batteryStatev+0x48>
   b6786:	bf00      	nop
   b6788:	2003e3d0 	.word	0x2003e3d0
   b678c:	404e0000 	.word	0x404e0000

000b6790 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6790:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6792:	f7ff fb29 	bl	b5de8 <_ZN17currentStatusData8instanceEv>
   b6796:	4b0f      	ldr	r3, [pc, #60]	; (b67d4 <_Z16takeMeasurementsv+0x44>)
   b6798:	4604      	mov	r4, r0
   b679a:	8818      	ldrh	r0, [r3, #0]
   b679c:	f005 fbff 	bl	bbf9e <analogRead>
   b67a0:	f7ff fe66 	bl	b6470 <_Z17tmp36TemperatureCi>
   b67a4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b67a8:	4620      	mov	r0, r4
   b67aa:	edcd 7a01 	vstr	s15, [sp, #4]
   b67ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b67b2:	f7ff fc18 	bl	b5fe6 <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b67b6:	f7ff ffa7 	bl	b6708 <_Z12batteryStatev>
    isItSafeToCharge();
   b67ba:	f7ff fe75 	bl	b64a8 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b67be:	f7ff faa1 	bl	b5d04 <_ZN13sysStatusData8instanceEv>
   b67c2:	f7ff fbb2 	bl	b5f2a <_ZNK13sysStatusData14get_nodeNumberEv>
   b67c6:	b908      	cbnz	r0, b67cc <_Z16takeMeasurementsv+0x3c>
   b67c8:	f7ff fe90 	bl	b64ec <_Z17getSignalStrengthv>
}
   b67cc:	2001      	movs	r0, #1
   b67ce:	b002      	add	sp, #8
   b67d0:	bd10      	pop	{r4, pc}
   b67d2:	bf00      	nop
   b67d4:	000bece8 	.word	0x000bece8

000b67d8 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b67d8:	4801      	ldr	r0, [pc, #4]	; (b67e0 <_GLOBAL__sub_I_batteryContext+0x8>)
   b67da:	2100      	movs	r1, #0
   b67dc:	f002 bfd4 	b.w	b9788 <_ZN9FuelGaugeC1Eb>
   b67e0:	2003e3d0 	.word	0x2003e3d0

000b67e4 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b67e4:	4770      	bx	lr

000b67e6 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b67e6:	b510      	push	{r4, lr}
}
   b67e8:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b67ea:	4604      	mov	r4, r0
}
   b67ec:	f7fd fc57 	bl	b409e <_ZdlPvj>
   b67f0:	4620      	mov	r0, r4
   b67f2:	bd10      	pop	{r4, pc}

000b67f4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b67f4:	b510      	push	{r4, lr}
   b67f6:	4604      	mov	r4, r0
   b67f8:	b08a      	sub	sp, #40	; 0x28
   b67fa:	4608      	mov	r0, r1
    attr.flags = 0;
   b67fc:	f04f 0c20 	mov.w	ip, #32
   b6800:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6802:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6806:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b680a:	460b      	mov	r3, r1
   b680c:	aa02      	add	r2, sp, #8
   b680e:	6821      	ldr	r1, [r4, #0]
   b6810:	f002 fc36 	bl	b9080 <log_message_v>
}
   b6814:	b00a      	add	sp, #40	; 0x28
   b6816:	bd10      	pop	{r4, pc}

000b6818 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6818:	b40e      	push	{r1, r2, r3}
   b681a:	b503      	push	{r0, r1, lr}
   b681c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b681e:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6820:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6824:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6826:	f7ff ffe5 	bl	b67f4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b682a:	b002      	add	sp, #8
   b682c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6830:	b003      	add	sp, #12
   b6832:	4770      	bx	lr

000b6834 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6834:	b40e      	push	{r1, r2, r3}
   b6836:	b503      	push	{r0, r1, lr}
   b6838:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b683a:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b683c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6840:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6842:	f7ff ffd7 	bl	b67f4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6846:	b002      	add	sp, #8
   b6848:	f85d eb04 	ldr.w	lr, [sp], #4
   b684c:	b003      	add	sp, #12
   b684e:	4770      	bx	lr

000b6850 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6850:	b510      	push	{r4, lr}
   b6852:	7202      	strb	r2, [r0, #8]
   b6854:	22ff      	movs	r2, #255	; 0xff
   b6856:	8142      	strh	r2, [r0, #10]
   b6858:	2200      	movs	r2, #0
   b685a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b685e:	6142      	str	r2, [r0, #20]
   b6860:	7602      	strb	r2, [r0, #24]
   b6862:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6864:	4a02      	ldr	r2, [pc, #8]	; (b6870 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6866:	4c03      	ldr	r4, [pc, #12]	; (b6874 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6868:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b686a:	e9c0 4100 	strd	r4, r1, [r0]
}
   b686e:	bd10      	pop	{r4, pc}
   b6870:	2003e3dc 	.word	0x2003e3dc
   b6874:	000bf05c 	.word	0x000bf05c

000b6878 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b687c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6880:	4604      	mov	r4, r0
   b6882:	4689      	mov	r9, r1
   b6884:	4616      	mov	r6, r2
   b6886:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6888:	f1b8 0f00 	cmp.w	r8, #0
   b688c:	d002      	beq.n	b6894 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b688e:	6840      	ldr	r0, [r0, #4]
   b6890:	f003 f864 	bl	b995c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6894:	7a21      	ldrb	r1, [r4, #8]
   b6896:	6860      	ldr	r0, [r4, #4]
   b6898:	f003 f83d 	bl	b9916 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b689c:	6860      	ldr	r0, [r4, #4]
   b689e:	6803      	ldr	r3, [r0, #0]
   b68a0:	4649      	mov	r1, r9
   b68a2:	689b      	ldr	r3, [r3, #8]
   b68a4:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b68a6:	6860      	ldr	r0, [r4, #4]
   b68a8:	2100      	movs	r1, #0
   b68aa:	f003 f853 	bl	b9954 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b68ae:	4605      	mov	r5, r0
   b68b0:	bb00      	cbnz	r0, b68f4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b68b2:	2301      	movs	r3, #1
   b68b4:	7a21      	ldrb	r1, [r4, #8]
   b68b6:	6860      	ldr	r0, [r4, #4]
   b68b8:	463a      	mov	r2, r7
   b68ba:	f003 f81a 	bl	b98f2 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b68be:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b68c0:	4603      	mov	r3, r0
        if (count == num) {
   b68c2:	d109      	bne.n	b68d8 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b68c4:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b68c6:	42be      	cmp	r6, r7
   b68c8:	d01c      	beq.n	b6904 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b68ca:	6860      	ldr	r0, [r4, #4]
   b68cc:	6803      	ldr	r3, [r0, #0]
   b68ce:	695b      	ldr	r3, [r3, #20]
   b68d0:	4798      	blx	r3
   b68d2:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b68d6:	e7f6      	b.n	b68c6 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b68d8:	490b      	ldr	r1, [pc, #44]	; (b6908 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b68da:	480c      	ldr	r0, [pc, #48]	; (b690c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b68dc:	464a      	mov	r2, r9
   b68de:	f7ff ff9b 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b68e2:	f1b8 0f00 	cmp.w	r8, #0
   b68e6:	d002      	beq.n	b68ee <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b68e8:	6860      	ldr	r0, [r4, #4]
   b68ea:	f003 f840 	bl	b996e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b68ee:	4628      	mov	r0, r5
   b68f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b68f4:	4603      	mov	r3, r0
   b68f6:	4906      	ldr	r1, [pc, #24]	; (b6910 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b68f8:	4804      	ldr	r0, [pc, #16]	; (b690c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b68fa:	464a      	mov	r2, r9
   b68fc:	f7ff ff8c 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6900:	2500      	movs	r5, #0
   b6902:	e7ee      	b.n	b68e2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6904:	2501      	movs	r5, #1
   b6906:	e7ec      	b.n	b68e2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6908:	000bee0c 	.word	0x000bee0c
   b690c:	2003e3d8 	.word	0x2003e3d8
   b6910:	000bee31 	.word	0x000bee31

000b6914 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6914:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6916:	9300      	str	r3, [sp, #0]
   b6918:	2301      	movs	r3, #1
   b691a:	f7ff ffad 	bl	b6878 <_ZN6AB180513readRegistersEhPhjb>
}
   b691e:	b003      	add	sp, #12
   b6920:	f85d fb04 	ldr.w	pc, [sp], #4

000b6924 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6924:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6926:	8943      	ldrh	r3, [r0, #10]
   b6928:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b692a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b692c:	d010      	beq.n	b6950 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b692e:	4e19      	ldr	r6, [pc, #100]	; (b6994 <_ZN6AB180510detectChipEv+0x70>)
   b6930:	4d19      	ldr	r5, [pc, #100]	; (b6998 <_ZN6AB180510detectChipEv+0x74>)
   b6932:	f002 f9c5 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6936:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b693a:	d209      	bcs.n	b6950 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b693c:	8960      	ldrh	r0, [r4, #10]
   b693e:	f005 fb1b 	bl	bbf78 <digitalRead>
   b6942:	2801      	cmp	r0, #1
   b6944:	d004      	beq.n	b6950 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6946:	4631      	mov	r1, r6
   b6948:	4628      	mov	r0, r5
   b694a:	f7fd fc9b 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b694e:	e7f0      	b.n	b6932 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6950:	2301      	movs	r3, #1
   b6952:	f10d 0207 	add.w	r2, sp, #7
   b6956:	2128      	movs	r1, #40	; 0x28
   b6958:	4620      	mov	r0, r4
   b695a:	f7ff ffdb 	bl	b6914 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b695e:	b930      	cbnz	r0, b696e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6960:	480d      	ldr	r0, [pc, #52]	; (b6998 <_ZN6AB180510detectChipEv+0x74>)
   b6962:	490e      	ldr	r1, [pc, #56]	; (b699c <_ZN6AB180510detectChipEv+0x78>)
   b6964:	f7fd fc8e 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b6968:	2000      	movs	r0, #0
}
   b696a:	b002      	add	sp, #8
   b696c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b696e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6972:	2b18      	cmp	r3, #24
   b6974:	d1f4      	bne.n	b6960 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6976:	2301      	movs	r3, #1
   b6978:	f10d 0207 	add.w	r2, sp, #7
   b697c:	2129      	movs	r1, #41	; 0x29
   b697e:	4620      	mov	r0, r4
   b6980:	f7ff ffc8 	bl	b6914 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6984:	2800      	cmp	r0, #0
   b6986:	d0eb      	beq.n	b6960 <_ZN6AB180510detectChipEv+0x3c>
   b6988:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b698c:	2b05      	cmp	r3, #5
   b698e:	d1e7      	bne.n	b6960 <_ZN6AB180510detectChipEv+0x3c>
   b6990:	e7eb      	b.n	b696a <_ZN6AB180510detectChipEv+0x46>
   b6992:	bf00      	nop
   b6994:	000bee55 	.word	0x000bee55
   b6998:	2003e3d8 	.word	0x2003e3d8
   b699c:	000bee6a 	.word	0x000bee6a

000b69a0 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b69a0:	b507      	push	{r0, r1, r2, lr}
   b69a2:	4613      	mov	r3, r2
    uint8_t value = 0;
   b69a4:	2200      	movs	r2, #0
   b69a6:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b69aa:	f10d 0207 	add.w	r2, sp, #7
   b69ae:	f7ff ffb1 	bl	b6914 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b69b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b69b6:	b003      	add	sp, #12
   b69b8:	f85d fb04 	ldr.w	pc, [sp], #4

000b69bc <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b69bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69c0:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b69c4:	4604      	mov	r4, r0
   b69c6:	460f      	mov	r7, r1
   b69c8:	4615      	mov	r5, r2
   b69ca:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b69cc:	f1b8 0f00 	cmp.w	r8, #0
   b69d0:	d002      	beq.n	b69d8 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b69d2:	6840      	ldr	r0, [r0, #4]
   b69d4:	f002 ffc2 	bl	b995c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b69d8:	7a21      	ldrb	r1, [r4, #8]
   b69da:	6860      	ldr	r0, [r4, #4]
   b69dc:	f002 ff9b 	bl	b9916 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b69e0:	6860      	ldr	r0, [r4, #4]
   b69e2:	6803      	ldr	r3, [r0, #0]
   b69e4:	4639      	mov	r1, r7
   b69e6:	689b      	ldr	r3, [r3, #8]
   b69e8:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b69ea:	442e      	add	r6, r5
   b69ec:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b69ee:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b69f0:	d005      	beq.n	b69fe <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b69f2:	6803      	ldr	r3, [r0, #0]
   b69f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b69f8:	689b      	ldr	r3, [r3, #8]
   b69fa:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b69fc:	e7f6      	b.n	b69ec <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b69fe:	2101      	movs	r1, #1
   b6a00:	f002 ffa8 	bl	b9954 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6a04:	4603      	mov	r3, r0
   b6a06:	b170      	cbz	r0, b6a26 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6a08:	4908      	ldr	r1, [pc, #32]	; (b6a2c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6a0a:	4809      	ldr	r0, [pc, #36]	; (b6a30 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6a0c:	463a      	mov	r2, r7
   b6a0e:	f7ff ff03 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6a12:	2500      	movs	r5, #0
    }

    if (lock) {
   b6a14:	f1b8 0f00 	cmp.w	r8, #0
   b6a18:	d002      	beq.n	b6a20 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6a1a:	6860      	ldr	r0, [r4, #4]
   b6a1c:	f002 ffa7 	bl	b996e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6a20:	4628      	mov	r0, r5
   b6a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6a26:	2501      	movs	r5, #1
   b6a28:	e7f4      	b.n	b6a14 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6a2a:	bf00      	nop
   b6a2c:	000bee77 	.word	0x000bee77
   b6a30:	2003e3d8 	.word	0x2003e3d8

000b6a34 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6a36:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6a3a:	9300      	str	r3, [sp, #0]
   b6a3c:	f10d 020f 	add.w	r2, sp, #15
   b6a40:	2301      	movs	r3, #1
   b6a42:	f7ff ffbb 	bl	b69bc <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6a46:	b005      	add	sp, #20
   b6a48:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a4c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6a4e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6a50:	460c      	mov	r4, r1
   b6a52:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6a54:	491a      	ldr	r1, [pc, #104]	; (b6ac0 <_ZN6AB18056setWDTEi+0x74>)
   b6a56:	481b      	ldr	r0, [pc, #108]	; (b6ac4 <_ZN6AB18056setWDTEi+0x78>)
   b6a58:	f7fd fc14 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6a5c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6a5e:	bfb8      	it	lt
   b6a60:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6a62:	b97c      	cbnz	r4, b6a84 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6a64:	2301      	movs	r3, #1
   b6a66:	4622      	mov	r2, r4
   b6a68:	211b      	movs	r1, #27
   b6a6a:	4628      	mov	r0, r5
   b6a6c:	f7ff ffe2 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6a70:	4915      	ldr	r1, [pc, #84]	; (b6ac8 <_ZN6AB18056setWDTEi+0x7c>)
   b6a72:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6a74:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6a76:	4813      	ldr	r0, [pc, #76]	; (b6ac4 <_ZN6AB18056setWDTEi+0x78>)
   b6a78:	f7ff fedc 	bl	b6834 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6a7c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6a7e:	616c      	str	r4, [r5, #20]
}
   b6a80:	4630      	mov	r0, r6
   b6a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6a84:	2c03      	cmp	r4, #3
   b6a86:	dd19      	ble.n	b6abc <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6a88:	10a7      	asrs	r7, r4, #2
   b6a8a:	2f1f      	cmp	r7, #31
   b6a8c:	bfa8      	it	ge
   b6a8e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6a90:	00ba      	lsls	r2, r7, #2
   b6a92:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6a96:	2301      	movs	r3, #1
   b6a98:	b2d2      	uxtb	r2, r2
   b6a9a:	211b      	movs	r1, #27
   b6a9c:	4628      	mov	r0, r5
   b6a9e:	f7ff ffc9 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6aa2:	463a      	mov	r2, r7
   b6aa4:	4603      	mov	r3, r0
   b6aa6:	4909      	ldr	r1, [pc, #36]	; (b6acc <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6aa8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6aaa:	4806      	ldr	r0, [pc, #24]	; (b6ac4 <_ZN6AB18056setWDTEi+0x78>)
   b6aac:	f7ff fec2 	bl	b6834 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6ab0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6ab4:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6ab6:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6ab8:	616f      	str	r7, [r5, #20]
   b6aba:	e7e1      	b.n	b6a80 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6abc:	2701      	movs	r7, #1
   b6abe:	e7e7      	b.n	b6a90 <_ZN6AB18056setWDTEi+0x44>
   b6ac0:	000bee9c 	.word	0x000bee9c
   b6ac4:	2003e3d8 	.word	0x2003e3d8
   b6ac8:	000beea6 	.word	0x000beea6
   b6acc:	000beec2 	.word	0x000beec2

000b6ad0 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6ad0:	4b06      	ldr	r3, [pc, #24]	; (b6aec <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6ad2:	681a      	ldr	r2, [r3, #0]
   b6ad4:	b14a      	cbz	r2, b6aea <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6ad6:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6ada:	430b      	orrs	r3, r1
   b6adc:	d105      	bne.n	b6aea <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6ade:	68d3      	ldr	r3, [r2, #12]
   b6ae0:	b11b      	cbz	r3, b6aea <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6ae2:	2100      	movs	r1, #0
   b6ae4:	4610      	mov	r0, r2
   b6ae6:	f7ff bfb1 	b.w	b6a4c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6aea:	4770      	bx	lr
   b6aec:	2003e3dc 	.word	0x2003e3dc

000b6af0 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6af0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6af4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6af8:	4605      	mov	r5, r0
   b6afa:	4616      	mov	r6, r2
   b6afc:	461f      	mov	r7, r3
    if (lock) {
   b6afe:	f1b8 0f00 	cmp.w	r8, #0
   b6b02:	d004      	beq.n	b6b0e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6b04:	6840      	ldr	r0, [r0, #4]
   b6b06:	9101      	str	r1, [sp, #4]
   b6b08:	f002 ff28 	bl	b995c <_ZN7TwoWire4lockEv>
   b6b0c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6b0e:	9101      	str	r1, [sp, #4]
   b6b10:	2300      	movs	r3, #0
   b6b12:	f10d 020f 	add.w	r2, sp, #15
   b6b16:	4628      	mov	r0, r5
   b6b18:	f7ff fefc 	bl	b6914 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6b1c:	4604      	mov	r4, r0
   b6b1e:	b160      	cbz	r0, b6b3a <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6b20:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6b24:	ea03 0206 	and.w	r2, r3, r6
   b6b28:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6b2a:	4293      	cmp	r3, r2
   b6b2c:	d005      	beq.n	b6b3a <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6b2e:	9901      	ldr	r1, [sp, #4]
   b6b30:	2300      	movs	r3, #0
   b6b32:	4628      	mov	r0, r5
   b6b34:	f7ff ff7e 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
   b6b38:	4604      	mov	r4, r0
    if (lock) {
   b6b3a:	f1b8 0f00 	cmp.w	r8, #0
   b6b3e:	d002      	beq.n	b6b46 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6b40:	6868      	ldr	r0, [r5, #4]
   b6b42:	f002 ff14 	bl	b996e <_ZN7TwoWire6unlockEv>
}
   b6b46:	4620      	mov	r0, r4
   b6b48:	b004      	add	sp, #16
   b6b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6b4e <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6b4e:	b513      	push	{r0, r1, r4, lr}
   b6b50:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6b52:	f10d 0207 	add.w	r2, sp, #7
   b6b56:	f7ff fedd 	bl	b6914 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6b5a:	b128      	cbz	r0, b6b68 <_ZN6AB180510isBitClearEhhb+0x1a>
   b6b5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6b60:	421c      	tst	r4, r3
   b6b62:	bf0c      	ite	eq
   b6b64:	2001      	moveq	r0, #1
   b6b66:	2000      	movne	r0, #0
}
   b6b68:	b002      	add	sp, #8
   b6b6a:	bd10      	pop	{r4, pc}

000b6b6c <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6b6c:	b513      	push	{r0, r1, r4, lr}
   b6b6e:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6b70:	f10d 0207 	add.w	r2, sp, #7
   b6b74:	f7ff fece 	bl	b6914 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6b78:	b128      	cbz	r0, b6b86 <_ZN6AB18058isBitSetEhhb+0x1a>
   b6b7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6b7e:	421c      	tst	r4, r3
   b6b80:	bf14      	ite	ne
   b6b82:	2001      	movne	r0, #1
   b6b84:	2000      	moveq	r0, #0
}
   b6b86:	b002      	add	sp, #8
   b6b88:	bd10      	pop	{r4, pc}

000b6b8a <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6b8a:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6b8c:	43d2      	mvns	r2, r2
   b6b8e:	9300      	str	r3, [sp, #0]
   b6b90:	b2d2      	uxtb	r2, r2
   b6b92:	2300      	movs	r3, #0
   b6b94:	f7ff ffac 	bl	b6af0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6b98:	b003      	add	sp, #12
   b6b9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6ba0 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6ba2:	2301      	movs	r3, #1
   b6ba4:	f10d 0207 	add.w	r2, sp, #7
   b6ba8:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6baa:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6bac:	f7ff feb2 	bl	b6914 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6bb0:	4605      	mov	r5, r0
   b6bb2:	b938      	cbnz	r0, b6bc4 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6bb4:	491e      	ldr	r1, [pc, #120]	; (b6c30 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6bb6:	481f      	ldr	r0, [pc, #124]	; (b6c34 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6bb8:	22ad      	movs	r2, #173	; 0xad
   b6bba:	f7ff fe2d 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
}
   b6bbe:	4628      	mov	r0, r5
   b6bc0:	b003      	add	sp, #12
   b6bc2:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6bc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6bc8:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6bcc:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6bd0:	d00b      	beq.n	b6bea <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6bd2:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6bd4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6bd6:	210f      	movs	r1, #15
   b6bd8:	4620      	mov	r0, r4
   b6bda:	f7ff ffd6 	bl	b6b8a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b6bde:	4a16      	ldr	r2, [pc, #88]	; (b6c38 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6be0:	4916      	ldr	r1, [pc, #88]	; (b6c3c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6be2:	4814      	ldr	r0, [pc, #80]	; (b6c34 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6be4:	f7fd fb4e 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b6be8:	e7e9      	b.n	b6bbe <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6bea:	2208      	movs	r2, #8
   b6bec:	2117      	movs	r1, #23
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f7ff ffbc 	bl	b6b6c <_ZN6AB18058isBitSetEhhb>
   b6bf4:	b118      	cbz	r0, b6bfe <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6bf6:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6bf8:	4a11      	ldr	r2, [pc, #68]	; (b6c40 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6bfa:	61e3      	str	r3, [r4, #28]
   b6bfc:	e7f0      	b.n	b6be0 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6c02:	071a      	lsls	r2, r3, #28
   b6c04:	d509      	bpl.n	b6c1a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6c06:	2303      	movs	r3, #3
   b6c08:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6c0a:	2208      	movs	r2, #8
   b6c0c:	2301      	movs	r3, #1
   b6c0e:	210f      	movs	r1, #15
   b6c10:	4620      	mov	r0, r4
   b6c12:	f7ff ffba 	bl	b6b8a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6c16:	4a0b      	ldr	r2, [pc, #44]	; (b6c44 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6c18:	e7e2      	b.n	b6be0 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6c1a:	075b      	lsls	r3, r3, #29
   b6c1c:	d5cf      	bpl.n	b6bbe <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6c1e:	2204      	movs	r2, #4
   b6c20:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6c22:	2301      	movs	r3, #1
   b6c24:	210f      	movs	r1, #15
   b6c26:	4620      	mov	r0, r4
   b6c28:	f7ff ffaf 	bl	b6b8a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6c2c:	4a06      	ldr	r2, [pc, #24]	; (b6c48 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6c2e:	e7d7      	b.n	b6be0 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6c30:	000bef15 	.word	0x000bef15
   b6c34:	2003e3d8 	.word	0x2003e3d8
   b6c38:	000beee6 	.word	0x000beee6
   b6c3c:	000bef34 	.word	0x000bef34
   b6c40:	000beeef 	.word	0x000beeef
   b6c44:	000beeff 	.word	0x000beeff
   b6c48:	000bef0f 	.word	0x000bef0f

000b6c4c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6c4c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6c4e:	9300      	str	r3, [sp, #0]
   b6c50:	4613      	mov	r3, r2
   b6c52:	22ff      	movs	r2, #255	; 0xff
   b6c54:	f7ff ff4c 	bl	b6af0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6c58:	b003      	add	sp, #12
   b6c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6c60 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c62:	460f      	mov	r7, r1
   b6c64:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6c66:	2301      	movs	r3, #1
   b6c68:	2200      	movs	r2, #0
   b6c6a:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6c6c:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6c6e:	f7ff fee1 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6c72:	4604      	mov	r4, r0
   b6c74:	b938      	cbnz	r0, b6c86 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6c76:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6c7a:	491f      	ldr	r1, [pc, #124]	; (b6cf8 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6c7c:	481f      	ldr	r0, [pc, #124]	; (b6cfc <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6c7e:	f7ff fdcb 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
}
   b6c82:	4620      	mov	r0, r4
   b6c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6c86:	2301      	movs	r3, #1
   b6c88:	2223      	movs	r2, #35	; 0x23
   b6c8a:	2118      	movs	r1, #24
   b6c8c:	4628      	mov	r0, r5
   b6c8e:	f7ff fed1 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6c92:	4604      	mov	r4, r0
   b6c94:	b910      	cbnz	r0, b6c9c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6c96:	f240 229b 	movw	r2, #667	; 0x29b
   b6c9a:	e7ee      	b.n	b6c7a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6c9c:	2fff      	cmp	r7, #255	; 0xff
   b6c9e:	bfa8      	it	ge
   b6ca0:	27ff      	movge	r7, #255	; 0xff
   b6ca2:	2f01      	cmp	r7, #1
   b6ca4:	bfb8      	it	lt
   b6ca6:	2701      	movlt	r7, #1
   b6ca8:	2301      	movs	r3, #1
   b6caa:	b2fa      	uxtb	r2, r7
   b6cac:	2119      	movs	r1, #25
   b6cae:	4628      	mov	r0, r5
   b6cb0:	f7ff fec0 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6cb4:	4604      	mov	r4, r0
   b6cb6:	b910      	cbnz	r0, b6cbe <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6cb8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6cbc:	e7dd      	b.n	b6c7a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b6cbe:	2301      	movs	r3, #1
   b6cc0:	2208      	movs	r2, #8
   b6cc2:	2112      	movs	r1, #18
   b6cc4:	4628      	mov	r0, r5
   b6cc6:	f7ff ffc1 	bl	b6c4c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6cca:	4604      	mov	r4, r0
   b6ccc:	b910      	cbnz	r0, b6cd4 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b6cce:	f240 22af 	movw	r2, #687	; 0x2af
   b6cd2:	e7d2      	b.n	b6c7a <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6cd4:	2e00      	cmp	r6, #0
   b6cd6:	bf14      	ite	ne
   b6cd8:	2203      	movne	r2, #3
   b6cda:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6cdc:	2301      	movs	r3, #1
   b6cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6ce2:	2118      	movs	r1, #24
   b6ce4:	4628      	mov	r0, r5
   b6ce6:	f7ff fea5 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6cea:	4604      	mov	r4, r0
   b6cec:	2800      	cmp	r0, #0
   b6cee:	d1c8      	bne.n	b6c82 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6cf0:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6cf4:	e7c1      	b.n	b6c7a <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6cf6:	bf00      	nop
   b6cf8:	000bef45 	.word	0x000bef45
   b6cfc:	2003e3d8 	.word	0x2003e3d8

000b6d00 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6d04:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6d06:	4605      	mov	r5, r0
   b6d08:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6d0a:	484f      	ldr	r0, [pc, #316]	; (b6e48 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6d0c:	494f      	ldr	r1, [pc, #316]	; (b6e4c <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6d0e:	f7fd fab9 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b6d12:	2100      	movs	r1, #0
   b6d14:	4628      	mov	r0, r5
   b6d16:	f7ff fe99 	bl	b6a4c <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6d1a:	4604      	mov	r4, r0
   b6d1c:	b948      	cbnz	r0, b6d32 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6d1e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6d22:	494b      	ldr	r1, [pc, #300]	; (b6e50 <_ZN6AB180513deepPowerDownEi+0x150>)
   b6d24:	4848      	ldr	r0, [pc, #288]	; (b6e48 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6d26:	f7ff fd77 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
}
   b6d2a:	4620      	mov	r0, r4
   b6d2c:	b003      	add	sp, #12
   b6d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b6d32:	2301      	movs	r3, #1
   b6d34:	461a      	mov	r2, r3
   b6d36:	2130      	movs	r1, #48	; 0x30
   b6d38:	4628      	mov	r0, r5
   b6d3a:	f7ff ff87 	bl	b6c4c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6d3e:	4604      	mov	r4, r0
   b6d40:	b910      	cbnz	r0, b6d48 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b6d42:	f240 2205 	movw	r2, #517	; 0x205
   b6d46:	e7ec      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6d48:	2210      	movs	r2, #16
   b6d4a:	2301      	movs	r3, #1
   b6d4c:	4611      	mov	r1, r2
   b6d4e:	4628      	mov	r0, r5
   b6d50:	f7ff ff1b 	bl	b6b8a <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b6d54:	4604      	mov	r4, r0
   b6d56:	b910      	cbnz	r0, b6d5e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6d58:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6d5c:	e7e1      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6d5e:	2301      	movs	r3, #1
   b6d60:	2226      	movs	r2, #38	; 0x26
   b6d62:	2113      	movs	r1, #19
   b6d64:	4628      	mov	r0, r5
   b6d66:	f7ff fe65 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6d6a:	4604      	mov	r4, r0
   b6d6c:	b910      	cbnz	r0, b6d74 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6d6e:	f240 2213 	movw	r2, #531	; 0x213
   b6d72:	e7d6      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6d74:	2601      	movs	r6, #1
   b6d76:	9600      	str	r6, [sp, #0]
   b6d78:	4633      	mov	r3, r6
   b6d7a:	22fc      	movs	r2, #252	; 0xfc
   b6d7c:	2111      	movs	r1, #17
   b6d7e:	4628      	mov	r0, r5
   b6d80:	f7ff feb6 	bl	b6af0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6d84:	4604      	mov	r4, r0
   b6d86:	b910      	cbnz	r0, b6d8e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6d88:	f240 221b 	movw	r2, #539	; 0x21b
   b6d8c:	e7c9      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6d8e:	2200      	movs	r2, #0
   b6d90:	4639      	mov	r1, r7
   b6d92:	4628      	mov	r0, r5
   b6d94:	f7ff ff64 	bl	b6c60 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6d98:	4604      	mov	r4, r0
   b6d9a:	b910      	cbnz	r0, b6da2 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6d9c:	f240 2222 	movw	r2, #546	; 0x222
   b6da0:	e7bf      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6da2:	9600      	str	r6, [sp, #0]
   b6da4:	2302      	movs	r3, #2
   b6da6:	2277      	movs	r2, #119	; 0x77
   b6da8:	2110      	movs	r1, #16
   b6daa:	4628      	mov	r0, r5
   b6dac:	f7ff fea0 	bl	b6af0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6db0:	4604      	mov	r4, r0
   b6db2:	b910      	cbnz	r0, b6dba <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6db4:	f240 222b 	movw	r2, #555	; 0x22b
   b6db8:	e7b3      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6dba:	4633      	mov	r3, r6
   b6dbc:	2204      	movs	r2, #4
   b6dbe:	211c      	movs	r1, #28
   b6dc0:	4628      	mov	r0, r5
   b6dc2:	f7ff ff43 	bl	b6c4c <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6dc6:	4604      	mov	r4, r0
   b6dc8:	b910      	cbnz	r0, b6dd0 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6dca:	f240 2232 	movw	r2, #562	; 0x232
   b6dce:	e7a8      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6dd0:	9600      	str	r6, [sp, #0]
   b6dd2:	2318      	movs	r3, #24
   b6dd4:	22e3      	movs	r2, #227	; 0xe3
   b6dd6:	2111      	movs	r1, #17
   b6dd8:	4628      	mov	r0, r5
   b6dda:	f7ff fe89 	bl	b6af0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6dde:	4604      	mov	r4, r0
   b6de0:	b910      	cbnz	r0, b6de8 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6de2:	f240 2239 	movw	r2, #569	; 0x239
   b6de6:	e79c      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6de8:	4633      	mov	r3, r6
   b6dea:	22c0      	movs	r2, #192	; 0xc0
   b6dec:	2117      	movs	r1, #23
   b6dee:	4628      	mov	r0, r5
   b6df0:	f7ff fe20 	bl	b6a34 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6df4:	4604      	mov	r4, r0
   b6df6:	b910      	cbnz	r0, b6dfe <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6df8:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6dfc:	e791      	b.n	b6d22 <_ZN6AB180513deepPowerDownEi+0x22>
   b6dfe:	f001 ff5f 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6e02:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6e58 <_ZN6AB180513deepPowerDownEi+0x158>
   b6e06:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6e48 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6e0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6e0e:	4606      	mov	r6, r0
   b6e10:	434f      	muls	r7, r1
   b6e12:	f001 ff55 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
   b6e16:	1b80      	subs	r0, r0, r6
   b6e18:	42b8      	cmp	r0, r7
   b6e1a:	d20e      	bcs.n	b6e3a <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6e1c:	2201      	movs	r2, #1
   b6e1e:	2117      	movs	r1, #23
   b6e20:	4628      	mov	r0, r5
   b6e22:	f7ff fdbd 	bl	b69a0 <_ZN6AB180512readRegisterEhb>
   b6e26:	4649      	mov	r1, r9
   b6e28:	4602      	mov	r2, r0
   b6e2a:	4640      	mov	r0, r8
   b6e2c:	f7fd fa2a 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6e34:	f002 faee 	bl	b9414 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6e38:	e7eb      	b.n	b6e12 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6e3a:	4906      	ldr	r1, [pc, #24]	; (b6e54 <_ZN6AB180513deepPowerDownEi+0x154>)
   b6e3c:	4802      	ldr	r0, [pc, #8]	; (b6e48 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6e3e:	f7ff fceb 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6e42:	f004 fc8e 	bl	bb762 <_ZN11SystemClass5resetEv>
    return true;
   b6e46:	e770      	b.n	b6d2a <_ZN6AB180513deepPowerDownEi+0x2a>
   b6e48:	2003e3d8 	.word	0x2003e3d8
   b6e4c:	000bef70 	.word	0x000bef70
   b6e50:	000bef65 	.word	0x000bef65
   b6e54:	000bef96 	.word	0x000bef96
   b6e58:	000bef81 	.word	0x000bef81

000b6e5c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6e5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6e60:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6e64:	4605      	mov	r5, r0
   b6e66:	460c      	mov	r4, r1
   b6e68:	4691      	mov	r9, r2
   b6e6a:	461f      	mov	r7, r3
    if (lock) {
   b6e6c:	f1ba 0f00 	cmp.w	sl, #0
   b6e70:	d002      	beq.n	b6e78 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6e72:	6840      	ldr	r0, [r0, #4]
   b6e74:	f002 fd72 	bl	b995c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6e78:	b307      	cbz	r7, b6ebc <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6e7a:	2f20      	cmp	r7, #32
   b6e7c:	463e      	mov	r6, r7
   b6e7e:	bf28      	it	cs
   b6e80:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6e82:	2c7f      	cmp	r4, #127	; 0x7f
   b6e84:	d826      	bhi.n	b6ed4 <_ZN6AB18057readRamEjPhjb+0x78>
   b6e86:	1933      	adds	r3, r6, r4
   b6e88:	2b80      	cmp	r3, #128	; 0x80
   b6e8a:	d901      	bls.n	b6e90 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6e8c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6e90:	2301      	movs	r3, #1
   b6e92:	2204      	movs	r2, #4
   b6e94:	213f      	movs	r1, #63	; 0x3f
   b6e96:	4628      	mov	r0, r5
   b6e98:	f7ff fe77 	bl	b6b8a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6e9c:	2300      	movs	r3, #0
   b6e9e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6ea2:	9300      	str	r3, [sp, #0]
   b6ea4:	464a      	mov	r2, r9
   b6ea6:	4633      	mov	r3, r6
   b6ea8:	b2c9      	uxtb	r1, r1
   b6eaa:	4628      	mov	r0, r5
   b6eac:	f7ff fce4 	bl	b6878 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6eb0:	4680      	mov	r8, r0
   b6eb2:	b128      	cbz	r0, b6ec0 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6eb4:	4434      	add	r4, r6
        dataLen -= count;
   b6eb6:	1bbf      	subs	r7, r7, r6
        data += count;
   b6eb8:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6eba:	e7dd      	b.n	b6e78 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6ebc:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6ec0:	f1ba 0f00 	cmp.w	sl, #0
   b6ec4:	d002      	beq.n	b6ecc <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6ec6:	6868      	ldr	r0, [r5, #4]
   b6ec8:	f002 fd51 	bl	b996e <_ZN7TwoWire6unlockEv>
}
   b6ecc:	4640      	mov	r0, r8
   b6ece:	b002      	add	sp, #8
   b6ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6ed4:	2301      	movs	r3, #1
   b6ed6:	2204      	movs	r2, #4
   b6ed8:	213f      	movs	r1, #63	; 0x3f
   b6eda:	4628      	mov	r0, r5
   b6edc:	f7ff feb6 	bl	b6c4c <_ZN6AB180514setRegisterBitEhhb>
   b6ee0:	e7dc      	b.n	b6e9c <_ZN6AB18057readRamEjPhjb+0x40>

000b6ee2 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6ee2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ee6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6eea:	4605      	mov	r5, r0
   b6eec:	460c      	mov	r4, r1
   b6eee:	4691      	mov	r9, r2
   b6ef0:	461f      	mov	r7, r3
    if (lock) {
   b6ef2:	f1ba 0f00 	cmp.w	sl, #0
   b6ef6:	d002      	beq.n	b6efe <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6ef8:	6840      	ldr	r0, [r0, #4]
   b6efa:	f002 fd2f 	bl	b995c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6efe:	b307      	cbz	r7, b6f42 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6f00:	2f1f      	cmp	r7, #31
   b6f02:	463e      	mov	r6, r7
   b6f04:	bf28      	it	cs
   b6f06:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6f08:	2c7f      	cmp	r4, #127	; 0x7f
   b6f0a:	d826      	bhi.n	b6f5a <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6f0c:	1933      	adds	r3, r6, r4
   b6f0e:	2b80      	cmp	r3, #128	; 0x80
   b6f10:	d901      	bls.n	b6f16 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6f12:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6f16:	2301      	movs	r3, #1
   b6f18:	2204      	movs	r2, #4
   b6f1a:	213f      	movs	r1, #63	; 0x3f
   b6f1c:	4628      	mov	r0, r5
   b6f1e:	f7ff fe34 	bl	b6b8a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6f22:	2300      	movs	r3, #0
   b6f24:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6f28:	9300      	str	r3, [sp, #0]
   b6f2a:	464a      	mov	r2, r9
   b6f2c:	4633      	mov	r3, r6
   b6f2e:	b2c9      	uxtb	r1, r1
   b6f30:	4628      	mov	r0, r5
   b6f32:	f7ff fd43 	bl	b69bc <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6f36:	4680      	mov	r8, r0
   b6f38:	b128      	cbz	r0, b6f46 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6f3a:	4434      	add	r4, r6
        dataLen -= count;
   b6f3c:	1bbf      	subs	r7, r7, r6
        data += count;
   b6f3e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6f40:	e7dd      	b.n	b6efe <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6f42:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6f46:	f1ba 0f00 	cmp.w	sl, #0
   b6f4a:	d002      	beq.n	b6f52 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6f4c:	6868      	ldr	r0, [r5, #4]
   b6f4e:	f002 fd0e 	bl	b996e <_ZN7TwoWire6unlockEv>
}
   b6f52:	4640      	mov	r0, r8
   b6f54:	b002      	add	sp, #8
   b6f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6f5a:	2301      	movs	r3, #1
   b6f5c:	2204      	movs	r2, #4
   b6f5e:	213f      	movs	r1, #63	; 0x3f
   b6f60:	4628      	mov	r0, r5
   b6f62:	f7ff fe73 	bl	b6c4c <_ZN6AB180514setRegisterBitEhhb>
   b6f66:	e7dc      	b.n	b6f22 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6f68 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6f68:	b530      	push	{r4, r5, lr}
   b6f6a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6f6c:	680d      	ldr	r5, [r1, #0]
   b6f6e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6f72:	9503      	str	r5, [sp, #12]
   b6f74:	684d      	ldr	r5, [r1, #4]
   b6f76:	9502      	str	r5, [sp, #8]
   b6f78:	688d      	ldr	r5, [r1, #8]
   b6f7a:	9501      	str	r5, [sp, #4]
   b6f7c:	68c9      	ldr	r1, [r1, #12]
   b6f7e:	9100      	str	r1, [sp, #0]
   b6f80:	3301      	adds	r3, #1
   b6f82:	4904      	ldr	r1, [pc, #16]	; (b6f94 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6f84:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6f88:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6f8a:	f004 fb83 	bl	bb694 <_ZN6String6formatEPKcz>
}
   b6f8e:	4620      	mov	r0, r4
   b6f90:	b005      	add	sp, #20
   b6f92:	bd30      	pop	{r4, r5, pc}
   b6f94:	000befa8 	.word	0x000befa8

000b6f98 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6f98:	0903      	lsrs	r3, r0, #4
}
   b6f9a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6f9c:	f000 000f 	and.w	r0, r0, #15
}
   b6fa0:	fb02 0003 	mla	r0, r2, r3, r0
   b6fa4:	4770      	bx	lr

000b6fa6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6fa6:	b538      	push	{r3, r4, r5, lr}
   b6fa8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6faa:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6fac:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b6fae:	f7ff fff3 	bl	b6f98 <_ZN6AB180510bcdToValueEh>
   b6fb2:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6fb4:	7860      	ldrb	r0, [r4, #1]
   b6fb6:	f7ff ffef 	bl	b6f98 <_ZN6AB180510bcdToValueEh>
   b6fba:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6fbc:	78a0      	ldrb	r0, [r4, #2]
   b6fbe:	f7ff ffeb 	bl	b6f98 <_ZN6AB180510bcdToValueEh>
   b6fc2:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6fc4:	78e0      	ldrb	r0, [r4, #3]
   b6fc6:	f7ff ffe7 	bl	b6f98 <_ZN6AB180510bcdToValueEh>
   b6fca:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6fcc:	7920      	ldrb	r0, [r4, #4]
   b6fce:	f7ff ffe3 	bl	b6f98 <_ZN6AB180510bcdToValueEh>
   b6fd2:	3801      	subs	r0, #1
   b6fd4:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6fd6:	b92d      	cbnz	r5, b6fe4 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6fd8:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6fda:	7828      	ldrb	r0, [r5, #0]
   b6fdc:	f7ff ffdc 	bl	b6f98 <_ZN6AB180510bcdToValueEh>
   b6fe0:	6188      	str	r0, [r1, #24]
}
   b6fe2:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6fe4:	7960      	ldrb	r0, [r4, #5]
   b6fe6:	f7ff ffd7 	bl	b6f98 <_ZN6AB180510bcdToValueEh>
   b6fea:	3064      	adds	r0, #100	; 0x64
   b6fec:	1da5      	adds	r5, r4, #6
   b6fee:	6148      	str	r0, [r1, #20]
   b6ff0:	e7f3      	b.n	b6fda <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6ff4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6ff4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6ff6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6ff8:	b088      	sub	sp, #32
   b6ffa:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6ffc:	461a      	mov	r2, r3
   b6ffe:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7000:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7002:	f7ff fda4 	bl	b6b4e <_ZN6AB180510isBitClearEhhb>
   b7006:	b1f0      	cbz	r0, b7046 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7008:	2308      	movs	r3, #8
   b700a:	2601      	movs	r6, #1
   b700c:	4620      	mov	r0, r4
   b700e:	9600      	str	r6, [sp, #0]
   b7010:	eb0d 0203 	add.w	r2, sp, r3
   b7014:	2100      	movs	r1, #0
   b7016:	f7ff fc2f 	bl	b6878 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b701a:	4604      	mov	r4, r0
   b701c:	b198      	cbz	r0, b7046 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b701e:	4632      	mov	r2, r6
   b7020:	4629      	mov	r1, r5
   b7022:	f10d 0009 	add.w	r0, sp, #9
   b7026:	f7ff ffbe 	bl	b6fa6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b702a:	a804      	add	r0, sp, #16
   b702c:	f7ff ff9c 	bl	b6f68 <_ZN6AB180510tmToStringEPK2tm>
   b7030:	4808      	ldr	r0, [pc, #32]	; (b7054 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b7032:	9a04      	ldr	r2, [sp, #16]
   b7034:	4908      	ldr	r1, [pc, #32]	; (b7058 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b7036:	f7fd f925 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b703a:	a804      	add	r0, sp, #16
   b703c:	f004 fa62 	bl	bb504 <_ZN6StringD1Ev>
}
   b7040:	4620      	mov	r0, r4
   b7042:	b008      	add	sp, #32
   b7044:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b7046:	2224      	movs	r2, #36	; 0x24
   b7048:	2100      	movs	r1, #0
   b704a:	4628      	mov	r0, r5
   b704c:	f006 fe88 	bl	bdd60 <memset>
   b7050:	2400      	movs	r4, #0
   b7052:	e7f5      	b.n	b7040 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7054:	2003e3d8 	.word	0x2003e3d8
   b7058:	000befc6 	.word	0x000befc6

000b705c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b705c:	b530      	push	{r4, r5, lr}
   b705e:	b08b      	sub	sp, #44	; 0x2c
   b7060:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b7062:	a901      	add	r1, sp, #4
   b7064:	f7ff ffc6 	bl	b6ff4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b7068:	4604      	mov	r4, r0
   b706a:	b120      	cbz	r0, b7076 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b706c:	a801      	add	r0, sp, #4
   b706e:	f002 f9bd 	bl	b93ec <mktime>
   b7072:	e9c5 0100 	strd	r0, r1, [r5]
}
   b7076:	4620      	mov	r0, r4
   b7078:	b00b      	add	sp, #44	; 0x2c
   b707a:	bd30      	pop	{r4, r5, pc}

000b707c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b707c:	230a      	movs	r3, #10
   b707e:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b7082:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b7086:	fb91 f2f3 	sdiv	r2, r1, r3
   b708a:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b708e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b7092:	b2c0      	uxtb	r0, r0
   b7094:	4770      	bx	lr

000b7096 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7096:	b570      	push	{r4, r5, r6, lr}
   b7098:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b709a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b709c:	460c      	mov	r4, r1
   b709e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b70a0:	f7ff ffec 	bl	b707c <_ZN6AB180510valueToBcdEi>
   b70a4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b70a6:	6868      	ldr	r0, [r5, #4]
   b70a8:	f7ff ffe8 	bl	b707c <_ZN6AB180510valueToBcdEi>
   b70ac:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b70ae:	68a8      	ldr	r0, [r5, #8]
   b70b0:	f7ff ffe4 	bl	b707c <_ZN6AB180510valueToBcdEi>
   b70b4:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b70b6:	68e8      	ldr	r0, [r5, #12]
   b70b8:	f7ff ffe0 	bl	b707c <_ZN6AB180510valueToBcdEi>
   b70bc:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b70be:	6928      	ldr	r0, [r5, #16]
   b70c0:	3001      	adds	r0, #1
   b70c2:	f7ff ffdb 	bl	b707c <_ZN6AB180510valueToBcdEi>
   b70c6:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b70c8:	b92e      	cbnz	r6, b70d6 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b70ca:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b70cc:	69a8      	ldr	r0, [r5, #24]
   b70ce:	f7ff ffd5 	bl	b707c <_ZN6AB180510valueToBcdEi>
   b70d2:	7030      	strb	r0, [r6, #0]
}
   b70d4:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b70d6:	696a      	ldr	r2, [r5, #20]
   b70d8:	2364      	movs	r3, #100	; 0x64
   b70da:	fb92 f0f3 	sdiv	r0, r2, r3
   b70de:	fb03 2010 	mls	r0, r3, r0, r2
   b70e2:	f7ff ffcb 	bl	b707c <_ZN6AB180510valueToBcdEi>
   b70e6:	1da6      	adds	r6, r4, #6
   b70e8:	7160      	strb	r0, [r4, #5]
   b70ea:	e7ef      	b.n	b70cc <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b70ec <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b70ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b70ee:	b087      	sub	sp, #28
   b70f0:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b70f2:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b70f4:	4616      	mov	r6, r2
   b70f6:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b70f8:	f7ff ff36 	bl	b6f68 <_ZN6AB180510tmToStringEPK2tm>
   b70fc:	481e      	ldr	r0, [pc, #120]	; (b7178 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b70fe:	9a02      	ldr	r2, [sp, #8]
   b7100:	491e      	ldr	r1, [pc, #120]	; (b717c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b7102:	f7fd f8bf 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b7106:	a802      	add	r0, sp, #8
   b7108:	f004 f9fc 	bl	bb504 <_ZN6StringD1Ev>
    if (lock) {
   b710c:	b116      	cbz	r6, b7114 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b710e:	6868      	ldr	r0, [r5, #4]
   b7110:	f002 fc24 	bl	b995c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7114:	4620      	mov	r0, r4
   b7116:	2201      	movs	r2, #1
   b7118:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b711c:	2700      	movs	r7, #0
   b711e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b7122:	f7ff ffb8 	bl	b7096 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b7126:	2301      	movs	r3, #1
   b7128:	461a      	mov	r2, r3
   b712a:	2110      	movs	r1, #16
   b712c:	4628      	mov	r0, r5
   b712e:	f7ff fd8d 	bl	b6c4c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b7132:	4604      	mov	r4, r0
   b7134:	b1e8      	cbz	r0, b7172 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b7136:	2308      	movs	r3, #8
   b7138:	9700      	str	r7, [sp, #0]
   b713a:	eb0d 0203 	add.w	r2, sp, r3
   b713e:	4639      	mov	r1, r7
   b7140:	4628      	mov	r0, r5
   b7142:	f7ff fc3b 	bl	b69bc <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b7146:	4604      	mov	r4, r0
   b7148:	b160      	cbz	r0, b7164 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b714a:	2301      	movs	r3, #1
   b714c:	461a      	mov	r2, r3
   b714e:	2110      	movs	r1, #16
   b7150:	4628      	mov	r0, r5
   b7152:	f7ff fd1a 	bl	b6b8a <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b7156:	b116      	cbz	r6, b715e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b7158:	6868      	ldr	r0, [r5, #4]
   b715a:	f002 fc08 	bl	b996e <_ZN7TwoWire6unlockEv>
}
   b715e:	4620      	mov	r0, r4
   b7160:	b007      	add	sp, #28
   b7162:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b7164:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b7168:	4905      	ldr	r1, [pc, #20]	; (b7180 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b716a:	4803      	ldr	r0, [pc, #12]	; (b7178 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b716c:	f7ff fb54 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
   b7170:	e7f1      	b.n	b7156 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b7172:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b7176:	e7f7      	b.n	b7168 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b7178:	2003e3d8 	.word	0x2003e3d8
   b717c:	000befd4 	.word	0x000befd4
   b7180:	000befe2 	.word	0x000befe2

000b7184 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b7184:	b513      	push	{r0, r1, r4, lr}
   b7186:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b7188:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b718a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b718e:	f006 fd99 	bl	bdcc4 <gmtime>
    return setRtcFromTm(tm, lock);
   b7192:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b7196:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b7198:	4620      	mov	r0, r4
   b719a:	f7ff ffa7 	bl	b70ec <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b719e:	b002      	add	sp, #8
   b71a0:	bd10      	pop	{r4, pc}
	...

000b71a4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b71a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b71a6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b71a8:	b089      	sub	sp, #36	; 0x24
   b71aa:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b71ac:	bb75      	cbnz	r5, b720c <_ZN6AB18054loopEv+0x68>
   b71ae:	f004 fc9d 	bl	bbaec <_ZN9TimeClass7isValidEv>
   b71b2:	b358      	cbz	r0, b720c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b71b4:	2600      	movs	r6, #0
   b71b6:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b71b8:	a904      	add	r1, sp, #16
   b71ba:	4628      	mov	r0, r5
        tm = 0;
   b71bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b71c0:	f002 f834 	bl	b922c <spark_sync_time_last>
   b71c4:	b310      	cbz	r0, b720c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b71c6:	2501      	movs	r5, #1
   b71c8:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b71ca:	f004 fcac 	bl	bbb26 <_ZN9TimeClass3nowEv>
   b71ce:	17c3      	asrs	r3, r0, #31
   b71d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b71d4:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b71d6:	9500      	str	r5, [sp, #0]
   b71d8:	4620      	mov	r0, r4
   b71da:	f7ff ffd3 	bl	b7184 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b71de:	a902      	add	r1, sp, #8
   b71e0:	4620      	mov	r0, r4
        time = 0;
   b71e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b71e6:	f7ff ff39 	bl	b705c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b71ea:	4b13      	ldr	r3, [pc, #76]	; (b7238 <_ZN6AB18054loopEv+0x94>)
   b71ec:	4913      	ldr	r1, [pc, #76]	; (b723c <_ZN6AB18054loopEv+0x98>)
   b71ee:	681b      	ldr	r3, [r3, #0]
   b71f0:	9300      	str	r3, [sp, #0]
   b71f2:	a804      	add	r0, sp, #16
   b71f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b71f8:	f004 fc36 	bl	bba68 <_ZN9TimeClass6formatExPKc>
   b71fc:	4810      	ldr	r0, [pc, #64]	; (b7240 <_ZN6AB18054loopEv+0x9c>)
   b71fe:	9a04      	ldr	r2, [sp, #16]
   b7200:	4910      	ldr	r1, [pc, #64]	; (b7244 <_ZN6AB18054loopEv+0xa0>)
   b7202:	f7fd f83f 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b7206:	a804      	add	r0, sp, #16
   b7208:	f004 f97c 	bl	bb504 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b720c:	6963      	ldr	r3, [r4, #20]
   b720e:	b18b      	cbz	r3, b7234 <_ZN6AB18054loopEv+0x90>
   b7210:	f001 fd56 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7214:	6923      	ldr	r3, [r4, #16]
   b7216:	1ac0      	subs	r0, r0, r3
   b7218:	6963      	ldr	r3, [r4, #20]
   b721a:	4298      	cmp	r0, r3
   b721c:	d30a      	bcc.n	b7234 <_ZN6AB18054loopEv+0x90>
   b721e:	f001 fd4f 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b7222:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b7226:	6120      	str	r0, [r4, #16]
            setWDT();
   b7228:	4620      	mov	r0, r4
}
   b722a:	b009      	add	sp, #36	; 0x24
   b722c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b7230:	f7ff bc0c 	b.w	b6a4c <_ZN6AB18056setWDTEi>
}
   b7234:	b009      	add	sp, #36	; 0x24
   b7236:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7238:	2003dec8 	.word	0x2003dec8
   b723c:	2003e6ac 	.word	0x2003e6ac
   b7240:	2003e3d8 	.word	0x2003e3d8
   b7244:	000beffd 	.word	0x000beffd

000b7248 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b7248:	b530      	push	{r4, r5, lr}
   b724a:	4604      	mov	r4, r0
   b724c:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b724e:	b111      	cbz	r1, b7256 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b7250:	6840      	ldr	r0, [r0, #4]
   b7252:	f002 fb31 	bl	b98b8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b7256:	4620      	mov	r0, r4
   b7258:	f7ff fb64 	bl	b6924 <_ZN6AB180510detectChipEv>
   b725c:	ad06      	add	r5, sp, #24
   b725e:	2800      	cmp	r0, #0
   b7260:	d037      	beq.n	b72d2 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b7262:	4620      	mov	r0, r4
   b7264:	f7ff fc9c 	bl	b6ba0 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b7268:	2301      	movs	r3, #1
   b726a:	461a      	mov	r2, r3
   b726c:	2110      	movs	r1, #16
   b726e:	4620      	mov	r0, r4
   b7270:	f7ff fc6d 	bl	b6b4e <_ZN6AB180510isBitClearEhhb>
   b7274:	b1d8      	cbz	r0, b72ae <_ZN6AB18055setupEb+0x66>
   b7276:	f004 fc39 	bl	bbaec <_ZN9TimeClass7isValidEv>
   b727a:	b9c0      	cbnz	r0, b72ae <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b727c:	a902      	add	r1, sp, #8
   b727e:	4620      	mov	r0, r4
   b7280:	f7ff feec 	bl	b705c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b7284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b7288:	f004 fb35 	bl	bb8f6 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b728c:	4b13      	ldr	r3, [pc, #76]	; (b72dc <_ZN6AB18055setupEb+0x94>)
   b728e:	4914      	ldr	r1, [pc, #80]	; (b72e0 <_ZN6AB18055setupEb+0x98>)
   b7290:	681b      	ldr	r3, [r3, #0]
   b7292:	9300      	str	r3, [sp, #0]
   b7294:	4628      	mov	r0, r5
   b7296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b729a:	f004 fbe5 	bl	bba68 <_ZN9TimeClass6formatExPKc>
   b729e:	4811      	ldr	r0, [pc, #68]	; (b72e4 <_ZN6AB18055setupEb+0x9c>)
   b72a0:	9a06      	ldr	r2, [sp, #24]
   b72a2:	4911      	ldr	r1, [pc, #68]	; (b72e8 <_ZN6AB18055setupEb+0xa0>)
   b72a4:	f7fc ffee 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
   b72a8:	4628      	mov	r0, r5
   b72aa:	f004 f92b 	bl	bb504 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b72ae:	4b0f      	ldr	r3, [pc, #60]	; (b72ec <_ZN6AB18055setupEb+0xa4>)
   b72b0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b72b2:	4b0f      	ldr	r3, [pc, #60]	; (b72f0 <_ZN6AB18055setupEb+0xa8>)
   b72b4:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b72b6:	4b0f      	ldr	r3, [pc, #60]	; (b72f4 <_ZN6AB18055setupEb+0xac>)
   b72b8:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b72ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b72be:	2300      	movs	r3, #0
   b72c0:	a802      	add	r0, sp, #8
   b72c2:	9500      	str	r5, [sp, #0]
   b72c4:	f7fd fc48 	bl	b4b58 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b72c8:	4628      	mov	r0, r5
   b72ca:	f7fc ff81 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
}
   b72ce:	b00b      	add	sp, #44	; 0x2c
   b72d0:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b72d2:	4909      	ldr	r1, [pc, #36]	; (b72f8 <_ZN6AB18055setupEb+0xb0>)
   b72d4:	4803      	ldr	r0, [pc, #12]	; (b72e4 <_ZN6AB18055setupEb+0x9c>)
   b72d6:	f7ff fa9f 	bl	b6818 <_ZNK5spark6Logger5errorEPKcz>
   b72da:	e7e8      	b.n	b72ae <_ZN6AB18055setupEb+0x66>
   b72dc:	2003dec8 	.word	0x2003dec8
   b72e0:	2003e6ac 	.word	0x2003e6ac
   b72e4:	2003e3d8 	.word	0x2003e3d8
   b72e8:	000bf013 	.word	0x000bf013
   b72ec:	000b6ad1 	.word	0x000b6ad1
   b72f0:	000b417f 	.word	0x000b417f
   b72f4:	000b416b 	.word	0x000b416b
   b72f8:	000bf030 	.word	0x000bf030

000b72fc <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b72fc:	4b01      	ldr	r3, [pc, #4]	; (b7304 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b72fe:	4a02      	ldr	r2, [pc, #8]	; (b7308 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b7300:	601a      	str	r2, [r3, #0]
}
   b7302:	4770      	bx	lr
   b7304:	2003e3d8 	.word	0x2003e3d8
   b7308:	000bf048 	.word	0x000bf048

000b730c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b730c:	4770      	bx	lr

000b730e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b730e:	b510      	push	{r4, lr}
}
   b7310:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b7312:	4604      	mov	r4, r0
}
   b7314:	f7fc fec3 	bl	b409e <_ZdlPvj>
   b7318:	4620      	mov	r0, r4
   b731a:	bd10      	pop	{r4, pc}

000b731c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b731c:	6803      	ldr	r3, [r0, #0]
   b731e:	b2c9      	uxtb	r1, r1
   b7320:	689b      	ldr	r3, [r3, #8]
   b7322:	4718      	bx	r3

000b7324 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b7324:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b7326:	4d03      	ldr	r5, [pc, #12]	; (b7334 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b7328:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b732c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b7330:	bd30      	pop	{r4, r5, pc}
   b7332:	bf00      	nop
   b7334:	000bf074 	.word	0x000bf074

000b7338 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b7338:	6840      	ldr	r0, [r0, #4]
   b733a:	f002 babd 	b.w	b98b8 <_ZN7TwoWire5beginEv>

000b733e <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b733e:	b510      	push	{r4, lr}
   b7340:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b7342:	6800      	ldr	r0, [r0, #0]
   b7344:	f002 fb13 	bl	b996e <_ZN7TwoWire6unlockEv>
   b7348:	4620      	mov	r0, r4
   b734a:	bd10      	pop	{r4, pc}

000b734c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b734c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7350:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7352:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7354:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b7356:	460d      	mov	r5, r1
   b7358:	4616      	mov	r6, r2
   b735a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b735c:	f002 fafe 	bl	b995c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b7360:	b1a7      	cbz	r7, b738c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7362:	68e1      	ldr	r1, [r4, #12]
   b7364:	6860      	ldr	r0, [r4, #4]
   b7366:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b736a:	f002 fad8 	bl	b991e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b736e:	0a29      	lsrs	r1, r5, #8
   b7370:	6860      	ldr	r0, [r4, #4]
   b7372:	f7ff ffd3 	bl	b731c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7376:	4629      	mov	r1, r5
   b7378:	6860      	ldr	r0, [r4, #4]
   b737a:	f7ff ffcf 	bl	b731c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b737e:	6860      	ldr	r0, [r4, #4]
   b7380:	2100      	movs	r1, #0
   b7382:	f002 fae7 	bl	b9954 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7386:	b148      	cbz	r0, b739c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b7388:	2400      	movs	r4, #0
   b738a:	e000      	b.n	b738e <_ZN6MB85RC8readDataEjPhj+0x42>
   b738c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b738e:	a801      	add	r0, sp, #4
   b7390:	f7ff ffd5 	bl	b733e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b7394:	4620      	mov	r0, r4
   b7396:	b003      	add	sp, #12
   b7398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b739c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b739e:	7b21      	ldrb	r1, [r4, #12]
   b73a0:	6860      	ldr	r0, [r4, #4]
   b73a2:	46b8      	mov	r8, r7
   b73a4:	bf28      	it	cs
   b73a6:	f04f 0820 	movcs.w	r8, #32
   b73aa:	2301      	movs	r3, #1
   b73ac:	4642      	mov	r2, r8
   b73ae:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b73b2:	f002 fa9e 	bl	b98f2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b73b6:	f004 fe3f 	bl	bc038 <_Z19__fetch_global_Wirev>
   b73ba:	6803      	ldr	r3, [r0, #0]
   b73bc:	691b      	ldr	r3, [r3, #16]
   b73be:	4798      	blx	r3
   b73c0:	4540      	cmp	r0, r8
   b73c2:	dbe1      	blt.n	b7388 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b73c4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b73c8:	f004 fe36 	bl	bc038 <_Z19__fetch_global_Wirev>
   b73cc:	6803      	ldr	r3, [r0, #0]
   b73ce:	695b      	ldr	r3, [r3, #20]
   b73d0:	4798      	blx	r3
   b73d2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b73d6:	454e      	cmp	r6, r9
   b73d8:	d1f6      	bne.n	b73c8 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b73da:	4445      	add	r5, r8
				dataLen--;
   b73dc:	eba7 0708 	sub.w	r7, r7, r8
   b73e0:	e7be      	b.n	b7360 <_ZN6MB85RC8readDataEjPhj+0x14>

000b73e2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b73e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b73e6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b73e8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b73ea:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b73ec:	460e      	mov	r6, r1
   b73ee:	4690      	mov	r8, r2
   b73f0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b73f2:	f002 fab3 	bl	b995c <_ZN7TwoWire4lockEv>
   b73f6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b73fa:	f1b9 0f00 	cmp.w	r9, #0
   b73fe:	d02a      	beq.n	b7456 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b7400:	b34d      	cbz	r5, b7456 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7402:	68e1      	ldr	r1, [r4, #12]
   b7404:	6860      	ldr	r0, [r4, #4]
   b7406:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b740a:	f002 fa88 	bl	b991e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b740e:	0a31      	lsrs	r1, r6, #8
   b7410:	6860      	ldr	r0, [r4, #4]
   b7412:	f7ff ff83 	bl	b731c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7416:	6860      	ldr	r0, [r4, #4]
   b7418:	4631      	mov	r1, r6
   b741a:	f7ff ff7f 	bl	b731c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b741e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b7422:	4647      	mov	r7, r8
   b7424:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b7428:	6860      	ldr	r0, [r4, #4]
   b742a:	f817 1b01 	ldrb.w	r1, [r7], #1
   b742e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b7430:	3d01      	subs	r5, #1
				wire.write(*data);
   b7432:	689b      	ldr	r3, [r3, #8]
   b7434:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7436:	4555      	cmp	r5, sl
   b7438:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b743c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b743e:	d001      	beq.n	b7444 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b7440:	2d00      	cmp	r5, #0
   b7442:	d1f1      	bne.n	b7428 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b7444:	6860      	ldr	r0, [r4, #4]
   b7446:	2101      	movs	r1, #1
   b7448:	f002 fa84 	bl	b9954 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b744c:	2800      	cmp	r0, #0
   b744e:	d0d7      	beq.n	b7400 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b7450:	f04f 0900 	mov.w	r9, #0
   b7454:	e7d1      	b.n	b73fa <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b7456:	a801      	add	r0, sp, #4
   b7458:	f7ff ff71 	bl	b733e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b745c:	4648      	mov	r0, r9
   b745e:	b003      	add	sp, #12
   b7460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7464 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7468:	b08b      	sub	sp, #44	; 0x2c
   b746a:	460e      	mov	r6, r1
   b746c:	4615      	mov	r5, r2
   b746e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b7470:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7472:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7474:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b7476:	f002 fa71 	bl	b995c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b747a:	42ae      	cmp	r6, r5
   b747c:	d229      	bcs.n	b74d2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b747e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b7480:	4425      	add	r5, r4
			while(numBytes > 0) {
   b7482:	b18c      	cbz	r4, b74a8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b7484:	2c1e      	cmp	r4, #30
   b7486:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b7488:	f8d8 3000 	ldr.w	r3, [r8]
   b748c:	bf28      	it	cs
   b748e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b7490:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b7492:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7496:	aa02      	add	r2, sp, #8
   b7498:	463b      	mov	r3, r7
   b749a:	4631      	mov	r1, r6
   b749c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b749e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b74a0:	47c8      	blx	r9
				if (!result) {
   b74a2:	b948      	cbnz	r0, b74b8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b74a4:	2400      	movs	r4, #0
   b74a6:	e000      	b.n	b74aa <_ZN6MB85RC8moveDataEjjj+0x46>
   b74a8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b74aa:	a801      	add	r0, sp, #4
   b74ac:	f7ff ff47 	bl	b733e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b74b0:	4620      	mov	r0, r4
   b74b2:	b00b      	add	sp, #44	; 0x2c
   b74b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b74b8:	f8d8 3000 	ldr.w	r3, [r8]
   b74bc:	aa02      	add	r2, sp, #8
   b74be:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b74c2:	4629      	mov	r1, r5
   b74c4:	463b      	mov	r3, r7
   b74c6:	4640      	mov	r0, r8
   b74c8:	47c8      	blx	r9
				if (!result) {
   b74ca:	2800      	cmp	r0, #0
   b74cc:	d0ea      	beq.n	b74a4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b74ce:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b74d0:	e7d7      	b.n	b7482 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b74d2:	d9e9      	bls.n	b74a8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b74d4:	2c00      	cmp	r4, #0
   b74d6:	d0e7      	beq.n	b74a8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b74d8:	f8d8 3000 	ldr.w	r3, [r8]
   b74dc:	2c1e      	cmp	r4, #30
   b74de:	4627      	mov	r7, r4
   b74e0:	bf28      	it	cs
   b74e2:	271e      	movcs	r7, #30
   b74e4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b74e8:	aa02      	add	r2, sp, #8
   b74ea:	463b      	mov	r3, r7
   b74ec:	4631      	mov	r1, r6
   b74ee:	4640      	mov	r0, r8
   b74f0:	47c8      	blx	r9
				if (!result) {
   b74f2:	2800      	cmp	r0, #0
   b74f4:	d0d6      	beq.n	b74a4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b74f6:	f8d8 3000 	ldr.w	r3, [r8]
   b74fa:	aa02      	add	r2, sp, #8
   b74fc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7500:	4629      	mov	r1, r5
   b7502:	463b      	mov	r3, r7
   b7504:	4640      	mov	r0, r8
   b7506:	47c8      	blx	r9
				if (!result) {
   b7508:	2800      	cmp	r0, #0
   b750a:	d0cb      	beq.n	b74a4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b750c:	443e      	add	r6, r7
				framAddrTo += count;
   b750e:	443d      	add	r5, r7
				numBytes -= count;
   b7510:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7512:	e7df      	b.n	b74d4 <_ZN6MB85RC8moveDataEjjj+0x70>

000b7514 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b7514:	6001      	str	r1, [r0, #0]
   b7516:	7102      	strb	r2, [r0, #4]
{
}
   b7518:	4770      	bx	lr

000b751a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b751a:	6800      	ldr	r0, [r0, #0]
   b751c:	6803      	ldr	r3, [r0, #0]
   b751e:	68db      	ldr	r3, [r3, #12]
   b7520:	4718      	bx	r3

000b7522 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b7522:	6800      	ldr	r0, [r0, #0]
   b7524:	6803      	ldr	r3, [r0, #0]
   b7526:	6a1b      	ldr	r3, [r3, #32]
   b7528:	4718      	bx	r3

000b752a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b752a:	6800      	ldr	r0, [r0, #0]
   b752c:	6803      	ldr	r3, [r0, #0]
   b752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7530:	4718      	bx	r3

000b7532 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b7532:	7900      	ldrb	r0, [r0, #4]
   b7534:	4770      	bx	lr

000b7536 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b7536:	6800      	ldr	r0, [r0, #0]
   b7538:	6803      	ldr	r3, [r0, #0]
   b753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b753c:	4718      	bx	r3

000b753e <_ZN10RHDatagram6sendtoEPhhh>:
{
   b753e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7540:	4605      	mov	r5, r0
   b7542:	460c      	mov	r4, r1
    setHeaderTo(address);
   b7544:	4619      	mov	r1, r3
{
   b7546:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b7548:	f7ff fff5 	bl	b7536 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b754c:	6828      	ldr	r0, [r5, #0]
   b754e:	9a01      	ldr	r2, [sp, #4]
   b7550:	6803      	ldr	r3, [r0, #0]
   b7552:	695b      	ldr	r3, [r3, #20]
   b7554:	4621      	mov	r1, r4
}
   b7556:	b003      	add	sp, #12
   b7558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b755c:	4718      	bx	r3

000b755e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b755e:	6800      	ldr	r0, [r0, #0]
   b7560:	6803      	ldr	r3, [r0, #0]
   b7562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7564:	4718      	bx	r3

000b7566 <_ZN10RHDatagram14setThisAddressEh>:
{
   b7566:	b538      	push	{r3, r4, r5, lr}
   b7568:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b756a:	6800      	ldr	r0, [r0, #0]
   b756c:	6803      	ldr	r3, [r0, #0]
{
   b756e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b7570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7572:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b7574:	4629      	mov	r1, r5
   b7576:	4620      	mov	r0, r4
   b7578:	f7ff fff1 	bl	b755e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b757c:	7125      	strb	r5, [r4, #4]
}
   b757e:	bd38      	pop	{r3, r4, r5, pc}

000b7580 <_ZN10RHDatagram4initEv>:
{
   b7580:	b538      	push	{r3, r4, r5, lr}
   b7582:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b7584:	6800      	ldr	r0, [r0, #0]
   b7586:	6803      	ldr	r3, [r0, #0]
   b7588:	689b      	ldr	r3, [r3, #8]
   b758a:	4798      	blx	r3
    if (ret)
   b758c:	4605      	mov	r5, r0
   b758e:	b118      	cbz	r0, b7598 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b7590:	7921      	ldrb	r1, [r4, #4]
   b7592:	4620      	mov	r0, r4
   b7594:	f7ff ffe7 	bl	b7566 <_ZN10RHDatagram14setThisAddressEh>
}
   b7598:	4628      	mov	r0, r5
   b759a:	bd38      	pop	{r3, r4, r5, pc}

000b759c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b759c:	6800      	ldr	r0, [r0, #0]
   b759e:	6803      	ldr	r3, [r0, #0]
   b75a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b75a2:	4718      	bx	r3

000b75a4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b75a4:	6800      	ldr	r0, [r0, #0]
   b75a6:	6803      	ldr	r3, [r0, #0]
   b75a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b75aa:	4718      	bx	r3

000b75ac <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b75ac:	6800      	ldr	r0, [r0, #0]
   b75ae:	6803      	ldr	r3, [r0, #0]
   b75b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b75b2:	4718      	bx	r3

000b75b4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b75b4:	6800      	ldr	r0, [r0, #0]
   b75b6:	6803      	ldr	r3, [r0, #0]
   b75b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b75ba:	4718      	bx	r3

000b75bc <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b75bc:	6800      	ldr	r0, [r0, #0]
   b75be:	6803      	ldr	r3, [r0, #0]
   b75c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b75c2:	4718      	bx	r3

000b75c4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b75c4:	6800      	ldr	r0, [r0, #0]
   b75c6:	6803      	ldr	r3, [r0, #0]
   b75c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b75ca:	4718      	bx	r3

000b75cc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b75cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b75d0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b75d2:	6800      	ldr	r0, [r0, #0]
{
   b75d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b75d6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b75d8:	6803      	ldr	r3, [r0, #0]
   b75da:	691b      	ldr	r3, [r3, #16]
{
   b75dc:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b75e0:	4798      	blx	r3
   b75e2:	4605      	mov	r5, r0
   b75e4:	b1c8      	cbz	r0, b761a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b75e6:	b11e      	cbz	r6, b75f0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b75e8:	4620      	mov	r0, r4
   b75ea:	f7ff ffe3 	bl	b75b4 <_ZN10RHDatagram10headerFromEv>
   b75ee:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b75f0:	f1b9 0f00 	cmp.w	r9, #0
   b75f4:	d004      	beq.n	b7600 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b75f6:	4620      	mov	r0, r4
   b75f8:	f7ff ffd8 	bl	b75ac <_ZN10RHDatagram8headerToEv>
   b75fc:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b7600:	f1b8 0f00 	cmp.w	r8, #0
   b7604:	d004      	beq.n	b7610 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b7606:	4620      	mov	r0, r4
   b7608:	f7ff ffd8 	bl	b75bc <_ZN10RHDatagram8headerIdEv>
   b760c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b7610:	b11f      	cbz	r7, b761a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b7612:	4620      	mov	r0, r4
   b7614:	f7ff ffd6 	bl	b75c4 <_ZN10RHDatagram11headerFlagsEv>
   b7618:	7038      	strb	r0, [r7, #0]
}
   b761a:	4628      	mov	r0, r5
   b761c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7620 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b7620:	2001      	movs	r0, #1
   b7622:	4770      	bx	lr

000b7624 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b7624:	7903      	ldrb	r3, [r0, #4]
   b7626:	2b03      	cmp	r3, #3
   b7628:	d0fc      	beq.n	b7624 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b762a:	2001      	movs	r0, #1
   b762c:	4770      	bx	lr

000b762e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b762e:	2000      	movs	r0, #0
   b7630:	4770      	bx	lr

000b7632 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b7632:	7181      	strb	r1, [r0, #6]
}
   b7634:	4770      	bx	lr

000b7636 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b7636:	7141      	strb	r1, [r0, #5]
}
   b7638:	4770      	bx	lr

000b763a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b763a:	72c1      	strb	r1, [r0, #11]
}
   b763c:	4770      	bx	lr

000b763e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b763e:	7301      	strb	r1, [r0, #12]
}
   b7640:	4770      	bx	lr

000b7642 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b7642:	7341      	strb	r1, [r0, #13]
}
   b7644:	4770      	bx	lr

000b7646 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b7646:	7b83      	ldrb	r3, [r0, #14]
   b7648:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b764c:	4311      	orrs	r1, r2
   b764e:	7381      	strb	r1, [r0, #14]
}
   b7650:	4770      	bx	lr

000b7652 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b7652:	79c0      	ldrb	r0, [r0, #7]
}
   b7654:	4770      	bx	lr

000b7656 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b7656:	7a00      	ldrb	r0, [r0, #8]
}
   b7658:	4770      	bx	lr

000b765a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b765a:	7a40      	ldrb	r0, [r0, #9]
}
   b765c:	4770      	bx	lr

000b765e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b765e:	7a80      	ldrb	r0, [r0, #10]
}
   b7660:	4770      	bx	lr

000b7662 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b7662:	8a00      	ldrh	r0, [r0, #16]
}
   b7664:	b200      	sxth	r0, r0
   b7666:	4770      	bx	lr

000b7668 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b7668:	7900      	ldrb	r0, [r0, #4]
}
   b766a:	4770      	bx	lr

000b766c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b766c:	7101      	strb	r1, [r0, #4]
}
   b766e:	4770      	bx	lr

000b7670 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b7670:	8a40      	ldrh	r0, [r0, #18]
}
   b7672:	b280      	uxth	r0, r0
   b7674:	4770      	bx	lr

000b7676 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b7676:	8a80      	ldrh	r0, [r0, #20]
}
   b7678:	b280      	uxth	r0, r0
   b767a:	4770      	bx	lr

000b767c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b767c:	8ac0      	ldrh	r0, [r0, #22]
}
   b767e:	b280      	uxth	r0, r0
   b7680:	4770      	bx	lr

000b7682 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b7682:	b538      	push	{r3, r4, r5, lr}
   b7684:	4605      	mov	r5, r0
   b7686:	460c      	mov	r4, r1
    while (!available())
   b7688:	682b      	ldr	r3, [r5, #0]
   b768a:	4628      	mov	r0, r5
   b768c:	68db      	ldr	r3, [r3, #12]
   b768e:	4798      	blx	r3
   b7690:	b928      	cbnz	r0, b769e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b7692:	2c00      	cmp	r4, #0
   b7694:	d0f8      	beq.n	b7688 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b7696:	4620      	mov	r0, r4
   b7698:	f001 febc 	bl	b9414 <delay>
   b769c:	e7f4      	b.n	b7688 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b769e:	bd38      	pop	{r3, r4, r5, pc}

000b76a0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b76a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76a2:	4605      	mov	r5, r0
   b76a4:	460f      	mov	r7, r1
   b76a6:	4614      	mov	r4, r2
   b76a8:	f001 fb0a 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
   b76ac:	4606      	mov	r6, r0
   b76ae:	f001 fb07 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b76b2:	1b80      	subs	r0, r0, r6
   b76b4:	42b8      	cmp	r0, r7
   b76b6:	d20a      	bcs.n	b76ce <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b76b8:	682b      	ldr	r3, [r5, #0]
   b76ba:	4628      	mov	r0, r5
   b76bc:	68db      	ldr	r3, [r3, #12]
   b76be:	4798      	blx	r3
   b76c0:	b930      	cbnz	r0, b76d0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b76c2:	2c00      	cmp	r4, #0
   b76c4:	d0f3      	beq.n	b76ae <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b76c6:	4620      	mov	r0, r4
   b76c8:	f001 fea4 	bl	b9414 <delay>
   b76cc:	e7ef      	b.n	b76ae <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b76ce:	2000      	movs	r0, #0
}
   b76d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b76d2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b76d2:	b570      	push	{r4, r5, r6, lr}
   b76d4:	4604      	mov	r4, r0
   b76d6:	460e      	mov	r6, r1
   b76d8:	f001 faf2 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
   b76dc:	4605      	mov	r5, r0
   b76de:	f001 faef 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b76e2:	1b40      	subs	r0, r0, r5
   b76e4:	42b0      	cmp	r0, r6
   b76e6:	d204      	bcs.n	b76f2 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b76e8:	7923      	ldrb	r3, [r4, #4]
   b76ea:	2b03      	cmp	r3, #3
   b76ec:	d0f7      	beq.n	b76de <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b76ee:	2001      	movs	r0, #1
}
   b76f0:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b76f2:	2000      	movs	r0, #0
   b76f4:	e7fc      	b.n	b76f0 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b76f6 <_ZN15RHGenericDriver7waitCADEv>:
{
   b76f6:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b76f8:	69c3      	ldr	r3, [r0, #28]
{
   b76fa:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b76fc:	b1b3      	cbz	r3, b772c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b76fe:	f001 fadf 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b7702:	2664      	movs	r6, #100	; 0x64
   b7704:	4605      	mov	r5, r0
    while (isChannelActive())
   b7706:	6823      	ldr	r3, [r4, #0]
   b7708:	4620      	mov	r0, r4
   b770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b770c:	4798      	blx	r3
   b770e:	b168      	cbz	r0, b772c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b7710:	f001 fad6 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b7714:	69e3      	ldr	r3, [r4, #28]
   b7716:	1b40      	subs	r0, r0, r5
   b7718:	4298      	cmp	r0, r3
   b771a:	d809      	bhi.n	b7730 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b771c:	210a      	movs	r1, #10
   b771e:	2001      	movs	r0, #1
   b7720:	f003 fe17 	bl	bb352 <_Z6randomii>
   b7724:	4370      	muls	r0, r6
   b7726:	f001 fe75 	bl	b9414 <delay>
    while (isChannelActive())
   b772a:	e7ec      	b.n	b7706 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b772c:	2001      	movs	r0, #1
}
   b772e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b7730:	2000      	movs	r0, #0
   b7732:	e7fc      	b.n	b772e <_ZN15RHGenericDriver7waitCADEv+0x38>

000b7734 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b7734:	4a06      	ldr	r2, [pc, #24]	; (b7750 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b7736:	6002      	str	r2, [r0, #0]
   b7738:	21ff      	movs	r1, #255	; 0xff
   b773a:	2200      	movs	r2, #0
   b773c:	7102      	strb	r2, [r0, #4]
   b773e:	7141      	strb	r1, [r0, #5]
   b7740:	8242      	strh	r2, [r0, #18]
   b7742:	72c1      	strb	r1, [r0, #11]
   b7744:	8282      	strh	r2, [r0, #20]
   b7746:	8181      	strh	r1, [r0, #12]
   b7748:	7382      	strb	r2, [r0, #14]
   b774a:	82c2      	strh	r2, [r0, #22]
   b774c:	61c2      	str	r2, [r0, #28]
}
   b774e:	4770      	bx	lr
   b7750:	000bf090 	.word	0x000bf090

000b7754 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b7754:	4770      	bx	lr

000b7756 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b7756:	4770      	bx	lr

000b7758 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b7758:	4770      	bx	lr

000b775a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b775a:	4770      	bx	lr

000b775c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b775c:	4770      	bx	lr

000b775e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b775e:	7141      	strb	r1, [r0, #5]
}
   b7760:	4770      	bx	lr

000b7762 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b7762:	7181      	strb	r1, [r0, #6]
}
   b7764:	4770      	bx	lr

000b7766 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b7766:	7101      	strb	r1, [r0, #4]
}
   b7768:	4770      	bx	lr
	...

000b776c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b776c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b776e:	4d03      	ldr	r5, [pc, #12]	; (b777c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b7770:	6005      	str	r5, [r0, #0]
   b7772:	7101      	strb	r1, [r0, #4]
   b7774:	7142      	strb	r2, [r0, #5]
   b7776:	7183      	strb	r3, [r0, #6]
}
   b7778:	bd30      	pop	{r4, r5, pc}
   b777a:	bf00      	nop
   b777c:	000bf110 	.word	0x000bf110

000b7780 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b7780:	4770      	bx	lr

000b7782 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b7782:	b510      	push	{r4, lr}
  }
   b7784:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b7786:	4604      	mov	r4, r0
  }
   b7788:	f7fc fc89 	bl	b409e <_ZdlPvj>
   b778c:	4620      	mov	r0, r4
   b778e:	bd10      	pop	{r4, pc}

000b7790 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7790:	b40e      	push	{r1, r2, r3}
   b7792:	b503      	push	{r0, r1, lr}
   b7794:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b7796:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7798:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b779c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b779e:	f003 fd9c 	bl	bb2da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b77a2:	b002      	add	sp, #8
   b77a4:	f85d eb04 	ldr.w	lr, [sp], #4
   b77a8:	b003      	add	sp, #12
   b77aa:	4770      	bx	lr

000b77ac <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b77ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b77ae:	4604      	mov	r4, r0
   b77b0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b77b2:	7922      	ldrb	r2, [r4, #4]
   b77b4:	68a3      	ldr	r3, [r4, #8]
   b77b6:	b132      	cbz	r2, b77c6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b77b8:	b9a3      	cbnz	r3, b77e4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b77ba:	490b      	ldr	r1, [pc, #44]	; (b77e8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b77bc:	b002      	add	sp, #8
   b77be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b77c2:	f003 bc81 	b.w	bb0c8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b77c6:	4a09      	ldr	r2, [pc, #36]	; (b77ec <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b77c8:	7b26      	ldrb	r6, [r4, #12]
   b77ca:	4d09      	ldr	r5, [pc, #36]	; (b77f0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b77cc:	4909      	ldr	r1, [pc, #36]	; (b77f4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b77ce:	7b64      	ldrb	r4, [r4, #13]
   b77d0:	2e01      	cmp	r6, #1
   b77d2:	bf18      	it	ne
   b77d4:	4629      	movne	r1, r5
   b77d6:	e9cd 1400 	strd	r1, r4, [sp]
   b77da:	4907      	ldr	r1, [pc, #28]	; (b77f8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b77dc:	f7ff ffd8 	bl	b7790 <_ZN5Print6printfEPKcz>
  }
   b77e0:	b002      	add	sp, #8
   b77e2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b77e4:	4a05      	ldr	r2, [pc, #20]	; (b77fc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b77e6:	e7ef      	b.n	b77c8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b77e8:	000bf14d 	.word	0x000bf14d
   b77ec:	000bf515 	.word	0x000bf515
   b77f0:	000bf149 	.word	0x000bf149
   b77f4:	000bf145 	.word	0x000bf145
   b77f8:	000bf163 	.word	0x000bf163
   b77fc:	000bf13c 	.word	0x000bf13c

000b7800 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b7800:	b510      	push	{r4, lr}
   b7802:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b7804:	f7ff ffb2 	bl	b776c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b7808:	4b05      	ldr	r3, [pc, #20]	; (b7820 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b780a:	6023      	str	r3, [r4, #0]
  {
   b780c:	4b05      	ldr	r3, [pc, #20]	; (b7824 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b780e:	60a3      	str	r3, [r4, #8]
   b7810:	2301      	movs	r3, #1
   b7812:	7323      	strb	r3, [r4, #12]
   b7814:	2300      	movs	r3, #0
   b7816:	6123      	str	r3, [r4, #16]
   b7818:	82a3      	strh	r3, [r4, #20]
{
}
   b781a:	4620      	mov	r0, r4
   b781c:	bd10      	pop	{r4, pc}
   b781e:	bf00      	nop
   b7820:	000bf19c 	.word	0x000bf19c
   b7824:	000bf188 	.word	0x000bf188

000b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b7828:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b782a:	4c0b      	ldr	r4, [pc, #44]	; (b7858 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b782c:	7821      	ldrb	r1, [r4, #0]
   b782e:	f3bf 8f5b 	dmb	ish
   b7832:	f011 0101 	ands.w	r1, r1, #1
   b7836:	d10b      	bne.n	b7850 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7838:	4620      	mov	r0, r4
   b783a:	9101      	str	r1, [sp, #4]
   b783c:	f7fc fc3e 	bl	b40bc <__cxa_guard_acquire>
   b7840:	9901      	ldr	r1, [sp, #4]
   b7842:	b128      	cbz	r0, b7850 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7844:	4805      	ldr	r0, [pc, #20]	; (b785c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7846:	f003 fd9d 	bl	bb384 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b784a:	4620      	mov	r0, r4
   b784c:	f7fc fc3b 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b7850:	4802      	ldr	r0, [pc, #8]	; (b785c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7852:	b002      	add	sp, #8
   b7854:	bd10      	pop	{r4, pc}
   b7856:	bf00      	nop
   b7858:	2003e3e0 	.word	0x2003e3e0
   b785c:	2003e3e4 	.word	0x2003e3e4

000b7860 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b7860:	b507      	push	{r0, r1, r2, lr}
   b7862:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b7864:	f7ff ffe0 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7868:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b786a:	b003      	add	sp, #12
   b786c:	f85d eb04 	ldr.w	lr, [sp], #4
   b7870:	f003 be40 	b.w	bb4f4 <_ZN8SPIClass8transferEh>

000b7874 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b7874:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b7876:	f7ff ffd7 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b787a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b787e:	f003 be3f 	b.w	bb500 <_ZN8SPIClass15attachInterruptEv>

000b7882 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b7882:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b7884:	f7ff ffd0 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b7888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b788c:	f003 be39 	b.w	bb502 <_ZN8SPIClass15detachInterruptEv>

000b7890 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b7890:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b7892:	7903      	ldrb	r3, [r0, #4]
   b7894:	2b04      	cmp	r3, #4
   b7896:	d020      	beq.n	b78da <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b7898:	2b03      	cmp	r3, #3
   b789a:	d020      	beq.n	b78de <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b789c:	2b02      	cmp	r3, #2
   b789e:	d020      	beq.n	b78e2 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b78a0:	4a11      	ldr	r2, [pc, #68]	; (b78e8 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b78a2:	4912      	ldr	r1, [pc, #72]	; (b78ec <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b78a4:	2b01      	cmp	r3, #1
   b78a6:	bf18      	it	ne
   b78a8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b78aa:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b78ac:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b78ae:	3901      	subs	r1, #1
   b78b0:	bf18      	it	ne
   b78b2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b78b4:	b133      	cbz	r3, b78c4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b78b6:	2b01      	cmp	r3, #1
   b78b8:	d004      	beq.n	b78c4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b78ba:	2b02      	cmp	r3, #2
   b78bc:	d002      	beq.n	b78c4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b78be:	2b03      	cmp	r3, #3
   b78c0:	bf18      	it	ne
   b78c2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b78c4:	2400      	movs	r4, #0
   b78c6:	7304      	strb	r4, [r0, #12]
   b78c8:	6102      	str	r2, [r0, #16]
   b78ca:	7501      	strb	r1, [r0, #20]
   b78cc:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b78ce:	f7ff ffab 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b78d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b78d6:	f003 bd5f 	b.w	bb398 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b78da:	4a05      	ldr	r2, [pc, #20]	; (b78f0 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b78dc:	e7e5      	b.n	b78aa <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b78de:	4a05      	ldr	r2, [pc, #20]	; (b78f4 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b78e0:	e7e3      	b.n	b78aa <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b78e2:	4a05      	ldr	r2, [pc, #20]	; (b78f8 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b78e4:	e7e1      	b.n	b78aa <_ZN13RHHardwareSPI5beginEv+0x1a>
   b78e6:	bf00      	nop
   b78e8:	001e8480 	.word	0x001e8480
   b78ec:	000f4240 	.word	0x000f4240
   b78f0:	00f42400 	.word	0x00f42400
   b78f4:	007a1200 	.word	0x007a1200
   b78f8:	003d0900 	.word	0x003d0900

000b78fc <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b78fc:	b508      	push	{r3, lr}
        instance().end();
   b78fe:	f7ff ff93 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b7902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7906:	f003 bd5b 	b.w	bb3c0 <_ZN8SPIClass3endEv>

000b790a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b790a:	b510      	push	{r4, lr}
   b790c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b790e:	f7ff ff8b 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7912:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b7916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b791a:	f003 bd7d 	b.w	bb418 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b791e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b791e:	b508      	push	{r3, lr}
        instance().endTransaction();
   b7920:	f7ff ff82 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b7924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7928:	f003 bd5c 	b.w	bb3e4 <_ZN8SPIClass14endTransactionEv>

000b792c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b792c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b792e:	f7ff ff7b 	bl	b7828 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b7932:	bd08      	pop	{r3, pc}

000b7934 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b7934:	2300      	movs	r3, #0
   b7936:	4802      	ldr	r0, [pc, #8]	; (b7940 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b7938:	461a      	mov	r2, r3
   b793a:	4619      	mov	r1, r3
   b793c:	f7ff bf60 	b.w	b7800 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b7940:	2003e3ec 	.word	0x2003e3ec

000b7944 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b7944:	2a01      	cmp	r2, #1
   b7946:	d105      	bne.n	b7954 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b7948:	7a00      	ldrb	r0, [r0, #8]
   b794a:	780b      	ldrb	r3, [r1, #0]
   b794c:	1a1b      	subs	r3, r3, r0
   b794e:	4258      	negs	r0, r3
   b7950:	4158      	adcs	r0, r3
   b7952:	4770      	bx	lr
   b7954:	2000      	movs	r0, #0
}
   b7956:	4770      	bx	lr

000b7958 <_ZN6RHMesh5doArpEh>:
{
   b7958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b795c:	4c25      	ldr	r4, [pc, #148]	; (b79f4 <_ZN6RHMesh5doArpEh+0x9c>)
   b795e:	2301      	movs	r3, #1
{
   b7960:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b7962:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b7964:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7966:	2300      	movs	r3, #0
{
   b7968:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b796a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b796c:	9300      	str	r3, [sp, #0]
   b796e:	2203      	movs	r2, #3
   b7970:	23ff      	movs	r3, #255	; 0xff
   b7972:	4621      	mov	r1, r4
{
   b7974:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7976:	f000 fbb7 	bl	b80e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b797a:	b120      	cbz	r0, b7986 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b797c:	2500      	movs	r5, #0
}
   b797e:	4628      	mov	r0, r5
   b7980:	b006      	add	sp, #24
   b7982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b7986:	23fa      	movs	r3, #250	; 0xfa
   b7988:	f88d 3017 	strb.w	r3, [sp, #23]
   b798c:	f001 f998 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b7990:	f106 0904 	add.w	r9, r6, #4
   b7994:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b7996:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b799a:	f001 f991 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
   b799e:	1a29      	subs	r1, r5, r0
   b79a0:	2900      	cmp	r1, #0
   b79a2:	ddeb      	ble.n	b797c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b79a4:	2200      	movs	r2, #0
   b79a6:	b289      	uxth	r1, r1
   b79a8:	4648      	mov	r0, r9
   b79aa:	f7ff fdbe 	bl	b752a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b79ae:	2800      	cmp	r0, #0
   b79b0:	d0f3      	beq.n	b799a <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b79b2:	2300      	movs	r3, #0
   b79b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b79b8:	e9cd 3300 	strd	r3, r3, [sp]
   b79bc:	f10d 0217 	add.w	r2, sp, #23
   b79c0:	4621      	mov	r1, r4
   b79c2:	4630      	mov	r0, r6
   b79c4:	f000 fb9a 	bl	b80fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b79c8:	4605      	mov	r5, r0
   b79ca:	2800      	cmp	r0, #0
   b79cc:	d0e3      	beq.n	b7996 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b79ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b79d2:	2b01      	cmp	r3, #1
   b79d4:	d9df      	bls.n	b7996 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b79d6:	f894 a000 	ldrb.w	sl, [r4]
   b79da:	f1ba 0f02 	cmp.w	sl, #2
   b79de:	d1da      	bne.n	b7996 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b79e0:	4648      	mov	r0, r9
   b79e2:	f7ff fde7 	bl	b75b4 <_ZN10RHDatagram10headerFromEv>
   b79e6:	4653      	mov	r3, sl
   b79e8:	4602      	mov	r2, r0
   b79ea:	4639      	mov	r1, r7
   b79ec:	4630      	mov	r0, r6
   b79ee:	f000 faf3 	bl	b7fd8 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b79f2:	e7c4      	b.n	b797e <_ZN6RHMesh5doArpEh+0x26>
   b79f4:	2003e404 	.word	0x2003e404

000b79f8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b79f8:	2a01      	cmp	r2, #1
{
   b79fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b79fe:	4607      	mov	r7, r0
   b7a00:	460e      	mov	r6, r1
   b7a02:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b7a04:	d93b      	bls.n	b7a7e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7a06:	794d      	ldrb	r5, [r1, #5]
   b7a08:	2d02      	cmp	r5, #2
   b7a0a:	d130      	bne.n	b7a6e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b7a0c:	f100 0804 	add.w	r8, r0, #4
   b7a10:	79c9      	ldrb	r1, [r1, #7]
   b7a12:	9101      	str	r1, [sp, #4]
   b7a14:	4640      	mov	r0, r8
   b7a16:	f7ff fdcd 	bl	b75b4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7a1a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b7a1c:	462b      	mov	r3, r5
   b7a1e:	4602      	mov	r2, r0
   b7a20:	9901      	ldr	r1, [sp, #4]
   b7a22:	4638      	mov	r0, r7
   b7a24:	f000 fad8 	bl	b7fd8 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7a28:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b7a2a:	f106 0308 	add.w	r3, r6, #8
   b7a2e:	2400      	movs	r4, #0
   b7a30:	4622      	mov	r2, r4
   b7a32:	4295      	cmp	r5, r2
   b7a34:	f104 0401 	add.w	r4, r4, #1
   b7a38:	b2e4      	uxtb	r4, r4
   b7a3a:	d904      	bls.n	b7a46 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b7a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7a40:	7a39      	ldrb	r1, [r7, #8]
   b7a42:	4291      	cmp	r1, r2
   b7a44:	d1f4      	bne.n	b7a30 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b7a46:	f104 0108 	add.w	r1, r4, #8
   b7a4a:	440e      	add	r6, r1
	while (i < numRoutes)
   b7a4c:	42a5      	cmp	r5, r4
   b7a4e:	d916      	bls.n	b7a7e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b7a50:	f816 1b01 	ldrb.w	r1, [r6], #1
   b7a54:	9101      	str	r1, [sp, #4]
   b7a56:	4640      	mov	r0, r8
   b7a58:	f7ff fdac 	bl	b75b4 <_ZN10RHDatagram10headerFromEv>
   b7a5c:	3401      	adds	r4, #1
   b7a5e:	4602      	mov	r2, r0
   b7a60:	9901      	ldr	r1, [sp, #4]
   b7a62:	2302      	movs	r3, #2
   b7a64:	4638      	mov	r0, r7
   b7a66:	b2e4      	uxtb	r4, r4
   b7a68:	f000 fab6 	bl	b7fd8 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b7a6c:	e7ee      	b.n	b7a4c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b7a6e:	2d03      	cmp	r5, #3
   b7a70:	d105      	bne.n	b7a7e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b7a72:	7989      	ldrb	r1, [r1, #6]
}
   b7a74:	b002      	add	sp, #8
   b7a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b7a7a:	f000 ba96 	b.w	b7faa <_ZN8RHRouter13deleteRouteToEh>
}
   b7a7e:	b002      	add	sp, #8
   b7a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a84 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b7a84:	b510      	push	{r4, lr}
   b7a86:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7a88:	f000 fae6 	bl	b8058 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b7a8c:	4b01      	ldr	r3, [pc, #4]	; (b7a94 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b7a8e:	6023      	str	r3, [r4, #0]
}
   b7a90:	4620      	mov	r0, r4
   b7a92:	bd10      	pop	{r4, pc}
   b7a94:	000bf1d0 	.word	0x000bf1d0

000b7a98 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7a9c:	2af9      	cmp	r2, #249	; 0xf9
{
   b7a9e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b7aa2:	4606      	mov	r6, r0
   b7aa4:	460f      	mov	r7, r1
   b7aa6:	4614      	mov	r4, r2
   b7aa8:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7aaa:	d825      	bhi.n	b7af8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b7aac:	2bff      	cmp	r3, #255	; 0xff
   b7aae:	d114      	bne.n	b7ada <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7ab0:	f8df 8048 	ldr.w	r8, [pc, #72]	; b7afc <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b7ab4:	4640      	mov	r0, r8
   b7ab6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7ab8:	4622      	mov	r2, r4
   b7aba:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7abc:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b7ac0:	f006 f926 	bl	bdd10 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7ac4:	1c62      	adds	r2, r4, #1
   b7ac6:	f8cd 9020 	str.w	r9, [sp, #32]
   b7aca:	462b      	mov	r3, r5
   b7acc:	4641      	mov	r1, r8
   b7ace:	4630      	mov	r0, r6
   b7ad0:	b2d2      	uxtb	r2, r2
}
   b7ad2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7ad6:	f000 bb07 	b.w	b80e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b7ada:	4619      	mov	r1, r3
   b7adc:	f000 fa21 	bl	b7f22 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b7ae0:	2800      	cmp	r0, #0
   b7ae2:	d1e5      	bne.n	b7ab0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b7ae4:	6833      	ldr	r3, [r6, #0]
   b7ae6:	4629      	mov	r1, r5
   b7ae8:	689b      	ldr	r3, [r3, #8]
   b7aea:	4630      	mov	r0, r6
   b7aec:	4798      	blx	r3
   b7aee:	2800      	cmp	r0, #0
   b7af0:	d1de      	bne.n	b7ab0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7af2:	2002      	movs	r0, #2
}
   b7af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7af8:	2001      	movs	r0, #1
   b7afa:	e7fb      	b.n	b7af4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b7afc:	2003e404 	.word	0x2003e404

000b7b00 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b7b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b04:	b089      	sub	sp, #36	; 0x24
   b7b06:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7b08:	23fa      	movs	r3, #250	; 0xfa
   b7b0a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7b0e:	f10d 031f 	add.w	r3, sp, #31
   b7b12:	9303      	str	r3, [sp, #12]
   b7b14:	f10d 031e 	add.w	r3, sp, #30
   b7b18:	9302      	str	r3, [sp, #8]
   b7b1a:	4e5d      	ldr	r6, [pc, #372]	; (b7c90 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7b1c:	f10d 031d 	add.w	r3, sp, #29
   b7b20:	9301      	str	r3, [sp, #4]
   b7b22:	ab07      	add	r3, sp, #28
   b7b24:	9300      	str	r3, [sp, #0]
{     
   b7b26:	4689      	mov	r9, r1
   b7b28:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7b2a:	f10d 031b 	add.w	r3, sp, #27
   b7b2e:	f10d 021a 	add.w	r2, sp, #26
   b7b32:	4631      	mov	r1, r6
{     
   b7b34:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b7b38:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7b3a:	f000 fadf 	bl	b80fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7b3e:	4604      	mov	r4, r0
   b7b40:	b920      	cbnz	r0, b7b4c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b7b42:	2400      	movs	r4, #0
}
   b7b44:	4620      	mov	r0, r4
   b7b46:	b009      	add	sp, #36	; 0x24
   b7b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b7b4c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b7b50:	b373      	cbz	r3, b7bb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b7b52:	7832      	ldrb	r2, [r6, #0]
   b7b54:	bb62      	cbnz	r2, b7bb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b7b56:	f1b8 0f00 	cmp.w	r8, #0
   b7b5a:	d003      	beq.n	b7b64 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b7b5c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b7b60:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b7b64:	f1bb 0f00 	cmp.w	fp, #0
   b7b68:	d003      	beq.n	b7b72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b7b6a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7b6e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b7b72:	f1ba 0f00 	cmp.w	sl, #0
   b7b76:	d003      	beq.n	b7b80 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b7b78:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b7b7c:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b7b80:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7b82:	b11a      	cbz	r2, b7b8c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b7b84:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7b86:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7b8a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b7b8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b7b8e:	b11a      	cbz	r2, b7b98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b7b90:	9915      	ldr	r1, [sp, #84]	; 0x54
   b7b92:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7b96:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7b98:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7b9a:	493e      	ldr	r1, [pc, #248]	; (b7c94 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b7b9c:	3b01      	subs	r3, #1
   b7b9e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7ba0:	429a      	cmp	r2, r3
		*len = msgLen;
   b7ba2:	bf88      	it	hi
   b7ba4:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7ba6:	783a      	ldrb	r2, [r7, #0]
   b7ba8:	4648      	mov	r0, r9
   b7baa:	f006 f8b1 	bl	bdd10 <memcpy>
	    return true;
   b7bae:	e7c9      	b.n	b7b44 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b7bb0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7bb4:	2aff      	cmp	r2, #255	; 0xff
   b7bb6:	d1c4      	bne.n	b7b42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7bb8:	2b01      	cmp	r3, #1
   b7bba:	d9c2      	bls.n	b7b42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b7bbc:	7832      	ldrb	r2, [r6, #0]
   b7bbe:	2a01      	cmp	r2, #1
   b7bc0:	d1bf      	bne.n	b7b42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b7bc2:	7a2a      	ldrb	r2, [r5, #8]
   b7bc4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7bc8:	42a2      	cmp	r2, r4
   b7bca:	d0ba      	beq.n	b7b42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b7bcc:	1edf      	subs	r7, r3, #3
   b7bce:	4932      	ldr	r1, [pc, #200]	; (b7c98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b7bd0:	b2ff      	uxtb	r7, r7
   b7bd2:	2300      	movs	r3, #0
   b7bd4:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7bd8:	4547      	cmp	r7, r8
   b7bda:	d906      	bls.n	b7bea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b7bdc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7be0:	4282      	cmp	r2, r0
   b7be2:	f103 0301 	add.w	r3, r3, #1
   b7be6:	d1f5      	bne.n	b7bd4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7be8:	e7ab      	b.n	b7b42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b7bea:	f105 0904 	add.w	r9, r5, #4
   b7bee:	4648      	mov	r0, r9
   b7bf0:	f7ff fce0 	bl	b75b4 <_ZN10RHDatagram10headerFromEv>
   b7bf4:	2302      	movs	r3, #2
   b7bf6:	4602      	mov	r2, r0
   b7bf8:	4621      	mov	r1, r4
   b7bfa:	4628      	mov	r0, r5
   b7bfc:	f000 f9ec 	bl	b7fd8 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b7c00:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7c04:	b193      	cbz	r3, b7c2c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b7c06:	4c22      	ldr	r4, [pc, #136]	; (b7c90 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7c08:	1ba3      	subs	r3, r4, r6
   b7c0a:	b2db      	uxtb	r3, r3
   b7c0c:	429f      	cmp	r7, r3
   b7c0e:	d90c      	bls.n	b7c2a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b7c10:	78e1      	ldrb	r1, [r4, #3]
   b7c12:	9105      	str	r1, [sp, #20]
   b7c14:	4648      	mov	r0, r9
   b7c16:	f7ff fccd 	bl	b75b4 <_ZN10RHDatagram10headerFromEv>
   b7c1a:	9905      	ldr	r1, [sp, #20]
   b7c1c:	4602      	mov	r2, r0
   b7c1e:	2302      	movs	r3, #2
   b7c20:	4628      	mov	r0, r5
   b7c22:	f000 f9d9 	bl	b7fd8 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b7c26:	3401      	adds	r4, #1
   b7c28:	e7ee      	b.n	b7c08 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b7c2a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b7c2c:	682b      	ldr	r3, [r5, #0]
   b7c2e:	7872      	ldrb	r2, [r6, #1]
   b7c30:	68db      	ldr	r3, [r3, #12]
   b7c32:	491a      	ldr	r1, [pc, #104]	; (b7c9c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b7c34:	4628      	mov	r0, r5
   b7c36:	4798      	blx	r3
   b7c38:	4604      	mov	r4, r0
   b7c3a:	b160      	cbz	r0, b7c56 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7c3c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b7c3e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7c40:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b7c42:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b7c46:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7c4a:	4911      	ldr	r1, [pc, #68]	; (b7c90 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7c4c:	9400      	str	r4, [sp, #0]
   b7c4e:	4628      	mov	r0, r5
   b7c50:	f000 fa4a 	bl	b80e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7c54:	e776      	b.n	b7b44 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b7c56:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b7c5a:	4543      	cmp	r3, r8
   b7c5c:	f67f af71 	bls.w	b7b42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b7c60:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7c64:	2b00      	cmp	r3, #0
   b7c66:	f43f af6c 	beq.w	b7b42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b7c6a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b7c6e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7c70:	4907      	ldr	r1, [pc, #28]	; (b7c90 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b7c72:	443e      	add	r6, r7
		tmpMessageLen++;
   b7c74:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b7c76:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7c78:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7c7c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b7c7e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7c80:	9300      	str	r3, [sp, #0]
   b7c82:	4628      	mov	r0, r5
   b7c84:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b7c86:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7c8a:	f000 f9f7 	bl	b807c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b7c8e:	e759      	b.n	b7b44 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b7c90:	2003e404 	.word	0x2003e404
   b7c94:	2003e405 	.word	0x2003e405
   b7c98:	2003e407 	.word	0x2003e407
   b7c9c:	2003e406 	.word	0x2003e406

000b7ca0 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b7ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7ca2:	b085      	sub	sp, #20
   b7ca4:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7ca6:	3004      	adds	r0, #4
{
   b7ca8:	460e      	mov	r6, r1
   b7caa:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7cac:	f7ff fc82 	bl	b75b4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b7cb0:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7cb2:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b7cb4:	4631      	mov	r1, r6
   b7cb6:	4628      	mov	r0, r5
   b7cb8:	f000 f94a 	bl	b7f50 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7cbc:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b7cbe:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7cc0:	d001      	beq.n	b7cc6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b7cc2:	2805      	cmp	r0, #5
   b7cc4:	d11b      	bne.n	b7cfe <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b7cc6:	7831      	ldrb	r1, [r6, #0]
   b7cc8:	4628      	mov	r0, r5
   b7cca:	f000 f96e 	bl	b7faa <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b7cce:	7872      	ldrb	r2, [r6, #1]
   b7cd0:	7a2b      	ldrb	r3, [r5, #8]
   b7cd2:	429a      	cmp	r2, r3
   b7cd4:	d013      	beq.n	b7cfe <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b7cd6:	4c0b      	ldr	r4, [pc, #44]	; (b7d04 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7cd8:	2303      	movs	r3, #3
   b7cda:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b7cdc:	7833      	ldrb	r3, [r6, #0]
   b7cde:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7ce0:	7871      	ldrb	r1, [r6, #1]
   b7ce2:	2302      	movs	r3, #2
   b7ce4:	463a      	mov	r2, r7
   b7ce6:	4628      	mov	r0, r5
   b7ce8:	f000 f976 	bl	b7fd8 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b7cec:	2300      	movs	r3, #0
   b7cee:	9300      	str	r3, [sp, #0]
   b7cf0:	4621      	mov	r1, r4
   b7cf2:	7873      	ldrb	r3, [r6, #1]
   b7cf4:	2202      	movs	r2, #2
   b7cf6:	4628      	mov	r0, r5
   b7cf8:	f000 f9f6 	bl	b80e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7cfc:	4604      	mov	r4, r0
}
   b7cfe:	4620      	mov	r0, r4
   b7d00:	b005      	add	sp, #20
   b7d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7d04:	2003e404 	.word	0x2003e404

000b7d08 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7d08:	b510      	push	{r4, lr}
   b7d0a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7d0c:	f7ff fc02 	bl	b7514 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7d10:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b7d12:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b7d14:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b7d16:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7d18:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b7d1a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7d1c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b7d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
   b7d22:	f104 0011 	add.w	r0, r4, #17
   b7d26:	f006 f81b 	bl	bdd60 <memset>
}
   b7d2a:	4620      	mov	r0, r4
   b7d2c:	bd10      	pop	{r4, pc}

000b7d2e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b7d2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7d30:	4604      	mov	r4, r0
   b7d32:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b7d34:	f7ff fc32 	bl	b759c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b7d38:	4620      	mov	r0, r4
   b7d3a:	2200      	movs	r2, #0
   b7d3c:	2180      	movs	r1, #128	; 0x80
   b7d3e:	f7ff fc31 	bl	b75a4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b7d42:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b7d44:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b7d46:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b7d4a:	f10d 010f 	add.w	r1, sp, #15
   b7d4e:	2201      	movs	r2, #1
   b7d50:	4620      	mov	r0, r4
   b7d52:	f7ff fbf4 	bl	b753e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b7d56:	4620      	mov	r0, r4
   b7d58:	f7ff fbe3 	bl	b7522 <_ZN10RHDatagram14waitPacketSentEv>
}
   b7d5c:	b004      	add	sp, #16
   b7d5e:	bd10      	pop	{r4, pc}

000b7d60 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7d64:	7b05      	ldrb	r5, [r0, #12]
   b7d66:	3501      	adds	r5, #1
   b7d68:	b2ed      	uxtb	r5, r5
{
   b7d6a:	b087      	sub	sp, #28
   b7d6c:	4604      	mov	r4, r0
   b7d6e:	4689      	mov	r9, r1
   b7d70:	4692      	mov	sl, r2
   b7d72:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7d74:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b7d76:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b7d78:	7c22      	ldrb	r2, [r4, #16]
   b7d7a:	463b      	mov	r3, r7
   b7d7c:	429a      	cmp	r2, r3
   b7d7e:	f107 0701 	add.w	r7, r7, #1
   b7d82:	b2ff      	uxtb	r7, r7
   b7d84:	d36b      	bcc.n	b7e5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b7d86:	4629      	mov	r1, r5
   b7d88:	4620      	mov	r0, r4
   b7d8a:	f7ff fc07 	bl	b759c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b7d8e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b7d90:	bf0d      	iteet	eq
   b7d92:	22c0      	moveq	r2, #192	; 0xc0
   b7d94:	2280      	movne	r2, #128	; 0x80
   b7d96:	2140      	movne	r1, #64	; 0x40
   b7d98:	2100      	moveq	r1, #0
   b7d9a:	4620      	mov	r0, r4
   b7d9c:	f7ff fc02 	bl	b75a4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b7da0:	4643      	mov	r3, r8
   b7da2:	4652      	mov	r2, sl
   b7da4:	4649      	mov	r1, r9
   b7da6:	4620      	mov	r0, r4
   b7da8:	f7ff fbc9 	bl	b753e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b7dac:	4620      	mov	r0, r4
   b7dae:	f7ff fbb8 	bl	b7522 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b7db2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7db6:	d054      	beq.n	b7e62 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b7db8:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b7dba:	bf82      	ittt	hi
   b7dbc:	68a3      	ldrhi	r3, [r4, #8]
   b7dbe:	3301      	addhi	r3, #1
   b7dc0:	60a3      	strhi	r3, [r4, #8]
   b7dc2:	f000 ff7d 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b7dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b7dca:	4683      	mov	fp, r0
   b7dcc:	2000      	movs	r0, #0
   b7dce:	89e6      	ldrh	r6, [r4, #14]
   b7dd0:	f003 fabf 	bl	bb352 <_Z6randomii>
   b7dd4:	4370      	muls	r0, r6
   b7dd6:	bf48      	it	mi
   b7dd8:	30ff      	addmi	r0, #255	; 0xff
   b7dda:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b7dde:	fa1b f686 	uxtah	r6, fp, r6
   b7de2:	f000 ff6d 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
   b7de6:	1a30      	subs	r0, r6, r0
   b7de8:	2800      	cmp	r0, #0
   b7dea:	ddc5      	ble.n	b7d78 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7dec:	b281      	uxth	r1, r0
   b7dee:	2200      	movs	r2, #0
   b7df0:	4620      	mov	r0, r4
   b7df2:	f7ff fb9a 	bl	b752a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7df6:	2800      	cmp	r0, #0
   b7df8:	d0f3      	beq.n	b7de2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7dfa:	f10d 0317 	add.w	r3, sp, #23
   b7dfe:	9302      	str	r3, [sp, #8]
   b7e00:	f10d 0316 	add.w	r3, sp, #22
   b7e04:	9301      	str	r3, [sp, #4]
   b7e06:	2200      	movs	r2, #0
   b7e08:	f10d 0315 	add.w	r3, sp, #21
   b7e0c:	9300      	str	r3, [sp, #0]
   b7e0e:	4611      	mov	r1, r2
   b7e10:	ab05      	add	r3, sp, #20
   b7e12:	4620      	mov	r0, r4
   b7e14:	f7ff fbda 	bl	b75cc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7e18:	2800      	cmp	r0, #0
   b7e1a:	d0e2      	beq.n	b7de2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7e1c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7e20:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b7e24:	4542      	cmp	r2, r8
   b7e26:	d10e      	bne.n	b7e46 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7e28:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7e2c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7e30:	458c      	cmp	ip, r1
   b7e32:	d108      	bne.n	b7e46 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b7e34:	2b00      	cmp	r3, #0
   b7e36:	da08      	bge.n	b7e4a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b7e38:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7e3c:	42ab      	cmp	r3, r5
   b7e3e:	d1d0      	bne.n	b7de2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7e40:	b007      	add	sp, #28
   b7e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b7e46:	2b00      	cmp	r3, #0
   b7e48:	dbcb      	blt.n	b7de2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b7e4a:	18a1      	adds	r1, r4, r2
   b7e4c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7e50:	7c49      	ldrb	r1, [r1, #17]
   b7e52:	4299      	cmp	r1, r3
   b7e54:	d1c5      	bne.n	b7de2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b7e56:	4620      	mov	r0, r4
   b7e58:	f7ff ff69 	bl	b7d2e <_ZN18RHReliableDatagram11acknowledgeEhh>
   b7e5c:	e7c1      	b.n	b7de2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b7e5e:	2000      	movs	r0, #0
   b7e60:	e7ee      	b.n	b7e40 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7e62:	2001      	movs	r0, #1
   b7e64:	e7ec      	b.n	b7e40 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b7e66 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b7e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e6a:	b089      	sub	sp, #36	; 0x24
   b7e6c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7e70:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7e74:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7e76:	4604      	mov	r4, r0
   b7e78:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7e7a:	f7ff fb4e 	bl	b751a <_ZN10RHDatagram9availableEv>
   b7e7e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b7e82:	b920      	cbnz	r0, b7e8e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7e84:	2500      	movs	r5, #0
}
   b7e86:	4628      	mov	r0, r5
   b7e88:	b009      	add	sp, #36	; 0x24
   b7e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7e8e:	f10d 031f 	add.w	r3, sp, #31
   b7e92:	9302      	str	r3, [sp, #8]
   b7e94:	f10d 031e 	add.w	r3, sp, #30
   b7e98:	9301      	str	r3, [sp, #4]
   b7e9a:	f10d 031d 	add.w	r3, sp, #29
   b7e9e:	9300      	str	r3, [sp, #0]
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	ab07      	add	r3, sp, #28
   b7ea4:	f7ff fb92 	bl	b75cc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7ea8:	4605      	mov	r5, r0
   b7eaa:	2800      	cmp	r0, #0
   b7eac:	d0ea      	beq.n	b7e84 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b7eae:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b7eb2:	2b00      	cmp	r3, #0
   b7eb4:	dbe6      	blt.n	b7e84 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b7eb6:	7922      	ldrb	r2, [r4, #4]
   b7eb8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7ebc:	429a      	cmp	r2, r3
   b7ebe:	d106      	bne.n	b7ece <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b7ec0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7ec4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b7ec8:	4620      	mov	r0, r4
   b7eca:	f7ff ff30 	bl	b7d2e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b7ece:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7ed2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b7ed6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7eda:	f012 0f40 	tst.w	r2, #64	; 0x40
   b7ede:	440c      	add	r4, r1
   b7ee0:	d002      	beq.n	b7ee8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b7ee2:	7c60      	ldrb	r0, [r4, #17]
   b7ee4:	4298      	cmp	r0, r3
   b7ee6:	d0cd      	beq.n	b7e84 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7ee8:	b106      	cbz	r6, b7eec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b7eea:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7eec:	f1b9 0f00 	cmp.w	r9, #0
   b7ef0:	d003      	beq.n	b7efa <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b7ef2:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b7ef6:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b7efa:	f1b8 0f00 	cmp.w	r8, #0
   b7efe:	d001      	beq.n	b7f04 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7f00:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b7f04:	b107      	cbz	r7, b7f08 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b7f06:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7f08:	7463      	strb	r3, [r4, #17]
		return true;
   b7f0a:	e7bc      	b.n	b7e86 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7f0c <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7f0c:	4770      	bx	lr

000b7f0e <_ZN8RHRouter4initEv>:
{
   b7f0e:	b510      	push	{r4, lr}
   b7f10:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b7f12:	3004      	adds	r0, #4
   b7f14:	f7ff fb34 	bl	b7580 <_ZN10RHDatagram4initEv>
    if (ret)
   b7f18:	b110      	cbz	r0, b7f20 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b7f1a:	231e      	movs	r3, #30
   b7f1c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7f20:	bd10      	pop	{r4, pc}

000b7f22 <_ZN8RHRouter10getRouteToEh>:
{
   b7f22:	b510      	push	{r4, lr}
   b7f24:	4602      	mov	r2, r0
   b7f26:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b7f28:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b7f2c:	428c      	cmp	r4, r1
   b7f2e:	d108      	bne.n	b7f42 <_ZN8RHRouter10getRouteToEh+0x20>
   b7f30:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b7f34:	b12c      	cbz	r4, b7f42 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b7f36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7f3a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b7f3e:	4418      	add	r0, r3
}
   b7f40:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7f42:	3301      	adds	r3, #1
   b7f44:	2b32      	cmp	r3, #50	; 0x32
   b7f46:	f102 0203 	add.w	r2, r2, #3
   b7f4a:	d1ed      	bne.n	b7f28 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b7f4c:	2000      	movs	r0, #0
   b7f4e:	e7f7      	b.n	b7f40 <_ZN8RHRouter10getRouteToEh+0x1e>

000b7f50 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b7f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7f52:	780b      	ldrb	r3, [r1, #0]
   b7f54:	2bff      	cmp	r3, #255	; 0xff
{
   b7f56:	4605      	mov	r5, r0
   b7f58:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7f5a:	d006      	beq.n	b7f6a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b7f5c:	4619      	mov	r1, r3
   b7f5e:	9201      	str	r2, [sp, #4]
   b7f60:	f7ff ffdf 	bl	b7f22 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b7f64:	b158      	cbz	r0, b7f7e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b7f66:	7843      	ldrb	r3, [r0, #1]
   b7f68:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b7f6a:	4621      	mov	r1, r4
   b7f6c:	1d28      	adds	r0, r5, #4
   b7f6e:	f7ff fef7 	bl	b7d60 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b7f72:	2800      	cmp	r0, #0
   b7f74:	bf14      	ite	ne
   b7f76:	2000      	movne	r0, #0
   b7f78:	2005      	moveq	r0, #5
}
   b7f7a:	b003      	add	sp, #12
   b7f7c:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7f7e:	2002      	movs	r0, #2
   b7f80:	e7fb      	b.n	b7f7a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b7f82 <_ZN8RHRouter11deleteRouteEh>:
{
   b7f82:	b510      	push	{r4, lr}
   b7f84:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b7f88:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b7f8a:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b7f8e:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b7f92:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b7f96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7f9a:	4421      	add	r1, r4
   b7f9c:	4420      	add	r0, r4
   b7f9e:	f005 feb7 	bl	bdd10 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b7fa2:	2300      	movs	r3, #0
   b7fa4:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b7fa8:	bd10      	pop	{r4, pc}

000b7faa <_ZN8RHRouter13deleteRouteToEh>:
{
   b7faa:	b538      	push	{r3, r4, r5, lr}
   b7fac:	460a      	mov	r2, r1
   b7fae:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7fb0:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b7fb4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b7fb8:	b2d9      	uxtb	r1, r3
   b7fba:	5d65      	ldrb	r5, [r4, r5]
   b7fbc:	4295      	cmp	r5, r2
   b7fbe:	d103      	bne.n	b7fc8 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b7fc0:	f7ff ffdf 	bl	b7f82 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b7fc4:	2001      	movs	r0, #1
}
   b7fc6:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7fc8:	3301      	adds	r3, #1
   b7fca:	2b32      	cmp	r3, #50	; 0x32
   b7fcc:	d1f2      	bne.n	b7fb4 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b7fce:	2000      	movs	r0, #0
   b7fd0:	e7f9      	b.n	b7fc6 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b7fd2 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b7fd2:	2100      	movs	r1, #0
   b7fd4:	f7ff bfd5 	b.w	b7f82 <_ZN8RHRouter11deleteRouteEh>

000b7fd8 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fda:	4616      	mov	r6, r2
   b7fdc:	461f      	mov	r7, r3
   b7fde:	4604      	mov	r4, r0
   b7fe0:	460d      	mov	r5, r1
   b7fe2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7fe4:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7fe8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7fec:	5c11      	ldrb	r1, [r2, r0]
   b7fee:	42a9      	cmp	r1, r5
   b7ff0:	d105      	bne.n	b7ffe <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7ff2:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7ff4:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7ff8:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7ffe:	3301      	adds	r3, #1
   b8000:	2b32      	cmp	r3, #50	; 0x32
   b8002:	d1f1      	bne.n	b7fe8 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b8004:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b8006:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b800a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b800e:	5c11      	ldrb	r1, [r2, r0]
   b8010:	b919      	cbnz	r1, b801a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b8012:	4420      	add	r0, r4
   b8014:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b8018:	e7ec      	b.n	b7ff4 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b801a:	3301      	adds	r3, #1
   b801c:	2b32      	cmp	r3, #50	; 0x32
   b801e:	d1f4      	bne.n	b800a <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b8020:	4620      	mov	r0, r4
   b8022:	f7ff ffd6 	bl	b7fd2 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b8026:	4620      	mov	r0, r4
   b8028:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b802c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b8030:	b92a      	cbnz	r2, b803e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b8032:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b8036:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b803a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b803e:	3003      	adds	r0, #3
   b8040:	4298      	cmp	r0, r3
   b8042:	d1f3      	bne.n	b802c <_ZN8RHRouter10addRouteToEhhh+0x54>
   b8044:	e7da      	b.n	b7ffc <_ZN8RHRouter10addRouteToEhhh+0x24>

000b8046 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b8046:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b804a:	2200      	movs	r2, #0
   b804c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b8050:	3003      	adds	r0, #3
   b8052:	4298      	cmp	r0, r3
   b8054:	d1fa      	bne.n	b804c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b8056:	4770      	bx	lr

000b8058 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b8058:	b510      	push	{r4, lr}
   b805a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b805c:	3004      	adds	r0, #4
   b805e:	f7ff fe53 	bl	b7d08 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b8062:	4b05      	ldr	r3, [pc, #20]	; (b8078 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b8064:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b8066:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b806a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b806c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b8070:	f7ff ffe9 	bl	b8046 <_ZN8RHRouter17clearRoutingTableEv>
}
   b8074:	4620      	mov	r0, r4
   b8076:	bd10      	pop	{r4, pc}
   b8078:	000bf1e8 	.word	0x000bf1e8

000b807c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b807c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8080:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b8082:	6840      	ldr	r0, [r0, #4]
{
   b8084:	9101      	str	r1, [sp, #4]
   b8086:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b8088:	6803      	ldr	r3, [r0, #0]
{
   b808a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b808e:	699b      	ldr	r3, [r3, #24]
{
   b8090:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b8094:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b8096:	4798      	blx	r3
   b8098:	f106 0805 	add.w	r8, r6, #5
   b809c:	4580      	cmp	r8, r0
   b809e:	d81c      	bhi.n	b80da <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b80a0:	4d10      	ldr	r5, [pc, #64]	; (b80e4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b80a2:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b80a4:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b80a8:	2300      	movs	r3, #0
   b80aa:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b80ac:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b80b0:	70eb      	strb	r3, [r5, #3]
   b80b2:	1c5a      	adds	r2, r3, #1
   b80b4:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b80b8:	1d68      	adds	r0, r5, #5
   b80ba:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b80bc:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b80be:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b80c2:	f005 fe25 	bl	bdd10 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b80c6:	6823      	ldr	r3, [r4, #0]
   b80c8:	685b      	ldr	r3, [r3, #4]
   b80ca:	fa5f f288 	uxtb.w	r2, r8
   b80ce:	4629      	mov	r1, r5
   b80d0:	4620      	mov	r0, r4
}
   b80d2:	b002      	add	sp, #8
   b80d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b80d8:	4718      	bx	r3
}
   b80da:	2001      	movs	r0, #1
   b80dc:	b002      	add	sp, #8
   b80de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b80e2:	bf00      	nop
   b80e4:	2003e4fe 	.word	0x2003e4fe

000b80e8 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b80e8:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b80ea:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b80ee:	9401      	str	r4, [sp, #4]
   b80f0:	7a04      	ldrb	r4, [r0, #8]
   b80f2:	9400      	str	r4, [sp, #0]
   b80f4:	f7ff ffc2 	bl	b807c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b80f8:	b002      	add	sp, #8
   b80fa:	bd10      	pop	{r4, pc}

000b80fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b80fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8100:	b087      	sub	sp, #28
   b8102:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b8104:	23ff      	movs	r3, #255	; 0xff
   b8106:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b810a:	f10d 0317 	add.w	r3, sp, #23
   b810e:	9302      	str	r3, [sp, #8]
   b8110:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b81e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b8114:	f10d 0316 	add.w	r3, sp, #22
   b8118:	9301      	str	r3, [sp, #4]
   b811a:	f10d 0315 	add.w	r3, sp, #21
   b811e:	9300      	str	r3, [sp, #0]
{  
   b8120:	4604      	mov	r4, r0
   b8122:	4688      	mov	r8, r1
   b8124:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b8126:	ab05      	add	r3, sp, #20
   b8128:	f10d 0213 	add.w	r2, sp, #19
   b812c:	4649      	mov	r1, r9
   b812e:	3004      	adds	r0, #4
{  
   b8130:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b8134:	f7ff fe97 	bl	b7e66 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b8138:	4605      	mov	r5, r0
   b813a:	b908      	cbnz	r0, b8140 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b813c:	2500      	movs	r5, #0
   b813e:	e038      	b.n	b81b2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b8140:	6823      	ldr	r3, [r4, #0]
   b8142:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b8146:	681b      	ldr	r3, [r3, #0]
   b8148:	4649      	mov	r1, r9
   b814a:	4620      	mov	r0, r4
   b814c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b814e:	f899 3000 	ldrb.w	r3, [r9]
   b8152:	7a22      	ldrb	r2, [r4, #8]
   b8154:	429a      	cmp	r2, r3
   b8156:	d001      	beq.n	b815c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b8158:	2bff      	cmp	r3, #255	; 0xff
   b815a:	d12e      	bne.n	b81ba <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b815c:	b117      	cbz	r7, b8164 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b815e:	4b21      	ldr	r3, [pc, #132]	; (b81e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b8160:	785b      	ldrb	r3, [r3, #1]
   b8162:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b8164:	f1bb 0f00 	cmp.w	fp, #0
   b8168:	d003      	beq.n	b8172 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b816a:	4b1e      	ldr	r3, [pc, #120]	; (b81e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b816c:	781b      	ldrb	r3, [r3, #0]
   b816e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b8172:	f1ba 0f00 	cmp.w	sl, #0
   b8176:	d003      	beq.n	b8180 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b8178:	4b1a      	ldr	r3, [pc, #104]	; (b81e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b817a:	78db      	ldrb	r3, [r3, #3]
   b817c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b8180:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b8182:	b11b      	cbz	r3, b818c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b8184:	4b17      	ldr	r3, [pc, #92]	; (b81e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b8186:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8188:	791b      	ldrb	r3, [r3, #4]
   b818a:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b818c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b818e:	b11b      	cbz	r3, b8198 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b8190:	4b14      	ldr	r3, [pc, #80]	; (b81e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b8192:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b8194:	789b      	ldrb	r3, [r3, #2]
   b8196:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b8198:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b819c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b819e:	4912      	ldr	r1, [pc, #72]	; (b81e8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b81a0:	3b05      	subs	r3, #5
   b81a2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b81a4:	429a      	cmp	r2, r3
		*len = msgLen;
   b81a6:	bf88      	it	hi
   b81a8:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b81aa:	7832      	ldrb	r2, [r6, #0]
   b81ac:	4640      	mov	r0, r8
   b81ae:	f005 fdaf 	bl	bdd10 <memcpy>
}
   b81b2:	4628      	mov	r0, r5
   b81b4:	b007      	add	sp, #28
   b81b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b81ba:	f899 3002 	ldrb.w	r3, [r9, #2]
   b81be:	1c5a      	adds	r2, r3, #1
   b81c0:	f889 2002 	strb.w	r2, [r9, #2]
   b81c4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b81c8:	429a      	cmp	r2, r3
   b81ca:	d9b7      	bls.n	b813c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b81cc:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b81d0:	2b00      	cmp	r3, #0
   b81d2:	d0b3      	beq.n	b813c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b81d4:	6823      	ldr	r3, [r4, #0]
   b81d6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b81da:	685b      	ldr	r3, [r3, #4]
   b81dc:	4649      	mov	r1, r9
   b81de:	4620      	mov	r0, r4
   b81e0:	4798      	blx	r3
   b81e2:	e7ab      	b.n	b813c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b81e4:	2003e4fe 	.word	0x2003e4fe
   b81e8:	2003e503 	.word	0x2003e503

000b81ec <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b81ec:	b510      	push	{r4, lr}
   b81ee:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b81f0:	6a00      	ldr	r0, [r0, #32]
   b81f2:	6803      	ldr	r3, [r0, #0]
   b81f4:	68db      	ldr	r3, [r3, #12]
   b81f6:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b81f8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b81fc:	28ff      	cmp	r0, #255	; 0xff
   b81fe:	d002      	beq.n	b8206 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b8200:	2101      	movs	r1, #1
   b8202:	f003 fe8f 	bl	bbf24 <pinMode>

    deselectSlave();
   b8206:	6823      	ldr	r3, [r4, #0]
   b8208:	4620      	mov	r0, r4
   b820a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b820c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b820e:	2064      	movs	r0, #100	; 0x64
   b8210:	f001 f900 	bl	b9414 <delay>
#endif
    
    return true;
}
   b8214:	2001      	movs	r0, #1
   b8216:	bd10      	pop	{r4, pc}

000b8218 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b8218:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b821c:	2100      	movs	r1, #0
   b821e:	f003 be92 	b.w	bbf46 <digitalWrite>

000b8222 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b8222:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b8226:	2101      	movs	r1, #1
   b8228:	f003 be8d 	b.w	bbf46 <digitalWrite>

000b822c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b822c:	b570      	push	{r4, r5, r6, lr}
   b822e:	4604      	mov	r4, r0
   b8230:	460d      	mov	r5, r1
   b8232:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b8234:	f7ff fa7e 	bl	b7734 <_ZN15RHGenericDriverC1Ev>
   b8238:	4b03      	ldr	r3, [pc, #12]	; (b8248 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b823a:	6023      	str	r3, [r4, #0]
   b823c:	6226      	str	r6, [r4, #32]
   b823e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b8242:	4620      	mov	r0, r4
   b8244:	bd70      	pop	{r4, r5, r6, pc}
   b8246:	bf00      	nop
   b8248:	000bf1f8 	.word	0x000bf1f8

000b824c <_ZN11RHSPIDriver7spiReadEh>:
{
   b824c:	b538      	push	{r3, r4, r5, lr}
   b824e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b8250:	6a00      	ldr	r0, [r0, #32]
   b8252:	6803      	ldr	r3, [r0, #0]
   b8254:	6a1b      	ldr	r3, [r3, #32]
{
   b8256:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b8258:	4798      	blx	r3
    selectSlave();
   b825a:	6823      	ldr	r3, [r4, #0]
   b825c:	4620      	mov	r0, r4
   b825e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8260:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b8262:	6a20      	ldr	r0, [r4, #32]
   b8264:	6803      	ldr	r3, [r0, #0]
   b8266:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b826a:	681b      	ldr	r3, [r3, #0]
   b826c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b826e:	6a20      	ldr	r0, [r4, #32]
   b8270:	6803      	ldr	r3, [r0, #0]
   b8272:	2100      	movs	r1, #0
   b8274:	681b      	ldr	r3, [r3, #0]
   b8276:	4798      	blx	r3
    deselectSlave();
   b8278:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b827a:	4605      	mov	r5, r0
    deselectSlave();
   b827c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b827e:	4620      	mov	r0, r4
   b8280:	4798      	blx	r3
    _spi.endTransaction();
   b8282:	6a20      	ldr	r0, [r4, #32]
   b8284:	6803      	ldr	r3, [r0, #0]
   b8286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8288:	4798      	blx	r3
}
   b828a:	4628      	mov	r0, r5
   b828c:	bd38      	pop	{r3, r4, r5, pc}

000b828e <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b828e:	b570      	push	{r4, r5, r6, lr}
   b8290:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b8292:	6a00      	ldr	r0, [r0, #32]
   b8294:	6803      	ldr	r3, [r0, #0]
   b8296:	6a1b      	ldr	r3, [r3, #32]
{
   b8298:	4616      	mov	r6, r2
   b829a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b829c:	4798      	blx	r3
    selectSlave();
   b829e:	6823      	ldr	r3, [r4, #0]
   b82a0:	4620      	mov	r0, r4
   b82a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b82a4:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b82a6:	6a20      	ldr	r0, [r4, #32]
   b82a8:	6803      	ldr	r3, [r0, #0]
   b82aa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b82ae:	681b      	ldr	r3, [r3, #0]
   b82b0:	4798      	blx	r3
   b82b2:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b82b4:	6a20      	ldr	r0, [r4, #32]
   b82b6:	6803      	ldr	r3, [r0, #0]
   b82b8:	4631      	mov	r1, r6
   b82ba:	681b      	ldr	r3, [r3, #0]
   b82bc:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b82be:	2001      	movs	r0, #1
   b82c0:	f000 fcf6 	bl	b8cb0 <HAL_Delay_Microseconds>
    deselectSlave();
   b82c4:	6823      	ldr	r3, [r4, #0]
   b82c6:	4620      	mov	r0, r4
   b82c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b82ca:	4798      	blx	r3
    _spi.endTransaction();
   b82cc:	6a20      	ldr	r0, [r4, #32]
   b82ce:	6803      	ldr	r3, [r0, #0]
   b82d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b82d2:	4798      	blx	r3
}
   b82d4:	4628      	mov	r0, r5
   b82d6:	bd70      	pop	{r4, r5, r6, pc}

000b82d8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b82d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82da:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b82dc:	6a00      	ldr	r0, [r0, #32]
{
   b82de:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b82e0:	6803      	ldr	r3, [r0, #0]
   b82e2:	6a1b      	ldr	r3, [r3, #32]
{
   b82e4:	460f      	mov	r7, r1
   b82e6:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b82e8:	4798      	blx	r3
    selectSlave();
   b82ea:	6823      	ldr	r3, [r4, #0]
   b82ec:	4620      	mov	r0, r4
   b82ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b82f0:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b82f2:	6a20      	ldr	r0, [r4, #32]
   b82f4:	6803      	ldr	r3, [r0, #0]
   b82f6:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b82fa:	681b      	ldr	r3, [r3, #0]
   b82fc:	4798      	blx	r3
   b82fe:	442e      	add	r6, r5
   b8300:	4607      	mov	r7, r0
    while (len--)
   b8302:	42b5      	cmp	r5, r6
   b8304:	d007      	beq.n	b8316 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b8306:	6a20      	ldr	r0, [r4, #32]
   b8308:	6803      	ldr	r3, [r0, #0]
   b830a:	2100      	movs	r1, #0
   b830c:	681b      	ldr	r3, [r3, #0]
   b830e:	4798      	blx	r3
   b8310:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b8314:	e7f5      	b.n	b8302 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b8316:	6823      	ldr	r3, [r4, #0]
   b8318:	4620      	mov	r0, r4
   b831a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b831c:	4798      	blx	r3
    _spi.endTransaction();
   b831e:	6a20      	ldr	r0, [r4, #32]
   b8320:	6803      	ldr	r3, [r0, #0]
   b8322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8324:	4798      	blx	r3
}
   b8326:	4638      	mov	r0, r7
   b8328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b832a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b832a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b832c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b832e:	6a00      	ldr	r0, [r0, #32]
{
   b8330:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b8332:	6803      	ldr	r3, [r0, #0]
   b8334:	6a1b      	ldr	r3, [r3, #32]
{
   b8336:	460f      	mov	r7, r1
   b8338:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b833a:	4798      	blx	r3
    selectSlave();
   b833c:	6823      	ldr	r3, [r4, #0]
   b833e:	4620      	mov	r0, r4
   b8340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8342:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b8344:	6a20      	ldr	r0, [r4, #32]
   b8346:	6803      	ldr	r3, [r0, #0]
   b8348:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b834c:	681b      	ldr	r3, [r3, #0]
   b834e:	4798      	blx	r3
   b8350:	442e      	add	r6, r5
   b8352:	4607      	mov	r7, r0
    while (len--)
   b8354:	42b5      	cmp	r5, r6
   b8356:	d006      	beq.n	b8366 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b8358:	6a20      	ldr	r0, [r4, #32]
   b835a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b835e:	6803      	ldr	r3, [r0, #0]
   b8360:	681b      	ldr	r3, [r3, #0]
   b8362:	4798      	blx	r3
    while (len--)
   b8364:	e7f6      	b.n	b8354 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b8366:	6823      	ldr	r3, [r4, #0]
   b8368:	4620      	mov	r0, r4
   b836a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b836c:	4798      	blx	r3
    _spi.endTransaction();
   b836e:	6a20      	ldr	r0, [r4, #32]
   b8370:	6803      	ldr	r3, [r0, #0]
   b8372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8374:	4798      	blx	r3
}
   b8376:	4638      	mov	r0, r7
   b8378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b837a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b837a:	6a00      	ldr	r0, [r0, #32]
   b837c:	6803      	ldr	r3, [r0, #0]
   b837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8380:	4718      	bx	r3

000b8382 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b8382:	2001      	movs	r0, #1
   b8384:	4770      	bx	lr

000b8386 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b8386:	20fb      	movs	r0, #251	; 0xfb
   b8388:	4770      	bx	lr

000b838a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b838a:	4770      	bx	lr

000b838c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b838c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b838e:	7903      	ldrb	r3, [r0, #4]
   b8390:	2b05      	cmp	r3, #5
{
   b8392:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b8394:	d010      	beq.n	b83b8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b8396:	6803      	ldr	r3, [r0, #0]
   b8398:	2105      	movs	r1, #5
   b839a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b839e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b83a0:	2207      	movs	r2, #7
   b83a2:	2101      	movs	r1, #1
   b83a4:	4620      	mov	r0, r4
   b83a6:	f7ff ff72 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b83aa:	2280      	movs	r2, #128	; 0x80
   b83ac:	2140      	movs	r1, #64	; 0x40
   b83ae:	4620      	mov	r0, r4
   b83b0:	f7ff ff6d 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b83b4:	2305      	movs	r3, #5
   b83b6:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b83b8:	7923      	ldrb	r3, [r4, #4]
   b83ba:	2b05      	cmp	r3, #5
   b83bc:	d0fc      	beq.n	b83b8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b83be:	7e20      	ldrb	r0, [r4, #24]
}
   b83c0:	bd10      	pop	{r4, pc}

000b83c2 <_ZN7RH_RF95D0Ev>:
   b83c2:	b510      	push	{r4, lr}
   b83c4:	f44f 7198 	mov.w	r1, #304	; 0x130
   b83c8:	4604      	mov	r4, r0
   b83ca:	f7fb fe68 	bl	b409e <_ZdlPvj>
   b83ce:	4620      	mov	r0, r4
   b83d0:	bd10      	pop	{r4, pc}

000b83d2 <_ZN7RH_RF955sleepEv>:
{
   b83d2:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b83d4:	7903      	ldrb	r3, [r0, #4]
   b83d6:	2b01      	cmp	r3, #1
{
   b83d8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b83da:	d00b      	beq.n	b83f4 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b83dc:	6803      	ldr	r3, [r0, #0]
   b83de:	2101      	movs	r1, #1
   b83e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b83e4:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b83e6:	2200      	movs	r2, #0
   b83e8:	2101      	movs	r1, #1
   b83ea:	4620      	mov	r0, r4
   b83ec:	f7ff ff4f 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b83f0:	2301      	movs	r3, #1
   b83f2:	7123      	strb	r3, [r4, #4]
}
   b83f4:	2001      	movs	r0, #1
   b83f6:	bd10      	pop	{r4, pc}

000b83f8 <_ZN7RH_RF954recvEPhS0_>:
{
   b83f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b83fa:	6803      	ldr	r3, [r0, #0]
   b83fc:	68db      	ldr	r3, [r3, #12]
{
   b83fe:	4604      	mov	r4, r0
   b8400:	460f      	mov	r7, r1
   b8402:	4615      	mov	r5, r2
    if (!available())
   b8404:	4798      	blx	r3
   b8406:	4606      	mov	r6, r0
   b8408:	b1b0      	cbz	r0, b8438 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b840a:	b187      	cbz	r7, b842e <_ZN7RH_RF954recvEPhS0_+0x36>
   b840c:	b17d      	cbz	r5, b842e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b840e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b8412:	782a      	ldrb	r2, [r5, #0]
   b8414:	3b03      	subs	r3, #3
   b8416:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b8418:	bfde      	ittt	le
   b841a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b841e:	3b04      	suble	r3, #4
   b8420:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b8422:	782a      	ldrb	r2, [r5, #0]
   b8424:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b8428:	4638      	mov	r0, r7
   b842a:	f005 fc71 	bl	bdd10 <memcpy>
    _rxBufValid = false;
   b842e:	2300      	movs	r3, #0
   b8430:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b8434:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b8438:	4630      	mov	r0, r6
   b843a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b843c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b843c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b843e:	b538      	push	{r3, r4, r5, lr}
   b8440:	4605      	mov	r5, r0
   b8442:	460c      	mov	r4, r1
	if (power > 20)
   b8444:	dc14      	bgt.n	b8470 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b8446:	2901      	cmp	r1, #1
   b8448:	dd14      	ble.n	b8474 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b844a:	2911      	cmp	r1, #17
   b844c:	dd13      	ble.n	b8476 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b844e:	2207      	movs	r2, #7
   b8450:	214d      	movs	r1, #77	; 0x4d
   b8452:	4628      	mov	r0, r5
   b8454:	f7ff ff1b 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b8458:	3c03      	subs	r4, #3
   b845a:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b845c:	1ea2      	subs	r2, r4, #2
   b845e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b8462:	4628      	mov	r0, r5
   b8464:	b2d2      	uxtb	r2, r2
}
   b8466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b846a:	2109      	movs	r1, #9
   b846c:	f7ff bf0f 	b.w	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b8470:	2414      	movs	r4, #20
   b8472:	e7ec      	b.n	b844e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b8474:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b8476:	2204      	movs	r2, #4
   b8478:	214d      	movs	r1, #77	; 0x4d
   b847a:	4628      	mov	r0, r5
   b847c:	f7ff ff07 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
   b8480:	e7ec      	b.n	b845c <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b8484 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b8484:	b538      	push	{r3, r4, r5, lr}
   b8486:	4604      	mov	r4, r0
   b8488:	4615      	mov	r5, r2
    _rxBufValid(0)
   b848a:	461a      	mov	r2, r3
   b848c:	f7ff fece 	bl	b822c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b8490:	4b09      	ldr	r3, [pc, #36]	; (b84b8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b8492:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b8494:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b8496:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b8498:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b849c:	2201      	movs	r2, #1
    _rxBufValid(0)
   b849e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b84a2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b84a6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b84aa:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b84ae:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b84b2:	4620      	mov	r0, r4
   b84b4:	bd38      	pop	{r3, r4, r5, pc}
   b84b6:	bf00      	nop
   b84b8:	000bf290 	.word	0x000bf290

000b84bc <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b84bc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b84c0:	2b03      	cmp	r3, #3
   b84c2:	d91b      	bls.n	b84fc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b84c4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b84c8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b84ca:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b84ce:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b84d0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b84d4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b84d6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b84da:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b84dc:	7983      	ldrb	r3, [r0, #6]
   b84de:	b933      	cbnz	r3, b84ee <_ZN7RH_RF9513validateRxBufEv+0x32>
   b84e0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b84e2:	7942      	ldrb	r2, [r0, #5]
   b84e4:	429a      	cmp	r2, r3
   b84e6:	d002      	beq.n	b84ee <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b84e8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b84ea:	2bff      	cmp	r3, #255	; 0xff
   b84ec:	d106      	bne.n	b84fc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b84ee:	8a83      	ldrh	r3, [r0, #20]
   b84f0:	3301      	adds	r3, #1
   b84f2:	b29b      	uxth	r3, r3
   b84f4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b84f6:	2301      	movs	r3, #1
   b84f8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b84fc:	4770      	bx	lr
	...

000b8500 <_ZN7RH_RF9512setFrequencyEf>:
{
   b8500:	b538      	push	{r3, r4, r5, lr}
   b8502:	4604      	mov	r4, r0
   b8504:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8508:	ee10 0a10 	vmov	r0, s0
{
   b850c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8510:	f005 f80c 	bl	bd52c <__aeabi_f2d>
   b8514:	a317      	add	r3, pc, #92	; (adr r3, b8574 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b8516:	e9d3 2300 	ldrd	r2, r3, [r3]
   b851a:	f005 f85f 	bl	bd5dc <__aeabi_dmul>
   b851e:	a317      	add	r3, pc, #92	; (adr r3, b857c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b8520:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8524:	f005 f984 	bl	bd830 <__aeabi_ddiv>
   b8528:	f005 fb30 	bl	bdb8c <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b852c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b852e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b8530:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b8534:	4620      	mov	r0, r4
   b8536:	f7ff feaa 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b853a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b853e:	2107      	movs	r1, #7
   b8540:	4620      	mov	r0, r4
   b8542:	f7ff fea4 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b8546:	b2ea      	uxtb	r2, r5
   b8548:	2108      	movs	r1, #8
   b854a:	4620      	mov	r0, r4
   b854c:	f7ff fe9f 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b8550:	eddf 7a07 	vldr	s15, [pc, #28]	; b8570 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b8554:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b8558:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8560:	bfac      	ite	ge
   b8562:	2301      	movge	r3, #1
   b8564:	2300      	movlt	r3, #0
}
   b8566:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b8568:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b856c:	bd38      	pop	{r3, r4, r5, pc}
   b856e:	bf00      	nop
   b8570:	4442c000 	.word	0x4442c000
   b8574:	00000000 	.word	0x00000000
   b8578:	412e8480 	.word	0x412e8480
   b857c:	00000000 	.word	0x00000000
   b8580:	404e8480 	.word	0x404e8480

000b8584 <_ZN7RH_RF9511setModeIdleEv>:
{
   b8584:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b8586:	7903      	ldrb	r3, [r0, #4]
   b8588:	2b02      	cmp	r3, #2
{
   b858a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b858c:	d00b      	beq.n	b85a6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b858e:	6803      	ldr	r3, [r0, #0]
   b8590:	2102      	movs	r1, #2
   b8592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8596:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b8598:	2201      	movs	r2, #1
   b859a:	4611      	mov	r1, r2
   b859c:	4620      	mov	r0, r4
   b859e:	f7ff fe76 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b85a2:	2302      	movs	r3, #2
   b85a4:	7123      	strb	r3, [r4, #4]
}
   b85a6:	bd10      	pop	{r4, pc}

000b85a8 <_ZN7RH_RF9515handleInterruptEv>:
{
   b85a8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b85aa:	2112      	movs	r1, #18
{
   b85ac:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b85ae:	f7ff fe4d 	bl	b824c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b85b2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b85b4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b85b6:	4620      	mov	r0, r4
   b85b8:	f7ff fe48 	bl	b824c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b85bc:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b85be:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b85c0:	2112      	movs	r1, #18
   b85c2:	4620      	mov	r0, r4
   b85c4:	f7ff fe63 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b85c8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b85ca:	2b04      	cmp	r3, #4
   b85cc:	d107      	bne.n	b85de <_ZN7RH_RF9515handleInterruptEv+0x36>
   b85ce:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b85d2:	d117      	bne.n	b8604 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b85d4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b85d8:	b10b      	cbz	r3, b85de <_ZN7RH_RF9515handleInterruptEv+0x36>
   b85da:	0670      	lsls	r0, r6, #25
   b85dc:	d512      	bpl.n	b8604 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b85de:	7923      	ldrb	r3, [r4, #4]
   b85e0:	2b04      	cmp	r3, #4
   b85e2:	d101      	bne.n	b85e8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b85e4:	0669      	lsls	r1, r5, #25
   b85e6:	d422      	bmi.n	b862e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b85e8:	7923      	ldrb	r3, [r4, #4]
   b85ea:	2b03      	cmp	r3, #3
   b85ec:	d101      	bne.n	b85f2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b85ee:	072a      	lsls	r2, r5, #28
   b85f0:	d468      	bmi.n	b86c4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b85f2:	7923      	ldrb	r3, [r4, #4]
   b85f4:	2b05      	cmp	r3, #5
   b85f6:	d10e      	bne.n	b8616 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b85f8:	076b      	lsls	r3, r5, #29
   b85fa:	d50c      	bpl.n	b8616 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b85fc:	f005 0501 	and.w	r5, r5, #1
   b8600:	7625      	strb	r5, [r4, #24]
   b8602:	e063      	b.n	b86cc <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b8604:	8a63      	ldrh	r3, [r4, #18]
   b8606:	3301      	adds	r3, #1
   b8608:	b29b      	uxth	r3, r3
   b860a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b860c:	2300      	movs	r3, #0
   b860e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b8612:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8616:	22ff      	movs	r2, #255	; 0xff
   b8618:	2112      	movs	r1, #18
   b861a:	4620      	mov	r0, r4
   b861c:	f7ff fe37 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8620:	4620      	mov	r0, r4
   b8622:	22ff      	movs	r2, #255	; 0xff
}
   b8624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8628:	2112      	movs	r1, #18
   b862a:	f7ff be30 	b.w	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b862e:	2113      	movs	r1, #19
   b8630:	4620      	mov	r0, r4
   b8632:	f7ff fe0b 	bl	b824c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b8636:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b8638:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b863a:	4620      	mov	r0, r4
   b863c:	f7ff fe06 	bl	b824c <_ZN11RHSPIDriver7spiReadEh>
   b8640:	210d      	movs	r1, #13
   b8642:	4602      	mov	r2, r0
   b8644:	4620      	mov	r0, r4
   b8646:	f7ff fe22 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b864a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b864e:	462b      	mov	r3, r5
   b8650:	2100      	movs	r1, #0
   b8652:	4620      	mov	r0, r4
   b8654:	f7ff fe40 	bl	b82d8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b8658:	2119      	movs	r1, #25
	_bufLen = len;
   b865a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b865e:	4620      	mov	r0, r4
   b8660:	f7ff fdf4 	bl	b824c <_ZN11RHSPIDriver7spiReadEh>
   b8664:	b240      	sxtb	r0, r0
   b8666:	2800      	cmp	r0, #0
   b8668:	bfb8      	it	lt
   b866a:	3003      	addlt	r0, #3
   b866c:	1080      	asrs	r0, r0, #2
   b866e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b8672:	211a      	movs	r1, #26
   b8674:	4620      	mov	r0, r4
   b8676:	f7ff fde9 	bl	b824c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b867a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b867e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b8680:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b8682:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b8684:	bfa9      	itett	ge
   b8686:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b8688:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b868a:	b21b      	sxthge	r3, r3
   b868c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b868e:	bfb2      	itee	lt
   b8690:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b8692:	220f      	movge	r2, #15
   b8694:	fb93 f3f2 	sdivge	r3, r3, r2
   b8698:	b21b      	sxth	r3, r3
   b869a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b869c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b86a0:	b16b      	cbz	r3, b86be <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b86a2:	8a23      	ldrh	r3, [r4, #16]
   b86a4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b86a6:	b21b      	sxth	r3, r3
   b86a8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b86aa:	4620      	mov	r0, r4
   b86ac:	f7ff ff06 	bl	b84bc <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b86b0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b86b4:	2b00      	cmp	r3, #0
   b86b6:	d0ae      	beq.n	b8616 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b86b8:	f7ff ff64 	bl	b8584 <_ZN7RH_RF9511setModeIdleEv>
   b86bc:	e7ab      	b.n	b8616 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b86be:	8a23      	ldrh	r3, [r4, #16]
   b86c0:	3ba4      	subs	r3, #164	; 0xa4
   b86c2:	e7f0      	b.n	b86a6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b86c4:	8ae3      	ldrh	r3, [r4, #22]
   b86c6:	3301      	adds	r3, #1
   b86c8:	b29b      	uxth	r3, r3
   b86ca:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b86cc:	4620      	mov	r0, r4
   b86ce:	e7f3      	b.n	b86b8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b86d0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b86d0:	4b02      	ldr	r3, [pc, #8]	; (b86dc <_ZN7RH_RF954isr0Ev+0xc>)
   b86d2:	6818      	ldr	r0, [r3, #0]
   b86d4:	b108      	cbz	r0, b86da <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b86d6:	f7ff bf67 	b.w	b85a8 <_ZN7RH_RF9515handleInterruptEv>
}
   b86da:	4770      	bx	lr
   b86dc:	2003e600 	.word	0x2003e600

000b86e0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b86e0:	4b02      	ldr	r3, [pc, #8]	; (b86ec <_ZN7RH_RF954isr1Ev+0xc>)
   b86e2:	6858      	ldr	r0, [r3, #4]
   b86e4:	b108      	cbz	r0, b86ea <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b86e6:	f7ff bf5f 	b.w	b85a8 <_ZN7RH_RF9515handleInterruptEv>
}
   b86ea:	4770      	bx	lr
   b86ec:	2003e600 	.word	0x2003e600

000b86f0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b86f0:	4b02      	ldr	r3, [pc, #8]	; (b86fc <_ZN7RH_RF954isr2Ev+0xc>)
   b86f2:	6898      	ldr	r0, [r3, #8]
   b86f4:	b108      	cbz	r0, b86fa <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b86f6:	f7ff bf57 	b.w	b85a8 <_ZN7RH_RF9515handleInterruptEv>
}
   b86fa:	4770      	bx	lr
   b86fc:	2003e600 	.word	0x2003e600

000b8700 <_ZN7RH_RF959setModeRxEv>:
{
   b8700:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b8702:	7903      	ldrb	r3, [r0, #4]
   b8704:	2b04      	cmp	r3, #4
{
   b8706:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b8708:	d010      	beq.n	b872c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b870a:	6803      	ldr	r3, [r0, #0]
   b870c:	2104      	movs	r1, #4
   b870e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8712:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b8714:	2205      	movs	r2, #5
   b8716:	2101      	movs	r1, #1
   b8718:	4620      	mov	r0, r4
   b871a:	f7ff fdb8 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b871e:	2200      	movs	r2, #0
   b8720:	2140      	movs	r1, #64	; 0x40
   b8722:	4620      	mov	r0, r4
   b8724:	f7ff fdb3 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b8728:	2304      	movs	r3, #4
   b872a:	7123      	strb	r3, [r4, #4]
}
   b872c:	bd10      	pop	{r4, pc}

000b872e <_ZN7RH_RF959availableEv>:
{
   b872e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b8730:	7903      	ldrb	r3, [r0, #4]
   b8732:	2b03      	cmp	r3, #3
{
   b8734:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b8736:	d005      	beq.n	b8744 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b8738:	f7ff ffe2 	bl	b8700 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b873c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b8740:	b2c0      	uxtb	r0, r0
}
   b8742:	bd10      	pop	{r4, pc}
	return false;
   b8744:	2000      	movs	r0, #0
   b8746:	e7fc      	b.n	b8742 <_ZN7RH_RF959availableEv+0x14>

000b8748 <_ZN7RH_RF959setModeTxEv>:
{
   b8748:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b874a:	7903      	ldrb	r3, [r0, #4]
   b874c:	2b03      	cmp	r3, #3
{
   b874e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b8750:	d010      	beq.n	b8774 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b8752:	6803      	ldr	r3, [r0, #0]
   b8754:	2103      	movs	r1, #3
   b8756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b875a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b875c:	2203      	movs	r2, #3
   b875e:	2101      	movs	r1, #1
   b8760:	4620      	mov	r0, r4
   b8762:	f7ff fd94 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b8766:	2240      	movs	r2, #64	; 0x40
   b8768:	4611      	mov	r1, r2
   b876a:	4620      	mov	r0, r4
   b876c:	f7ff fd8f 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b8770:	2303      	movs	r3, #3
   b8772:	7123      	strb	r3, [r4, #4]
}
   b8774:	bd10      	pop	{r4, pc}

000b8776 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b8776:	2afb      	cmp	r2, #251	; 0xfb
{
   b8778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b877a:	4604      	mov	r4, r0
   b877c:	460f      	mov	r7, r1
   b877e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b8780:	d902      	bls.n	b8788 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b8782:	2600      	movs	r6, #0
}
   b8784:	4630      	mov	r0, r6
   b8786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b8788:	6803      	ldr	r3, [r0, #0]
   b878a:	6a1b      	ldr	r3, [r3, #32]
   b878c:	4798      	blx	r3
    setModeIdle();
   b878e:	4620      	mov	r0, r4
   b8790:	f7ff fef8 	bl	b8584 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b8794:	6823      	ldr	r3, [r4, #0]
   b8796:	4620      	mov	r0, r4
   b8798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b879a:	4798      	blx	r3
   b879c:	4606      	mov	r6, r0
   b879e:	2800      	cmp	r0, #0
   b87a0:	d0ef      	beq.n	b8782 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b87a2:	2200      	movs	r2, #0
   b87a4:	210d      	movs	r1, #13
   b87a6:	4620      	mov	r0, r4
   b87a8:	f7ff fd71 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b87ac:	7ae2      	ldrb	r2, [r4, #11]
   b87ae:	2100      	movs	r1, #0
   b87b0:	4620      	mov	r0, r4
   b87b2:	f7ff fd6c 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b87b6:	7b22      	ldrb	r2, [r4, #12]
   b87b8:	2100      	movs	r1, #0
   b87ba:	4620      	mov	r0, r4
   b87bc:	f7ff fd67 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b87c0:	7b62      	ldrb	r2, [r4, #13]
   b87c2:	2100      	movs	r1, #0
   b87c4:	4620      	mov	r0, r4
   b87c6:	f7ff fd62 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b87ca:	7ba2      	ldrb	r2, [r4, #14]
   b87cc:	2100      	movs	r1, #0
   b87ce:	4620      	mov	r0, r4
   b87d0:	f7ff fd5d 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b87d4:	462b      	mov	r3, r5
   b87d6:	463a      	mov	r2, r7
   b87d8:	2100      	movs	r1, #0
   b87da:	4620      	mov	r0, r4
   b87dc:	f7ff fda5 	bl	b832a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b87e0:	1d2a      	adds	r2, r5, #4
   b87e2:	b2d2      	uxtb	r2, r2
   b87e4:	2122      	movs	r1, #34	; 0x22
   b87e6:	4620      	mov	r0, r4
   b87e8:	f7ff fd51 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b87ec:	4620      	mov	r0, r4
   b87ee:	f7ff ffab 	bl	b8748 <_ZN7RH_RF959setModeTxEv>
    return true;
   b87f2:	e7c7      	b.n	b8784 <_ZN7RH_RF954sendEPKhh+0xe>

000b87f4 <_ZN7RH_RF9510setTxPowerEab>:
{
   b87f4:	b510      	push	{r4, lr}
   b87f6:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b87f8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b87fc:	b172      	cbz	r2, b881c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b87fe:	f381 0204 	usat	r2, #4, r1
   b8802:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b8806:	b2d2      	uxtb	r2, r2
   b8808:	2109      	movs	r1, #9
   b880a:	f7ff fd40 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b880e:	4620      	mov	r0, r4
   b8810:	2204      	movs	r2, #4
}
   b8812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b8816:	214d      	movs	r1, #77	; 0x4d
   b8818:	f7ff bd39 	b.w	b828e <_ZN11RHSPIDriver8spiWriteEhh>
}
   b881c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8820:	f7ff be0c 	b.w	b843c <_ZN7RH_RF9510setTxPowerEab.part.0>

000b8824 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b8824:	b538      	push	{r3, r4, r5, lr}
   b8826:	460c      	mov	r4, r1
   b8828:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b882a:	780a      	ldrb	r2, [r1, #0]
   b882c:	211d      	movs	r1, #29
   b882e:	f7ff fd2e 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b8832:	7862      	ldrb	r2, [r4, #1]
   b8834:	211e      	movs	r1, #30
   b8836:	4628      	mov	r0, r5
   b8838:	f7ff fd29 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b883c:	78a2      	ldrb	r2, [r4, #2]
   b883e:	4628      	mov	r0, r5
   b8840:	2126      	movs	r1, #38	; 0x26
}
   b8842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b8846:	f7ff bd22 	b.w	b828e <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b884c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b884c:	2905      	cmp	r1, #5
{
   b884e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b8850:	d80f      	bhi.n	b8872 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b8852:	4b09      	ldr	r3, [pc, #36]	; (b8878 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b8854:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b8858:	185c      	adds	r4, r3, r1
   b885a:	5a5a      	ldrh	r2, [r3, r1]
   b885c:	78a3      	ldrb	r3, [r4, #2]
   b885e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b8862:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b8864:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b8868:	f7ff ffdc 	bl	b8824 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b886c:	2001      	movs	r0, #1
}
   b886e:	b002      	add	sp, #8
   b8870:	bd10      	pop	{r4, pc}
        return false;
   b8872:	2000      	movs	r0, #0
   b8874:	e7fb      	b.n	b886e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b8876:	bf00      	nop
   b8878:	000bf278 	.word	0x000bf278

000b887c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b887c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b887e:	0a0a      	lsrs	r2, r1, #8
{
   b8880:	4605      	mov	r5, r0
   b8882:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b8884:	2120      	movs	r1, #32
   b8886:	f7ff fd02 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b888a:	b2e2      	uxtb	r2, r4
   b888c:	4628      	mov	r0, r5
   b888e:	2121      	movs	r1, #33	; 0x21
}
   b8890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b8894:	f7ff bcfb 	b.w	b828e <_ZN11RHSPIDriver8spiWriteEhh>

000b8898 <_ZN7RH_RF954initEv>:
{
   b8898:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b889a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b889c:	f7ff fca6 	bl	b81ec <_ZN11RHSPIDriver4initEv>
   b88a0:	4606      	mov	r6, r0
   b88a2:	b918      	cbnz	r0, b88ac <_ZN7RH_RF954initEv+0x14>
	return false;
   b88a4:	2600      	movs	r6, #0
}
   b88a6:	4630      	mov	r0, r6
   b88a8:	b002      	add	sp, #8
   b88aa:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b88ac:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b88b0:	2dff      	cmp	r5, #255	; 0xff
   b88b2:	d054      	beq.n	b895e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b88b4:	4629      	mov	r1, r5
   b88b6:	4620      	mov	r0, r4
   b88b8:	f7ff fd5f 	bl	b837a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b88bc:	2280      	movs	r2, #128	; 0x80
   b88be:	2101      	movs	r1, #1
   b88c0:	4620      	mov	r0, r4
   b88c2:	f7ff fce4 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b88c6:	200a      	movs	r0, #10
   b88c8:	f000 fda4 	bl	b9414 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b88cc:	2101      	movs	r1, #1
   b88ce:	4620      	mov	r0, r4
   b88d0:	f7ff fcbc 	bl	b824c <_ZN11RHSPIDriver7spiReadEh>
   b88d4:	2880      	cmp	r0, #128	; 0x80
   b88d6:	d1e5      	bne.n	b88a4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b88d8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b88dc:	28ff      	cmp	r0, #255	; 0xff
   b88de:	d01c      	beq.n	b891a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b88e0:	2100      	movs	r1, #0
   b88e2:	f003 fb1f 	bl	bbf24 <pinMode>
	if (_myInterruptIndex == 0xff)
   b88e6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b88ea:	2bff      	cmp	r3, #255	; 0xff
   b88ec:	d107      	bne.n	b88fe <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b88ee:	4a26      	ldr	r2, [pc, #152]	; (b8988 <_ZN7RH_RF954initEv+0xf0>)
   b88f0:	7813      	ldrb	r3, [r2, #0]
   b88f2:	2b03      	cmp	r3, #3
   b88f4:	d8d6      	bhi.n	b88a4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b88f6:	1c59      	adds	r1, r3, #1
   b88f8:	7011      	strb	r1, [r2, #0]
   b88fa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b88fe:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b8902:	4b22      	ldr	r3, [pc, #136]	; (b898c <_ZN7RH_RF954initEv+0xf4>)
   b8904:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b8908:	bb62      	cbnz	r2, b8964 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b890a:	4921      	ldr	r1, [pc, #132]	; (b8990 <_ZN7RH_RF954initEv+0xf8>)
   b890c:	9200      	str	r2, [sp, #0]
   b890e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8912:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b8914:	b2a8      	uxth	r0, r5
   b8916:	f001 f835 	bl	b9984 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b891a:	2200      	movs	r2, #0
   b891c:	210e      	movs	r1, #14
   b891e:	4620      	mov	r0, r4
   b8920:	f7ff fcb5 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b8924:	2200      	movs	r2, #0
   b8926:	210f      	movs	r1, #15
   b8928:	4620      	mov	r0, r4
   b892a:	f7ff fcb0 	bl	b828e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b892e:	4620      	mov	r0, r4
   b8930:	f7ff fe28 	bl	b8584 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b8934:	2100      	movs	r1, #0
   b8936:	4620      	mov	r0, r4
   b8938:	f7ff ff88 	bl	b884c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b893c:	2108      	movs	r1, #8
   b893e:	4620      	mov	r0, r4
   b8940:	f7ff ff9c 	bl	b887c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b8944:	ed9f 0a13 	vldr	s0, [pc, #76]	; b8994 <_ZN7RH_RF954initEv+0xfc>
   b8948:	4620      	mov	r0, r4
   b894a:	f7ff fdd9 	bl	b8500 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b894e:	2300      	movs	r3, #0
   b8950:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b8954:	210d      	movs	r1, #13
   b8956:	4620      	mov	r0, r4
   b8958:	f7ff fd70 	bl	b843c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b895c:	e7a3      	b.n	b88a6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b895e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b8962:	e7ab      	b.n	b88bc <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b8964:	2a01      	cmp	r2, #1
   b8966:	f04f 0300 	mov.w	r3, #0
   b896a:	d104      	bne.n	b8976 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b896c:	9300      	str	r3, [sp, #0]
   b896e:	490a      	ldr	r1, [pc, #40]	; (b8998 <_ZN7RH_RF954initEv+0x100>)
   b8970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8974:	e7ce      	b.n	b8914 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b8976:	2a02      	cmp	r2, #2
   b8978:	d194      	bne.n	b88a4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b897a:	9300      	str	r3, [sp, #0]
   b897c:	4907      	ldr	r1, [pc, #28]	; (b899c <_ZN7RH_RF954initEv+0x104>)
   b897e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8982:	2201      	movs	r2, #1
   b8984:	e7c6      	b.n	b8914 <_ZN7RH_RF954initEv+0x7c>
   b8986:	bf00      	nop
   b8988:	2003e5fd 	.word	0x2003e5fd
   b898c:	2003e600 	.word	0x2003e600
   b8990:	000b86d1 	.word	0x000b86d1
   b8994:	43d90000 	.word	0x43d90000
   b8998:	000b86e1 	.word	0x000b86e1
   b899c:	000b86f1 	.word	0x000b86f1

000b89a0 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b89a0:	6803      	ldr	r3, [r0, #0]
   b89a2:	685b      	ldr	r3, [r3, #4]
   b89a4:	4718      	bx	r3

000b89a6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b89a6:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b89a8:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b89aa:	4604      	mov	r4, r0
    if (lastUpdate) {
   b89ac:	b133      	cbz	r3, b89bc <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b89ae:	b131      	cbz	r1, b89be <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b89b0:	6823      	ldr	r3, [r4, #0]
   b89b2:	4620      	mov	r0, r4
   b89b4:	689b      	ldr	r3, [r3, #8]
   b89b6:	4798      	blx	r3
            lastUpdate = 0;
   b89b8:	2300      	movs	r3, #0
   b89ba:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b89bc:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b89be:	f000 f97f 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b89c2:	69a3      	ldr	r3, [r4, #24]
   b89c4:	1ac0      	subs	r0, r0, r3
   b89c6:	69e3      	ldr	r3, [r4, #28]
   b89c8:	4298      	cmp	r0, r3
   b89ca:	d2f1      	bcs.n	b89b0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b89cc:	e7f6      	b.n	b89bc <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b89ce <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b89ce:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b89d0:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b89d2:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b89d4:	b11b      	cbz	r3, b89de <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b89d6:	f000 f973 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b89da:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b89dc:	bd10      	pop	{r4, pc}
        save();
   b89de:	6803      	ldr	r3, [r0, #0]
}
   b89e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b89e4:	689b      	ldr	r3, [r3, #8]
   b89e6:	4718      	bx	r3

000b89e8 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   b89e8:	f000 b942 	b.w	b8c70 <os_mutex_recursive_unlock>

000b89ec <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b89ec:	b507      	push	{r0, r1, r2, lr}
   b89ee:	4613      	mov	r3, r2
    if (data) {
   b89f0:	b139      	cbz	r1, b8a02 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b89f2:	2200      	movs	r2, #0
   b89f4:	e9cd 2200 	strd	r2, r2, [sp]
   b89f8:	460a      	mov	r2, r1
   b89fa:	6801      	ldr	r1, [r0, #0]
   b89fc:	201e      	movs	r0, #30
   b89fe:	f000 fb4f 	bl	b90a0 <log_dump>
}
   b8a02:	b003      	add	sp, #12
   b8a04:	f85d fb04 	ldr.w	pc, [sp], #4

000b8a08 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   b8a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   b8a0a:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   b8a0e:	4604      	mov	r4, r0
    if (logData) {
   b8a10:	b19b      	cbz	r3, b8a3a <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b8a12:	6883      	ldr	r3, [r0, #8]
   b8a14:	4d0a      	ldr	r5, [pc, #40]	; (b8a40 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   b8a16:	88da      	ldrh	r2, [r3, #6]
   b8a18:	490a      	ldr	r1, [pc, #40]	; (b8a44 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   b8a1a:	4628      	mov	r0, r5
   b8a1c:	f7fb fc32 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b8a20:	68a1      	ldr	r1, [r4, #8]
   b8a22:	4628      	mov	r0, r5
   b8a24:	88ca      	ldrh	r2, [r1, #6]
   b8a26:	f7ff ffe1 	bl	b89ec <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b8a2a:	2300      	movs	r3, #0
   b8a2c:	9300      	str	r3, [sp, #0]
   b8a2e:	4a06      	ldr	r2, [pc, #24]	; (b8a48 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b8a30:	6829      	ldr	r1, [r5, #0]
   b8a32:	2301      	movs	r3, #1
   b8a34:	201e      	movs	r0, #30
   b8a36:	f000 fb2b 	bl	b9090 <log_write>
        Log.print("\n");
    }
}
   b8a3a:	b003      	add	sp, #12
   b8a3c:	bd30      	pop	{r4, r5, pc}
   b8a3e:	bf00      	nop
   b8a40:	2003e654 	.word	0x2003e654
   b8a44:	000bf314 	.word	0x000bf314
   b8a48:	000bf514 	.word	0x000bf514

000b8a4c <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b8a4c:	b510      	push	{r4, lr}
   b8a4e:	4604      	mov	r4, r0
   b8a50:	3004      	adds	r0, #4
   b8a52:	f7fd f8fd 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8a56:	6823      	ldr	r3, [r4, #0]
   b8a58:	68e1      	ldr	r1, [r4, #12]
   b8a5a:	695b      	ldr	r3, [r3, #20]
   b8a5c:	4620      	mov	r0, r4
   b8a5e:	4798      	blx	r3
   b8a60:	b918      	cbnz	r0, b8a6a <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b8a62:	6823      	ldr	r3, [r4, #0]
   b8a64:	4620      	mov	r0, r4
   b8a66:	699b      	ldr	r3, [r3, #24]
   b8a68:	4798      	blx	r3
      { _M_device.unlock(); }
   b8a6a:	6860      	ldr	r0, [r4, #4]
   b8a6c:	f7ff ffbc 	bl	b89e8 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8a70:	2001      	movs	r0, #1
   b8a72:	bd10      	pop	{r4, pc}

000b8a74 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a76:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b8a7a:	4f18      	ldr	r7, [pc, #96]	; (b8adc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8a7c:	4e18      	ldr	r6, [pc, #96]	; (b8ae0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b8a7e:	4d19      	ldr	r5, [pc, #100]	; (b8ae4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b8a80:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b8a82:	42a0      	cmp	r0, r4
   b8a84:	d00c      	beq.n	b8aa0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8a86:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b8a8a:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8a8c:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b8a90:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b8a92:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8a94:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b8a98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b8a9c:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b8a9e:	e7f0      	b.n	b8a82 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b8aa0:	f001 0403 	and.w	r4, r1, #3
   b8aa4:	4404      	add	r4, r0
    k = 0;
   b8aa6:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b8aa8:	42a0      	cmp	r0, r4
   b8aaa:	d004      	beq.n	b8ab6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b8aac:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b8ab0:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8ab4:	e7f8      	b.n	b8aa8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b8ab6:	4809      	ldr	r0, [pc, #36]	; (b8adc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b8ab8:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b8aba:	4809      	ldr	r0, [pc, #36]	; (b8ae0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8abc:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b8ac0:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b8ac2:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8ac4:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b8ac6:	4b08      	ldr	r3, [pc, #32]	; (b8ae8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b8ac8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b8acc:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b8ace:	4b07      	ldr	r3, [pc, #28]	; (b8aec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b8ad0:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b8ad4:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b8ad6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b8ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8adc:	cc9e2d51 	.word	0xcc9e2d51
   b8ae0:	1b873593 	.word	0x1b873593
   b8ae4:	e6546b64 	.word	0xe6546b64
   b8ae8:	85ebca6b 	.word	0x85ebca6b
   b8aec:	c2b2ae35 	.word	0xc2b2ae35

000b8af0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b8af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8af2:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8af4:	3004      	adds	r0, #4
   b8af6:	f7fd f8ab 	bl	b5c50 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b8afa:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b8afc:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b8afe:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b8b00:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8b02:	68a6      	ldr	r6, [r4, #8]
   b8b04:	4a05      	ldr	r2, [pc, #20]	; (b8b1c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b8b06:	88f1      	ldrh	r1, [r6, #6]
   b8b08:	4630      	mov	r0, r6
   b8b0a:	f7ff ffb3 	bl	b8a74 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b8b0e:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8b10:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b8b12:	6860      	ldr	r0, [r4, #4]
   b8b14:	f7ff ff68 	bl	b89e8 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8b18:	4628      	mov	r0, r5
   b8b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8b1c:	851c2a3f 	.word	0x851c2a3f

000b8b20 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b8b20:	b570      	push	{r4, r5, r6, lr}
   b8b22:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b8b24:	6885      	ldr	r5, [r0, #8]
   b8b26:	f7ff ffe3 	bl	b8af0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8b2a:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b8b2c:	6823      	ldr	r3, [r4, #0]
   b8b2e:	4620      	mov	r0, r4
   b8b30:	691b      	ldr	r3, [r3, #16]
}
   b8b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b8b36:	4718      	bx	r3

000b8b38 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b8b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8b3a:	4604      	mov	r4, r0
   b8b3c:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   b8b3e:	f7ff ffd7 	bl	b8af0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   b8b42:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   b8b46:	4606      	mov	r6, r0
    if (logData) {
   b8b48:	b193      	cbz	r3, b8b70 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   b8b4a:	4f29      	ldr	r7, [pc, #164]	; (b8bf0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b8b4c:	4929      	ldr	r1, [pc, #164]	; (b8bf4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   b8b4e:	462a      	mov	r2, r5
   b8b50:	4638      	mov	r0, r7
   b8b52:	f7fb fb97 	bl	b4284 <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b8b56:	68a1      	ldr	r1, [r4, #8]
   b8b58:	462a      	mov	r2, r5
   b8b5a:	4638      	mov	r0, r7
   b8b5c:	f7ff ff46 	bl	b89ec <_ZNK5spark6Logger4dumpEPKvj>
   b8b60:	2300      	movs	r3, #0
   b8b62:	9300      	str	r3, [sp, #0]
   b8b64:	4a24      	ldr	r2, [pc, #144]	; (b8bf8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   b8b66:	6839      	ldr	r1, [r7, #0]
   b8b68:	2301      	movs	r3, #1
   b8b6a:	201e      	movs	r0, #30
   b8b6c:	f000 fa90 	bl	b9090 <log_write>
    if (dataSize >= 12 && 
   b8b70:	2d0b      	cmp	r5, #11
   b8b72:	d923      	bls.n	b8bbc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   b8b74:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b8b76:	6922      	ldr	r2, [r4, #16]
   b8b78:	6819      	ldr	r1, [r3, #0]
   b8b7a:	4291      	cmp	r1, r2
   b8b7c:	d11f      	bne.n	b8bbe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   b8b7e:	8899      	ldrh	r1, [r3, #4]
   b8b80:	8aa2      	ldrh	r2, [r4, #20]
   b8b82:	4291      	cmp	r1, r2
   b8b84:	d11b      	bne.n	b8bbe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   b8b86:	88d9      	ldrh	r1, [r3, #6]
   b8b88:	b2aa      	uxth	r2, r5
   b8b8a:	4291      	cmp	r1, r2
   b8b8c:	d817      	bhi.n	b8bbe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b8b8e:	689a      	ldr	r2, [r3, #8]
   b8b90:	42b2      	cmp	r2, r6
   b8b92:	d114      	bne.n	b8bbe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   b8b94:	68e2      	ldr	r2, [r4, #12]
   b8b96:	42aa      	cmp	r2, r5
   b8b98:	d905      	bls.n	b8ba6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   b8b9a:	2100      	movs	r1, #0
   b8b9c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b8b9e:	68e2      	ldr	r2, [r4, #12]
   b8ba0:	3501      	adds	r5, #1
   b8ba2:	42aa      	cmp	r2, r5
   b8ba4:	d8fa      	bhi.n	b8b9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8ba6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b8baa:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8bac:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b8bae:	68a5      	ldr	r5, [r4, #8]
   b8bb0:	f7ff ff9e 	bl	b8af0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8bb4:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b8bb6:	2001      	movs	r0, #1
}
   b8bb8:	b003      	add	sp, #12
   b8bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8bbc:	b19d      	cbz	r5, b8be6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   b8bbe:	68a1      	ldr	r1, [r4, #8]
   b8bc0:	680a      	ldr	r2, [r1, #0]
   b8bc2:	b192      	cbz	r2, b8bea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b8bc4:	6888      	ldr	r0, [r1, #8]
   b8bc6:	888b      	ldrh	r3, [r1, #4]
   b8bc8:	9001      	str	r0, [sp, #4]
   b8bca:	88c9      	ldrh	r1, [r1, #6]
   b8bcc:	4808      	ldr	r0, [pc, #32]	; (b8bf0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b8bce:	9100      	str	r1, [sp, #0]
   b8bd0:	490a      	ldr	r1, [pc, #40]	; (b8bfc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b8bd2:	f7fd fe2f 	bl	b6834 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b8bd6:	e9cd 5600 	strd	r5, r6, [sp]
   b8bda:	8aa3      	ldrh	r3, [r4, #20]
   b8bdc:	6922      	ldr	r2, [r4, #16]
   b8bde:	4908      	ldr	r1, [pc, #32]	; (b8c00 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b8be0:	4803      	ldr	r0, [pc, #12]	; (b8bf0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   b8be2:	f7fd fe27 	bl	b6834 <_ZNK5spark6Logger5traceEPKcz>
   b8be6:	2000      	movs	r0, #0
   b8be8:	e7e6      	b.n	b8bb8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b8bea:	4610      	mov	r0, r2
   b8bec:	e7e4      	b.n	b8bb8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   b8bee:	bf00      	nop
   b8bf0:	2003e654 	.word	0x2003e654
   b8bf4:	000bf328 	.word	0x000bf328
   b8bf8:	000bf514 	.word	0x000bf514
   b8bfc:	000bf340 	.word	0x000bf340
   b8c00:	000bf371 	.word	0x000bf371

000b8c04 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b8c04:	b538      	push	{r3, r4, r5, lr}
   b8c06:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8c08:	68c2      	ldr	r2, [r0, #12]
   b8c0a:	6880      	ldr	r0, [r0, #8]
   b8c0c:	2100      	movs	r1, #0
   b8c0e:	f005 f8a7 	bl	bdd60 <memset>
    savedDataHeader->magic = savedDataMagic;
   b8c12:	68a3      	ldr	r3, [r4, #8]
   b8c14:	6922      	ldr	r2, [r4, #16]
   b8c16:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8c18:	68a3      	ldr	r3, [r4, #8]
   b8c1a:	8aa2      	ldrh	r2, [r4, #20]
   b8c1c:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8c1e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b8c22:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8c24:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b8c26:	68a5      	ldr	r5, [r4, #8]
   b8c28:	f7ff ff62 	bl	b8af0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8c2c:	60a8      	str	r0, [r5, #8]
}
   b8c2e:	bd38      	pop	{r3, r4, r5, pc}

000b8c30 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b8c30:	b508      	push	{r3, lr}
   b8c32:	4b02      	ldr	r3, [pc, #8]	; (b8c3c <cellular_signal+0xc>)
   b8c34:	681b      	ldr	r3, [r3, #0]
   b8c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8c38:	9301      	str	r3, [sp, #4]
   b8c3a:	bd08      	pop	{r3, pc}
   b8c3c:	00030274 	.word	0x00030274

000b8c40 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8c40:	b508      	push	{r3, lr}
   b8c42:	4b02      	ldr	r3, [pc, #8]	; (b8c4c <os_mutex_recursive_create+0xc>)
   b8c44:	681b      	ldr	r3, [r3, #0]
   b8c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8c48:	9301      	str	r3, [sp, #4]
   b8c4a:	bd08      	pop	{r3, pc}
   b8c4c:	00030248 	.word	0x00030248

000b8c50 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b8c50:	b508      	push	{r3, lr}
   b8c52:	4b02      	ldr	r3, [pc, #8]	; (b8c5c <os_mutex_recursive_destroy+0xc>)
   b8c54:	681b      	ldr	r3, [r3, #0]
   b8c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8c58:	9301      	str	r3, [sp, #4]
   b8c5a:	bd08      	pop	{r3, pc}
   b8c5c:	00030248 	.word	0x00030248

000b8c60 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8c60:	b508      	push	{r3, lr}
   b8c62:	4b02      	ldr	r3, [pc, #8]	; (b8c6c <os_mutex_recursive_lock+0xc>)
   b8c64:	681b      	ldr	r3, [r3, #0]
   b8c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8c68:	9301      	str	r3, [sp, #4]
   b8c6a:	bd08      	pop	{r3, pc}
   b8c6c:	00030248 	.word	0x00030248

000b8c70 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8c70:	b508      	push	{r3, lr}
   b8c72:	4b02      	ldr	r3, [pc, #8]	; (b8c7c <os_mutex_recursive_unlock+0xc>)
   b8c74:	681b      	ldr	r3, [r3, #0]
   b8c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8c78:	9301      	str	r3, [sp, #4]
   b8c7a:	bd08      	pop	{r3, pc}
   b8c7c:	00030248 	.word	0x00030248

000b8c80 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8c80:	b508      	push	{r3, lr}
   b8c82:	4b02      	ldr	r3, [pc, #8]	; (b8c8c <HAL_Core_Runtime_Info+0xc>)
   b8c84:	681b      	ldr	r3, [r3, #0]
   b8c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8c88:	9301      	str	r3, [sp, #4]
   b8c8a:	bd08      	pop	{r3, pc}
   b8c8c:	00030234 	.word	0x00030234

000b8c90 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8c90:	b508      	push	{r3, lr}
   b8c92:	4b02      	ldr	r3, [pc, #8]	; (b8c9c <HAL_Feature_Set+0xc>)
   b8c94:	681b      	ldr	r3, [r3, #0]
   b8c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8c98:	9301      	str	r3, [sp, #4]
   b8c9a:	bd08      	pop	{r3, pc}
   b8c9c:	00030234 	.word	0x00030234

000b8ca0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8ca0:	b508      	push	{r3, lr}
   b8ca2:	4b02      	ldr	r3, [pc, #8]	; (b8cac <HAL_RNG_GetRandomNumber+0xc>)
   b8ca4:	681b      	ldr	r3, [r3, #0]
   b8ca6:	685b      	ldr	r3, [r3, #4]
   b8ca8:	9301      	str	r3, [sp, #4]
   b8caa:	bd08      	pop	{r3, pc}
   b8cac:	00030218 	.word	0x00030218

000b8cb0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8cb0:	b508      	push	{r3, lr}
   b8cb2:	4b02      	ldr	r3, [pc, #8]	; (b8cbc <HAL_Delay_Microseconds+0xc>)
   b8cb4:	681b      	ldr	r3, [r3, #0]
   b8cb6:	68db      	ldr	r3, [r3, #12]
   b8cb8:	9301      	str	r3, [sp, #4]
   b8cba:	bd08      	pop	{r3, pc}
   b8cbc:	00030218 	.word	0x00030218

000b8cc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8cc0:	b508      	push	{r3, lr}
   b8cc2:	4b02      	ldr	r3, [pc, #8]	; (b8ccc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8cc4:	681b      	ldr	r3, [r3, #0]
   b8cc6:	695b      	ldr	r3, [r3, #20]
   b8cc8:	9301      	str	r3, [sp, #4]
   b8cca:	bd08      	pop	{r3, pc}
   b8ccc:	00030218 	.word	0x00030218

000b8cd0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8cd0:	b508      	push	{r3, lr}
   b8cd2:	4b02      	ldr	r3, [pc, #8]	; (b8cdc <hal_rtc_time_is_valid+0xc>)
   b8cd4:	681b      	ldr	r3, [r3, #0]
   b8cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8cd8:	9301      	str	r3, [sp, #4]
   b8cda:	bd08      	pop	{r3, pc}
   b8cdc:	00030218 	.word	0x00030218

000b8ce0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8ce0:	b508      	push	{r3, lr}
   b8ce2:	4b02      	ldr	r3, [pc, #8]	; (b8cec <hal_timer_millis+0xc>)
   b8ce4:	681b      	ldr	r3, [r3, #0]
   b8ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8ce8:	9301      	str	r3, [sp, #4]
   b8cea:	bd08      	pop	{r3, pc}
   b8cec:	00030218 	.word	0x00030218

000b8cf0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8cf0:	b508      	push	{r3, lr}
   b8cf2:	4b02      	ldr	r3, [pc, #8]	; (b8cfc <hal_rtc_get_time+0xc>)
   b8cf4:	681b      	ldr	r3, [r3, #0]
   b8cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8cf8:	9301      	str	r3, [sp, #4]
   b8cfa:	bd08      	pop	{r3, pc}
   b8cfc:	00030218 	.word	0x00030218

000b8d00 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8d00:	b508      	push	{r3, lr}
   b8d02:	4b02      	ldr	r3, [pc, #8]	; (b8d0c <hal_rtc_set_time+0xc>)
   b8d04:	681b      	ldr	r3, [r3, #0]
   b8d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8d08:	9301      	str	r3, [sp, #4]
   b8d0a:	bd08      	pop	{r3, pc}
   b8d0c:	00030218 	.word	0x00030218

000b8d10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8d10:	b508      	push	{r3, lr}
   b8d12:	4b02      	ldr	r3, [pc, #8]	; (b8d1c <HAL_Pin_Map+0xc>)
   b8d14:	681b      	ldr	r3, [r3, #0]
   b8d16:	681b      	ldr	r3, [r3, #0]
   b8d18:	9301      	str	r3, [sp, #4]
   b8d1a:	bd08      	pop	{r3, pc}
   b8d1c:	0003022c 	.word	0x0003022c

000b8d20 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8d20:	b508      	push	{r3, lr}
   b8d22:	4b02      	ldr	r3, [pc, #8]	; (b8d2c <HAL_Validate_Pin_Function+0xc>)
   b8d24:	681b      	ldr	r3, [r3, #0]
   b8d26:	685b      	ldr	r3, [r3, #4]
   b8d28:	9301      	str	r3, [sp, #4]
   b8d2a:	bd08      	pop	{r3, pc}
   b8d2c:	0003022c 	.word	0x0003022c

000b8d30 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8d30:	b508      	push	{r3, lr}
   b8d32:	4b02      	ldr	r3, [pc, #8]	; (b8d3c <HAL_Pin_Mode+0xc>)
   b8d34:	681b      	ldr	r3, [r3, #0]
   b8d36:	689b      	ldr	r3, [r3, #8]
   b8d38:	9301      	str	r3, [sp, #4]
   b8d3a:	bd08      	pop	{r3, pc}
   b8d3c:	0003022c 	.word	0x0003022c

000b8d40 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8d40:	b508      	push	{r3, lr}
   b8d42:	4b02      	ldr	r3, [pc, #8]	; (b8d4c <HAL_Get_Pin_Mode+0xc>)
   b8d44:	681b      	ldr	r3, [r3, #0]
   b8d46:	68db      	ldr	r3, [r3, #12]
   b8d48:	9301      	str	r3, [sp, #4]
   b8d4a:	bd08      	pop	{r3, pc}
   b8d4c:	0003022c 	.word	0x0003022c

000b8d50 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8d50:	b508      	push	{r3, lr}
   b8d52:	4b02      	ldr	r3, [pc, #8]	; (b8d5c <HAL_GPIO_Write+0xc>)
   b8d54:	681b      	ldr	r3, [r3, #0]
   b8d56:	691b      	ldr	r3, [r3, #16]
   b8d58:	9301      	str	r3, [sp, #4]
   b8d5a:	bd08      	pop	{r3, pc}
   b8d5c:	0003022c 	.word	0x0003022c

000b8d60 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8d60:	b508      	push	{r3, lr}
   b8d62:	4b02      	ldr	r3, [pc, #8]	; (b8d6c <HAL_GPIO_Read+0xc>)
   b8d64:	681b      	ldr	r3, [r3, #0]
   b8d66:	695b      	ldr	r3, [r3, #20]
   b8d68:	9301      	str	r3, [sp, #4]
   b8d6a:	bd08      	pop	{r3, pc}
   b8d6c:	0003022c 	.word	0x0003022c

000b8d70 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8d70:	b508      	push	{r3, lr}
   b8d72:	4b02      	ldr	r3, [pc, #8]	; (b8d7c <HAL_Interrupts_Attach+0xc>)
   b8d74:	681b      	ldr	r3, [r3, #0]
   b8d76:	699b      	ldr	r3, [r3, #24]
   b8d78:	9301      	str	r3, [sp, #4]
   b8d7a:	bd08      	pop	{r3, pc}
   b8d7c:	0003022c 	.word	0x0003022c

000b8d80 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8d80:	b508      	push	{r3, lr}
   b8d82:	4b02      	ldr	r3, [pc, #8]	; (b8d8c <HAL_Interrupts_Detach+0xc>)
   b8d84:	681b      	ldr	r3, [r3, #0]
   b8d86:	69db      	ldr	r3, [r3, #28]
   b8d88:	9301      	str	r3, [sp, #4]
   b8d8a:	bd08      	pop	{r3, pc}
   b8d8c:	0003022c 	.word	0x0003022c

000b8d90 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8d90:	b508      	push	{r3, lr}
   b8d92:	4b02      	ldr	r3, [pc, #8]	; (b8d9c <hal_adc_read+0xc>)
   b8d94:	681b      	ldr	r3, [r3, #0]
   b8d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8d98:	9301      	str	r3, [sp, #4]
   b8d9a:	bd08      	pop	{r3, pc}
   b8d9c:	0003022c 	.word	0x0003022c

000b8da0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8da0:	b508      	push	{r3, lr}
   b8da2:	4b02      	ldr	r3, [pc, #8]	; (b8dac <hal_i2c_begin+0xc>)
   b8da4:	681b      	ldr	r3, [r3, #0]
   b8da6:	68db      	ldr	r3, [r3, #12]
   b8da8:	9301      	str	r3, [sp, #4]
   b8daa:	bd08      	pop	{r3, pc}
   b8dac:	00030228 	.word	0x00030228

000b8db0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8db0:	b508      	push	{r3, lr}
   b8db2:	4b02      	ldr	r3, [pc, #8]	; (b8dbc <hal_i2c_begin_transmission+0xc>)
   b8db4:	681b      	ldr	r3, [r3, #0]
   b8db6:	699b      	ldr	r3, [r3, #24]
   b8db8:	9301      	str	r3, [sp, #4]
   b8dba:	bd08      	pop	{r3, pc}
   b8dbc:	00030228 	.word	0x00030228

000b8dc0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8dc0:	b508      	push	{r3, lr}
   b8dc2:	4b02      	ldr	r3, [pc, #8]	; (b8dcc <hal_i2c_end_transmission+0xc>)
   b8dc4:	681b      	ldr	r3, [r3, #0]
   b8dc6:	69db      	ldr	r3, [r3, #28]
   b8dc8:	9301      	str	r3, [sp, #4]
   b8dca:	bd08      	pop	{r3, pc}
   b8dcc:	00030228 	.word	0x00030228

000b8dd0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8dd0:	b508      	push	{r3, lr}
   b8dd2:	4b02      	ldr	r3, [pc, #8]	; (b8ddc <hal_i2c_write+0xc>)
   b8dd4:	681b      	ldr	r3, [r3, #0]
   b8dd6:	6a1b      	ldr	r3, [r3, #32]
   b8dd8:	9301      	str	r3, [sp, #4]
   b8dda:	bd08      	pop	{r3, pc}
   b8ddc:	00030228 	.word	0x00030228

000b8de0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8de0:	b508      	push	{r3, lr}
   b8de2:	4b02      	ldr	r3, [pc, #8]	; (b8dec <hal_i2c_available+0xc>)
   b8de4:	681b      	ldr	r3, [r3, #0]
   b8de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8de8:	9301      	str	r3, [sp, #4]
   b8dea:	bd08      	pop	{r3, pc}
   b8dec:	00030228 	.word	0x00030228

000b8df0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8df0:	b508      	push	{r3, lr}
   b8df2:	4b02      	ldr	r3, [pc, #8]	; (b8dfc <hal_i2c_read+0xc>)
   b8df4:	681b      	ldr	r3, [r3, #0]
   b8df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8df8:	9301      	str	r3, [sp, #4]
   b8dfa:	bd08      	pop	{r3, pc}
   b8dfc:	00030228 	.word	0x00030228

000b8e00 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8e00:	b508      	push	{r3, lr}
   b8e02:	4b02      	ldr	r3, [pc, #8]	; (b8e0c <hal_i2c_peek+0xc>)
   b8e04:	681b      	ldr	r3, [r3, #0]
   b8e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8e08:	9301      	str	r3, [sp, #4]
   b8e0a:	bd08      	pop	{r3, pc}
   b8e0c:	00030228 	.word	0x00030228

000b8e10 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8e10:	b508      	push	{r3, lr}
   b8e12:	4b02      	ldr	r3, [pc, #8]	; (b8e1c <hal_i2c_flush+0xc>)
   b8e14:	681b      	ldr	r3, [r3, #0]
   b8e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8e18:	9301      	str	r3, [sp, #4]
   b8e1a:	bd08      	pop	{r3, pc}
   b8e1c:	00030228 	.word	0x00030228

000b8e20 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8e20:	b508      	push	{r3, lr}
   b8e22:	4b02      	ldr	r3, [pc, #8]	; (b8e2c <hal_i2c_is_enabled+0xc>)
   b8e24:	681b      	ldr	r3, [r3, #0]
   b8e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8e28:	9301      	str	r3, [sp, #4]
   b8e2a:	bd08      	pop	{r3, pc}
   b8e2c:	00030228 	.word	0x00030228

000b8e30 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8e30:	b508      	push	{r3, lr}
   b8e32:	4b02      	ldr	r3, [pc, #8]	; (b8e3c <hal_i2c_init+0xc>)
   b8e34:	681b      	ldr	r3, [r3, #0]
   b8e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8e38:	9301      	str	r3, [sp, #4]
   b8e3a:	bd08      	pop	{r3, pc}
   b8e3c:	00030228 	.word	0x00030228

000b8e40 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b8e40:	b508      	push	{r3, lr}
   b8e42:	4b02      	ldr	r3, [pc, #8]	; (b8e4c <hal_i2c_lock+0xc>)
   b8e44:	681b      	ldr	r3, [r3, #0]
   b8e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8e48:	9301      	str	r3, [sp, #4]
   b8e4a:	bd08      	pop	{r3, pc}
   b8e4c:	00030228 	.word	0x00030228

000b8e50 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b8e50:	b508      	push	{r3, lr}
   b8e52:	4b02      	ldr	r3, [pc, #8]	; (b8e5c <hal_i2c_unlock+0xc>)
   b8e54:	681b      	ldr	r3, [r3, #0]
   b8e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8e58:	9301      	str	r3, [sp, #4]
   b8e5a:	bd08      	pop	{r3, pc}
   b8e5c:	00030228 	.word	0x00030228

000b8e60 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8e60:	b508      	push	{r3, lr}
   b8e62:	4b02      	ldr	r3, [pc, #8]	; (b8e6c <hal_i2c_request_ex+0xc>)
   b8e64:	681b      	ldr	r3, [r3, #0]
   b8e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8e68:	9301      	str	r3, [sp, #4]
   b8e6a:	bd08      	pop	{r3, pc}
   b8e6c:	00030228 	.word	0x00030228

000b8e70 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8e70:	b508      	push	{r3, lr}
   b8e72:	4b02      	ldr	r3, [pc, #8]	; (b8e7c <inet_inet_ntop+0xc>)
   b8e74:	681b      	ldr	r3, [r3, #0]
   b8e76:	695b      	ldr	r3, [r3, #20]
   b8e78:	9301      	str	r3, [sp, #4]
   b8e7a:	bd08      	pop	{r3, pc}
   b8e7c:	00030264 	.word	0x00030264

000b8e80 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8e80:	b508      	push	{r3, lr}
   b8e82:	4b02      	ldr	r3, [pc, #8]	; (b8e8c <netdb_freeaddrinfo+0xc>)
   b8e84:	681b      	ldr	r3, [r3, #0]
   b8e86:	689b      	ldr	r3, [r3, #8]
   b8e88:	9301      	str	r3, [sp, #4]
   b8e8a:	bd08      	pop	{r3, pc}
   b8e8c:	00030268 	.word	0x00030268

000b8e90 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8e90:	b508      	push	{r3, lr}
   b8e92:	4b02      	ldr	r3, [pc, #8]	; (b8e9c <netdb_getaddrinfo+0xc>)
   b8e94:	681b      	ldr	r3, [r3, #0]
   b8e96:	68db      	ldr	r3, [r3, #12]
   b8e98:	9301      	str	r3, [sp, #4]
   b8e9a:	bd08      	pop	{r3, pc}
   b8e9c:	00030268 	.word	0x00030268

000b8ea0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8ea0:	b508      	push	{r3, lr}
   b8ea2:	4b02      	ldr	r3, [pc, #8]	; (b8eac <hal_spi_begin+0xc>)
   b8ea4:	681b      	ldr	r3, [r3, #0]
   b8ea6:	681b      	ldr	r3, [r3, #0]
   b8ea8:	9301      	str	r3, [sp, #4]
   b8eaa:	bd08      	pop	{r3, pc}
   b8eac:	00030230 	.word	0x00030230

000b8eb0 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8eb0:	b508      	push	{r3, lr}
   b8eb2:	4b02      	ldr	r3, [pc, #8]	; (b8ebc <hal_spi_end+0xc>)
   b8eb4:	681b      	ldr	r3, [r3, #0]
   b8eb6:	685b      	ldr	r3, [r3, #4]
   b8eb8:	9301      	str	r3, [sp, #4]
   b8eba:	bd08      	pop	{r3, pc}
   b8ebc:	00030230 	.word	0x00030230

000b8ec0 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8ec0:	b508      	push	{r3, lr}
   b8ec2:	4b02      	ldr	r3, [pc, #8]	; (b8ecc <hal_spi_transfer+0xc>)
   b8ec4:	681b      	ldr	r3, [r3, #0]
   b8ec6:	695b      	ldr	r3, [r3, #20]
   b8ec8:	9301      	str	r3, [sp, #4]
   b8eca:	bd08      	pop	{r3, pc}
   b8ecc:	00030230 	.word	0x00030230

000b8ed0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8ed0:	b508      	push	{r3, lr}
   b8ed2:	4b02      	ldr	r3, [pc, #8]	; (b8edc <hal_spi_init+0xc>)
   b8ed4:	681b      	ldr	r3, [r3, #0]
   b8ed6:	69db      	ldr	r3, [r3, #28]
   b8ed8:	9301      	str	r3, [sp, #4]
   b8eda:	bd08      	pop	{r3, pc}
   b8edc:	00030230 	.word	0x00030230

000b8ee0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8ee0:	b508      	push	{r3, lr}
   b8ee2:	4b02      	ldr	r3, [pc, #8]	; (b8eec <hal_spi_is_enabled+0xc>)
   b8ee4:	681b      	ldr	r3, [r3, #0]
   b8ee6:	6a1b      	ldr	r3, [r3, #32]
   b8ee8:	9301      	str	r3, [sp, #4]
   b8eea:	bd08      	pop	{r3, pc}
   b8eec:	00030230 	.word	0x00030230

000b8ef0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8ef0:	b508      	push	{r3, lr}
   b8ef2:	4b02      	ldr	r3, [pc, #8]	; (b8efc <hal_spi_info+0xc>)
   b8ef4:	681b      	ldr	r3, [r3, #0]
   b8ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8ef8:	9301      	str	r3, [sp, #4]
   b8efa:	bd08      	pop	{r3, pc}
   b8efc:	00030230 	.word	0x00030230

000b8f00 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8f00:	b508      	push	{r3, lr}
   b8f02:	4b02      	ldr	r3, [pc, #8]	; (b8f0c <hal_spi_set_settings+0xc>)
   b8f04:	681b      	ldr	r3, [r3, #0]
   b8f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8f08:	9301      	str	r3, [sp, #4]
   b8f0a:	bd08      	pop	{r3, pc}
   b8f0c:	00030230 	.word	0x00030230

000b8f10 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8f10:	b508      	push	{r3, lr}
   b8f12:	4b02      	ldr	r3, [pc, #8]	; (b8f1c <hal_spi_acquire+0xc>)
   b8f14:	681b      	ldr	r3, [r3, #0]
   b8f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8f18:	9301      	str	r3, [sp, #4]
   b8f1a:	bd08      	pop	{r3, pc}
   b8f1c:	00030230 	.word	0x00030230

000b8f20 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8f20:	b508      	push	{r3, lr}
   b8f22:	4b02      	ldr	r3, [pc, #8]	; (b8f2c <hal_spi_release+0xc>)
   b8f24:	681b      	ldr	r3, [r3, #0]
   b8f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8f28:	9301      	str	r3, [sp, #4]
   b8f2a:	bd08      	pop	{r3, pc}
   b8f2c:	00030230 	.word	0x00030230

000b8f30 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b8f30:	b508      	push	{r3, lr}
   b8f32:	4b02      	ldr	r3, [pc, #8]	; (b8f3c <hal_usart_end+0xc>)
   b8f34:	681b      	ldr	r3, [r3, #0]
   b8f36:	689b      	ldr	r3, [r3, #8]
   b8f38:	9301      	str	r3, [sp, #4]
   b8f3a:	bd08      	pop	{r3, pc}
   b8f3c:	0003023c 	.word	0x0003023c

000b8f40 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8f40:	b508      	push	{r3, lr}
   b8f42:	4b02      	ldr	r3, [pc, #8]	; (b8f4c <hal_usart_write+0xc>)
   b8f44:	681b      	ldr	r3, [r3, #0]
   b8f46:	68db      	ldr	r3, [r3, #12]
   b8f48:	9301      	str	r3, [sp, #4]
   b8f4a:	bd08      	pop	{r3, pc}
   b8f4c:	0003023c 	.word	0x0003023c

000b8f50 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8f50:	b508      	push	{r3, lr}
   b8f52:	4b02      	ldr	r3, [pc, #8]	; (b8f5c <hal_usart_available+0xc>)
   b8f54:	681b      	ldr	r3, [r3, #0]
   b8f56:	691b      	ldr	r3, [r3, #16]
   b8f58:	9301      	str	r3, [sp, #4]
   b8f5a:	bd08      	pop	{r3, pc}
   b8f5c:	0003023c 	.word	0x0003023c

000b8f60 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8f60:	b508      	push	{r3, lr}
   b8f62:	4b02      	ldr	r3, [pc, #8]	; (b8f6c <hal_usart_read+0xc>)
   b8f64:	681b      	ldr	r3, [r3, #0]
   b8f66:	695b      	ldr	r3, [r3, #20]
   b8f68:	9301      	str	r3, [sp, #4]
   b8f6a:	bd08      	pop	{r3, pc}
   b8f6c:	0003023c 	.word	0x0003023c

000b8f70 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8f70:	b508      	push	{r3, lr}
   b8f72:	4b02      	ldr	r3, [pc, #8]	; (b8f7c <hal_usart_peek+0xc>)
   b8f74:	681b      	ldr	r3, [r3, #0]
   b8f76:	699b      	ldr	r3, [r3, #24]
   b8f78:	9301      	str	r3, [sp, #4]
   b8f7a:	bd08      	pop	{r3, pc}
   b8f7c:	0003023c 	.word	0x0003023c

000b8f80 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8f80:	b508      	push	{r3, lr}
   b8f82:	4b02      	ldr	r3, [pc, #8]	; (b8f8c <hal_usart_flush+0xc>)
   b8f84:	681b      	ldr	r3, [r3, #0]
   b8f86:	69db      	ldr	r3, [r3, #28]
   b8f88:	9301      	str	r3, [sp, #4]
   b8f8a:	bd08      	pop	{r3, pc}
   b8f8c:	0003023c 	.word	0x0003023c

000b8f90 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8f90:	b508      	push	{r3, lr}
   b8f92:	4b02      	ldr	r3, [pc, #8]	; (b8f9c <hal_usart_is_enabled+0xc>)
   b8f94:	681b      	ldr	r3, [r3, #0]
   b8f96:	6a1b      	ldr	r3, [r3, #32]
   b8f98:	9301      	str	r3, [sp, #4]
   b8f9a:	bd08      	pop	{r3, pc}
   b8f9c:	0003023c 	.word	0x0003023c

000b8fa0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8fa0:	b508      	push	{r3, lr}
   b8fa2:	4b02      	ldr	r3, [pc, #8]	; (b8fac <hal_usart_available_data_for_write+0xc>)
   b8fa4:	681b      	ldr	r3, [r3, #0]
   b8fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8fa8:	9301      	str	r3, [sp, #4]
   b8faa:	bd08      	pop	{r3, pc}
   b8fac:	0003023c 	.word	0x0003023c

000b8fb0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8fb0:	b508      	push	{r3, lr}
   b8fb2:	4b02      	ldr	r3, [pc, #8]	; (b8fbc <hal_usart_begin_config+0xc>)
   b8fb4:	681b      	ldr	r3, [r3, #0]
   b8fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8fb8:	9301      	str	r3, [sp, #4]
   b8fba:	bd08      	pop	{r3, pc}
   b8fbc:	0003023c 	.word	0x0003023c

000b8fc0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8fc0:	b508      	push	{r3, lr}
   b8fc2:	4b02      	ldr	r3, [pc, #8]	; (b8fcc <hal_usart_init_ex+0xc>)
   b8fc4:	681b      	ldr	r3, [r3, #0]
   b8fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8fc8:	9301      	str	r3, [sp, #4]
   b8fca:	bd08      	pop	{r3, pc}
   b8fcc:	0003023c 	.word	0x0003023c

000b8fd0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8fd0:	b508      	push	{r3, lr}
   b8fd2:	4b02      	ldr	r3, [pc, #8]	; (b8fdc <HAL_USB_USART_Init+0xc>)
   b8fd4:	681b      	ldr	r3, [r3, #0]
   b8fd6:	681b      	ldr	r3, [r3, #0]
   b8fd8:	9301      	str	r3, [sp, #4]
   b8fda:	bd08      	pop	{r3, pc}
   b8fdc:	0003024c 	.word	0x0003024c

000b8fe0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8fe0:	b508      	push	{r3, lr}
   b8fe2:	4b02      	ldr	r3, [pc, #8]	; (b8fec <HAL_USB_USART_Begin+0xc>)
   b8fe4:	681b      	ldr	r3, [r3, #0]
   b8fe6:	685b      	ldr	r3, [r3, #4]
   b8fe8:	9301      	str	r3, [sp, #4]
   b8fea:	bd08      	pop	{r3, pc}
   b8fec:	0003024c 	.word	0x0003024c

000b8ff0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b8ff0:	b508      	push	{r3, lr}
   b8ff2:	4b02      	ldr	r3, [pc, #8]	; (b8ffc <HAL_USB_USART_End+0xc>)
   b8ff4:	681b      	ldr	r3, [r3, #0]
   b8ff6:	689b      	ldr	r3, [r3, #8]
   b8ff8:	9301      	str	r3, [sp, #4]
   b8ffa:	bd08      	pop	{r3, pc}
   b8ffc:	0003024c 	.word	0x0003024c

000b9000 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9000:	b508      	push	{r3, lr}
   b9002:	4b02      	ldr	r3, [pc, #8]	; (b900c <HAL_USB_USART_Available_Data+0xc>)
   b9004:	681b      	ldr	r3, [r3, #0]
   b9006:	691b      	ldr	r3, [r3, #16]
   b9008:	9301      	str	r3, [sp, #4]
   b900a:	bd08      	pop	{r3, pc}
   b900c:	0003024c 	.word	0x0003024c

000b9010 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9010:	b508      	push	{r3, lr}
   b9012:	4b02      	ldr	r3, [pc, #8]	; (b901c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9014:	681b      	ldr	r3, [r3, #0]
   b9016:	695b      	ldr	r3, [r3, #20]
   b9018:	9301      	str	r3, [sp, #4]
   b901a:	bd08      	pop	{r3, pc}
   b901c:	0003024c 	.word	0x0003024c

000b9020 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9020:	b508      	push	{r3, lr}
   b9022:	4b02      	ldr	r3, [pc, #8]	; (b902c <HAL_USB_USART_Receive_Data+0xc>)
   b9024:	681b      	ldr	r3, [r3, #0]
   b9026:	699b      	ldr	r3, [r3, #24]
   b9028:	9301      	str	r3, [sp, #4]
   b902a:	bd08      	pop	{r3, pc}
   b902c:	0003024c 	.word	0x0003024c

000b9030 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9030:	b508      	push	{r3, lr}
   b9032:	4b02      	ldr	r3, [pc, #8]	; (b903c <HAL_USB_USART_Send_Data+0xc>)
   b9034:	681b      	ldr	r3, [r3, #0]
   b9036:	69db      	ldr	r3, [r3, #28]
   b9038:	9301      	str	r3, [sp, #4]
   b903a:	bd08      	pop	{r3, pc}
   b903c:	0003024c 	.word	0x0003024c

000b9040 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9040:	b508      	push	{r3, lr}
   b9042:	4b02      	ldr	r3, [pc, #8]	; (b904c <HAL_USB_USART_Flush_Data+0xc>)
   b9044:	681b      	ldr	r3, [r3, #0]
   b9046:	6a1b      	ldr	r3, [r3, #32]
   b9048:	9301      	str	r3, [sp, #4]
   b904a:	bd08      	pop	{r3, pc}
   b904c:	0003024c 	.word	0x0003024c

000b9050 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b9050:	b508      	push	{r3, lr}
   b9052:	4b02      	ldr	r3, [pc, #8]	; (b905c <HAL_USB_USART_Is_Connected+0xc>)
   b9054:	681b      	ldr	r3, [r3, #0]
   b9056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9058:	9301      	str	r3, [sp, #4]
   b905a:	bd08      	pop	{r3, pc}
   b905c:	0003024c 	.word	0x0003024c

000b9060 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9060:	b508      	push	{r3, lr}
   b9062:	4b02      	ldr	r3, [pc, #8]	; (b906c <panic_+0xc>)
   b9064:	681b      	ldr	r3, [r3, #0]
   b9066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9068:	9301      	str	r3, [sp, #4]
   b906a:	bd08      	pop	{r3, pc}
   b906c:	00030260 	.word	0x00030260

000b9070 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9070:	b508      	push	{r3, lr}
   b9072:	4b02      	ldr	r3, [pc, #8]	; (b907c <log_message+0xc>)
   b9074:	681b      	ldr	r3, [r3, #0]
   b9076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9078:	9301      	str	r3, [sp, #4]
   b907a:	bd08      	pop	{r3, pc}
   b907c:	00030260 	.word	0x00030260

000b9080 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b9080:	b508      	push	{r3, lr}
   b9082:	4b02      	ldr	r3, [pc, #8]	; (b908c <log_message_v+0xc>)
   b9084:	681b      	ldr	r3, [r3, #0]
   b9086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9088:	9301      	str	r3, [sp, #4]
   b908a:	bd08      	pop	{r3, pc}
   b908c:	00030260 	.word	0x00030260

000b9090 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b9090:	b508      	push	{r3, lr}
   b9092:	4b02      	ldr	r3, [pc, #8]	; (b909c <log_write+0xc>)
   b9094:	681b      	ldr	r3, [r3, #0]
   b9096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9098:	9301      	str	r3, [sp, #4]
   b909a:	bd08      	pop	{r3, pc}
   b909c:	00030260 	.word	0x00030260

000b90a0 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b90a0:	b508      	push	{r3, lr}
   b90a2:	4b02      	ldr	r3, [pc, #8]	; (b90ac <log_dump+0xc>)
   b90a4:	681b      	ldr	r3, [r3, #0]
   b90a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b90a8:	9301      	str	r3, [sp, #4]
   b90aa:	bd08      	pop	{r3, pc}
   b90ac:	00030260 	.word	0x00030260

000b90b0 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b90b0:	b508      	push	{r3, lr}
   b90b2:	4b02      	ldr	r3, [pc, #8]	; (b90bc <log_level_name+0xc>)
   b90b4:	681b      	ldr	r3, [r3, #0]
   b90b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b90b8:	9301      	str	r3, [sp, #4]
   b90ba:	bd08      	pop	{r3, pc}
   b90bc:	00030260 	.word	0x00030260

000b90c0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b90c0:	b508      	push	{r3, lr}
   b90c2:	4b02      	ldr	r3, [pc, #8]	; (b90cc <log_set_callbacks+0xc>)
   b90c4:	681b      	ldr	r3, [r3, #0]
   b90c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b90c8:	9301      	str	r3, [sp, #4]
   b90ca:	bd08      	pop	{r3, pc}
   b90cc:	00030260 	.word	0x00030260

000b90d0 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b90d0:	b508      	push	{r3, lr}
   b90d2:	4b03      	ldr	r3, [pc, #12]	; (b90e0 <led_set_status_active+0x10>)
   b90d4:	681b      	ldr	r3, [r3, #0]
   b90d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b90da:	9301      	str	r3, [sp, #4]
   b90dc:	bd08      	pop	{r3, pc}
   b90de:	0000      	.short	0x0000
   b90e0:	00030260 	.word	0x00030260

000b90e4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b90e4:	b508      	push	{r3, lr}
   b90e6:	4b03      	ldr	r3, [pc, #12]	; (b90f4 <diag_get_source+0x10>)
   b90e8:	681b      	ldr	r3, [r3, #0]
   b90ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b90ee:	9301      	str	r3, [sp, #4]
   b90f0:	bd08      	pop	{r3, pc}
   b90f2:	0000      	.short	0x0000
   b90f4:	00030260 	.word	0x00030260

000b90f8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b90f8:	b508      	push	{r3, lr}
   b90fa:	4b02      	ldr	r3, [pc, #8]	; (b9104 <system_mode+0xc>)
   b90fc:	681b      	ldr	r3, [r3, #0]
   b90fe:	681b      	ldr	r3, [r3, #0]
   b9100:	9301      	str	r3, [sp, #4]
   b9102:	bd08      	pop	{r3, pc}
   b9104:	00030220 	.word	0x00030220

000b9108 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9108:	b508      	push	{r3, lr}
   b910a:	4b02      	ldr	r3, [pc, #8]	; (b9114 <set_system_mode+0xc>)
   b910c:	681b      	ldr	r3, [r3, #0]
   b910e:	685b      	ldr	r3, [r3, #4]
   b9110:	9301      	str	r3, [sp, #4]
   b9112:	bd08      	pop	{r3, pc}
   b9114:	00030220 	.word	0x00030220

000b9118 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9118:	b508      	push	{r3, lr}
   b911a:	4b02      	ldr	r3, [pc, #8]	; (b9124 <system_delay_ms+0xc>)
   b911c:	681b      	ldr	r3, [r3, #0]
   b911e:	695b      	ldr	r3, [r3, #20]
   b9120:	9301      	str	r3, [sp, #4]
   b9122:	bd08      	pop	{r3, pc}
   b9124:	00030220 	.word	0x00030220

000b9128 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b9128:	b508      	push	{r3, lr}
   b912a:	4b02      	ldr	r3, [pc, #8]	; (b9134 <system_subscribe_event+0xc>)
   b912c:	681b      	ldr	r3, [r3, #0]
   b912e:	6a1b      	ldr	r3, [r3, #32]
   b9130:	9301      	str	r3, [sp, #4]
   b9132:	bd08      	pop	{r3, pc}
   b9134:	00030220 	.word	0x00030220

000b9138 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b9138:	b508      	push	{r3, lr}
   b913a:	4b02      	ldr	r3, [pc, #8]	; (b9144 <system_thread_set_state+0xc>)
   b913c:	681b      	ldr	r3, [r3, #0]
   b913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9140:	9301      	str	r3, [sp, #4]
   b9142:	bd08      	pop	{r3, pc}
   b9144:	00030220 	.word	0x00030220

000b9148 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9148:	b508      	push	{r3, lr}
   b914a:	4b02      	ldr	r3, [pc, #8]	; (b9154 <system_thread_get_state+0xc>)
   b914c:	681b      	ldr	r3, [r3, #0]
   b914e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9150:	9301      	str	r3, [sp, #4]
   b9152:	bd08      	pop	{r3, pc}
   b9154:	00030220 	.word	0x00030220

000b9158 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b9158:	b508      	push	{r3, lr}
   b915a:	4b02      	ldr	r3, [pc, #8]	; (b9164 <system_notify_time_changed+0xc>)
   b915c:	681b      	ldr	r3, [r3, #0]
   b915e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b9160:	9301      	str	r3, [sp, #4]
   b9162:	bd08      	pop	{r3, pc}
   b9164:	00030220 	.word	0x00030220

000b9168 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b9168:	b508      	push	{r3, lr}
   b916a:	4b02      	ldr	r3, [pc, #8]	; (b9174 <led_pattern_period+0xc>)
   b916c:	681b      	ldr	r3, [r3, #0]
   b916e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9170:	9301      	str	r3, [sp, #4]
   b9172:	bd08      	pop	{r3, pc}
   b9174:	00030220 	.word	0x00030220

000b9178 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9178:	b508      	push	{r3, lr}
   b917a:	4b03      	ldr	r3, [pc, #12]	; (b9188 <system_ctrl_set_app_request_handler+0x10>)
   b917c:	681b      	ldr	r3, [r3, #0]
   b917e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9182:	9301      	str	r3, [sp, #4]
   b9184:	bd08      	pop	{r3, pc}
   b9186:	0000      	.short	0x0000
   b9188:	00030220 	.word	0x00030220

000b918c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b918c:	b508      	push	{r3, lr}
   b918e:	4b03      	ldr	r3, [pc, #12]	; (b919c <system_ctrl_set_result+0x10>)
   b9190:	681b      	ldr	r3, [r3, #0]
   b9192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9196:	9301      	str	r3, [sp, #4]
   b9198:	bd08      	pop	{r3, pc}
   b919a:	0000      	.short	0x0000
   b919c:	00030220 	.word	0x00030220

000b91a0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b91a0:	b508      	push	{r3, lr}
   b91a2:	4b03      	ldr	r3, [pc, #12]	; (b91b0 <system_power_management_set_config+0x10>)
   b91a4:	681b      	ldr	r3, [r3, #0]
   b91a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b91aa:	9301      	str	r3, [sp, #4]
   b91ac:	bd08      	pop	{r3, pc}
   b91ae:	0000      	.short	0x0000
   b91b0:	00030220 	.word	0x00030220

000b91b4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b91b4:	b508      	push	{r3, lr}
   b91b6:	4b03      	ldr	r3, [pc, #12]	; (b91c4 <system_sleep_ext+0x10>)
   b91b8:	681b      	ldr	r3, [r3, #0]
   b91ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b91be:	9301      	str	r3, [sp, #4]
   b91c0:	bd08      	pop	{r3, pc}
   b91c2:	0000      	.short	0x0000
   b91c4:	00030220 	.word	0x00030220

000b91c8 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b91c8:	b508      	push	{r3, lr}
   b91ca:	4b03      	ldr	r3, [pc, #12]	; (b91d8 <system_reset+0x10>)
   b91cc:	681b      	ldr	r3, [r3, #0]
   b91ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b91d2:	9301      	str	r3, [sp, #4]
   b91d4:	bd08      	pop	{r3, pc}
   b91d6:	0000      	.short	0x0000
   b91d8:	00030220 	.word	0x00030220

000b91dc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b91dc:	b508      	push	{r3, lr}
   b91de:	4b02      	ldr	r3, [pc, #8]	; (b91e8 <spark_process+0xc>)
   b91e0:	681b      	ldr	r3, [r3, #0]
   b91e2:	689b      	ldr	r3, [r3, #8]
   b91e4:	9301      	str	r3, [sp, #4]
   b91e6:	bd08      	pop	{r3, pc}
   b91e8:	00030244 	.word	0x00030244

000b91ec <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b91ec:	b508      	push	{r3, lr}
   b91ee:	4b02      	ldr	r3, [pc, #8]	; (b91f8 <spark_cloud_flag_connect+0xc>)
   b91f0:	681b      	ldr	r3, [r3, #0]
   b91f2:	68db      	ldr	r3, [r3, #12]
   b91f4:	9301      	str	r3, [sp, #4]
   b91f6:	bd08      	pop	{r3, pc}
   b91f8:	00030244 	.word	0x00030244

000b91fc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b91fc:	b508      	push	{r3, lr}
   b91fe:	4b02      	ldr	r3, [pc, #8]	; (b9208 <spark_cloud_flag_connected+0xc>)
   b9200:	681b      	ldr	r3, [r3, #0]
   b9202:	695b      	ldr	r3, [r3, #20]
   b9204:	9301      	str	r3, [sp, #4]
   b9206:	bd08      	pop	{r3, pc}
   b9208:	00030244 	.word	0x00030244

000b920c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b920c:	b508      	push	{r3, lr}
   b920e:	4b02      	ldr	r3, [pc, #8]	; (b9218 <spark_deviceID+0xc>)
   b9210:	681b      	ldr	r3, [r3, #0]
   b9212:	69db      	ldr	r3, [r3, #28]
   b9214:	9301      	str	r3, [sp, #4]
   b9216:	bd08      	pop	{r3, pc}
   b9218:	00030244 	.word	0x00030244

000b921c <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b921c:	b508      	push	{r3, lr}
   b921e:	4b02      	ldr	r3, [pc, #8]	; (b9228 <spark_sync_time_pending+0xc>)
   b9220:	681b      	ldr	r3, [r3, #0]
   b9222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9224:	9301      	str	r3, [sp, #4]
   b9226:	bd08      	pop	{r3, pc}
   b9228:	00030244 	.word	0x00030244

000b922c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b922c:	b508      	push	{r3, lr}
   b922e:	4b02      	ldr	r3, [pc, #8]	; (b9238 <spark_sync_time_last+0xc>)
   b9230:	681b      	ldr	r3, [r3, #0]
   b9232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9234:	9301      	str	r3, [sp, #4]
   b9236:	bd08      	pop	{r3, pc}
   b9238:	00030244 	.word	0x00030244

000b923c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b923c:	b508      	push	{r3, lr}
   b923e:	4b02      	ldr	r3, [pc, #8]	; (b9248 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9240:	681b      	ldr	r3, [r3, #0]
   b9242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9244:	9301      	str	r3, [sp, #4]
   b9246:	bd08      	pop	{r3, pc}
   b9248:	00030244 	.word	0x00030244

000b924c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b924c:	b508      	push	{r3, lr}
   b924e:	4b02      	ldr	r3, [pc, #8]	; (b9258 <spark_cloud_disconnect+0xc>)
   b9250:	681b      	ldr	r3, [r3, #0]
   b9252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9254:	9301      	str	r3, [sp, #4]
   b9256:	bd08      	pop	{r3, pc}
   b9258:	00030244 	.word	0x00030244

000b925c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b925c:	b508      	push	{r3, lr}
   b925e:	4b02      	ldr	r3, [pc, #8]	; (b9268 <network_connect+0xc>)
   b9260:	681b      	ldr	r3, [r3, #0]
   b9262:	685b      	ldr	r3, [r3, #4]
   b9264:	9301      	str	r3, [sp, #4]
   b9266:	bd08      	pop	{r3, pc}
   b9268:	00030240 	.word	0x00030240

000b926c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b926c:	b508      	push	{r3, lr}
   b926e:	4b02      	ldr	r3, [pc, #8]	; (b9278 <network_connecting+0xc>)
   b9270:	681b      	ldr	r3, [r3, #0]
   b9272:	689b      	ldr	r3, [r3, #8]
   b9274:	9301      	str	r3, [sp, #4]
   b9276:	bd08      	pop	{r3, pc}
   b9278:	00030240 	.word	0x00030240

000b927c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b927c:	b508      	push	{r3, lr}
   b927e:	4b02      	ldr	r3, [pc, #8]	; (b9288 <network_disconnect+0xc>)
   b9280:	681b      	ldr	r3, [r3, #0]
   b9282:	68db      	ldr	r3, [r3, #12]
   b9284:	9301      	str	r3, [sp, #4]
   b9286:	bd08      	pop	{r3, pc}
   b9288:	00030240 	.word	0x00030240

000b928c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b928c:	b508      	push	{r3, lr}
   b928e:	4b02      	ldr	r3, [pc, #8]	; (b9298 <network_ready+0xc>)
   b9290:	681b      	ldr	r3, [r3, #0]
   b9292:	691b      	ldr	r3, [r3, #16]
   b9294:	9301      	str	r3, [sp, #4]
   b9296:	bd08      	pop	{r3, pc}
   b9298:	00030240 	.word	0x00030240

000b929c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b929c:	b508      	push	{r3, lr}
   b929e:	4b02      	ldr	r3, [pc, #8]	; (b92a8 <network_on+0xc>)
   b92a0:	681b      	ldr	r3, [r3, #0]
   b92a2:	695b      	ldr	r3, [r3, #20]
   b92a4:	9301      	str	r3, [sp, #4]
   b92a6:	bd08      	pop	{r3, pc}
   b92a8:	00030240 	.word	0x00030240

000b92ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b92ac:	b508      	push	{r3, lr}
   b92ae:	4b02      	ldr	r3, [pc, #8]	; (b92b8 <network_off+0xc>)
   b92b0:	681b      	ldr	r3, [r3, #0]
   b92b2:	699b      	ldr	r3, [r3, #24]
   b92b4:	9301      	str	r3, [sp, #4]
   b92b6:	bd08      	pop	{r3, pc}
   b92b8:	00030240 	.word	0x00030240

000b92bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b92bc:	b508      	push	{r3, lr}
   b92be:	4b02      	ldr	r3, [pc, #8]	; (b92c8 <network_listen+0xc>)
   b92c0:	681b      	ldr	r3, [r3, #0]
   b92c2:	69db      	ldr	r3, [r3, #28]
   b92c4:	9301      	str	r3, [sp, #4]
   b92c6:	bd08      	pop	{r3, pc}
   b92c8:	00030240 	.word	0x00030240

000b92cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b92cc:	b508      	push	{r3, lr}
   b92ce:	4b02      	ldr	r3, [pc, #8]	; (b92d8 <network_listening+0xc>)
   b92d0:	681b      	ldr	r3, [r3, #0]
   b92d2:	6a1b      	ldr	r3, [r3, #32]
   b92d4:	9301      	str	r3, [sp, #4]
   b92d6:	bd08      	pop	{r3, pc}
   b92d8:	00030240 	.word	0x00030240

000b92dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b92dc:	b508      	push	{r3, lr}
   b92de:	4b02      	ldr	r3, [pc, #8]	; (b92e8 <network_set_listen_timeout+0xc>)
   b92e0:	681b      	ldr	r3, [r3, #0]
   b92e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b92e4:	9301      	str	r3, [sp, #4]
   b92e6:	bd08      	pop	{r3, pc}
   b92e8:	00030240 	.word	0x00030240

000b92ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b92ec:	b508      	push	{r3, lr}
   b92ee:	4b02      	ldr	r3, [pc, #8]	; (b92f8 <network_get_listen_timeout+0xc>)
   b92f0:	681b      	ldr	r3, [r3, #0]
   b92f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b92f4:	9301      	str	r3, [sp, #4]
   b92f6:	bd08      	pop	{r3, pc}
   b92f8:	00030240 	.word	0x00030240

000b92fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b92fc:	b508      	push	{r3, lr}
   b92fe:	4b02      	ldr	r3, [pc, #8]	; (b9308 <network_is_on+0xc>)
   b9300:	681b      	ldr	r3, [r3, #0]
   b9302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9304:	9301      	str	r3, [sp, #4]
   b9306:	bd08      	pop	{r3, pc}
   b9308:	00030240 	.word	0x00030240

000b930c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b930c:	b508      	push	{r3, lr}
   b930e:	4b02      	ldr	r3, [pc, #8]	; (b9318 <network_is_off+0xc>)
   b9310:	681b      	ldr	r3, [r3, #0]
   b9312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9314:	9301      	str	r3, [sp, #4]
   b9316:	bd08      	pop	{r3, pc}
   b9318:	00030240 	.word	0x00030240

000b931c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b931c:	b508      	push	{r3, lr}
   b931e:	4b02      	ldr	r3, [pc, #8]	; (b9328 <malloc+0xc>)
   b9320:	681b      	ldr	r3, [r3, #0]
   b9322:	681b      	ldr	r3, [r3, #0]
   b9324:	9301      	str	r3, [sp, #4]
   b9326:	bd08      	pop	{r3, pc}
   b9328:	0003021c 	.word	0x0003021c

000b932c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b932c:	b508      	push	{r3, lr}
   b932e:	4b02      	ldr	r3, [pc, #8]	; (b9338 <free+0xc>)
   b9330:	681b      	ldr	r3, [r3, #0]
   b9332:	685b      	ldr	r3, [r3, #4]
   b9334:	9301      	str	r3, [sp, #4]
   b9336:	bd08      	pop	{r3, pc}
   b9338:	0003021c 	.word	0x0003021c

000b933c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b933c:	b508      	push	{r3, lr}
   b933e:	4b02      	ldr	r3, [pc, #8]	; (b9348 <realloc+0xc>)
   b9340:	681b      	ldr	r3, [r3, #0]
   b9342:	689b      	ldr	r3, [r3, #8]
   b9344:	9301      	str	r3, [sp, #4]
   b9346:	bd08      	pop	{r3, pc}
   b9348:	0003021c 	.word	0x0003021c

000b934c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b934c:	b508      	push	{r3, lr}
   b934e:	4b02      	ldr	r3, [pc, #8]	; (b9358 <siprintf+0xc>)
   b9350:	681b      	ldr	r3, [r3, #0]
   b9352:	691b      	ldr	r3, [r3, #16]
   b9354:	9301      	str	r3, [sp, #4]
   b9356:	bd08      	pop	{r3, pc}
   b9358:	0003021c 	.word	0x0003021c

000b935c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b935c:	b508      	push	{r3, lr}
   b935e:	4b02      	ldr	r3, [pc, #8]	; (b9368 <snprintf+0xc>)
   b9360:	681b      	ldr	r3, [r3, #0]
   b9362:	69db      	ldr	r3, [r3, #28]
   b9364:	9301      	str	r3, [sp, #4]
   b9366:	bd08      	pop	{r3, pc}
   b9368:	0003021c 	.word	0x0003021c

000b936c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b936c:	b508      	push	{r3, lr}
   b936e:	4b02      	ldr	r3, [pc, #8]	; (b9378 <vsnprintf+0xc>)
   b9370:	681b      	ldr	r3, [r3, #0]
   b9372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9374:	9301      	str	r3, [sp, #4]
   b9376:	bd08      	pop	{r3, pc}
   b9378:	0003021c 	.word	0x0003021c

000b937c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b937c:	b508      	push	{r3, lr}
   b937e:	4b02      	ldr	r3, [pc, #8]	; (b9388 <abort+0xc>)
   b9380:	681b      	ldr	r3, [r3, #0]
   b9382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9384:	9301      	str	r3, [sp, #4]
   b9386:	bd08      	pop	{r3, pc}
   b9388:	0003021c 	.word	0x0003021c

000b938c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b938c:	b508      	push	{r3, lr}
   b938e:	4b02      	ldr	r3, [pc, #8]	; (b9398 <__errno+0xc>)
   b9390:	681b      	ldr	r3, [r3, #0]
   b9392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9394:	9301      	str	r3, [sp, #4]
   b9396:	bd08      	pop	{r3, pc}
   b9398:	0003021c 	.word	0x0003021c

000b939c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b939c:	b508      	push	{r3, lr}
   b939e:	4b02      	ldr	r3, [pc, #8]	; (b93a8 <__assert_func+0xc>)
   b93a0:	681b      	ldr	r3, [r3, #0]
   b93a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b93a4:	9301      	str	r3, [sp, #4]
   b93a6:	bd08      	pop	{r3, pc}
   b93a8:	0003021c 	.word	0x0003021c

000b93ac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b93ac:	b508      	push	{r3, lr}
   b93ae:	4b02      	ldr	r3, [pc, #8]	; (b93b8 <newlib_impure_ptr_callback+0xc>)
   b93b0:	681b      	ldr	r3, [r3, #0]
   b93b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b93b4:	9301      	str	r3, [sp, #4]
   b93b6:	bd08      	pop	{r3, pc}
   b93b8:	0003021c 	.word	0x0003021c

000b93bc <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b93bc:	b508      	push	{r3, lr}
   b93be:	4b02      	ldr	r3, [pc, #8]	; (b93c8 <strftime+0xc>)
   b93c0:	681b      	ldr	r3, [r3, #0]
   b93c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b93c4:	9301      	str	r3, [sp, #4]
   b93c6:	bd08      	pop	{r3, pc}
   b93c8:	0003021c 	.word	0x0003021c

000b93cc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b93cc:	b508      	push	{r3, lr}
   b93ce:	4b02      	ldr	r3, [pc, #8]	; (b93d8 <localtime_r+0xc>)
   b93d0:	681b      	ldr	r3, [r3, #0]
   b93d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b93d4:	9301      	str	r3, [sp, #4]
   b93d6:	bd08      	pop	{r3, pc}
   b93d8:	0003021c 	.word	0x0003021c

000b93dc <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b93dc:	b508      	push	{r3, lr}
   b93de:	4b02      	ldr	r3, [pc, #8]	; (b93e8 <gmtime_r+0xc>)
   b93e0:	681b      	ldr	r3, [r3, #0]
   b93e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b93e4:	9301      	str	r3, [sp, #4]
   b93e6:	bd08      	pop	{r3, pc}
   b93e8:	0003021c 	.word	0x0003021c

000b93ec <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b93ec:	b508      	push	{r3, lr}
   b93ee:	4b02      	ldr	r3, [pc, #8]	; (b93f8 <mktime+0xc>)
   b93f0:	681b      	ldr	r3, [r3, #0]
   b93f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b93f4:	9301      	str	r3, [sp, #4]
   b93f6:	bd08      	pop	{r3, pc}
   b93f8:	0003021c 	.word	0x0003021c

000b93fc <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b93fc:	428a      	cmp	r2, r1
{
   b93fe:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b9400:	d007      	beq.n	b9412 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b9402:	1a44      	subs	r4, r0, r1
   b9404:	9802      	ldr	r0, [sp, #8]
   b9406:	1ac0      	subs	r0, r0, r3
   b9408:	4344      	muls	r4, r0
   b940a:	1a50      	subs	r0, r2, r1
   b940c:	fb94 f0f0 	sdiv	r0, r4, r0
   b9410:	4418      	add	r0, r3
}
   b9412:	bd10      	pop	{r4, pc}

000b9414 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9414:	2100      	movs	r1, #0
   b9416:	f7ff be7f 	b.w	b9118 <system_delay_ms>

000b941a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b941a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b941c:	6843      	ldr	r3, [r0, #4]
   b941e:	3b01      	subs	r3, #1
    {
   b9420:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b9422:	6043      	str	r3, [r0, #4]
   b9424:	b963      	cbnz	r3, b9440 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b9426:	6803      	ldr	r3, [r0, #0]
   b9428:	689b      	ldr	r3, [r3, #8]
   b942a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b942c:	68a3      	ldr	r3, [r4, #8]
   b942e:	3b01      	subs	r3, #1
   b9430:	60a3      	str	r3, [r4, #8]
   b9432:	b92b      	cbnz	r3, b9440 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b9434:	6823      	ldr	r3, [r4, #0]
   b9436:	4620      	mov	r0, r4
   b9438:	68db      	ldr	r3, [r3, #12]
        }
    }
   b943a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b943e:	4718      	bx	r3
    }
   b9440:	bd10      	pop	{r4, pc}

000b9442 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9442:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9444:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9448:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b944a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b944e:	42ae      	cmp	r6, r5
   b9450:	d004      	beq.n	b945c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b9452:	4628      	mov	r0, r5
   b9454:	f002 f856 	bl	bb504 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b9458:	3510      	adds	r5, #16
   b945a:	e7f8      	b.n	b944e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b945c:	6820      	ldr	r0, [r4, #0]
   b945e:	f7ff ff65 	bl	b932c <free>
    AllocatorT::free(data_);
}
   b9462:	4620      	mov	r0, r4
   b9464:	bd70      	pop	{r4, r5, r6, pc}

000b9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b9466:	b510      	push	{r4, lr}
   b9468:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b946a:	6800      	ldr	r0, [r0, #0]
   b946c:	b108      	cbz	r0, b9472 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b946e:	f7ff ffd4 	bl	b941a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b9472:	4620      	mov	r0, r4
   b9474:	bd10      	pop	{r4, pc}
	...

000b9478 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b9478:	4802      	ldr	r0, [pc, #8]	; (b9484 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b947a:	2300      	movs	r3, #0
   b947c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b947e:	f7ff bbdf 	b.w	b8c40 <os_mutex_recursive_create>
   b9482:	bf00      	nop
   b9484:	2003e60c 	.word	0x2003e60c

000b9488 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b9488:	2200      	movs	r2, #0
   b948a:	6840      	ldr	r0, [r0, #4]
   b948c:	4611      	mov	r1, r2
   b948e:	f7ff befd 	b.w	b928c <network_ready>

000b9492 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b9492:	2200      	movs	r2, #0
   b9494:	6840      	ldr	r0, [r0, #4]
   b9496:	4611      	mov	r1, r2
   b9498:	f7ff bf18 	b.w	b92cc <network_listening>

000b949c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b949c:	2200      	movs	r2, #0
   b949e:	6840      	ldr	r0, [r0, #4]
   b94a0:	4611      	mov	r1, r2
   b94a2:	f7ff bf23 	b.w	b92ec <network_get_listen_timeout>

000b94a6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b94a6:	6840      	ldr	r0, [r0, #4]
   b94a8:	2200      	movs	r2, #0
   b94aa:	f7ff bf17 	b.w	b92dc <network_set_listen_timeout>

000b94ae <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b94ae:	6840      	ldr	r0, [r0, #4]
   b94b0:	2200      	movs	r2, #0
   b94b2:	f081 0101 	eor.w	r1, r1, #1
   b94b6:	f7ff bf01 	b.w	b92bc <network_listen>

000b94ba <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b94ba:	2300      	movs	r3, #0
   b94bc:	6840      	ldr	r0, [r0, #4]
   b94be:	461a      	mov	r2, r3
   b94c0:	4619      	mov	r1, r3
   b94c2:	f7ff bef3 	b.w	b92ac <network_off>

000b94c6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b94c6:	2300      	movs	r3, #0
   b94c8:	6840      	ldr	r0, [r0, #4]
   b94ca:	461a      	mov	r2, r3
   b94cc:	4619      	mov	r1, r3
   b94ce:	f7ff bee5 	b.w	b929c <network_on>

000b94d2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b94d2:	2200      	movs	r2, #0
   b94d4:	6840      	ldr	r0, [r0, #4]
   b94d6:	4611      	mov	r1, r2
   b94d8:	f7ff bec8 	b.w	b926c <network_connecting>

000b94dc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b94dc:	6840      	ldr	r0, [r0, #4]
   b94de:	2200      	movs	r2, #0
   b94e0:	2102      	movs	r1, #2
   b94e2:	f7ff becb 	b.w	b927c <network_disconnect>

000b94e6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b94e6:	2300      	movs	r3, #0
   b94e8:	6840      	ldr	r0, [r0, #4]
   b94ea:	461a      	mov	r2, r3
   b94ec:	f7ff beb6 	b.w	b925c <network_connect>

000b94f0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b94f0:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b94f2:	4b13      	ldr	r3, [pc, #76]	; (b9540 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b94f4:	6003      	str	r3, [r0, #0]
   b94f6:	2518      	movs	r5, #24
   b94f8:	3330      	adds	r3, #48	; 0x30
   b94fa:	b086      	sub	sp, #24
   b94fc:	460e      	mov	r6, r1
   b94fe:	6043      	str	r3, [r0, #4]
   b9500:	462a      	mov	r2, r5
   b9502:	2100      	movs	r1, #0
   b9504:	4604      	mov	r4, r0
   b9506:	3008      	adds	r0, #8
   b9508:	f004 fc2a 	bl	bdd60 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b950c:	2200      	movs	r2, #0
   b950e:	6870      	ldr	r0, [r6, #4]
   b9510:	4611      	mov	r1, r2
   b9512:	f7ff febb 	bl	b928c <network_ready>
   b9516:	b178      	cbz	r0, b9538 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b9518:	2100      	movs	r1, #0
   b951a:	462a      	mov	r2, r5
   b951c:	4668      	mov	r0, sp
   b951e:	f004 fc1f 	bl	bdd60 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b9522:	4669      	mov	r1, sp
   b9524:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b9526:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b952a:	f7ff fb81 	bl	b8c30 <cellular_signal>
   b952e:	b918      	cbnz	r0, b9538 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b9530:	4669      	mov	r1, sp
   b9532:	4620      	mov	r0, r4
   b9534:	f000 f8b8 	bl	b96a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b9538:	4620      	mov	r0, r4
   b953a:	b006      	add	sp, #24
   b953c:	bd70      	pop	{r4, r5, r6, pc}
   b953e:	bf00      	nop
   b9540:	000bf40c 	.word	0x000bf40c

000b9544 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b9544:	4b08      	ldr	r3, [pc, #32]	; (b9568 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b9546:	b510      	push	{r4, lr}
   b9548:	2428      	movs	r4, #40	; 0x28
   b954a:	4622      	mov	r2, r4
   b954c:	4618      	mov	r0, r3
   b954e:	2100      	movs	r1, #0
   b9550:	f004 fc06 	bl	bdd60 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9554:	4b05      	ldr	r3, [pc, #20]	; (b956c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b9556:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b9558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b955c:	6042      	str	r2, [r0, #4]
   b955e:	2204      	movs	r2, #4
   b9560:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b9562:	4a03      	ldr	r2, [pc, #12]	; (b9570 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b9564:	601a      	str	r2, [r3, #0]
   b9566:	bd10      	pop	{r4, pc}
   b9568:	2003e618 	.word	0x2003e618
   b956c:	2003e610 	.word	0x2003e610
   b9570:	000bf3d0 	.word	0x000bf3d0

000b9574 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b9574:	4770      	bx	lr

000b9576 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b9576:	7b00      	ldrb	r0, [r0, #12]
   b9578:	4770      	bx	lr

000b957a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b957a:	7b03      	ldrb	r3, [r0, #12]
   b957c:	b14b      	cbz	r3, b9592 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b957e:	6903      	ldr	r3, [r0, #16]
   b9580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9584:	d005      	beq.n	b9592 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b9586:	6980      	ldr	r0, [r0, #24]
   b9588:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b958c:	bf18      	it	ne
   b958e:	2001      	movne	r0, #1
   b9590:	4770      	bx	lr
   b9592:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b9594:	4770      	bx	lr

000b9596 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b9596:	6803      	ldr	r3, [r0, #0]
   b9598:	6a1b      	ldr	r3, [r3, #32]
   b959a:	4718      	bx	r3

000b959c <_ZNK14CellularSignal7printToER5Print>:
{
   b959c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b959e:	6803      	ldr	r3, [r0, #0]
{
   b95a0:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b95a2:	691b      	ldr	r3, [r3, #16]
{
   b95a4:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b95a6:	4798      	blx	r3
   b95a8:	2102      	movs	r1, #2
   b95aa:	4628      	mov	r0, r5
   b95ac:	f001 fe86 	bl	bb2bc <_ZN5Print5printEfi>
    n += p.print(',');
   b95b0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b95b2:	4604      	mov	r4, r0
    n += p.print(',');
   b95b4:	4628      	mov	r0, r5
   b95b6:	f001 fd8b 	bl	bb0d0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b95ba:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b95bc:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b95be:	699b      	ldr	r3, [r3, #24]
   b95c0:	4630      	mov	r0, r6
   b95c2:	4798      	blx	r3
   b95c4:	2102      	movs	r1, #2
   b95c6:	4628      	mov	r0, r5
   b95c8:	f001 fe78 	bl	bb2bc <_ZN5Print5printEfi>
}
   b95cc:	4420      	add	r0, r4
   b95ce:	bd70      	pop	{r4, r5, r6, pc}

000b95d0 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b95d0:	f1a0 0004 	sub.w	r0, r0, #4
   b95d4:	f7ff bfe2 	b.w	b959c <_ZNK14CellularSignal7printToER5Print>

000b95d8 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b95d8:	b510      	push	{r4, lr}
   b95da:	2120      	movs	r1, #32
   b95dc:	4604      	mov	r4, r0
   b95de:	f7fa fd5e 	bl	b409e <_ZdlPvj>
   b95e2:	4620      	mov	r0, r4
   b95e4:	bd10      	pop	{r4, pc}
	...

000b95e8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b95e8:	7b03      	ldrb	r3, [r0, #12]
   b95ea:	b17b      	cbz	r3, b960c <_ZNK14CellularSignal11getStrengthEv+0x24>
   b95ec:	6943      	ldr	r3, [r0, #20]
   b95ee:	2b00      	cmp	r3, #0
   b95f0:	db0c      	blt.n	b960c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b95f2:	ee07 3a90 	vmov	s15, r3
   b95f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9614 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b95fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b95fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9602:	eddf 7a05 	vldr	s15, [pc, #20]	; b9618 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b9606:	ee20 0a27 	vmul.f32	s0, s0, s15
   b960a:	4770      	bx	lr
    return -1.0f;
   b960c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9610:	4770      	bx	lr
   b9612:	bf00      	nop
   b9614:	477fff00 	.word	0x477fff00
   b9618:	42c80000 	.word	0x42c80000

000b961c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b961c:	7b03      	ldrb	r3, [r0, #12]
   b961e:	b163      	cbz	r3, b963a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b9620:	6903      	ldr	r3, [r0, #16]
   b9622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9626:	d008      	beq.n	b963a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b9628:	ee07 3a90 	vmov	s15, r3
   b962c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9640 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b9630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9634:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9638:	4770      	bx	lr
    return 0.0f;
   b963a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9644 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b963e:	4770      	bx	lr
   b9640:	42c80000 	.word	0x42c80000
   b9644:	00000000 	.word	0x00000000

000b9648 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b9648:	7b03      	ldrb	r3, [r0, #12]
   b964a:	b17b      	cbz	r3, b966c <_ZNK14CellularSignal10getQualityEv+0x24>
   b964c:	69c3      	ldr	r3, [r0, #28]
   b964e:	2b00      	cmp	r3, #0
   b9650:	db0c      	blt.n	b966c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b9652:	ee07 3a90 	vmov	s15, r3
   b9656:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9674 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b965a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b965e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9662:	eddf 7a05 	vldr	s15, [pc, #20]	; b9678 <_ZNK14CellularSignal10getQualityEv+0x30>
   b9666:	ee20 0a27 	vmul.f32	s0, s0, s15
   b966a:	4770      	bx	lr
    return -1.0f;
   b966c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9670:	4770      	bx	lr
   b9672:	bf00      	nop
   b9674:	477fff00 	.word	0x477fff00
   b9678:	42c80000 	.word	0x42c80000

000b967c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b967c:	7b03      	ldrb	r3, [r0, #12]
   b967e:	b163      	cbz	r3, b969a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b9680:	6983      	ldr	r3, [r0, #24]
   b9682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9686:	d008      	beq.n	b969a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b9688:	ee07 3a90 	vmov	s15, r3
   b968c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b96a0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b9690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9694:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9698:	4770      	bx	lr
    return 0.0f;
   b969a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b96a4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b969e:	4770      	bx	lr
   b96a0:	42c80000 	.word	0x42c80000
   b96a4:	00000000 	.word	0x00000000

000b96a8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b96a8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b96aa:	460d      	mov	r5, r1
   b96ac:	f100 0408 	add.w	r4, r0, #8
   b96b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b96b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b96b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b96b8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b96bc:	2001      	movs	r0, #1
   b96be:	bd30      	pop	{r4, r5, pc}

000b96c0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b96c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b96c2:	230c      	movs	r3, #12
   b96c4:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b96c8:	6803      	ldr	r3, [r0, #0]
   b96ca:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b96ce:	7a03      	ldrb	r3, [r0, #8]
   b96d0:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b96d4:	6843      	ldr	r3, [r0, #4]
   b96d6:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b96d8:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b96da:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b96dc:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b96e0:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b96e2:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b96e6:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b96ea:	f7ff fdaf 	bl	b924c <spark_cloud_disconnect>
}
   b96ee:	b005      	add	sp, #20
   b96f0:	f85d fb04 	ldr.w	pc, [sp], #4

000b96f4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b96f4:	2200      	movs	r2, #0
   b96f6:	6840      	ldr	r0, [r0, #4]
   b96f8:	4611      	mov	r1, r2
   b96fa:	f7ff bde7 	b.w	b92cc <network_listening>

000b96fe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b96fe:	2200      	movs	r2, #0
   b9700:	6840      	ldr	r0, [r0, #4]
   b9702:	4611      	mov	r1, r2
   b9704:	f7ff bdf2 	b.w	b92ec <network_get_listen_timeout>

000b9708 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9708:	6840      	ldr	r0, [r0, #4]
   b970a:	2200      	movs	r2, #0
   b970c:	f7ff bde6 	b.w	b92dc <network_set_listen_timeout>

000b9710 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9710:	6840      	ldr	r0, [r0, #4]
   b9712:	2200      	movs	r2, #0
   b9714:	f081 0101 	eor.w	r1, r1, #1
   b9718:	f7ff bdd0 	b.w	b92bc <network_listen>

000b971c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b971c:	2300      	movs	r3, #0
   b971e:	6840      	ldr	r0, [r0, #4]
   b9720:	461a      	mov	r2, r3
   b9722:	4619      	mov	r1, r3
   b9724:	f7ff bdc2 	b.w	b92ac <network_off>

000b9728 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9728:	2300      	movs	r3, #0
   b972a:	6840      	ldr	r0, [r0, #4]
   b972c:	461a      	mov	r2, r3
   b972e:	4619      	mov	r1, r3
   b9730:	f7ff bdb4 	b.w	b929c <network_on>

000b9734 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9734:	2200      	movs	r2, #0
   b9736:	6840      	ldr	r0, [r0, #4]
   b9738:	4611      	mov	r1, r2
   b973a:	f7ff bda7 	b.w	b928c <network_ready>

000b973e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b973e:	2200      	movs	r2, #0
   b9740:	6840      	ldr	r0, [r0, #4]
   b9742:	4611      	mov	r1, r2
   b9744:	f7ff bd92 	b.w	b926c <network_connecting>

000b9748 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9748:	6840      	ldr	r0, [r0, #4]
   b974a:	2200      	movs	r2, #0
   b974c:	2102      	movs	r1, #2
   b974e:	f7ff bd95 	b.w	b927c <network_disconnect>

000b9752 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9752:	2300      	movs	r3, #0
   b9754:	6840      	ldr	r0, [r0, #4]
   b9756:	461a      	mov	r2, r3
   b9758:	f7ff bd80 	b.w	b925c <network_connect>

000b975c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b975c:	4b02      	ldr	r3, [pc, #8]	; (b9768 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b975e:	2203      	movs	r2, #3
   b9760:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9762:	4a02      	ldr	r2, [pc, #8]	; (b976c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9764:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9766:	4770      	bx	lr
   b9768:	2003e640 	.word	0x2003e640
   b976c:	000bf448 	.word	0x000bf448

000b9770 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b9770:	6800      	ldr	r0, [r0, #0]
   b9772:	f000 b8f3 	b.w	b995c <_ZN7TwoWire4lockEv>

000b9776 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b9776:	b510      	push	{r4, lr}
   b9778:	4604      	mov	r4, r0
      lock_(_lock) {
   b977a:	6001      	str	r1, [r0, #0]
   b977c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b977e:	b10a      	cbz	r2, b9784 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b9780:	f7ff fff6 	bl	b9770 <_ZN9FuelGauge4lockEv>
}
   b9784:	4620      	mov	r0, r4
   b9786:	bd10      	pop	{r4, pc}

000b9788 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b9788:	b513      	push	{r0, r1, r4, lr}
   b978a:	4604      	mov	r4, r0
   b978c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b978e:	f002 fc77 	bl	bc080 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b9792:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b9794:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b9796:	4620      	mov	r0, r4
   b9798:	f7ff ffed 	bl	b9776 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b979c:	4620      	mov	r0, r4
   b979e:	b002      	add	sp, #8
   b97a0:	bd10      	pop	{r4, pc}

000b97a2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b97a2:	6800      	ldr	r0, [r0, #0]
   b97a4:	f000 b8e3 	b.w	b996e <_ZN7TwoWire6unlockEv>

000b97a8 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b97a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b97ac:	4604      	mov	r4, r0
   b97ae:	461d      	mov	r5, r3
   b97b0:	460f      	mov	r7, r1
   b97b2:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b97b4:	f7ff ffdc 	bl	b9770 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b97b8:	2236      	movs	r2, #54	; 0x36
   b97ba:	2300      	movs	r3, #0
   b97bc:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b97c0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b97c2:	f04f 0801 	mov.w	r8, #1
   b97c6:	230a      	movs	r3, #10
   b97c8:	4669      	mov	r1, sp
   b97ca:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b97ce:	f000 f8a9 	bl	b9924 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b97d2:	6820      	ldr	r0, [r4, #0]
   b97d4:	6803      	ldr	r3, [r0, #0]
   b97d6:	4639      	mov	r1, r7
   b97d8:	689b      	ldr	r3, [r3, #8]
   b97da:	4798      	blx	r3
    i2c_.write(MSB);
   b97dc:	6820      	ldr	r0, [r4, #0]
   b97de:	6803      	ldr	r3, [r0, #0]
   b97e0:	4631      	mov	r1, r6
   b97e2:	689b      	ldr	r3, [r3, #8]
   b97e4:	4798      	blx	r3
    i2c_.write(LSB);
   b97e6:	6820      	ldr	r0, [r4, #0]
   b97e8:	6803      	ldr	r3, [r0, #0]
   b97ea:	4629      	mov	r1, r5
   b97ec:	689b      	ldr	r3, [r3, #8]
   b97ee:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b97f0:	4641      	mov	r1, r8
   b97f2:	6820      	ldr	r0, [r4, #0]
   b97f4:	f000 f8ae 	bl	b9954 <_ZN7TwoWire15endTransmissionEh>
   b97f8:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b97fa:	4620      	mov	r0, r4
   b97fc:	bf0c      	ite	eq
   b97fe:	2500      	moveq	r5, #0
   b9800:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b9804:	f7ff ffcd 	bl	b97a2 <_ZN9FuelGauge6unlockEv>
}
   b9808:	4628      	mov	r0, r5
   b980a:	b004      	add	sp, #16
   b980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9810 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b9810:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b9812:	2240      	movs	r2, #64	; 0x40
   b9814:	2300      	movs	r3, #0
   b9816:	2106      	movs	r1, #6
   b9818:	f7ff ffc6 	bl	b97a8 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b981c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9820:	bd08      	pop	{r3, pc}

000b9822 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9822:	4770      	bx	lr

000b9824 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9826:	4606      	mov	r6, r0
   b9828:	4615      	mov	r5, r2
   b982a:	460c      	mov	r4, r1
   b982c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b982e:	42bc      	cmp	r4, r7
   b9830:	d006      	beq.n	b9840 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9832:	6833      	ldr	r3, [r6, #0]
   b9834:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9838:	689b      	ldr	r3, [r3, #8]
   b983a:	4630      	mov	r0, r6
   b983c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b983e:	e7f6      	b.n	b982e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9840:	4628      	mov	r0, r5
   b9842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9844 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9844:	7c00      	ldrb	r0, [r0, #16]
   b9846:	2200      	movs	r2, #0
   b9848:	f7ff bac2 	b.w	b8dd0 <hal_i2c_write>

000b984c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b984c:	7c00      	ldrb	r0, [r0, #16]
   b984e:	2100      	movs	r1, #0
   b9850:	f7ff bac6 	b.w	b8de0 <hal_i2c_available>

000b9854 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9854:	7c00      	ldrb	r0, [r0, #16]
   b9856:	2100      	movs	r1, #0
   b9858:	f7ff baca 	b.w	b8df0 <hal_i2c_read>

000b985c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b985c:	7c00      	ldrb	r0, [r0, #16]
   b985e:	2100      	movs	r1, #0
   b9860:	f7ff bace 	b.w	b8e00 <hal_i2c_peek>

000b9864 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9864:	7c00      	ldrb	r0, [r0, #16]
   b9866:	2100      	movs	r1, #0
   b9868:	f7ff bad2 	b.w	b8e10 <hal_i2c_flush>

000b986c <_ZN7TwoWireD0Ev>:
   b986c:	b510      	push	{r4, lr}
   b986e:	2114      	movs	r1, #20
   b9870:	4604      	mov	r4, r0
   b9872:	f7fa fc14 	bl	b409e <_ZdlPvj>
   b9876:	4620      	mov	r0, r4
   b9878:	bd10      	pop	{r4, pc}
	...

000b987c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b987c:	b538      	push	{r3, r4, r5, lr}
   b987e:	4604      	mov	r4, r0
   b9880:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9886:	2200      	movs	r2, #0
   b9888:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b988c:	4b09      	ldr	r3, [pc, #36]	; (b98b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b988e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9890:	4608      	mov	r0, r1
   b9892:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b9894:	4629      	mov	r1, r5
   b9896:	f7ff facb 	bl	b8e30 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b989a:	30bf      	adds	r0, #191	; 0xbf
   b989c:	d108      	bne.n	b98b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b989e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b98a0:	07db      	lsls	r3, r3, #31
   b98a2:	d505      	bpl.n	b98b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b98a4:	6868      	ldr	r0, [r5, #4]
   b98a6:	f7ff fd41 	bl	b932c <free>
    free(conf.tx_buffer);
   b98aa:	68e8      	ldr	r0, [r5, #12]
   b98ac:	f7ff fd3e 	bl	b932c <free>
}
   b98b0:	4620      	mov	r0, r4
   b98b2:	bd38      	pop	{r3, r4, r5, pc}
   b98b4:	000bf484 	.word	0x000bf484

000b98b8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b98b8:	2300      	movs	r3, #0
   b98ba:	7c00      	ldrb	r0, [r0, #16]
   b98bc:	461a      	mov	r2, r3
   b98be:	4619      	mov	r1, r3
   b98c0:	f7ff ba6e 	b.w	b8da0 <hal_i2c_begin>

000b98c4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b98c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b98c6:	2200      	movs	r2, #0
   b98c8:	2314      	movs	r3, #20
   b98ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b98ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b98d2:	780b      	ldrb	r3, [r1, #0]
   b98d4:	f88d 3008 	strb.w	r3, [sp, #8]
   b98d8:	684b      	ldr	r3, [r1, #4]
   b98da:	9303      	str	r3, [sp, #12]
   b98dc:	68cb      	ldr	r3, [r1, #12]
   b98de:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b98e0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b98e2:	7a0b      	ldrb	r3, [r1, #8]
   b98e4:	9305      	str	r3, [sp, #20]
   b98e6:	a901      	add	r1, sp, #4
   b98e8:	f7ff faba 	bl	b8e60 <hal_i2c_request_ex>
}
   b98ec:	b007      	add	sp, #28
   b98ee:	f85d fb04 	ldr.w	pc, [sp], #4

000b98f2 <_ZN7TwoWire11requestFromEhjh>:
{
   b98f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b98f4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b98f6:	f88d 1000 	strb.w	r1, [sp]
   b98fa:	f04f 0164 	mov.w	r1, #100	; 0x64
   b98fe:	9103      	str	r1, [sp, #12]
   b9900:	bf18      	it	ne
   b9902:	2301      	movne	r3, #1
   b9904:	4669      	mov	r1, sp
    size_ = size;
   b9906:	9201      	str	r2, [sp, #4]
   b9908:	f88d 3008 	strb.w	r3, [sp, #8]
   b990c:	f7ff ffda 	bl	b98c4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9910:	b005      	add	sp, #20
   b9912:	f85d fb04 	ldr.w	pc, [sp], #4

000b9916 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9916:	7c00      	ldrb	r0, [r0, #16]
   b9918:	2200      	movs	r2, #0
   b991a:	f7ff ba49 	b.w	b8db0 <hal_i2c_begin_transmission>

000b991e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b991e:	b2c9      	uxtb	r1, r1
   b9920:	f7ff bff9 	b.w	b9916 <_ZN7TwoWire17beginTransmissionEh>

000b9924 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b9924:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9926:	2300      	movs	r3, #0
   b9928:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b992c:	684a      	ldr	r2, [r1, #4]
   b992e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b9930:	2314      	movs	r3, #20
    };
   b9932:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9934:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9938:	780b      	ldrb	r3, [r1, #0]
    };
   b993a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b993c:	7a0a      	ldrb	r2, [r1, #8]
   b993e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b9940:	7c00      	ldrb	r0, [r0, #16]
    };
   b9942:	f88d 3008 	strb.w	r3, [sp, #8]
   b9946:	aa01      	add	r2, sp, #4
   b9948:	4619      	mov	r1, r3
   b994a:	f7ff fa31 	bl	b8db0 <hal_i2c_begin_transmission>
}
   b994e:	b007      	add	sp, #28
   b9950:	f85d fb04 	ldr.w	pc, [sp], #4

000b9954 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9954:	7c00      	ldrb	r0, [r0, #16]
   b9956:	2200      	movs	r2, #0
   b9958:	f7ff ba32 	b.w	b8dc0 <hal_i2c_end_transmission>

000b995c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b995c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b995e:	2100      	movs	r1, #0
   b9960:	7c00      	ldrb	r0, [r0, #16]
   b9962:	f7ff fa6d 	bl	b8e40 <hal_i2c_lock>
}
   b9966:	fab0 f080 	clz	r0, r0
   b996a:	0940      	lsrs	r0, r0, #5
   b996c:	bd08      	pop	{r3, pc}

000b996e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b996e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b9970:	2100      	movs	r1, #0
   b9972:	7c00      	ldrb	r0, [r0, #16]
   b9974:	f7ff fa6c 	bl	b8e50 <hal_i2c_unlock>
}
   b9978:	fab0 f080 	clz	r0, r0
   b997c:	0940      	lsrs	r0, r0, #5
   b997e:	bd08      	pop	{r3, pc}

000b9980 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9980:	4700      	bx	r0
	...

000b9984 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9984:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9988:	2400      	movs	r4, #0
{
   b998a:	461d      	mov	r5, r3
   b998c:	460f      	mov	r7, r1
   b998e:	4690      	mov	r8, r2
   b9990:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b9992:	f7ff f9f5 	bl	b8d80 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9996:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9998:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b999c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b99a0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b99a4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b99a8:	bfa2      	ittt	ge
   b99aa:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b99ae:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b99b2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b99b4:	4907      	ldr	r1, [pc, #28]	; (b99d4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b99b6:	9400      	str	r4, [sp, #0]
   b99b8:	4643      	mov	r3, r8
   b99ba:	463a      	mov	r2, r7
   b99bc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b99be:	bfa8      	it	ge
   b99c0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b99c4:	f7ff f9d4 	bl	b8d70 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b99c8:	fab0 f080 	clz	r0, r0
   b99cc:	0940      	lsrs	r0, r0, #5
   b99ce:	b004      	add	sp, #16
   b99d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b99d4:	000b9981 	.word	0x000b9981

000b99d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b99d8:	4770      	bx	lr

000b99da <_ZN9IPAddressD0Ev>:
   b99da:	b510      	push	{r4, lr}
   b99dc:	2118      	movs	r1, #24
   b99de:	4604      	mov	r4, r0
   b99e0:	f7fa fb5d 	bl	b409e <_ZdlPvj>
   b99e4:	4620      	mov	r0, r4
   b99e6:	bd10      	pop	{r4, pc}

000b99e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b99e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b99ea:	7d03      	ldrb	r3, [r0, #20]
   b99ec:	2b06      	cmp	r3, #6
{
   b99ee:	b08d      	sub	sp, #52	; 0x34
   b99f0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b99f2:	f100 0704 	add.w	r7, r0, #4
   b99f6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b99fa:	d012      	beq.n	b9a22 <_ZNK9IPAddress7printToER5Print+0x3a>
   b99fc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9a00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9a04:	220a      	movs	r2, #10
   b9a06:	4630      	mov	r0, r6
   b9a08:	f001 fb71 	bl	bb0ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9a0c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9a0e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9a10:	d019      	beq.n	b9a46 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9a12:	2c00      	cmp	r4, #0
   b9a14:	d0f4      	beq.n	b9a00 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9a16:	212e      	movs	r1, #46	; 0x2e
   b9a18:	4630      	mov	r0, r6
   b9a1a:	f001 fb59 	bl	bb0d0 <_ZN5Print5printEc>
   b9a1e:	4404      	add	r4, r0
   b9a20:	e7ee      	b.n	b9a00 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9a22:	232f      	movs	r3, #47	; 0x2f
   b9a24:	466a      	mov	r2, sp
   b9a26:	4639      	mov	r1, r7
   b9a28:	200a      	movs	r0, #10
		buf[0] = 0;
   b9a2a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9a2e:	f7ff fa1f 	bl	b8e70 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9a32:	4668      	mov	r0, sp
   b9a34:	f004 fa31 	bl	bde9a <strlen>
   b9a38:	6833      	ldr	r3, [r6, #0]
   b9a3a:	4602      	mov	r2, r0
   b9a3c:	68db      	ldr	r3, [r3, #12]
   b9a3e:	4669      	mov	r1, sp
   b9a40:	4630      	mov	r0, r6
   b9a42:	4798      	blx	r3
   b9a44:	4604      	mov	r4, r0
    }
    return n;
}
   b9a46:	4620      	mov	r0, r4
   b9a48:	b00d      	add	sp, #52	; 0x34
   b9a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9a4c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9a4c:	b510      	push	{r4, lr}
   b9a4e:	4b05      	ldr	r3, [pc, #20]	; (b9a64 <_ZN9IPAddressC1Ev+0x18>)
   b9a50:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9a52:	2211      	movs	r2, #17
   b9a54:	f840 3b04 	str.w	r3, [r0], #4
   b9a58:	2100      	movs	r1, #0
   b9a5a:	f004 f981 	bl	bdd60 <memset>
}
   b9a5e:	4620      	mov	r0, r4
   b9a60:	bd10      	pop	{r4, pc}
   b9a62:	bf00      	nop
   b9a64:	000bf4ac 	.word	0x000bf4ac

000b9a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9a68:	4603      	mov	r3, r0
   b9a6a:	4a07      	ldr	r2, [pc, #28]	; (b9a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9a6c:	b510      	push	{r4, lr}
   b9a6e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9a72:	f101 0210 	add.w	r2, r1, #16
   b9a76:	f851 4b04 	ldr.w	r4, [r1], #4
   b9a7a:	f843 4b04 	str.w	r4, [r3], #4
   b9a7e:	4291      	cmp	r1, r2
   b9a80:	d1f9      	bne.n	b9a76 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9a82:	780a      	ldrb	r2, [r1, #0]
   b9a84:	701a      	strb	r2, [r3, #0]
}
   b9a86:	bd10      	pop	{r4, pc}
   b9a88:	000bf4ac 	.word	0x000bf4ac

000b9a8c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9a8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9a8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9a92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9a96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9a9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9a9e:	2304      	movs	r3, #4
   b9aa0:	6041      	str	r1, [r0, #4]
   b9aa2:	7503      	strb	r3, [r0, #20]
}
   b9aa4:	bd10      	pop	{r4, pc}
	...

000b9aa8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9aa8:	b507      	push	{r0, r1, r2, lr}
   b9aaa:	4b06      	ldr	r3, [pc, #24]	; (b9ac4 <_ZN9IPAddressC1EPKh+0x1c>)
   b9aac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9aae:	78cb      	ldrb	r3, [r1, #3]
   b9ab0:	9300      	str	r3, [sp, #0]
   b9ab2:	788b      	ldrb	r3, [r1, #2]
   b9ab4:	784a      	ldrb	r2, [r1, #1]
   b9ab6:	7809      	ldrb	r1, [r1, #0]
   b9ab8:	f7ff ffe8 	bl	b9a8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9abc:	b003      	add	sp, #12
   b9abe:	f85d fb04 	ldr.w	pc, [sp], #4
   b9ac2:	bf00      	nop
   b9ac4:	000bf4ac 	.word	0x000bf4ac

000b9ac8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b9ac8:	f100 0310 	add.w	r3, r0, #16
   b9acc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b9ace:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b9ad2:	2901      	cmp	r1, #1
   b9ad4:	4618      	mov	r0, r3
   b9ad6:	d108      	bne.n	b9aea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b9ad8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b9adc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b9ae0:	3a01      	subs	r2, #1
   b9ae2:	f103 0310 	add.w	r3, r3, #16
   b9ae6:	d1f2      	bne.n	b9ace <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b9ae8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b9aea:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b9aec:	bf04      	itt	eq
   b9aee:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b9af2:	1852      	addeq	r2, r2, r1
   b9af4:	e7f4      	b.n	b9ae0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b9af6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b9af6:	b40e      	push	{r1, r2, r3}
   b9af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9afa:	b088      	sub	sp, #32
   b9afc:	af00      	add	r7, sp, #0
   b9afe:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9b02:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9b04:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9b08:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9b0a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9b0c:	462b      	mov	r3, r5
   b9b0e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9b10:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9b12:	f7ff fc2b 	bl	b936c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b9b16:	280f      	cmp	r0, #15
   b9b18:	687a      	ldr	r2, [r7, #4]
   b9b1a:	d91a      	bls.n	b9b52 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b9b1c:	f100 0308 	add.w	r3, r0, #8
   b9b20:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9b24:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b9b26:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9b2a:	1c41      	adds	r1, r0, #1
   b9b2c:	462b      	mov	r3, r5
   b9b2e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9b30:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9b32:	f7ff fc1b 	bl	b936c <vsnprintf>
        if (n > 0) {
   b9b36:	1e02      	subs	r2, r0, #0
   b9b38:	dd04      	ble.n	b9b44 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b9b3a:	6823      	ldr	r3, [r4, #0]
   b9b3c:	4669      	mov	r1, sp
   b9b3e:	689b      	ldr	r3, [r3, #8]
   b9b40:	4620      	mov	r0, r4
   b9b42:	4798      	blx	r3
   b9b44:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9b46:	3720      	adds	r7, #32
   b9b48:	46bd      	mov	sp, r7
   b9b4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9b4e:	b003      	add	sp, #12
   b9b50:	4770      	bx	lr
    } else if (n > 0) {
   b9b52:	2800      	cmp	r0, #0
   b9b54:	d0f7      	beq.n	b9b46 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9b56:	6823      	ldr	r3, [r4, #0]
   b9b58:	4602      	mov	r2, r0
   b9b5a:	689b      	ldr	r3, [r3, #8]
   b9b5c:	f107 0110 	add.w	r1, r7, #16
   b9b60:	4620      	mov	r0, r4
   b9b62:	4798      	blx	r3
}
   b9b64:	e7ef      	b.n	b9b46 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9b66:	b538      	push	{r3, r4, r5, lr}
   b9b68:	680b      	ldr	r3, [r1, #0]
   b9b6a:	6003      	str	r3, [r0, #0]
   b9b6c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b9b6e:	6843      	ldr	r3, [r0, #4]
   b9b70:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9b72:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b9b74:	d008      	beq.n	b9b88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b9b76:	b115      	cbz	r5, b9b7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9b78:	686b      	ldr	r3, [r5, #4]
   b9b7a:	3301      	adds	r3, #1
   b9b7c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b9b7e:	6860      	ldr	r0, [r4, #4]
   b9b80:	b108      	cbz	r0, b9b86 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b9b82:	f7ff fc4a 	bl	b941a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9b86:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9b88:	bd38      	pop	{r3, r4, r5, pc}

000b9b8a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b9b8a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9b8c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b9b8e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9b92:	689b      	ldr	r3, [r3, #8]
   b9b94:	2201      	movs	r2, #1
   b9b96:	f10d 0107 	add.w	r1, sp, #7
   b9b9a:	4798      	blx	r3
}
   b9b9c:	b003      	add	sp, #12
   b9b9e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9ba2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9ba2:	460b      	mov	r3, r1
   b9ba4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b9ba6:	2200      	movs	r2, #0
   b9ba8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b9baa:	e9c0 2200 	strd	r2, r2, [r0]
   b9bae:	4604      	mov	r4, r0
        t_ = t;
   b9bb0:	6083      	str	r3, [r0, #8]
    if (t) {
   b9bb2:	b90b      	cbnz	r3, b9bb8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b9bb4:	4620      	mov	r0, r4
   b9bb6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b9bb8:	f7ff ffd5 	bl	b9b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b9bbc:	e7fa      	b.n	b9bb4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b9bbe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b9bbe:	6883      	ldr	r3, [r0, #8]
   b9bc0:	b1eb      	cbz	r3, b9bfe <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b9bc2:	781a      	ldrb	r2, [r3, #0]
   b9bc4:	2a03      	cmp	r2, #3
   b9bc6:	d81a      	bhi.n	b9bfe <_ZNK5spark9JSONValue4typeEv+0x40>
   b9bc8:	e8df f002 	tbb	[pc, r2]
   b9bcc:	1b021704 	.word	0x1b021704
   b9bd0:	2005      	movs	r0, #5
   b9bd2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9bd4:	6802      	ldr	r2, [r0, #0]
   b9bd6:	685b      	ldr	r3, [r3, #4]
   b9bd8:	6852      	ldr	r2, [r2, #4]
   b9bda:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b9bdc:	282d      	cmp	r0, #45	; 0x2d
   b9bde:	d012      	beq.n	b9c06 <_ZNK5spark9JSONValue4typeEv+0x48>
   b9be0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9be4:	2b09      	cmp	r3, #9
   b9be6:	d90e      	bls.n	b9c06 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9be8:	2874      	cmp	r0, #116	; 0x74
   b9bea:	d00e      	beq.n	b9c0a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b9bec:	2866      	cmp	r0, #102	; 0x66
   b9bee:	d00c      	beq.n	b9c0a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9bf0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9bf4:	4258      	negs	r0, r3
   b9bf6:	4158      	adcs	r0, r3
   b9bf8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b9bfa:	2006      	movs	r0, #6
   b9bfc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b9bfe:	2000      	movs	r0, #0
   b9c00:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9c02:	2004      	movs	r0, #4
   b9c04:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b9c06:	2003      	movs	r0, #3
   b9c08:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b9c0a:	2002      	movs	r0, #2
}
   b9c0c:	4770      	bx	lr

000b9c0e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b9c0e:	b510      	push	{r4, lr}
   b9c10:	4604      	mov	r4, r0
    switch (type()) {
   b9c12:	f7ff ffd4 	bl	b9bbe <_ZNK5spark9JSONValue4typeEv>
   b9c16:	2802      	cmp	r0, #2
   b9c18:	d00e      	beq.n	b9c38 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b9c1a:	1ec3      	subs	r3, r0, #3
   b9c1c:	b2db      	uxtb	r3, r3
   b9c1e:	2b01      	cmp	r3, #1
   b9c20:	d814      	bhi.n	b9c4c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9c22:	6822      	ldr	r2, [r4, #0]
   b9c24:	68a3      	ldr	r3, [r4, #8]
   b9c26:	6850      	ldr	r0, [r2, #4]
   b9c28:	685b      	ldr	r3, [r3, #4]
}
   b9c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b9c2e:	220a      	movs	r2, #10
   b9c30:	2100      	movs	r1, #0
   b9c32:	4418      	add	r0, r3
   b9c34:	f004 b9f6 	b.w	be024 <strtol>
        const char* const s = d_->json + t_->start;
   b9c38:	6822      	ldr	r2, [r4, #0]
   b9c3a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b9c3c:	6852      	ldr	r2, [r2, #4]
   b9c3e:	685b      	ldr	r3, [r3, #4]
   b9c40:	5cd0      	ldrb	r0, [r2, r3]
   b9c42:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9c46:	4258      	negs	r0, r3
   b9c48:	4158      	adcs	r0, r3
}
   b9c4a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b9c4c:	2000      	movs	r0, #0
   b9c4e:	e7fc      	b.n	b9c4a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9c50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9c50:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9c52:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9c54:	e9c0 3300 	strd	r3, r3, [r0]
   b9c58:	4604      	mov	r4, r0
        n_(0) {
   b9c5a:	480e      	ldr	r0, [pc, #56]	; (b9c94 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b9c5c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9c60:	b1a9      	cbz	r1, b9c8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9c62:	780b      	ldrb	r3, [r1, #0]
   b9c64:	2b03      	cmp	r3, #3
   b9c66:	d006      	beq.n	b9c76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9c68:	b98b      	cbnz	r3, b9c8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b9c6a:	6813      	ldr	r3, [r2, #0]
   b9c6c:	6858      	ldr	r0, [r3, #4]
   b9c6e:	684b      	ldr	r3, [r1, #4]
   b9c70:	5cc3      	ldrb	r3, [r0, r3]
   b9c72:	2b6e      	cmp	r3, #110	; 0x6e
   b9c74:	d007      	beq.n	b9c86 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b9c76:	6813      	ldr	r3, [r2, #0]
   b9c78:	684d      	ldr	r5, [r1, #4]
   b9c7a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b9c7c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b9c7e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9c80:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b9c82:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b9c84:	60e3      	str	r3, [r4, #12]
   b9c86:	4611      	mov	r1, r2
   b9c88:	4620      	mov	r0, r4
   b9c8a:	f7ff ff6c 	bl	b9b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9c8e:	4620      	mov	r0, r4
   b9c90:	bd38      	pop	{r3, r4, r5, pc}
   b9c92:	bf00      	nop
   b9c94:	000bf515 	.word	0x000bf515

000b9c98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9c98:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9c9a:	2500      	movs	r5, #0
   b9c9c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b9c9e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b9ca2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b9ca6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9caa:	4604      	mov	r4, r0
   b9cac:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b9cae:	b14b      	cbz	r3, b9cc4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b9cb0:	781a      	ldrb	r2, [r3, #0]
   b9cb2:	2a01      	cmp	r2, #1
   b9cb4:	d106      	bne.n	b9cc4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b9cb6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b9cba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b9cbc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b9cbe:	6143      	str	r3, [r0, #20]
   b9cc0:	f7ff ff51 	bl	b9b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9cc4:	4620      	mov	r0, r4
   b9cc6:	bd38      	pop	{r3, r4, r5, pc}

000b9cc8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9cc8:	b510      	push	{r4, lr}
    if (!n_) {
   b9cca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9ccc:	4604      	mov	r4, r0
    if (!n_) {
   b9cce:	b163      	cbz	r3, b9cea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9cd0:	6880      	ldr	r0, [r0, #8]
   b9cd2:	60e0      	str	r0, [r4, #12]
    --n_;
   b9cd4:	3b01      	subs	r3, #1
    ++t_;
   b9cd6:	3010      	adds	r0, #16
   b9cd8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b9cda:	6120      	str	r0, [r4, #16]
    --n_;
   b9cdc:	6163      	str	r3, [r4, #20]
    if (n_) {
   b9cde:	b113      	cbz	r3, b9ce6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9ce0:	f7ff fef2 	bl	b9ac8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9ce4:	60a0      	str	r0, [r4, #8]
    return true;
   b9ce6:	2001      	movs	r0, #1
   b9ce8:	e000      	b.n	b9cec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b9cea:	4618      	mov	r0, r3
}
   b9cec:	bd10      	pop	{r4, pc}

000b9cee <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9cee:	b510      	push	{r4, lr}
    write('}');
   b9cf0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9cf2:	4604      	mov	r4, r0
    write('}');
   b9cf4:	f7ff ff49 	bl	b9b8a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9cf8:	2301      	movs	r3, #1
   b9cfa:	7123      	strb	r3, [r4, #4]
}
   b9cfc:	4620      	mov	r0, r4
   b9cfe:	bd10      	pop	{r4, pc}

000b9d00 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9d00:	b508      	push	{r3, lr}
    switch (state_) {
   b9d02:	7903      	ldrb	r3, [r0, #4]
   b9d04:	2b01      	cmp	r3, #1
   b9d06:	d002      	beq.n	b9d0e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9d08:	2b02      	cmp	r3, #2
   b9d0a:	d004      	beq.n	b9d16 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b9d0c:	bd08      	pop	{r3, pc}
        write(',');
   b9d0e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9d10:	f7ff ff3b 	bl	b9b8a <_ZN5spark10JSONWriter5writeEc>
}
   b9d14:	e7fa      	b.n	b9d0c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b9d16:	213a      	movs	r1, #58	; 0x3a
   b9d18:	e7fa      	b.n	b9d10 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b9d1a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b9d1a:	b510      	push	{r4, lr}
   b9d1c:	4604      	mov	r4, r0
    writeSeparator();
   b9d1e:	f7ff ffef 	bl	b9d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9d22:	4620      	mov	r0, r4
   b9d24:	217b      	movs	r1, #123	; 0x7b
   b9d26:	f7ff ff30 	bl	b9b8a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b9d2a:	2300      	movs	r3, #0
   b9d2c:	7123      	strb	r3, [r4, #4]
}
   b9d2e:	4620      	mov	r0, r4
   b9d30:	bd10      	pop	{r4, pc}
	...

000b9d34 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9d34:	b513      	push	{r0, r1, r4, lr}
   b9d36:	4604      	mov	r4, r0
   b9d38:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9d3a:	f7ff ffe1 	bl	b9d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b9d3e:	6823      	ldr	r3, [r4, #0]
   b9d40:	9a01      	ldr	r2, [sp, #4]
   b9d42:	68db      	ldr	r3, [r3, #12]
   b9d44:	4903      	ldr	r1, [pc, #12]	; (b9d54 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9d46:	4620      	mov	r0, r4
   b9d48:	4798      	blx	r3
    state_ = NEXT;
   b9d4a:	2301      	movs	r3, #1
}
   b9d4c:	4620      	mov	r0, r4
    state_ = NEXT;
   b9d4e:	7123      	strb	r3, [r4, #4]
}
   b9d50:	b002      	add	sp, #8
   b9d52:	bd10      	pop	{r4, pc}
   b9d54:	000be3a4 	.word	0x000be3a4

000b9d58 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9d58:	b513      	push	{r0, r1, r4, lr}
   b9d5a:	4604      	mov	r4, r0
   b9d5c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9d5e:	f7ff ffcf 	bl	b9d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9d62:	6823      	ldr	r3, [r4, #0]
   b9d64:	9a01      	ldr	r2, [sp, #4]
   b9d66:	68db      	ldr	r3, [r3, #12]
   b9d68:	4903      	ldr	r1, [pc, #12]	; (b9d78 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b9d6a:	4620      	mov	r0, r4
   b9d6c:	4798      	blx	r3
    state_ = NEXT;
   b9d6e:	2301      	movs	r3, #1
}
   b9d70:	4620      	mov	r0, r4
    state_ = NEXT;
   b9d72:	7123      	strb	r3, [r4, #4]
}
   b9d74:	b002      	add	sp, #8
   b9d76:	bd10      	pop	{r4, pc}
   b9d78:	000bee2e 	.word	0x000bee2e

000b9d7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9d80:	460d      	mov	r5, r1
    write('"');
   b9d82:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9d84:	4690      	mov	r8, r2
   b9d86:	4604      	mov	r4, r0
    write('"');
   b9d88:	f7ff feff 	bl	b9b8a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b9d8c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9e34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9d90:	44a8      	add	r8, r5
    const char *s = str;
   b9d92:	462f      	mov	r7, r5
    while (s != end) {
   b9d94:	4547      	cmp	r7, r8
   b9d96:	46ba      	mov	sl, r7
   b9d98:	d03d      	beq.n	b9e16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b9d9a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b9d9e:	2e22      	cmp	r6, #34	; 0x22
   b9da0:	d006      	beq.n	b9db0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9da2:	2e5c      	cmp	r6, #92	; 0x5c
   b9da4:	d004      	beq.n	b9db0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9da6:	4630      	mov	r0, r6
   b9da8:	f003 ffaa 	bl	bdd00 <isprint>
   b9dac:	2800      	cmp	r0, #0
   b9dae:	d1f1      	bne.n	b9d94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b9db0:	6823      	ldr	r3, [r4, #0]
   b9db2:	ebaa 0205 	sub.w	r2, sl, r5
   b9db6:	689b      	ldr	r3, [r3, #8]
   b9db8:	4629      	mov	r1, r5
   b9dba:	4620      	mov	r0, r4
   b9dbc:	4798      	blx	r3
            write('\\');
   b9dbe:	215c      	movs	r1, #92	; 0x5c
   b9dc0:	4620      	mov	r0, r4
   b9dc2:	f7ff fee2 	bl	b9b8a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b9dc6:	2e0d      	cmp	r6, #13
   b9dc8:	d80a      	bhi.n	b9de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b9dca:	2e07      	cmp	r6, #7
   b9dcc:	d91c      	bls.n	b9e08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9dce:	f1a6 0308 	sub.w	r3, r6, #8
   b9dd2:	2b05      	cmp	r3, #5
   b9dd4:	d818      	bhi.n	b9e08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9dd6:	e8df f003 	tbb	[pc, r3]
   b9dda:	0f0d      	.short	0x0f0d
   b9ddc:	15131711 	.word	0x15131711
   b9de0:	2e22      	cmp	r6, #34	; 0x22
   b9de2:	d001      	beq.n	b9de8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b9de4:	2e5c      	cmp	r6, #92	; 0x5c
   b9de6:	d10f      	bne.n	b9e08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b9de8:	4631      	mov	r1, r6
                write('b');
   b9dea:	4620      	mov	r0, r4
   b9dec:	f7ff fecd 	bl	b9b8a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9df0:	463d      	mov	r5, r7
    while (s != end) {
   b9df2:	e7cf      	b.n	b9d94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b9df4:	2162      	movs	r1, #98	; 0x62
   b9df6:	e7f8      	b.n	b9dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b9df8:	2174      	movs	r1, #116	; 0x74
   b9dfa:	e7f6      	b.n	b9dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b9dfc:	216e      	movs	r1, #110	; 0x6e
   b9dfe:	e7f4      	b.n	b9dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9e00:	2166      	movs	r1, #102	; 0x66
   b9e02:	e7f2      	b.n	b9dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b9e04:	2172      	movs	r1, #114	; 0x72
   b9e06:	e7f0      	b.n	b9dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b9e08:	6823      	ldr	r3, [r4, #0]
   b9e0a:	4632      	mov	r2, r6
   b9e0c:	68db      	ldr	r3, [r3, #12]
   b9e0e:	4649      	mov	r1, r9
   b9e10:	4620      	mov	r0, r4
   b9e12:	4798      	blx	r3
                break;
   b9e14:	e7ec      	b.n	b9df0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b9e16:	42bd      	cmp	r5, r7
   b9e18:	d005      	beq.n	b9e26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b9e1a:	6823      	ldr	r3, [r4, #0]
   b9e1c:	1b7a      	subs	r2, r7, r5
   b9e1e:	689b      	ldr	r3, [r3, #8]
   b9e20:	4629      	mov	r1, r5
   b9e22:	4620      	mov	r0, r4
   b9e24:	4798      	blx	r3
    }
    write('"');
   b9e26:	2122      	movs	r1, #34	; 0x22
   b9e28:	4620      	mov	r0, r4
   b9e2a:	f7ff feae 	bl	b9b8a <_ZN5spark10JSONWriter5writeEc>
}
   b9e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9e32:	bf00      	nop
   b9e34:	000bf4b8 	.word	0x000bf4b8

000b9e38 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9e38:	b513      	push	{r0, r1, r4, lr}
   b9e3a:	4604      	mov	r4, r0
   b9e3c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9e40:	f7ff ff5e 	bl	b9d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b9e44:	4620      	mov	r0, r4
   b9e46:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9e4a:	f7ff ff97 	bl	b9d7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b9e4e:	2302      	movs	r3, #2
}
   b9e50:	4620      	mov	r0, r4
    state_ = VALUE;
   b9e52:	7123      	strb	r3, [r4, #4]
}
   b9e54:	b002      	add	sp, #8
   b9e56:	bd10      	pop	{r4, pc}

000b9e58 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9e58:	b513      	push	{r0, r1, r4, lr}
   b9e5a:	4604      	mov	r4, r0
   b9e5c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9e60:	f7ff ff4e 	bl	b9d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9e64:	4620      	mov	r0, r4
   b9e66:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9e6a:	f7ff ff87 	bl	b9d7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b9e6e:	2301      	movs	r3, #1
}
   b9e70:	4620      	mov	r0, r4
    state_ = NEXT;
   b9e72:	7123      	strb	r3, [r4, #4]
}
   b9e74:	b002      	add	sp, #8
   b9e76:	bd10      	pop	{r4, pc}

000b9e78 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b9e78:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b9e7a:	460b      	mov	r3, r1
    s->update(ticks);
   b9e7c:	6892      	ldr	r2, [r2, #8]
   b9e7e:	4601      	mov	r1, r0
   b9e80:	4618      	mov	r0, r3
   b9e82:	4710      	bx	r2

000b9e84 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b9e84:	b570      	push	{r4, r5, r6, lr}
   b9e86:	4c0e      	ldr	r4, [pc, #56]	; (b9ec0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b9e88:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b9e8a:	2500      	movs	r5, #0
   b9e8c:	241c      	movs	r4, #28
   b9e8e:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b9e92:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b9e96:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b9e9a:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b9e9c:	f004 0403 	and.w	r4, r4, #3
   b9ea0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b9ea4:	b2e4      	uxtb	r4, r4
   b9ea6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b9ea8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b9eaa:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b9eac:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b9eae:	7c42      	ldrb	r2, [r0, #17]
   b9eb0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b9eb2:	bf0a      	itet	eq
   b9eb4:	4b03      	ldreq	r3, [pc, #12]	; (b9ec4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b9eb6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b9eb8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b9ebc:	bd70      	pop	{r4, r5, r6, pc}
   b9ebe:	bf00      	nop
   b9ec0:	000beb44 	.word	0x000beb44
   b9ec4:	000b9e79 	.word	0x000b9e79

000b9ec8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9ec8:	6880      	ldr	r0, [r0, #8]
   b9eca:	6803      	ldr	r3, [r0, #0]
   b9ecc:	68db      	ldr	r3, [r3, #12]
   b9ece:	4718      	bx	r3

000b9ed0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9ed0:	4770      	bx	lr

000b9ed2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b9ed2:	4608      	mov	r0, r1
   b9ed4:	b111      	cbz	r1, b9edc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9ed6:	680b      	ldr	r3, [r1, #0]
   b9ed8:	685b      	ldr	r3, [r3, #4]
   b9eda:	4718      	bx	r3
}
   b9edc:	4770      	bx	lr

000b9ede <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b9ede:	4770      	bx	lr

000b9ee0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9ee0:	4770      	bx	lr

000b9ee2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b9ee2:	4770      	bx	lr

000b9ee4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9ee4:	4770      	bx	lr

000b9ee6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9ee6:	b538      	push	{r3, r4, r5, lr}
   b9ee8:	4604      	mov	r4, r0
   b9eea:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9eec:	6800      	ldr	r0, [r0, #0]
   b9eee:	212e      	movs	r1, #46	; 0x2e
   b9ef0:	f003 ffb7 	bl	bde62 <strchrnul>
    size = s - category;
   b9ef4:	6823      	ldr	r3, [r4, #0]
   b9ef6:	1ac3      	subs	r3, r0, r3
   b9ef8:	602b      	str	r3, [r5, #0]
    if (size) {
   b9efa:	b123      	cbz	r3, b9f06 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9efc:	7803      	ldrb	r3, [r0, #0]
   b9efe:	b103      	cbz	r3, b9f02 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9f00:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b9f02:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9f04:	6020      	str	r0, [r4, #0]
}
   b9f06:	4618      	mov	r0, r3
   b9f08:	bd38      	pop	{r3, r4, r5, pc}

000b9f0a <_ZN5spark16JSONStreamWriterD0Ev>:
   b9f0a:	b510      	push	{r4, lr}
   b9f0c:	210c      	movs	r1, #12
   b9f0e:	4604      	mov	r4, r0
   b9f10:	f7fa f8c5 	bl	b409e <_ZdlPvj>
   b9f14:	4620      	mov	r0, r4
   b9f16:	bd10      	pop	{r4, pc}

000b9f18 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9f18:	b510      	push	{r4, lr}
   b9f1a:	2104      	movs	r1, #4
   b9f1c:	4604      	mov	r4, r0
   b9f1e:	f7fa f8be 	bl	b409e <_ZdlPvj>
   b9f22:	4620      	mov	r0, r4
   b9f24:	bd10      	pop	{r4, pc}

000b9f26 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9f26:	b510      	push	{r4, lr}
   b9f28:	2104      	movs	r1, #4
   b9f2a:	4604      	mov	r4, r0
   b9f2c:	f7fa f8b7 	bl	b409e <_ZdlPvj>
   b9f30:	4620      	mov	r0, r4
   b9f32:	bd10      	pop	{r4, pc}

000b9f34 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9f34:	f7fe be94 	b.w	b8c60 <os_mutex_recursive_lock>

000b9f38 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9f38:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9f3a:	f003 ff9c 	bl	bde76 <strcmp>
}
   b9f3e:	fab0 f080 	clz	r0, r0
   b9f42:	0940      	lsrs	r0, r0, #5
   b9f44:	bd08      	pop	{r3, pc}

000b9f46 <__tcf_1>:
   b9f46:	4770      	bx	lr

000b9f48 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9f48:	b510      	push	{r4, lr}
   b9f4a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9f4c:	f001 fed2 	bl	bbcf4 <_Z16_fetch_usbserialv>
   b9f50:	4284      	cmp	r4, r0
   b9f52:	d010      	beq.n	b9f76 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9f54:	f002 f8d4 	bl	bc100 <_Z22__fetch_global_Serial1v>
   b9f58:	4284      	cmp	r4, r0
   b9f5a:	d105      	bne.n	b9f68 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9f5c:	f002 f8d0 	bl	bc100 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9f64:	f001 be5f 	b.w	bbc26 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9f68:	b12c      	cbz	r4, b9f76 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b9f6a:	6823      	ldr	r3, [r4, #0]
   b9f6c:	4620      	mov	r0, r4
   b9f6e:	685b      	ldr	r3, [r3, #4]
}
   b9f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9f74:	4718      	bx	r3
   b9f76:	bd10      	pop	{r4, pc}

000b9f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9f78:	680b      	ldr	r3, [r1, #0]
   b9f7a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9f7c:	684b      	ldr	r3, [r1, #4]
   b9f7e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9f80:	b113      	cbz	r3, b9f88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9f82:	685a      	ldr	r2, [r3, #4]
   b9f84:	3201      	adds	r2, #1
   b9f86:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9f88:	4770      	bx	lr

000b9f8a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9f8a:	b513      	push	{r0, r1, r4, lr}
   b9f8c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9f8e:	4608      	mov	r0, r1
   b9f90:	9101      	str	r1, [sp, #4]
   b9f92:	f003 ff82 	bl	bde9a <strlen>
   b9f96:	9901      	ldr	r1, [sp, #4]
   b9f98:	4602      	mov	r2, r0
   b9f9a:	4620      	mov	r0, r4
}
   b9f9c:	b002      	add	sp, #8
   b9f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9fa2:	f7ff bf59 	b.w	b9e58 <_ZN5spark10JSONWriter5valueEPKcj>

000b9fa6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9fa6:	b513      	push	{r0, r1, r4, lr}
   b9fa8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9faa:	4608      	mov	r0, r1
   b9fac:	9101      	str	r1, [sp, #4]
   b9fae:	f003 ff74 	bl	bde9a <strlen>
   b9fb2:	6823      	ldr	r3, [r4, #0]
   b9fb4:	9901      	ldr	r1, [sp, #4]
   b9fb6:	68db      	ldr	r3, [r3, #12]
   b9fb8:	4602      	mov	r2, r0
   b9fba:	4620      	mov	r0, r4
}
   b9fbc:	b002      	add	sp, #8
   b9fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9fc2:	4718      	bx	r3

000b9fc4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9fc4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9fc6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9fc8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9fcc:	68db      	ldr	r3, [r3, #12]
   b9fce:	2201      	movs	r2, #1
   b9fd0:	f10d 0107 	add.w	r1, sp, #7
   b9fd4:	4798      	blx	r3
}
   b9fd6:	b003      	add	sp, #12
   b9fd8:	f85d fb04 	ldr.w	pc, [sp], #4

000b9fdc <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9fdc:	b40e      	push	{r1, r2, r3}
   b9fde:	b503      	push	{r0, r1, lr}
   b9fe0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b9fe2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9fe4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9fe8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b9fea:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b9fec:	f001 f975 	bl	bb2da <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9ff0:	b002      	add	sp, #8
   b9ff2:	f85d eb04 	ldr.w	lr, [sp], #4
   b9ff6:	b003      	add	sp, #12
   b9ff8:	4770      	bx	lr

000b9ffa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9ffa:	680a      	ldr	r2, [r1, #0]
   b9ffc:	6002      	str	r2, [r0, #0]
   b9ffe:	684a      	ldr	r2, [r1, #4]
   ba000:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   ba002:	2200      	movs	r2, #0
   ba004:	e9c0 2202 	strd	r2, r2, [r0, #8]
   ba008:	b510      	push	{r4, lr}
   ba00a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba00c:	688c      	ldr	r4, [r1, #8]
   ba00e:	6084      	str	r4, [r0, #8]
   ba010:	68cc      	ldr	r4, [r1, #12]
   ba012:	60c4      	str	r4, [r0, #12]
   ba014:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   ba016:	608a      	str	r2, [r1, #8]
   ba018:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba01a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   ba01c:	610a      	str	r2, [r1, #16]
   ba01e:	bd10      	pop	{r4, pc}

000ba020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   ba020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   ba024:	e9d0 8400 	ldrd	r8, r4, [r0]
   ba028:	f04f 0a14 	mov.w	sl, #20
   ba02c:	9300      	str	r3, [sp, #0]
   ba02e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   ba032:	4b18      	ldr	r3, [pc, #96]	; (ba094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   ba034:	10a4      	asrs	r4, r4, #2
   ba036:	4617      	mov	r7, r2
   ba038:	435c      	muls	r4, r3
   ba03a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   ba03c:	2c00      	cmp	r4, #0
   ba03e:	dd21      	ble.n	ba084 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   ba040:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   ba042:	fb0a f006 	mul.w	r0, sl, r6
   ba046:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   ba04a:	463a      	mov	r2, r7
   ba04c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   ba050:	5828      	ldr	r0, [r5, r0]
   ba052:	9101      	str	r1, [sp, #4]
   ba054:	455f      	cmp	r7, fp
   ba056:	bf28      	it	cs
   ba058:	465a      	movcs	r2, fp
   ba05a:	f003 ff26 	bl	bdeaa <strncmp>
                if (cmp == 0) {
   ba05e:	2800      	cmp	r0, #0
   ba060:	9901      	ldr	r1, [sp, #4]
   ba062:	f04f 0301 	mov.w	r3, #1
   ba066:	d10b      	bne.n	ba080 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   ba068:	455f      	cmp	r7, fp
   ba06a:	d103      	bne.n	ba074 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   ba06c:	9a00      	ldr	r2, [sp, #0]
   ba06e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   ba070:	4634      	mov	r4, r6
   ba072:	e7e3      	b.n	ba03c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   ba074:	d9fc      	bls.n	ba070 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   ba076:	1ba6      	subs	r6, r4, r6
	      ++__first;
   ba078:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   ba07c:	3e01      	subs	r6, #1
   ba07e:	e7f7      	b.n	ba070 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   ba080:	dbf9      	blt.n	ba076 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   ba082:	e7f5      	b.n	ba070 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   ba084:	eba5 0508 	sub.w	r5, r5, r8
}
   ba088:	4802      	ldr	r0, [pc, #8]	; (ba094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   ba08a:	10ad      	asrs	r5, r5, #2
   ba08c:	4368      	muls	r0, r5
   ba08e:	b003      	add	sp, #12
   ba090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba094:	cccccccd 	.word	0xcccccccd

000ba098 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   ba098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   ba09a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   ba09c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   ba09e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   ba0a0:	b303      	cbz	r3, ba0e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   ba0a2:	b1f9      	cbz	r1, ba0e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   ba0a4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   ba0a6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   ba0aa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   ba0ac:	a903      	add	r1, sp, #12
   ba0ae:	a801      	add	r0, sp, #4
   ba0b0:	f7ff ff19 	bl	b9ee6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba0b4:	4601      	mov	r1, r0
   ba0b6:	b1a8      	cbz	r0, ba0e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   ba0b8:	f10d 030b 	add.w	r3, sp, #11
   ba0bc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   ba0be:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba0c2:	4620      	mov	r0, r4
   ba0c4:	f7ff ffac 	bl	ba020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   ba0c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   ba0cc:	b153      	cbz	r3, ba0e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   ba0ce:	6823      	ldr	r3, [r4, #0]
   ba0d0:	2414      	movs	r4, #20
   ba0d2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   ba0d6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   ba0d8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   ba0dc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   ba0de:	bfa8      	it	ge
   ba0e0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   ba0e2:	e7e3      	b.n	ba0ac <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   ba0e4:	4628      	mov	r0, r5
   ba0e6:	b004      	add	sp, #16
   ba0e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba0ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   ba0ec:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   ba0ee:	4c09      	ldr	r4, [pc, #36]	; (ba114 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   ba0f0:	7823      	ldrb	r3, [r4, #0]
   ba0f2:	f3bf 8f5b 	dmb	ish
   ba0f6:	07db      	lsls	r3, r3, #31
   ba0f8:	d409      	bmi.n	ba10e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   ba0fa:	4620      	mov	r0, r4
   ba0fc:	f7f9 ffde 	bl	b40bc <__cxa_guard_acquire>
   ba100:	b128      	cbz	r0, ba10e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   ba102:	4620      	mov	r0, r4
   ba104:	f7f9 ffdf 	bl	b40c6 <__cxa_guard_release>
   ba108:	4803      	ldr	r0, [pc, #12]	; (ba118 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   ba10a:	f003 fdd5 	bl	bdcb8 <atexit>
}
   ba10e:	4803      	ldr	r0, [pc, #12]	; (ba11c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   ba110:	bd10      	pop	{r4, pc}
   ba112:	bf00      	nop
   ba114:	2003e64c 	.word	0x2003e64c
   ba118:	000b9edf 	.word	0x000b9edf
   ba11c:	2003dec0 	.word	0x2003dec0

000ba120 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   ba120:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   ba122:	4c09      	ldr	r4, [pc, #36]	; (ba148 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   ba124:	7823      	ldrb	r3, [r4, #0]
   ba126:	f3bf 8f5b 	dmb	ish
   ba12a:	07db      	lsls	r3, r3, #31
   ba12c:	d409      	bmi.n	ba142 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   ba12e:	4620      	mov	r0, r4
   ba130:	f7f9 ffc4 	bl	b40bc <__cxa_guard_acquire>
   ba134:	b128      	cbz	r0, ba142 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   ba136:	4620      	mov	r0, r4
   ba138:	f7f9 ffc5 	bl	b40c6 <__cxa_guard_release>
   ba13c:	4803      	ldr	r0, [pc, #12]	; (ba14c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   ba13e:	f003 fdbb 	bl	bdcb8 <atexit>
    return &factory;
}
   ba142:	4803      	ldr	r0, [pc, #12]	; (ba150 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   ba144:	bd10      	pop	{r4, pc}
   ba146:	bf00      	nop
   ba148:	2003e650 	.word	0x2003e650
   ba14c:	000b9f47 	.word	0x000b9f47
   ba150:	2003dec4 	.word	0x2003dec4

000ba154 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   ba154:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   ba156:	2500      	movs	r5, #0
   ba158:	4604      	mov	r4, r0
   ba15a:	e9c0 5500 	strd	r5, r5, [r0]
   ba15e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   ba162:	6085      	str	r5, [r0, #8]
   ba164:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   ba166:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   ba16a:	f7fe fd69 	bl	b8c40 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   ba16e:	f7ff ffbd 	bl	ba0ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   ba172:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   ba174:	f7ff ffd4 	bl	ba120 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   ba178:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   ba17a:	6220      	str	r0, [r4, #32]
}
   ba17c:	4620      	mov	r0, r4
   ba17e:	bd38      	pop	{r3, r4, r5, pc}

000ba180 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   ba180:	b510      	push	{r4, lr}
    static LogManager mgr;
   ba182:	4c0a      	ldr	r4, [pc, #40]	; (ba1ac <_ZN5spark10LogManager8instanceEv+0x2c>)
   ba184:	7823      	ldrb	r3, [r4, #0]
   ba186:	f3bf 8f5b 	dmb	ish
   ba18a:	07db      	lsls	r3, r3, #31
   ba18c:	d40c      	bmi.n	ba1a8 <_ZN5spark10LogManager8instanceEv+0x28>
   ba18e:	4620      	mov	r0, r4
   ba190:	f7f9 ff94 	bl	b40bc <__cxa_guard_acquire>
   ba194:	b140      	cbz	r0, ba1a8 <_ZN5spark10LogManager8instanceEv+0x28>
   ba196:	4806      	ldr	r0, [pc, #24]	; (ba1b0 <_ZN5spark10LogManager8instanceEv+0x30>)
   ba198:	f7ff ffdc 	bl	ba154 <_ZN5spark10LogManagerC1Ev>
   ba19c:	4620      	mov	r0, r4
   ba19e:	f7f9 ff92 	bl	b40c6 <__cxa_guard_release>
   ba1a2:	4804      	ldr	r0, [pc, #16]	; (ba1b4 <_ZN5spark10LogManager8instanceEv+0x34>)
   ba1a4:	f003 fd88 	bl	bdcb8 <atexit>
    return &mgr;
}
   ba1a8:	4801      	ldr	r0, [pc, #4]	; (ba1b0 <_ZN5spark10LogManager8instanceEv+0x30>)
   ba1aa:	bd10      	pop	{r4, pc}
   ba1ac:	2003e648 	.word	0x2003e648
   ba1b0:	2003e658 	.word	0x2003e658
   ba1b4:	000ba6d5 	.word	0x000ba6d5

000ba1b8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   ba1b8:	4a02      	ldr	r2, [pc, #8]	; (ba1c4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   ba1ba:	4903      	ldr	r1, [pc, #12]	; (ba1c8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   ba1bc:	4803      	ldr	r0, [pc, #12]	; (ba1cc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   ba1be:	2300      	movs	r3, #0
   ba1c0:	f7fe bf7e 	b.w	b90c0 <log_set_callbacks>
   ba1c4:	000ba4b9 	.word	0x000ba4b9
   ba1c8:	000ba445 	.word	0x000ba445
   ba1cc:	000ba3c5 	.word	0x000ba3c5

000ba1d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   ba1d0:	2300      	movs	r3, #0
   ba1d2:	461a      	mov	r2, r3
   ba1d4:	4619      	mov	r1, r3
   ba1d6:	4618      	mov	r0, r3
   ba1d8:	f7fe bf72 	b.w	b90c0 <log_set_callbacks>

000ba1dc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   ba1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   ba1de:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   ba1e0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba1e2:	4668      	mov	r0, sp
   ba1e4:	f7ff fec8 	bl	b9f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   ba1e8:	466a      	mov	r2, sp
   ba1ea:	4629      	mov	r1, r5
   ba1ec:	4620      	mov	r0, r4
   ba1ee:	f7ff fd53 	bl	b9c98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   ba1f2:	a801      	add	r0, sp, #4
   ba1f4:	f7ff f937 	bl	b9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba1f8:	4620      	mov	r0, r4
   ba1fa:	b003      	add	sp, #12
   ba1fc:	bd30      	pop	{r4, r5, pc}

000ba1fe <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   ba1fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   ba200:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   ba202:	4604      	mov	r4, r0
   ba204:	4668      	mov	r0, sp
   ba206:	f7ff feb7 	bl	b9f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   ba20a:	466a      	mov	r2, sp
   ba20c:	4629      	mov	r1, r5
   ba20e:	4620      	mov	r0, r4
   ba210:	f7ff fd1e 	bl	b9c50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   ba214:	a801      	add	r0, sp, #4
   ba216:	f7ff f926 	bl	b9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba21a:	4620      	mov	r0, r4
   ba21c:	b003      	add	sp, #12
   ba21e:	bd30      	pop	{r4, r5, pc}

000ba220 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   ba220:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   ba222:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   ba224:	4604      	mov	r4, r0
   ba226:	4668      	mov	r0, sp
   ba228:	f7ff fea6 	bl	b9f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   ba22c:	466a      	mov	r2, sp
   ba22e:	4629      	mov	r1, r5
   ba230:	4620      	mov	r0, r4
   ba232:	f7ff fcb6 	bl	b9ba2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   ba236:	a801      	add	r0, sp, #4
   ba238:	f7ff f915 	bl	b9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba23c:	4620      	mov	r0, r4
   ba23e:	b003      	add	sp, #12
   ba240:	bd30      	pop	{r4, r5, pc}
	...

000ba244 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   ba244:	b570      	push	{r4, r5, r6, lr}
   ba246:	b08a      	sub	sp, #40	; 0x28
   ba248:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   ba24a:	4601      	mov	r1, r0
   ba24c:	a804      	add	r0, sp, #16
   ba24e:	f7ff ffc5 	bl	ba1dc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   ba252:	4e14      	ldr	r6, [pc, #80]	; (ba2a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   ba254:	a804      	add	r0, sp, #16
   ba256:	f7ff fd37 	bl	b9cc8 <_ZN5spark18JSONObjectIterator4nextEv>
   ba25a:	b1e8      	cbz	r0, ba298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   ba25c:	a904      	add	r1, sp, #16
   ba25e:	4668      	mov	r0, sp
   ba260:	f7ff ffcd 	bl	ba1fe <_ZNK5spark18JSONObjectIterator4nameEv>
   ba264:	9802      	ldr	r0, [sp, #8]
   ba266:	4631      	mov	r1, r6
   ba268:	f7ff fe66 	bl	b9f38 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   ba26c:	4604      	mov	r4, r0
   ba26e:	b110      	cbz	r0, ba276 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   ba270:	1e2c      	subs	r4, r5, #0
   ba272:	bf18      	it	ne
   ba274:	2401      	movne	r4, #1
   ba276:	a801      	add	r0, sp, #4
   ba278:	f7ff f8f5 	bl	b9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba27c:	2c00      	cmp	r4, #0
   ba27e:	d0e9      	beq.n	ba254 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   ba280:	a904      	add	r1, sp, #16
   ba282:	4668      	mov	r0, sp
   ba284:	f7ff ffcc 	bl	ba220 <_ZNK5spark18JSONObjectIterator5valueEv>
   ba288:	4668      	mov	r0, sp
   ba28a:	f7ff fcc0 	bl	b9c0e <_ZNK5spark9JSONValue5toIntEv>
   ba28e:	6028      	str	r0, [r5, #0]
   ba290:	a801      	add	r0, sp, #4
   ba292:	f7ff f8e8 	bl	b9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba296:	e7dd      	b.n	ba254 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   ba298:	a805      	add	r0, sp, #20
   ba29a:	f7ff f8e4 	bl	b9466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba29e:	b00a      	add	sp, #40	; 0x28
   ba2a0:	bd70      	pop	{r4, r5, r6, pc}
   ba2a2:	bf00      	nop
   ba2a4:	000bf4be 	.word	0x000bf4be

000ba2a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   ba2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba2aa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   ba2ac:	4620      	mov	r0, r4
   ba2ae:	4913      	ldr	r1, [pc, #76]	; (ba2fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   ba2b0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   ba2b2:	f003 fde0 	bl	bde76 <strcmp>
   ba2b6:	b950      	cbnz	r0, ba2ce <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   ba2b8:	f001 fd1c 	bl	bbcf4 <_Z16_fetch_usbserialv>
   ba2bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   ba2c0:	f001 fd06 	bl	bbcd0 <_ZN9USBSerial5beginEl>
}
   ba2c4:	b003      	add	sp, #12
   ba2c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   ba2ca:	f001 bd13 	b.w	bbcf4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   ba2ce:	490c      	ldr	r1, [pc, #48]	; (ba300 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   ba2d0:	4620      	mov	r0, r4
   ba2d2:	f003 fdd0 	bl	bde76 <strcmp>
   ba2d6:	b978      	cbnz	r0, ba2f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   ba2d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   ba2dc:	a901      	add	r1, sp, #4
   ba2de:	4628      	mov	r0, r5
        int baud = 9600;
   ba2e0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   ba2e2:	f7ff ffaf 	bl	ba244 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   ba2e6:	f001 ff0b 	bl	bc100 <_Z22__fetch_global_Serial1v>
   ba2ea:	9901      	ldr	r1, [sp, #4]
   ba2ec:	f001 fc98 	bl	bbc20 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   ba2f0:	f001 ff06 	bl	bc100 <_Z22__fetch_global_Serial1v>
}
   ba2f4:	b003      	add	sp, #12
   ba2f6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   ba2f8:	2000      	movs	r0, #0
   ba2fa:	e7fb      	b.n	ba2f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   ba2fc:	000bf4c3 	.word	0x000bf4c3
   ba300:	000bf4ca 	.word	0x000bf4ca

000ba304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba304:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba306:	e9d0 5300 	ldrd	r5, r3, [r0]
   ba30a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba30c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba30e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba312:	42ae      	cmp	r6, r5
   ba314:	d005      	beq.n	ba322 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   ba316:	f105 0008 	add.w	r0, r5, #8
   ba31a:	f7ff fff3 	bl	ba304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba31e:	3514      	adds	r5, #20
   ba320:	e7f7      	b.n	ba312 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   ba322:	6820      	ldr	r0, [r4, #0]
   ba324:	f7ff f802 	bl	b932c <free>
}
   ba328:	4620      	mov	r0, r4
   ba32a:	bd70      	pop	{r4, r5, r6, pc}

000ba32c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   ba32c:	b510      	push	{r4, lr}
   ba32e:	4604      	mov	r4, r0
   ba330:	300c      	adds	r0, #12
   ba332:	f7ff ffe7 	bl	ba304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba336:	4620      	mov	r0, r4
   ba338:	f7ff f883 	bl	b9442 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba33c:	4620      	mov	r0, r4
   ba33e:	bd10      	pop	{r4, pc}

000ba340 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   ba340:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   ba342:	4b04      	ldr	r3, [pc, #16]	; (ba354 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   ba344:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   ba346:	f840 3b04 	str.w	r3, [r0], #4
   ba34a:	f7ff ffef 	bl	ba32c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   ba34e:	4620      	mov	r0, r4
   ba350:	bd10      	pop	{r4, pc}
   ba352:	bf00      	nop
   ba354:	000be68c 	.word	0x000be68c

000ba358 <_ZN5spark16StreamLogHandlerD0Ev>:
   ba358:	b510      	push	{r4, lr}
   ba35a:	4604      	mov	r4, r0
   ba35c:	f7ff fff0 	bl	ba340 <_ZN5spark16StreamLogHandlerD1Ev>
   ba360:	4620      	mov	r0, r4
   ba362:	2124      	movs	r1, #36	; 0x24
   ba364:	f7f9 fe9b 	bl	b409e <_ZdlPvj>
   ba368:	4620      	mov	r0, r4
   ba36a:	bd10      	pop	{r4, pc}

000ba36c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   ba36c:	b510      	push	{r4, lr}
   ba36e:	4b03      	ldr	r3, [pc, #12]	; (ba37c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   ba370:	6003      	str	r3, [r0, #0]
   ba372:	4604      	mov	r4, r0
   ba374:	f7ff ffe4 	bl	ba340 <_ZN5spark16StreamLogHandlerD1Ev>
   ba378:	4620      	mov	r0, r4
   ba37a:	bd10      	pop	{r4, pc}
   ba37c:	000bf55c 	.word	0x000bf55c

000ba380 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   ba380:	b510      	push	{r4, lr}
   ba382:	4604      	mov	r4, r0
   ba384:	f7ff fff2 	bl	ba36c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   ba388:	4620      	mov	r0, r4
   ba38a:	2124      	movs	r1, #36	; 0x24
   ba38c:	f7f9 fe87 	bl	b409e <_ZdlPvj>
   ba390:	4620      	mov	r0, r4
   ba392:	bd10      	pop	{r4, pc}

000ba394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   ba394:	2200      	movs	r2, #0
   ba396:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   ba39a:	b510      	push	{r4, lr}
        capacity_(0) {
   ba39c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba39e:	680c      	ldr	r4, [r1, #0]
   ba3a0:	6004      	str	r4, [r0, #0]
   ba3a2:	684c      	ldr	r4, [r1, #4]
   ba3a4:	6044      	str	r4, [r0, #4]
   ba3a6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba3a8:	600a      	str	r2, [r1, #0]
   ba3aa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba3ac:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba3ae:	608a      	str	r2, [r1, #8]
}
   ba3b0:	bd10      	pop	{r4, pc}

000ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   ba3b2:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba3b4:	6803      	ldr	r3, [r0, #0]
   ba3b6:	4604      	mov	r4, r0
   ba3b8:	6818      	ldr	r0, [r3, #0]
   ba3ba:	f7fe fc59 	bl	b8c70 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   ba3be:	4620      	mov	r0, r4
   ba3c0:	bd10      	pop	{r4, pc}
	...

000ba3c4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   ba3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3c8:	b087      	sub	sp, #28
   ba3ca:	4680      	mov	r8, r0
   ba3cc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   ba3ce:	4b1c      	ldr	r3, [pc, #112]	; (ba440 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   ba3d0:	685b      	ldr	r3, [r3, #4]
   ba3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba3d6:	4689      	mov	r9, r1
   ba3d8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   ba3da:	b96b      	cbnz	r3, ba3f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   ba3dc:	f7ff fed0 	bl	ba180 <_ZN5spark10LogManager8instanceEv>
   ba3e0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba3e2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   ba3e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba3e8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   ba3ea:	f7ff fda3 	bl	b9f34 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   ba3ee:	7b23      	ldrb	r3, [r4, #12]
   ba3f0:	b12b      	cbz	r3, ba3fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   ba3f2:	a805      	add	r0, sp, #20
   ba3f4:	f7ff ffdd 	bl	ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   ba3f8:	b007      	add	sp, #28
   ba3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   ba3fe:	2301      	movs	r3, #1
   ba400:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   ba402:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   ba406:	fa5f f989 	uxtb.w	r9, r9
   ba40a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba40e:	45aa      	cmp	sl, r5
   ba410:	d012      	beq.n	ba438 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   ba412:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   ba416:	4631      	mov	r1, r6
   ba418:	1d38      	adds	r0, r7, #4
   ba41a:	f7ff fe3d 	bl	ba098 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba41e:	4581      	cmp	r9, r0
   ba420:	d3f5      	bcc.n	ba40e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   ba422:	683b      	ldr	r3, [r7, #0]
   ba424:	9a03      	ldr	r2, [sp, #12]
   ba426:	9200      	str	r2, [sp, #0]
   ba428:	f8d3 b008 	ldr.w	fp, [r3, #8]
   ba42c:	464a      	mov	r2, r9
   ba42e:	4633      	mov	r3, r6
   ba430:	4641      	mov	r1, r8
   ba432:	4638      	mov	r0, r7
   ba434:	47d8      	blx	fp
   ba436:	e7ea      	b.n	ba40e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   ba438:	2300      	movs	r3, #0
   ba43a:	7323      	strb	r3, [r4, #12]
   ba43c:	e7d9      	b.n	ba3f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   ba43e:	bf00      	nop
   ba440:	e000ed00 	.word	0xe000ed00

000ba444 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   ba444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba448:	469b      	mov	fp, r3
   ba44a:	4b1a      	ldr	r3, [pc, #104]	; (ba4b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   ba44c:	685b      	ldr	r3, [r3, #4]
   ba44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba452:	4680      	mov	r8, r0
   ba454:	4689      	mov	r9, r1
   ba456:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   ba458:	b96b      	cbnz	r3, ba476 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   ba45a:	f7ff fe91 	bl	ba180 <_ZN5spark10LogManager8instanceEv>
   ba45e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba460:	f100 0324 	add.w	r3, r0, #36	; 0x24
   ba464:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba466:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba468:	f7ff fd64 	bl	b9f34 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   ba46c:	7b23      	ldrb	r3, [r4, #12]
   ba46e:	b12b      	cbz	r3, ba47c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   ba470:	a801      	add	r0, sp, #4
   ba472:	f7ff ff9e 	bl	ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba476:	b003      	add	sp, #12
   ba478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   ba47c:	2301      	movs	r3, #1
   ba47e:	7323      	strb	r3, [r4, #12]
   ba480:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ba484:	b2f6      	uxtb	r6, r6
   ba486:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba48a:	4555      	cmp	r5, sl
   ba48c:	d00e      	beq.n	ba4ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ba48e:	f855 7b04 	ldr.w	r7, [r5], #4
   ba492:	4659      	mov	r1, fp
   ba494:	1d38      	adds	r0, r7, #4
   ba496:	f7ff fdff 	bl	ba098 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba49a:	4286      	cmp	r6, r0
   ba49c:	d3f5      	bcc.n	ba48a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ba49e:	683b      	ldr	r3, [r7, #0]
   ba4a0:	464a      	mov	r2, r9
   ba4a2:	68db      	ldr	r3, [r3, #12]
   ba4a4:	4641      	mov	r1, r8
   ba4a6:	4638      	mov	r0, r7
   ba4a8:	4798      	blx	r3
   ba4aa:	e7ee      	b.n	ba48a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ba4ac:	2300      	movs	r3, #0
   ba4ae:	7323      	strb	r3, [r4, #12]
   ba4b0:	e7de      	b.n	ba470 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ba4b2:	bf00      	nop
   ba4b4:	e000ed00 	.word	0xe000ed00

000ba4b8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ba4b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba4bc:	4b16      	ldr	r3, [pc, #88]	; (ba518 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ba4be:	685b      	ldr	r3, [r3, #4]
   ba4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba4c4:	4605      	mov	r5, r0
   ba4c6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ba4c8:	bb1b      	cbnz	r3, ba512 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ba4ca:	f7ff fe59 	bl	ba180 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ba4ce:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ba4d2:	4604      	mov	r4, r0
   ba4d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba4d6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba4d8:	f7ff fd2c 	bl	b9f34 <_ZN14RecursiveMutex4lockEv.isra.0>
   ba4dc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ba4e0:	2446      	movs	r4, #70	; 0x46
   ba4e2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba4e6:	45b0      	cmp	r8, r6
   ba4e8:	d109      	bne.n	ba4fe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ba4ea:	a801      	add	r0, sp, #4
   ba4ec:	f7ff ff61 	bl	ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ba4f0:	42a5      	cmp	r5, r4
   ba4f2:	bfb4      	ite	lt
   ba4f4:	2000      	movlt	r0, #0
   ba4f6:	2001      	movge	r0, #1
}
   ba4f8:	b002      	add	sp, #8
   ba4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ba4fe:	f856 0b04 	ldr.w	r0, [r6], #4
   ba502:	4639      	mov	r1, r7
   ba504:	3004      	adds	r0, #4
   ba506:	f7ff fdc7 	bl	ba098 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ba50a:	4284      	cmp	r4, r0
   ba50c:	bfa8      	it	ge
   ba50e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ba510:	e7e9      	b.n	ba4e6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ba512:	2000      	movs	r0, #0
   ba514:	e7f0      	b.n	ba4f8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ba516:	bf00      	nop
   ba518:	e000ed00 	.word	0xe000ed00

000ba51c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba51e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   ba522:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba524:	4604      	mov	r4, r0
   ba526:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba528:	db0d      	blt.n	ba546 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   ba52a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   ba52c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba52e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba530:	dd04      	ble.n	ba53c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   ba532:	00b9      	lsls	r1, r7, #2
   ba534:	f7fe ff02 	bl	b933c <realloc>
            if (!d) {
   ba538:	b918      	cbnz	r0, ba542 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   ba53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ba53c:	f7fe fef6 	bl	b932c <free>
        T* d = nullptr;
   ba540:	2000      	movs	r0, #0
        data_ = d;
   ba542:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba544:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba546:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba548:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba54a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   ba54e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba550:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   ba554:	1d08      	adds	r0, r1, #4
   ba556:	f003 fbe9 	bl	bdd2c <memmove>
    new(p) T(std::move(value));
   ba55a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   ba55e:	6863      	ldr	r3, [r4, #4]
   ba560:	3301      	adds	r3, #1
   ba562:	6063      	str	r3, [r4, #4]
    return true;
   ba564:	2001      	movs	r0, #1
   ba566:	e7e8      	b.n	ba53a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000ba568 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba568:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ba56a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba56e:	4604      	mov	r4, r0
   ba570:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba572:	9301      	str	r3, [sp, #4]
   ba574:	460d      	mov	r5, r1
      { _M_device.lock(); }
   ba576:	f7ff fcdd 	bl	b9f34 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   ba57a:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba57e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   ba582:	4293      	cmp	r3, r2
   ba584:	4619      	mov	r1, r3
   ba586:	d00b      	beq.n	ba5a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ba588:	6809      	ldr	r1, [r1, #0]
   ba58a:	42a9      	cmp	r1, r5
   ba58c:	f103 0304 	add.w	r3, r3, #4
   ba590:	d1f7      	bne.n	ba582 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   ba592:	a801      	add	r0, sp, #4
   ba594:	f7ff ff0d 	bl	ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba598:	2500      	movs	r5, #0
}
   ba59a:	4628      	mov	r0, r5
   ba59c:	b003      	add	sp, #12
   ba59e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ba5a0:	4629      	mov	r1, r5
   ba5a2:	4620      	mov	r0, r4
   ba5a4:	f7ff ffba 	bl	ba51c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   ba5a8:	4605      	mov	r5, r0
   ba5aa:	2800      	cmp	r0, #0
   ba5ac:	d0f1      	beq.n	ba592 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ba5ae:	6863      	ldr	r3, [r4, #4]
   ba5b0:	2b01      	cmp	r3, #1
   ba5b2:	d101      	bne.n	ba5b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ba5b4:	f7ff fe00 	bl	ba1b8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba5b8:	a801      	add	r0, sp, #4
   ba5ba:	f7ff fefa 	bl	ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba5be:	e7ec      	b.n	ba59a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ba5c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba5c0:	b570      	push	{r4, r5, r6, lr}
   ba5c2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ba5c4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba5c8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ba5ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ba5ce:	4282      	cmp	r2, r0
   ba5d0:	d00f      	beq.n	ba5f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   ba5d2:	4601      	mov	r1, r0
            if (*p == value) {
   ba5d4:	681d      	ldr	r5, [r3, #0]
   ba5d6:	f851 6b04 	ldr.w	r6, [r1], #4
   ba5da:	42ae      	cmp	r6, r5
   ba5dc:	d107      	bne.n	ba5ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba5de:	1a52      	subs	r2, r2, r1
   ba5e0:	f003 fba4 	bl	bdd2c <memmove>
    --size_;
   ba5e4:	6863      	ldr	r3, [r4, #4]
   ba5e6:	3b01      	subs	r3, #1
   ba5e8:	6063      	str	r3, [r4, #4]
    return true;
   ba5ea:	2001      	movs	r0, #1
}
   ba5ec:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   ba5ee:	4608      	mov	r0, r1
   ba5f0:	e7ed      	b.n	ba5ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ba5f2:	2000      	movs	r0, #0
   ba5f4:	e7fa      	b.n	ba5ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000ba5f6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba5f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ba5f8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba5fc:	4604      	mov	r4, r0
   ba5fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba600:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba602:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   ba604:	f7ff fc96 	bl	b9f34 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ba608:	a901      	add	r1, sp, #4
   ba60a:	4620      	mov	r0, r4
   ba60c:	f7ff ffd8 	bl	ba5c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ba610:	b118      	cbz	r0, ba61a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ba612:	6863      	ldr	r3, [r4, #4]
   ba614:	b90b      	cbnz	r3, ba61a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ba616:	f7ff fddb 	bl	ba1d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba61a:	a803      	add	r0, sp, #12
   ba61c:	f7ff fec9 	bl	ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba620:	b004      	add	sp, #16
   ba622:	bd10      	pop	{r4, pc}

000ba624 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba624:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba626:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba62a:	2318      	movs	r3, #24
   ba62c:	4604      	mov	r4, r0
   ba62e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba632:	42ae      	cmp	r6, r5
   ba634:	d015      	beq.n	ba662 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba636:	f105 0110 	add.w	r1, r5, #16
   ba63a:	4620      	mov	r0, r4
   ba63c:	f7ff ffc0 	bl	ba5c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba640:	6863      	ldr	r3, [r4, #4]
   ba642:	b90b      	cbnz	r3, ba648 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba644:	f7ff fdc4 	bl	ba1d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba648:	69e0      	ldr	r0, [r4, #28]
   ba64a:	6929      	ldr	r1, [r5, #16]
   ba64c:	6803      	ldr	r3, [r0, #0]
   ba64e:	68db      	ldr	r3, [r3, #12]
   ba650:	4798      	blx	r3
        if (h.stream) {
   ba652:	6969      	ldr	r1, [r5, #20]
   ba654:	b119      	cbz	r1, ba65e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba656:	6a20      	ldr	r0, [r4, #32]
   ba658:	6803      	ldr	r3, [r0, #0]
   ba65a:	68db      	ldr	r3, [r3, #12]
   ba65c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba65e:	3518      	adds	r5, #24
   ba660:	e7e7      	b.n	ba632 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba662:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba666:	2618      	movs	r6, #24
   ba668:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba66c:	42ae      	cmp	r6, r5
   ba66e:	d004      	beq.n	ba67a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba670:	4628      	mov	r0, r5
   ba672:	f000 ff47 	bl	bb504 <_ZN6StringD1Ev>
   ba676:	3518      	adds	r5, #24
   ba678:	e7f8      	b.n	ba66c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba67a:	2300      	movs	r3, #0
   ba67c:	6163      	str	r3, [r4, #20]
}
   ba67e:	bd70      	pop	{r4, r5, r6, pc}

000ba680 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba680:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba682:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba684:	f7ff fda4 	bl	ba1d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba688:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba68c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba68e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba690:	f7ff fc50 	bl	b9f34 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba694:	4620      	mov	r0, r4
   ba696:	f7ff ffc5 	bl	ba624 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba69a:	a801      	add	r0, sp, #4
   ba69c:	f7ff fe89 	bl	ba3b2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba6a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba6a2:	b108      	cbz	r0, ba6a8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba6a4:	f7fe fad4 	bl	b8c50 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba6a8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba6ac:	2618      	movs	r6, #24
   ba6ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba6b2:	42ae      	cmp	r6, r5
   ba6b4:	d004      	beq.n	ba6c0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba6b6:	4628      	mov	r0, r5
   ba6b8:	f000 ff24 	bl	bb504 <_ZN6StringD1Ev>
   ba6bc:	3518      	adds	r5, #24
   ba6be:	e7f8      	b.n	ba6b2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba6c0:	6920      	ldr	r0, [r4, #16]
   ba6c2:	f7fe fe33 	bl	b932c <free>
   ba6c6:	6820      	ldr	r0, [r4, #0]
   ba6c8:	f7fe fe30 	bl	b932c <free>
}
   ba6cc:	4620      	mov	r0, r4
   ba6ce:	b002      	add	sp, #8
   ba6d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba6d4 <__tcf_2>:
    static LogManager mgr;
   ba6d4:	4801      	ldr	r0, [pc, #4]	; (ba6dc <__tcf_2+0x8>)
   ba6d6:	f7ff bfd3 	b.w	ba680 <_ZN5spark10LogManagerD1Ev>
   ba6da:	bf00      	nop
   ba6dc:	2003e658 	.word	0x2003e658

000ba6e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba6e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba6e4:	4604      	mov	r4, r0
   ba6e6:	460d      	mov	r5, r1
   ba6e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba6ea:	d915      	bls.n	ba718 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba6ec:	4290      	cmp	r0, r2
   ba6ee:	d214      	bcs.n	ba71a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba6f0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba6f4:	1a75      	subs	r5, r6, r1
   ba6f6:	f1a1 0714 	sub.w	r7, r1, #20
   ba6fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba6fc:	42b7      	cmp	r7, r6
   ba6fe:	d01a      	beq.n	ba736 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba700:	b11c      	cbz	r4, ba70a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba702:	4631      	mov	r1, r6
   ba704:	4620      	mov	r0, r4
   ba706:	f7ff fc78 	bl	b9ffa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba70a:	f106 0008 	add.w	r0, r6, #8
   ba70e:	f7ff fdf9 	bl	ba304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba712:	3e14      	subs	r6, #20
   ba714:	3c14      	subs	r4, #20
   ba716:	e7f1      	b.n	ba6fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba718:	d00d      	beq.n	ba736 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba71a:	42b5      	cmp	r5, r6
   ba71c:	d00b      	beq.n	ba736 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba71e:	b11c      	cbz	r4, ba728 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba720:	4629      	mov	r1, r5
   ba722:	4620      	mov	r0, r4
   ba724:	f7ff fc69 	bl	b9ffa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba728:	f105 0008 	add.w	r0, r5, #8
   ba72c:	f7ff fdea 	bl	ba304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba730:	3514      	adds	r5, #20
   ba732:	3414      	adds	r4, #20
   ba734:	e7f1      	b.n	ba71a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba738 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba738:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba73c:	4604      	mov	r4, r0
   ba73e:	460d      	mov	r5, r1
   ba740:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba742:	d914      	bls.n	ba76e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba744:	4290      	cmp	r0, r2
   ba746:	d213      	bcs.n	ba770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba748:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba74c:	1a75      	subs	r5, r6, r1
   ba74e:	f1a1 0710 	sub.w	r7, r1, #16
   ba752:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba754:	42b7      	cmp	r7, r6
   ba756:	d018      	beq.n	ba78a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba758:	b11c      	cbz	r4, ba762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba75a:	4631      	mov	r1, r6
   ba75c:	4620      	mov	r0, r4
   ba75e:	f000 ff4d 	bl	bb5fc <_ZN6StringC1EOS_>
                end->~T();
   ba762:	4630      	mov	r0, r6
   ba764:	f000 fece 	bl	bb504 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba768:	3e10      	subs	r6, #16
   ba76a:	3c10      	subs	r4, #16
   ba76c:	e7f2      	b.n	ba754 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ba76e:	d00c      	beq.n	ba78a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ba770:	42b5      	cmp	r5, r6
   ba772:	d00a      	beq.n	ba78a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ba774:	b11c      	cbz	r4, ba77e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ba776:	4629      	mov	r1, r5
   ba778:	4620      	mov	r0, r4
   ba77a:	f000 ff3f 	bl	bb5fc <_ZN6StringC1EOS_>
                p->~T();
   ba77e:	4628      	mov	r0, r5
   ba780:	f000 fec0 	bl	bb504 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba784:	3510      	adds	r5, #16
   ba786:	3410      	adds	r4, #16
   ba788:	e7f2      	b.n	ba770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ba78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba78c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ba78c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba78e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba790:	4605      	mov	r5, r0
        if (n > 0) {
   ba792:	dd11      	ble.n	ba7b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba794:	0130      	lsls	r0, r6, #4
   ba796:	f7fe fdc1 	bl	b931c <malloc>
            if (!d) {
   ba79a:	4604      	mov	r4, r0
   ba79c:	b158      	cbz	r0, ba7b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba79e:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba7a2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ba7a6:	f7ff ffc7 	bl	ba738 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ba7aa:	6828      	ldr	r0, [r5, #0]
   ba7ac:	f7fe fdbe 	bl	b932c <free>
        data_ = d;
   ba7b0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba7b2:	60ae      	str	r6, [r5, #8]
        return true;
   ba7b4:	2001      	movs	r0, #1
    }
   ba7b6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba7b8:	2400      	movs	r4, #0
   ba7ba:	e7f6      	b.n	ba7aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ba7bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba7c0:	4690      	mov	r8, r2
   ba7c2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba7c4:	2300      	movs	r3, #0
   ba7c6:	9103      	str	r1, [sp, #12]
    return size_;
   ba7c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba7cc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba7ce:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba7d0:	4299      	cmp	r1, r3
        capacity_(0) {
   ba7d2:	e9c0 3300 	strd	r3, r3, [r0]
   ba7d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba7de:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba7e2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba7e4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba7e6:	dc23      	bgt.n	ba830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba7e8:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba7ec:	2314      	movs	r3, #20
   ba7ee:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba7f2:	42af      	cmp	r7, r5
   ba7f4:	d03b      	beq.n	ba86e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba7f6:	4629      	mov	r1, r5
   ba7f8:	a80b      	add	r0, sp, #44	; 0x2c
   ba7fa:	f000 feff 	bl	bb5fc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba7fe:	a90b      	add	r1, sp, #44	; 0x2c
   ba800:	a80f      	add	r0, sp, #60	; 0x3c
   ba802:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba804:	f000 fefa 	bl	bb5fc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba808:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba80c:	4299      	cmp	r1, r3
   ba80e:	da1b      	bge.n	ba848 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba810:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba812:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba814:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba818:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba81c:	4631      	mov	r1, r6
   ba81e:	f106 0010 	add.w	r0, r6, #16
   ba822:	f7ff ff89 	bl	ba738 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba826:	b9ee      	cbnz	r6, ba864 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba828:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba82a:	3301      	adds	r3, #1
   ba82c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba82e:	e011      	b.n	ba854 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba830:	a808      	add	r0, sp, #32
   ba832:	f7ff ffab 	bl	ba78c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba836:	2800      	cmp	r0, #0
   ba838:	d1d6      	bne.n	ba7e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba83a:	a808      	add	r0, sp, #32
   ba83c:	f7fe fe01 	bl	b9442 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba840:	4620      	mov	r0, r4
   ba842:	b015      	add	sp, #84	; 0x54
   ba844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba848:	3101      	adds	r1, #1
   ba84a:	a808      	add	r0, sp, #32
   ba84c:	f7ff ff9e 	bl	ba78c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba850:	2800      	cmp	r0, #0
   ba852:	d1dd      	bne.n	ba810 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba854:	a80f      	add	r0, sp, #60	; 0x3c
   ba856:	f000 fe55 	bl	bb504 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba85a:	a80b      	add	r0, sp, #44	; 0x2c
   ba85c:	f000 fe52 	bl	bb504 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba860:	3514      	adds	r5, #20
   ba862:	e7c6      	b.n	ba7f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba864:	a90f      	add	r1, sp, #60	; 0x3c
   ba866:	4630      	mov	r0, r6
   ba868:	f000 fec8 	bl	bb5fc <_ZN6StringC1EOS_>
   ba86c:	e7dc      	b.n	ba828 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba86e:	2600      	movs	r6, #0
   ba870:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba874:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba876:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba87a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba87e:	429e      	cmp	r6, r3
   ba880:	da7c      	bge.n	ba97c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba882:	0133      	lsls	r3, r6, #4
   ba884:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba886:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba888:	b90b      	cbnz	r3, ba88e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba88a:	3601      	adds	r6, #1
   ba88c:	e7f5      	b.n	ba87a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba88e:	2300      	movs	r3, #0
   ba890:	9307      	str	r3, [sp, #28]
   ba892:	fb09 f306 	mul.w	r3, r9, r6
   ba896:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba898:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba89a:	a907      	add	r1, sp, #28
   ba89c:	a806      	add	r0, sp, #24
   ba89e:	f7ff fb22 	bl	b9ee6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba8a2:	4682      	mov	sl, r0
   ba8a4:	2800      	cmp	r0, #0
   ba8a6:	d0f0      	beq.n	ba88a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba8a8:	f04f 0300 	mov.w	r3, #0
   ba8ac:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba8b0:	4601      	mov	r1, r0
   ba8b2:	9a07      	ldr	r2, [sp, #28]
   ba8b4:	f10d 0317 	add.w	r3, sp, #23
   ba8b8:	4628      	mov	r0, r5
   ba8ba:	f7ff fbb1 	bl	ba020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba8be:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba8c2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba8c4:	2f00      	cmp	r7, #0
   ba8c6:	d14a      	bne.n	ba95e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba8c8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba8cc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba8d0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba8d8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba8dc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba8e0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba8e2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba8e6:	4293      	cmp	r3, r2
   ba8e8:	db17      	blt.n	ba91a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba8ea:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba8ee:	f1ba 0f00 	cmp.w	sl, #0
   ba8f2:	dd30      	ble.n	ba956 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba8f4:	fb09 f00a 	mul.w	r0, r9, sl
   ba8f8:	f7fe fd10 	bl	b931c <malloc>
            if (!d) {
   ba8fc:	4683      	mov	fp, r0
   ba8fe:	b360      	cbz	r0, ba95a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba900:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba904:	fb09 1202 	mla	r2, r9, r2, r1
   ba908:	f7ff feea 	bl	ba6e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba90c:	6828      	ldr	r0, [r5, #0]
   ba90e:	f7fe fd0d 	bl	b932c <free>
        data_ = d;
   ba912:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba916:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba91a:	682b      	ldr	r3, [r5, #0]
   ba91c:	9a01      	ldr	r2, [sp, #4]
   ba91e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba922:	686a      	ldr	r2, [r5, #4]
   ba924:	4651      	mov	r1, sl
   ba926:	fb09 3202 	mla	r2, r9, r2, r3
   ba92a:	f10a 0014 	add.w	r0, sl, #20
   ba92e:	f7ff fed7 	bl	ba6e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba932:	f1ba 0f00 	cmp.w	sl, #0
   ba936:	d003      	beq.n	ba940 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba938:	a90f      	add	r1, sp, #60	; 0x3c
   ba93a:	4650      	mov	r0, sl
   ba93c:	f7ff fb5d 	bl	b9ffa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba940:	686b      	ldr	r3, [r5, #4]
   ba942:	3301      	adds	r3, #1
   ba944:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba946:	a811      	add	r0, sp, #68	; 0x44
   ba948:	f7ff fcdc 	bl	ba304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba94c:	b13f      	cbz	r7, ba95e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba94e:	a80b      	add	r0, sp, #44	; 0x2c
   ba950:	f7ff fcd8 	bl	ba304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba954:	e771      	b.n	ba83a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba956:	46bb      	mov	fp, r7
   ba958:	e7d8      	b.n	ba90c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba95a:	2701      	movs	r7, #1
   ba95c:	e7f3      	b.n	ba946 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba95e:	9b01      	ldr	r3, [sp, #4]
   ba960:	682d      	ldr	r5, [r5, #0]
   ba962:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba966:	9b06      	ldr	r3, [sp, #24]
   ba968:	781b      	ldrb	r3, [r3, #0]
   ba96a:	b92b      	cbnz	r3, ba978 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba96c:	f8d8 3000 	ldr.w	r3, [r8]
   ba970:	9a02      	ldr	r2, [sp, #8]
   ba972:	4413      	add	r3, r2
   ba974:	7c1b      	ldrb	r3, [r3, #16]
   ba976:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba978:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba97a:	e78e      	b.n	ba89a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba97c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba97e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba980:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba982:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba984:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba986:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba98a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba98c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba98e:	60a2      	str	r2, [r4, #8]
   ba990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba992:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba994:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba996:	60e2      	str	r2, [r4, #12]
   ba998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba99a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba99c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba99e:	6122      	str	r2, [r4, #16]
   ba9a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba9a2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba9a4:	9b03      	ldr	r3, [sp, #12]
   ba9a6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba9a8:	6162      	str	r2, [r4, #20]
   ba9aa:	7623      	strb	r3, [r4, #24]
   ba9ac:	e7cf      	b.n	ba94e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba9b0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba9b2:	4604      	mov	r4, r0
   ba9b4:	b087      	sub	sp, #28
   ba9b6:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba9b8:	4626      	mov	r6, r4
        stream_(&stream) {
   ba9ba:	4619      	mov	r1, r3
   ba9bc:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba9be:	4617      	mov	r7, r2
        stream_(&stream) {
   ba9c0:	f7fa f9b3 	bl	b4d2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba9c4:	4b0b      	ldr	r3, [pc, #44]	; (ba9f4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba9c6:	f846 3b04 	str.w	r3, [r6], #4
   ba9ca:	4669      	mov	r1, sp
   ba9cc:	a803      	add	r0, sp, #12
   ba9ce:	f7fa f9ac 	bl	b4d2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba9d2:	aa03      	add	r2, sp, #12
   ba9d4:	4639      	mov	r1, r7
   ba9d6:	4630      	mov	r0, r6
   ba9d8:	f7ff fef0 	bl	ba7bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba9dc:	a803      	add	r0, sp, #12
   ba9de:	f7fa f963 	bl	b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba9e2:	4668      	mov	r0, sp
   ba9e4:	f7fa f960 	bl	b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba9e8:	4b03      	ldr	r3, [pc, #12]	; (ba9f8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba9ea:	6023      	str	r3, [r4, #0]
}
   ba9ec:	4620      	mov	r0, r4
        stream_(&stream) {
   ba9ee:	6225      	str	r5, [r4, #32]
}
   ba9f0:	b007      	add	sp, #28
   ba9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba9f4:	000be68c 	.word	0x000be68c
   ba9f8:	000bf544 	.word	0x000bf544

000ba9fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba9fe:	460f      	mov	r7, r1
   baa00:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   baa02:	491d      	ldr	r1, [pc, #116]	; (baa78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   baa04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   baa06:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   baa08:	4616      	mov	r6, r2
   baa0a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   baa0c:	f003 fa33 	bl	bde76 <strcmp>
   baa10:	b9c0      	cbnz	r0, baa44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   baa12:	b1a4      	cbz	r4, baa3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   baa14:	4629      	mov	r1, r5
   baa16:	a801      	add	r0, sp, #4
   baa18:	f7ff fcbc 	bl	ba394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   baa1c:	4917      	ldr	r1, [pc, #92]	; (baa7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   baa1e:	2024      	movs	r0, #36	; 0x24
   baa20:	f001 fb92 	bl	bc148 <_ZnwjRKSt9nothrow_t>
   baa24:	4605      	mov	r5, r0
   baa26:	b130      	cbz	r0, baa36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   baa28:	ab01      	add	r3, sp, #4
   baa2a:	4632      	mov	r2, r6
   baa2c:	4621      	mov	r1, r4
   baa2e:	f7ff ffbf 	bl	ba9b0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   baa32:	4b13      	ldr	r3, [pc, #76]	; (baa80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   baa34:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   baa36:	a801      	add	r0, sp, #4
   baa38:	f7fa f936 	bl	b4ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   baa3c:	462c      	mov	r4, r5
}
   baa3e:	4620      	mov	r0, r4
   baa40:	b005      	add	sp, #20
   baa42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   baa44:	490f      	ldr	r1, [pc, #60]	; (baa84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   baa46:	4638      	mov	r0, r7
   baa48:	f003 fa15 	bl	bde76 <strcmp>
   baa4c:	b990      	cbnz	r0, baa74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   baa4e:	2c00      	cmp	r4, #0
   baa50:	d0f5      	beq.n	baa3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   baa52:	4629      	mov	r1, r5
   baa54:	a801      	add	r0, sp, #4
   baa56:	f7ff fc9d 	bl	ba394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   baa5a:	4908      	ldr	r1, [pc, #32]	; (baa7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   baa5c:	2024      	movs	r0, #36	; 0x24
   baa5e:	f001 fb73 	bl	bc148 <_ZnwjRKSt9nothrow_t>
   baa62:	4605      	mov	r5, r0
   baa64:	2800      	cmp	r0, #0
   baa66:	d0e6      	beq.n	baa36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   baa68:	ab01      	add	r3, sp, #4
   baa6a:	4632      	mov	r2, r6
   baa6c:	4621      	mov	r1, r4
   baa6e:	f7ff ff9f 	bl	ba9b0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   baa72:	e7e0      	b.n	baa36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   baa74:	2400      	movs	r4, #0
   baa76:	e7e2      	b.n	baa3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   baa78:	000bf4d2 	.word	0x000bf4d2
   baa7c:	000bf6a4 	.word	0x000bf6a4
   baa80:	000bf55c 	.word	0x000bf55c
   baa84:	000bf4d6 	.word	0x000bf4d6

000baa88 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   baa88:	4b01      	ldr	r3, [pc, #4]	; (baa90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   baa8a:	4a02      	ldr	r2, [pc, #8]	; (baa94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   baa8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   baa8e:	4770      	bx	lr
   baa90:	2003e654 	.word	0x2003e654
   baa94:	000bf4e7 	.word	0x000bf4e7

000baa98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   baa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baa9c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   baa9e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   baaa2:	4604      	mov	r4, r0
   baaa4:	460e      	mov	r6, r1
   baaa6:	4617      	mov	r7, r2
   baaa8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   baaaa:	f001 f923 	bl	bbcf4 <_Z16_fetch_usbserialv>
   baaae:	4581      	cmp	r9, r0
   baab0:	d04c      	beq.n	bab4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   baab2:	792b      	ldrb	r3, [r5, #4]
   baab4:	0719      	lsls	r1, r3, #28
   baab6:	d504      	bpl.n	baac2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   baab8:	696a      	ldr	r2, [r5, #20]
   baaba:	4954      	ldr	r1, [pc, #336]	; (bac0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   baabc:	4620      	mov	r0, r4
   baabe:	f7ff fa8d 	bl	b9fdc <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   baac2:	f1b8 0f00 	cmp.w	r8, #0
   baac6:	d00d      	beq.n	baae4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   baac8:	215b      	movs	r1, #91	; 0x5b
   baaca:	4620      	mov	r0, r4
   baacc:	f7ff fa7a 	bl	b9fc4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   baad0:	4641      	mov	r1, r8
   baad2:	4620      	mov	r0, r4
   baad4:	f7ff fa67 	bl	b9fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   baad8:	6823      	ldr	r3, [r4, #0]
   baada:	494d      	ldr	r1, [pc, #308]	; (bac10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   baadc:	68db      	ldr	r3, [r3, #12]
   baade:	2202      	movs	r2, #2
   baae0:	4620      	mov	r0, r4
   baae2:	4798      	blx	r3
    if (attr.has_file) {
   baae4:	792b      	ldrb	r3, [r5, #4]
   baae6:	07da      	lsls	r2, r3, #31
   baae8:	d523      	bpl.n	bab32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   baaea:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   baaee:	212f      	movs	r1, #47	; 0x2f
   baaf0:	4640      	mov	r0, r8
   baaf2:	f003 fa01 	bl	bdef8 <strrchr>
    if (s1) {
   baaf6:	b108      	cbz	r0, baafc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   baaf8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   baafc:	4641      	mov	r1, r8
   baafe:	4620      	mov	r0, r4
   bab00:	f7ff fa51 	bl	b9fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bab04:	792b      	ldrb	r3, [r5, #4]
   bab06:	079b      	lsls	r3, r3, #30
   bab08:	d508      	bpl.n	bab1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bab0a:	213a      	movs	r1, #58	; 0x3a
   bab0c:	4620      	mov	r0, r4
   bab0e:	f7ff fa59 	bl	b9fc4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bab12:	68ea      	ldr	r2, [r5, #12]
   bab14:	493f      	ldr	r1, [pc, #252]	; (bac14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bab16:	4620      	mov	r0, r4
   bab18:	f7ff fa60 	bl	b9fdc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bab1c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bab1e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bab20:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bab24:	68db      	ldr	r3, [r3, #12]
   bab26:	bf14      	ite	ne
   bab28:	493b      	ldrne	r1, [pc, #236]	; (bac18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bab2a:	493c      	ldreq	r1, [pc, #240]	; (bac1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bab2c:	2202      	movs	r2, #2
            write(": ", 2);
   bab2e:	4620      	mov	r0, r4
   bab30:	4798      	blx	r3
    if (attr.has_function) {
   bab32:	792b      	ldrb	r3, [r5, #4]
   bab34:	0758      	lsls	r0, r3, #29
   bab36:	d51d      	bpl.n	bab74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bab38:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bab3a:	460b      	mov	r3, r1
   bab3c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bab3e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bab42:	b160      	cbz	r0, bab5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bab44:	2820      	cmp	r0, #32
   bab46:	d108      	bne.n	bab5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bab48:	4619      	mov	r1, r3
   bab4a:	e7f7      	b.n	bab3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bab4c:	4834      	ldr	r0, [pc, #208]	; (bac20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bab4e:	f000 f966 	bl	bae1e <_ZN5spark12NetworkClass9listeningEv>
   bab52:	2800      	cmp	r0, #0
   bab54:	d0ad      	beq.n	baab2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bab56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bab5a:	2828      	cmp	r0, #40	; 0x28
   bab5c:	d1ee      	bne.n	bab3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bab5e:	6823      	ldr	r3, [r4, #0]
   bab60:	1a52      	subs	r2, r2, r1
   bab62:	68db      	ldr	r3, [r3, #12]
   bab64:	4620      	mov	r0, r4
   bab66:	4798      	blx	r3
        write("(): ", 4);
   bab68:	6823      	ldr	r3, [r4, #0]
   bab6a:	492e      	ldr	r1, [pc, #184]	; (bac24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bab6c:	68db      	ldr	r3, [r3, #12]
   bab6e:	2204      	movs	r2, #4
   bab70:	4620      	mov	r0, r4
   bab72:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bab74:	2100      	movs	r1, #0
   bab76:	4638      	mov	r0, r7
   bab78:	f7fe fa9a 	bl	b90b0 <log_level_name>
   bab7c:	4601      	mov	r1, r0
    write(s);
   bab7e:	4620      	mov	r0, r4
   bab80:	f7ff fa11 	bl	b9fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bab84:	6823      	ldr	r3, [r4, #0]
   bab86:	4925      	ldr	r1, [pc, #148]	; (bac1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bab88:	68db      	ldr	r3, [r3, #12]
   bab8a:	2202      	movs	r2, #2
   bab8c:	4620      	mov	r0, r4
   bab8e:	4798      	blx	r3
    if (msg) {
   bab90:	b11e      	cbz	r6, bab9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bab92:	4631      	mov	r1, r6
   bab94:	4620      	mov	r0, r4
   bab96:	f7ff fa06 	bl	b9fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bab9a:	792b      	ldrb	r3, [r5, #4]
   bab9c:	f013 0f30 	tst.w	r3, #48	; 0x30
   baba0:	d02c      	beq.n	babfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   baba2:	6823      	ldr	r3, [r4, #0]
   baba4:	4920      	ldr	r1, [pc, #128]	; (bac28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   baba6:	68db      	ldr	r3, [r3, #12]
   baba8:	2202      	movs	r2, #2
   babaa:	4620      	mov	r0, r4
   babac:	4798      	blx	r3
        if (attr.has_code) {
   babae:	792b      	ldrb	r3, [r5, #4]
   babb0:	06d9      	lsls	r1, r3, #27
   babb2:	d50a      	bpl.n	babca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   babb4:	6823      	ldr	r3, [r4, #0]
   babb6:	491d      	ldr	r1, [pc, #116]	; (bac2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   babb8:	68db      	ldr	r3, [r3, #12]
   babba:	2207      	movs	r2, #7
   babbc:	4620      	mov	r0, r4
   babbe:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   babc0:	69aa      	ldr	r2, [r5, #24]
   babc2:	491b      	ldr	r1, [pc, #108]	; (bac30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   babc4:	4620      	mov	r0, r4
   babc6:	f7ff fa09 	bl	b9fdc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   babca:	792b      	ldrb	r3, [r5, #4]
   babcc:	069a      	lsls	r2, r3, #26
   babce:	d511      	bpl.n	babf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   babd0:	06db      	lsls	r3, r3, #27
   babd2:	d505      	bpl.n	babe0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   babd4:	6823      	ldr	r3, [r4, #0]
   babd6:	4910      	ldr	r1, [pc, #64]	; (bac18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   babd8:	68db      	ldr	r3, [r3, #12]
   babda:	2202      	movs	r2, #2
   babdc:	4620      	mov	r0, r4
   babde:	4798      	blx	r3
            write("details = ", 10);
   babe0:	6823      	ldr	r3, [r4, #0]
   babe2:	4914      	ldr	r1, [pc, #80]	; (bac34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   babe4:	68db      	ldr	r3, [r3, #12]
   babe6:	4620      	mov	r0, r4
   babe8:	220a      	movs	r2, #10
   babea:	4798      	blx	r3
            write(attr.details);
   babec:	69e9      	ldr	r1, [r5, #28]
   babee:	4620      	mov	r0, r4
   babf0:	f7ff f9d9 	bl	b9fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   babf4:	215d      	movs	r1, #93	; 0x5d
   babf6:	4620      	mov	r0, r4
   babf8:	f7ff f9e4 	bl	b9fc4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   babfc:	6823      	ldr	r3, [r4, #0]
   babfe:	490e      	ldr	r1, [pc, #56]	; (bac38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bac00:	68db      	ldr	r3, [r3, #12]
   bac02:	4620      	mov	r0, r4
   bac04:	2202      	movs	r2, #2
}
   bac06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bac0a:	4718      	bx	r3
   bac0c:	000bf4eb 	.word	0x000bf4eb
   bac10:	000bf4f2 	.word	0x000bf4f2
   bac14:	000be3a4 	.word	0x000be3a4
   bac18:	000bf4f5 	.word	0x000bf4f5
   bac1c:	000bf4fa 	.word	0x000bf4fa
   bac20:	2003e680 	.word	0x2003e680
   bac24:	000bf4f8 	.word	0x000bf4f8
   bac28:	000bf4fd 	.word	0x000bf4fd
   bac2c:	000bf500 	.word	0x000bf500
   bac30:	000bedba 	.word	0x000bedba
   bac34:	000bf508 	.word	0x000bf508
   bac38:	000bf513 	.word	0x000bf513

000bac3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bac3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bac40:	b085      	sub	sp, #20
    return stream_;
   bac42:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bac46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bac48:	4605      	mov	r5, r0
   bac4a:	460f      	mov	r7, r1
   bac4c:	4690      	mov	r8, r2
   bac4e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bac50:	f001 f850 	bl	bbcf4 <_Z16_fetch_usbserialv>
   bac54:	4581      	cmp	r9, r0
   bac56:	d105      	bne.n	bac64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bac58:	4849      	ldr	r0, [pc, #292]	; (bad80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bac5a:	f000 f8e0 	bl	bae1e <_ZN5spark12NetworkClass9listeningEv>
   bac5e:	2800      	cmp	r0, #0
   bac60:	f040 808a 	bne.w	bad78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bac64:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bac66:	4a47      	ldr	r2, [pc, #284]	; (bad84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bac68:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bac6a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bac6e:	a801      	add	r0, sp, #4
        strm_(stream) {
   bac70:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bac72:	f88d 9008 	strb.w	r9, [sp, #8]
   bac76:	f7ff f850 	bl	b9d1a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bac7a:	4649      	mov	r1, r9
   bac7c:	4640      	mov	r0, r8
   bac7e:	f7fe fa17 	bl	b90b0 <log_level_name>
    json.name("l", 1).value(s);
   bac82:	4941      	ldr	r1, [pc, #260]	; (bad88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bac84:	4680      	mov	r8, r0
   bac86:	2201      	movs	r2, #1
   bac88:	a801      	add	r0, sp, #4
   bac8a:	f7ff f8d5 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bac8e:	4641      	mov	r1, r8
   bac90:	f7ff f97b 	bl	b9f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bac94:	b13f      	cbz	r7, baca6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bac96:	493d      	ldr	r1, [pc, #244]	; (bad8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bac98:	2201      	movs	r2, #1
   bac9a:	a801      	add	r0, sp, #4
   bac9c:	f7ff f8cc 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   baca0:	4639      	mov	r1, r7
   baca2:	f7ff f972 	bl	b9f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   baca6:	b13e      	cbz	r6, bacb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   baca8:	4939      	ldr	r1, [pc, #228]	; (bad90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bacaa:	2201      	movs	r2, #1
   bacac:	a801      	add	r0, sp, #4
   bacae:	f7ff f8c3 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bacb2:	4631      	mov	r1, r6
   bacb4:	f7ff f969 	bl	b9f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bacb8:	7923      	ldrb	r3, [r4, #4]
   bacba:	07df      	lsls	r7, r3, #31
   bacbc:	d50e      	bpl.n	bacdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bacbe:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bacc0:	212f      	movs	r1, #47	; 0x2f
   bacc2:	4630      	mov	r0, r6
   bacc4:	f003 f918 	bl	bdef8 <strrchr>
    if (s1) {
   bacc8:	b100      	cbz	r0, baccc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bacca:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   baccc:	4931      	ldr	r1, [pc, #196]	; (bad94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bacce:	2201      	movs	r2, #1
   bacd0:	a801      	add	r0, sp, #4
   bacd2:	f7ff f8b1 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bacd6:	4631      	mov	r1, r6
   bacd8:	f7ff f957 	bl	b9f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bacdc:	7923      	ldrb	r3, [r4, #4]
   bacde:	079e      	lsls	r6, r3, #30
   bace0:	d507      	bpl.n	bacf2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bace2:	492d      	ldr	r1, [pc, #180]	; (bad98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bace4:	2202      	movs	r2, #2
   bace6:	a801      	add	r0, sp, #4
   bace8:	f7ff f8a6 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bacec:	68e1      	ldr	r1, [r4, #12]
   bacee:	f7ff f821 	bl	b9d34 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bacf2:	7923      	ldrb	r3, [r4, #4]
   bacf4:	0758      	lsls	r0, r3, #29
   bacf6:	d514      	bpl.n	bad22 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bacf8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bacfa:	4633      	mov	r3, r6
   bacfc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bacfe:	f813 2b01 	ldrb.w	r2, [r3], #1
   bad02:	b12a      	cbz	r2, bad10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bad04:	2a20      	cmp	r2, #32
   bad06:	d101      	bne.n	bad0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bad08:	461e      	mov	r6, r3
   bad0a:	e7f7      	b.n	bacfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bad0c:	2a28      	cmp	r2, #40	; 0x28
   bad0e:	d1f5      	bne.n	bacfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bad10:	4922      	ldr	r1, [pc, #136]	; (bad9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bad12:	2202      	movs	r2, #2
   bad14:	a801      	add	r0, sp, #4
   bad16:	f7ff f88f 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bad1a:	1bba      	subs	r2, r7, r6
   bad1c:	4631      	mov	r1, r6
   bad1e:	f7ff f89b 	bl	b9e58 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bad22:	7923      	ldrb	r3, [r4, #4]
   bad24:	0719      	lsls	r1, r3, #28
   bad26:	d507      	bpl.n	bad38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bad28:	491d      	ldr	r1, [pc, #116]	; (bada0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bad2a:	2201      	movs	r2, #1
   bad2c:	a801      	add	r0, sp, #4
   bad2e:	f7ff f883 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bad32:	6961      	ldr	r1, [r4, #20]
   bad34:	f7ff f810 	bl	b9d58 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bad38:	7923      	ldrb	r3, [r4, #4]
   bad3a:	06da      	lsls	r2, r3, #27
   bad3c:	d508      	bpl.n	bad50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bad3e:	2204      	movs	r2, #4
   bad40:	4918      	ldr	r1, [pc, #96]	; (bada4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bad42:	eb0d 0002 	add.w	r0, sp, r2
   bad46:	f7ff f877 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bad4a:	69a1      	ldr	r1, [r4, #24]
   bad4c:	f7fe fff2 	bl	b9d34 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bad50:	7923      	ldrb	r3, [r4, #4]
   bad52:	069b      	lsls	r3, r3, #26
   bad54:	d507      	bpl.n	bad66 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bad56:	4914      	ldr	r1, [pc, #80]	; (bada8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bad58:	2206      	movs	r2, #6
   bad5a:	a801      	add	r0, sp, #4
   bad5c:	f7ff f86c 	bl	b9e38 <_ZN5spark10JSONWriter4nameEPKcj>
   bad60:	69e1      	ldr	r1, [r4, #28]
   bad62:	f7ff f912 	bl	b9f8a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bad66:	a801      	add	r0, sp, #4
   bad68:	f7fe ffc1 	bl	b9cee <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bad6c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bad6e:	490f      	ldr	r1, [pc, #60]	; (badac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bad70:	6803      	ldr	r3, [r0, #0]
   bad72:	2202      	movs	r2, #2
   bad74:	68db      	ldr	r3, [r3, #12]
   bad76:	4798      	blx	r3
}
   bad78:	b005      	add	sp, #20
   bad7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bad7e:	bf00      	nop
   bad80:	2003e680 	.word	0x2003e680
   bad84:	000bf52c 	.word	0x000bf52c
   bad88:	000bf4c8 	.word	0x000bf4c8
   bad8c:	000be53b 	.word	0x000be53b
   bad90:	000bf7e0 	.word	0x000bf7e0
   bad94:	000be97a 	.word	0x000be97a
   bad98:	000bf516 	.word	0x000bf516
   bad9c:	000bf519 	.word	0x000bf519
   bada0:	000be620 	.word	0x000be620
   bada4:	000beaee 	.word	0x000beaee
   bada8:	000bf51c 	.word	0x000bf51c
   badac:	000bf513 	.word	0x000bf513

000badb0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   badb0:	2300      	movs	r3, #0
   badb2:	6840      	ldr	r0, [r0, #4]
   badb4:	461a      	mov	r2, r3
   badb6:	f7fe ba51 	b.w	b925c <network_connect>

000badba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   badba:	6840      	ldr	r0, [r0, #4]
   badbc:	2200      	movs	r2, #0
   badbe:	2102      	movs	r1, #2
   badc0:	f7fe ba5c 	b.w	b927c <network_disconnect>

000badc4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   badc4:	2200      	movs	r2, #0
   badc6:	6840      	ldr	r0, [r0, #4]
   badc8:	4611      	mov	r1, r2
   badca:	f7fe ba4f 	b.w	b926c <network_connecting>

000badce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   badce:	2200      	movs	r2, #0
   badd0:	6840      	ldr	r0, [r0, #4]
   badd2:	4611      	mov	r1, r2
   badd4:	f7fe ba5a 	b.w	b928c <network_ready>

000badd8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   badd8:	2300      	movs	r3, #0
   badda:	6840      	ldr	r0, [r0, #4]
   baddc:	461a      	mov	r2, r3
   badde:	4619      	mov	r1, r3
   bade0:	f7fe ba5c 	b.w	b929c <network_on>

000bade4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bade4:	2300      	movs	r3, #0
   bade6:	6840      	ldr	r0, [r0, #4]
   bade8:	461a      	mov	r2, r3
   badea:	4619      	mov	r1, r3
   badec:	f7fe ba5e 	b.w	b92ac <network_off>

000badf0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   badf0:	6840      	ldr	r0, [r0, #4]
   badf2:	2100      	movs	r1, #0
   badf4:	f7fe ba82 	b.w	b92fc <network_is_on>

000badf8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   badf8:	6840      	ldr	r0, [r0, #4]
   badfa:	2100      	movs	r1, #0
   badfc:	f7fe ba86 	b.w	b930c <network_is_off>

000bae00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bae00:	6840      	ldr	r0, [r0, #4]
   bae02:	2200      	movs	r2, #0
   bae04:	f081 0101 	eor.w	r1, r1, #1
   bae08:	f7fe ba58 	b.w	b92bc <network_listen>

000bae0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bae0c:	6840      	ldr	r0, [r0, #4]
   bae0e:	2200      	movs	r2, #0
   bae10:	f7fe ba64 	b.w	b92dc <network_set_listen_timeout>

000bae14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bae14:	2200      	movs	r2, #0
   bae16:	6840      	ldr	r0, [r0, #4]
   bae18:	4611      	mov	r1, r2
   bae1a:	f7fe ba67 	b.w	b92ec <network_get_listen_timeout>

000bae1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bae1e:	2200      	movs	r2, #0
   bae20:	6840      	ldr	r0, [r0, #4]
   bae22:	4611      	mov	r1, r2
   bae24:	f7fe ba52 	b.w	b92cc <network_listening>

000bae28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bae28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bae2c:	b095      	sub	sp, #84	; 0x54
   bae2e:	4614      	mov	r4, r2
   bae30:	460d      	mov	r5, r1
   bae32:	4607      	mov	r7, r0
    IPAddress addr;
   bae34:	f7fe fe0a 	bl	b9a4c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bae38:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bae3a:	221c      	movs	r2, #28
   bae3c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bae3e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bae40:	f002 ff8e 	bl	bdd60 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bae44:	2340      	movs	r3, #64	; 0x40
   bae46:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bae48:	4620      	mov	r0, r4
   bae4a:	466b      	mov	r3, sp
   bae4c:	aa0c      	add	r2, sp, #48	; 0x30
   bae4e:	2100      	movs	r1, #0
   bae50:	f7fe f81e 	bl	b8e90 <netdb_getaddrinfo>
    if (!r) {
   bae54:	4604      	mov	r4, r0
   bae56:	2800      	cmp	r0, #0
   bae58:	d14b      	bne.n	baef2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bae5a:	4602      	mov	r2, r0
   bae5c:	2101      	movs	r1, #1
   bae5e:	6868      	ldr	r0, [r5, #4]
   bae60:	f7fe fa14 	bl	b928c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bae64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bae66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bae68:	4622      	mov	r2, r4
   bae6a:	6868      	ldr	r0, [r5, #4]
   bae6c:	f7fe fa0e 	bl	b928c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bae70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bae72:	4681      	mov	r9, r0
        bool ok = false;
   bae74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bae76:	2e00      	cmp	r6, #0
   bae78:	d03b      	beq.n	baef2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bae7a:	2900      	cmp	r1, #0
   bae7c:	d139      	bne.n	baef2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bae7e:	6873      	ldr	r3, [r6, #4]
   bae80:	2b02      	cmp	r3, #2
   bae82:	d003      	beq.n	bae8c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bae84:	2b0a      	cmp	r3, #10
   bae86:	d011      	beq.n	baeac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bae88:	69f6      	ldr	r6, [r6, #28]
   bae8a:	e7f4      	b.n	bae76 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bae8c:	f1b8 0f00 	cmp.w	r8, #0
   bae90:	d0fa      	beq.n	bae88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bae92:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bae94:	a806      	add	r0, sp, #24
   bae96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bae98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bae9a:	f7fe fe05 	bl	b9aa8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bae9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baea0:	1d3c      	adds	r4, r7, #4
   baea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baea4:	682b      	ldr	r3, [r5, #0]
   baea6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   baea8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   baeaa:	e7ed      	b.n	bae88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   baeac:	f1b9 0f00 	cmp.w	r9, #0
   baeb0:	d0ea      	beq.n	bae88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   baeb2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   baeb4:	2210      	movs	r2, #16
   baeb6:	a801      	add	r0, sp, #4
   baeb8:	f002 ff52 	bl	bdd60 <memset>
                    a.v = 6;
   baebc:	2306      	movs	r3, #6
   baebe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   baec2:	ad01      	add	r5, sp, #4
   baec4:	f104 0308 	add.w	r3, r4, #8
   baec8:	3418      	adds	r4, #24
   baeca:	6818      	ldr	r0, [r3, #0]
   baecc:	6859      	ldr	r1, [r3, #4]
   baece:	462a      	mov	r2, r5
   baed0:	c203      	stmia	r2!, {r0, r1}
   baed2:	3308      	adds	r3, #8
   baed4:	42a3      	cmp	r3, r4
   baed6:	4615      	mov	r5, r2
   baed8:	d1f7      	bne.n	baeca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   baeda:	a901      	add	r1, sp, #4
   baedc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   baede:	ad07      	add	r5, sp, #28
   baee0:	f7fe fdc2 	bl	b9a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   baee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baee6:	1d3c      	adds	r4, r7, #4
   baee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baeea:	682b      	ldr	r3, [r5, #0]
   baeec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   baeee:	4649      	mov	r1, r9
   baef0:	e7ca      	b.n	bae88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   baef2:	9800      	ldr	r0, [sp, #0]
   baef4:	f7fd ffc4 	bl	b8e80 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   baef8:	4638      	mov	r0, r7
   baefa:	b015      	add	sp, #84	; 0x54
   baefc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000baf00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   baf00:	4b02      	ldr	r3, [pc, #8]	; (baf0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   baf02:	4a03      	ldr	r2, [pc, #12]	; (baf10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   baf04:	601a      	str	r2, [r3, #0]
   baf06:	2200      	movs	r2, #0
   baf08:	605a      	str	r2, [r3, #4]

} // spark
   baf0a:	4770      	bx	lr
   baf0c:	2003e680 	.word	0x2003e680
   baf10:	000bf5a4 	.word	0x000bf5a4

000baf14 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   baf14:	b508      	push	{r3, lr}
            return &Wire1;
   baf16:	f001 f8b3 	bl	bc080 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   baf1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   baf1e:	f7fe bd1d 	b.w	b995c <_ZN7TwoWire4lockEv>

000baf22 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   baf22:	b510      	push	{r4, lr}
   baf24:	4604      	mov	r4, r0
    lock_(_lock)
   baf26:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   baf28:	b109      	cbz	r1, baf2e <_ZN4PMICC1Eb+0xc>
        lock();
   baf2a:	f7ff fff3 	bl	baf14 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   baf2e:	4620      	mov	r0, r4
   baf30:	bd10      	pop	{r4, pc}

000baf32 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   baf32:	b508      	push	{r3, lr}
            return &Wire1;
   baf34:	f001 f8a4 	bl	bc080 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   baf38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   baf3c:	f7fe bd17 	b.w	b996e <_ZN7TwoWire6unlockEv>

000baf40 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   baf40:	b510      	push	{r4, lr}
    if (lock_) {
   baf42:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   baf44:	4604      	mov	r4, r0
    if (lock_) {
   baf46:	b10b      	cbz	r3, baf4c <_ZN4PMICD1Ev+0xc>
        unlock();
   baf48:	f7ff fff3 	bl	baf32 <_ZN4PMIC6unlockEv>
}
   baf4c:	4620      	mov	r0, r4
   baf4e:	bd10      	pop	{r4, pc}

000baf50 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   baf50:	b510      	push	{r4, lr}
   baf52:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   baf54:	6800      	ldr	r0, [r0, #0]
   baf56:	f7ff ffec 	bl	baf32 <_ZN4PMIC6unlockEv>
   baf5a:	4620      	mov	r0, r4
   baf5c:	bd10      	pop	{r4, pc}

000baf5e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   baf5e:	b530      	push	{r4, r5, lr}
   baf60:	b087      	sub	sp, #28
   baf62:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   baf64:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   baf66:	f7ff ffd5 	bl	baf14 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   baf6a:	226b      	movs	r2, #107	; 0x6b
   baf6c:	2300      	movs	r3, #0
   baf6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   baf72:	2401      	movs	r4, #1
   baf74:	230a      	movs	r3, #10
   baf76:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   baf7a:	f001 f881 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   baf7e:	a902      	add	r1, sp, #8
   baf80:	f7fe fcd0 	bl	b9924 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   baf84:	f001 f87c 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   baf88:	6803      	ldr	r3, [r0, #0]
   baf8a:	4629      	mov	r1, r5
   baf8c:	689b      	ldr	r3, [r3, #8]
   baf8e:	4798      	blx	r3
            return &Wire1;
   baf90:	f001 f876 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   baf94:	4621      	mov	r1, r4
   baf96:	f7fe fcdd 	bl	b9954 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   baf9a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   baf9c:	f001 f870 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bafa0:	a902      	add	r1, sp, #8
   bafa2:	f7fe fc8f 	bl	b98c4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bafa6:	f001 f86b 	bl	bc080 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bafaa:	6803      	ldr	r3, [r0, #0]
   bafac:	695b      	ldr	r3, [r3, #20]
   bafae:	4798      	blx	r3
   bafb0:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bafb2:	a801      	add	r0, sp, #4
   bafb4:	f7ff ffcc 	bl	baf50 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bafb8:	b2e0      	uxtb	r0, r4
   bafba:	b007      	add	sp, #28
   bafbc:	bd30      	pop	{r4, r5, pc}

000bafbe <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bafbe:	b570      	push	{r4, r5, r6, lr}
   bafc0:	b086      	sub	sp, #24
   bafc2:	460d      	mov	r5, r1
   bafc4:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bafc6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bafc8:	f7ff ffa4 	bl	baf14 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bafcc:	226b      	movs	r2, #107	; 0x6b
   bafce:	2300      	movs	r3, #0
   bafd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bafd4:	2601      	movs	r6, #1
   bafd6:	230a      	movs	r3, #10
   bafd8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bafdc:	f001 f850 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bafe0:	a902      	add	r1, sp, #8
   bafe2:	f7fe fc9f 	bl	b9924 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bafe6:	f001 f84b 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bafea:	6803      	ldr	r3, [r0, #0]
   bafec:	4629      	mov	r1, r5
   bafee:	689b      	ldr	r3, [r3, #8]
   baff0:	4798      	blx	r3
            return &Wire1;
   baff2:	f001 f845 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   baff6:	6803      	ldr	r3, [r0, #0]
   baff8:	4621      	mov	r1, r4
   baffa:	689b      	ldr	r3, [r3, #8]
   baffc:	4798      	blx	r3
            return &Wire1;
   baffe:	f001 f83f 	bl	bc080 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bb002:	4631      	mov	r1, r6
   bb004:	f7fe fca6 	bl	b9954 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bb008:	a801      	add	r0, sp, #4
   bb00a:	f7ff ffa1 	bl	baf50 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bb00e:	b006      	add	sp, #24
   bb010:	bd70      	pop	{r4, r5, r6, pc}

000bb012 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bb012:	b513      	push	{r0, r1, r4, lr}
   bb014:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb016:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bb018:	f7ff ff7c 	bl	baf14 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bb01c:	2101      	movs	r1, #1
   bb01e:	4620      	mov	r0, r4
   bb020:	f7ff ff9d 	bl	baf5e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bb024:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bb028:	2b10      	cmp	r3, #16
   bb02a:	d007      	beq.n	bb03c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bb02c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bb030:	f042 0210 	orr.w	r2, r2, #16
   bb034:	2101      	movs	r1, #1
   bb036:	4620      	mov	r0, r4
   bb038:	f7ff ffc1 	bl	bafbe <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bb03c:	a801      	add	r0, sp, #4
   bb03e:	f7ff ff87 	bl	baf50 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bb042:	2001      	movs	r0, #1
   bb044:	b002      	add	sp, #8
   bb046:	bd10      	pop	{r4, pc}

000bb048 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bb048:	b513      	push	{r0, r1, r4, lr}
   bb04a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bb04c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bb04e:	f7ff ff61 	bl	baf14 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bb052:	2101      	movs	r1, #1
   bb054:	4620      	mov	r0, r4
   bb056:	f7ff ff82 	bl	baf5e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bb05a:	f010 0f30 	tst.w	r0, #48	; 0x30
   bb05e:	d005      	beq.n	bb06c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bb060:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bb064:	2101      	movs	r1, #1
   bb066:	4620      	mov	r0, r4
   bb068:	f7ff ffa9 	bl	bafbe <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bb06c:	a801      	add	r0, sp, #4
   bb06e:	f7ff ff6f 	bl	baf50 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bb072:	2001      	movs	r0, #1
   bb074:	b002      	add	sp, #8
   bb076:	bd10      	pop	{r4, pc}

000bb078 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bb078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb07a:	4606      	mov	r6, r0
   bb07c:	460d      	mov	r5, r1
  size_t n = 0;
   bb07e:	188f      	adds	r7, r1, r2
   bb080:	2400      	movs	r4, #0
  while (size--) {
   bb082:	42bd      	cmp	r5, r7
   bb084:	d00c      	beq.n	bb0a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bb086:	6833      	ldr	r3, [r6, #0]
   bb088:	f815 1b01 	ldrb.w	r1, [r5], #1
   bb08c:	689b      	ldr	r3, [r3, #8]
   bb08e:	4630      	mov	r0, r6
   bb090:	4798      	blx	r3
     if (chunk>=0)
   bb092:	1e03      	subs	r3, r0, #0
   bb094:	db01      	blt.n	bb09a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bb096:	441c      	add	r4, r3
  while (size--) {
   bb098:	e7f3      	b.n	bb082 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bb09a:	2c00      	cmp	r4, #0
   bb09c:	bf08      	it	eq
   bb09e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bb0a0:	4620      	mov	r0, r4
   bb0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb0a4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bb0a4:	b513      	push	{r0, r1, r4, lr}
   bb0a6:	4604      	mov	r4, r0
    }
   bb0a8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bb0aa:	b159      	cbz	r1, bb0c4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bb0ac:	9101      	str	r1, [sp, #4]
   bb0ae:	f002 fef4 	bl	bde9a <strlen>
   bb0b2:	6823      	ldr	r3, [r4, #0]
   bb0b4:	9901      	ldr	r1, [sp, #4]
   bb0b6:	68db      	ldr	r3, [r3, #12]
   bb0b8:	4602      	mov	r2, r0
   bb0ba:	4620      	mov	r0, r4
    }
   bb0bc:	b002      	add	sp, #8
   bb0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bb0c2:	4718      	bx	r3
    }
   bb0c4:	b002      	add	sp, #8
   bb0c6:	bd10      	pop	{r4, pc}

000bb0c8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bb0c8:	b508      	push	{r3, lr}
  return write(str);
   bb0ca:	f7ff ffeb 	bl	bb0a4 <_ZN5Print5writeEPKc>
}
   bb0ce:	bd08      	pop	{r3, pc}

000bb0d0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bb0d0:	6803      	ldr	r3, [r0, #0]
   bb0d2:	689b      	ldr	r3, [r3, #8]
   bb0d4:	4718      	bx	r3

000bb0d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bb0d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bb0d8:	210d      	movs	r1, #13
{
   bb0da:	4605      	mov	r5, r0
  size_t n = print('\r');
   bb0dc:	f7ff fff8 	bl	bb0d0 <_ZN5Print5printEc>
  n += print('\n');
   bb0e0:	210a      	movs	r1, #10
  size_t n = print('\r');
   bb0e2:	4604      	mov	r4, r0
  n += print('\n');
   bb0e4:	4628      	mov	r0, r5
   bb0e6:	f7ff fff3 	bl	bb0d0 <_ZN5Print5printEc>
  return n;
}
   bb0ea:	4420      	add	r0, r4
   bb0ec:	bd38      	pop	{r3, r4, r5, pc}

000bb0ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bb0ee:	b530      	push	{r4, r5, lr}
   bb0f0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bb0f2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bb0f4:	2a01      	cmp	r2, #1
  *str = '\0';
   bb0f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bb0fa:	bf98      	it	ls
   bb0fc:	220a      	movls	r2, #10
   bb0fe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bb100:	460d      	mov	r5, r1
   bb102:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bb106:	fb01 5312 	mls	r3, r1, r2, r5
   bb10a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb10e:	2b09      	cmp	r3, #9
   bb110:	bf94      	ite	ls
   bb112:	3330      	addls	r3, #48	; 0x30
   bb114:	3337      	addhi	r3, #55	; 0x37
   bb116:	b2db      	uxtb	r3, r3
  } while(n);
   bb118:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb11a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bb11e:	d9ef      	bls.n	bb100 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bb120:	4621      	mov	r1, r4
   bb122:	f7ff ffbf 	bl	bb0a4 <_ZN5Print5writeEPKc>
}
   bb126:	b00b      	add	sp, #44	; 0x2c
   bb128:	bd30      	pop	{r4, r5, pc}
	...

000bb12c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bb12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb130:	ec55 4b10 	vmov	r4, r5, d0
   bb134:	4606      	mov	r6, r0
   bb136:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bb138:	ee10 2a10 	vmov	r2, s0
   bb13c:	ee10 0a10 	vmov	r0, s0
   bb140:	462b      	mov	r3, r5
   bb142:	4629      	mov	r1, r5
   bb144:	f002 fce4 	bl	bdb10 <__aeabi_dcmpun>
   bb148:	b140      	cbz	r0, bb15c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bb14a:	4953      	ldr	r1, [pc, #332]	; (bb298 <_ZN5Print10printFloatEdh+0x16c>)
   bb14c:	4630      	mov	r0, r6
   bb14e:	f7ff ffa9 	bl	bb0a4 <_ZN5Print5writeEPKc>
   bb152:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bb154:	4650      	mov	r0, sl
   bb156:	b003      	add	sp, #12
   bb158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bb15c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bb160:	4b4e      	ldr	r3, [pc, #312]	; (bb29c <_ZN5Print10printFloatEdh+0x170>)
   bb162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb166:	4620      	mov	r0, r4
   bb168:	4649      	mov	r1, r9
   bb16a:	f002 fcd1 	bl	bdb10 <__aeabi_dcmpun>
   bb16e:	b948      	cbnz	r0, bb184 <_ZN5Print10printFloatEdh+0x58>
   bb170:	4b4a      	ldr	r3, [pc, #296]	; (bb29c <_ZN5Print10printFloatEdh+0x170>)
   bb172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb176:	4620      	mov	r0, r4
   bb178:	4649      	mov	r1, r9
   bb17a:	f002 fcab 	bl	bdad4 <__aeabi_dcmple>
   bb17e:	b908      	cbnz	r0, bb184 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bb180:	4947      	ldr	r1, [pc, #284]	; (bb2a0 <_ZN5Print10printFloatEdh+0x174>)
   bb182:	e7e3      	b.n	bb14c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bb184:	4b47      	ldr	r3, [pc, #284]	; (bb2a4 <_ZN5Print10printFloatEdh+0x178>)
   bb186:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bb18a:	4620      	mov	r0, r4
   bb18c:	4629      	mov	r1, r5
   bb18e:	f002 fcb5 	bl	bdafc <__aeabi_dcmpgt>
   bb192:	b108      	cbz	r0, bb198 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bb194:	4944      	ldr	r1, [pc, #272]	; (bb2a8 <_ZN5Print10printFloatEdh+0x17c>)
   bb196:	e7d9      	b.n	bb14c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bb198:	4b44      	ldr	r3, [pc, #272]	; (bb2ac <_ZN5Print10printFloatEdh+0x180>)
   bb19a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bb19e:	4620      	mov	r0, r4
   bb1a0:	4629      	mov	r1, r5
   bb1a2:	f002 fc8d 	bl	bdac0 <__aeabi_dcmplt>
   bb1a6:	2800      	cmp	r0, #0
   bb1a8:	d1f4      	bne.n	bb194 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bb1aa:	2200      	movs	r2, #0
   bb1ac:	2300      	movs	r3, #0
   bb1ae:	4620      	mov	r0, r4
   bb1b0:	4629      	mov	r1, r5
   bb1b2:	f002 fc85 	bl	bdac0 <__aeabi_dcmplt>
   bb1b6:	b1d0      	cbz	r0, bb1ee <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bb1b8:	212d      	movs	r1, #45	; 0x2d
   bb1ba:	4630      	mov	r0, r6
   bb1bc:	f7ff ff88 	bl	bb0d0 <_ZN5Print5printEc>
     number = -number;
   bb1c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bb1c4:	4682      	mov	sl, r0
     number = -number;
   bb1c6:	461d      	mov	r5, r3
  double rounding = 0.5;
   bb1c8:	4939      	ldr	r1, [pc, #228]	; (bb2b0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bb1ca:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bb2b8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bb1ce:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bb1d2:	2000      	movs	r0, #0
    rounding /= 10.0;
   bb1d4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bb1d8:	fa5f f38b 	uxtb.w	r3, fp
   bb1dc:	429f      	cmp	r7, r3
   bb1de:	d908      	bls.n	bb1f2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bb1e0:	4642      	mov	r2, r8
   bb1e2:	464b      	mov	r3, r9
   bb1e4:	f002 fb24 	bl	bd830 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bb1e8:	f10b 0b01 	add.w	fp, fp, #1
   bb1ec:	e7f4      	b.n	bb1d8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bb1ee:	4682      	mov	sl, r0
   bb1f0:	e7ea      	b.n	bb1c8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bb1f2:	4622      	mov	r2, r4
   bb1f4:	462b      	mov	r3, r5
   bb1f6:	f002 f83b 	bl	bd270 <__adddf3>
   bb1fa:	460d      	mov	r5, r1
   bb1fc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bb1fe:	f002 fcc5 	bl	bdb8c <__aeabi_d2uiz>
   bb202:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bb204:	f002 f970 	bl	bd4e8 <__aeabi_ui2d>
   bb208:	4602      	mov	r2, r0
   bb20a:	460b      	mov	r3, r1
   bb20c:	4620      	mov	r0, r4
   bb20e:	4629      	mov	r1, r5
   bb210:	f002 f82c 	bl	bd26c <__aeabi_dsub>
        return printNumber(val, base) + t;
   bb214:	220a      	movs	r2, #10
   bb216:	4604      	mov	r4, r0
   bb218:	460d      	mov	r5, r1
   bb21a:	4630      	mov	r0, r6
   bb21c:	4641      	mov	r1, r8
   bb21e:	f7ff ff66 	bl	bb0ee <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bb222:	4482      	add	sl, r0
  if (digits > 0) {
   bb224:	2f00      	cmp	r7, #0
   bb226:	d095      	beq.n	bb154 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bb228:	4922      	ldr	r1, [pc, #136]	; (bb2b4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bb22a:	f8df 908c 	ldr.w	r9, [pc, #140]	; bb2b8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bb22e:	4630      	mov	r0, r6
   bb230:	f7ff ff38 	bl	bb0a4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bb234:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bb238:	4482      	add	sl, r0
  while (digits-- > 0)
   bb23a:	2f00      	cmp	r7, #0
   bb23c:	d08a      	beq.n	bb154 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bb23e:	4642      	mov	r2, r8
   bb240:	464b      	mov	r3, r9
   bb242:	4620      	mov	r0, r4
   bb244:	4629      	mov	r1, r5
   bb246:	f002 f9c9 	bl	bd5dc <__aeabi_dmul>
   bb24a:	4604      	mov	r4, r0
   bb24c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bb24e:	f002 fc75 	bl	bdb3c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bb252:	f1b0 0b00 	subs.w	fp, r0, #0
   bb256:	da1c      	bge.n	bb292 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bb258:	212d      	movs	r1, #45	; 0x2d
   bb25a:	4630      	mov	r0, r6
   bb25c:	f7ff ff38 	bl	bb0d0 <_ZN5Print5printEc>
            val = -n;
   bb260:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bb264:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bb266:	220a      	movs	r2, #10
   bb268:	4630      	mov	r0, r6
   bb26a:	9301      	str	r3, [sp, #4]
   bb26c:	f7ff ff3f 	bl	bb0ee <_ZN5Print11printNumberEmh>
   bb270:	9b01      	ldr	r3, [sp, #4]
   bb272:	4418      	add	r0, r3
    n += print(toPrint);
   bb274:	4482      	add	sl, r0
    remainder -= toPrint;
   bb276:	4658      	mov	r0, fp
   bb278:	f002 f946 	bl	bd508 <__aeabi_i2d>
   bb27c:	4602      	mov	r2, r0
   bb27e:	460b      	mov	r3, r1
   bb280:	4620      	mov	r0, r4
   bb282:	4629      	mov	r1, r5
   bb284:	f001 fff2 	bl	bd26c <__aeabi_dsub>
   bb288:	3f01      	subs	r7, #1
   bb28a:	4604      	mov	r4, r0
   bb28c:	460d      	mov	r5, r1
   bb28e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bb290:	e7d3      	b.n	bb23a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bb292:	4659      	mov	r1, fp
        size_t t = 0;
   bb294:	2300      	movs	r3, #0
   bb296:	e7e6      	b.n	bb266 <_ZN5Print10printFloatEdh+0x13a>
   bb298:	000bf5d8 	.word	0x000bf5d8
   bb29c:	7fefffff 	.word	0x7fefffff
   bb2a0:	000bf5dc 	.word	0x000bf5dc
   bb2a4:	41efffff 	.word	0x41efffff
   bb2a8:	000bf5e0 	.word	0x000bf5e0
   bb2ac:	c1efffff 	.word	0xc1efffff
   bb2b0:	3fe00000 	.word	0x3fe00000
   bb2b4:	000bf618 	.word	0x000bf618
   bb2b8:	40240000 	.word	0x40240000

000bb2bc <_ZN5Print5printEfi>:
{
   bb2bc:	b538      	push	{r3, r4, r5, lr}
   bb2be:	4604      	mov	r4, r0
   bb2c0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bb2c4:	b2cd      	uxtb	r5, r1
   bb2c6:	f002 f931 	bl	bd52c <__aeabi_f2d>
   bb2ca:	ec41 0b10 	vmov	d0, r0, r1
   bb2ce:	4629      	mov	r1, r5
   bb2d0:	4620      	mov	r0, r4
}
   bb2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bb2d6:	f7ff bf29 	b.w	bb12c <_ZN5Print10printFloatEdh>

000bb2da <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bb2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb2de:	b086      	sub	sp, #24
   bb2e0:	af00      	add	r7, sp, #0
   bb2e2:	4605      	mov	r5, r0
   bb2e4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bb2e6:	1d38      	adds	r0, r7, #4
   bb2e8:	2114      	movs	r1, #20
{
   bb2ea:	4614      	mov	r4, r2
    va_copy(args2, args);
   bb2ec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bb2ee:	f7fe f83d 	bl	b936c <vsnprintf>

    if (n<bufsize)
   bb2f2:	2813      	cmp	r0, #19
   bb2f4:	d80e      	bhi.n	bb314 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bb2f6:	1d39      	adds	r1, r7, #4
   bb2f8:	4628      	mov	r0, r5
   bb2fa:	f7ff fed3 	bl	bb0a4 <_ZN5Print5writeEPKc>
   bb2fe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bb300:	b11e      	cbz	r6, bb30a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bb302:	4628      	mov	r0, r5
   bb304:	f7ff fee7 	bl	bb0d6 <_ZN5Print7printlnEv>
   bb308:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bb30a:	4620      	mov	r0, r4
   bb30c:	3718      	adds	r7, #24
   bb30e:	46bd      	mov	sp, r7
   bb310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bb314:	f100 0308 	add.w	r3, r0, #8
   bb318:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bb31c:	46e8      	mov	r8, sp
        char bigger[n+1];
   bb31e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bb322:	4622      	mov	r2, r4
   bb324:	1c41      	adds	r1, r0, #1
   bb326:	683b      	ldr	r3, [r7, #0]
   bb328:	4668      	mov	r0, sp
   bb32a:	f7fe f81f 	bl	b936c <vsnprintf>
  return write(str);
   bb32e:	4669      	mov	r1, sp
   bb330:	4628      	mov	r0, r5
   bb332:	f7ff feb7 	bl	bb0a4 <_ZN5Print5writeEPKc>
   bb336:	4604      	mov	r4, r0
   bb338:	46c5      	mov	sp, r8
   bb33a:	e7e1      	b.n	bb300 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb33c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bb33c:	b510      	push	{r4, lr}
  if (0 == max) {
   bb33e:	4604      	mov	r4, r0
   bb340:	b128      	cbz	r0, bb34e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bb342:	f002 fd43 	bl	bddcc <rand>
   bb346:	fb90 f3f4 	sdiv	r3, r0, r4
   bb34a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bb34e:	4620      	mov	r0, r4
   bb350:	bd10      	pop	{r4, pc}

000bb352 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bb352:	4288      	cmp	r0, r1
{
   bb354:	b510      	push	{r4, lr}
   bb356:	4604      	mov	r4, r0
  if (min >= max) {
   bb358:	da03      	bge.n	bb362 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bb35a:	1a08      	subs	r0, r1, r0
   bb35c:	f7ff ffee 	bl	bb33c <_Z6randomi>
   bb360:	4404      	add	r4, r0
}
   bb362:	4620      	mov	r0, r4
   bb364:	bd10      	pop	{r4, pc}

000bb366 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bb366:	f002 bd03 	b.w	bdd70 <srand>
	...

000bb36c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bb36c:	4b01      	ldr	r3, [pc, #4]	; (bb374 <_GLOBAL__sub_I_RGB+0x8>)
   bb36e:	2200      	movs	r2, #0
   bb370:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bb372:	4770      	bx	lr
   bb374:	2003e688 	.word	0x2003e688

000bb378 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bb378:	2100      	movs	r1, #0
   bb37a:	f7fd bdd1 	b.w	b8f20 <hal_spi_release>

000bb37e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bb37e:	2100      	movs	r1, #0
   bb380:	f7fd bdc6 	b.w	b8f10 <hal_spi_acquire>

000bb384 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bb384:	b510      	push	{r4, lr}
   bb386:	4604      	mov	r4, r0
   bb388:	4608      	mov	r0, r1
{
    _spi = spi;
   bb38a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bb38c:	f7fd fda0 	bl	b8ed0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bb390:	2300      	movs	r3, #0
   bb392:	6063      	str	r3, [r4, #4]
}
   bb394:	4620      	mov	r0, r4
   bb396:	bd10      	pop	{r4, pc}

000bb398 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bb398:	b513      	push	{r0, r1, r4, lr}
   bb39a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bb39c:	7800      	ldrb	r0, [r0, #0]
   bb39e:	f7ff ffee 	bl	bb37e <_ZN8SPIClass4lockEv.isra.0>
   bb3a2:	b958      	cbnz	r0, bb3bc <_ZN8SPIClass5beginEv+0x24>
   bb3a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bb3a6:	9001      	str	r0, [sp, #4]
   bb3a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb3ac:	f7fd fd78 	bl	b8ea0 <hal_spi_begin>
        unlock();
   bb3b0:	9801      	ldr	r0, [sp, #4]
    }
}
   bb3b2:	b002      	add	sp, #8
   bb3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb3b8:	f7ff bfde 	b.w	bb378 <_ZN8SPIClass6unlockEv.isra.0>
   bb3bc:	b002      	add	sp, #8
   bb3be:	bd10      	pop	{r4, pc}

000bb3c0 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bb3c0:	b513      	push	{r0, r1, r4, lr}
   bb3c2:	4604      	mov	r4, r0
    if (!lock())
   bb3c4:	7800      	ldrb	r0, [r0, #0]
   bb3c6:	f7ff ffda 	bl	bb37e <_ZN8SPIClass4lockEv.isra.0>
   bb3ca:	b948      	cbnz	r0, bb3e0 <_ZN8SPIClass3endEv+0x20>
   bb3cc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bb3ce:	9001      	str	r0, [sp, #4]
   bb3d0:	f7fd fd6e 	bl	b8eb0 <hal_spi_end>
        unlock();
   bb3d4:	9801      	ldr	r0, [sp, #4]
    }
}
   bb3d6:	b002      	add	sp, #8
   bb3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb3dc:	f7ff bfcc 	b.w	bb378 <_ZN8SPIClass6unlockEv.isra.0>
   bb3e0:	b002      	add	sp, #8
   bb3e2:	bd10      	pop	{r4, pc}

000bb3e4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bb3e4:	7800      	ldrb	r0, [r0, #0]
   bb3e6:	f7ff bfc7 	b.w	bb378 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bb3ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bb3ec:	0840      	lsrs	r0, r0, #1
{
   bb3ee:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bb3f0:	6018      	str	r0, [r3, #0]
   bb3f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bb3f4:	6818      	ldr	r0, [r3, #0]
   bb3f6:	4288      	cmp	r0, r1
   bb3f8:	b2e5      	uxtb	r5, r4
   bb3fa:	d906      	bls.n	bb40a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bb3fc:	3401      	adds	r4, #1
   bb3fe:	2c08      	cmp	r4, #8
   bb400:	d002      	beq.n	bb408 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bb402:	0840      	lsrs	r0, r0, #1
   bb404:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bb406:	e7f5      	b.n	bb3f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bb408:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bb40a:	4b02      	ldr	r3, [pc, #8]	; (bb414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bb40c:	5d5b      	ldrb	r3, [r3, r5]
   bb40e:	7013      	strb	r3, [r2, #0]
}
   bb410:	bd30      	pop	{r4, r5, pc}
   bb412:	bf00      	nop
   bb414:	000bf5e4 	.word	0x000bf5e4

000bb418 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bb418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb41c:	4606      	mov	r6, r0
   bb41e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bb420:	7800      	ldrb	r0, [r0, #0]
{
   bb422:	460c      	mov	r4, r1
    CHECK(lock());
   bb424:	f7ff ffab 	bl	bb37e <_ZN8SPIClass4lockEv.isra.0>
   bb428:	2800      	cmp	r0, #0
   bb42a:	db1b      	blt.n	bb464 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bb42c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bb42e:	2214      	movs	r2, #20
   bb430:	2100      	movs	r1, #0
   bb432:	a809      	add	r0, sp, #36	; 0x24
   bb434:	f002 fc94 	bl	bdd60 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bb438:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bb43a:	2200      	movs	r2, #0
   bb43c:	a909      	add	r1, sp, #36	; 0x24
   bb43e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bb440:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bb444:	f7fd fd54 	bl	b8ef0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bb448:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bb44c:	b113      	cbz	r3, bb454 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bb44e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bb452:	b155      	cbz	r5, bb46a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bb454:	2700      	movs	r7, #0
   bb456:	46b9      	mov	r9, r7
   bb458:	46b8      	mov	r8, r7
   bb45a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bb45c:	7923      	ldrb	r3, [r4, #4]
   bb45e:	b15d      	cbz	r5, bb478 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bb460:	b1c3      	cbz	r3, bb494 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bb462:	2000      	movs	r0, #0
}
   bb464:	b00f      	add	sp, #60	; 0x3c
   bb466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bb46a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bb46e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bb472:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bb476:	e7f1      	b.n	bb45c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bb478:	2b00      	cmp	r3, #0
   bb47a:	d135      	bne.n	bb4e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bb47c:	68a3      	ldr	r3, [r4, #8]
   bb47e:	4543      	cmp	r3, r8
   bb480:	d108      	bne.n	bb494 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bb482:	f88d 9020 	strb.w	r9, [sp, #32]
   bb486:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bb48a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bb48e:	89a3      	ldrh	r3, [r4, #12]
   bb490:	429a      	cmp	r2, r3
   bb492:	d0e6      	beq.n	bb462 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bb494:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bb496:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bb498:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bb49c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb49e:	ab04      	add	r3, sp, #16
   bb4a0:	f10d 020f 	add.w	r2, sp, #15
   bb4a4:	f7ff ffa2 	bl	bb3ec <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bb4a8:	7921      	ldrb	r1, [r4, #4]
   bb4aa:	b985      	cbnz	r5, bb4ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bb4ac:	b989      	cbnz	r1, bb4d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb4ae:	68a3      	ldr	r3, [r4, #8]
   bb4b0:	4543      	cmp	r3, r8
   bb4b2:	d30e      	bcc.n	bb4d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bb4b4:	f88d 9020 	strb.w	r9, [sp, #32]
   bb4b8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bb4bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bb4c0:	89a3      	ldrh	r3, [r4, #12]
   bb4c2:	429a      	cmp	r2, r3
   bb4c4:	d105      	bne.n	bb4d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bb4c6:	9b04      	ldr	r3, [sp, #16]
   bb4c8:	4543      	cmp	r3, r8
   bb4ca:	d102      	bne.n	bb4d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb4cc:	e7c9      	b.n	bb462 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bb4ce:	2900      	cmp	r1, #0
   bb4d0:	d1f9      	bne.n	bb4c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bb4d2:	2300      	movs	r3, #0
   bb4d4:	9301      	str	r3, [sp, #4]
   bb4d6:	7b63      	ldrb	r3, [r4, #13]
   bb4d8:	9300      	str	r3, [sp, #0]
   bb4da:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb4de:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bb4e0:	7830      	ldrb	r0, [r6, #0]
   bb4e2:	f7fd fd0d 	bl	b8f00 <hal_spi_set_settings>
   bb4e6:	e7bc      	b.n	bb462 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bb4e8:	e9cd 5500 	strd	r5, r5, [sp]
   bb4ec:	462b      	mov	r3, r5
   bb4ee:	462a      	mov	r2, r5
   bb4f0:	2101      	movs	r1, #1
   bb4f2:	e7f5      	b.n	bb4e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bb4f4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bb4f4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bb4f6:	7800      	ldrb	r0, [r0, #0]
   bb4f8:	f7fd fce2 	bl	b8ec0 <hal_spi_transfer>
}
   bb4fc:	b2c0      	uxtb	r0, r0
   bb4fe:	bd08      	pop	{r3, pc}

000bb500 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bb500:	4770      	bx	lr

000bb502 <_ZN8SPIClass15detachInterruptEv>:
   bb502:	4770      	bx	lr

000bb504 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bb504:	b510      	push	{r4, lr}
   bb506:	4604      	mov	r4, r0
{
	free(buffer);
   bb508:	6800      	ldr	r0, [r0, #0]
   bb50a:	f7fd ff0f 	bl	b932c <free>
}
   bb50e:	4620      	mov	r0, r4
   bb510:	bd10      	pop	{r4, pc}

000bb512 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bb512:	b510      	push	{r4, lr}
   bb514:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bb516:	6800      	ldr	r0, [r0, #0]
   bb518:	b108      	cbz	r0, bb51e <_ZN6String10invalidateEv+0xc>
   bb51a:	f7fd ff07 	bl	b932c <free>
	buffer = NULL;
   bb51e:	2300      	movs	r3, #0
	capacity = len = 0;
   bb520:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bb524:	6023      	str	r3, [r4, #0]
}
   bb526:	bd10      	pop	{r4, pc}

000bb528 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bb528:	b538      	push	{r3, r4, r5, lr}
   bb52a:	4604      	mov	r4, r0
   bb52c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bb52e:	6800      	ldr	r0, [r0, #0]
   bb530:	3101      	adds	r1, #1
   bb532:	f7fd ff03 	bl	b933c <realloc>
	if (newbuffer) {
   bb536:	b110      	cbz	r0, bb53e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bb538:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bb53c:	2001      	movs	r0, #1
	}
	return 0;
}
   bb53e:	bd38      	pop	{r3, r4, r5, pc}

000bb540 <_ZN6String7reserveEj>:
{
   bb540:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bb542:	6803      	ldr	r3, [r0, #0]
{
   bb544:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bb546:	b123      	cbz	r3, bb552 <_ZN6String7reserveEj+0x12>
   bb548:	6843      	ldr	r3, [r0, #4]
   bb54a:	428b      	cmp	r3, r1
   bb54c:	d301      	bcc.n	bb552 <_ZN6String7reserveEj+0x12>
   bb54e:	2001      	movs	r0, #1
}
   bb550:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bb552:	4620      	mov	r0, r4
   bb554:	f7ff ffe8 	bl	bb528 <_ZN6String12changeBufferEj>
   bb558:	2800      	cmp	r0, #0
   bb55a:	d0f9      	beq.n	bb550 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bb55c:	68a3      	ldr	r3, [r4, #8]
   bb55e:	2b00      	cmp	r3, #0
   bb560:	d1f5      	bne.n	bb54e <_ZN6String7reserveEj+0xe>
   bb562:	6822      	ldr	r2, [r4, #0]
   bb564:	7013      	strb	r3, [r2, #0]
   bb566:	e7f2      	b.n	bb54e <_ZN6String7reserveEj+0xe>

000bb568 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bb568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb56a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bb56c:	4611      	mov	r1, r2
   bb56e:	9201      	str	r2, [sp, #4]
{
   bb570:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bb572:	f7ff ffe5 	bl	bb540 <_ZN6String7reserveEj>
   bb576:	9a01      	ldr	r2, [sp, #4]
   bb578:	b928      	cbnz	r0, bb586 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bb57a:	4620      	mov	r0, r4
   bb57c:	f7ff ffc9 	bl	bb512 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bb580:	4620      	mov	r0, r4
   bb582:	b003      	add	sp, #12
   bb584:	bd30      	pop	{r4, r5, pc}
	len = length;
   bb586:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bb588:	4629      	mov	r1, r5
   bb58a:	6820      	ldr	r0, [r4, #0]
   bb58c:	f002 fbc0 	bl	bdd10 <memcpy>
	buffer[len] = 0;
   bb590:	6822      	ldr	r2, [r4, #0]
   bb592:	68a3      	ldr	r3, [r4, #8]
   bb594:	2100      	movs	r1, #0
   bb596:	54d1      	strb	r1, [r2, r3]
	return *this;
   bb598:	e7f2      	b.n	bb580 <_ZN6String4copyEPKcj+0x18>

000bb59a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bb59a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bb59c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bb59e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bb5a2:	4604      	mov	r4, r0
	len = 0;
   bb5a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb5a6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bb5a8:	b141      	cbz	r1, bb5bc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bb5aa:	4608      	mov	r0, r1
   bb5ac:	9101      	str	r1, [sp, #4]
   bb5ae:	f002 fc74 	bl	bde9a <strlen>
   bb5b2:	9901      	ldr	r1, [sp, #4]
   bb5b4:	4602      	mov	r2, r0
   bb5b6:	4620      	mov	r0, r4
   bb5b8:	f7ff ffd6 	bl	bb568 <_ZN6String4copyEPKcj>
}
   bb5bc:	4620      	mov	r0, r4
   bb5be:	b002      	add	sp, #8
   bb5c0:	bd10      	pop	{r4, pc}

000bb5c2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bb5c2:	b538      	push	{r3, r4, r5, lr}
   bb5c4:	4605      	mov	r5, r0
	if (buffer) {
   bb5c6:	6800      	ldr	r0, [r0, #0]
{
   bb5c8:	460c      	mov	r4, r1
	if (buffer) {
   bb5ca:	b168      	cbz	r0, bb5e8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bb5cc:	686a      	ldr	r2, [r5, #4]
   bb5ce:	688b      	ldr	r3, [r1, #8]
   bb5d0:	429a      	cmp	r2, r3
   bb5d2:	d307      	bcc.n	bb5e4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bb5d4:	6809      	ldr	r1, [r1, #0]
   bb5d6:	f002 fc58 	bl	bde8a <strcpy>
			len = rhs.len;
   bb5da:	68a3      	ldr	r3, [r4, #8]
   bb5dc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bb5de:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bb5e0:	60a3      	str	r3, [r4, #8]
}
   bb5e2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bb5e4:	f7fd fea2 	bl	b932c <free>
	buffer = rhs.buffer;
   bb5e8:	6823      	ldr	r3, [r4, #0]
   bb5ea:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bb5ec:	6863      	ldr	r3, [r4, #4]
   bb5ee:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bb5f0:	68a3      	ldr	r3, [r4, #8]
   bb5f2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bb5f4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bb5f6:	e9c4 3300 	strd	r3, r3, [r4]
   bb5fa:	e7f1      	b.n	bb5e0 <_ZN6String4moveERS_+0x1e>

000bb5fc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bb5fc:	b510      	push	{r4, lr}
	buffer = NULL;
   bb5fe:	2300      	movs	r3, #0
	capacity = 0;
   bb600:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bb604:	4604      	mov	r4, r0
	len = 0;
   bb606:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb608:	7303      	strb	r3, [r0, #12]
	move(rval);
   bb60a:	f7ff ffda 	bl	bb5c2 <_ZN6String4moveERS_>
}
   bb60e:	4620      	mov	r0, r4
   bb610:	bd10      	pop	{r4, pc}

000bb612 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bb612:	4288      	cmp	r0, r1
{
   bb614:	b510      	push	{r4, lr}
   bb616:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bb618:	d005      	beq.n	bb626 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bb61a:	680b      	ldr	r3, [r1, #0]
   bb61c:	b12b      	cbz	r3, bb62a <_ZN6StringaSERKS_+0x18>
   bb61e:	688a      	ldr	r2, [r1, #8]
   bb620:	4619      	mov	r1, r3
   bb622:	f7ff ffa1 	bl	bb568 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb626:	4620      	mov	r0, r4
   bb628:	bd10      	pop	{r4, pc}
	else invalidate();
   bb62a:	f7ff ff72 	bl	bb512 <_ZN6String10invalidateEv>
   bb62e:	e7fa      	b.n	bb626 <_ZN6StringaSERKS_+0x14>

000bb630 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bb630:	b510      	push	{r4, lr}
	buffer = NULL;
   bb632:	2300      	movs	r3, #0
String::String(const String &value)
   bb634:	4604      	mov	r4, r0
	capacity = 0;
   bb636:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bb63a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb63c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bb63e:	f7ff ffe8 	bl	bb612 <_ZN6StringaSERKS_>
}
   bb642:	4620      	mov	r0, r4
   bb644:	bd10      	pop	{r4, pc}
	...

000bb648 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   bb648:	6883      	ldr	r3, [r0, #8]
   bb64a:	428b      	cmp	r3, r1
   bb64c:	d901      	bls.n	bb652 <_ZN6StringixEj+0xa>
   bb64e:	6800      	ldr	r0, [r0, #0]
   bb650:	b918      	cbnz	r0, bb65a <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
   bb652:	4803      	ldr	r0, [pc, #12]	; (bb660 <_ZN6StringixEj+0x18>)
   bb654:	2300      	movs	r3, #0
   bb656:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
   bb658:	4770      	bx	lr
	}
	return buffer[index];
   bb65a:	4408      	add	r0, r1
}
   bb65c:	4770      	bx	lr
   bb65e:	bf00      	nop
   bb660:	2003e698 	.word	0x2003e698

000bb664 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bb664:	b558      	push	{r3, r4, r6, lr}
   bb666:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bb668:	b12a      	cbz	r2, bb676 <_ZNK6String8getBytesEPhjj+0x12>
   bb66a:	b121      	cbz	r1, bb676 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bb66c:	6884      	ldr	r4, [r0, #8]
   bb66e:	42a3      	cmp	r3, r4
   bb670:	d302      	bcc.n	bb678 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bb672:	2300      	movs	r3, #0
   bb674:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bb676:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bb678:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bb67a:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bb67c:	6801      	ldr	r1, [r0, #0]
   bb67e:	4294      	cmp	r4, r2
   bb680:	bf28      	it	cs
   bb682:	4614      	movcs	r4, r2
   bb684:	4419      	add	r1, r3
   bb686:	4622      	mov	r2, r4
   bb688:	4630      	mov	r0, r6
   bb68a:	f002 fc22 	bl	bded2 <strncpy>
	buf[n] = 0;
   bb68e:	2300      	movs	r3, #0
   bb690:	5533      	strb	r3, [r6, r4]
   bb692:	e7f0      	b.n	bb676 <_ZNK6String8getBytesEPhjj+0x12>

000bb694 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bb694:	b40e      	push	{r1, r2, r3}
   bb696:	b570      	push	{r4, r5, r6, lr}
   bb698:	b087      	sub	sp, #28
   bb69a:	ad0b      	add	r5, sp, #44	; 0x2c
   bb69c:	4604      	mov	r4, r0
   bb69e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb6a2:	9201      	str	r2, [sp, #4]
   bb6a4:	462b      	mov	r3, r5
   bb6a6:	2105      	movs	r1, #5
   bb6a8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bb6aa:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb6ac:	f7fd fe5e 	bl	b936c <vsnprintf>
    va_end(marker);

    String result;
   bb6b0:	490b      	ldr	r1, [pc, #44]	; (bb6e0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb6b2:	4606      	mov	r6, r0
    String result;
   bb6b4:	4620      	mov	r0, r4
   bb6b6:	f7ff ff70 	bl	bb59a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bb6ba:	4631      	mov	r1, r6
   bb6bc:	4620      	mov	r0, r4
   bb6be:	f7ff ff3f 	bl	bb540 <_ZN6String7reserveEj>
    if (result.buffer) {
   bb6c2:	6820      	ldr	r0, [r4, #0]
   bb6c4:	b130      	cbz	r0, bb6d4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb6c6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bb6c8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb6ca:	462b      	mov	r3, r5
   bb6cc:	1c71      	adds	r1, r6, #1
   bb6ce:	f7fd fe4d 	bl	b936c <vsnprintf>
        va_end(marker);
        result.len = n;
   bb6d2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bb6d4:	4620      	mov	r0, r4
   bb6d6:	b007      	add	sp, #28
   bb6d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb6dc:	b003      	add	sp, #12
   bb6de:	4770      	bx	lr
   bb6e0:	000bf515 	.word	0x000bf515

000bb6e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bb6e4:	b510      	push	{r4, lr}
   bb6e6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bb6e8:	6800      	ldr	r0, [r0, #0]
   bb6ea:	b118      	cbz	r0, bb6f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bb6ec:	f7fd fe1e 	bl	b932c <free>
            wakeupSource_ = nullptr;
   bb6f0:	2300      	movs	r3, #0
   bb6f2:	6023      	str	r3, [r4, #0]
        }
    }
   bb6f4:	bd10      	pop	{r4, pc}

000bb6f6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bb6f6:	b538      	push	{r3, r4, r5, lr}
   bb6f8:	460c      	mov	r4, r1
   bb6fa:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb6fc:	f7ff fff2 	bl	bb6e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bb700:	b154      	cbz	r4, bb718 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bb702:	8820      	ldrh	r0, [r4, #0]
   bb704:	f7fd fe0a 	bl	b931c <malloc>
   bb708:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bb70a:	b128      	cbz	r0, bb718 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bb70c:	8822      	ldrh	r2, [r4, #0]
   bb70e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bb710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bb714:	f002 bafc 	b.w	bdd10 <memcpy>
    }
   bb718:	bd38      	pop	{r3, r4, r5, pc}

000bb71a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb71a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bb71c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bb720:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bb722:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bb726:	f8c0 3006 	str.w	r3, [r0, #6]
   bb72a:	894b      	ldrh	r3, [r1, #10]
   bb72c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb72e:	460c      	mov	r4, r1
   bb730:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb732:	f7ff ffd7 	bl	bb6e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bb736:	6823      	ldr	r3, [r4, #0]
   bb738:	b113      	cbz	r3, bb740 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bb73a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bb73c:	2300      	movs	r3, #0
   bb73e:	6023      	str	r3, [r4, #0]
    }
   bb740:	bd38      	pop	{r3, r4, r5, pc}

000bb742 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bb742:	b507      	push	{r0, r1, r2, lr}
   bb744:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb746:	2100      	movs	r1, #0
{
   bb748:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb74a:	9100      	str	r1, [sp, #0]
   bb74c:	2001      	movs	r0, #1
   bb74e:	218c      	movs	r1, #140	; 0x8c
   bb750:	f7fd fd3a 	bl	b91c8 <system_reset>
}
   bb754:	b003      	add	sp, #12
   bb756:	f85d fb04 	ldr.w	pc, [sp], #4

000bb75a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bb75a:	4601      	mov	r1, r0
    reset(0, flags);
   bb75c:	2000      	movs	r0, #0
   bb75e:	f7ff bff0 	b.w	bb742 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bb762 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bb762:	2000      	movs	r0, #0
   bb764:	f7ff bff9 	b.w	bb75a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bb768 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bb768:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb76a:	4d2b      	ldr	r5, [pc, #172]	; (bb818 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bb76c:	7d0b      	ldrb	r3, [r1, #20]
   bb76e:	4604      	mov	r4, r0
   bb770:	b08b      	sub	sp, #44	; 0x2c
   bb772:	4608      	mov	r0, r1
   bb774:	1daf      	adds	r7, r5, #6
   bb776:	2b00      	cmp	r3, #0
   bb778:	d036      	beq.n	bb7e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bb77a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bb77c:	791b      	ldrb	r3, [r3, #4]
   bb77e:	2b00      	cmp	r3, #0
   bb780:	d032      	beq.n	bb7e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bb782:	4b26      	ldr	r3, [pc, #152]	; (bb81c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bb784:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bb786:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bb788:	a902      	add	r1, sp, #8
   bb78a:	3004      	adds	r0, #4
   bb78c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bb790:	f7fd fd10 	bl	b91b4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bb794:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bb798:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bb79c:	b200      	sxth	r0, r0
   bb79e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bb7a2:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bb7a6:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bb7a8:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bb7aa:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb7ac:	4628      	mov	r0, r5
   bb7ae:	f7ff ffa2 	bl	bb6f6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bb7b2:	a802      	add	r0, sp, #8
   bb7b4:	f7ff ff96 	bl	bb6e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bb7b8:	2300      	movs	r3, #0
   bb7ba:	6023      	str	r3, [r4, #0]
   bb7bc:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bb7be:	71a3      	strb	r3, [r4, #6]
   bb7c0:	8123      	strh	r3, [r4, #8]
   bb7c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bb7c6:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bb7c8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bb7cc:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bb7ce:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bb7d2:	f8c4 3006 	str.w	r3, [r4, #6]
   bb7d6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb7d8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bb7da:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bb7dc:	4620      	mov	r0, r4
   bb7de:	f7ff ff8a 	bl	bb6f6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bb7e2:	4620      	mov	r0, r4
   bb7e4:	b00b      	add	sp, #44	; 0x2c
   bb7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bb7e8:	2600      	movs	r6, #0
   bb7ea:	2320      	movs	r3, #32
   bb7ec:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bb7f0:	4b0b      	ldr	r3, [pc, #44]	; (bb820 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bb7f2:	9300      	str	r3, [sp, #0]
   bb7f4:	aa02      	add	r2, sp, #8
   bb7f6:	4633      	mov	r3, r6
   bb7f8:	490a      	ldr	r1, [pc, #40]	; (bb824 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bb7fa:	2032      	movs	r0, #50	; 0x32
   bb7fc:	f7fd fc38 	bl	b9070 <log_message>
            : wakeupSource_(nullptr),
   bb800:	4b06      	ldr	r3, [pc, #24]	; (bb81c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bb802:	4805      	ldr	r0, [pc, #20]	; (bb818 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bb804:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bb806:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bb80a:	a902      	add	r1, sp, #8
   bb80c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bb810:	f7ff ff83 	bl	bb71a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bb814:	e7cd      	b.n	bb7b2 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bb816:	bf00      	nop
   bb818:	2003e69c 	.word	0x2003e69c
   bb81c:	ffff0000 	.word	0xffff0000
   bb820:	000bf5f3 	.word	0x000bf5f3
   bb824:	000bf5ec 	.word	0x000bf5ec

000bb828 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bb828:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bb82a:	2420      	movs	r4, #32
{
   bb82c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bb82e:	4622      	mov	r2, r4
   bb830:	2100      	movs	r1, #0
   bb832:	4668      	mov	r0, sp
   bb834:	f002 fa94 	bl	bdd60 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bb838:	2100      	movs	r1, #0
   bb83a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bb83c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bb840:	f7fd fa1e 	bl	b8c80 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bb844:	9801      	ldr	r0, [sp, #4]
   bb846:	b008      	add	sp, #32
   bb848:	bd10      	pop	{r4, pc}
	...

000bb84c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb84c:	4b05      	ldr	r3, [pc, #20]	; (bb864 <_GLOBAL__sub_I_System+0x18>)
   bb84e:	2202      	movs	r2, #2
   bb850:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bb852:	4b05      	ldr	r3, [pc, #20]	; (bb868 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb854:	4a05      	ldr	r2, [pc, #20]	; (bb86c <_GLOBAL__sub_I_System+0x20>)
   bb856:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb858:	2000      	movs	r0, #0
   bb85a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb85e:	f7fd bc53 	b.w	b9108 <set_system_mode>
   bb862:	bf00      	nop
   bb864:	2003e6a8 	.word	0x2003e6a8
   bb868:	2003e69c 	.word	0x2003e69c
   bb86c:	ffff0000 	.word	0xffff0000

000bb870 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb874:	4a15      	ldr	r2, [pc, #84]	; (bb8cc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb876:	f8df 8060 	ldr.w	r8, [pc, #96]	; bb8d8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb87a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb87e:	1980      	adds	r0, r0, r6
   bb880:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb884:	4b12      	ldr	r3, [pc, #72]	; (bb8d0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb886:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb88a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb88e:	1986      	adds	r6, r0, r6
   bb890:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb894:	42bb      	cmp	r3, r7
   bb896:	bf08      	it	eq
   bb898:	42b2      	cmpeq	r2, r6
{
   bb89a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb89c:	d013      	beq.n	bb8c6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb89e:	a903      	add	r1, sp, #12
   bb8a0:	4668      	mov	r0, sp
   bb8a2:	e9cd 6700 	strd	r6, r7, [sp]
   bb8a6:	f7fd fd91 	bl	b93cc <localtime_r>
	calendar_time.tm_year += 1900;
   bb8aa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb8ac:	4d09      	ldr	r5, [pc, #36]	; (bb8d4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb8ae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb8b2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb8b4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb8b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb8b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb8ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb8bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb8be:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb8c2:	6823      	ldr	r3, [r4, #0]
   bb8c4:	602b      	str	r3, [r5, #0]
    }
}
   bb8c6:	b00c      	add	sp, #48	; 0x30
   bb8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb8cc:	2003e6e0 	.word	0x2003e6e0
   bb8d0:	2003e6d8 	.word	0x2003e6d8
   bb8d4:	2003e6b4 	.word	0x2003e6b4
   bb8d8:	2003e6e8 	.word	0x2003e6e8

000bb8dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bb8dc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb8de:	2000      	movs	r0, #0
   bb8e0:	f7fd fc9c 	bl	b921c <spark_sync_time_pending>
   bb8e4:	b128      	cbz	r0, bb8f2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb8e6:	f7fd fc89 	bl	b91fc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb8ea:	f080 0001 	eor.w	r0, r0, #1
   bb8ee:	b2c0      	uxtb	r0, r0
    }
   bb8f0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb8f2:	2001      	movs	r0, #1
   bb8f4:	e7fc      	b.n	bb8f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000bb8f6 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bb8f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb8f8:	4602      	mov	r2, r0
   bb8fa:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb8fc:	4668      	mov	r0, sp
    struct timeval tv = {
   bb8fe:	2100      	movs	r1, #0
    };
   bb900:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bb904:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb908:	f7fd f9fa 	bl	b8d00 <hal_rtc_set_time>
   bb90c:	4602      	mov	r2, r0
   bb90e:	b910      	cbnz	r0, bb916 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bb910:	4601      	mov	r1, r0
   bb912:	f7fd fc21 	bl	b9158 <system_notify_time_changed>
    }
}
   bb916:	b005      	add	sp, #20
   bb918:	f85d fb04 	ldr.w	pc, [sp], #4

000bb91c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bb91c:	b530      	push	{r4, r5, lr}
   bb91e:	b093      	sub	sp, #76	; 0x4c
   bb920:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bb924:	4b19      	ldr	r3, [pc, #100]	; (bb98c <_ZN9TimeClass7timeStrEx+0x70>)
{
   bb926:	4604      	mov	r4, r0
    t += time_zone_cache;
   bb928:	e9d3 1000 	ldrd	r1, r0, [r3]
   bb92c:	9b01      	ldr	r3, [sp, #4]
   bb92e:	1852      	adds	r2, r2, r1
   bb930:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bb934:	4816      	ldr	r0, [pc, #88]	; (bb990 <_ZN9TimeClass7timeStrEx+0x74>)
   bb936:	e9d0 1000 	ldrd	r1, r0, [r0]
   bb93a:	1852      	adds	r2, r2, r1
   bb93c:	eb43 0300 	adc.w	r3, r3, r0
   bb940:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bb944:	2224      	movs	r2, #36	; 0x24
   bb946:	eb0d 0002 	add.w	r0, sp, r2
   bb94a:	2100      	movs	r1, #0
   bb94c:	f002 fa08 	bl	bdd60 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bb950:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bb952:	a909      	add	r1, sp, #36	; 0x24
   bb954:	4668      	mov	r0, sp
   bb956:	f7fd fd39 	bl	b93cc <localtime_r>
    char ascstr[26] = {};
   bb95a:	2216      	movs	r2, #22
   bb95c:	4629      	mov	r1, r5
   bb95e:	a803      	add	r0, sp, #12
   bb960:	9502      	str	r5, [sp, #8]
   bb962:	f002 f9fd 	bl	bdd60 <memset>
    asctime_r(&calendar_time, ascstr);
   bb966:	a902      	add	r1, sp, #8
   bb968:	a809      	add	r0, sp, #36	; 0x24
   bb96a:	f002 f97f 	bl	bdc6c <asctime_r>
    int len = strlen(ascstr);
   bb96e:	a802      	add	r0, sp, #8
   bb970:	f002 fa93 	bl	bde9a <strlen>
    ascstr[len-1] = 0; // remove final newline
   bb974:	ab12      	add	r3, sp, #72	; 0x48
   bb976:	4418      	add	r0, r3
    return String(ascstr);
   bb978:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bb97a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bb97e:	4620      	mov	r0, r4
   bb980:	f7ff fe0b 	bl	bb59a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb984:	4620      	mov	r0, r4
   bb986:	b013      	add	sp, #76	; 0x4c
   bb988:	bd30      	pop	{r4, r5, pc}
   bb98a:	bf00      	nop
   bb98c:	2003e6e0 	.word	0x2003e6e0
   bb990:	2003e6d8 	.word	0x2003e6d8

000bb994 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bb994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb998:	b0a4      	sub	sp, #144	; 0x90
   bb99a:	4607      	mov	r7, r0
   bb99c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb99e:	a814      	add	r0, sp, #80	; 0x50
{
   bb9a0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb9a2:	223f      	movs	r2, #63	; 0x3f
{
   bb9a4:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb9a6:	f002 fa94 	bl	bded2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb9aa:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb9ac:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb9ae:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb9b2:	f002 fa72 	bl	bde9a <strlen>
   bb9b6:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bb9b8:	bb4c      	cbnz	r4, bba0e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bb9ba:	4929      	ldr	r1, [pc, #164]	; (bba60 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bb9bc:	a803      	add	r0, sp, #12
   bb9be:	f002 fa64 	bl	bde8a <strcpy>
   bb9c2:	ac14      	add	r4, sp, #80	; 0x50
{
   bb9c4:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bb9c6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bb9ca:	45b1      	cmp	r9, r6
   bb9cc:	d934      	bls.n	bba38 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bb9ce:	7823      	ldrb	r3, [r4, #0]
   bb9d0:	2b25      	cmp	r3, #37	; 0x25
   bb9d2:	f106 0a01 	add.w	sl, r6, #1
   bb9d6:	d117      	bne.n	bba08 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bb9d8:	7863      	ldrb	r3, [r4, #1]
   bb9da:	2b7a      	cmp	r3, #122	; 0x7a
   bb9dc:	d114      	bne.n	bba08 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bb9de:	a803      	add	r0, sp, #12
   bb9e0:	f002 fa5b 	bl	bde9a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb9e4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bb9e6:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb9e8:	1830      	adds	r0, r6, r0
   bb9ea:	4418      	add	r0, r3
   bb9ec:	eba9 0206 	sub.w	r2, r9, r6
   bb9f0:	1ca1      	adds	r1, r4, #2
   bb9f2:	f002 f98d 	bl	bdd10 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb9f6:	462a      	mov	r2, r5
   bb9f8:	a903      	add	r1, sp, #12
   bb9fa:	4620      	mov	r0, r4
   bb9fc:	f002 f988 	bl	bdd10 <memcpy>
            len = strlen(format_str);
   bba00:	a814      	add	r0, sp, #80	; 0x50
   bba02:	f002 fa4a 	bl	bde9a <strlen>
   bba06:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bba08:	3401      	adds	r4, #1
   bba0a:	4656      	mov	r6, sl
   bba0c:	e7db      	b.n	bb9c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bba0e:	233c      	movs	r3, #60	; 0x3c
   bba10:	fb94 f2f3 	sdiv	r2, r4, r3
   bba14:	2a00      	cmp	r2, #0
   bba16:	bfb8      	it	lt
   bba18:	4252      	neglt	r2, r2
   bba1a:	fbb2 f1f3 	udiv	r1, r2, r3
   bba1e:	fb03 2211 	mls	r2, r3, r1, r2
   bba22:	9200      	str	r2, [sp, #0]
   bba24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bba28:	4a0e      	ldr	r2, [pc, #56]	; (bba64 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bba2a:	fb94 f3f3 	sdiv	r3, r4, r3
   bba2e:	2110      	movs	r1, #16
   bba30:	a803      	add	r0, sp, #12
   bba32:	f7fd fc93 	bl	b935c <snprintf>
   bba36:	e7c4      	b.n	bb9c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bba38:	2100      	movs	r1, #0
   bba3a:	222e      	movs	r2, #46	; 0x2e
   bba3c:	a808      	add	r0, sp, #32
   bba3e:	9107      	str	r1, [sp, #28]
   bba40:	f002 f98e 	bl	bdd60 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bba44:	4643      	mov	r3, r8
   bba46:	aa14      	add	r2, sp, #80	; 0x50
   bba48:	2132      	movs	r1, #50	; 0x32
   bba4a:	a807      	add	r0, sp, #28
   bba4c:	f7fd fcb6 	bl	b93bc <strftime>
    return String(buf);
   bba50:	a907      	add	r1, sp, #28
   bba52:	4638      	mov	r0, r7
   bba54:	f7ff fda1 	bl	bb59a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bba58:	4638      	mov	r0, r7
   bba5a:	b024      	add	sp, #144	; 0x90
   bba5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bba60:	000bf61a 	.word	0x000bf61a
   bba64:	000bf61c 	.word	0x000bf61c

000bba68 <_ZN9TimeClass6formatExPKc>:
{
   bba68:	b5f0      	push	{r4, r5, r6, r7, lr}
   bba6a:	b08d      	sub	sp, #52	; 0x34
   bba6c:	e9cd 2300 	strd	r2, r3, [sp]
   bba70:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bba72:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bba74:	b915      	cbnz	r5, bba7c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bba76:	4b19      	ldr	r3, [pc, #100]	; (bbadc <_ZN9TimeClass6formatExPKc+0x74>)
   bba78:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bba7a:	b12d      	cbz	r5, bba88 <_ZN9TimeClass6formatExPKc+0x20>
   bba7c:	4b18      	ldr	r3, [pc, #96]	; (bbae0 <_ZN9TimeClass6formatExPKc+0x78>)
   bba7e:	4628      	mov	r0, r5
   bba80:	6819      	ldr	r1, [r3, #0]
   bba82:	f002 f9f8 	bl	bde76 <strcmp>
   bba86:	b938      	cbnz	r0, bba98 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bba88:	e9dd 2300 	ldrd	r2, r3, [sp]
   bba8c:	4620      	mov	r0, r4
   bba8e:	f7ff ff45 	bl	bb91c <_ZN9TimeClass7timeStrEx>
}
   bba92:	4620      	mov	r0, r4
   bba94:	b00d      	add	sp, #52	; 0x34
   bba96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bba98:	4e12      	ldr	r6, [pc, #72]	; (bbae4 <_ZN9TimeClass6formatExPKc+0x7c>)
   bba9a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bba9c:	4f12      	ldr	r7, [pc, #72]	; (bbae8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bba9e:	e9d6 3200 	ldrd	r3, r2, [r6]
   bbaa2:	185b      	adds	r3, r3, r1
   bbaa4:	9901      	ldr	r1, [sp, #4]
   bbaa6:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bbaaa:	e9d7 0100 	ldrd	r0, r1, [r7]
   bbaae:	181b      	adds	r3, r3, r0
   bbab0:	eb42 0201 	adc.w	r2, r2, r1
   bbab4:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bbab8:	2100      	movs	r1, #0
   bbaba:	2224      	movs	r2, #36	; 0x24
   bbabc:	a803      	add	r0, sp, #12
   bbabe:	f002 f94f 	bl	bdd60 <memset>
    localtime_r(&t, &calendar_time);
   bbac2:	a903      	add	r1, sp, #12
   bbac4:	4668      	mov	r0, sp
   bbac6:	f7fd fc81 	bl	b93cc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bbaca:	6832      	ldr	r2, [r6, #0]
   bbacc:	683b      	ldr	r3, [r7, #0]
   bbace:	a903      	add	r1, sp, #12
   bbad0:	4413      	add	r3, r2
   bbad2:	4620      	mov	r0, r4
   bbad4:	462a      	mov	r2, r5
   bbad6:	f7ff ff5d 	bl	bb994 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bbada:	e7da      	b.n	bba92 <_ZN9TimeClass6formatExPKc+0x2a>
   bbadc:	2003e6b0 	.word	0x2003e6b0
   bbae0:	2003dec8 	.word	0x2003dec8
   bbae4:	2003e6e0 	.word	0x2003e6e0
   bbae8:	2003e6d8 	.word	0x2003e6d8

000bbaec <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bbaec:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bbaee:	2000      	movs	r0, #0
   bbaf0:	f7fd f8ee 	bl	b8cd0 <hal_rtc_time_is_valid>
    if (rtcstate)
   bbaf4:	4604      	mov	r4, r0
   bbaf6:	b9a0      	cbnz	r0, bbb22 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bbaf8:	f7fd fafe 	bl	b90f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bbafc:	2801      	cmp	r0, #1
   bbafe:	d110      	bne.n	bbb22 <_ZN9TimeClass7isValidEv+0x36>
   bbb00:	4620      	mov	r0, r4
   bbb02:	f7fd fb21 	bl	b9148 <system_thread_get_state>
   bbb06:	b960      	cbnz	r0, bbb22 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bbb08:	f7ff fee8 	bl	bb8dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bbb0c:	b910      	cbnz	r0, bbb14 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bbb0e:	f7fd fb65 	bl	b91dc <spark_process>
        while (_while() && !_condition()) {
   bbb12:	e7f9      	b.n	bbb08 <_ZN9TimeClass7isValidEv+0x1c>
   bbb14:	f7ff fee2 	bl	bb8dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bbb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bbb1c:	2000      	movs	r0, #0
   bbb1e:	f7fd b8d7 	b.w	b8cd0 <hal_rtc_time_is_valid>
}
   bbb22:	4620      	mov	r0, r4
   bbb24:	bd10      	pop	{r4, pc}

000bbb26 <_ZN9TimeClass3nowEv>:
{
   bbb26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bbb28:	f7ff ffe0 	bl	bbaec <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bbb2c:	2210      	movs	r2, #16
   bbb2e:	2100      	movs	r1, #0
   bbb30:	4668      	mov	r0, sp
   bbb32:	f002 f915 	bl	bdd60 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bbb36:	2100      	movs	r1, #0
   bbb38:	4668      	mov	r0, sp
   bbb3a:	f7fd f8d9 	bl	b8cf0 <hal_rtc_get_time>
}
   bbb3e:	9800      	ldr	r0, [sp, #0]
   bbb40:	b005      	add	sp, #20
   bbb42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbb48 <_ZN9TimeClass4hourEv>:
{
   bbb48:	b508      	push	{r3, lr}
	return hour(now());
   bbb4a:	f7ff ffec 	bl	bbb26 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbb4e:	17c1      	asrs	r1, r0, #31
   bbb50:	f7ff fe8e 	bl	bb870 <_ZL22Refresh_UnixTime_Cachex>
}
   bbb54:	4b01      	ldr	r3, [pc, #4]	; (bbb5c <_ZN9TimeClass4hourEv+0x14>)
   bbb56:	6898      	ldr	r0, [r3, #8]
   bbb58:	bd08      	pop	{r3, pc}
   bbb5a:	bf00      	nop
   bbb5c:	2003e6b4 	.word	0x2003e6b4

000bbb60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bbb60:	4b02      	ldr	r3, [pc, #8]	; (bbb6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bbb62:	681a      	ldr	r2, [r3, #0]
   bbb64:	4b02      	ldr	r3, [pc, #8]	; (bbb70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bbb66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bbb68:	4770      	bx	lr
   bbb6a:	bf00      	nop
   bbb6c:	2003dec8 	.word	0x2003dec8
   bbb70:	2003e6b0 	.word	0x2003e6b0

000bbb74 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bbb74:	4770      	bx	lr

000bbb76 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bbb76:	7441      	strb	r1, [r0, #17]
}
   bbb78:	4770      	bx	lr

000bbb7a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bbb7a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bbb7c:	7c00      	ldrb	r0, [r0, #16]
   bbb7e:	f7fd fa0f 	bl	b8fa0 <hal_usart_available_data_for_write>
}
   bbb82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbb86:	bd08      	pop	{r3, pc}

000bbb88 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bbb88:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bbb8a:	7c00      	ldrb	r0, [r0, #16]
   bbb8c:	f7fd f9e0 	bl	b8f50 <hal_usart_available>
}
   bbb90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbb94:	bd08      	pop	{r3, pc}

000bbb96 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bbb96:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bbb98:	7c00      	ldrb	r0, [r0, #16]
   bbb9a:	f7fd f9e9 	bl	b8f70 <hal_usart_peek>
}
   bbb9e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbba2:	bd08      	pop	{r3, pc}

000bbba4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bbba4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bbba6:	7c00      	ldrb	r0, [r0, #16]
   bbba8:	f7fd f9da 	bl	b8f60 <hal_usart_read>
}
   bbbac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbbb0:	bd08      	pop	{r3, pc}

000bbbb2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bbbb2:	7c00      	ldrb	r0, [r0, #16]
   bbbb4:	f7fd b9e4 	b.w	b8f80 <hal_usart_flush>

000bbbb8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bbbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bbbba:	7c45      	ldrb	r5, [r0, #17]
{
   bbbbc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bbbbe:	b12d      	cbz	r5, bbbcc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bbbc0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bbbc2:	b003      	add	sp, #12
   bbbc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bbbc8:	f7fd b9ba 	b.w	b8f40 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bbbcc:	7c00      	ldrb	r0, [r0, #16]
   bbbce:	9101      	str	r1, [sp, #4]
   bbbd0:	f7fd f9e6 	bl	b8fa0 <hal_usart_available_data_for_write>
   bbbd4:	2800      	cmp	r0, #0
   bbbd6:	9901      	ldr	r1, [sp, #4]
   bbbd8:	dcf2      	bgt.n	bbbc0 <_ZN11USARTSerial5writeEh+0x8>
}
   bbbda:	4628      	mov	r0, r5
   bbbdc:	b003      	add	sp, #12
   bbbde:	bd30      	pop	{r4, r5, pc}

000bbbe0 <_ZN11USARTSerialD0Ev>:
   bbbe0:	b510      	push	{r4, lr}
   bbbe2:	2114      	movs	r1, #20
   bbbe4:	4604      	mov	r4, r0
   bbbe6:	f7f8 fa5a 	bl	b409e <_ZdlPvj>
   bbbea:	4620      	mov	r0, r4
   bbbec:	bd10      	pop	{r4, pc}
	...

000bbbf0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bbbf0:	b510      	push	{r4, lr}
   bbbf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbbf6:	4604      	mov	r4, r0
   bbbf8:	4608      	mov	r0, r1
   bbbfa:	4611      	mov	r1, r2
   bbbfc:	2200      	movs	r2, #0
   bbbfe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bbc02:	4b04      	ldr	r3, [pc, #16]	; (bbc14 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bbc04:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bbc06:	2301      	movs	r3, #1
  _serial = serial;
   bbc08:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bbc0a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bbc0c:	f7fd f9d8 	bl	b8fc0 <hal_usart_init_ex>
}
   bbc10:	4620      	mov	r0, r4
   bbc12:	bd10      	pop	{r4, pc}
   bbc14:	000bf64c 	.word	0x000bf64c

000bbc18 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bbc18:	7c00      	ldrb	r0, [r0, #16]
   bbc1a:	2300      	movs	r3, #0
   bbc1c:	f7fd b9c8 	b.w	b8fb0 <hal_usart_begin_config>

000bbc20 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bbc20:	2200      	movs	r2, #0
   bbc22:	f7ff bff9 	b.w	bbc18 <_ZN11USARTSerial5beginEmm>

000bbc26 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bbc26:	7c00      	ldrb	r0, [r0, #16]
   bbc28:	f7fd b982 	b.w	b8f30 <hal_usart_end>

000bbc2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bbc2c:	7441      	strb	r1, [r0, #17]
}
   bbc2e:	4770      	bx	lr

000bbc30 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbc30:	4770      	bx	lr

000bbc32 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bbc32:	4770      	bx	lr

000bbc34 <_ZN9USBSerial4readEv>:
{
   bbc34:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bbc36:	2100      	movs	r1, #0
   bbc38:	7c00      	ldrb	r0, [r0, #16]
   bbc3a:	f7fd f9f1 	bl	b9020 <HAL_USB_USART_Receive_Data>
}
   bbc3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbc42:	bd08      	pop	{r3, pc}

000bbc44 <_ZN9USBSerial4peekEv>:
{
   bbc44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bbc46:	2101      	movs	r1, #1
   bbc48:	7c00      	ldrb	r0, [r0, #16]
   bbc4a:	f7fd f9e9 	bl	b9020 <HAL_USB_USART_Receive_Data>
}
   bbc4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbc52:	bd08      	pop	{r3, pc}

000bbc54 <_ZN9USBSerial17availableForWriteEv>:
{
   bbc54:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bbc56:	7c00      	ldrb	r0, [r0, #16]
   bbc58:	f7fd f9da 	bl	b9010 <HAL_USB_USART_Available_Data_For_Write>
}
   bbc5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbc60:	bd08      	pop	{r3, pc}

000bbc62 <_ZN9USBSerial9availableEv>:
{
   bbc62:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bbc64:	7c00      	ldrb	r0, [r0, #16]
   bbc66:	f7fd f9cb 	bl	b9000 <HAL_USB_USART_Available_Data>
}
   bbc6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbc6e:	bd08      	pop	{r3, pc}

000bbc70 <_ZN9USBSerial5writeEh>:
{
   bbc70:	b513      	push	{r0, r1, r4, lr}
   bbc72:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bbc74:	7c00      	ldrb	r0, [r0, #16]
{
   bbc76:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bbc78:	f7fd f9ca 	bl	b9010 <HAL_USB_USART_Available_Data_For_Write>
   bbc7c:	2800      	cmp	r0, #0
   bbc7e:	9901      	ldr	r1, [sp, #4]
   bbc80:	dc01      	bgt.n	bbc86 <_ZN9USBSerial5writeEh+0x16>
   bbc82:	7c60      	ldrb	r0, [r4, #17]
   bbc84:	b120      	cbz	r0, bbc90 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bbc86:	7c20      	ldrb	r0, [r4, #16]
   bbc88:	f7fd f9d2 	bl	b9030 <HAL_USB_USART_Send_Data>
   bbc8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bbc90:	b002      	add	sp, #8
   bbc92:	bd10      	pop	{r4, pc}

000bbc94 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bbc94:	7c00      	ldrb	r0, [r0, #16]
   bbc96:	f7fd b9d3 	b.w	b9040 <HAL_USB_USART_Flush_Data>

000bbc9a <_ZN9USBSerialD0Ev>:
   bbc9a:	b510      	push	{r4, lr}
   bbc9c:	2114      	movs	r1, #20
   bbc9e:	4604      	mov	r4, r0
   bbca0:	f7f8 f9fd 	bl	b409e <_ZdlPvj>
   bbca4:	4620      	mov	r0, r4
   bbca6:	bd10      	pop	{r4, pc}

000bbca8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bbca8:	b510      	push	{r4, lr}
   bbcaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbcae:	4604      	mov	r4, r0
   bbcb0:	4608      	mov	r0, r1
   bbcb2:	2100      	movs	r1, #0
   bbcb4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bbcb8:	4b04      	ldr	r3, [pc, #16]	; (bbccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bbcba:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bbcbc:	2301      	movs	r3, #1
  _serial = serial;
   bbcbe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bbcc0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bbcc2:	4611      	mov	r1, r2
   bbcc4:	f7fd f984 	bl	b8fd0 <HAL_USB_USART_Init>
}
   bbcc8:	4620      	mov	r0, r4
   bbcca:	bd10      	pop	{r4, pc}
   bbccc:	000bf67c 	.word	0x000bf67c

000bbcd0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bbcd0:	7c00      	ldrb	r0, [r0, #16]
   bbcd2:	2200      	movs	r2, #0
   bbcd4:	f7fd b984 	b.w	b8fe0 <HAL_USB_USART_Begin>

000bbcd8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bbcd8:	7c00      	ldrb	r0, [r0, #16]
   bbcda:	f7fd b989 	b.w	b8ff0 <HAL_USB_USART_End>

000bbcde <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bbcde:	7c00      	ldrb	r0, [r0, #16]
   bbce0:	f7fd b9b6 	b.w	b9050 <HAL_USB_USART_Is_Connected>

000bbce4 <_Z19acquireSerialBufferv>:
{
   bbce4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bbce6:	2214      	movs	r2, #20
{
   bbce8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bbcea:	2100      	movs	r1, #0
   bbcec:	f002 f838 	bl	bdd60 <memset>
}
   bbcf0:	4620      	mov	r0, r4
   bbcf2:	bd10      	pop	{r4, pc}

000bbcf4 <_Z16_fetch_usbserialv>:
{
   bbcf4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbcf6:	4c0f      	ldr	r4, [pc, #60]	; (bbd34 <_Z16_fetch_usbserialv+0x40>)
{
   bbcf8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bbcfa:	a803      	add	r0, sp, #12
   bbcfc:	f7ff fff2 	bl	bbce4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbd00:	7821      	ldrb	r1, [r4, #0]
   bbd02:	f3bf 8f5b 	dmb	ish
   bbd06:	f011 0101 	ands.w	r1, r1, #1
   bbd0a:	d10f      	bne.n	bbd2c <_Z16_fetch_usbserialv+0x38>
   bbd0c:	4620      	mov	r0, r4
   bbd0e:	9101      	str	r1, [sp, #4]
   bbd10:	f7f8 f9d4 	bl	b40bc <__cxa_guard_acquire>
   bbd14:	9901      	ldr	r1, [sp, #4]
   bbd16:	b148      	cbz	r0, bbd2c <_Z16_fetch_usbserialv+0x38>
   bbd18:	aa03      	add	r2, sp, #12
   bbd1a:	4807      	ldr	r0, [pc, #28]	; (bbd38 <_Z16_fetch_usbserialv+0x44>)
   bbd1c:	f7ff ffc4 	bl	bbca8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bbd20:	4620      	mov	r0, r4
   bbd22:	f7f8 f9d0 	bl	b40c6 <__cxa_guard_release>
   bbd26:	4805      	ldr	r0, [pc, #20]	; (bbd3c <_Z16_fetch_usbserialv+0x48>)
   bbd28:	f001 ffc6 	bl	bdcb8 <atexit>
	return _usbserial;
}
   bbd2c:	4802      	ldr	r0, [pc, #8]	; (bbd38 <_Z16_fetch_usbserialv+0x44>)
   bbd2e:	b008      	add	sp, #32
   bbd30:	bd10      	pop	{r4, pc}
   bbd32:	bf00      	nop
   bbd34:	2003e6f0 	.word	0x2003e6f0
   bbd38:	2003e6f4 	.word	0x2003e6f4
   bbd3c:	000bbc31 	.word	0x000bbc31

000bbd40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bbd40:	4b01      	ldr	r3, [pc, #4]	; (bbd48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bbd42:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bbd44:	4770      	bx	lr
   bbd46:	bf00      	nop
   bbd48:	2003ded0 	.word	0x2003ded0

000bbd4c <serialEventRun>:
{
   bbd4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bbd4e:	4b0b      	ldr	r3, [pc, #44]	; (bbd7c <serialEventRun+0x30>)
   bbd50:	b143      	cbz	r3, bbd64 <serialEventRun+0x18>
   bbd52:	f7ff ffcf 	bl	bbcf4 <_Z16_fetch_usbserialv>
   bbd56:	6803      	ldr	r3, [r0, #0]
   bbd58:	691b      	ldr	r3, [r3, #16]
   bbd5a:	4798      	blx	r3
   bbd5c:	2800      	cmp	r0, #0
   bbd5e:	dd01      	ble.n	bbd64 <serialEventRun+0x18>
        serialEvent();
   bbd60:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bbd64:	4b06      	ldr	r3, [pc, #24]	; (bbd80 <serialEventRun+0x34>)
   bbd66:	b143      	cbz	r3, bbd7a <serialEventRun+0x2e>
   bbd68:	f000 f9ca 	bl	bc100 <_Z22__fetch_global_Serial1v>
   bbd6c:	6803      	ldr	r3, [r0, #0]
   bbd6e:	691b      	ldr	r3, [r3, #16]
   bbd70:	4798      	blx	r3
   bbd72:	2800      	cmp	r0, #0
   bbd74:	dd01      	ble.n	bbd7a <serialEventRun+0x2e>
        serialEvent1();
   bbd76:	f3af 8000 	nop.w
}
   bbd7a:	bd08      	pop	{r3, pc}
	...

000bbd84 <_post_loop>:
{
   bbd84:	b508      	push	{r3, lr}
	serialEventRun();
   bbd86:	f7ff ffe1 	bl	bbd4c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bbd8a:	f7fc ff99 	bl	b8cc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bbd8e:	4b01      	ldr	r3, [pc, #4]	; (bbd94 <_post_loop+0x10>)
   bbd90:	6018      	str	r0, [r3, #0]
}
   bbd92:	bd08      	pop	{r3, pc}
   bbd94:	2003e710 	.word	0x2003e710

000bbd98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbd98:	4805      	ldr	r0, [pc, #20]	; (bbdb0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bbd9a:	4a06      	ldr	r2, [pc, #24]	; (bbdb4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bbd9c:	4906      	ldr	r1, [pc, #24]	; (bbdb8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bbd9e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbda0:	1a12      	subs	r2, r2, r0
   bbda2:	f001 ffb5 	bl	bdd10 <memcpy>
    __backup_sram_signature = signature;
   bbda6:	4b05      	ldr	r3, [pc, #20]	; (bbdbc <_Z33system_initialize_user_backup_ramv+0x24>)
   bbda8:	4a05      	ldr	r2, [pc, #20]	; (bbdc0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bbdaa:	601a      	str	r2, [r3, #0]
}
   bbdac:	bd08      	pop	{r3, pc}
   bbdae:	bf00      	nop
   bbdb0:	2003f400 	.word	0x2003f400
   bbdb4:	2003f404 	.word	0x2003f404
   bbdb8:	000bf944 	.word	0x000bf944
   bbdbc:	2003f400 	.word	0x2003f400
   bbdc0:	9a271c1e 	.word	0x9a271c1e

000bbdc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bbdc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbdc6:	2300      	movs	r3, #0
   bbdc8:	9300      	str	r3, [sp, #0]
   bbdca:	461a      	mov	r2, r3
   bbdcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbdd0:	f7fd f9dc 	bl	b918c <system_ctrl_set_result>
}
   bbdd4:	b003      	add	sp, #12
   bbdd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbddc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bbddc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bbdde:	8843      	ldrh	r3, [r0, #2]
   bbde0:	2b0a      	cmp	r3, #10
   bbde2:	d008      	beq.n	bbdf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bbde4:	2b50      	cmp	r3, #80	; 0x50
   bbde6:	d10b      	bne.n	bbe00 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bbde8:	4b09      	ldr	r3, [pc, #36]	; (bbe10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bbdea:	681b      	ldr	r3, [r3, #0]
   bbdec:	b14b      	cbz	r3, bbe02 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bbdee:	b003      	add	sp, #12
   bbdf0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bbdf4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bbdf6:	f7ff ffe5 	bl	bbdc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bbdfa:	b003      	add	sp, #12
   bbdfc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbe00:	2300      	movs	r3, #0
   bbe02:	9300      	str	r3, [sp, #0]
   bbe04:	461a      	mov	r2, r3
   bbe06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbe0a:	f7fd f9bf 	bl	b918c <system_ctrl_set_result>
}
   bbe0e:	e7f4      	b.n	bbdfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bbe10:	2003e70c 	.word	0x2003e70c

000bbe14 <module_user_init_hook>:
{
   bbe14:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bbe16:	4812      	ldr	r0, [pc, #72]	; (bbe60 <module_user_init_hook+0x4c>)
   bbe18:	2100      	movs	r1, #0
   bbe1a:	f7fd fac7 	bl	b93ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbe1e:	4b11      	ldr	r3, [pc, #68]	; (bbe64 <module_user_init_hook+0x50>)
   bbe20:	681a      	ldr	r2, [r3, #0]
   bbe22:	4b11      	ldr	r3, [pc, #68]	; (bbe68 <module_user_init_hook+0x54>)
   bbe24:	429a      	cmp	r2, r3
   bbe26:	4b11      	ldr	r3, [pc, #68]	; (bbe6c <module_user_init_hook+0x58>)
   bbe28:	bf0c      	ite	eq
   bbe2a:	2201      	moveq	r2, #1
   bbe2c:	2200      	movne	r2, #0
   bbe2e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbe30:	d001      	beq.n	bbe36 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbe32:	f7ff ffb1 	bl	bbd98 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbe36:	f7fc ff33 	bl	b8ca0 <HAL_RNG_GetRandomNumber>
   bbe3a:	4604      	mov	r4, r0
    srand(seed);
   bbe3c:	f001 ff98 	bl	bdd70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbe40:	4b0b      	ldr	r3, [pc, #44]	; (bbe70 <module_user_init_hook+0x5c>)
   bbe42:	b113      	cbz	r3, bbe4a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbe44:	4620      	mov	r0, r4
   bbe46:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbe4a:	2100      	movs	r1, #0
   bbe4c:	4808      	ldr	r0, [pc, #32]	; (bbe70 <module_user_init_hook+0x5c>)
   bbe4e:	f7fd f9f5 	bl	b923c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbe52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbe56:	4807      	ldr	r0, [pc, #28]	; (bbe74 <module_user_init_hook+0x60>)
   bbe58:	2100      	movs	r1, #0
   bbe5a:	f7fd b98d 	b.w	b9178 <system_ctrl_set_app_request_handler>
   bbe5e:	bf00      	nop
   bbe60:	000bbd41 	.word	0x000bbd41
   bbe64:	2003f400 	.word	0x2003f400
   bbe68:	9a271c1e 	.word	0x9a271c1e
   bbe6c:	2003e708 	.word	0x2003e708
   bbe70:	00000000 	.word	0x00000000
   bbe74:	000bbddd 	.word	0x000bbddd

000bbe78 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bbe78:	b508      	push	{r3, lr}
   bbe7a:	4b02      	ldr	r3, [pc, #8]	; (bbe84 <spark_protocol_instance+0xc>)
   bbe7c:	681b      	ldr	r3, [r3, #0]
   bbe7e:	681b      	ldr	r3, [r3, #0]
   bbe80:	9301      	str	r3, [sp, #4]
   bbe82:	bd08      	pop	{r3, pc}
   bbe84:	0003025c 	.word	0x0003025c

000bbe88 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bbe88:	b508      	push	{r3, lr}
   bbe8a:	4b02      	ldr	r3, [pc, #8]	; (bbe94 <spark_protocol_set_product_id+0xc>)
   bbe8c:	681b      	ldr	r3, [r3, #0]
   bbe8e:	685b      	ldr	r3, [r3, #4]
   bbe90:	9301      	str	r3, [sp, #4]
   bbe92:	bd08      	pop	{r3, pc}
   bbe94:	0003025c 	.word	0x0003025c

000bbe98 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bbe98:	b508      	push	{r3, lr}
   bbe9a:	4b02      	ldr	r3, [pc, #8]	; (bbea4 <spark_protocol_set_product_firmware_version+0xc>)
   bbe9c:	681b      	ldr	r3, [r3, #0]
   bbe9e:	689b      	ldr	r3, [r3, #8]
   bbea0:	9301      	str	r3, [sp, #4]
   bbea2:	bd08      	pop	{r3, pc}
   bbea4:	0003025c 	.word	0x0003025c

000bbea8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bbea8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bbeaa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bbeac:	d902      	bls.n	bbeb4 <pinAvailable+0xc>
    return false;
   bbeae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bbeb0:	b002      	add	sp, #8
   bbeb2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bbeb4:	f1a0 030b 	sub.w	r3, r0, #11
   bbeb8:	2b02      	cmp	r3, #2
   bbeba:	d81a      	bhi.n	bbef2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bbebc:	4c17      	ldr	r4, [pc, #92]	; (bbf1c <pinAvailable+0x74>)
   bbebe:	7821      	ldrb	r1, [r4, #0]
   bbec0:	f3bf 8f5b 	dmb	ish
   bbec4:	f011 0101 	ands.w	r1, r1, #1
   bbec8:	d10b      	bne.n	bbee2 <pinAvailable+0x3a>
   bbeca:	4620      	mov	r0, r4
   bbecc:	9101      	str	r1, [sp, #4]
   bbece:	f7f8 f8f5 	bl	b40bc <__cxa_guard_acquire>
   bbed2:	9901      	ldr	r1, [sp, #4]
   bbed4:	b128      	cbz	r0, bbee2 <pinAvailable+0x3a>
   bbed6:	4812      	ldr	r0, [pc, #72]	; (bbf20 <pinAvailable+0x78>)
   bbed8:	f7ff fa54 	bl	bb384 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bbedc:	4620      	mov	r0, r4
   bbede:	f7f8 f8f2 	bl	b40c6 <__cxa_guard_release>
   bbee2:	4b0f      	ldr	r3, [pc, #60]	; (bbf20 <pinAvailable+0x78>)
   bbee4:	7818      	ldrb	r0, [r3, #0]
   bbee6:	f7fc fffb 	bl	b8ee0 <hal_spi_is_enabled>
   bbeea:	2800      	cmp	r0, #0
   bbeec:	d1df      	bne.n	bbeae <pinAvailable+0x6>
  return true; // 'pin' is available
   bbeee:	2001      	movs	r0, #1
   bbef0:	e7de      	b.n	bbeb0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bbef2:	2801      	cmp	r0, #1
   bbef4:	d809      	bhi.n	bbf0a <pinAvailable+0x62>
   bbef6:	f000 f89f 	bl	bc038 <_Z19__fetch_global_Wirev>
   bbefa:	2100      	movs	r1, #0
   bbefc:	7c00      	ldrb	r0, [r0, #16]
   bbefe:	f7fc ff8f 	bl	b8e20 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bbf02:	f080 0001 	eor.w	r0, r0, #1
   bbf06:	b2c0      	uxtb	r0, r0
   bbf08:	e7d2      	b.n	bbeb0 <pinAvailable+0x8>
   bbf0a:	3809      	subs	r0, #9
   bbf0c:	2801      	cmp	r0, #1
   bbf0e:	d8ee      	bhi.n	bbeee <pinAvailable+0x46>
   bbf10:	f000 f8f6 	bl	bc100 <_Z22__fetch_global_Serial1v>
   bbf14:	7c00      	ldrb	r0, [r0, #16]
   bbf16:	f7fd f83b 	bl	b8f90 <hal_usart_is_enabled>
   bbf1a:	e7f2      	b.n	bbf02 <pinAvailable+0x5a>
   bbf1c:	2003e3e0 	.word	0x2003e3e0
   bbf20:	2003e3e4 	.word	0x2003e3e4

000bbf24 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbf24:	2823      	cmp	r0, #35	; 0x23
{
   bbf26:	b538      	push	{r3, r4, r5, lr}
   bbf28:	4604      	mov	r4, r0
   bbf2a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbf2c:	d80a      	bhi.n	bbf44 <pinMode+0x20>
   bbf2e:	29ff      	cmp	r1, #255	; 0xff
   bbf30:	d008      	beq.n	bbf44 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bbf32:	f7ff ffb9 	bl	bbea8 <pinAvailable>
   bbf36:	b128      	cbz	r0, bbf44 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bbf38:	4629      	mov	r1, r5
   bbf3a:	4620      	mov	r0, r4
}
   bbf3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bbf40:	f7fc bef6 	b.w	b8d30 <HAL_Pin_Mode>
}
   bbf44:	bd38      	pop	{r3, r4, r5, pc}

000bbf46 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bbf46:	b538      	push	{r3, r4, r5, lr}
   bbf48:	4604      	mov	r4, r0
   bbf4a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bbf4c:	f7fc fef8 	bl	b8d40 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bbf50:	28ff      	cmp	r0, #255	; 0xff
   bbf52:	d010      	beq.n	bbf76 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bbf54:	2806      	cmp	r0, #6
   bbf56:	d804      	bhi.n	bbf62 <digitalWrite+0x1c>
   bbf58:	234d      	movs	r3, #77	; 0x4d
   bbf5a:	fa23 f000 	lsr.w	r0, r3, r0
   bbf5e:	07c3      	lsls	r3, r0, #31
   bbf60:	d409      	bmi.n	bbf76 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bbf62:	4620      	mov	r0, r4
   bbf64:	f7ff ffa0 	bl	bbea8 <pinAvailable>
   bbf68:	b128      	cbz	r0, bbf76 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bbf6a:	4629      	mov	r1, r5
   bbf6c:	4620      	mov	r0, r4
}
   bbf6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bbf72:	f7fc beed 	b.w	b8d50 <HAL_GPIO_Write>
}
   bbf76:	bd38      	pop	{r3, r4, r5, pc}

000bbf78 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bbf78:	b510      	push	{r4, lr}
   bbf7a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bbf7c:	f7fc fee0 	bl	b8d40 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bbf80:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bbf82:	b2db      	uxtb	r3, r3
   bbf84:	2b01      	cmp	r3, #1
   bbf86:	d908      	bls.n	bbf9a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bbf88:	4620      	mov	r0, r4
   bbf8a:	f7ff ff8d 	bl	bbea8 <pinAvailable>
   bbf8e:	b120      	cbz	r0, bbf9a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bbf90:	4620      	mov	r0, r4
}
   bbf92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bbf96:	f7fc bee3 	b.w	b8d60 <HAL_GPIO_Read>
}
   bbf9a:	2000      	movs	r0, #0
   bbf9c:	bd10      	pop	{r4, pc}

000bbf9e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bbf9e:	280d      	cmp	r0, #13
{
   bbfa0:	b510      	push	{r4, lr}
   bbfa2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bbfa4:	bf9c      	itt	ls
   bbfa6:	340e      	addls	r4, #14
   bbfa8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bbfaa:	4620      	mov	r0, r4
   bbfac:	f7ff ff7c 	bl	bbea8 <pinAvailable>
   bbfb0:	b150      	cbz	r0, bbfc8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bbfb2:	2103      	movs	r1, #3
   bbfb4:	4620      	mov	r0, r4
   bbfb6:	f7fc feb3 	bl	b8d20 <HAL_Validate_Pin_Function>
   bbfba:	2803      	cmp	r0, #3
   bbfbc:	d104      	bne.n	bbfc8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bbfbe:	4620      	mov	r0, r4
}
   bbfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bbfc4:	f7fc bee4 	b.w	b8d90 <hal_adc_read>
}
   bbfc8:	2000      	movs	r0, #0
   bbfca:	bd10      	pop	{r4, pc}

000bbfcc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbfcc:	4770      	bx	lr

000bbfce <__tcf_1>:
   bbfce:	4770      	bx	lr

000bbfd0 <_Z17acquireWireBufferv>:
{
   bbfd0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bbfd2:	4b0a      	ldr	r3, [pc, #40]	; (bbffc <_Z17acquireWireBufferv+0x2c>)
   bbfd4:	6003      	str	r3, [r0, #0]
   bbfd6:	2301      	movs	r3, #1
{
   bbfd8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bbfda:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbfdc:	4908      	ldr	r1, [pc, #32]	; (bc000 <_Z17acquireWireBufferv+0x30>)
   bbfde:	2020      	movs	r0, #32
   bbfe0:	f000 f8b4 	bl	bc14c <_ZnajRKSt9nothrow_t>
	};
   bbfe4:	2520      	movs	r5, #32
   bbfe6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbfe8:	4905      	ldr	r1, [pc, #20]	; (bc000 <_Z17acquireWireBufferv+0x30>)
	};
   bbfea:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbfec:	4628      	mov	r0, r5
   bbfee:	f000 f8ad 	bl	bc14c <_ZnajRKSt9nothrow_t>
	};
   bbff2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bbff6:	4620      	mov	r0, r4
   bbff8:	bd38      	pop	{r3, r4, r5, pc}
   bbffa:	bf00      	nop
   bbffc:	00010018 	.word	0x00010018
   bc000:	000bf6a4 	.word	0x000bf6a4

000bc004 <_Z18acquireWire1Bufferv>:
{
   bc004:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bc006:	4b0a      	ldr	r3, [pc, #40]	; (bc030 <_Z18acquireWire1Bufferv+0x2c>)
   bc008:	6003      	str	r3, [r0, #0]
   bc00a:	2301      	movs	r3, #1
{
   bc00c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bc00e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc010:	4908      	ldr	r1, [pc, #32]	; (bc034 <_Z18acquireWire1Bufferv+0x30>)
   bc012:	2020      	movs	r0, #32
   bc014:	f000 f89a 	bl	bc14c <_ZnajRKSt9nothrow_t>
	};
   bc018:	2520      	movs	r5, #32
   bc01a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc01c:	4905      	ldr	r1, [pc, #20]	; (bc034 <_Z18acquireWire1Bufferv+0x30>)
	};
   bc01e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bc020:	4628      	mov	r0, r5
   bc022:	f000 f893 	bl	bc14c <_ZnajRKSt9nothrow_t>
	};
   bc026:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bc02a:	4620      	mov	r0, r4
   bc02c:	bd38      	pop	{r3, r4, r5, pc}
   bc02e:	bf00      	nop
   bc030:	00010018 	.word	0x00010018
   bc034:	000bf6a4 	.word	0x000bf6a4

000bc038 <_Z19__fetch_global_Wirev>:
{
   bc038:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc03a:	4d0e      	ldr	r5, [pc, #56]	; (bc074 <_Z19__fetch_global_Wirev+0x3c>)
   bc03c:	7829      	ldrb	r1, [r5, #0]
   bc03e:	f3bf 8f5b 	dmb	ish
   bc042:	f011 0401 	ands.w	r4, r1, #1
{
   bc046:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc048:	d111      	bne.n	bc06e <_Z19__fetch_global_Wirev+0x36>
   bc04a:	4628      	mov	r0, r5
   bc04c:	f7f8 f836 	bl	b40bc <__cxa_guard_acquire>
   bc050:	b168      	cbz	r0, bc06e <_Z19__fetch_global_Wirev+0x36>
   bc052:	4668      	mov	r0, sp
   bc054:	f7ff ffbc 	bl	bbfd0 <_Z17acquireWireBufferv>
   bc058:	466a      	mov	r2, sp
   bc05a:	4621      	mov	r1, r4
   bc05c:	4806      	ldr	r0, [pc, #24]	; (bc078 <_Z19__fetch_global_Wirev+0x40>)
   bc05e:	f7fd fc0d 	bl	b987c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bc062:	4628      	mov	r0, r5
   bc064:	f7f8 f82f 	bl	b40c6 <__cxa_guard_release>
   bc068:	4804      	ldr	r0, [pc, #16]	; (bc07c <_Z19__fetch_global_Wirev+0x44>)
   bc06a:	f001 fe25 	bl	bdcb8 <atexit>
	return wire;
}
   bc06e:	4802      	ldr	r0, [pc, #8]	; (bc078 <_Z19__fetch_global_Wirev+0x40>)
   bc070:	b007      	add	sp, #28
   bc072:	bd30      	pop	{r4, r5, pc}
   bc074:	2003e714 	.word	0x2003e714
   bc078:	2003e71c 	.word	0x2003e71c
   bc07c:	000bbfcd 	.word	0x000bbfcd

000bc080 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bc080:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bc082:	4c0e      	ldr	r4, [pc, #56]	; (bc0bc <_Z20__fetch_global_Wire1v+0x3c>)
   bc084:	7823      	ldrb	r3, [r4, #0]
   bc086:	f3bf 8f5b 	dmb	ish
   bc08a:	07db      	lsls	r3, r3, #31
{
   bc08c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bc08e:	d411      	bmi.n	bc0b4 <_Z20__fetch_global_Wire1v+0x34>
   bc090:	4620      	mov	r0, r4
   bc092:	f7f8 f813 	bl	b40bc <__cxa_guard_acquire>
   bc096:	b168      	cbz	r0, bc0b4 <_Z20__fetch_global_Wire1v+0x34>
   bc098:	4668      	mov	r0, sp
   bc09a:	f7ff ffb3 	bl	bc004 <_Z18acquireWire1Bufferv>
   bc09e:	466a      	mov	r2, sp
   bc0a0:	2101      	movs	r1, #1
   bc0a2:	4807      	ldr	r0, [pc, #28]	; (bc0c0 <_Z20__fetch_global_Wire1v+0x40>)
   bc0a4:	f7fd fbea 	bl	b987c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bc0a8:	4620      	mov	r0, r4
   bc0aa:	f7f8 f80c 	bl	b40c6 <__cxa_guard_release>
   bc0ae:	4805      	ldr	r0, [pc, #20]	; (bc0c4 <_Z20__fetch_global_Wire1v+0x44>)
   bc0b0:	f001 fe02 	bl	bdcb8 <atexit>
	return wire;
}
   bc0b4:	4802      	ldr	r0, [pc, #8]	; (bc0c0 <_Z20__fetch_global_Wire1v+0x40>)
   bc0b6:	b006      	add	sp, #24
   bc0b8:	bd10      	pop	{r4, pc}
   bc0ba:	bf00      	nop
   bc0bc:	2003e718 	.word	0x2003e718
   bc0c0:	2003e730 	.word	0x2003e730
   bc0c4:	000bbfcf 	.word	0x000bbfcf

000bc0c8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc0c8:	4770      	bx	lr
	...

000bc0cc <_Z20acquireSerial1Bufferv>:
{
   bc0cc:	b538      	push	{r3, r4, r5, lr}
   bc0ce:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bc0d0:	2514      	movs	r5, #20
   bc0d2:	462a      	mov	r2, r5
   bc0d4:	2100      	movs	r1, #0
   bc0d6:	f001 fe43 	bl	bdd60 <memset>
   bc0da:	8025      	strh	r5, [r4, #0]
   bc0dc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc0de:	4907      	ldr	r1, [pc, #28]	; (bc0fc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bc0e0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc0e2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bc0e4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc0e6:	f000 f831 	bl	bc14c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc0ea:	4904      	ldr	r1, [pc, #16]	; (bc0fc <_Z20acquireSerial1Bufferv+0x30>)
    };
   bc0ec:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc0ee:	4628      	mov	r0, r5
   bc0f0:	f000 f82c 	bl	bc14c <_ZnajRKSt9nothrow_t>
    };
   bc0f4:	60e0      	str	r0, [r4, #12]
}
   bc0f6:	4620      	mov	r0, r4
   bc0f8:	bd38      	pop	{r3, r4, r5, pc}
   bc0fa:	bf00      	nop
   bc0fc:	000bf6a4 	.word	0x000bf6a4

000bc100 <_Z22__fetch_global_Serial1v>:
{
   bc100:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc102:	4d0e      	ldr	r5, [pc, #56]	; (bc13c <_Z22__fetch_global_Serial1v+0x3c>)
   bc104:	7829      	ldrb	r1, [r5, #0]
   bc106:	f3bf 8f5b 	dmb	ish
   bc10a:	f011 0401 	ands.w	r4, r1, #1
{
   bc10e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc110:	d111      	bne.n	bc136 <_Z22__fetch_global_Serial1v+0x36>
   bc112:	4628      	mov	r0, r5
   bc114:	f7f7 ffd2 	bl	b40bc <__cxa_guard_acquire>
   bc118:	b168      	cbz	r0, bc136 <_Z22__fetch_global_Serial1v+0x36>
   bc11a:	a801      	add	r0, sp, #4
   bc11c:	f7ff ffd6 	bl	bc0cc <_Z20acquireSerial1Bufferv>
   bc120:	aa01      	add	r2, sp, #4
   bc122:	4621      	mov	r1, r4
   bc124:	4806      	ldr	r0, [pc, #24]	; (bc140 <_Z22__fetch_global_Serial1v+0x40>)
   bc126:	f7ff fd63 	bl	bbbf0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bc12a:	4628      	mov	r0, r5
   bc12c:	f7f7 ffcb 	bl	b40c6 <__cxa_guard_release>
   bc130:	4804      	ldr	r0, [pc, #16]	; (bc144 <_Z22__fetch_global_Serial1v+0x44>)
   bc132:	f001 fdc1 	bl	bdcb8 <atexit>
    return serial1;
}
   bc136:	4802      	ldr	r0, [pc, #8]	; (bc140 <_Z22__fetch_global_Serial1v+0x40>)
   bc138:	b007      	add	sp, #28
   bc13a:	bd30      	pop	{r4, r5, pc}
   bc13c:	2003e744 	.word	0x2003e744
   bc140:	2003e748 	.word	0x2003e748
   bc144:	000bc0c9 	.word	0x000bc0c9

000bc148 <_ZnwjRKSt9nothrow_t>:
   bc148:	f7f7 bfa5 	b.w	b4096 <_Znwj>

000bc14c <_ZnajRKSt9nothrow_t>:
   bc14c:	f7f7 bfa5 	b.w	b409a <_Znaj>

000bc150 <_ZSt25__throw_bad_function_callv>:
   bc150:	b508      	push	{r3, lr}
   bc152:	f7fd f913 	bl	b937c <abort>
	...

000bc158 <pow>:
   bc158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc15a:	ed2d 8b02 	vpush	{d8}
   bc15e:	ec57 6b10 	vmov	r6, r7, d0
   bc162:	ec55 4b11 	vmov	r4, r5, d1
   bc166:	f000 f8cb 	bl	bc300 <__ieee754_pow>
   bc16a:	4b63      	ldr	r3, [pc, #396]	; (bc2f8 <pow+0x1a0>)
   bc16c:	eeb0 8a40 	vmov.f32	s16, s0
   bc170:	eef0 8a60 	vmov.f32	s17, s1
   bc174:	f993 3000 	ldrsb.w	r3, [r3]
   bc178:	3301      	adds	r3, #1
   bc17a:	d02a      	beq.n	bc1d2 <pow+0x7a>
   bc17c:	4622      	mov	r2, r4
   bc17e:	462b      	mov	r3, r5
   bc180:	4620      	mov	r0, r4
   bc182:	4629      	mov	r1, r5
   bc184:	f001 fcc4 	bl	bdb10 <__aeabi_dcmpun>
   bc188:	bb18      	cbnz	r0, bc1d2 <pow+0x7a>
   bc18a:	4632      	mov	r2, r6
   bc18c:	463b      	mov	r3, r7
   bc18e:	4630      	mov	r0, r6
   bc190:	4639      	mov	r1, r7
   bc192:	f001 fcbd 	bl	bdb10 <__aeabi_dcmpun>
   bc196:	2800      	cmp	r0, #0
   bc198:	d144      	bne.n	bc224 <pow+0xcc>
   bc19a:	2200      	movs	r2, #0
   bc19c:	2300      	movs	r3, #0
   bc19e:	4630      	mov	r0, r6
   bc1a0:	4639      	mov	r1, r7
   bc1a2:	f001 fc83 	bl	bdaac <__aeabi_dcmpeq>
   bc1a6:	b1d8      	cbz	r0, bc1e0 <pow+0x88>
   bc1a8:	2200      	movs	r2, #0
   bc1aa:	2300      	movs	r3, #0
   bc1ac:	4620      	mov	r0, r4
   bc1ae:	4629      	mov	r1, r5
   bc1b0:	f001 fc7c 	bl	bdaac <__aeabi_dcmpeq>
   bc1b4:	2800      	cmp	r0, #0
   bc1b6:	d13d      	bne.n	bc234 <pow+0xdc>
   bc1b8:	ec45 4b10 	vmov	d0, r4, r5
   bc1bc:	f000 ff10 	bl	bcfe0 <finite>
   bc1c0:	b138      	cbz	r0, bc1d2 <pow+0x7a>
   bc1c2:	4620      	mov	r0, r4
   bc1c4:	4629      	mov	r1, r5
   bc1c6:	2200      	movs	r2, #0
   bc1c8:	2300      	movs	r3, #0
   bc1ca:	f001 fc79 	bl	bdac0 <__aeabi_dcmplt>
   bc1ce:	2800      	cmp	r0, #0
   bc1d0:	d15c      	bne.n	bc28c <pow+0x134>
   bc1d2:	eeb0 0a48 	vmov.f32	s0, s16
   bc1d6:	eef0 0a68 	vmov.f32	s1, s17
   bc1da:	ecbd 8b02 	vpop	{d8}
   bc1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc1e0:	eeb0 0a48 	vmov.f32	s0, s16
   bc1e4:	eef0 0a68 	vmov.f32	s1, s17
   bc1e8:	f000 fefa 	bl	bcfe0 <finite>
   bc1ec:	b358      	cbz	r0, bc246 <pow+0xee>
   bc1ee:	ec51 0b18 	vmov	r0, r1, d8
   bc1f2:	2200      	movs	r2, #0
   bc1f4:	2300      	movs	r3, #0
   bc1f6:	f001 fc59 	bl	bdaac <__aeabi_dcmpeq>
   bc1fa:	2800      	cmp	r0, #0
   bc1fc:	d0e9      	beq.n	bc1d2 <pow+0x7a>
   bc1fe:	ec47 6b10 	vmov	d0, r6, r7
   bc202:	f000 feed 	bl	bcfe0 <finite>
   bc206:	2800      	cmp	r0, #0
   bc208:	d0e3      	beq.n	bc1d2 <pow+0x7a>
   bc20a:	ec45 4b10 	vmov	d0, r4, r5
   bc20e:	f000 fee7 	bl	bcfe0 <finite>
   bc212:	2800      	cmp	r0, #0
   bc214:	d0dd      	beq.n	bc1d2 <pow+0x7a>
   bc216:	f7fd f8b9 	bl	b938c <__errno>
   bc21a:	2322      	movs	r3, #34	; 0x22
   bc21c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; bc2d8 <pow+0x180>
   bc220:	6003      	str	r3, [r0, #0]
   bc222:	e7d6      	b.n	bc1d2 <pow+0x7a>
   bc224:	4620      	mov	r0, r4
   bc226:	4629      	mov	r1, r5
   bc228:	2200      	movs	r2, #0
   bc22a:	2300      	movs	r3, #0
   bc22c:	f001 fc3e 	bl	bdaac <__aeabi_dcmpeq>
   bc230:	2800      	cmp	r0, #0
   bc232:	d0ce      	beq.n	bc1d2 <pow+0x7a>
   bc234:	ed9f 8b2a 	vldr	d8, [pc, #168]	; bc2e0 <pow+0x188>
   bc238:	eeb0 0a48 	vmov.f32	s0, s16
   bc23c:	eef0 0a68 	vmov.f32	s1, s17
   bc240:	ecbd 8b02 	vpop	{d8}
   bc244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc246:	ec47 6b10 	vmov	d0, r6, r7
   bc24a:	f000 fec9 	bl	bcfe0 <finite>
   bc24e:	2800      	cmp	r0, #0
   bc250:	d0cd      	beq.n	bc1ee <pow+0x96>
   bc252:	ec45 4b10 	vmov	d0, r4, r5
   bc256:	f000 fec3 	bl	bcfe0 <finite>
   bc25a:	2800      	cmp	r0, #0
   bc25c:	d0c7      	beq.n	bc1ee <pow+0x96>
   bc25e:	ec53 2b18 	vmov	r2, r3, d8
   bc262:	ee18 0a10 	vmov	r0, s16
   bc266:	4619      	mov	r1, r3
   bc268:	f001 fc52 	bl	bdb10 <__aeabi_dcmpun>
   bc26c:	bb20      	cbnz	r0, bc2b8 <pow+0x160>
   bc26e:	f7fd f88d 	bl	b938c <__errno>
   bc272:	4603      	mov	r3, r0
   bc274:	2222      	movs	r2, #34	; 0x22
   bc276:	601a      	str	r2, [r3, #0]
   bc278:	4630      	mov	r0, r6
   bc27a:	4639      	mov	r1, r7
   bc27c:	2200      	movs	r2, #0
   bc27e:	2300      	movs	r3, #0
   bc280:	f001 fc1e 	bl	bdac0 <__aeabi_dcmplt>
   bc284:	b948      	cbnz	r0, bc29a <pow+0x142>
   bc286:	ed9f 8b18 	vldr	d8, [pc, #96]	; bc2e8 <pow+0x190>
   bc28a:	e7a2      	b.n	bc1d2 <pow+0x7a>
   bc28c:	f7fd f87e 	bl	b938c <__errno>
   bc290:	2321      	movs	r3, #33	; 0x21
   bc292:	ed9f 8b17 	vldr	d8, [pc, #92]	; bc2f0 <pow+0x198>
   bc296:	6003      	str	r3, [r0, #0]
   bc298:	e79b      	b.n	bc1d2 <pow+0x7a>
   bc29a:	ec45 4b10 	vmov	d0, r4, r5
   bc29e:	f000 feb3 	bl	bd008 <rint>
   bc2a2:	4622      	mov	r2, r4
   bc2a4:	ec51 0b10 	vmov	r0, r1, d0
   bc2a8:	462b      	mov	r3, r5
   bc2aa:	f001 fbff 	bl	bdaac <__aeabi_dcmpeq>
   bc2ae:	2800      	cmp	r0, #0
   bc2b0:	d1e9      	bne.n	bc286 <pow+0x12e>
   bc2b2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; bc2f0 <pow+0x198>
   bc2b6:	e78c      	b.n	bc1d2 <pow+0x7a>
   bc2b8:	f7fd f868 	bl	b938c <__errno>
   bc2bc:	2200      	movs	r2, #0
   bc2be:	2300      	movs	r3, #0
   bc2c0:	2121      	movs	r1, #33	; 0x21
   bc2c2:	6001      	str	r1, [r0, #0]
   bc2c4:	4610      	mov	r0, r2
   bc2c6:	4619      	mov	r1, r3
   bc2c8:	f001 fab2 	bl	bd830 <__aeabi_ddiv>
   bc2cc:	ec41 0b18 	vmov	d8, r0, r1
   bc2d0:	e77f      	b.n	bc1d2 <pow+0x7a>
   bc2d2:	bf00      	nop
   bc2d4:	f3af 8000 	nop.w
	...
   bc2e4:	3ff00000 	.word	0x3ff00000
   bc2e8:	00000000 	.word	0x00000000
   bc2ec:	7ff00000 	.word	0x7ff00000
   bc2f0:	00000000 	.word	0x00000000
   bc2f4:	fff00000 	.word	0xfff00000
   bc2f8:	2003decc 	.word	0x2003decc
   bc2fc:	00000000 	.word	0x00000000

000bc300 <__ieee754_pow>:
   bc300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc304:	ec57 6b11 	vmov	r6, r7, d1
   bc308:	ed2d 8b0c 	vpush	{d8-d13}
   bc30c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   bc310:	ea5a 0206 	orrs.w	r2, sl, r6
   bc314:	b087      	sub	sp, #28
   bc316:	d03d      	beq.n	bc394 <__ieee754_pow+0x94>
   bc318:	ec55 4b10 	vmov	r4, r5, d0
   bc31c:	4972      	ldr	r1, [pc, #456]	; (bc4e8 <__ieee754_pow+0x1e8>)
   bc31e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   bc322:	4588      	cmp	r8, r1
   bc324:	ee10 2a10 	vmov	r2, s0
   bc328:	46a9      	mov	r9, r5
   bc32a:	dc2c      	bgt.n	bc386 <__ieee754_pow+0x86>
   bc32c:	ee11 3a10 	vmov	r3, s2
   bc330:	46bb      	mov	fp, r7
   bc332:	d036      	beq.n	bc3a2 <__ieee754_pow+0xa2>
   bc334:	458a      	cmp	sl, r1
   bc336:	dc26      	bgt.n	bc386 <__ieee754_pow+0x86>
   bc338:	496b      	ldr	r1, [pc, #428]	; (bc4e8 <__ieee754_pow+0x1e8>)
   bc33a:	458a      	cmp	sl, r1
   bc33c:	d021      	beq.n	bc382 <__ieee754_pow+0x82>
   bc33e:	f1b9 0f00 	cmp.w	r9, #0
   bc342:	db39      	blt.n	bc3b8 <__ieee754_pow+0xb8>
   bc344:	2100      	movs	r1, #0
   bc346:	9100      	str	r1, [sp, #0]
   bc348:	2b00      	cmp	r3, #0
   bc34a:	d151      	bne.n	bc3f0 <__ieee754_pow+0xf0>
   bc34c:	4b66      	ldr	r3, [pc, #408]	; (bc4e8 <__ieee754_pow+0x1e8>)
   bc34e:	459a      	cmp	sl, r3
   bc350:	f000 80a2 	beq.w	bc498 <__ieee754_pow+0x198>
   bc354:	4b65      	ldr	r3, [pc, #404]	; (bc4ec <__ieee754_pow+0x1ec>)
   bc356:	459a      	cmp	sl, r3
   bc358:	f000 80b0 	beq.w	bc4bc <__ieee754_pow+0x1bc>
   bc35c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   bc360:	f000 84c0 	beq.w	bcce4 <__ieee754_pow+0x9e4>
   bc364:	4b62      	ldr	r3, [pc, #392]	; (bc4f0 <__ieee754_pow+0x1f0>)
   bc366:	459b      	cmp	fp, r3
   bc368:	d142      	bne.n	bc3f0 <__ieee754_pow+0xf0>
   bc36a:	f1b9 0f00 	cmp.w	r9, #0
   bc36e:	db3f      	blt.n	bc3f0 <__ieee754_pow+0xf0>
   bc370:	ec45 4b10 	vmov	d0, r4, r5
   bc374:	b007      	add	sp, #28
   bc376:	ecbd 8b0c 	vpop	{d8-d13}
   bc37a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc37e:	f000 bd59 	b.w	bce34 <__ieee754_sqrt>
   bc382:	2b00      	cmp	r3, #0
   bc384:	d0db      	beq.n	bc33e <__ieee754_pow+0x3e>
   bc386:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bc38a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bc38e:	ea58 0302 	orrs.w	r3, r8, r2
   bc392:	d109      	bne.n	bc3a8 <__ieee754_pow+0xa8>
   bc394:	ed9f 0b50 	vldr	d0, [pc, #320]	; bc4d8 <__ieee754_pow+0x1d8>
   bc398:	b007      	add	sp, #28
   bc39a:	ecbd 8b0c 	vpop	{d8-d13}
   bc39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc3a2:	b90c      	cbnz	r4, bc3a8 <__ieee754_pow+0xa8>
   bc3a4:	45c2      	cmp	sl, r8
   bc3a6:	ddc7      	ble.n	bc338 <__ieee754_pow+0x38>
   bc3a8:	4852      	ldr	r0, [pc, #328]	; (bc4f4 <__ieee754_pow+0x1f4>)
   bc3aa:	b007      	add	sp, #28
   bc3ac:	ecbd 8b0c 	vpop	{d8-d13}
   bc3b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc3b4:	f000 be20 	b.w	bcff8 <nan>
   bc3b8:	494f      	ldr	r1, [pc, #316]	; (bc4f8 <__ieee754_pow+0x1f8>)
   bc3ba:	458a      	cmp	sl, r1
   bc3bc:	f300 8085 	bgt.w	bc4ca <__ieee754_pow+0x1ca>
   bc3c0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   bc3c4:	458a      	cmp	sl, r1
   bc3c6:	dd0f      	ble.n	bc3e8 <__ieee754_pow+0xe8>
   bc3c8:	ea4f 512a 	mov.w	r1, sl, asr #20
   bc3cc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   bc3d0:	2914      	cmp	r1, #20
   bc3d2:	f340 849b 	ble.w	bcd0c <__ieee754_pow+0xa0c>
   bc3d6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   bc3da:	fa23 f001 	lsr.w	r0, r3, r1
   bc3de:	fa00 f101 	lsl.w	r1, r0, r1
   bc3e2:	4299      	cmp	r1, r3
   bc3e4:	f000 84ed 	beq.w	bcdc2 <__ieee754_pow+0xac2>
   bc3e8:	2100      	movs	r1, #0
   bc3ea:	9100      	str	r1, [sp, #0]
   bc3ec:	2b00      	cmp	r3, #0
   bc3ee:	d0b1      	beq.n	bc354 <__ieee754_pow+0x54>
   bc3f0:	ec45 4b10 	vmov	d0, r4, r5
   bc3f4:	9202      	str	r2, [sp, #8]
   bc3f6:	f000 fde9 	bl	bcfcc <fabs>
   bc3fa:	9a02      	ldr	r2, [sp, #8]
   bc3fc:	bb5a      	cbnz	r2, bc456 <__ieee754_pow+0x156>
   bc3fe:	f1b8 0f00 	cmp.w	r8, #0
   bc402:	d004      	beq.n	bc40e <__ieee754_pow+0x10e>
   bc404:	4b39      	ldr	r3, [pc, #228]	; (bc4ec <__ieee754_pow+0x1ec>)
   bc406:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   bc40a:	429a      	cmp	r2, r3
   bc40c:	d123      	bne.n	bc456 <__ieee754_pow+0x156>
   bc40e:	f1bb 0f00 	cmp.w	fp, #0
   bc412:	da07      	bge.n	bc424 <__ieee754_pow+0x124>
   bc414:	ec53 2b10 	vmov	r2, r3, d0
   bc418:	4934      	ldr	r1, [pc, #208]	; (bc4ec <__ieee754_pow+0x1ec>)
   bc41a:	2000      	movs	r0, #0
   bc41c:	f001 fa08 	bl	bd830 <__aeabi_ddiv>
   bc420:	ec41 0b10 	vmov	d0, r0, r1
   bc424:	f1b9 0f00 	cmp.w	r9, #0
   bc428:	dab6      	bge.n	bc398 <__ieee754_pow+0x98>
   bc42a:	9b00      	ldr	r3, [sp, #0]
   bc42c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bc430:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bc434:	ea58 0303 	orrs.w	r3, r8, r3
   bc438:	f040 848d 	bne.w	bcd56 <__ieee754_pow+0xa56>
   bc43c:	ec53 2b10 	vmov	r2, r3, d0
   bc440:	4610      	mov	r0, r2
   bc442:	4619      	mov	r1, r3
   bc444:	f000 ff12 	bl	bd26c <__aeabi_dsub>
   bc448:	4602      	mov	r2, r0
   bc44a:	460b      	mov	r3, r1
   bc44c:	f001 f9f0 	bl	bd830 <__aeabi_ddiv>
   bc450:	ec41 0b10 	vmov	d0, r0, r1
   bc454:	e7a0      	b.n	bc398 <__ieee754_pow+0x98>
   bc456:	9a00      	ldr	r2, [sp, #0]
   bc458:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   bc45c:	3b01      	subs	r3, #1
   bc45e:	9304      	str	r3, [sp, #16]
   bc460:	4313      	orrs	r3, r2
   bc462:	d035      	beq.n	bc4d0 <__ieee754_pow+0x1d0>
   bc464:	4b25      	ldr	r3, [pc, #148]	; (bc4fc <__ieee754_pow+0x1fc>)
   bc466:	459a      	cmp	sl, r3
   bc468:	dd4c      	ble.n	bc504 <__ieee754_pow+0x204>
   bc46a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   bc46e:	459a      	cmp	sl, r3
   bc470:	4b23      	ldr	r3, [pc, #140]	; (bc500 <__ieee754_pow+0x200>)
   bc472:	f340 83db 	ble.w	bcc2c <__ieee754_pow+0x92c>
   bc476:	4598      	cmp	r8, r3
   bc478:	f340 8360 	ble.w	bcb3c <__ieee754_pow+0x83c>
   bc47c:	f1bb 0f00 	cmp.w	fp, #0
   bc480:	f340 8360 	ble.w	bcb44 <__ieee754_pow+0x844>
   bc484:	a316      	add	r3, pc, #88	; (adr r3, bc4e0 <__ieee754_pow+0x1e0>)
   bc486:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc48a:	4610      	mov	r0, r2
   bc48c:	4619      	mov	r1, r3
   bc48e:	f001 f8a5 	bl	bd5dc <__aeabi_dmul>
   bc492:	ec41 0b10 	vmov	d0, r0, r1
   bc496:	e77f      	b.n	bc398 <__ieee754_pow+0x98>
   bc498:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   bc49c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   bc4a0:	4313      	orrs	r3, r2
   bc4a2:	f43f af77 	beq.w	bc394 <__ieee754_pow+0x94>
   bc4a6:	4b16      	ldr	r3, [pc, #88]	; (bc500 <__ieee754_pow+0x200>)
   bc4a8:	4598      	cmp	r8, r3
   bc4aa:	f340 837a 	ble.w	bcba2 <__ieee754_pow+0x8a2>
   bc4ae:	f1bb 0f00 	cmp.w	fp, #0
   bc4b2:	f2c0 8347 	blt.w	bcb44 <__ieee754_pow+0x844>
   bc4b6:	ec47 6b10 	vmov	d0, r6, r7
   bc4ba:	e76d      	b.n	bc398 <__ieee754_pow+0x98>
   bc4bc:	f1bb 0f00 	cmp.w	fp, #0
   bc4c0:	f2c0 841a 	blt.w	bccf8 <__ieee754_pow+0x9f8>
   bc4c4:	ec45 4b10 	vmov	d0, r4, r5
   bc4c8:	e766      	b.n	bc398 <__ieee754_pow+0x98>
   bc4ca:	2102      	movs	r1, #2
   bc4cc:	9100      	str	r1, [sp, #0]
   bc4ce:	e73b      	b.n	bc348 <__ieee754_pow+0x48>
   bc4d0:	4622      	mov	r2, r4
   bc4d2:	462b      	mov	r3, r5
   bc4d4:	e7b4      	b.n	bc440 <__ieee754_pow+0x140>
   bc4d6:	bf00      	nop
   bc4d8:	00000000 	.word	0x00000000
   bc4dc:	3ff00000 	.word	0x3ff00000
   bc4e0:	8800759c 	.word	0x8800759c
   bc4e4:	7e37e43c 	.word	0x7e37e43c
   bc4e8:	7ff00000 	.word	0x7ff00000
   bc4ec:	3ff00000 	.word	0x3ff00000
   bc4f0:	3fe00000 	.word	0x3fe00000
   bc4f4:	000bf6a8 	.word	0x000bf6a8
   bc4f8:	433fffff 	.word	0x433fffff
   bc4fc:	41e00000 	.word	0x41e00000
   bc500:	3fefffff 	.word	0x3fefffff
   bc504:	4be4      	ldr	r3, [pc, #912]	; (bc898 <__ieee754_pow+0x598>)
   bc506:	ea09 0303 	and.w	r3, r9, r3
   bc50a:	2200      	movs	r2, #0
   bc50c:	b953      	cbnz	r3, bc524 <__ieee754_pow+0x224>
   bc50e:	ec51 0b10 	vmov	r0, r1, d0
   bc512:	4be2      	ldr	r3, [pc, #904]	; (bc89c <__ieee754_pow+0x59c>)
   bc514:	f001 f862 	bl	bd5dc <__aeabi_dmul>
   bc518:	ec41 0b10 	vmov	d0, r0, r1
   bc51c:	ee10 8a90 	vmov	r8, s1
   bc520:	f06f 0234 	mvn.w	r2, #52	; 0x34
   bc524:	ea4f 5328 	mov.w	r3, r8, asr #20
   bc528:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   bc52c:	189a      	adds	r2, r3, r2
   bc52e:	4bdc      	ldr	r3, [pc, #880]	; (bc8a0 <__ieee754_pow+0x5a0>)
   bc530:	9205      	str	r2, [sp, #20]
   bc532:	f3c8 0813 	ubfx	r8, r8, #0, #20
   bc536:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   bc53a:	4598      	cmp	r8, r3
   bc53c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   bc540:	dd07      	ble.n	bc552 <__ieee754_pow+0x252>
   bc542:	4bd8      	ldr	r3, [pc, #864]	; (bc8a4 <__ieee754_pow+0x5a4>)
   bc544:	4598      	cmp	r8, r3
   bc546:	f340 8414 	ble.w	bcd72 <__ieee754_pow+0xa72>
   bc54a:	3201      	adds	r2, #1
   bc54c:	9205      	str	r2, [sp, #20]
   bc54e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   bc552:	ed9f 6bb9 	vldr	d6, [pc, #740]	; bc838 <__ieee754_pow+0x538>
   bc556:	ed9f 7bba 	vldr	d7, [pc, #744]	; bc840 <__ieee754_pow+0x540>
   bc55a:	ec53 2b16 	vmov	r2, r3, d6
   bc55e:	eeb0 ca47 	vmov.f32	s24, s14
   bc562:	eef0 ca67 	vmov.f32	s25, s15
   bc566:	2500      	movs	r5, #0
   bc568:	eeb0 da47 	vmov.f32	s26, s14
   bc56c:	eef0 da67 	vmov.f32	s27, s15
   bc570:	ec5b ab10 	vmov	sl, fp, d0
   bc574:	46a3      	mov	fp, r4
   bc576:	4650      	mov	r0, sl
   bc578:	4659      	mov	r1, fp
   bc57a:	ec43 2b1a 	vmov	d10, r2, r3
   bc57e:	f000 fe75 	bl	bd26c <__aeabi_dsub>
   bc582:	ec53 2b1a 	vmov	r2, r3, d10
   bc586:	4680      	mov	r8, r0
   bc588:	4689      	mov	r9, r1
   bc58a:	4650      	mov	r0, sl
   bc58c:	4659      	mov	r1, fp
   bc58e:	f000 fe6f 	bl	bd270 <__adddf3>
   bc592:	4602      	mov	r2, r0
   bc594:	460b      	mov	r3, r1
   bc596:	2000      	movs	r0, #0
   bc598:	49c3      	ldr	r1, [pc, #780]	; (bc8a8 <__ieee754_pow+0x5a8>)
   bc59a:	f001 f949 	bl	bd830 <__aeabi_ddiv>
   bc59e:	ec41 0b1b 	vmov	d11, r0, r1
   bc5a2:	4640      	mov	r0, r8
   bc5a4:	ec53 2b1b 	vmov	r2, r3, d11
   bc5a8:	4649      	mov	r1, r9
   bc5aa:	f001 f817 	bl	bd5dc <__aeabi_dmul>
   bc5ae:	ec41 0b18 	vmov	d8, r0, r1
   bc5b2:	460a      	mov	r2, r1
   bc5b4:	4601      	mov	r1, r0
   bc5b6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   bc5ba:	2100      	movs	r1, #0
   bc5bc:	9102      	str	r1, [sp, #8]
   bc5be:	1064      	asrs	r4, r4, #1
   bc5c0:	ec4b ab19 	vmov	d9, sl, fp
   bc5c4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   bc5c8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   bc5cc:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   bc5d0:	2000      	movs	r0, #0
   bc5d2:	1959      	adds	r1, r3, r5
   bc5d4:	4604      	mov	r4, r0
   bc5d6:	460d      	mov	r5, r1
   bc5d8:	4602      	mov	r2, r0
   bc5da:	460b      	mov	r3, r1
   bc5dc:	4650      	mov	r0, sl
   bc5de:	4659      	mov	r1, fp
   bc5e0:	f000 fffc 	bl	bd5dc <__aeabi_dmul>
   bc5e4:	4602      	mov	r2, r0
   bc5e6:	460b      	mov	r3, r1
   bc5e8:	4640      	mov	r0, r8
   bc5ea:	4649      	mov	r1, r9
   bc5ec:	f000 fe3e 	bl	bd26c <__aeabi_dsub>
   bc5f0:	ec53 2b1a 	vmov	r2, r3, d10
   bc5f4:	4680      	mov	r8, r0
   bc5f6:	4689      	mov	r9, r1
   bc5f8:	4620      	mov	r0, r4
   bc5fa:	4629      	mov	r1, r5
   bc5fc:	f000 fe36 	bl	bd26c <__aeabi_dsub>
   bc600:	4602      	mov	r2, r0
   bc602:	460b      	mov	r3, r1
   bc604:	ec51 0b19 	vmov	r0, r1, d9
   bc608:	f000 fe30 	bl	bd26c <__aeabi_dsub>
   bc60c:	4652      	mov	r2, sl
   bc60e:	465b      	mov	r3, fp
   bc610:	f000 ffe4 	bl	bd5dc <__aeabi_dmul>
   bc614:	4602      	mov	r2, r0
   bc616:	460b      	mov	r3, r1
   bc618:	4640      	mov	r0, r8
   bc61a:	4649      	mov	r1, r9
   bc61c:	f000 fe26 	bl	bd26c <__aeabi_dsub>
   bc620:	ec53 2b1b 	vmov	r2, r3, d11
   bc624:	f000 ffda 	bl	bd5dc <__aeabi_dmul>
   bc628:	ec53 2b18 	vmov	r2, r3, d8
   bc62c:	ec41 0b19 	vmov	d9, r0, r1
   bc630:	ec51 0b18 	vmov	r0, r1, d8
   bc634:	f000 ffd2 	bl	bd5dc <__aeabi_dmul>
   bc638:	a383      	add	r3, pc, #524	; (adr r3, bc848 <__ieee754_pow+0x548>)
   bc63a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc63e:	4604      	mov	r4, r0
   bc640:	460d      	mov	r5, r1
   bc642:	f000 ffcb 	bl	bd5dc <__aeabi_dmul>
   bc646:	a382      	add	r3, pc, #520	; (adr r3, bc850 <__ieee754_pow+0x550>)
   bc648:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc64c:	f000 fe10 	bl	bd270 <__adddf3>
   bc650:	4622      	mov	r2, r4
   bc652:	462b      	mov	r3, r5
   bc654:	f000 ffc2 	bl	bd5dc <__aeabi_dmul>
   bc658:	a37f      	add	r3, pc, #508	; (adr r3, bc858 <__ieee754_pow+0x558>)
   bc65a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc65e:	f000 fe07 	bl	bd270 <__adddf3>
   bc662:	4622      	mov	r2, r4
   bc664:	462b      	mov	r3, r5
   bc666:	f000 ffb9 	bl	bd5dc <__aeabi_dmul>
   bc66a:	a37d      	add	r3, pc, #500	; (adr r3, bc860 <__ieee754_pow+0x560>)
   bc66c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc670:	f000 fdfe 	bl	bd270 <__adddf3>
   bc674:	4622      	mov	r2, r4
   bc676:	462b      	mov	r3, r5
   bc678:	f000 ffb0 	bl	bd5dc <__aeabi_dmul>
   bc67c:	a37a      	add	r3, pc, #488	; (adr r3, bc868 <__ieee754_pow+0x568>)
   bc67e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc682:	f000 fdf5 	bl	bd270 <__adddf3>
   bc686:	4622      	mov	r2, r4
   bc688:	462b      	mov	r3, r5
   bc68a:	f000 ffa7 	bl	bd5dc <__aeabi_dmul>
   bc68e:	a378      	add	r3, pc, #480	; (adr r3, bc870 <__ieee754_pow+0x570>)
   bc690:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc694:	f000 fdec 	bl	bd270 <__adddf3>
   bc698:	4622      	mov	r2, r4
   bc69a:	4680      	mov	r8, r0
   bc69c:	4689      	mov	r9, r1
   bc69e:	462b      	mov	r3, r5
   bc6a0:	4620      	mov	r0, r4
   bc6a2:	4629      	mov	r1, r5
   bc6a4:	f000 ff9a 	bl	bd5dc <__aeabi_dmul>
   bc6a8:	4602      	mov	r2, r0
   bc6aa:	460b      	mov	r3, r1
   bc6ac:	4640      	mov	r0, r8
   bc6ae:	4649      	mov	r1, r9
   bc6b0:	f000 ff94 	bl	bd5dc <__aeabi_dmul>
   bc6b4:	4652      	mov	r2, sl
   bc6b6:	4604      	mov	r4, r0
   bc6b8:	460d      	mov	r5, r1
   bc6ba:	465b      	mov	r3, fp
   bc6bc:	ec51 0b18 	vmov	r0, r1, d8
   bc6c0:	f000 fdd6 	bl	bd270 <__adddf3>
   bc6c4:	ec53 2b19 	vmov	r2, r3, d9
   bc6c8:	f000 ff88 	bl	bd5dc <__aeabi_dmul>
   bc6cc:	4622      	mov	r2, r4
   bc6ce:	462b      	mov	r3, r5
   bc6d0:	f000 fdce 	bl	bd270 <__adddf3>
   bc6d4:	4652      	mov	r2, sl
   bc6d6:	4680      	mov	r8, r0
   bc6d8:	4689      	mov	r9, r1
   bc6da:	465b      	mov	r3, fp
   bc6dc:	4650      	mov	r0, sl
   bc6de:	4659      	mov	r1, fp
   bc6e0:	f000 ff7c 	bl	bd5dc <__aeabi_dmul>
   bc6e4:	4602      	mov	r2, r0
   bc6e6:	460b      	mov	r3, r1
   bc6e8:	ec43 2b1a 	vmov	d10, r2, r3
   bc6ec:	4b6f      	ldr	r3, [pc, #444]	; (bc8ac <__ieee754_pow+0x5ac>)
   bc6ee:	2200      	movs	r2, #0
   bc6f0:	f000 fdbe 	bl	bd270 <__adddf3>
   bc6f4:	4642      	mov	r2, r8
   bc6f6:	464b      	mov	r3, r9
   bc6f8:	f000 fdba 	bl	bd270 <__adddf3>
   bc6fc:	2400      	movs	r4, #0
   bc6fe:	460d      	mov	r5, r1
   bc700:	4622      	mov	r2, r4
   bc702:	462b      	mov	r3, r5
   bc704:	4650      	mov	r0, sl
   bc706:	4659      	mov	r1, fp
   bc708:	f000 ff68 	bl	bd5dc <__aeabi_dmul>
   bc70c:	4b67      	ldr	r3, [pc, #412]	; (bc8ac <__ieee754_pow+0x5ac>)
   bc70e:	4682      	mov	sl, r0
   bc710:	468b      	mov	fp, r1
   bc712:	2200      	movs	r2, #0
   bc714:	4620      	mov	r0, r4
   bc716:	4629      	mov	r1, r5
   bc718:	f000 fda8 	bl	bd26c <__aeabi_dsub>
   bc71c:	ec53 2b1a 	vmov	r2, r3, d10
   bc720:	f000 fda4 	bl	bd26c <__aeabi_dsub>
   bc724:	4602      	mov	r2, r0
   bc726:	460b      	mov	r3, r1
   bc728:	4640      	mov	r0, r8
   bc72a:	4649      	mov	r1, r9
   bc72c:	f000 fd9e 	bl	bd26c <__aeabi_dsub>
   bc730:	ec53 2b18 	vmov	r2, r3, d8
   bc734:	f000 ff52 	bl	bd5dc <__aeabi_dmul>
   bc738:	4622      	mov	r2, r4
   bc73a:	462b      	mov	r3, r5
   bc73c:	4604      	mov	r4, r0
   bc73e:	460d      	mov	r5, r1
   bc740:	ec51 0b19 	vmov	r0, r1, d9
   bc744:	f000 ff4a 	bl	bd5dc <__aeabi_dmul>
   bc748:	4602      	mov	r2, r0
   bc74a:	460b      	mov	r3, r1
   bc74c:	4620      	mov	r0, r4
   bc74e:	4629      	mov	r1, r5
   bc750:	f000 fd8e 	bl	bd270 <__adddf3>
   bc754:	4680      	mov	r8, r0
   bc756:	4689      	mov	r9, r1
   bc758:	4642      	mov	r2, r8
   bc75a:	464b      	mov	r3, r9
   bc75c:	4650      	mov	r0, sl
   bc75e:	4659      	mov	r1, fp
   bc760:	f000 fd86 	bl	bd270 <__adddf3>
   bc764:	a344      	add	r3, pc, #272	; (adr r3, bc878 <__ieee754_pow+0x578>)
   bc766:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc76a:	2000      	movs	r0, #0
   bc76c:	4604      	mov	r4, r0
   bc76e:	460d      	mov	r5, r1
   bc770:	f000 ff34 	bl	bd5dc <__aeabi_dmul>
   bc774:	4652      	mov	r2, sl
   bc776:	ec41 0b19 	vmov	d9, r0, r1
   bc77a:	465b      	mov	r3, fp
   bc77c:	4620      	mov	r0, r4
   bc77e:	4629      	mov	r1, r5
   bc780:	f000 fd74 	bl	bd26c <__aeabi_dsub>
   bc784:	4602      	mov	r2, r0
   bc786:	460b      	mov	r3, r1
   bc788:	4640      	mov	r0, r8
   bc78a:	4649      	mov	r1, r9
   bc78c:	f000 fd6e 	bl	bd26c <__aeabi_dsub>
   bc790:	a33b      	add	r3, pc, #236	; (adr r3, bc880 <__ieee754_pow+0x580>)
   bc792:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc796:	f000 ff21 	bl	bd5dc <__aeabi_dmul>
   bc79a:	4602      	mov	r2, r0
   bc79c:	460b      	mov	r3, r1
   bc79e:	4620      	mov	r0, r4
   bc7a0:	4629      	mov	r1, r5
   bc7a2:	4614      	mov	r4, r2
   bc7a4:	461d      	mov	r5, r3
   bc7a6:	a338      	add	r3, pc, #224	; (adr r3, bc888 <__ieee754_pow+0x588>)
   bc7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7ac:	f000 ff16 	bl	bd5dc <__aeabi_dmul>
   bc7b0:	4602      	mov	r2, r0
   bc7b2:	460b      	mov	r3, r1
   bc7b4:	4620      	mov	r0, r4
   bc7b6:	4629      	mov	r1, r5
   bc7b8:	f000 fd5a 	bl	bd270 <__adddf3>
   bc7bc:	ec53 2b1d 	vmov	r2, r3, d13
   bc7c0:	f000 fd56 	bl	bd270 <__adddf3>
   bc7c4:	4680      	mov	r8, r0
   bc7c6:	9805      	ldr	r0, [sp, #20]
   bc7c8:	4689      	mov	r9, r1
   bc7ca:	f000 fe9d 	bl	bd508 <__aeabi_i2d>
   bc7ce:	4642      	mov	r2, r8
   bc7d0:	4682      	mov	sl, r0
   bc7d2:	468b      	mov	fp, r1
   bc7d4:	464b      	mov	r3, r9
   bc7d6:	ec51 0b19 	vmov	r0, r1, d9
   bc7da:	f000 fd49 	bl	bd270 <__adddf3>
   bc7de:	ec53 2b1c 	vmov	r2, r3, d12
   bc7e2:	f000 fd45 	bl	bd270 <__adddf3>
   bc7e6:	4652      	mov	r2, sl
   bc7e8:	465b      	mov	r3, fp
   bc7ea:	f000 fd41 	bl	bd270 <__adddf3>
   bc7ee:	4652      	mov	r2, sl
   bc7f0:	465b      	mov	r3, fp
   bc7f2:	2000      	movs	r0, #0
   bc7f4:	4604      	mov	r4, r0
   bc7f6:	460d      	mov	r5, r1
   bc7f8:	f000 fd38 	bl	bd26c <__aeabi_dsub>
   bc7fc:	ec53 2b1c 	vmov	r2, r3, d12
   bc800:	f000 fd34 	bl	bd26c <__aeabi_dsub>
   bc804:	ec53 2b19 	vmov	r2, r3, d9
   bc808:	f000 fd30 	bl	bd26c <__aeabi_dsub>
   bc80c:	4602      	mov	r2, r0
   bc80e:	460b      	mov	r3, r1
   bc810:	4640      	mov	r0, r8
   bc812:	4649      	mov	r1, r9
   bc814:	f000 fd2a 	bl	bd26c <__aeabi_dsub>
   bc818:	9b00      	ldr	r3, [sp, #0]
   bc81a:	9a04      	ldr	r2, [sp, #16]
   bc81c:	3b01      	subs	r3, #1
   bc81e:	4313      	orrs	r3, r2
   bc820:	4682      	mov	sl, r0
   bc822:	468b      	mov	fp, r1
   bc824:	f040 81b6 	bne.w	bcb94 <__ieee754_pow+0x894>
   bc828:	ed9f 7b19 	vldr	d7, [pc, #100]	; bc890 <__ieee754_pow+0x590>
   bc82c:	eeb0 8a47 	vmov.f32	s16, s14
   bc830:	eef0 8a67 	vmov.f32	s17, s15
   bc834:	e03c      	b.n	bc8b0 <__ieee754_pow+0x5b0>
   bc836:	bf00      	nop
   bc838:	00000000 	.word	0x00000000
   bc83c:	3ff00000 	.word	0x3ff00000
	...
   bc848:	4a454eef 	.word	0x4a454eef
   bc84c:	3fca7e28 	.word	0x3fca7e28
   bc850:	93c9db65 	.word	0x93c9db65
   bc854:	3fcd864a 	.word	0x3fcd864a
   bc858:	a91d4101 	.word	0xa91d4101
   bc85c:	3fd17460 	.word	0x3fd17460
   bc860:	518f264d 	.word	0x518f264d
   bc864:	3fd55555 	.word	0x3fd55555
   bc868:	db6fabff 	.word	0xdb6fabff
   bc86c:	3fdb6db6 	.word	0x3fdb6db6
   bc870:	33333303 	.word	0x33333303
   bc874:	3fe33333 	.word	0x3fe33333
   bc878:	e0000000 	.word	0xe0000000
   bc87c:	3feec709 	.word	0x3feec709
   bc880:	dc3a03fd 	.word	0xdc3a03fd
   bc884:	3feec709 	.word	0x3feec709
   bc888:	145b01f5 	.word	0x145b01f5
   bc88c:	be3e2fe0 	.word	0xbe3e2fe0
   bc890:	00000000 	.word	0x00000000
   bc894:	bff00000 	.word	0xbff00000
   bc898:	7ff00000 	.word	0x7ff00000
   bc89c:	43400000 	.word	0x43400000
   bc8a0:	0003988e 	.word	0x0003988e
   bc8a4:	000bb679 	.word	0x000bb679
   bc8a8:	3ff00000 	.word	0x3ff00000
   bc8ac:	40080000 	.word	0x40080000
   bc8b0:	2300      	movs	r3, #0
   bc8b2:	e9cd 6700 	strd	r6, r7, [sp]
   bc8b6:	9300      	str	r3, [sp, #0]
   bc8b8:	e9dd 8900 	ldrd	r8, r9, [sp]
   bc8bc:	4630      	mov	r0, r6
   bc8be:	4642      	mov	r2, r8
   bc8c0:	464b      	mov	r3, r9
   bc8c2:	4639      	mov	r1, r7
   bc8c4:	f000 fcd2 	bl	bd26c <__aeabi_dsub>
   bc8c8:	4622      	mov	r2, r4
   bc8ca:	462b      	mov	r3, r5
   bc8cc:	f000 fe86 	bl	bd5dc <__aeabi_dmul>
   bc8d0:	4632      	mov	r2, r6
   bc8d2:	463b      	mov	r3, r7
   bc8d4:	4606      	mov	r6, r0
   bc8d6:	460f      	mov	r7, r1
   bc8d8:	4650      	mov	r0, sl
   bc8da:	4659      	mov	r1, fp
   bc8dc:	f000 fe7e 	bl	bd5dc <__aeabi_dmul>
   bc8e0:	4602      	mov	r2, r0
   bc8e2:	460b      	mov	r3, r1
   bc8e4:	4630      	mov	r0, r6
   bc8e6:	4639      	mov	r1, r7
   bc8e8:	f000 fcc2 	bl	bd270 <__adddf3>
   bc8ec:	4642      	mov	r2, r8
   bc8ee:	464b      	mov	r3, r9
   bc8f0:	4606      	mov	r6, r0
   bc8f2:	460f      	mov	r7, r1
   bc8f4:	4620      	mov	r0, r4
   bc8f6:	4629      	mov	r1, r5
   bc8f8:	f000 fe70 	bl	bd5dc <__aeabi_dmul>
   bc8fc:	4604      	mov	r4, r0
   bc8fe:	460d      	mov	r5, r1
   bc900:	462b      	mov	r3, r5
   bc902:	4630      	mov	r0, r6
   bc904:	4639      	mov	r1, r7
   bc906:	4622      	mov	r2, r4
   bc908:	f000 fcb2 	bl	bd270 <__adddf3>
   bc90c:	4bc2      	ldr	r3, [pc, #776]	; (bcc18 <__ieee754_pow+0x918>)
   bc90e:	4299      	cmp	r1, r3
   bc910:	4680      	mov	r8, r0
   bc912:	4689      	mov	r9, r1
   bc914:	468a      	mov	sl, r1
   bc916:	f340 8118 	ble.w	bcb4a <__ieee754_pow+0x84a>
   bc91a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   bc91e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   bc922:	4303      	orrs	r3, r0
   bc924:	f040 8207 	bne.w	bcd36 <__ieee754_pow+0xa36>
   bc928:	a3a3      	add	r3, pc, #652	; (adr r3, bcbb8 <__ieee754_pow+0x8b8>)
   bc92a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc92e:	4630      	mov	r0, r6
   bc930:	4639      	mov	r1, r7
   bc932:	f000 fc9d 	bl	bd270 <__adddf3>
   bc936:	4602      	mov	r2, r0
   bc938:	460b      	mov	r3, r1
   bc93a:	4640      	mov	r0, r8
   bc93c:	4649      	mov	r1, r9
   bc93e:	4690      	mov	r8, r2
   bc940:	4699      	mov	r9, r3
   bc942:	4622      	mov	r2, r4
   bc944:	462b      	mov	r3, r5
   bc946:	f000 fc91 	bl	bd26c <__aeabi_dsub>
   bc94a:	4602      	mov	r2, r0
   bc94c:	460b      	mov	r3, r1
   bc94e:	4640      	mov	r0, r8
   bc950:	4649      	mov	r1, r9
   bc952:	f001 f8d3 	bl	bdafc <__aeabi_dcmpgt>
   bc956:	2800      	cmp	r0, #0
   bc958:	f040 81ed 	bne.w	bcd36 <__ieee754_pow+0xa36>
   bc95c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   bc960:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   bc964:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   bc968:	fa42 f303 	asr.w	r3, r2, r3
   bc96c:	4453      	add	r3, sl
   bc96e:	49ab      	ldr	r1, [pc, #684]	; (bcc1c <__ieee754_pow+0x91c>)
   bc970:	f3c3 520a 	ubfx	r2, r3, #20, #11
   bc974:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   bc978:	fa41 fc02 	asr.w	ip, r1, r2
   bc97c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   bc980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc984:	f1c2 0214 	rsb	r2, r2, #20
   bc988:	fa41 f202 	asr.w	r2, r1, r2
   bc98c:	2000      	movs	r0, #0
   bc98e:	ea23 010c 	bic.w	r1, r3, ip
   bc992:	f1ba 0f00 	cmp.w	sl, #0
   bc996:	9200      	str	r2, [sp, #0]
   bc998:	460b      	mov	r3, r1
   bc99a:	4602      	mov	r2, r0
   bc99c:	da02      	bge.n	bc9a4 <__ieee754_pow+0x6a4>
   bc99e:	9900      	ldr	r1, [sp, #0]
   bc9a0:	4249      	negs	r1, r1
   bc9a2:	9100      	str	r1, [sp, #0]
   bc9a4:	4620      	mov	r0, r4
   bc9a6:	4629      	mov	r1, r5
   bc9a8:	f000 fc60 	bl	bd26c <__aeabi_dsub>
   bc9ac:	9b00      	ldr	r3, [sp, #0]
   bc9ae:	051b      	lsls	r3, r3, #20
   bc9b0:	9302      	str	r3, [sp, #8]
   bc9b2:	4602      	mov	r2, r0
   bc9b4:	460b      	mov	r3, r1
   bc9b6:	4604      	mov	r4, r0
   bc9b8:	460d      	mov	r5, r1
   bc9ba:	4630      	mov	r0, r6
   bc9bc:	4639      	mov	r1, r7
   bc9be:	f000 fc57 	bl	bd270 <__adddf3>
   bc9c2:	4689      	mov	r9, r1
   bc9c4:	f04f 0800 	mov.w	r8, #0
   bc9c8:	a37d      	add	r3, pc, #500	; (adr r3, bcbc0 <__ieee754_pow+0x8c0>)
   bc9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc9ce:	4640      	mov	r0, r8
   bc9d0:	4649      	mov	r1, r9
   bc9d2:	f000 fe03 	bl	bd5dc <__aeabi_dmul>
   bc9d6:	4622      	mov	r2, r4
   bc9d8:	462b      	mov	r3, r5
   bc9da:	4682      	mov	sl, r0
   bc9dc:	468b      	mov	fp, r1
   bc9de:	4640      	mov	r0, r8
   bc9e0:	4649      	mov	r1, r9
   bc9e2:	f000 fc43 	bl	bd26c <__aeabi_dsub>
   bc9e6:	4602      	mov	r2, r0
   bc9e8:	460b      	mov	r3, r1
   bc9ea:	4630      	mov	r0, r6
   bc9ec:	4639      	mov	r1, r7
   bc9ee:	f000 fc3d 	bl	bd26c <__aeabi_dsub>
   bc9f2:	a375      	add	r3, pc, #468	; (adr r3, bcbc8 <__ieee754_pow+0x8c8>)
   bc9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc9f8:	f000 fdf0 	bl	bd5dc <__aeabi_dmul>
   bc9fc:	a374      	add	r3, pc, #464	; (adr r3, bcbd0 <__ieee754_pow+0x8d0>)
   bc9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca02:	4604      	mov	r4, r0
   bca04:	460d      	mov	r5, r1
   bca06:	4640      	mov	r0, r8
   bca08:	4649      	mov	r1, r9
   bca0a:	f000 fde7 	bl	bd5dc <__aeabi_dmul>
   bca0e:	4602      	mov	r2, r0
   bca10:	460b      	mov	r3, r1
   bca12:	4620      	mov	r0, r4
   bca14:	4629      	mov	r1, r5
   bca16:	f000 fc2b 	bl	bd270 <__adddf3>
   bca1a:	4606      	mov	r6, r0
   bca1c:	460f      	mov	r7, r1
   bca1e:	4632      	mov	r2, r6
   bca20:	463b      	mov	r3, r7
   bca22:	4650      	mov	r0, sl
   bca24:	4659      	mov	r1, fp
   bca26:	f000 fc23 	bl	bd270 <__adddf3>
   bca2a:	4652      	mov	r2, sl
   bca2c:	465b      	mov	r3, fp
   bca2e:	4604      	mov	r4, r0
   bca30:	460d      	mov	r5, r1
   bca32:	f000 fc1b 	bl	bd26c <__aeabi_dsub>
   bca36:	4602      	mov	r2, r0
   bca38:	460b      	mov	r3, r1
   bca3a:	4630      	mov	r0, r6
   bca3c:	4639      	mov	r1, r7
   bca3e:	f000 fc15 	bl	bd26c <__aeabi_dsub>
   bca42:	4622      	mov	r2, r4
   bca44:	4680      	mov	r8, r0
   bca46:	4689      	mov	r9, r1
   bca48:	462b      	mov	r3, r5
   bca4a:	4620      	mov	r0, r4
   bca4c:	4629      	mov	r1, r5
   bca4e:	f000 fdc5 	bl	bd5dc <__aeabi_dmul>
   bca52:	a361      	add	r3, pc, #388	; (adr r3, bcbd8 <__ieee754_pow+0x8d8>)
   bca54:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca58:	4606      	mov	r6, r0
   bca5a:	460f      	mov	r7, r1
   bca5c:	f000 fdbe 	bl	bd5dc <__aeabi_dmul>
   bca60:	a35f      	add	r3, pc, #380	; (adr r3, bcbe0 <__ieee754_pow+0x8e0>)
   bca62:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca66:	f000 fc01 	bl	bd26c <__aeabi_dsub>
   bca6a:	4632      	mov	r2, r6
   bca6c:	463b      	mov	r3, r7
   bca6e:	f000 fdb5 	bl	bd5dc <__aeabi_dmul>
   bca72:	a35d      	add	r3, pc, #372	; (adr r3, bcbe8 <__ieee754_pow+0x8e8>)
   bca74:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca78:	f000 fbfa 	bl	bd270 <__adddf3>
   bca7c:	4632      	mov	r2, r6
   bca7e:	463b      	mov	r3, r7
   bca80:	f000 fdac 	bl	bd5dc <__aeabi_dmul>
   bca84:	a35a      	add	r3, pc, #360	; (adr r3, bcbf0 <__ieee754_pow+0x8f0>)
   bca86:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca8a:	f000 fbef 	bl	bd26c <__aeabi_dsub>
   bca8e:	4632      	mov	r2, r6
   bca90:	463b      	mov	r3, r7
   bca92:	f000 fda3 	bl	bd5dc <__aeabi_dmul>
   bca96:	a358      	add	r3, pc, #352	; (adr r3, bcbf8 <__ieee754_pow+0x8f8>)
   bca98:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca9c:	f000 fbe8 	bl	bd270 <__adddf3>
   bcaa0:	4632      	mov	r2, r6
   bcaa2:	463b      	mov	r3, r7
   bcaa4:	f000 fd9a 	bl	bd5dc <__aeabi_dmul>
   bcaa8:	4602      	mov	r2, r0
   bcaaa:	460b      	mov	r3, r1
   bcaac:	4620      	mov	r0, r4
   bcaae:	4629      	mov	r1, r5
   bcab0:	f000 fbdc 	bl	bd26c <__aeabi_dsub>
   bcab4:	4606      	mov	r6, r0
   bcab6:	460f      	mov	r7, r1
   bcab8:	4632      	mov	r2, r6
   bcaba:	463b      	mov	r3, r7
   bcabc:	4620      	mov	r0, r4
   bcabe:	4629      	mov	r1, r5
   bcac0:	f000 fd8c 	bl	bd5dc <__aeabi_dmul>
   bcac4:	4602      	mov	r2, r0
   bcac6:	460b      	mov	r3, r1
   bcac8:	4630      	mov	r0, r6
   bcaca:	4639      	mov	r1, r7
   bcacc:	4616      	mov	r6, r2
   bcace:	461f      	mov	r7, r3
   bcad0:	2200      	movs	r2, #0
   bcad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bcad6:	f000 fbc9 	bl	bd26c <__aeabi_dsub>
   bcada:	4602      	mov	r2, r0
   bcadc:	460b      	mov	r3, r1
   bcade:	4630      	mov	r0, r6
   bcae0:	4639      	mov	r1, r7
   bcae2:	f000 fea5 	bl	bd830 <__aeabi_ddiv>
   bcae6:	4642      	mov	r2, r8
   bcae8:	4606      	mov	r6, r0
   bcaea:	460f      	mov	r7, r1
   bcaec:	464b      	mov	r3, r9
   bcaee:	4620      	mov	r0, r4
   bcaf0:	4629      	mov	r1, r5
   bcaf2:	f000 fd73 	bl	bd5dc <__aeabi_dmul>
   bcaf6:	4642      	mov	r2, r8
   bcaf8:	464b      	mov	r3, r9
   bcafa:	f000 fbb9 	bl	bd270 <__adddf3>
   bcafe:	4602      	mov	r2, r0
   bcb00:	460b      	mov	r3, r1
   bcb02:	4630      	mov	r0, r6
   bcb04:	4639      	mov	r1, r7
   bcb06:	f000 fbb1 	bl	bd26c <__aeabi_dsub>
   bcb0a:	4622      	mov	r2, r4
   bcb0c:	462b      	mov	r3, r5
   bcb0e:	f000 fbad 	bl	bd26c <__aeabi_dsub>
   bcb12:	4602      	mov	r2, r0
   bcb14:	460b      	mov	r3, r1
   bcb16:	2000      	movs	r0, #0
   bcb18:	4941      	ldr	r1, [pc, #260]	; (bcc20 <__ieee754_pow+0x920>)
   bcb1a:	f000 fba7 	bl	bd26c <__aeabi_dsub>
   bcb1e:	9a02      	ldr	r2, [sp, #8]
   bcb20:	460b      	mov	r3, r1
   bcb22:	4413      	add	r3, r2
   bcb24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   bcb28:	f2c0 8143 	blt.w	bcdb2 <__ieee754_pow+0xab2>
   bcb2c:	4619      	mov	r1, r3
   bcb2e:	ec53 2b18 	vmov	r2, r3, d8
   bcb32:	f000 fd53 	bl	bd5dc <__aeabi_dmul>
   bcb36:	ec41 0b10 	vmov	d0, r0, r1
   bcb3a:	e42d      	b.n	bc398 <__ieee754_pow+0x98>
   bcb3c:	f1bb 0f00 	cmp.w	fp, #0
   bcb40:	f6ff aca0 	blt.w	bc484 <__ieee754_pow+0x184>
   bcb44:	ed9f 0b2e 	vldr	d0, [pc, #184]	; bcc00 <__ieee754_pow+0x900>
   bcb48:	e426      	b.n	bc398 <__ieee754_pow+0x98>
   bcb4a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; bcc28 <__ieee754_pow+0x928>
   bcb4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bcb52:	4563      	cmp	r3, ip
   bcb54:	f340 80e7 	ble.w	bcd26 <__ieee754_pow+0xa26>
   bcb58:	4b32      	ldr	r3, [pc, #200]	; (bcc24 <__ieee754_pow+0x924>)
   bcb5a:	440b      	add	r3, r1
   bcb5c:	4303      	orrs	r3, r0
   bcb5e:	d10a      	bne.n	bcb76 <__ieee754_pow+0x876>
   bcb60:	4622      	mov	r2, r4
   bcb62:	462b      	mov	r3, r5
   bcb64:	f000 fb82 	bl	bd26c <__aeabi_dsub>
   bcb68:	4632      	mov	r2, r6
   bcb6a:	463b      	mov	r3, r7
   bcb6c:	f000 ffbc 	bl	bdae8 <__aeabi_dcmpge>
   bcb70:	2800      	cmp	r0, #0
   bcb72:	f43f aef3 	beq.w	bc95c <__ieee754_pow+0x65c>
   bcb76:	a324      	add	r3, pc, #144	; (adr r3, bcc08 <__ieee754_pow+0x908>)
   bcb78:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb7c:	ec51 0b18 	vmov	r0, r1, d8
   bcb80:	f000 fd2c 	bl	bd5dc <__aeabi_dmul>
   bcb84:	a320      	add	r3, pc, #128	; (adr r3, bcc08 <__ieee754_pow+0x908>)
   bcb86:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb8a:	f000 fd27 	bl	bd5dc <__aeabi_dmul>
   bcb8e:	ec41 0b10 	vmov	d0, r0, r1
   bcb92:	e401      	b.n	bc398 <__ieee754_pow+0x98>
   bcb94:	ed9f 7b1e 	vldr	d7, [pc, #120]	; bcc10 <__ieee754_pow+0x910>
   bcb98:	eeb0 8a47 	vmov.f32	s16, s14
   bcb9c:	eef0 8a67 	vmov.f32	s17, s15
   bcba0:	e686      	b.n	bc8b0 <__ieee754_pow+0x5b0>
   bcba2:	f1bb 0f00 	cmp.w	fp, #0
   bcba6:	dacd      	bge.n	bcb44 <__ieee754_pow+0x844>
   bcba8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   bcbac:	ee00 6a10 	vmov	s0, r6
   bcbb0:	ee00 3a90 	vmov	s1, r3
   bcbb4:	f7ff bbf0 	b.w	bc398 <__ieee754_pow+0x98>
   bcbb8:	652b82fe 	.word	0x652b82fe
   bcbbc:	3c971547 	.word	0x3c971547
   bcbc0:	00000000 	.word	0x00000000
   bcbc4:	3fe62e43 	.word	0x3fe62e43
   bcbc8:	fefa39ef 	.word	0xfefa39ef
   bcbcc:	3fe62e42 	.word	0x3fe62e42
   bcbd0:	0ca86c39 	.word	0x0ca86c39
   bcbd4:	be205c61 	.word	0xbe205c61
   bcbd8:	72bea4d0 	.word	0x72bea4d0
   bcbdc:	3e663769 	.word	0x3e663769
   bcbe0:	c5d26bf1 	.word	0xc5d26bf1
   bcbe4:	3ebbbd41 	.word	0x3ebbbd41
   bcbe8:	af25de2c 	.word	0xaf25de2c
   bcbec:	3f11566a 	.word	0x3f11566a
   bcbf0:	16bebd93 	.word	0x16bebd93
   bcbf4:	3f66c16c 	.word	0x3f66c16c
   bcbf8:	5555553e 	.word	0x5555553e
   bcbfc:	3fc55555 	.word	0x3fc55555
	...
   bcc08:	c2f8f359 	.word	0xc2f8f359
   bcc0c:	01a56e1f 	.word	0x01a56e1f
   bcc10:	00000000 	.word	0x00000000
   bcc14:	3ff00000 	.word	0x3ff00000
   bcc18:	408fffff 	.word	0x408fffff
   bcc1c:	000fffff 	.word	0x000fffff
   bcc20:	3ff00000 	.word	0x3ff00000
   bcc24:	3f6f3400 	.word	0x3f6f3400
   bcc28:	4090cbff 	.word	0x4090cbff
   bcc2c:	4598      	cmp	r8, r3
   bcc2e:	db85      	blt.n	bcb3c <__ieee754_pow+0x83c>
   bcc30:	4b7d      	ldr	r3, [pc, #500]	; (bce28 <__ieee754_pow+0xb28>)
   bcc32:	4598      	cmp	r8, r3
   bcc34:	f73f ac22 	bgt.w	bc47c <__ieee754_pow+0x17c>
   bcc38:	ec51 0b10 	vmov	r0, r1, d0
   bcc3c:	4b7a      	ldr	r3, [pc, #488]	; (bce28 <__ieee754_pow+0xb28>)
   bcc3e:	2200      	movs	r2, #0
   bcc40:	f000 fb14 	bl	bd26c <__aeabi_dsub>
   bcc44:	a368      	add	r3, pc, #416	; (adr r3, bcde8 <__ieee754_pow+0xae8>)
   bcc46:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc4a:	4604      	mov	r4, r0
   bcc4c:	460d      	mov	r5, r1
   bcc4e:	f000 fcc5 	bl	bd5dc <__aeabi_dmul>
   bcc52:	a367      	add	r3, pc, #412	; (adr r3, bcdf0 <__ieee754_pow+0xaf0>)
   bcc54:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc58:	4682      	mov	sl, r0
   bcc5a:	468b      	mov	fp, r1
   bcc5c:	4620      	mov	r0, r4
   bcc5e:	4629      	mov	r1, r5
   bcc60:	f000 fcbc 	bl	bd5dc <__aeabi_dmul>
   bcc64:	4b71      	ldr	r3, [pc, #452]	; (bce2c <__ieee754_pow+0xb2c>)
   bcc66:	ec41 0b18 	vmov	d8, r0, r1
   bcc6a:	2200      	movs	r2, #0
   bcc6c:	4620      	mov	r0, r4
   bcc6e:	4629      	mov	r1, r5
   bcc70:	f000 fcb4 	bl	bd5dc <__aeabi_dmul>
   bcc74:	4602      	mov	r2, r0
   bcc76:	460b      	mov	r3, r1
   bcc78:	a15f      	add	r1, pc, #380	; (adr r1, bcdf8 <__ieee754_pow+0xaf8>)
   bcc7a:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc7e:	f000 faf5 	bl	bd26c <__aeabi_dsub>
   bcc82:	4622      	mov	r2, r4
   bcc84:	462b      	mov	r3, r5
   bcc86:	f000 fca9 	bl	bd5dc <__aeabi_dmul>
   bcc8a:	4602      	mov	r2, r0
   bcc8c:	460b      	mov	r3, r1
   bcc8e:	2000      	movs	r0, #0
   bcc90:	4967      	ldr	r1, [pc, #412]	; (bce30 <__ieee754_pow+0xb30>)
   bcc92:	f000 faeb 	bl	bd26c <__aeabi_dsub>
   bcc96:	4622      	mov	r2, r4
   bcc98:	4680      	mov	r8, r0
   bcc9a:	4689      	mov	r9, r1
   bcc9c:	462b      	mov	r3, r5
   bcc9e:	4620      	mov	r0, r4
   bcca0:	4629      	mov	r1, r5
   bcca2:	f000 fc9b 	bl	bd5dc <__aeabi_dmul>
   bcca6:	4602      	mov	r2, r0
   bcca8:	460b      	mov	r3, r1
   bccaa:	4640      	mov	r0, r8
   bccac:	4649      	mov	r1, r9
   bccae:	f000 fc95 	bl	bd5dc <__aeabi_dmul>
   bccb2:	a353      	add	r3, pc, #332	; (adr r3, bce00 <__ieee754_pow+0xb00>)
   bccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccb8:	f000 fc90 	bl	bd5dc <__aeabi_dmul>
   bccbc:	4602      	mov	r2, r0
   bccbe:	460b      	mov	r3, r1
   bccc0:	ec51 0b18 	vmov	r0, r1, d8
   bccc4:	f000 fad2 	bl	bd26c <__aeabi_dsub>
   bccc8:	4680      	mov	r8, r0
   bccca:	4689      	mov	r9, r1
   bcccc:	4642      	mov	r2, r8
   bccce:	464b      	mov	r3, r9
   bccd0:	4650      	mov	r0, sl
   bccd2:	4659      	mov	r1, fp
   bccd4:	f000 facc 	bl	bd270 <__adddf3>
   bccd8:	2000      	movs	r0, #0
   bccda:	4652      	mov	r2, sl
   bccdc:	465b      	mov	r3, fp
   bccde:	4604      	mov	r4, r0
   bcce0:	460d      	mov	r5, r1
   bcce2:	e591      	b.n	bc808 <__ieee754_pow+0x508>
   bcce4:	4622      	mov	r2, r4
   bcce6:	462b      	mov	r3, r5
   bcce8:	4620      	mov	r0, r4
   bccea:	4629      	mov	r1, r5
   bccec:	f000 fc76 	bl	bd5dc <__aeabi_dmul>
   bccf0:	ec41 0b10 	vmov	d0, r0, r1
   bccf4:	f7ff bb50 	b.w	bc398 <__ieee754_pow+0x98>
   bccf8:	494b      	ldr	r1, [pc, #300]	; (bce28 <__ieee754_pow+0xb28>)
   bccfa:	2000      	movs	r0, #0
   bccfc:	4622      	mov	r2, r4
   bccfe:	462b      	mov	r3, r5
   bcd00:	f000 fd96 	bl	bd830 <__aeabi_ddiv>
   bcd04:	ec41 0b10 	vmov	d0, r0, r1
   bcd08:	f7ff bb46 	b.w	bc398 <__ieee754_pow+0x98>
   bcd0c:	2b00      	cmp	r3, #0
   bcd0e:	d144      	bne.n	bcd9a <__ieee754_pow+0xa9a>
   bcd10:	f1c1 0114 	rsb	r1, r1, #20
   bcd14:	fa4a f001 	asr.w	r0, sl, r1
   bcd18:	fa00 f101 	lsl.w	r1, r0, r1
   bcd1c:	4551      	cmp	r1, sl
   bcd1e:	d05a      	beq.n	bcdd6 <__ieee754_pow+0xad6>
   bcd20:	9300      	str	r3, [sp, #0]
   bcd22:	f7ff bb17 	b.w	bc354 <__ieee754_pow+0x54>
   bcd26:	4a42      	ldr	r2, [pc, #264]	; (bce30 <__ieee754_pow+0xb30>)
   bcd28:	4293      	cmp	r3, r2
   bcd2a:	dc5b      	bgt.n	bcde4 <__ieee754_pow+0xae4>
   bcd2c:	e9dd 1200 	ldrd	r1, r2, [sp]
   bcd30:	9102      	str	r1, [sp, #8]
   bcd32:	9100      	str	r1, [sp, #0]
   bcd34:	e646      	b.n	bc9c4 <__ieee754_pow+0x6c4>
   bcd36:	a334      	add	r3, pc, #208	; (adr r3, bce08 <__ieee754_pow+0xb08>)
   bcd38:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd3c:	ec51 0b18 	vmov	r0, r1, d8
   bcd40:	f000 fc4c 	bl	bd5dc <__aeabi_dmul>
   bcd44:	a330      	add	r3, pc, #192	; (adr r3, bce08 <__ieee754_pow+0xb08>)
   bcd46:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd4a:	f000 fc47 	bl	bd5dc <__aeabi_dmul>
   bcd4e:	ec41 0b10 	vmov	d0, r0, r1
   bcd52:	f7ff bb21 	b.w	bc398 <__ieee754_pow+0x98>
   bcd56:	9b00      	ldr	r3, [sp, #0]
   bcd58:	2b01      	cmp	r3, #1
   bcd5a:	f47f ab1d 	bne.w	bc398 <__ieee754_pow+0x98>
   bcd5e:	ee10 1a90 	vmov	r1, s1
   bcd62:	ee10 2a10 	vmov	r2, s0
   bcd66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcd6a:	ec43 2b10 	vmov	d0, r2, r3
   bcd6e:	f7ff bb13 	b.w	bc398 <__ieee754_pow+0x98>
   bcd72:	ed9f 7b27 	vldr	d7, [pc, #156]	; bce10 <__ieee754_pow+0xb10>
   bcd76:	eeb0 ca47 	vmov.f32	s24, s14
   bcd7a:	eef0 ca67 	vmov.f32	s25, s15
   bcd7e:	ed9f 7b26 	vldr	d7, [pc, #152]	; bce18 <__ieee754_pow+0xb18>
   bcd82:	eeb0 da47 	vmov.f32	s26, s14
   bcd86:	eef0 da67 	vmov.f32	s27, s15
   bcd8a:	ed9f 7b25 	vldr	d7, [pc, #148]	; bce20 <__ieee754_pow+0xb20>
   bcd8e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   bcd92:	ec53 2b17 	vmov	r2, r3, d7
   bcd96:	f7ff bbeb 	b.w	bc570 <__ieee754_pow+0x270>
   bcd9a:	ec45 4b10 	vmov	d0, r4, r5
   bcd9e:	9200      	str	r2, [sp, #0]
   bcda0:	f000 f914 	bl	bcfcc <fabs>
   bcda4:	9a00      	ldr	r2, [sp, #0]
   bcda6:	2a00      	cmp	r2, #0
   bcda8:	f47f ab92 	bne.w	bc4d0 <__ieee754_pow+0x1d0>
   bcdac:	9200      	str	r2, [sp, #0]
   bcdae:	f7ff bb26 	b.w	bc3fe <__ieee754_pow+0xfe>
   bcdb2:	ec41 0b10 	vmov	d0, r0, r1
   bcdb6:	9800      	ldr	r0, [sp, #0]
   bcdb8:	f000 f9c2 	bl	bd140 <scalbn>
   bcdbc:	ec51 0b10 	vmov	r0, r1, d0
   bcdc0:	e6b5      	b.n	bcb2e <__ieee754_pow+0x82e>
   bcdc2:	f000 0001 	and.w	r0, r0, #1
   bcdc6:	f1c0 0102 	rsb	r1, r0, #2
   bcdca:	9100      	str	r1, [sp, #0]
   bcdcc:	2b00      	cmp	r3, #0
   bcdce:	f43f aac1 	beq.w	bc354 <__ieee754_pow+0x54>
   bcdd2:	f7ff bb0d 	b.w	bc3f0 <__ieee754_pow+0xf0>
   bcdd6:	f000 0001 	and.w	r0, r0, #1
   bcdda:	f1c0 0302 	rsb	r3, r0, #2
   bcdde:	9300      	str	r3, [sp, #0]
   bcde0:	f7ff bab8 	b.w	bc354 <__ieee754_pow+0x54>
   bcde4:	151b      	asrs	r3, r3, #20
   bcde6:	e5bb      	b.n	bc960 <__ieee754_pow+0x660>
   bcde8:	60000000 	.word	0x60000000
   bcdec:	3ff71547 	.word	0x3ff71547
   bcdf0:	f85ddf44 	.word	0xf85ddf44
   bcdf4:	3e54ae0b 	.word	0x3e54ae0b
   bcdf8:	55555555 	.word	0x55555555
   bcdfc:	3fd55555 	.word	0x3fd55555
   bce00:	652b82fe 	.word	0x652b82fe
   bce04:	3ff71547 	.word	0x3ff71547
   bce08:	8800759c 	.word	0x8800759c
   bce0c:	7e37e43c 	.word	0x7e37e43c
   bce10:	40000000 	.word	0x40000000
   bce14:	3fe2b803 	.word	0x3fe2b803
   bce18:	43cfd006 	.word	0x43cfd006
   bce1c:	3e4cfdeb 	.word	0x3e4cfdeb
   bce20:	00000000 	.word	0x00000000
   bce24:	3ff80000 	.word	0x3ff80000
   bce28:	3ff00000 	.word	0x3ff00000
   bce2c:	3fd00000 	.word	0x3fd00000
   bce30:	3fe00000 	.word	0x3fe00000

000bce34 <__ieee754_sqrt>:
   bce34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce38:	4a63      	ldr	r2, [pc, #396]	; (bcfc8 <__ieee754_sqrt+0x194>)
   bce3a:	ec55 4b10 	vmov	r4, r5, d0
   bce3e:	43aa      	bics	r2, r5
   bce40:	f000 809f 	beq.w	bcf82 <__ieee754_sqrt+0x14e>
   bce44:	2d00      	cmp	r5, #0
   bce46:	ee10 ca10 	vmov	ip, s0
   bce4a:	462b      	mov	r3, r5
   bce4c:	dd54      	ble.n	bcef8 <__ieee754_sqrt+0xc4>
   bce4e:	1529      	asrs	r1, r5, #20
   bce50:	d063      	beq.n	bcf1a <__ieee754_sqrt+0xe6>
   bce52:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bce56:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bce5a:	07c9      	lsls	r1, r1, #31
   bce5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bce60:	d404      	bmi.n	bce6c <__ieee754_sqrt+0x38>
   bce62:	005b      	lsls	r3, r3, #1
   bce64:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bce68:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bce6c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bce70:	2600      	movs	r6, #0
   bce72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bce76:	107f      	asrs	r7, r7, #1
   bce78:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bce7c:	f04f 0e16 	mov.w	lr, #22
   bce80:	4634      	mov	r4, r6
   bce82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bce86:	18a1      	adds	r1, r4, r2
   bce88:	4299      	cmp	r1, r3
   bce8a:	dc02      	bgt.n	bce92 <__ieee754_sqrt+0x5e>
   bce8c:	1a5b      	subs	r3, r3, r1
   bce8e:	188c      	adds	r4, r1, r2
   bce90:	4416      	add	r6, r2
   bce92:	005b      	lsls	r3, r3, #1
   bce94:	f1be 0e01 	subs.w	lr, lr, #1
   bce98:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bce9c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bcea0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcea4:	d1ef      	bne.n	bce86 <__ieee754_sqrt+0x52>
   bcea6:	4675      	mov	r5, lr
   bcea8:	2020      	movs	r0, #32
   bceaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bceae:	e00a      	b.n	bcec6 <__ieee754_sqrt+0x92>
   bceb0:	d044      	beq.n	bcf3c <__ieee754_sqrt+0x108>
   bceb2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bceb6:	3801      	subs	r0, #1
   bceb8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bcebc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bcec0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bcec4:	d043      	beq.n	bcf4e <__ieee754_sqrt+0x11a>
   bcec6:	42a3      	cmp	r3, r4
   bcec8:	eb02 010e 	add.w	r1, r2, lr
   bcecc:	ddf0      	ble.n	bceb0 <__ieee754_sqrt+0x7c>
   bcece:	2900      	cmp	r1, #0
   bced0:	eb01 0e02 	add.w	lr, r1, r2
   bced4:	db0a      	blt.n	bceec <__ieee754_sqrt+0xb8>
   bced6:	46a0      	mov	r8, r4
   bced8:	1b1b      	subs	r3, r3, r4
   bceda:	4561      	cmp	r1, ip
   bcedc:	bf88      	it	hi
   bcede:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bcee2:	ebac 0c01 	sub.w	ip, ip, r1
   bcee6:	4415      	add	r5, r2
   bcee8:	4644      	mov	r4, r8
   bceea:	e7e2      	b.n	bceb2 <__ieee754_sqrt+0x7e>
   bceec:	f1be 0f00 	cmp.w	lr, #0
   bcef0:	dbf1      	blt.n	bced6 <__ieee754_sqrt+0xa2>
   bcef2:	f104 0801 	add.w	r8, r4, #1
   bcef6:	e7ef      	b.n	bced8 <__ieee754_sqrt+0xa4>
   bcef8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bcefc:	4322      	orrs	r2, r4
   bcefe:	d038      	beq.n	bcf72 <__ieee754_sqrt+0x13e>
   bcf00:	2d00      	cmp	r5, #0
   bcf02:	d14e      	bne.n	bcfa2 <__ieee754_sqrt+0x16e>
   bcf04:	4629      	mov	r1, r5
   bcf06:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bcf0a:	3915      	subs	r1, #21
   bcf0c:	4613      	mov	r3, r2
   bcf0e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bcf12:	2a00      	cmp	r2, #0
   bcf14:	d0f7      	beq.n	bcf06 <__ieee754_sqrt+0xd2>
   bcf16:	02d6      	lsls	r6, r2, #11
   bcf18:	d450      	bmi.n	bcfbc <__ieee754_sqrt+0x188>
   bcf1a:	2000      	movs	r0, #0
   bcf1c:	005b      	lsls	r3, r3, #1
   bcf1e:	02dd      	lsls	r5, r3, #11
   bcf20:	4604      	mov	r4, r0
   bcf22:	f100 0001 	add.w	r0, r0, #1
   bcf26:	d5f9      	bpl.n	bcf1c <__ieee754_sqrt+0xe8>
   bcf28:	461a      	mov	r2, r3
   bcf2a:	4663      	mov	r3, ip
   bcf2c:	fa0c fc00 	lsl.w	ip, ip, r0
   bcf30:	f1c0 0020 	rsb	r0, r0, #32
   bcf34:	40c3      	lsrs	r3, r0
   bcf36:	1b09      	subs	r1, r1, r4
   bcf38:	4313      	orrs	r3, r2
   bcf3a:	e78a      	b.n	bce52 <__ieee754_sqrt+0x1e>
   bcf3c:	4561      	cmp	r1, ip
   bcf3e:	d8b8      	bhi.n	bceb2 <__ieee754_sqrt+0x7e>
   bcf40:	2900      	cmp	r1, #0
   bcf42:	eb01 0e02 	add.w	lr, r1, r2
   bcf46:	dbd1      	blt.n	bceec <__ieee754_sqrt+0xb8>
   bcf48:	4698      	mov	r8, r3
   bcf4a:	2300      	movs	r3, #0
   bcf4c:	e7c9      	b.n	bcee2 <__ieee754_sqrt+0xae>
   bcf4e:	ea53 030c 	orrs.w	r3, r3, ip
   bcf52:	d110      	bne.n	bcf76 <__ieee754_sqrt+0x142>
   bcf54:	0868      	lsrs	r0, r5, #1
   bcf56:	1071      	asrs	r1, r6, #1
   bcf58:	07f3      	lsls	r3, r6, #31
   bcf5a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bcf5e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bcf62:	bf48      	it	mi
   bcf64:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bcf68:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bcf6c:	4602      	mov	r2, r0
   bcf6e:	ec43 2b10 	vmov	d0, r2, r3
   bcf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcf76:	1c6a      	adds	r2, r5, #1
   bcf78:	bf16      	itet	ne
   bcf7a:	1c68      	addne	r0, r5, #1
   bcf7c:	3601      	addeq	r6, #1
   bcf7e:	0840      	lsrne	r0, r0, #1
   bcf80:	e7e9      	b.n	bcf56 <__ieee754_sqrt+0x122>
   bcf82:	ee10 2a10 	vmov	r2, s0
   bcf86:	ee10 0a10 	vmov	r0, s0
   bcf8a:	462b      	mov	r3, r5
   bcf8c:	4629      	mov	r1, r5
   bcf8e:	f000 fb25 	bl	bd5dc <__aeabi_dmul>
   bcf92:	4622      	mov	r2, r4
   bcf94:	462b      	mov	r3, r5
   bcf96:	f000 f96b 	bl	bd270 <__adddf3>
   bcf9a:	ec41 0b10 	vmov	d0, r0, r1
   bcf9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcfa2:	ee10 2a10 	vmov	r2, s0
   bcfa6:	4620      	mov	r0, r4
   bcfa8:	4629      	mov	r1, r5
   bcfaa:	f000 f95f 	bl	bd26c <__aeabi_dsub>
   bcfae:	4602      	mov	r2, r0
   bcfb0:	460b      	mov	r3, r1
   bcfb2:	f000 fc3d 	bl	bd830 <__aeabi_ddiv>
   bcfb6:	ec41 0b10 	vmov	d0, r0, r1
   bcfba:	e7da      	b.n	bcf72 <__ieee754_sqrt+0x13e>
   bcfbc:	4663      	mov	r3, ip
   bcfbe:	2020      	movs	r0, #32
   bcfc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bcfc4:	e7b6      	b.n	bcf34 <__ieee754_sqrt+0x100>
   bcfc6:	bf00      	nop
   bcfc8:	7ff00000 	.word	0x7ff00000

000bcfcc <fabs>:
   bcfcc:	ec51 0b10 	vmov	r0, r1, d0
   bcfd0:	ee10 2a10 	vmov	r2, s0
   bcfd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bcfd8:	ec43 2b10 	vmov	d0, r2, r3
   bcfdc:	4770      	bx	lr
   bcfde:	bf00      	nop

000bcfe0 <finite>:
   bcfe0:	b082      	sub	sp, #8
   bcfe2:	ed8d 0b00 	vstr	d0, [sp]
   bcfe6:	9801      	ldr	r0, [sp, #4]
   bcfe8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bcfec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bcff0:	0fc0      	lsrs	r0, r0, #31
   bcff2:	b002      	add	sp, #8
   bcff4:	4770      	bx	lr
   bcff6:	bf00      	nop

000bcff8 <nan>:
   bcff8:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd000 <nan+0x8>
   bcffc:	4770      	bx	lr
   bcffe:	bf00      	nop
   bd000:	00000000 	.word	0x00000000
   bd004:	7ff80000 	.word	0x7ff80000

000bd008 <rint>:
   bd008:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd00a:	ec53 2b10 	vmov	r2, r3, d0
   bd00e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bd012:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bd016:	2913      	cmp	r1, #19
   bd018:	ee10 0a10 	vmov	r0, s0
   bd01c:	b083      	sub	sp, #12
   bd01e:	461c      	mov	r4, r3
   bd020:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   bd024:	dc3a      	bgt.n	bd09c <rint+0x94>
   bd026:	2900      	cmp	r1, #0
   bd028:	db30      	blt.n	bd08c <rint+0x84>
   bd02a:	4d42      	ldr	r5, [pc, #264]	; (bd134 <rint+0x12c>)
   bd02c:	fa45 fc01 	asr.w	ip, r5, r1
   bd030:	ea03 050c 	and.w	r5, r3, ip
   bd034:	4315      	orrs	r5, r2
   bd036:	d02d      	beq.n	bd094 <rint+0x8c>
   bd038:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   bd03c:	4318      	orrs	r0, r3
   bd03e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   bd042:	d00c      	beq.n	bd05e <rint+0x56>
   bd044:	ea24 0c0c 	bic.w	ip, r4, ip
   bd048:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bd04c:	2913      	cmp	r1, #19
   bd04e:	fa44 f101 	asr.w	r1, r4, r1
   bd052:	bf0c      	ite	eq
   bd054:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bd058:	2000      	movne	r0, #0
   bd05a:	ea4c 0401 	orr.w	r4, ip, r1
   bd05e:	4936      	ldr	r1, [pc, #216]	; (bd138 <rint+0x130>)
   bd060:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bd064:	4623      	mov	r3, r4
   bd066:	e9de 4500 	ldrd	r4, r5, [lr]
   bd06a:	4602      	mov	r2, r0
   bd06c:	4629      	mov	r1, r5
   bd06e:	4620      	mov	r0, r4
   bd070:	f000 f8fe 	bl	bd270 <__adddf3>
   bd074:	e9cd 0100 	strd	r0, r1, [sp]
   bd078:	e9dd 0100 	ldrd	r0, r1, [sp]
   bd07c:	4622      	mov	r2, r4
   bd07e:	462b      	mov	r3, r5
   bd080:	f000 f8f4 	bl	bd26c <__aeabi_dsub>
   bd084:	ec41 0b10 	vmov	d0, r0, r1
   bd088:	b003      	add	sp, #12
   bd08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd08c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bd090:	4311      	orrs	r1, r2
   bd092:	d124      	bne.n	bd0de <rint+0xd6>
   bd094:	ec43 2b10 	vmov	d0, r2, r3
   bd098:	b003      	add	sp, #12
   bd09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd09c:	2933      	cmp	r1, #51	; 0x33
   bd09e:	dd08      	ble.n	bd0b2 <rint+0xaa>
   bd0a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bd0a4:	d1f6      	bne.n	bd094 <rint+0x8c>
   bd0a6:	4619      	mov	r1, r3
   bd0a8:	f000 f8e2 	bl	bd270 <__adddf3>
   bd0ac:	ec41 0b10 	vmov	d0, r0, r1
   bd0b0:	e7f2      	b.n	bd098 <rint+0x90>
   bd0b2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bd0b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bd0ba:	fa21 f10c 	lsr.w	r1, r1, ip
   bd0be:	420a      	tst	r2, r1
   bd0c0:	d0e8      	beq.n	bd094 <rint+0x8c>
   bd0c2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bd0c6:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bd0ca:	d0c8      	beq.n	bd05e <rint+0x56>
   bd0cc:	ea20 0303 	bic.w	r3, r0, r3
   bd0d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bd0d4:	fa40 fc0c 	asr.w	ip, r0, ip
   bd0d8:	ea43 000c 	orr.w	r0, r3, ip
   bd0dc:	e7bf      	b.n	bd05e <rint+0x56>
   bd0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bd0e2:	4318      	orrs	r0, r3
   bd0e4:	4a14      	ldr	r2, [pc, #80]	; (bd138 <rint+0x130>)
   bd0e6:	4243      	negs	r3, r0
   bd0e8:	4303      	orrs	r3, r0
   bd0ea:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   bd0ee:	0b1b      	lsrs	r3, r3, #12
   bd0f0:	0c62      	lsrs	r2, r4, #17
   bd0f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   bd0f6:	0452      	lsls	r2, r2, #17
   bd0f8:	ea43 0702 	orr.w	r7, r3, r2
   bd0fc:	463b      	mov	r3, r7
   bd0fe:	e9de 6700 	ldrd	r6, r7, [lr]
   bd102:	ee10 2a10 	vmov	r2, s0
   bd106:	4630      	mov	r0, r6
   bd108:	4639      	mov	r1, r7
   bd10a:	f000 f8b1 	bl	bd270 <__adddf3>
   bd10e:	e9cd 0100 	strd	r0, r1, [sp]
   bd112:	4632      	mov	r2, r6
   bd114:	463b      	mov	r3, r7
   bd116:	e9dd 0100 	ldrd	r0, r1, [sp]
   bd11a:	f000 f8a7 	bl	bd26c <__aeabi_dsub>
   bd11e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   bd122:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd126:	4602      	mov	r2, r0
   bd128:	ea41 0304 	orr.w	r3, r1, r4
   bd12c:	ec43 2b10 	vmov	d0, r2, r3
   bd130:	b003      	add	sp, #12
   bd132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd134:	000fffff 	.word	0x000fffff
   bd138:	000bf6b0 	.word	0x000bf6b0
   bd13c:	00000000 	.word	0x00000000

000bd140 <scalbn>:
   bd140:	b538      	push	{r3, r4, r5, lr}
   bd142:	ec53 2b10 	vmov	r2, r3, d0
   bd146:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bd14a:	4604      	mov	r4, r0
   bd14c:	469c      	mov	ip, r3
   bd14e:	bb89      	cbnz	r1, bd1b4 <scalbn+0x74>
   bd150:	ee10 1a10 	vmov	r1, s0
   bd154:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bd158:	ea5c 0101 	orrs.w	r1, ip, r1
   bd15c:	d029      	beq.n	bd1b2 <scalbn+0x72>
   bd15e:	4619      	mov	r1, r3
   bd160:	2200      	movs	r2, #0
   bd162:	4b3d      	ldr	r3, [pc, #244]	; (bd258 <scalbn+0x118>)
   bd164:	4d3d      	ldr	r5, [pc, #244]	; (bd25c <scalbn+0x11c>)
   bd166:	ee10 0a10 	vmov	r0, s0
   bd16a:	f000 fa37 	bl	bd5dc <__aeabi_dmul>
   bd16e:	42ac      	cmp	r4, r5
   bd170:	4602      	mov	r2, r0
   bd172:	460b      	mov	r3, r1
   bd174:	db16      	blt.n	bd1a4 <scalbn+0x64>
   bd176:	468c      	mov	ip, r1
   bd178:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bd17c:	3936      	subs	r1, #54	; 0x36
   bd17e:	4421      	add	r1, r4
   bd180:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bd184:	4281      	cmp	r1, r0
   bd186:	dc21      	bgt.n	bd1cc <scalbn+0x8c>
   bd188:	2900      	cmp	r1, #0
   bd18a:	dc47      	bgt.n	bd21c <scalbn+0xdc>
   bd18c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bd190:	da34      	bge.n	bd1fc <scalbn+0xbc>
   bd192:	f24c 3150 	movw	r1, #50000	; 0xc350
   bd196:	428c      	cmp	r4, r1
   bd198:	dc18      	bgt.n	bd1cc <scalbn+0x8c>
   bd19a:	2b00      	cmp	r3, #0
   bd19c:	a126      	add	r1, pc, #152	; (adr r1, bd238 <scalbn+0xf8>)
   bd19e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd1a2:	db44      	blt.n	bd22e <scalbn+0xee>
   bd1a4:	a324      	add	r3, pc, #144	; (adr r3, bd238 <scalbn+0xf8>)
   bd1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd1aa:	f000 fa17 	bl	bd5dc <__aeabi_dmul>
   bd1ae:	ec41 0b10 	vmov	d0, r0, r1
   bd1b2:	bd38      	pop	{r3, r4, r5, pc}
   bd1b4:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bd1b8:	4281      	cmp	r1, r0
   bd1ba:	d1e0      	bne.n	bd17e <scalbn+0x3e>
   bd1bc:	ee10 0a10 	vmov	r0, s0
   bd1c0:	4619      	mov	r1, r3
   bd1c2:	f000 f855 	bl	bd270 <__adddf3>
   bd1c6:	ec41 0b10 	vmov	d0, r0, r1
   bd1ca:	bd38      	pop	{r3, r4, r5, pc}
   bd1cc:	2b00      	cmp	r3, #0
   bd1ce:	a11c      	add	r1, pc, #112	; (adr r1, bd240 <scalbn+0x100>)
   bd1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd1d4:	db07      	blt.n	bd1e6 <scalbn+0xa6>
   bd1d6:	a31a      	add	r3, pc, #104	; (adr r3, bd240 <scalbn+0x100>)
   bd1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd1dc:	f000 f9fe 	bl	bd5dc <__aeabi_dmul>
   bd1e0:	ec41 0b10 	vmov	d0, r0, r1
   bd1e4:	bd38      	pop	{r3, r4, r5, pc}
   bd1e6:	a118      	add	r1, pc, #96	; (adr r1, bd248 <scalbn+0x108>)
   bd1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd1ec:	a314      	add	r3, pc, #80	; (adr r3, bd240 <scalbn+0x100>)
   bd1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd1f2:	f000 f9f3 	bl	bd5dc <__aeabi_dmul>
   bd1f6:	ec41 0b10 	vmov	d0, r0, r1
   bd1fa:	e7f3      	b.n	bd1e4 <scalbn+0xa4>
   bd1fc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bd200:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bd204:	3136      	adds	r1, #54	; 0x36
   bd206:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bd20a:	4610      	mov	r0, r2
   bd20c:	4619      	mov	r1, r3
   bd20e:	2200      	movs	r2, #0
   bd210:	4b13      	ldr	r3, [pc, #76]	; (bd260 <scalbn+0x120>)
   bd212:	f000 f9e3 	bl	bd5dc <__aeabi_dmul>
   bd216:	ec41 0b10 	vmov	d0, r0, r1
   bd21a:	bd38      	pop	{r3, r4, r5, pc}
   bd21c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bd220:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bd224:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bd228:	ec43 2b10 	vmov	d0, r2, r3
   bd22c:	bd38      	pop	{r3, r4, r5, pc}
   bd22e:	a108      	add	r1, pc, #32	; (adr r1, bd250 <scalbn+0x110>)
   bd230:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd234:	e7b6      	b.n	bd1a4 <scalbn+0x64>
   bd236:	bf00      	nop
   bd238:	c2f8f359 	.word	0xc2f8f359
   bd23c:	01a56e1f 	.word	0x01a56e1f
   bd240:	8800759c 	.word	0x8800759c
   bd244:	7e37e43c 	.word	0x7e37e43c
   bd248:	8800759c 	.word	0x8800759c
   bd24c:	fe37e43c 	.word	0xfe37e43c
   bd250:	c2f8f359 	.word	0xc2f8f359
   bd254:	81a56e1f 	.word	0x81a56e1f
   bd258:	43500000 	.word	0x43500000
   bd25c:	ffff3cb0 	.word	0xffff3cb0
   bd260:	3c900000 	.word	0x3c900000

000bd264 <__aeabi_drsub>:
   bd264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd268:	e002      	b.n	bd270 <__adddf3>
   bd26a:	bf00      	nop

000bd26c <__aeabi_dsub>:
   bd26c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd270 <__adddf3>:
   bd270:	b530      	push	{r4, r5, lr}
   bd272:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd276:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd27a:	ea94 0f05 	teq	r4, r5
   bd27e:	bf08      	it	eq
   bd280:	ea90 0f02 	teqeq	r0, r2
   bd284:	bf1f      	itttt	ne
   bd286:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd28a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd28e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd296:	f000 80e2 	beq.w	bd45e <__adddf3+0x1ee>
   bd29a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd29e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd2a2:	bfb8      	it	lt
   bd2a4:	426d      	neglt	r5, r5
   bd2a6:	dd0c      	ble.n	bd2c2 <__adddf3+0x52>
   bd2a8:	442c      	add	r4, r5
   bd2aa:	ea80 0202 	eor.w	r2, r0, r2
   bd2ae:	ea81 0303 	eor.w	r3, r1, r3
   bd2b2:	ea82 0000 	eor.w	r0, r2, r0
   bd2b6:	ea83 0101 	eor.w	r1, r3, r1
   bd2ba:	ea80 0202 	eor.w	r2, r0, r2
   bd2be:	ea81 0303 	eor.w	r3, r1, r3
   bd2c2:	2d36      	cmp	r5, #54	; 0x36
   bd2c4:	bf88      	it	hi
   bd2c6:	bd30      	pophi	{r4, r5, pc}
   bd2c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd2cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd2d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bd2d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bd2d8:	d002      	beq.n	bd2e0 <__adddf3+0x70>
   bd2da:	4240      	negs	r0, r0
   bd2dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd2e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bd2e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd2e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bd2ec:	d002      	beq.n	bd2f4 <__adddf3+0x84>
   bd2ee:	4252      	negs	r2, r2
   bd2f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd2f4:	ea94 0f05 	teq	r4, r5
   bd2f8:	f000 80a7 	beq.w	bd44a <__adddf3+0x1da>
   bd2fc:	f1a4 0401 	sub.w	r4, r4, #1
   bd300:	f1d5 0e20 	rsbs	lr, r5, #32
   bd304:	db0d      	blt.n	bd322 <__adddf3+0xb2>
   bd306:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd30a:	fa22 f205 	lsr.w	r2, r2, r5
   bd30e:	1880      	adds	r0, r0, r2
   bd310:	f141 0100 	adc.w	r1, r1, #0
   bd314:	fa03 f20e 	lsl.w	r2, r3, lr
   bd318:	1880      	adds	r0, r0, r2
   bd31a:	fa43 f305 	asr.w	r3, r3, r5
   bd31e:	4159      	adcs	r1, r3
   bd320:	e00e      	b.n	bd340 <__adddf3+0xd0>
   bd322:	f1a5 0520 	sub.w	r5, r5, #32
   bd326:	f10e 0e20 	add.w	lr, lr, #32
   bd32a:	2a01      	cmp	r2, #1
   bd32c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd330:	bf28      	it	cs
   bd332:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd336:	fa43 f305 	asr.w	r3, r3, r5
   bd33a:	18c0      	adds	r0, r0, r3
   bd33c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd344:	d507      	bpl.n	bd356 <__adddf3+0xe6>
   bd346:	f04f 0e00 	mov.w	lr, #0
   bd34a:	f1dc 0c00 	rsbs	ip, ip, #0
   bd34e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd352:	eb6e 0101 	sbc.w	r1, lr, r1
   bd356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd35a:	d31b      	bcc.n	bd394 <__adddf3+0x124>
   bd35c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd360:	d30c      	bcc.n	bd37c <__adddf3+0x10c>
   bd362:	0849      	lsrs	r1, r1, #1
   bd364:	ea5f 0030 	movs.w	r0, r0, rrx
   bd368:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd36c:	f104 0401 	add.w	r4, r4, #1
   bd370:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd378:	f080 809a 	bcs.w	bd4b0 <__adddf3+0x240>
   bd37c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd380:	bf08      	it	eq
   bd382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd386:	f150 0000 	adcs.w	r0, r0, #0
   bd38a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd38e:	ea41 0105 	orr.w	r1, r1, r5
   bd392:	bd30      	pop	{r4, r5, pc}
   bd394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd398:	4140      	adcs	r0, r0
   bd39a:	eb41 0101 	adc.w	r1, r1, r1
   bd39e:	3c01      	subs	r4, #1
   bd3a0:	bf28      	it	cs
   bd3a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd3a6:	d2e9      	bcs.n	bd37c <__adddf3+0x10c>
   bd3a8:	f091 0f00 	teq	r1, #0
   bd3ac:	bf04      	itt	eq
   bd3ae:	4601      	moveq	r1, r0
   bd3b0:	2000      	moveq	r0, #0
   bd3b2:	fab1 f381 	clz	r3, r1
   bd3b6:	bf08      	it	eq
   bd3b8:	3320      	addeq	r3, #32
   bd3ba:	f1a3 030b 	sub.w	r3, r3, #11
   bd3be:	f1b3 0220 	subs.w	r2, r3, #32
   bd3c2:	da0c      	bge.n	bd3de <__adddf3+0x16e>
   bd3c4:	320c      	adds	r2, #12
   bd3c6:	dd08      	ble.n	bd3da <__adddf3+0x16a>
   bd3c8:	f102 0c14 	add.w	ip, r2, #20
   bd3cc:	f1c2 020c 	rsb	r2, r2, #12
   bd3d0:	fa01 f00c 	lsl.w	r0, r1, ip
   bd3d4:	fa21 f102 	lsr.w	r1, r1, r2
   bd3d8:	e00c      	b.n	bd3f4 <__adddf3+0x184>
   bd3da:	f102 0214 	add.w	r2, r2, #20
   bd3de:	bfd8      	it	le
   bd3e0:	f1c2 0c20 	rsble	ip, r2, #32
   bd3e4:	fa01 f102 	lsl.w	r1, r1, r2
   bd3e8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd3ec:	bfdc      	itt	le
   bd3ee:	ea41 010c 	orrle.w	r1, r1, ip
   bd3f2:	4090      	lslle	r0, r2
   bd3f4:	1ae4      	subs	r4, r4, r3
   bd3f6:	bfa2      	ittt	ge
   bd3f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd3fc:	4329      	orrge	r1, r5
   bd3fe:	bd30      	popge	{r4, r5, pc}
   bd400:	ea6f 0404 	mvn.w	r4, r4
   bd404:	3c1f      	subs	r4, #31
   bd406:	da1c      	bge.n	bd442 <__adddf3+0x1d2>
   bd408:	340c      	adds	r4, #12
   bd40a:	dc0e      	bgt.n	bd42a <__adddf3+0x1ba>
   bd40c:	f104 0414 	add.w	r4, r4, #20
   bd410:	f1c4 0220 	rsb	r2, r4, #32
   bd414:	fa20 f004 	lsr.w	r0, r0, r4
   bd418:	fa01 f302 	lsl.w	r3, r1, r2
   bd41c:	ea40 0003 	orr.w	r0, r0, r3
   bd420:	fa21 f304 	lsr.w	r3, r1, r4
   bd424:	ea45 0103 	orr.w	r1, r5, r3
   bd428:	bd30      	pop	{r4, r5, pc}
   bd42a:	f1c4 040c 	rsb	r4, r4, #12
   bd42e:	f1c4 0220 	rsb	r2, r4, #32
   bd432:	fa20 f002 	lsr.w	r0, r0, r2
   bd436:	fa01 f304 	lsl.w	r3, r1, r4
   bd43a:	ea40 0003 	orr.w	r0, r0, r3
   bd43e:	4629      	mov	r1, r5
   bd440:	bd30      	pop	{r4, r5, pc}
   bd442:	fa21 f004 	lsr.w	r0, r1, r4
   bd446:	4629      	mov	r1, r5
   bd448:	bd30      	pop	{r4, r5, pc}
   bd44a:	f094 0f00 	teq	r4, #0
   bd44e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd452:	bf06      	itte	eq
   bd454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd458:	3401      	addeq	r4, #1
   bd45a:	3d01      	subne	r5, #1
   bd45c:	e74e      	b.n	bd2fc <__adddf3+0x8c>
   bd45e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd462:	bf18      	it	ne
   bd464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd468:	d029      	beq.n	bd4be <__adddf3+0x24e>
   bd46a:	ea94 0f05 	teq	r4, r5
   bd46e:	bf08      	it	eq
   bd470:	ea90 0f02 	teqeq	r0, r2
   bd474:	d005      	beq.n	bd482 <__adddf3+0x212>
   bd476:	ea54 0c00 	orrs.w	ip, r4, r0
   bd47a:	bf04      	itt	eq
   bd47c:	4619      	moveq	r1, r3
   bd47e:	4610      	moveq	r0, r2
   bd480:	bd30      	pop	{r4, r5, pc}
   bd482:	ea91 0f03 	teq	r1, r3
   bd486:	bf1e      	ittt	ne
   bd488:	2100      	movne	r1, #0
   bd48a:	2000      	movne	r0, #0
   bd48c:	bd30      	popne	{r4, r5, pc}
   bd48e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bd492:	d105      	bne.n	bd4a0 <__adddf3+0x230>
   bd494:	0040      	lsls	r0, r0, #1
   bd496:	4149      	adcs	r1, r1
   bd498:	bf28      	it	cs
   bd49a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bd49e:	bd30      	pop	{r4, r5, pc}
   bd4a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bd4a4:	bf3c      	itt	cc
   bd4a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bd4aa:	bd30      	popcc	{r4, r5, pc}
   bd4ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd4b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bd4b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd4b8:	f04f 0000 	mov.w	r0, #0
   bd4bc:	bd30      	pop	{r4, r5, pc}
   bd4be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd4c2:	bf1a      	itte	ne
   bd4c4:	4619      	movne	r1, r3
   bd4c6:	4610      	movne	r0, r2
   bd4c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bd4cc:	bf1c      	itt	ne
   bd4ce:	460b      	movne	r3, r1
   bd4d0:	4602      	movne	r2, r0
   bd4d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd4d6:	bf06      	itte	eq
   bd4d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bd4dc:	ea91 0f03 	teqeq	r1, r3
   bd4e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bd4e4:	bd30      	pop	{r4, r5, pc}
   bd4e6:	bf00      	nop

000bd4e8 <__aeabi_ui2d>:
   bd4e8:	f090 0f00 	teq	r0, #0
   bd4ec:	bf04      	itt	eq
   bd4ee:	2100      	moveq	r1, #0
   bd4f0:	4770      	bxeq	lr
   bd4f2:	b530      	push	{r4, r5, lr}
   bd4f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd4f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd4fc:	f04f 0500 	mov.w	r5, #0
   bd500:	f04f 0100 	mov.w	r1, #0
   bd504:	e750      	b.n	bd3a8 <__adddf3+0x138>
   bd506:	bf00      	nop

000bd508 <__aeabi_i2d>:
   bd508:	f090 0f00 	teq	r0, #0
   bd50c:	bf04      	itt	eq
   bd50e:	2100      	moveq	r1, #0
   bd510:	4770      	bxeq	lr
   bd512:	b530      	push	{r4, r5, lr}
   bd514:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd518:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd51c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd520:	bf48      	it	mi
   bd522:	4240      	negmi	r0, r0
   bd524:	f04f 0100 	mov.w	r1, #0
   bd528:	e73e      	b.n	bd3a8 <__adddf3+0x138>
   bd52a:	bf00      	nop

000bd52c <__aeabi_f2d>:
   bd52c:	0042      	lsls	r2, r0, #1
   bd52e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd532:	ea4f 0131 	mov.w	r1, r1, rrx
   bd536:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd53a:	bf1f      	itttt	ne
   bd53c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd548:	4770      	bxne	lr
   bd54a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd54e:	bf08      	it	eq
   bd550:	4770      	bxeq	lr
   bd552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd556:	bf04      	itt	eq
   bd558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd55c:	4770      	bxeq	lr
   bd55e:	b530      	push	{r4, r5, lr}
   bd560:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd56c:	e71c      	b.n	bd3a8 <__adddf3+0x138>
   bd56e:	bf00      	nop

000bd570 <__aeabi_ul2d>:
   bd570:	ea50 0201 	orrs.w	r2, r0, r1
   bd574:	bf08      	it	eq
   bd576:	4770      	bxeq	lr
   bd578:	b530      	push	{r4, r5, lr}
   bd57a:	f04f 0500 	mov.w	r5, #0
   bd57e:	e00a      	b.n	bd596 <__aeabi_l2d+0x16>

000bd580 <__aeabi_l2d>:
   bd580:	ea50 0201 	orrs.w	r2, r0, r1
   bd584:	bf08      	it	eq
   bd586:	4770      	bxeq	lr
   bd588:	b530      	push	{r4, r5, lr}
   bd58a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd58e:	d502      	bpl.n	bd596 <__aeabi_l2d+0x16>
   bd590:	4240      	negs	r0, r0
   bd592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd596:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd59a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd59e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd5a2:	f43f aed8 	beq.w	bd356 <__adddf3+0xe6>
   bd5a6:	f04f 0203 	mov.w	r2, #3
   bd5aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd5ae:	bf18      	it	ne
   bd5b0:	3203      	addne	r2, #3
   bd5b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd5b6:	bf18      	it	ne
   bd5b8:	3203      	addne	r2, #3
   bd5ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd5be:	f1c2 0320 	rsb	r3, r2, #32
   bd5c2:	fa00 fc03 	lsl.w	ip, r0, r3
   bd5c6:	fa20 f002 	lsr.w	r0, r0, r2
   bd5ca:	fa01 fe03 	lsl.w	lr, r1, r3
   bd5ce:	ea40 000e 	orr.w	r0, r0, lr
   bd5d2:	fa21 f102 	lsr.w	r1, r1, r2
   bd5d6:	4414      	add	r4, r2
   bd5d8:	e6bd      	b.n	bd356 <__adddf3+0xe6>
   bd5da:	bf00      	nop

000bd5dc <__aeabi_dmul>:
   bd5dc:	b570      	push	{r4, r5, r6, lr}
   bd5de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd5e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd5e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd5ea:	bf1d      	ittte	ne
   bd5ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd5f0:	ea94 0f0c 	teqne	r4, ip
   bd5f4:	ea95 0f0c 	teqne	r5, ip
   bd5f8:	f000 f8de 	bleq	bd7b8 <__aeabi_dmul+0x1dc>
   bd5fc:	442c      	add	r4, r5
   bd5fe:	ea81 0603 	eor.w	r6, r1, r3
   bd602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd60a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd60e:	bf18      	it	ne
   bd610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd61c:	d038      	beq.n	bd690 <__aeabi_dmul+0xb4>
   bd61e:	fba0 ce02 	umull	ip, lr, r0, r2
   bd622:	f04f 0500 	mov.w	r5, #0
   bd626:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd62a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd62e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd632:	f04f 0600 	mov.w	r6, #0
   bd636:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd63a:	f09c 0f00 	teq	ip, #0
   bd63e:	bf18      	it	ne
   bd640:	f04e 0e01 	orrne.w	lr, lr, #1
   bd644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd64c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd650:	d204      	bcs.n	bd65c <__aeabi_dmul+0x80>
   bd652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd656:	416d      	adcs	r5, r5
   bd658:	eb46 0606 	adc.w	r6, r6, r6
   bd65c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd66c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd674:	bf88      	it	hi
   bd676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd67a:	d81e      	bhi.n	bd6ba <__aeabi_dmul+0xde>
   bd67c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd680:	bf08      	it	eq
   bd682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd686:	f150 0000 	adcs.w	r0, r0, #0
   bd68a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd68e:	bd70      	pop	{r4, r5, r6, pc}
   bd690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd694:	ea46 0101 	orr.w	r1, r6, r1
   bd698:	ea40 0002 	orr.w	r0, r0, r2
   bd69c:	ea81 0103 	eor.w	r1, r1, r3
   bd6a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd6a4:	bfc2      	ittt	gt
   bd6a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd6aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd6ae:	bd70      	popgt	{r4, r5, r6, pc}
   bd6b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd6b4:	f04f 0e00 	mov.w	lr, #0
   bd6b8:	3c01      	subs	r4, #1
   bd6ba:	f300 80ab 	bgt.w	bd814 <__aeabi_dmul+0x238>
   bd6be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bd6c2:	bfde      	ittt	le
   bd6c4:	2000      	movle	r0, #0
   bd6c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bd6ca:	bd70      	pople	{r4, r5, r6, pc}
   bd6cc:	f1c4 0400 	rsb	r4, r4, #0
   bd6d0:	3c20      	subs	r4, #32
   bd6d2:	da35      	bge.n	bd740 <__aeabi_dmul+0x164>
   bd6d4:	340c      	adds	r4, #12
   bd6d6:	dc1b      	bgt.n	bd710 <__aeabi_dmul+0x134>
   bd6d8:	f104 0414 	add.w	r4, r4, #20
   bd6dc:	f1c4 0520 	rsb	r5, r4, #32
   bd6e0:	fa00 f305 	lsl.w	r3, r0, r5
   bd6e4:	fa20 f004 	lsr.w	r0, r0, r4
   bd6e8:	fa01 f205 	lsl.w	r2, r1, r5
   bd6ec:	ea40 0002 	orr.w	r0, r0, r2
   bd6f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bd6f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd6f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd6fc:	fa21 f604 	lsr.w	r6, r1, r4
   bd700:	eb42 0106 	adc.w	r1, r2, r6
   bd704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd708:	bf08      	it	eq
   bd70a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd70e:	bd70      	pop	{r4, r5, r6, pc}
   bd710:	f1c4 040c 	rsb	r4, r4, #12
   bd714:	f1c4 0520 	rsb	r5, r4, #32
   bd718:	fa00 f304 	lsl.w	r3, r0, r4
   bd71c:	fa20 f005 	lsr.w	r0, r0, r5
   bd720:	fa01 f204 	lsl.w	r2, r1, r4
   bd724:	ea40 0002 	orr.w	r0, r0, r2
   bd728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd72c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd730:	f141 0100 	adc.w	r1, r1, #0
   bd734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd738:	bf08      	it	eq
   bd73a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd73e:	bd70      	pop	{r4, r5, r6, pc}
   bd740:	f1c4 0520 	rsb	r5, r4, #32
   bd744:	fa00 f205 	lsl.w	r2, r0, r5
   bd748:	ea4e 0e02 	orr.w	lr, lr, r2
   bd74c:	fa20 f304 	lsr.w	r3, r0, r4
   bd750:	fa01 f205 	lsl.w	r2, r1, r5
   bd754:	ea43 0302 	orr.w	r3, r3, r2
   bd758:	fa21 f004 	lsr.w	r0, r1, r4
   bd75c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd760:	fa21 f204 	lsr.w	r2, r1, r4
   bd764:	ea20 0002 	bic.w	r0, r0, r2
   bd768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd76c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd770:	bf08      	it	eq
   bd772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd776:	bd70      	pop	{r4, r5, r6, pc}
   bd778:	f094 0f00 	teq	r4, #0
   bd77c:	d10f      	bne.n	bd79e <__aeabi_dmul+0x1c2>
   bd77e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd782:	0040      	lsls	r0, r0, #1
   bd784:	eb41 0101 	adc.w	r1, r1, r1
   bd788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd78c:	bf08      	it	eq
   bd78e:	3c01      	subeq	r4, #1
   bd790:	d0f7      	beq.n	bd782 <__aeabi_dmul+0x1a6>
   bd792:	ea41 0106 	orr.w	r1, r1, r6
   bd796:	f095 0f00 	teq	r5, #0
   bd79a:	bf18      	it	ne
   bd79c:	4770      	bxne	lr
   bd79e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd7a2:	0052      	lsls	r2, r2, #1
   bd7a4:	eb43 0303 	adc.w	r3, r3, r3
   bd7a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd7ac:	bf08      	it	eq
   bd7ae:	3d01      	subeq	r5, #1
   bd7b0:	d0f7      	beq.n	bd7a2 <__aeabi_dmul+0x1c6>
   bd7b2:	ea43 0306 	orr.w	r3, r3, r6
   bd7b6:	4770      	bx	lr
   bd7b8:	ea94 0f0c 	teq	r4, ip
   bd7bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd7c0:	bf18      	it	ne
   bd7c2:	ea95 0f0c 	teqne	r5, ip
   bd7c6:	d00c      	beq.n	bd7e2 <__aeabi_dmul+0x206>
   bd7c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd7cc:	bf18      	it	ne
   bd7ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd7d2:	d1d1      	bne.n	bd778 <__aeabi_dmul+0x19c>
   bd7d4:	ea81 0103 	eor.w	r1, r1, r3
   bd7d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd7dc:	f04f 0000 	mov.w	r0, #0
   bd7e0:	bd70      	pop	{r4, r5, r6, pc}
   bd7e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd7e6:	bf06      	itte	eq
   bd7e8:	4610      	moveq	r0, r2
   bd7ea:	4619      	moveq	r1, r3
   bd7ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd7f0:	d019      	beq.n	bd826 <__aeabi_dmul+0x24a>
   bd7f2:	ea94 0f0c 	teq	r4, ip
   bd7f6:	d102      	bne.n	bd7fe <__aeabi_dmul+0x222>
   bd7f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd7fc:	d113      	bne.n	bd826 <__aeabi_dmul+0x24a>
   bd7fe:	ea95 0f0c 	teq	r5, ip
   bd802:	d105      	bne.n	bd810 <__aeabi_dmul+0x234>
   bd804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd808:	bf1c      	itt	ne
   bd80a:	4610      	movne	r0, r2
   bd80c:	4619      	movne	r1, r3
   bd80e:	d10a      	bne.n	bd826 <__aeabi_dmul+0x24a>
   bd810:	ea81 0103 	eor.w	r1, r1, r3
   bd814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd81c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd820:	f04f 0000 	mov.w	r0, #0
   bd824:	bd70      	pop	{r4, r5, r6, pc}
   bd826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd82a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd82e:	bd70      	pop	{r4, r5, r6, pc}

000bd830 <__aeabi_ddiv>:
   bd830:	b570      	push	{r4, r5, r6, lr}
   bd832:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd83a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd83e:	bf1d      	ittte	ne
   bd840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd844:	ea94 0f0c 	teqne	r4, ip
   bd848:	ea95 0f0c 	teqne	r5, ip
   bd84c:	f000 f8a7 	bleq	bd99e <__aeabi_ddiv+0x16e>
   bd850:	eba4 0405 	sub.w	r4, r4, r5
   bd854:	ea81 0e03 	eor.w	lr, r1, r3
   bd858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd85c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd860:	f000 8088 	beq.w	bd974 <__aeabi_ddiv+0x144>
   bd864:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd86c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd874:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd87c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd880:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd888:	429d      	cmp	r5, r3
   bd88a:	bf08      	it	eq
   bd88c:	4296      	cmpeq	r6, r2
   bd88e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd892:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd896:	d202      	bcs.n	bd89e <__aeabi_ddiv+0x6e>
   bd898:	085b      	lsrs	r3, r3, #1
   bd89a:	ea4f 0232 	mov.w	r2, r2, rrx
   bd89e:	1ab6      	subs	r6, r6, r2
   bd8a0:	eb65 0503 	sbc.w	r5, r5, r3
   bd8a4:	085b      	lsrs	r3, r3, #1
   bd8a6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd8aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd8ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd8b2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd8ba:	bf22      	ittt	cs
   bd8bc:	1ab6      	subcs	r6, r6, r2
   bd8be:	4675      	movcs	r5, lr
   bd8c0:	ea40 000c 	orrcs.w	r0, r0, ip
   bd8c4:	085b      	lsrs	r3, r3, #1
   bd8c6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd8ca:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd8d2:	bf22      	ittt	cs
   bd8d4:	1ab6      	subcs	r6, r6, r2
   bd8d6:	4675      	movcs	r5, lr
   bd8d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bd8dc:	085b      	lsrs	r3, r3, #1
   bd8de:	ea4f 0232 	mov.w	r2, r2, rrx
   bd8e2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd8ea:	bf22      	ittt	cs
   bd8ec:	1ab6      	subcs	r6, r6, r2
   bd8ee:	4675      	movcs	r5, lr
   bd8f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bd8f4:	085b      	lsrs	r3, r3, #1
   bd8f6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd8fa:	ebb6 0e02 	subs.w	lr, r6, r2
   bd8fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd902:	bf22      	ittt	cs
   bd904:	1ab6      	subcs	r6, r6, r2
   bd906:	4675      	movcs	r5, lr
   bd908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bd90c:	ea55 0e06 	orrs.w	lr, r5, r6
   bd910:	d018      	beq.n	bd944 <__aeabi_ddiv+0x114>
   bd912:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bd916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bd91a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bd91e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bd922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bd926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bd92a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bd92e:	d1c0      	bne.n	bd8b2 <__aeabi_ddiv+0x82>
   bd930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd934:	d10b      	bne.n	bd94e <__aeabi_ddiv+0x11e>
   bd936:	ea41 0100 	orr.w	r1, r1, r0
   bd93a:	f04f 0000 	mov.w	r0, #0
   bd93e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bd942:	e7b6      	b.n	bd8b2 <__aeabi_ddiv+0x82>
   bd944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd948:	bf04      	itt	eq
   bd94a:	4301      	orreq	r1, r0
   bd94c:	2000      	moveq	r0, #0
   bd94e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd952:	bf88      	it	hi
   bd954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd958:	f63f aeaf 	bhi.w	bd6ba <__aeabi_dmul+0xde>
   bd95c:	ebb5 0c03 	subs.w	ip, r5, r3
   bd960:	bf04      	itt	eq
   bd962:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd96a:	f150 0000 	adcs.w	r0, r0, #0
   bd96e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd972:	bd70      	pop	{r4, r5, r6, pc}
   bd974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd97c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd980:	bfc2      	ittt	gt
   bd982:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd98a:	bd70      	popgt	{r4, r5, r6, pc}
   bd98c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd990:	f04f 0e00 	mov.w	lr, #0
   bd994:	3c01      	subs	r4, #1
   bd996:	e690      	b.n	bd6ba <__aeabi_dmul+0xde>
   bd998:	ea45 0e06 	orr.w	lr, r5, r6
   bd99c:	e68d      	b.n	bd6ba <__aeabi_dmul+0xde>
   bd99e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd9a2:	ea94 0f0c 	teq	r4, ip
   bd9a6:	bf08      	it	eq
   bd9a8:	ea95 0f0c 	teqeq	r5, ip
   bd9ac:	f43f af3b 	beq.w	bd826 <__aeabi_dmul+0x24a>
   bd9b0:	ea94 0f0c 	teq	r4, ip
   bd9b4:	d10a      	bne.n	bd9cc <__aeabi_ddiv+0x19c>
   bd9b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd9ba:	f47f af34 	bne.w	bd826 <__aeabi_dmul+0x24a>
   bd9be:	ea95 0f0c 	teq	r5, ip
   bd9c2:	f47f af25 	bne.w	bd810 <__aeabi_dmul+0x234>
   bd9c6:	4610      	mov	r0, r2
   bd9c8:	4619      	mov	r1, r3
   bd9ca:	e72c      	b.n	bd826 <__aeabi_dmul+0x24a>
   bd9cc:	ea95 0f0c 	teq	r5, ip
   bd9d0:	d106      	bne.n	bd9e0 <__aeabi_ddiv+0x1b0>
   bd9d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd9d6:	f43f aefd 	beq.w	bd7d4 <__aeabi_dmul+0x1f8>
   bd9da:	4610      	mov	r0, r2
   bd9dc:	4619      	mov	r1, r3
   bd9de:	e722      	b.n	bd826 <__aeabi_dmul+0x24a>
   bd9e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd9e4:	bf18      	it	ne
   bd9e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd9ea:	f47f aec5 	bne.w	bd778 <__aeabi_dmul+0x19c>
   bd9ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd9f2:	f47f af0d 	bne.w	bd810 <__aeabi_dmul+0x234>
   bd9f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd9fa:	f47f aeeb 	bne.w	bd7d4 <__aeabi_dmul+0x1f8>
   bd9fe:	e712      	b.n	bd826 <__aeabi_dmul+0x24a>

000bda00 <__gedf2>:
   bda00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bda04:	e006      	b.n	bda14 <__cmpdf2+0x4>
   bda06:	bf00      	nop

000bda08 <__ledf2>:
   bda08:	f04f 0c01 	mov.w	ip, #1
   bda0c:	e002      	b.n	bda14 <__cmpdf2+0x4>
   bda0e:	bf00      	nop

000bda10 <__cmpdf2>:
   bda10:	f04f 0c01 	mov.w	ip, #1
   bda14:	f84d cd04 	str.w	ip, [sp, #-4]!
   bda18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bda1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bda20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bda24:	bf18      	it	ne
   bda26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bda2a:	d01b      	beq.n	bda64 <__cmpdf2+0x54>
   bda2c:	b001      	add	sp, #4
   bda2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bda32:	bf0c      	ite	eq
   bda34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bda38:	ea91 0f03 	teqne	r1, r3
   bda3c:	bf02      	ittt	eq
   bda3e:	ea90 0f02 	teqeq	r0, r2
   bda42:	2000      	moveq	r0, #0
   bda44:	4770      	bxeq	lr
   bda46:	f110 0f00 	cmn.w	r0, #0
   bda4a:	ea91 0f03 	teq	r1, r3
   bda4e:	bf58      	it	pl
   bda50:	4299      	cmppl	r1, r3
   bda52:	bf08      	it	eq
   bda54:	4290      	cmpeq	r0, r2
   bda56:	bf2c      	ite	cs
   bda58:	17d8      	asrcs	r0, r3, #31
   bda5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bda5e:	f040 0001 	orr.w	r0, r0, #1
   bda62:	4770      	bx	lr
   bda64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bda68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bda6c:	d102      	bne.n	bda74 <__cmpdf2+0x64>
   bda6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bda72:	d107      	bne.n	bda84 <__cmpdf2+0x74>
   bda74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bda78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bda7c:	d1d6      	bne.n	bda2c <__cmpdf2+0x1c>
   bda7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bda82:	d0d3      	beq.n	bda2c <__cmpdf2+0x1c>
   bda84:	f85d 0b04 	ldr.w	r0, [sp], #4
   bda88:	4770      	bx	lr
   bda8a:	bf00      	nop

000bda8c <__aeabi_cdrcmple>:
   bda8c:	4684      	mov	ip, r0
   bda8e:	4610      	mov	r0, r2
   bda90:	4662      	mov	r2, ip
   bda92:	468c      	mov	ip, r1
   bda94:	4619      	mov	r1, r3
   bda96:	4663      	mov	r3, ip
   bda98:	e000      	b.n	bda9c <__aeabi_cdcmpeq>
   bda9a:	bf00      	nop

000bda9c <__aeabi_cdcmpeq>:
   bda9c:	b501      	push	{r0, lr}
   bda9e:	f7ff ffb7 	bl	bda10 <__cmpdf2>
   bdaa2:	2800      	cmp	r0, #0
   bdaa4:	bf48      	it	mi
   bdaa6:	f110 0f00 	cmnmi.w	r0, #0
   bdaaa:	bd01      	pop	{r0, pc}

000bdaac <__aeabi_dcmpeq>:
   bdaac:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdab0:	f7ff fff4 	bl	bda9c <__aeabi_cdcmpeq>
   bdab4:	bf0c      	ite	eq
   bdab6:	2001      	moveq	r0, #1
   bdab8:	2000      	movne	r0, #0
   bdaba:	f85d fb08 	ldr.w	pc, [sp], #8
   bdabe:	bf00      	nop

000bdac0 <__aeabi_dcmplt>:
   bdac0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdac4:	f7ff ffea 	bl	bda9c <__aeabi_cdcmpeq>
   bdac8:	bf34      	ite	cc
   bdaca:	2001      	movcc	r0, #1
   bdacc:	2000      	movcs	r0, #0
   bdace:	f85d fb08 	ldr.w	pc, [sp], #8
   bdad2:	bf00      	nop

000bdad4 <__aeabi_dcmple>:
   bdad4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdad8:	f7ff ffe0 	bl	bda9c <__aeabi_cdcmpeq>
   bdadc:	bf94      	ite	ls
   bdade:	2001      	movls	r0, #1
   bdae0:	2000      	movhi	r0, #0
   bdae2:	f85d fb08 	ldr.w	pc, [sp], #8
   bdae6:	bf00      	nop

000bdae8 <__aeabi_dcmpge>:
   bdae8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdaec:	f7ff ffce 	bl	bda8c <__aeabi_cdrcmple>
   bdaf0:	bf94      	ite	ls
   bdaf2:	2001      	movls	r0, #1
   bdaf4:	2000      	movhi	r0, #0
   bdaf6:	f85d fb08 	ldr.w	pc, [sp], #8
   bdafa:	bf00      	nop

000bdafc <__aeabi_dcmpgt>:
   bdafc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdb00:	f7ff ffc4 	bl	bda8c <__aeabi_cdrcmple>
   bdb04:	bf34      	ite	cc
   bdb06:	2001      	movcc	r0, #1
   bdb08:	2000      	movcs	r0, #0
   bdb0a:	f85d fb08 	ldr.w	pc, [sp], #8
   bdb0e:	bf00      	nop

000bdb10 <__aeabi_dcmpun>:
   bdb10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdb14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdb18:	d102      	bne.n	bdb20 <__aeabi_dcmpun+0x10>
   bdb1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bdb1e:	d10a      	bne.n	bdb36 <__aeabi_dcmpun+0x26>
   bdb20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdb24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdb28:	d102      	bne.n	bdb30 <__aeabi_dcmpun+0x20>
   bdb2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bdb2e:	d102      	bne.n	bdb36 <__aeabi_dcmpun+0x26>
   bdb30:	f04f 0000 	mov.w	r0, #0
   bdb34:	4770      	bx	lr
   bdb36:	f04f 0001 	mov.w	r0, #1
   bdb3a:	4770      	bx	lr

000bdb3c <__aeabi_d2iz>:
   bdb3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdb40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bdb44:	d215      	bcs.n	bdb72 <__aeabi_d2iz+0x36>
   bdb46:	d511      	bpl.n	bdb6c <__aeabi_d2iz+0x30>
   bdb48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bdb4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bdb50:	d912      	bls.n	bdb78 <__aeabi_d2iz+0x3c>
   bdb52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdb56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bdb5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bdb5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bdb62:	fa23 f002 	lsr.w	r0, r3, r2
   bdb66:	bf18      	it	ne
   bdb68:	4240      	negne	r0, r0
   bdb6a:	4770      	bx	lr
   bdb6c:	f04f 0000 	mov.w	r0, #0
   bdb70:	4770      	bx	lr
   bdb72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bdb76:	d105      	bne.n	bdb84 <__aeabi_d2iz+0x48>
   bdb78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bdb7c:	bf08      	it	eq
   bdb7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bdb82:	4770      	bx	lr
   bdb84:	f04f 0000 	mov.w	r0, #0
   bdb88:	4770      	bx	lr
   bdb8a:	bf00      	nop

000bdb8c <__aeabi_d2uiz>:
   bdb8c:	004a      	lsls	r2, r1, #1
   bdb8e:	d211      	bcs.n	bdbb4 <__aeabi_d2uiz+0x28>
   bdb90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bdb94:	d211      	bcs.n	bdbba <__aeabi_d2uiz+0x2e>
   bdb96:	d50d      	bpl.n	bdbb4 <__aeabi_d2uiz+0x28>
   bdb98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bdb9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bdba0:	d40e      	bmi.n	bdbc0 <__aeabi_d2uiz+0x34>
   bdba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bdbaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bdbae:	fa23 f002 	lsr.w	r0, r3, r2
   bdbb2:	4770      	bx	lr
   bdbb4:	f04f 0000 	mov.w	r0, #0
   bdbb8:	4770      	bx	lr
   bdbba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bdbbe:	d102      	bne.n	bdbc6 <__aeabi_d2uiz+0x3a>
   bdbc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdbc4:	4770      	bx	lr
   bdbc6:	f04f 0000 	mov.w	r0, #0
   bdbca:	4770      	bx	lr

000bdbcc <__aeabi_d2f>:
   bdbcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdbd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bdbd4:	bf24      	itt	cs
   bdbd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bdbda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bdbde:	d90d      	bls.n	bdbfc <__aeabi_d2f+0x30>
   bdbe0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bdbe4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bdbe8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bdbec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bdbf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bdbf4:	bf08      	it	eq
   bdbf6:	f020 0001 	biceq.w	r0, r0, #1
   bdbfa:	4770      	bx	lr
   bdbfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bdc00:	d121      	bne.n	bdc46 <__aeabi_d2f+0x7a>
   bdc02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bdc06:	bfbc      	itt	lt
   bdc08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bdc0c:	4770      	bxlt	lr
   bdc0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdc12:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bdc16:	f1c2 0218 	rsb	r2, r2, #24
   bdc1a:	f1c2 0c20 	rsb	ip, r2, #32
   bdc1e:	fa10 f30c 	lsls.w	r3, r0, ip
   bdc22:	fa20 f002 	lsr.w	r0, r0, r2
   bdc26:	bf18      	it	ne
   bdc28:	f040 0001 	orrne.w	r0, r0, #1
   bdc2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdc30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bdc34:	fa03 fc0c 	lsl.w	ip, r3, ip
   bdc38:	ea40 000c 	orr.w	r0, r0, ip
   bdc3c:	fa23 f302 	lsr.w	r3, r3, r2
   bdc40:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bdc44:	e7cc      	b.n	bdbe0 <__aeabi_d2f+0x14>
   bdc46:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bdc4a:	d107      	bne.n	bdc5c <__aeabi_d2f+0x90>
   bdc4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bdc50:	bf1e      	ittt	ne
   bdc52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bdc56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bdc5a:	4770      	bxne	lr
   bdc5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bdc60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bdc64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bdc68:	4770      	bx	lr
   bdc6a:	bf00      	nop

000bdc6c <asctime_r>:
   bdc6c:	b510      	push	{r4, lr}
   bdc6e:	460c      	mov	r4, r1
   bdc70:	6941      	ldr	r1, [r0, #20]
   bdc72:	6903      	ldr	r3, [r0, #16]
   bdc74:	6982      	ldr	r2, [r0, #24]
   bdc76:	b086      	sub	sp, #24
   bdc78:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bdc7c:	9104      	str	r1, [sp, #16]
   bdc7e:	6801      	ldr	r1, [r0, #0]
   bdc80:	9103      	str	r1, [sp, #12]
   bdc82:	6841      	ldr	r1, [r0, #4]
   bdc84:	9102      	str	r1, [sp, #8]
   bdc86:	6881      	ldr	r1, [r0, #8]
   bdc88:	9101      	str	r1, [sp, #4]
   bdc8a:	68c1      	ldr	r1, [r0, #12]
   bdc8c:	9100      	str	r1, [sp, #0]
   bdc8e:	4907      	ldr	r1, [pc, #28]	; (bdcac <asctime_r+0x40>)
   bdc90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bdc94:	440b      	add	r3, r1
   bdc96:	4906      	ldr	r1, [pc, #24]	; (bdcb0 <asctime_r+0x44>)
   bdc98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bdc9c:	440a      	add	r2, r1
   bdc9e:	4620      	mov	r0, r4
   bdca0:	4904      	ldr	r1, [pc, #16]	; (bdcb4 <asctime_r+0x48>)
   bdca2:	f7fb fb53 	bl	b934c <siprintf>
   bdca6:	4620      	mov	r0, r4
   bdca8:	b006      	add	sp, #24
   bdcaa:	bd10      	pop	{r4, pc}
   bdcac:	000bf6f5 	.word	0x000bf6f5
   bdcb0:	000bf6e0 	.word	0x000bf6e0
   bdcb4:	000bf6c0 	.word	0x000bf6c0

000bdcb8 <atexit>:
   bdcb8:	2300      	movs	r3, #0
   bdcba:	4601      	mov	r1, r0
   bdcbc:	461a      	mov	r2, r3
   bdcbe:	4618      	mov	r0, r3
   bdcc0:	f000 b9ba 	b.w	be038 <__register_exitproc>

000bdcc4 <gmtime>:
   bdcc4:	b538      	push	{r3, r4, r5, lr}
   bdcc6:	4b0b      	ldr	r3, [pc, #44]	; (bdcf4 <gmtime+0x30>)
   bdcc8:	681d      	ldr	r5, [r3, #0]
   bdcca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bdccc:	4604      	mov	r4, r0
   bdcce:	b953      	cbnz	r3, bdce6 <gmtime+0x22>
   bdcd0:	2024      	movs	r0, #36	; 0x24
   bdcd2:	f7fb fb23 	bl	b931c <malloc>
   bdcd6:	4602      	mov	r2, r0
   bdcd8:	63e8      	str	r0, [r5, #60]	; 0x3c
   bdcda:	b920      	cbnz	r0, bdce6 <gmtime+0x22>
   bdcdc:	4b06      	ldr	r3, [pc, #24]	; (bdcf8 <gmtime+0x34>)
   bdcde:	4807      	ldr	r0, [pc, #28]	; (bdcfc <gmtime+0x38>)
   bdce0:	2139      	movs	r1, #57	; 0x39
   bdce2:	f7fb fb5b 	bl	b939c <__assert_func>
   bdce6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bdce8:	4620      	mov	r0, r4
   bdcea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdcee:	f7fb bb75 	b.w	b93dc <gmtime_r>
   bdcf2:	bf00      	nop
   bdcf4:	2003ded0 	.word	0x2003ded0
   bdcf8:	000bf719 	.word	0x000bf719
   bdcfc:	000bf730 	.word	0x000bf730

000bdd00 <isprint>:
   bdd00:	4b02      	ldr	r3, [pc, #8]	; (bdd0c <isprint+0xc>)
   bdd02:	4418      	add	r0, r3
   bdd04:	7840      	ldrb	r0, [r0, #1]
   bdd06:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bdd0a:	4770      	bx	lr
   bdd0c:	000bf7e2 	.word	0x000bf7e2

000bdd10 <memcpy>:
   bdd10:	440a      	add	r2, r1
   bdd12:	4291      	cmp	r1, r2
   bdd14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bdd18:	d100      	bne.n	bdd1c <memcpy+0xc>
   bdd1a:	4770      	bx	lr
   bdd1c:	b510      	push	{r4, lr}
   bdd1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bdd22:	f803 4f01 	strb.w	r4, [r3, #1]!
   bdd26:	4291      	cmp	r1, r2
   bdd28:	d1f9      	bne.n	bdd1e <memcpy+0xe>
   bdd2a:	bd10      	pop	{r4, pc}

000bdd2c <memmove>:
   bdd2c:	4288      	cmp	r0, r1
   bdd2e:	b510      	push	{r4, lr}
   bdd30:	eb01 0402 	add.w	r4, r1, r2
   bdd34:	d902      	bls.n	bdd3c <memmove+0x10>
   bdd36:	4284      	cmp	r4, r0
   bdd38:	4623      	mov	r3, r4
   bdd3a:	d807      	bhi.n	bdd4c <memmove+0x20>
   bdd3c:	1e43      	subs	r3, r0, #1
   bdd3e:	42a1      	cmp	r1, r4
   bdd40:	d008      	beq.n	bdd54 <memmove+0x28>
   bdd42:	f811 2b01 	ldrb.w	r2, [r1], #1
   bdd46:	f803 2f01 	strb.w	r2, [r3, #1]!
   bdd4a:	e7f8      	b.n	bdd3e <memmove+0x12>
   bdd4c:	4402      	add	r2, r0
   bdd4e:	4601      	mov	r1, r0
   bdd50:	428a      	cmp	r2, r1
   bdd52:	d100      	bne.n	bdd56 <memmove+0x2a>
   bdd54:	bd10      	pop	{r4, pc}
   bdd56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bdd5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bdd5e:	e7f7      	b.n	bdd50 <memmove+0x24>

000bdd60 <memset>:
   bdd60:	4402      	add	r2, r0
   bdd62:	4603      	mov	r3, r0
   bdd64:	4293      	cmp	r3, r2
   bdd66:	d100      	bne.n	bdd6a <memset+0xa>
   bdd68:	4770      	bx	lr
   bdd6a:	f803 1b01 	strb.w	r1, [r3], #1
   bdd6e:	e7f9      	b.n	bdd64 <memset+0x4>

000bdd70 <srand>:
   bdd70:	b538      	push	{r3, r4, r5, lr}
   bdd72:	4b10      	ldr	r3, [pc, #64]	; (bddb4 <srand+0x44>)
   bdd74:	681d      	ldr	r5, [r3, #0]
   bdd76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bdd78:	4604      	mov	r4, r0
   bdd7a:	b9b3      	cbnz	r3, bddaa <srand+0x3a>
   bdd7c:	2018      	movs	r0, #24
   bdd7e:	f7fb facd 	bl	b931c <malloc>
   bdd82:	4602      	mov	r2, r0
   bdd84:	63a8      	str	r0, [r5, #56]	; 0x38
   bdd86:	b920      	cbnz	r0, bdd92 <srand+0x22>
   bdd88:	4b0b      	ldr	r3, [pc, #44]	; (bddb8 <srand+0x48>)
   bdd8a:	480c      	ldr	r0, [pc, #48]	; (bddbc <srand+0x4c>)
   bdd8c:	2142      	movs	r1, #66	; 0x42
   bdd8e:	f7fb fb05 	bl	b939c <__assert_func>
   bdd92:	490b      	ldr	r1, [pc, #44]	; (bddc0 <srand+0x50>)
   bdd94:	4b0b      	ldr	r3, [pc, #44]	; (bddc4 <srand+0x54>)
   bdd96:	e9c0 1300 	strd	r1, r3, [r0]
   bdd9a:	4b0b      	ldr	r3, [pc, #44]	; (bddc8 <srand+0x58>)
   bdd9c:	6083      	str	r3, [r0, #8]
   bdd9e:	230b      	movs	r3, #11
   bdda0:	8183      	strh	r3, [r0, #12]
   bdda2:	2100      	movs	r1, #0
   bdda4:	2001      	movs	r0, #1
   bdda6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bddaa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bddac:	2200      	movs	r2, #0
   bddae:	611c      	str	r4, [r3, #16]
   bddb0:	615a      	str	r2, [r3, #20]
   bddb2:	bd38      	pop	{r3, r4, r5, pc}
   bddb4:	2003ded0 	.word	0x2003ded0
   bddb8:	000bf719 	.word	0x000bf719
   bddbc:	000bf789 	.word	0x000bf789
   bddc0:	abcd330e 	.word	0xabcd330e
   bddc4:	e66d1234 	.word	0xe66d1234
   bddc8:	0005deec 	.word	0x0005deec

000bddcc <rand>:
   bddcc:	4b16      	ldr	r3, [pc, #88]	; (bde28 <rand+0x5c>)
   bddce:	b510      	push	{r4, lr}
   bddd0:	681c      	ldr	r4, [r3, #0]
   bddd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bddd4:	b9b3      	cbnz	r3, bde04 <rand+0x38>
   bddd6:	2018      	movs	r0, #24
   bddd8:	f7fb faa0 	bl	b931c <malloc>
   bdddc:	63a0      	str	r0, [r4, #56]	; 0x38
   bddde:	b928      	cbnz	r0, bddec <rand+0x20>
   bdde0:	4602      	mov	r2, r0
   bdde2:	4b12      	ldr	r3, [pc, #72]	; (bde2c <rand+0x60>)
   bdde4:	4812      	ldr	r0, [pc, #72]	; (bde30 <rand+0x64>)
   bdde6:	214e      	movs	r1, #78	; 0x4e
   bdde8:	f7fb fad8 	bl	b939c <__assert_func>
   bddec:	4a11      	ldr	r2, [pc, #68]	; (bde34 <rand+0x68>)
   bddee:	4b12      	ldr	r3, [pc, #72]	; (bde38 <rand+0x6c>)
   bddf0:	e9c0 2300 	strd	r2, r3, [r0]
   bddf4:	4b11      	ldr	r3, [pc, #68]	; (bde3c <rand+0x70>)
   bddf6:	6083      	str	r3, [r0, #8]
   bddf8:	230b      	movs	r3, #11
   bddfa:	8183      	strh	r3, [r0, #12]
   bddfc:	2201      	movs	r2, #1
   bddfe:	2300      	movs	r3, #0
   bde00:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bde04:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bde06:	4a0e      	ldr	r2, [pc, #56]	; (bde40 <rand+0x74>)
   bde08:	6920      	ldr	r0, [r4, #16]
   bde0a:	6963      	ldr	r3, [r4, #20]
   bde0c:	490d      	ldr	r1, [pc, #52]	; (bde44 <rand+0x78>)
   bde0e:	4342      	muls	r2, r0
   bde10:	fb01 2203 	mla	r2, r1, r3, r2
   bde14:	fba0 0101 	umull	r0, r1, r0, r1
   bde18:	1c43      	adds	r3, r0, #1
   bde1a:	eb42 0001 	adc.w	r0, r2, r1
   bde1e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bde22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bde26:	bd10      	pop	{r4, pc}
   bde28:	2003ded0 	.word	0x2003ded0
   bde2c:	000bf719 	.word	0x000bf719
   bde30:	000bf789 	.word	0x000bf789
   bde34:	abcd330e 	.word	0xabcd330e
   bde38:	e66d1234 	.word	0xe66d1234
   bde3c:	0005deec 	.word	0x0005deec
   bde40:	5851f42d 	.word	0x5851f42d
   bde44:	4c957f2d 	.word	0x4c957f2d

000bde48 <strchr>:
   bde48:	b2c9      	uxtb	r1, r1
   bde4a:	4603      	mov	r3, r0
   bde4c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bde50:	b11a      	cbz	r2, bde5a <strchr+0x12>
   bde52:	428a      	cmp	r2, r1
   bde54:	d1f9      	bne.n	bde4a <strchr+0x2>
   bde56:	4618      	mov	r0, r3
   bde58:	4770      	bx	lr
   bde5a:	2900      	cmp	r1, #0
   bde5c:	bf18      	it	ne
   bde5e:	2300      	movne	r3, #0
   bde60:	e7f9      	b.n	bde56 <strchr+0xe>

000bde62 <strchrnul>:
   bde62:	b510      	push	{r4, lr}
   bde64:	4604      	mov	r4, r0
   bde66:	f7ff ffef 	bl	bde48 <strchr>
   bde6a:	b918      	cbnz	r0, bde74 <strchrnul+0x12>
   bde6c:	4620      	mov	r0, r4
   bde6e:	f000 f814 	bl	bde9a <strlen>
   bde72:	4420      	add	r0, r4
   bde74:	bd10      	pop	{r4, pc}

000bde76 <strcmp>:
   bde76:	f810 2b01 	ldrb.w	r2, [r0], #1
   bde7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bde7e:	2a01      	cmp	r2, #1
   bde80:	bf28      	it	cs
   bde82:	429a      	cmpcs	r2, r3
   bde84:	d0f7      	beq.n	bde76 <strcmp>
   bde86:	1ad0      	subs	r0, r2, r3
   bde88:	4770      	bx	lr

000bde8a <strcpy>:
   bde8a:	4603      	mov	r3, r0
   bde8c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bde90:	f803 2b01 	strb.w	r2, [r3], #1
   bde94:	2a00      	cmp	r2, #0
   bde96:	d1f9      	bne.n	bde8c <strcpy+0x2>
   bde98:	4770      	bx	lr

000bde9a <strlen>:
   bde9a:	4603      	mov	r3, r0
   bde9c:	f813 2b01 	ldrb.w	r2, [r3], #1
   bdea0:	2a00      	cmp	r2, #0
   bdea2:	d1fb      	bne.n	bde9c <strlen+0x2>
   bdea4:	1a18      	subs	r0, r3, r0
   bdea6:	3801      	subs	r0, #1
   bdea8:	4770      	bx	lr

000bdeaa <strncmp>:
   bdeaa:	b510      	push	{r4, lr}
   bdeac:	b17a      	cbz	r2, bdece <strncmp+0x24>
   bdeae:	4603      	mov	r3, r0
   bdeb0:	3901      	subs	r1, #1
   bdeb2:	1884      	adds	r4, r0, r2
   bdeb4:	f813 0b01 	ldrb.w	r0, [r3], #1
   bdeb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bdebc:	4290      	cmp	r0, r2
   bdebe:	d101      	bne.n	bdec4 <strncmp+0x1a>
   bdec0:	42a3      	cmp	r3, r4
   bdec2:	d101      	bne.n	bdec8 <strncmp+0x1e>
   bdec4:	1a80      	subs	r0, r0, r2
   bdec6:	bd10      	pop	{r4, pc}
   bdec8:	2800      	cmp	r0, #0
   bdeca:	d1f3      	bne.n	bdeb4 <strncmp+0xa>
   bdecc:	e7fa      	b.n	bdec4 <strncmp+0x1a>
   bdece:	4610      	mov	r0, r2
   bded0:	e7f9      	b.n	bdec6 <strncmp+0x1c>

000bded2 <strncpy>:
   bded2:	b510      	push	{r4, lr}
   bded4:	3901      	subs	r1, #1
   bded6:	4603      	mov	r3, r0
   bded8:	b132      	cbz	r2, bdee8 <strncpy+0x16>
   bdeda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bdede:	f803 4b01 	strb.w	r4, [r3], #1
   bdee2:	3a01      	subs	r2, #1
   bdee4:	2c00      	cmp	r4, #0
   bdee6:	d1f7      	bne.n	bded8 <strncpy+0x6>
   bdee8:	441a      	add	r2, r3
   bdeea:	2100      	movs	r1, #0
   bdeec:	4293      	cmp	r3, r2
   bdeee:	d100      	bne.n	bdef2 <strncpy+0x20>
   bdef0:	bd10      	pop	{r4, pc}
   bdef2:	f803 1b01 	strb.w	r1, [r3], #1
   bdef6:	e7f9      	b.n	bdeec <strncpy+0x1a>

000bdef8 <strrchr>:
   bdef8:	b538      	push	{r3, r4, r5, lr}
   bdefa:	4603      	mov	r3, r0
   bdefc:	460c      	mov	r4, r1
   bdefe:	b969      	cbnz	r1, bdf1c <strrchr+0x24>
   bdf00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdf04:	f7ff bfa0 	b.w	bde48 <strchr>
   bdf08:	1c43      	adds	r3, r0, #1
   bdf0a:	4605      	mov	r5, r0
   bdf0c:	4621      	mov	r1, r4
   bdf0e:	4618      	mov	r0, r3
   bdf10:	f7ff ff9a 	bl	bde48 <strchr>
   bdf14:	2800      	cmp	r0, #0
   bdf16:	d1f7      	bne.n	bdf08 <strrchr+0x10>
   bdf18:	4628      	mov	r0, r5
   bdf1a:	bd38      	pop	{r3, r4, r5, pc}
   bdf1c:	2500      	movs	r5, #0
   bdf1e:	e7f5      	b.n	bdf0c <strrchr+0x14>

000bdf20 <_strtol_l.constprop.0>:
   bdf20:	2b01      	cmp	r3, #1
   bdf22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdf26:	d001      	beq.n	bdf2c <_strtol_l.constprop.0+0xc>
   bdf28:	2b24      	cmp	r3, #36	; 0x24
   bdf2a:	d906      	bls.n	bdf3a <_strtol_l.constprop.0+0x1a>
   bdf2c:	f7fb fa2e 	bl	b938c <__errno>
   bdf30:	2316      	movs	r3, #22
   bdf32:	6003      	str	r3, [r0, #0]
   bdf34:	2000      	movs	r0, #0
   bdf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdf3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; be020 <_strtol_l.constprop.0+0x100>
   bdf3e:	460d      	mov	r5, r1
   bdf40:	462e      	mov	r6, r5
   bdf42:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdf46:	f814 700c 	ldrb.w	r7, [r4, ip]
   bdf4a:	f017 0708 	ands.w	r7, r7, #8
   bdf4e:	d1f7      	bne.n	bdf40 <_strtol_l.constprop.0+0x20>
   bdf50:	2c2d      	cmp	r4, #45	; 0x2d
   bdf52:	d132      	bne.n	bdfba <_strtol_l.constprop.0+0x9a>
   bdf54:	782c      	ldrb	r4, [r5, #0]
   bdf56:	2701      	movs	r7, #1
   bdf58:	1cb5      	adds	r5, r6, #2
   bdf5a:	2b00      	cmp	r3, #0
   bdf5c:	d05b      	beq.n	be016 <_strtol_l.constprop.0+0xf6>
   bdf5e:	2b10      	cmp	r3, #16
   bdf60:	d109      	bne.n	bdf76 <_strtol_l.constprop.0+0x56>
   bdf62:	2c30      	cmp	r4, #48	; 0x30
   bdf64:	d107      	bne.n	bdf76 <_strtol_l.constprop.0+0x56>
   bdf66:	782c      	ldrb	r4, [r5, #0]
   bdf68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bdf6c:	2c58      	cmp	r4, #88	; 0x58
   bdf6e:	d14d      	bne.n	be00c <_strtol_l.constprop.0+0xec>
   bdf70:	786c      	ldrb	r4, [r5, #1]
   bdf72:	2310      	movs	r3, #16
   bdf74:	3502      	adds	r5, #2
   bdf76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bdf7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdf7e:	f04f 0c00 	mov.w	ip, #0
   bdf82:	fbb8 f9f3 	udiv	r9, r8, r3
   bdf86:	4666      	mov	r6, ip
   bdf88:	fb03 8a19 	mls	sl, r3, r9, r8
   bdf8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bdf90:	f1be 0f09 	cmp.w	lr, #9
   bdf94:	d816      	bhi.n	bdfc4 <_strtol_l.constprop.0+0xa4>
   bdf96:	4674      	mov	r4, lr
   bdf98:	42a3      	cmp	r3, r4
   bdf9a:	dd24      	ble.n	bdfe6 <_strtol_l.constprop.0+0xc6>
   bdf9c:	f1bc 0f00 	cmp.w	ip, #0
   bdfa0:	db1e      	blt.n	bdfe0 <_strtol_l.constprop.0+0xc0>
   bdfa2:	45b1      	cmp	r9, r6
   bdfa4:	d31c      	bcc.n	bdfe0 <_strtol_l.constprop.0+0xc0>
   bdfa6:	d101      	bne.n	bdfac <_strtol_l.constprop.0+0x8c>
   bdfa8:	45a2      	cmp	sl, r4
   bdfaa:	db19      	blt.n	bdfe0 <_strtol_l.constprop.0+0xc0>
   bdfac:	fb06 4603 	mla	r6, r6, r3, r4
   bdfb0:	f04f 0c01 	mov.w	ip, #1
   bdfb4:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdfb8:	e7e8      	b.n	bdf8c <_strtol_l.constprop.0+0x6c>
   bdfba:	2c2b      	cmp	r4, #43	; 0x2b
   bdfbc:	bf04      	itt	eq
   bdfbe:	782c      	ldrbeq	r4, [r5, #0]
   bdfc0:	1cb5      	addeq	r5, r6, #2
   bdfc2:	e7ca      	b.n	bdf5a <_strtol_l.constprop.0+0x3a>
   bdfc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bdfc8:	f1be 0f19 	cmp.w	lr, #25
   bdfcc:	d801      	bhi.n	bdfd2 <_strtol_l.constprop.0+0xb2>
   bdfce:	3c37      	subs	r4, #55	; 0x37
   bdfd0:	e7e2      	b.n	bdf98 <_strtol_l.constprop.0+0x78>
   bdfd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bdfd6:	f1be 0f19 	cmp.w	lr, #25
   bdfda:	d804      	bhi.n	bdfe6 <_strtol_l.constprop.0+0xc6>
   bdfdc:	3c57      	subs	r4, #87	; 0x57
   bdfde:	e7db      	b.n	bdf98 <_strtol_l.constprop.0+0x78>
   bdfe0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdfe4:	e7e6      	b.n	bdfb4 <_strtol_l.constprop.0+0x94>
   bdfe6:	f1bc 0f00 	cmp.w	ip, #0
   bdfea:	da05      	bge.n	bdff8 <_strtol_l.constprop.0+0xd8>
   bdfec:	2322      	movs	r3, #34	; 0x22
   bdfee:	6003      	str	r3, [r0, #0]
   bdff0:	4646      	mov	r6, r8
   bdff2:	b942      	cbnz	r2, be006 <_strtol_l.constprop.0+0xe6>
   bdff4:	4630      	mov	r0, r6
   bdff6:	e79e      	b.n	bdf36 <_strtol_l.constprop.0+0x16>
   bdff8:	b107      	cbz	r7, bdffc <_strtol_l.constprop.0+0xdc>
   bdffa:	4276      	negs	r6, r6
   bdffc:	2a00      	cmp	r2, #0
   bdffe:	d0f9      	beq.n	bdff4 <_strtol_l.constprop.0+0xd4>
   be000:	f1bc 0f00 	cmp.w	ip, #0
   be004:	d000      	beq.n	be008 <_strtol_l.constprop.0+0xe8>
   be006:	1e69      	subs	r1, r5, #1
   be008:	6011      	str	r1, [r2, #0]
   be00a:	e7f3      	b.n	bdff4 <_strtol_l.constprop.0+0xd4>
   be00c:	2430      	movs	r4, #48	; 0x30
   be00e:	2b00      	cmp	r3, #0
   be010:	d1b1      	bne.n	bdf76 <_strtol_l.constprop.0+0x56>
   be012:	2308      	movs	r3, #8
   be014:	e7af      	b.n	bdf76 <_strtol_l.constprop.0+0x56>
   be016:	2c30      	cmp	r4, #48	; 0x30
   be018:	d0a5      	beq.n	bdf66 <_strtol_l.constprop.0+0x46>
   be01a:	230a      	movs	r3, #10
   be01c:	e7ab      	b.n	bdf76 <_strtol_l.constprop.0+0x56>
   be01e:	bf00      	nop
   be020:	000bf7e3 	.word	0x000bf7e3

000be024 <strtol>:
   be024:	4613      	mov	r3, r2
   be026:	460a      	mov	r2, r1
   be028:	4601      	mov	r1, r0
   be02a:	4802      	ldr	r0, [pc, #8]	; (be034 <strtol+0x10>)
   be02c:	6800      	ldr	r0, [r0, #0]
   be02e:	f7ff bf77 	b.w	bdf20 <_strtol_l.constprop.0>
   be032:	bf00      	nop
   be034:	2003ded0 	.word	0x2003ded0

000be038 <__register_exitproc>:
   be038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be03c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; be0f8 <__register_exitproc+0xc0>
   be040:	4606      	mov	r6, r0
   be042:	f8d8 0000 	ldr.w	r0, [r8]
   be046:	461f      	mov	r7, r3
   be048:	460d      	mov	r5, r1
   be04a:	4691      	mov	r9, r2
   be04c:	f000 f856 	bl	be0fc <__retarget_lock_acquire_recursive>
   be050:	4b25      	ldr	r3, [pc, #148]	; (be0e8 <__register_exitproc+0xb0>)
   be052:	681c      	ldr	r4, [r3, #0]
   be054:	b934      	cbnz	r4, be064 <__register_exitproc+0x2c>
   be056:	4c25      	ldr	r4, [pc, #148]	; (be0ec <__register_exitproc+0xb4>)
   be058:	601c      	str	r4, [r3, #0]
   be05a:	4b25      	ldr	r3, [pc, #148]	; (be0f0 <__register_exitproc+0xb8>)
   be05c:	b113      	cbz	r3, be064 <__register_exitproc+0x2c>
   be05e:	681b      	ldr	r3, [r3, #0]
   be060:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   be064:	6863      	ldr	r3, [r4, #4]
   be066:	2b1f      	cmp	r3, #31
   be068:	dd07      	ble.n	be07a <__register_exitproc+0x42>
   be06a:	f8d8 0000 	ldr.w	r0, [r8]
   be06e:	f000 f847 	bl	be100 <__retarget_lock_release_recursive>
   be072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be07a:	b34e      	cbz	r6, be0d0 <__register_exitproc+0x98>
   be07c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   be080:	b988      	cbnz	r0, be0a6 <__register_exitproc+0x6e>
   be082:	4b1c      	ldr	r3, [pc, #112]	; (be0f4 <__register_exitproc+0xbc>)
   be084:	b923      	cbnz	r3, be090 <__register_exitproc+0x58>
   be086:	f8d8 0000 	ldr.w	r0, [r8]
   be08a:	f000 f838 	bl	be0fe <__retarget_lock_release>
   be08e:	e7f0      	b.n	be072 <__register_exitproc+0x3a>
   be090:	f44f 7084 	mov.w	r0, #264	; 0x108
   be094:	f7fb f942 	bl	b931c <malloc>
   be098:	2800      	cmp	r0, #0
   be09a:	d0f4      	beq.n	be086 <__register_exitproc+0x4e>
   be09c:	2300      	movs	r3, #0
   be09e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   be0a2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   be0a6:	6863      	ldr	r3, [r4, #4]
   be0a8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   be0ac:	2201      	movs	r2, #1
   be0ae:	409a      	lsls	r2, r3
   be0b0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   be0b4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   be0b8:	4313      	orrs	r3, r2
   be0ba:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be0be:	2e02      	cmp	r6, #2
   be0c0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   be0c4:	bf02      	ittt	eq
   be0c6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   be0ca:	4313      	orreq	r3, r2
   be0cc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   be0d0:	6863      	ldr	r3, [r4, #4]
   be0d2:	f8d8 0000 	ldr.w	r0, [r8]
   be0d6:	1c5a      	adds	r2, r3, #1
   be0d8:	3302      	adds	r3, #2
   be0da:	6062      	str	r2, [r4, #4]
   be0dc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   be0e0:	f000 f80e 	bl	be100 <__retarget_lock_release_recursive>
   be0e4:	2000      	movs	r0, #0
   be0e6:	e7c6      	b.n	be076 <__register_exitproc+0x3e>
   be0e8:	2003e7e8 	.word	0x2003e7e8
   be0ec:	2003e75c 	.word	0x2003e75c
   be0f0:	00000000 	.word	0x00000000
   be0f4:	000b931d 	.word	0x000b931d
   be0f8:	2003df34 	.word	0x2003df34

000be0fc <__retarget_lock_acquire_recursive>:
   be0fc:	4770      	bx	lr

000be0fe <__retarget_lock_release>:
   be0fe:	4770      	bx	lr

000be100 <__retarget_lock_release_recursive>:
   be100:	4770      	bx	lr

000be102 <link_code_end>:
	...

000be104 <dynalib_user>:
   be104:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be114:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   be124:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   be134:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   be144:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   be154:	7420 206f 7325 4e00 646f 2065 6425 7220      to %s.Node %d r
   be164:	7465 7972 7320 6174 6574 2520 2064 6964     etry state %d di
   be174:	6563 6f20 2066 6425 7220 7465 7972 6920     ce of %d retry i
   be184:	206e 6c25 2075 6573 6f63 646e 0073 6e55     n %lu seconds.Un
   be194:	6f63 666e 6769 7275 6465 6e20 646f 2065     configured node 
   be1a4:	202d 6f6e 6f20 6666 6573 2074 6e61 2064     - no offset and 
   be1b4:	6c25 2075 6573 6f63 646e 2073 6974 6c6c     %lu seconds till
   be1c4:	6e20 7865 2074 6570 6972 646f 2500 0054      next period.%T.
   be1d4:	7453 7261 6974 676e 6120 6e20 7765 7020     Starting a new p
   be1e4:	7265 6f69 2064 6c25 2075 6573 2063 6974     eriod %lu sec ti
   be1f4:	6c6c 2520 0073 6e49 7420 7265 696d 616e     ll %s.In termina
   be204:	206c 6870 7361 2065 6c25 2075 6573 6f63     l phase %lu seco
   be214:	646e 2073 6974 6c6c 2520 0073 666f 0066     nds till %s.off.
   be224:	7254 6979 676e 7420 206f 6572 6f63 6e6e     Trying to reconn
   be234:	6365 2074 6f74 6720 7461 7765 7961 5000     ect to gateway.P
   be244:	7261 206b 7369 6f20 6570 206e 7562 2074     ark is open but 
   be254:	6577 6820 7661 2065 6f6e 2074 6f63 6e6e     we have not conn
   be264:	6365 6574 2064 6f66 2072 766f 7265 7420     ected for over t
   be274:	6f77 7220 7065 726f 6974 676e 7020 7265     wo reporting per
   be284:	6f69 7364 2d20 6e20 6565 2064 6f74 7020     iods - need to p
   be294:	776f 7265 6320 6379 656c 6120 646e 6720     ower cycle and g
   be2a4:	206f 6f74 3120 6d20 6e69 6620 6572 7571     o to 1 min frequ
   be2b4:	6e65 7963 5300 656c 7065 6620 726f 2520     ency.Sleep for %
   be2c4:	2069 6573 6f63 646e 2073 6e75 6974 206c     i seconds until 
   be2d4:	656e 7478 6520 6576 746e 6120 2074 7325     next event at %s
   be2e4:	7720 7469 2068 6573 736e 726f 2520 0073      with sensor %s.
   be2f4:	6f57 656b 7720 7469 2068 7375 7265 6220     Woke with user b
   be304:	7475 6f74 206e 202d 6f4c 4152 5320 6174     utton - LoRA Sta
   be314:	6574 5700 6b6f 2065 6977 6874 7320 6e65     te.Woke with sen
   be324:	6f73 2072 6e69 6574 7272 7075 0074 6954     sor interrupt.Ti
   be334:	656d 6920 2073 7075 6120 2074 7325 7720     me is up at %s w
   be344:	7469 2068 6c25 2069 7266 6565 6d20 6d65     ith %li free mem
   be354:	726f 0079 6c41 7265 2074 6f63 6564 2520     ory.Alert code %
   be364:	2c64 7720 6c69 206c 6168 646e 656c 6920     d, will handle i
   be374:	206e 5245 4f52 2052 7473 7461 0065 6146     n ERROR state.Fa
   be384:	6c69 6465 6920 206e 6164 6174 7320 6e65     iled in data sen
   be394:	2c64 7220 7465 7972 7453 7461 2065 203d     d, retryState = 
   be3a4:	6425 4400 6469 6e20 746f 7220 6365 6965     %d.Did not recei
   be3b4:	6576 6120 7220 7365 6f70 736e 0065 6c41     ve a response.Al
   be3c4:	7265 2074 2031 202d 6f4a 6e69 5220 7165     ert 1 - Join Req
   be3d4:	6575 7473 5220 7165 6975 6572 0064 6c41     uest Required.Al
   be3e4:	7265 2074 2d32 4e20 7765 4420 7961 4120     ert 2- New Day A
   be3f4:	656c 7472 4100 656c 7472 3320 2d20 5220     lert.Alert 3 - R
   be404:	7365 7465 6974 676e 6420 7665 6369 0065     esetting device.
   be414:	6e49 7469 6169 696c 657a 4c20 526f 2041     Initialize LoRA 
   be424:	6172 6964 006f 6e49 7469 6169 696c 617a     radio.Initializa
   be434:	6974 6e6f 7320 6375 6563 7373 7566 006c     tion successful.
   be444:	6e49 7469 6169 696c 617a 6974 6e6f 6e20     Initialization n
   be454:	746f 7320 6375 6563 7373 7566 206c 202d     ot successful - 
   be464:	6f70 6577 2072 7963 6c63 0065 6e55 6564     power cycle.Unde
   be474:	6966 656e 2064 7245 6f72 2072 7453 7461     fined Error Stat
   be484:	0065 6552 6573 7474 6e69 2067 7564 2065     e.Resetting due 
   be494:	6f74 6c20 776f 6d20 6d65 726f 0079 6e49     to low memory.In
   be4a4:	7420 6568 6420 7369 6f63 6e6e 6365 2074      the disconnect 
   be4b4:	7266 6d6f 5020 7261 6974 6c63 2065 7566     from Particle fu
   be4c4:	636e 6974 6e6f 4600 6961 656c 2064 6f74     nction.Failed to
   be4d4:	6420 7369 6f63 6e6e 6365 2074 7266 6d6f      disconnect from
   be4e4:	5020 7261 6974 6c63 0065 6944 6373 6e6f      Particle.Discon
   be4f4:	656e 7463 6465 6620 6f72 206d 6150 7472     nected from Part
   be504:	6369 656c 6920 206e 6925 7320 6365 6e6f     icle in %i secon
   be514:	7364 4600 6961 656c 2064 6f74 7420 7275     ds.Failed to tur
   be524:	206e 666f 2066 6874 2065 6543 6c6c 6c75     n off the Cellul
   be534:	7261 6d20 646f 6d65 5400 7275 656e 2064     ar modem.Turned 
   be544:	666f 2066 6874 2065 6563 6c6c 6c75 7261     off the cellular
   be554:	6d20 646f 6d65 6920 206e 6925 7320 6365      modem in %i sec
   be564:	6e6f 7364 4c00 526f 2041 6e49 7469 6169     onds.LoRA Initia
   be574:	696c 617a 6974 6e6f 6620 6961 756c 6572     lization failure
   be584:	6120 656c 7472 6320 646f 2065 6425 2d20      alert code %d -
   be594:	7020 776f 7265 6320 6379 656c 6920 206e      power cycle in 
   be5a4:	3033 4e00 646f 2065 756e 626d 7265 6920     30.Node number i
   be5b4:	646e 6369 7461 6465 7520 636e 6e6f 6966     ndicated unconfi
   be5c4:	7567 6572 2064 6f6e 6564 6f20 2066 6425     gured node of %d
   be5d4:	7320 7465 6974 676e 6120 656c 7472 6320      setting alert c
   be5e4:	646f 2065 6f74 2520 0064 7355 7265 6220     ode to %d.User b
   be5f4:	7475 6f74 206e 7270 7365 6573 2064 7461     utton pressed at
   be604:	7320 6174 7472 7075 2d20 6120 7474 6d65      startup - attem
   be614:	7470 7420 206f 6f63 6e6e 6365 0074 6f43     pt to connect.Co
   be624:	6e6e 6365 6574 2064 202d 7473 7961 6e69     nnected - stayin
   be634:	2067 6e6f 696c 656e 5300 6174 7472 7075     g online.Startup
   be644:	6320 6d6f 6c70 7465 2065 6f66 2072 6874      complete for th
   be654:	2065 6f4e 6564 7720 7469 2068 6c61 7265     e Node with aler
   be664:	2074 6f63 6564 2520 2064 6e61 2064 616c     t code %d and la
   be674:	7473 6320 6e6f 656e 7463 2520 0073 0000     st connect %s...

000be684 <_ZTVN5spark10LogHandlerE>:
	...
   be694:	40a5 000b 40cd 000b                         .@...@..

000be69c <_ZTVN5spark16SerialLogHandlerE>:
	...
   be6a4:	4189 000b 41bd 000b aa99 000b 40cf 000b     .A...A.......@..
   be6b4:	6e69 7469 6620 6961 656c 0064 6e69 4c20     init failed.in L
   be6c4:	526f 2041 6573 7574 2070 202d 6f6e 6564     oRA setup - node
   be6d4:	6e20 6d75 6562 2072 6425 4c00 526f 2041      number %d.LoRA 
   be6e4:	6152 6964 206f 6e69 7469 6169 696c 657a     Radio initialize
   be6f4:	2064 7361 6120 6720 7461 7765 7961 7720     d as a gateway w
   be704:	7469 2068 2061 6564 6976 6563 4449 6f20     ith a deviceID o
   be714:	2066 7325 4c00 526f 2041 6152 6964 206f     f %s.LoRA Radio 
   be724:	6e69 7469 6169 696c 657a 2064 7361 6e20     initialized as n
   be734:	646f 2065 6925 6120 646e 6120 6420 7665     ode %i and a dev
   be744:	6369 4965 2044 666f 2520 0073 6f4c 4152     iceID of %s.LoRA
   be754:	5220 6461 6f69 6920 696e 6974 6c61 7a69      Radio initializ
   be764:	6465 6120 2073 6e61 7520 636e 6e6f 6966     ed as an unconfi
   be774:	7567 6572 2064 6f6e 6564 2520 2069 6e61     gured node %i an
   be784:	2064 2061 6564 6976 6563 4449 6f20 2066     d a deviceID of 
   be794:	7325 7700 7469 0068 6977 6874 756f 0074     %s.with.without.
   be7a4:	706f 6e65 6300 6f6c 6573 0064 6854 2065     open.closed.The 
   be7b4:	6167 6574 6177 2079 6573 2074 6e61 6120     gateway set an a
   be7c4:	656c 7472 2520 0064 6150 6b72 6920 2073     lert %d.Park is 
   be7d4:	6c63 736f 6465 2d20 7220 7365 7465 6520     closed - reset e
   be7e4:	6576 7972 6874 6e69 0067 6144 6174 7220     verything.Data r
   be7f4:	7065 726f 2074 6361 6e6b 776f 656c 6764     eport acknowledg
   be804:	6465 2520 2073 6c61 7265 2074 6f66 2072     ed %s alert for 
   be814:	656d 7373 6761 2065 6425 7020 7261 206b     message %d park 
   be824:	7369 2520 2073 6e61 2064 6c61 7265 2074     is %s and alert 
   be834:	6f63 6564 6920 2073 6425 4e00 646f 2065     code is %d.Node 
   be844:	6425 4a20 696f 206e 6572 7571 7365 2074     %d Join request 
   be854:	6361 6e6b 776f 656c 6764 6465 6120 646e     acknowledged and
   be864:	7320 6e65 6f73 2072 6573 2074 6f74 2520      sensor set to %
   be874:	0064 614d 6967 2063 754e 626d 7265 6d20     d.Magic Number m
   be884:	7369 616d 6374 2068 202d 6769 6f6e 6972     ismatch - ignori
   be894:	676e 6d20 7365 6173 6567 5200 6365 6965     ng message.Recei
   be8a4:	6576 2064 7266 6d6f 6e20 646f 2065 6425     ved from node %d
   be8b4:	7720 7469 2068 7372 6973 253d 2064 202d      with rssi=%d - 
   be8c4:	2061 7325 6d20 7365 6173 6567 7720 7469     a %s message wit
   be8d4:	2068 6425 6820 706f 0073 6553 2074 6c63     h %d hops.Set cl
   be8e4:	636f 206b 6f74 2520 2073 6e61 2064 6572     ock to %s and re
   be8f4:	6f70 7472 6620 6572 7571 6e65 7963 7420     port frequency t
   be904:	206f 6425 6d20 6e69 7475 7365 4900 766e     o %d minutes.Inv
   be914:	6c61 6465 4c20 526f 2041 656d 7373 6761     aled LoRA messag
   be924:	2065 6c66 6761 5300 6e65 6964 676e 6420     e flag.Sending d
   be934:	7461 2061 6572 6f70 7472 6e20 6d75 6562     ata report numbe
   be944:	2072 6425 4e00 646f 2065 6425 6420 7461     r %d.Node %d dat
   be954:	2061 6572 6f70 7472 6420 6c65 7669 7265     a report deliver
   be964:	6465 2d20 7320 6375 6563 7373 7220 7461     ed - success rat
   be974:	2065 3425 322e 0066 6f4e 6564 2520 2064     e %4.2f.Node %d 
   be984:	202d 6144 6174 7220 7065 726f 2074 6573     - Data report se
   be994:	646e 7420 206f 6167 6574 6177 2079 6425     nd to gateway %d
   be9a4:	6620 6961 656c 2064 202d 6f4e 5220 756f      failed - No Rou
   be9b4:	6574 2d20 7320 6375 6563 7373 7220 7461     te - success rat
   be9c4:	2065 3425 322e 0066 6f4e 6564 2520 2064     e %4.2f.Node %d 
   be9d4:	202d 6144 6174 7220 7065 726f 2074 6573     - Data report se
   be9e4:	646e 7420 206f 6167 6574 6177 2079 6425     nd to gateway %d
   be9f4:	6620 6961 656c 2064 202d 6e55 6261 656c      failed - Unable
   bea04:	7420 206f 6544 696c 6576 2072 202d 7573      to Deliver - su
   bea14:	6363 7365 2073 6172 6574 2520 2e34 6632     ccess rate %4.2f
   bea24:	4e00 646f 2065 6425 2d20 4420 7461 2061     .Node %d - Data 
   bea34:	6572 6f70 7472 7320 6e65 2064 6f74 6720     report send to g
   bea44:	7461 7765 7961 2520 2064 6166 6c69 6465     ateway %d failed
   bea54:	2020 202d 6e55 6e6b 776f 206e 202d 7573       - Unknown - su
   bea64:	6363 7365 2073 6172 6574 2520 2e34 6632     ccess rate %4.2f
   bea74:	5300 6e65 6964 676e 6a20 696f 206e 6572     .Sending join re
   bea84:	7571 7365 2074 6f66 2072 6e75 6f63 666e     quest for unconf
   bea94:	6769 7275 6465 6e20 646f 0065 6553 646e     igured node.Send
   beaa4:	6e69 2067 6f6a 6e69 7220 7165 6575 7473     ing join request
   beab4:	6120 2073 6954 656d 6920 2073 6f6e 2074      as Time is not 
   beac4:	6176 696c 0064 6553 646e 6e69 2067 6f6a     valid.Sending jo
   bead4:	6e69 7220 7165 6575 7473 7420 206f 6c63     in request to cl
   beae4:	6165 2072 6c61 7265 2074 6f63 6564 4a00     ear alert code.J
   beaf4:	696f 206e 6572 7571 7365 2074 6573 746e     oin request sent
   beb04:	7420 206f 6167 6574 6177 2079 7573 6363      to gateway succ
   beb14:	7365 6673 6c75 796c 4a00 696f 206e 6572     essfully.Join re
   beb24:	7571 7365 2074 6f74 4720 7461 7765 7961     quest to Gateway
   beb34:	6620 6961 656c 0064                          failed.

000beb3c <_ZTVN8particle9LEDStatusE>:
	...
   beb44:	5221 000b 523d 000b 520d 000b               !R..=R...R..

000beb50 <_ZTV14LoRA_Functions>:
	...
   beb58:	520f 000b 5211 000b 6164 6174 6e20 746f     .R...R..data not
   beb68:	7620 6c61 6469 6620 6572 7571 6e65 7963      valid frequency
   beb78:	6d20 6e69 7475 7365 3d20 6425 6400 7461      minutes =%d.dat
   beb88:	2061 6f6e 2074 6176 696c 2064 6f6e 6564     a not valid node
   beb98:	6e20 6d75 6562 2072 253d 0064 7973 5373      number =%d.sysS
   beba8:	6174 7574 2073 6164 6174 6920 2073 7325     tatus data is %s
   bebb8:	6300 7275 6572 746e 6420 7461 2061 6f6e     .current data no
   bebc8:	2074 6176 696c 2064 6f68 7275 796c 6f43     t valid hourlyCo
   bebd8:	6e75 3d74 6425 6300 7275 6572 746e 6420     unt=%d.current d
   bebe8:	7461 2061 7369 2520 0073 6164 6174 6920     ata is %s.data i
   bebf8:	696e 6974 6c61 7a69 6465 4c00 616f 6964     nitialized.Loadi
   bec08:	676e 7320 7379 6574 206d 6564 6166 6c75     ng system defaul
   bec18:	7374 4300 7275 6572 746e 4420 7461 2061     ts.Current Data 
   bec28:	6e49 7469 6169 696c 657a 0064               Initialized.

000bec34 <_ZTV8MB85RC64>:
	...
   bec3c:	5bfd 000b 5c11 000b 734d 000b 73e3 000b     .[...\..Ms...s..
   bec4c:	7465 000b                                   et..

000bec50 <_ZTV13sysStatusData>:
	...
   bec58:	5d25 000b 5c8f 000b 5c67 000b 89a7 000b     %]...\..g\......
   bec68:	89cf 000b 6051 000b 6231 000b 5c25 000b     ....Q`..1b..%\..
   bec78:	5c3d 000b                                   =\..

000bec7c <_ZTV17currentStatusData>:
	...
   bec84:	5e09 000b 5c8f 000b 5c67 000b 89a7 000b     .^...\..g\......
   bec94:	89cf 000b 60e1 000b 630d 000b 5bd1 000b     .....`...c...[..
   beca4:	5be9 000b 6e49 7469 6c61 7a69 6e69 2067     .[..Initalizing 
   becb4:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   becc4:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   becd4:	6f43 666e 6769 0000                         Config..

000becdc <BLUE_LED>:
   becdc:	0007                                        ..

000becde <BUTTON_PIN>:
   becde:	0004                                        ..

000bece0 <INT_PIN>:
   bece0:	0012                                        ..

000bece2 <RFM95_CS>:
   bece2:	0005                                        ..

000bece4 <RFM95_INT>:
   bece4:	0002                                        ..

000bece6 <RFM95_RST>:
   bece6:	0006                                        ..

000bece8 <TMP36_SENSE_PIN>:
   bece8:	000f 6e55 6e6b 776f 006e 6f4e 656e 5700     ..Unknown.None.W
   becf8:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
   bed08:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
   bed18:	4c00 4554 435f 5441 4d5f 0031 544c 5f45     .LTE_CAT_M1.LTE_
   bed28:	4143 5f54 424e 0031 6f4e 2074 6843 7261     CAT_NB1.Not Char
   bed38:	6967 676e 4300 6168 6772 6465 4400 7369     ging.Charged.Dis
   bed48:	6863 7261 6967 676e 4600 7561 746c 4400     charging.Fault.D
   bed58:	6369 6e6f 656e 7463 6465 4100 7373 7265     iconnected.Asser
   bed68:	6974 6e6f 6146 6c69 7275 2065 702a 705f     tionFailure *p_p
   bed78:	6e69 3c20 2820 3233 2b20 3120 2936 2500     in < (32 + 16).%
   bed88:	2073 3a53 3225 302e 2566 2c25 5120 253a     s S:%2.0f%%, Q:%
   bed98:	2e32 6630 2525 0020 6f43 6e75 2c74 6820     2.0f%% .Count, h
   beda8:	756f 6c72 3a79 2520 2e69 6420 6961 796c     ourly: %i. daily
   bedb8:	203a 6925 4100 7373 7265 6974 6e6f 6146     : %i.AssertionFa
   bedc8:	6c69 7275 2065 7273 2063 2626 7320 6372     ilure src && src
   bedd8:	3e2d 6163 6c6c 6162 6b63 0000 ecea 000b     ->callback......
   bede8:	ecf2 000b ecf7 000b ecfc 000b ed00 000b     ................
   bedf8:	ed05 000b ed0a 000b ed0e 000b ed19 000b     ................
   bee08:	ed24 000b 6166 6c69 6465 7420 206f 6572     $...failed to re
   bee18:	6461 7220 6765 6441 7264 253d 3230 2078     ad regAddr=%02x 
   bee28:	6f63 6e75 3d74 7525 6600 6961 656c 2064     count=%u.failed 
   bee38:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   bee48:	3025 7832 7320 6174 3d74 6425 4600 554f     %02x stat=%d.FOU
   bee58:	2054 6964 2064 6f6e 2074 6f67 4820 4749     T did not go HIG
   bee68:	0048 6f6e 2074 6564 6574 7463 6465 6600     H.not detected.f
   bee78:	6961 656c 2064 6f74 7720 6972 6574 7220     ailed to write r
   bee88:	6765 6441 7264 253d 3230 2078 7473 7461     egAddr=%02x stat
   bee98:	253d 0064 6573 5774 5444 2520 0064 6177     =%d.setWDT %d.wa
   beea8:	6374 6468 676f 6320 656c 7261 6465 6220     tchdog cleared b
   beeb8:	6552 7573 746c 253d 0064 6177 6374 6468     Result=%d.watchd
   beec8:	676f 7320 7465 6620 756f 5372 6365 3d73     og set fourSecs=
   beed8:	6425 6220 6552 7573 746c 253d 0064 4157     %d bResult=%d.WA
   beee8:	4354 4448 474f 4400 4545 5f50 4f50 4557     TCHDOG.DEEP_POWE
   beef8:	5f52 4f44 4e57 4300 554f 544e 4f44 4e57     R_DOWN.COUNTDOWN
   bef08:	545f 4d49 5245 4100 414c 4d52 6600 6961     _TIMER.ALARM.fai
   bef18:	756c 6572 6920 206e 7075 6164 6574 6157     lure in updateWa
   bef28:	656b 6552 7361 6e6f 2520 0064 6177 656b     keReason %d.wake
   bef38:	7220 6165 6f73 206e 203d 7325 6600 6961      reason = %s.fai
   bef48:	756c 6572 6920 206e 6573 4374 756f 746e     lure in setCount
   bef58:	6f64 6e77 6954 656d 2072 6425 6600 6961     downTimer %d.fai
   bef68:	756c 6572 6920 206e 6564 7065 6f50 6577     lure in deepPowe
   bef78:	4472 776f 206e 6425 5200 4745 535f 454c     rDown %d.REG_SLE
   bef88:	5045 435f 5254 3d4c 7830 3225 0078 6964     EP_CTRL=0x%2x.di
   bef98:	6e64 7427 7020 776f 7265 6420 776f 006e     dn't power down.
   befa8:	3025 6434 252d 3230 2d64 3025 6432 2520     %04d-%02d-%02d %
   befb8:	3230 3a64 3025 6432 253a 3230 0064 6567     02d:%02d:%02d.ge
   befc8:	5274 6374 7341 6d54 2520 0073 6573 5274     tRtcAsTm %s.setR
   befd8:	6374 7341 6d54 2520 0073 6166 6c69 7275     tcAsTm %s.failur
   befe8:	2065 6e69 7320 7465 7452 4663 6f72 546d     e in setRtcFromT
   beff8:	206d 6425 7300 7465 5220 4354 6620 6f72     m %d.set RTC fro
   bf008:	206d 6c63 756f 2064 7325 7300 7465 7320     m cloud %s.set s
   bf018:	7379 6574 206d 6c63 636f 206b 7266 6d6f     ystem clock from
   bf028:	5220 4354 2520 0073 6166 6c69 6465 7420      RTC %s.failed t
   bf038:	206f 6564 6574 7463 4120 3142 3038 0035     o detect AB1805.
   bf048:	7061 2e70 6261 3831 3530 0000               app.ab1805..

000bf054 <_ZTV6AB1805>:
	...
   bf05c:	67e5 000b 67e7 000b 6e5d 000b 6ee3 000b     .g...g..]n...n..

000bf06c <_ZTV6MB85RC>:
	...
   bf074:	730d 000b 730f 000b 734d 000b 73e3 000b     .s...s..Ms...s..
   bf084:	7465 000b                                   et..

000bf088 <_ZTV15RHGenericDriver>:
	...
   bf098:	7621 000b 40a5 000b 40a5 000b 40a5 000b     !v...@...@...@..
   bf0a8:	40a5 000b 7683 000b 7625 000b 76d3 000b     .@...v..%v...v..
   bf0b8:	76a1 000b 76f7 000b 762f 000b 7637 000b     .v...v../v..7v..
   bf0c8:	763b 000b 763f 000b 7643 000b 7647 000b     ;v..?v..Cv..Gv..
   bf0d8:	7633 000b 7653 000b 7657 000b 765b 000b     3v..Sv..Wv..[v..
   bf0e8:	765f 000b 7663 000b 7669 000b 766d 000b     _v..cv..iv..mv..
   bf0f8:	762f 000b 7671 000b 7677 000b 767d 000b     /v..qv..wv..}v..

000bf108 <_ZTV12RHGenericSPI>:
	...
   bf110:	40a5 000b 7755 000b 7757 000b 40a5 000b     .@..Uw..Ww...@..
   bf120:	40a5 000b 775f 000b 7763 000b 7767 000b     .@.._w..cw..gw..
   bf130:	7759 000b 775b 000b 775d 000b 6564 6166     Yw..[w..]w..defa
   bf140:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bf150:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bf160:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bf170:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bf180 <_ZTVN8particle11SPISettingsE>:
	...
   bf188:	77ad 000b 7781 000b 7783 000b               .w...w...w..

000bf194 <_ZTV13RHHardwareSPI>:
	...
   bf19c:	7861 000b 7875 000b 7883 000b 7891 000b     ax..ux...x...x..
   bf1ac:	78fd 000b 775f 000b 7763 000b 7767 000b     .x.._w..cw..gw..
   bf1bc:	790b 000b 791f 000b 792d 000b               .y...y..-y..

000bf1c8 <_ZTV6RHMesh>:
	...
   bf1d0:	79f9 000b 7ca1 000b 7959 000b 7945 000b     .y...|..Yy..Ey..

000bf1e0 <_ZTV8RHRouter>:
	...
   bf1e8:	7f0d 000b 7f51 000b                         ....Q...

000bf1f0 <_ZTV11RHSPIDriver>:
	...
   bf200:	81ed 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   bf210:	40a5 000b 7683 000b 7625 000b 76d3 000b     .@...v..%v...v..
   bf220:	76a1 000b 76f7 000b 762f 000b 7637 000b     .v...v../v..7v..
   bf230:	763b 000b 763f 000b 7643 000b 7647 000b     ;v..?v..Cv..Gv..
   bf240:	7633 000b 7653 000b 7657 000b 765b 000b     3v..Sv..Wv..[v..
   bf250:	765f 000b 7663 000b 7669 000b 766d 000b     _v..cv..iv..mv..
   bf260:	762f 000b 7671 000b 7677 000b 767d 000b     /v..qv..wv..}v..
   bf270:	8219 000b 8223 000b                         ....#...

000bf278 <_ZL18MODEM_CONFIG_TABLE>:
   bf278:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bf288 <_ZTV7RH_RF95>:
	...
   bf290:	838b 000b 83c3 000b 8899 000b 872f 000b     ............/...
   bf2a0:	83f9 000b 8777 000b 8387 000b 7683 000b     ....w........v..
   bf2b0:	7625 000b 76d3 000b 76a1 000b 76f7 000b     %v...v...v...v..
   bf2c0:	838d 000b 7637 000b 763b 000b 763f 000b     ....7v..;v..?v..
   bf2d0:	7643 000b 7647 000b 7633 000b 7653 000b     Cv..Gv..3v..Sv..
   bf2e0:	7657 000b 765b 000b 765f 000b 7663 000b     Wv..[v.._v..cv..
   bf2f0:	7669 000b 766d 000b 83d3 000b 7671 000b     iv..mv......qv..
   bf300:	7677 000b 767d 000b 8219 000b 8223 000b     wv..}v......#...
   bf310:	8383 000b 6173 6976 676e 6420 7461 2061     ....saving data 
   bf320:	6973 657a 253d 0064 6176 696c 6164 6974     size=%d.validati
   bf330:	676e 6420 7461 2061 6973 657a 253d 0064     ng data size=%d.
   bf340:	6f67 3a74 6d20 6761 6369 253d 3830 2078     got: magic=%08x 
   bf350:	6576 7372 6f69 3d6e 3025 7834 7320 7a69     version=%04x siz
   bf360:	3d65 3025 7834 6820 7361 3d68 3025 7838     e=%04x hash=%08x
   bf370:	6500 7078 203a 616d 6967 3d63 3025 7838     .exp: magic=%08x
   bf380:	7620 7265 6973 6e6f 253d 3430 2078 6973      version=%04x si
   bf390:	657a 253d 3430 2078 6168 6873 253d 3830     ze=%04x hash=%08
   bf3a0:	0078 0000                                   x...

000bf3a4 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bf3ac:	89a1 000b 8a4d 000b 8a09 000b 89a7 000b     ....M...........
   bf3bc:	89cf 000b 8b39 000b 8c05 000b               ....9.......

000bf3c8 <_ZTVN5spark13CellularClassE>:
	...
   bf3d0:	94e7 000b 94dd 000b 94d3 000b 9489 000b     ................
   bf3e0:	94c7 000b 94bb 000b adf1 000b adf9 000b     ................
   bf3f0:	94af 000b 94a7 000b 949d 000b 9493 000b     ................
   bf400:	ae29 000b                                   )...

000bf404 <_ZTV14CellularSignal>:
	...
   bf40c:	9575 000b 95d9 000b 9577 000b 95e9 000b     u.......w.......
   bf41c:	961d 000b 9649 000b 967d 000b 959d 000b     ....I...}.......
   bf42c:	957b 000b 9597 000b fffc ffff 0000 0000     {...............
   bf43c:	95d1 000b                                   ....

000bf440 <_ZTVN5spark13EthernetClassE>:
	...
   bf448:	9753 000b 9749 000b 973f 000b 9735 000b     S...I...?...5...
   bf458:	9729 000b 971d 000b adf1 000b adf9 000b     )...............
   bf468:	9711 000b 9709 000b 96ff 000b 96f5 000b     ................
   bf478:	ae29 000b                                   )...

000bf47c <_ZTV7TwoWire>:
	...
   bf484:	9823 000b 986d 000b 9845 000b 9825 000b     #...m...E...%...
   bf494:	984d 000b 9855 000b 985d 000b 9865 000b     M...U...]...e...

000bf4a4 <_ZTV9IPAddress>:
	...
   bf4ac:	99e9 000b 99d9 000b 99db 000b 2575 3430     ............u%04
   bf4bc:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bf4cc:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bf4dc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bf4ec:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bf4fc:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bf50c:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   bf51c:	6564 6174 6c69 0000                         detail..

000bf524 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf52c:	9ee5 000b 9f0b 000b 9ec9 000b 9af7 000b     ................

000bf53c <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf544:	a341 000b a359 000b aa99 000b 40cf 000b     A...Y........@..

000bf554 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf55c:	a36d 000b a381 000b ac3d 000b 9ed1 000b     m.......=.......

000bf56c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf574:	9ee3 000b 9f19 000b a9fd 000b 9ed3 000b     ................

000bf584 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf58c:	9ee1 000b 9f27 000b a2a9 000b 9f49 000b     ....'.......I...

000bf59c <_ZTVN5spark12NetworkClassE>:
	...
   bf5a4:	adb1 000b adbb 000b adc5 000b adcf 000b     ................
   bf5b4:	add9 000b ade5 000b adf1 000b adf9 000b     ................
   bf5c4:	ae01 000b ae0d 000b ae15 000b ae1f 000b     ................
   bf5d4:	ae29 000b 616e 006e 6e69 0066 766f 0066     )...nan.inf.ovf.

000bf5e4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bf5e4:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bf5f4:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bf604:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bf614:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bf624:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bf634:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bf644 <_ZTV11USARTSerial>:
	...
   bf64c:	bb75 000b bbe1 000b bbb9 000b b079 000b     u...........y...
   bf65c:	bb89 000b bba5 000b bb97 000b bbb3 000b     ................
   bf66c:	bb77 000b bb7b 000b                         w...{...

000bf674 <_ZTV9USBSerial>:
	...
   bf67c:	bc33 000b bc9b 000b bc71 000b b079 000b     3.......q...y...
   bf68c:	bc63 000b bc35 000b bc45 000b bc95 000b     c...5...E.......
   bf69c:	bc55 000b bc2d 000b                         U...-...

000bf6a4 <_ZSt7nothrow>:
	...

000bf6b0 <TWO52>:
   bf6b0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   bf6c0:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   bf6d0:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000bf6e0 <day_name.1>:
   bf6e0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bf6f0:	6972 6153                                    riSat

000bf6f5 <mon_name.0>:
   bf6f5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bf705:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bf715:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bf725:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bf735:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bf745:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bf755:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bf765:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bf775:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bf785:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bf795:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf7a5:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf7b5:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf7c5:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf7d5:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bf7e2 <_ctype_>:
   bf7e2:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf7f2:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf802:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf812:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf822:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf832:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf842:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf852:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf862:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bf8e3 <link_const_variable_data_end>:
	...

000bf8e4 <link_constructors_location>:
   bf8e4:	000b4d91 	.word	0x000b4d91
   bf8e8:	000b5b99 	.word	0x000b5b99
   bf8ec:	000b6335 	.word	0x000b6335
   bf8f0:	000b67d9 	.word	0x000b67d9
   bf8f4:	000b72fd 	.word	0x000b72fd
   bf8f8:	000b7935 	.word	0x000b7935
   bf8fc:	000b9479 	.word	0x000b9479
   bf900:	000b9545 	.word	0x000b9545
   bf904:	000b975d 	.word	0x000b975d
   bf908:	000baa89 	.word	0x000baa89
   bf90c:	000baf01 	.word	0x000baf01
   bf910:	000bb36d 	.word	0x000bb36d
   bf914:	000bb84d 	.word	0x000bb84d
   bf918:	000bbb61 	.word	0x000bbb61

000bf91c <link_constructors_end>:
   bf91c:	00000000 	.word	0x00000000
