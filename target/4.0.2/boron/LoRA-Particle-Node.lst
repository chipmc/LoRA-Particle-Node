
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.2/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b230  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf250  000bf250  0000f250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf274  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  2003ddbc  000bf278  0001ddbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0002df38  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bf3f4  000bf3f4  0001f3f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf41c  000bf41c  0001f41c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001ddd8e  00000000  00000000  0001f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00023384  00000000  00000000  001fd1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004ce71  00000000  00000000  00220532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004018  00000000  00000000  0026d3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d688  00000000  00000000  002713bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00053276  00000000  00000000  0027ea43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0007426d  00000000  00000000  002d1cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00145b86  00000000  00000000  00345f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000baec  00000000  00000000  0048baac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 fbf9 	bl	bd828 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 fc1b 	bl	bd878 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003ddbc 	.word	0x2003ddbc
   b404c:	000bf278 	.word	0x000bf278
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fc7b 	bl	bb95c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf20c 	.word	0x000bf20c
   b4080:	000bf244 	.word	0x000bf244

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bd8a 	b.w	b4b9c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa09 	bl	b44a0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 bc1b 	b.w	bb8cc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bf0d 	b.w	b8eb4 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bf0b 	b.w	b8eb4 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bf11 	b.w	b8ec4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fdbc 	bl	b8c28 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8879 	.word	0x000b8879
   b40b8:	000bdc30 	.word	0x000bdc30

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z18outOfMemoryHandleryi+0x8>)
   b40da:	601a      	str	r2, [r3, #0]
}
   b40dc:	4770      	bx	lr
   b40de:	bf00      	nop
   b40e0:	2003ddbc 	.word	0x2003ddbc

000b40e4 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40e4:	4b01      	ldr	r3, [pc, #4]	; (b40ec <_Z13userSwitchISRv+0x8>)
   b40e6:	2201      	movs	r2, #1
   b40e8:	701a      	strb	r2, [r3, #0]
}
   b40ea:	4770      	bx	lr
   b40ec:	2003dfce 	.word	0x2003dfce

000b40f0 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40f0:	b530      	push	{r4, r5, lr}
   b40f2:	b085      	sub	sp, #20
   b40f4:	4604      	mov	r4, r0
   b40f6:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40f8:	b160      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40fa:	6840      	ldr	r0, [r0, #4]
   b40fc:	b150      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40fe:	6885      	ldr	r5, [r0, #8]
   b4100:	b145      	cbz	r5, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4102:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4106:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b410a:	68c4      	ldr	r4, [r0, #12]
   b410c:	ab01      	add	r3, sp, #4
   b410e:	466a      	mov	r2, sp
   b4110:	a902      	add	r1, sp, #8
   b4112:	47a0      	blx	r4
    }
   b4114:	b005      	add	sp, #20
   b4116:	bd30      	pop	{r4, r5, pc}

000b4118 <_Z9sensorISRv>:

void sensorISR()
{
   b4118:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b411a:	4c08      	ldr	r4, [pc, #32]	; (b413c <_Z9sensorISRv+0x24>)
   b411c:	7823      	ldrb	r3, [r4, #0]
   b411e:	b12b      	cbz	r3, b412c <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b4120:	4b07      	ldr	r3, [pc, #28]	; (b4140 <_Z9sensorISRv+0x28>)
   b4122:	2201      	movs	r2, #1
   b4124:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b4126:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b4128:	7023      	strb	r3, [r4, #0]
}
   b412a:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b412c:	f001 fc8a 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4130:	f001 fd86 	bl	b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>
   b4134:	2801      	cmp	r0, #1
   b4136:	d0f3      	beq.n	b4120 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b4138:	2301      	movs	r3, #1
   b413a:	e7f5      	b.n	b4128 <_Z9sensorISRv+0x10>
   b413c:	2003df64 	.word	0x2003df64
   b4140:	2003dfcc 	.word	0x2003dfcc

000b4144 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4144:	b530      	push	{r4, r5, lr}
   b4146:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4148:	6800      	ldr	r0, [r0, #0]
   b414a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b414c:	9301      	str	r3, [sp, #4]
   b414e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4152:	6883      	ldr	r3, [r0, #8]
   b4154:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4158:	b90b      	cbnz	r3, b415e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b415a:	f007 fd85 	bl	bbc68 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b415e:	68c3      	ldr	r3, [r0, #12]
   b4160:	aa01      	add	r2, sp, #4
   b4162:	a902      	add	r1, sp, #8
   b4164:	4798      	blx	r3
      }
   b4166:	b005      	add	sp, #20
   b4168:	bd30      	pop	{r4, r5, pc}

000b416a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b416a:	2a01      	cmp	r2, #1
   b416c:	d102      	bne.n	b4174 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416e:	6001      	str	r1, [r0, #0]
      }
   b4170:	2000      	movs	r0, #0
   b4172:	4770      	bx	lr
	  switch (__op)
   b4174:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4176:	bf04      	itt	eq
   b4178:	680b      	ldreq	r3, [r1, #0]
   b417a:	6003      	streq	r3, [r0, #0]
	      break;
   b417c:	e7f8      	b.n	b4170 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417e:	6803      	ldr	r3, [r0, #0]
   b4180:	6812      	ldr	r2, [r2, #0]
   b4182:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4186:	4718      	bx	r3

000b4188 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4188:	4b0a      	ldr	r3, [pc, #40]	; (b41b4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b418a:	b510      	push	{r4, lr}
   b418c:	4604      	mov	r4, r0
   b418e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4190:	f005 fda8 	bl	b9ce4 <_ZN5spark10LogManager8instanceEv>
   b4194:	4621      	mov	r1, r4
   b4196:	f005 ffe0 	bl	ba15a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b419a:	f007 fb4f 	bl	bb83c <_Z16_fetch_usbserialv>
   b419e:	f007 fb3f 	bl	bb820 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b41a2:	4620      	mov	r0, r4
   b41a4:	4b04      	ldr	r3, [pc, #16]	; (b41b8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b41a6:	f840 3b04 	str.w	r3, [r0], #4
   b41aa:	f005 fe71 	bl	b9e90 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b41ae:	4620      	mov	r0, r4
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	000be048 	.word	0x000be048
   b41b8:	000be030 	.word	0x000be030

000b41bc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b41bc:	b510      	push	{r4, lr}
   b41be:	4604      	mov	r4, r0
    }
   b41c0:	f7ff ffe2 	bl	b4188 <_ZN5spark16SerialLogHandlerD1Ev>
   b41c4:	4620      	mov	r0, r4
   b41c6:	2124      	movs	r1, #36	; 0x24
   b41c8:	f7ff ff69 	bl	b409e <_ZdlPvj>
   b41cc:	4620      	mov	r0, r4
   b41ce:	bd10      	pop	{r4, pc}

000b41d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b41d0:	b510      	push	{r4, lr}
      if (_M_manager)
   b41d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b41d4:	4604      	mov	r4, r0
      if (_M_manager)
   b41d6:	b113      	cbz	r3, b41de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b41d8:	2203      	movs	r2, #3
   b41da:	4601      	mov	r1, r0
   b41dc:	4798      	blx	r3
    }
   b41de:	4620      	mov	r0, r4
   b41e0:	bd10      	pop	{r4, pc}

000b41e2 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b41e2:	b510      	push	{r4, lr}
            delete callableWrapper;
   b41e4:	4604      	mov	r4, r0
   b41e6:	b138      	cbz	r0, b41f8 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b41e8:	f7ff fff2 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b41ec:	4620      	mov	r0, r4
   b41ee:	2110      	movs	r1, #16
        };
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b41f4:	f7ff bf53 	b.w	b409e <_ZdlPvj>
        };
   b41f8:	bd10      	pop	{r4, pc}
	...

000b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b41fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4200:	4605      	mov	r5, r0
   b4202:	460f      	mov	r7, r1
   b4204:	4616      	mov	r6, r2
        if (valid_) {
   b4206:	b18b      	cbz	r3, b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4208:	6803      	ldr	r3, [r0, #0]
   b420a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b420c:	b183      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b420e:	889a      	ldrh	r2, [r3, #4]
   b4210:	2a01      	cmp	r2, #1
   b4212:	d006      	beq.n	b4222 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b4214:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4216:	e7f9      	b.n	b420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4218:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b421a:	b14b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b421c:	889a      	ldrh	r2, [r3, #4]
   b421e:	2a01      	cmp	r2, #1
   b4220:	d1fa      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b4222:	b12b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b4224:	899a      	ldrh	r2, [r3, #12]
   b4226:	42ba      	cmp	r2, r7
   b4228:	d1f6      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b422a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b422c:	4628      	mov	r0, r5
   b422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4230:	490a      	ldr	r1, [pc, #40]	; (b425c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b4232:	2010      	movs	r0, #16
   b4234:	f007 fd14 	bl	bbc60 <_ZnwjRKSt9nothrow_t>
   b4238:	4604      	mov	r4, r0
   b423a:	b168      	cbz	r0, b4258 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b423c:	2210      	movs	r2, #16
   b423e:	2100      	movs	r1, #0
   b4240:	f009 fb1a 	bl	bd878 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4244:	4b06      	ldr	r3, [pc, #24]	; (b4260 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b4246:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4248:	2301      	movs	r3, #1
   b424a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b424c:	692b      	ldr	r3, [r5, #16]
   b424e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4250:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b4252:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4254:	612c      	str	r4, [r5, #16]
   b4256:	e7e9      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4258:	7528      	strb	r0, [r5, #20]
                return *this;
   b425a:	e7e7      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b425c:	000befcc 	.word	0x000befcc
   b4260:	00030010 	.word	0x00030010

000b4264 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4264:	b40e      	push	{r1, r2, r3}
   b4266:	b500      	push	{lr}
   b4268:	b08c      	sub	sp, #48	; 0x30
   b426a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b426c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4270:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4274:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4276:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b427a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b427c:	6801      	ldr	r1, [r0, #0]
   b427e:	aa04      	add	r2, sp, #16
   b4280:	201e      	movs	r0, #30
    attr.flags = 0;
   b4282:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4286:	f004 fcdf 	bl	b8c48 <log_message_v>
}
   b428a:	b00c      	add	sp, #48	; 0x30
   b428c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4290:	b003      	add	sp, #12
   b4292:	4770      	bx	lr

000b4294 <_Z22publishStateTransitionv>:
{
   b4294:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4296:	4e13      	ldr	r6, [pc, #76]	; (b42e4 <_Z22publishStateTransitionv+0x50>)
   b4298:	4c13      	ldr	r4, [pc, #76]	; (b42e8 <_Z22publishStateTransitionv+0x54>)
   b429a:	7832      	ldrb	r2, [r6, #0]
   b429c:	4d13      	ldr	r5, [pc, #76]	; (b42ec <_Z22publishStateTransitionv+0x58>)
   b429e:	2a02      	cmp	r2, #2
{
   b42a0:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b42a2:	d117      	bne.n	b42d4 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b42a4:	f007 f9c6 	bl	bb634 <_ZN9TimeClass7isValidEv>
   b42a8:	7832      	ldrb	r2, [r6, #0]
   b42aa:	782b      	ldrb	r3, [r5, #0]
   b42ac:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42b0:	9200      	str	r2, [sp, #0]
   b42b2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42b6:	b998      	cbnz	r0, b42e0 <_Z22publishStateTransitionv+0x4c>
   b42b8:	4a0d      	ldr	r2, [pc, #52]	; (b42f0 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   b42be:	a802      	add	r0, sp, #8
   b42c0:	f004 fe18 	bl	b8ef4 <snprintf>
	oldState = state;
   b42c4:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b42c6:	480b      	ldr	r0, [pc, #44]	; (b42f4 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b42c8:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b42ca:	a902      	add	r1, sp, #8
   b42cc:	f7ff ffca 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b42d0:	b042      	add	sp, #264	; 0x108
   b42d2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42d4:	782b      	ldrb	r3, [r5, #0]
   b42d6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42da:	9200      	str	r2, [sp, #0]
   b42dc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42e0:	4a05      	ldr	r2, [pc, #20]	; (b42f8 <_Z22publishStateTransitionv+0x64>)
   b42e2:	e7ea      	b.n	b42ba <_Z22publishStateTransitionv+0x26>
   b42e4:	2003dfcd 	.word	0x2003dfcd
   b42e8:	2003ddc0 	.word	0x2003ddc0
   b42ec:	2003dfc4 	.word	0x2003dfc4
   b42f0:	000bdc45 	.word	0x000bdc45
   b42f4:	2003e654 	.word	0x2003e654
   b42f8:	000bdc65 	.word	0x000bdc65
   b42fc:	00000000 	.word	0x00000000

000b4300 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static time_t nextPeriodBegins = 0;
	// First we will calculate the adjustment to the wakeboundary due to node number and retries
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b4304:	4d5c      	ldr	r5, [pc, #368]	; (b4478 <_Z21secondsUntilNextEventv+0x178>)
   b4306:	682e      	ldr	r6, [r5, #0]
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4308:	b087      	sub	sp, #28
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b430a:	2e00      	cmp	r6, #0
   b430c:	d042      	beq.n	b4394 <_Z21secondsUntilNextEventv+0x94>
		int fiftyFifty = random(2);											// Flip a coin - seed in Setup()
   b430e:	2002      	movs	r0, #2
   b4310:	f006 fdc6 	bl	baea0 <_Z6randomi>
   b4314:	4606      	mov	r6, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4316:	6828      	ldr	r0, [r5, #0]
   b4318:	f008 fe82 	bl	bd020 <__aeabi_i2d>
   b431c:	ed9f 0b54 	vldr	d0, [pc, #336]	; b4470 <_Z21secondsUntilNextEventv+0x170>
   b4320:	ec41 0b11 	vmov	d1, r0, r1
   b4324:	f007 fca4 	bl	bbc70 <pow>
		unsigned long offset = 10UL + NODENUMBEROFFSET * fiftyFifty * pow(2, retryState); // This is an exponential back-off - adding 10 seconds to increase odds
   b4328:	200a      	movs	r0, #10
   b432a:	ec59 8b10 	vmov	r8, r9, d0
   b432e:	4370      	muls	r0, r6
   b4330:	f008 fe66 	bl	bd000 <__aeabi_ui2d>
   b4334:	4642      	mov	r2, r8
   b4336:	464b      	mov	r3, r9
   b4338:	f008 fedc 	bl	bd0f4 <__aeabi_dmul>
   b433c:	4b4f      	ldr	r3, [pc, #316]	; (b447c <_Z21secondsUntilNextEventv+0x17c>)
   b433e:	2200      	movs	r2, #0
   b4340:	f008 fd22 	bl	bcd88 <__adddf3>
   b4344:	f009 f9ae 	bl	bd6a4 <__aeabi_d2uiz>
   b4348:	4604      	mov	r4, r0
		Log.info("Node %d retry state %d dice of %d retry in %lu seconds", sysStatus.get_nodeNumber(), retryState, fiftyFifty, offset);
   b434a:	f001 fb7b 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b434e:	f001 fc68 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4352:	e9cd 6400 	strd	r6, r4, [sp]
   b4356:	4602      	mov	r2, r0
   b4358:	682b      	ldr	r3, [r5, #0]
   b435a:	4949      	ldr	r1, [pc, #292]	; (b4480 <_Z21secondsUntilNextEventv+0x180>)
   b435c:	4849      	ldr	r0, [pc, #292]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b435e:	f7ff ff81 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		if (retryState >= 3) {
   b4362:	682b      	ldr	r3, [r5, #0]
   b4364:	2b02      	cmp	r3, #2
   b4366:	dd11      	ble.n	b438c <_Z21secondsUntilNextEventv+0x8c>
			retryState = -1;							    				// Going to stop re-trying and wait until the next period
   b4368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b436c:	602b      	str	r3, [r5, #0]
			sysStatus.set_alertCodeNode(4);									// This will trigger a reinitialization of the radio
   b436e:	f001 fb69 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4372:	2104      	movs	r1, #4
   b4374:	f001 fcad 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
			sysStatus.set_alertTimestampNode(Time.now());					// Alert Time stamp
   b4378:	f001 fb64 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b437c:	4605      	mov	r5, r0
   b437e:	f007 f976 	bl	bb66e <_ZN9TimeClass3nowEv>
   b4382:	4602      	mov	r2, r0
   b4384:	17c3      	asrs	r3, r0, #31
   b4386:	4628      	mov	r0, r5
   b4388:	f001 fd68 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
			// Log.info("In current period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
		}
		return secondsToReturn;
    }
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b438c:	4620      	mov	r0, r4
   b438e:	b007      	add	sp, #28
   b4390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (Time.isValid()) {												// The general case - has to handle node-number specific timing
   b4394:	f007 f94e 	bl	bb634 <_ZN9TimeClass7isValidEv>
   b4398:	2800      	cmp	r0, #0
   b439a:	d065      	beq.n	b4468 <_Z21secondsUntilNextEventv+0x168>
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b439c:	f001 fb52 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b43a0:	f001 fc3f 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b43a4:	4605      	mov	r5, r0
		unsigned long wakeBoundary = (sysStatus.get_frequencyMinutes() * 60UL);
   b43a6:	f001 fb4d 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b43aa:	f001 fccd 	bl	b5d48 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b43ae:	243c      	movs	r4, #60	; 0x3c
   b43b0:	fb04 f700 	mul.w	r7, r4, r0
		unsigned long secondsToReturn = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b43b4:	f007 f95b 	bl	bb66e <_ZN9TimeClass3nowEv>
   b43b8:	fbb0 f4f7 	udiv	r4, r0, r7
   b43bc:	fb04 0417 	mls	r4, r4, r7, r0
   b43c0:	1b3c      	subs	r4, r7, r4
   b43c2:	42bc      	cmp	r4, r7
   b43c4:	bf28      	it	cs
   b43c6:	463c      	movcs	r4, r7
		if (sysStatus.get_nodeNumber() >= 11)  {							// We need to test here as the off-set can cause missed reporting if awoken by the sensor at the period boundary
   b43c8:	f001 fb3c 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b43cc:	f001 fc29 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b43d0:	280a      	cmp	r0, #10
   b43d2:	d905      	bls.n	b43e0 <_Z21secondsUntilNextEventv+0xe0>
			Log.info("Unconfigured node - no offset and %lu seconds till next period",secondsToReturn);
   b43d4:	492c      	ldr	r1, [pc, #176]	; (b4488 <_Z21secondsUntilNextEventv+0x188>)
   b43d6:	482b      	ldr	r0, [pc, #172]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b43d8:	4622      	mov	r2, r4
   b43da:	f7ff ff43 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			return secondsToReturn;
   b43de:	e7d5      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43e0:	4f2a      	ldr	r7, [pc, #168]	; (b448c <_Z21secondsUntilNextEventv+0x18c>)
   b43e2:	f007 f944 	bl	bb66e <_ZN9TimeClass3nowEv>
   b43e6:	e9d7 8900 	ldrd	r8, r9, [r7]
   b43ea:	17c3      	asrs	r3, r0, #31
   b43ec:	ebb0 0008 	subs.w	r0, r0, r8
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43f0:	b22d      	sxth	r5, r5
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43f2:	eb63 0309 	sbc.w	r3, r3, r9
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43fa:	2b00      	cmp	r3, #0
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43fc:	ea4f 0545 	mov.w	r5, r5, lsl #1
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b4400:	db16      	blt.n	b4430 <_Z21secondsUntilNextEventv+0x130>
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4402:	f007 f934 	bl	bb66e <_ZN9TimeClass3nowEv>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4406:	442c      	add	r4, r5
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4408:	1902      	adds	r2, r0, r4
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b440a:	4b21      	ldr	r3, [pc, #132]	; (b4490 <_Z21secondsUntilNextEventv+0x190>)
   b440c:	4921      	ldr	r1, [pc, #132]	; (b4494 <_Z21secondsUntilNextEventv+0x194>)
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b440e:	e9c7 2600 	strd	r2, r6, [r7]
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b4412:	a802      	add	r0, sp, #8
   b4414:	9300      	str	r3, [sp, #0]
   b4416:	4633      	mov	r3, r6
   b4418:	f007 f8ca 	bl	bb5b0 <_ZN9TimeClass6formatExPKc>
   b441c:	9b02      	ldr	r3, [sp, #8]
   b441e:	491e      	ldr	r1, [pc, #120]	; (b4498 <_Z21secondsUntilNextEventv+0x198>)
   b4420:	4622      	mov	r2, r4
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4422:	4818      	ldr	r0, [pc, #96]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b4424:	f7ff ff1e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4428:	a802      	add	r0, sp, #8
   b442a:	f006 fe1d 	bl	bb068 <_ZN6StringD1Ev>
   b442e:	e7ad      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
		else if (nextPeriodBegins - Time.now() <= nodeSpecificOffset) {		// Not at new period yet but within the node offset
   b4430:	f007 f91d 	bl	bb66e <_ZN9TimeClass3nowEv>
   b4434:	ebb8 0800 	subs.w	r8, r8, r0
   b4438:	eb69 70e0 	sbc.w	r0, r9, r0, asr #31
   b443c:	4545      	cmp	r5, r8
   b443e:	eb76 0300 	sbcs.w	r3, r6, r0
   b4442:	db0f      	blt.n	b4464 <_Z21secondsUntilNextEventv+0x164>
			secondsToReturn = nextPeriodBegins - Time.now();
   b4444:	683c      	ldr	r4, [r7, #0]
   b4446:	f007 f912 	bl	bb66e <_ZN9TimeClass3nowEv>
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b444a:	4b11      	ldr	r3, [pc, #68]	; (b4490 <_Z21secondsUntilNextEventv+0x190>)
   b444c:	9300      	str	r3, [sp, #0]
   b444e:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4452:	4910      	ldr	r1, [pc, #64]	; (b4494 <_Z21secondsUntilNextEventv+0x194>)
			secondsToReturn = nextPeriodBegins - Time.now();
   b4454:	1a24      	subs	r4, r4, r0
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4456:	a802      	add	r0, sp, #8
   b4458:	f007 f8aa 	bl	bb5b0 <_ZN9TimeClass6formatExPKc>
   b445c:	9b02      	ldr	r3, [sp, #8]
   b445e:	490f      	ldr	r1, [pc, #60]	; (b449c <_Z21secondsUntilNextEventv+0x19c>)
   b4460:	4622      	mov	r2, r4
   b4462:	e7de      	b.n	b4422 <_Z21secondsUntilNextEventv+0x122>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4464:	442c      	add	r4, r5
		return secondsToReturn;
   b4466:	e791      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b4468:	243c      	movs	r4, #60	; 0x3c
   b446a:	e78f      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
   b446c:	f3af 8000 	nop.w
   b4470:	00000000 	.word	0x00000000
   b4474:	40000000 	.word	0x40000000
   b4478:	2003dfc8 	.word	0x2003dfc8
   b447c:	40240000 	.word	0x40240000
   b4480:	000bdc73 	.word	0x000bdc73
   b4484:	2003e654 	.word	0x2003e654
   b4488:	000bdcaa 	.word	0x000bdcaa
   b448c:	2003df50 	.word	0x2003df50
   b4490:	000bdce9 	.word	0x000bdce9
   b4494:	2003e6a8 	.word	0x2003e6a8
   b4498:	000bdcec 	.word	0x000bdcec
   b449c:	000bdd12 	.word	0x000bdd12

000b44a0 <loop>:
void loop() {
   b44a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b44a4:	4cb1      	ldr	r4, [pc, #708]	; (b476c <loop+0x2cc>)
   b44a6:	7823      	ldrb	r3, [r4, #0]
   b44a8:	3b01      	subs	r3, #1
void loop() {
   b44aa:	b08d      	sub	sp, #52	; 0x34
   b44ac:	2b04      	cmp	r3, #4
   b44ae:	f200 80e7 	bhi.w	b4680 <loop+0x1e0>
   b44b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   b44b6:	0207      	.short	0x0207
   b44b8:	004d0005 	.word	0x004d0005
   b44bc:	01a70138 	.word	0x01a70138
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b44c0:	4bab      	ldr	r3, [pc, #684]	; (b4770 <loop+0x2d0>)
   b44c2:	781b      	ldrb	r3, [r3, #0]
   b44c4:	2b02      	cmp	r3, #2
   b44c6:	d001      	beq.n	b44cc <loop+0x2c>
   b44c8:	f7ff fee4 	bl	b4294 <_Z22publishStateTransitionv>
			if ((Time.now() - sysStatus.get_lastConnection() > 2 * sysStatus.get_frequencyMinutes() * 60UL) && sysStatus.get_openHours()) { // Park is open but no connect for over two hours
   b44cc:	f007 f8cf 	bl	bb66e <_ZN9TimeClass3nowEv>
   b44d0:	4605      	mov	r5, r0
   b44d2:	f001 fab7 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b44d6:	f001 fc93 	bl	b5e00 <_ZNK13sysStatusData18get_lastConnectionEv>
   b44da:	17eb      	asrs	r3, r5, #31
   b44dc:	1a2d      	subs	r5, r5, r0
   b44de:	eb63 0601 	sbc.w	r6, r3, r1
   b44e2:	f001 faaf 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b44e6:	f001 fc2f 	bl	b5d48 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44ea:	2378      	movs	r3, #120	; 0x78
   b44ec:	4358      	muls	r0, r3
   b44ee:	42a8      	cmp	r0, r5
   b44f0:	f04f 0300 	mov.w	r3, #0
   b44f4:	41b3      	sbcs	r3, r6
   b44f6:	da21      	bge.n	b453c <loop+0x9c>
   b44f8:	f001 faa4 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b44fc:	f001 fac6 	bl	b5a8c <_ZNK13sysStatusData13get_openHoursEv>
   b4500:	b1e0      	cbz	r0, b453c <loop+0x9c>
				Log.info("Park is open but we have not connected for over two reporting periods - need to reset");
   b4502:	499c      	ldr	r1, [pc, #624]	; (b4774 <loop+0x2d4>)
   b4504:	489c      	ldr	r0, [pc, #624]	; (b4778 <loop+0x2d8>)
   b4506:	f7ff fead 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(3);								// This will trigger a power cycle reset
   b450a:	f001 fa9b 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b450e:	2103      	movs	r1, #3
   b4510:	f001 fbdf 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());				
   b4514:	f001 fa96 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4518:	4605      	mov	r5, r0
   b451a:	f007 f8a8 	bl	bb66e <_ZN9TimeClass3nowEv>
   b451e:	4602      	mov	r2, r0
   b4520:	17c3      	asrs	r3, r0, #31
   b4522:	4628      	mov	r0, r5
   b4524:	f001 fc9a 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
				sysStatus.set_lastConnection(Time.now());					// Prevents cyclical resets
   b4528:	f001 fa8c 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b452c:	4605      	mov	r5, r0
   b452e:	f007 f89e 	bl	bb66e <_ZN9TimeClass3nowEv>
   b4532:	4602      	mov	r2, r0
   b4534:	17c3      	asrs	r3, r0, #31
   b4536:	4628      	mov	r0, r5
   b4538:	f001 fc8b 	bl	b5e52 <_ZN13sysStatusData18set_lastConnectionEx>
			if (sysStatus.get_alertCodeNode() != 0) state = ERROR_STATE;
   b453c:	f001 fa82 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4540:	f001 fb79 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4544:	2800      	cmp	r0, #0
   b4546:	f000 81e1 	beq.w	b490c <loop+0x46c>
   b454a:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b454c:	7023      	strb	r3, [r4, #0]
			break;
   b454e:	e097      	b.n	b4680 <loop+0x1e0>
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4550:	4b87      	ldr	r3, [pc, #540]	; (b4770 <loop+0x2d0>)
   b4552:	781b      	ldrb	r3, [r3, #0]
   b4554:	2b03      	cmp	r3, #3
   b4556:	d001      	beq.n	b455c <loop+0xbc>
   b4558:	f7ff fe9c 	bl	b4294 <_Z22publishStateTransitionv>
			int wakeInSeconds = secondsUntilNextEvent();					// Figure out how long to sleep 
   b455c:	f7ff fed0 	bl	b4300 <_Z21secondsUntilNextEventv>
   b4560:	4607      	mov	r7, r0
			time_t time = Time.now() + wakeInSeconds;
   b4562:	f007 f884 	bl	bb66e <_ZN9TimeClass3nowEv>
   b4566:	4605      	mov	r5, r0
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b4568:	f007 f864 	bl	bb634 <_ZN9TimeClass7isValidEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b456c:	4606      	mov	r6, r0
   b456e:	2800      	cmp	r0, #0
   b4570:	d04c      	beq.n	b460c <loop+0x16c>
			time_t time = Time.now() + wakeInSeconds;
   b4572:	19ea      	adds	r2, r5, r7
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b4574:	4b81      	ldr	r3, [pc, #516]	; (b477c <loop+0x2dc>)
   b4576:	9300      	str	r3, [sp, #0]
   b4578:	4981      	ldr	r1, [pc, #516]	; (b4780 <loop+0x2e0>)
   b457a:	17d3      	asrs	r3, r2, #31
   b457c:	a808      	add	r0, sp, #32
   b457e:	f007 f817 	bl	bb5b0 <_ZN9TimeClass6formatExPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4582:	9d08      	ldr	r5, [sp, #32]
   b4584:	f001 fa5e 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4588:	f001 fa80 	bl	b5a8c <_ZNK13sysStatusData13get_openHoursEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b458c:	4b7d      	ldr	r3, [pc, #500]	; (b4784 <loop+0x2e4>)
   b458e:	4a7e      	ldr	r2, [pc, #504]	; (b4788 <loop+0x2e8>)
   b4590:	497e      	ldr	r1, [pc, #504]	; (b478c <loop+0x2ec>)
   b4592:	2800      	cmp	r0, #0
   b4594:	bf08      	it	eq
   b4596:	461a      	moveq	r2, r3
   b4598:	9200      	str	r2, [sp, #0]
   b459a:	4877      	ldr	r0, [pc, #476]	; (b4778 <loop+0x2d8>)
   b459c:	462b      	mov	r3, r5
   b459e:	463a      	mov	r2, r7
   b45a0:	f7ff fe60 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():"invalid time", (sysStatus.get_openHours()) ? "on" : "off");
   b45a4:	b116      	cbz	r6, b45ac <loop+0x10c>
   b45a6:	a808      	add	r0, sp, #32
   b45a8:	f006 fd5e 	bl	bb068 <_ZN6StringD1Ev>
			if (!sysStatus.get_openHours()) digitalWrite(MODULE_POWER_PIN,HIGH);  // disable (HIGH) the sensor
   b45ac:	f001 fa4a 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b45b0:	f001 fa6c 	bl	b5a8c <_ZNK13sysStatusData13get_openHoursEv>
   b45b4:	4b76      	ldr	r3, [pc, #472]	; (b4790 <loop+0x2f0>)
   b45b6:	f8b3 b000 	ldrh.w	fp, [r3]
   b45ba:	b918      	cbnz	r0, b45c4 <loop+0x124>
   b45bc:	2101      	movs	r1, #1
   b45be:	4658      	mov	r0, fp
   b45c0:	f007 fa4d 	bl	bba5e <digitalWrite>
        if (valid_) {
   b45c4:	4b73      	ldr	r3, [pc, #460]	; (b4794 <loop+0x2f4>)
   b45c6:	7d1a      	ldrb	r2, [r3, #20]
   b45c8:	b10a      	cbz	r2, b45ce <loop+0x12e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b45ca:	2202      	movs	r2, #2
   b45cc:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b45ce:	4b72      	ldr	r3, [pc, #456]	; (b4798 <loop+0x2f8>)
   b45d0:	4870      	ldr	r0, [pc, #448]	; (b4794 <loop+0x2f4>)
   b45d2:	f8b3 9000 	ldrh.w	r9, [r3]
   b45d6:	2200      	movs	r2, #0
   b45d8:	4649      	mov	r1, r9
   b45da:	f7ff fe0f 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b45de:	4b6f      	ldr	r3, [pc, #444]	; (b479c <loop+0x2fc>)
   b45e0:	f8b3 a000 	ldrh.w	sl, [r3]
   b45e4:	2201      	movs	r2, #1
   b45e6:	4651      	mov	r1, sl
   b45e8:	f7ff fe08 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b45ec:	7d03      	ldrb	r3, [r0, #20]
   b45ee:	4606      	mov	r6, r0
   b45f0:	b313      	cbz	r3, b4638 <loop+0x198>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45f2:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b45f4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b45f8:	68db      	ldr	r3, [r3, #12]
   b45fa:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b45fe:	b13b      	cbz	r3, b4610 <loop+0x170>
            if (start->type == type) {
   b4600:	889a      	ldrh	r2, [r3, #4]
   b4602:	2a04      	cmp	r2, #4
   b4604:	f000 8212 	beq.w	b4a2c <loop+0x58c>
            start = start->next;
   b4608:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b460a:	e7f8      	b.n	b45fe <loop+0x15e>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b460c:	4d64      	ldr	r5, [pc, #400]	; (b47a0 <loop+0x300>)
   b460e:	e7b9      	b.n	b4584 <loop+0xe4>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4610:	4964      	ldr	r1, [pc, #400]	; (b47a4 <loop+0x304>)
   b4612:	2010      	movs	r0, #16
   b4614:	f007 fb24 	bl	bbc60 <_ZnwjRKSt9nothrow_t>
   b4618:	4605      	mov	r5, r0
   b461a:	2800      	cmp	r0, #0
   b461c:	f000 8204 	beq.w	b4a28 <loop+0x588>
   b4620:	2210      	movs	r2, #16
   b4622:	2100      	movs	r1, #0
   b4624:	f009 f928 	bl	bd878 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4628:	4b5f      	ldr	r3, [pc, #380]	; (b47a8 <loop+0x308>)
   b462a:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b462c:	2304      	movs	r3, #4
   b462e:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4630:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4632:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4636:	6135      	str	r5, [r6, #16]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4638:	2100      	movs	r1, #0
   b463a:	485c      	ldr	r0, [pc, #368]	; (b47ac <loop+0x30c>)
   b463c:	f002 f83e 	bl	b66bc <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b4640:	4954      	ldr	r1, [pc, #336]	; (b4794 <loop+0x2f4>)
   b4642:	a805      	add	r0, sp, #20
   b4644:	f006 fe34 	bl	bb2b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b464c:	4857      	ldr	r0, [pc, #348]	; (b47ac <loop+0x30c>)
   b464e:	f002 f835 	bl	b66bc <_ZN6AB18056setWDTEi>
			digitalWrite(MODULE_POWER_PIN,LOW);             				// Enable (LOW) the sensor
   b4652:	2100      	movs	r1, #0
   b4654:	4658      	mov	r0, fp
   b4656:	f007 fa02 	bl	bba5e <digitalWrite>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b465a:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b465c:	2b00      	cmp	r3, #0
   b465e:	d034      	beq.n	b46ca <loop+0x22a>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4660:	889a      	ldrh	r2, [r3, #4]
   b4662:	2a01      	cmp	r2, #1
   b4664:	d131      	bne.n	b46ca <loop+0x22a>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4666:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4668:	4599      	cmp	r9, r3
   b466a:	d131      	bne.n	b46d0 <loop+0x230>
				Log.info("Woke with user button - LoRA State");
   b466c:	4950      	ldr	r1, [pc, #320]	; (b47b0 <loop+0x310>)
   b466e:	4842      	ldr	r0, [pc, #264]	; (b4778 <loop+0x2d8>)
   b4670:	f7ff fdf8 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;
   b4674:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b4676:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b4678:	7023      	strb	r3, [r4, #0]
   b467a:	b108      	cbz	r0, b4680 <loop+0x1e0>
            free(wakeupSource_);
   b467c:	f004 fc22 	bl	b8ec4 <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4680:	484a      	ldr	r0, [pc, #296]	; (b47ac <loop+0x30c>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b4682:	4c4c      	ldr	r4, [pc, #304]	; (b47b4 <loop+0x314>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4684:	f002 fbc6 	bl	b6e14 <_ZN6AB18054loopEv>
	current.loop();
   b4688:	f001 fa50 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b468c:	f001 fa69 	bl	b5b62 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4690:	f001 f9d8 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4694:	f001 f9f1 	bl	b5a7a <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b4698:	7823      	ldrb	r3, [r4, #0]
   b469a:	b123      	cbz	r3, b46a6 <loop+0x206>
		if (recordCount()) sensorDetect = false;
   b469c:	f001 fda0 	bl	b61e0 <_Z11recordCountv>
   b46a0:	b108      	cbz	r0, b46a6 <loop+0x206>
   b46a2:	2300      	movs	r3, #0
   b46a4:	7023      	strb	r3, [r4, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b46a6:	4b44      	ldr	r3, [pc, #272]	; (b47b8 <loop+0x318>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	2b00      	cmp	r3, #0
   b46ac:	f2c0 81c1 	blt.w	b4a32 <loop+0x592>
		Log.info("Resetting due to low memory");
   b46b0:	4942      	ldr	r1, [pc, #264]	; (b47bc <loop+0x31c>)
   b46b2:	4831      	ldr	r0, [pc, #196]	; (b4778 <loop+0x2d8>)
   b46b4:	f7ff fdd6 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b46b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b46bc:	f004 fc76 	bl	b8fac <delay>
}
   b46c0:	b00d      	add	sp, #52	; 0x34
   b46c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b46c6:	f006 bdf0 	b.w	bb2aa <_ZN11SystemClass5resetEv>
            return std::numeric_limits<pin_t>::max();
   b46ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b46ce:	e7cb      	b.n	b4668 <loop+0x1c8>
			else if (result.wakeupPin() == INT_PIN) {
   b46d0:	459a      	cmp	sl, r3
   b46d2:	d10f      	bne.n	b46f4 <loop+0x254>
				Log.info("Woke with sensor interrupt");						// Will count at the bottom of the main loop
   b46d4:	493a      	ldr	r1, [pc, #232]	; (b47c0 <loop+0x320>)
   b46d6:	4828      	ldr	r0, [pc, #160]	; (b4778 <loop+0x2d8>)
   b46d8:	f7ff fdc4 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				if (secondsUntilNextEvent() <= 2 || secondsUntilNextEvent() >= 598) state = IDLE_STATE;		// If more or less than 2 seconds we may miss reporting
   b46dc:	f7ff fe10 	bl	b4300 <_Z21secondsUntilNextEventv>
   b46e0:	2802      	cmp	r0, #2
   b46e2:	dd1e      	ble.n	b4722 <loop+0x282>
   b46e4:	f7ff fe0c 	bl	b4300 <_Z21secondsUntilNextEventv>
   b46e8:	f240 2355 	movw	r3, #597	; 0x255
   b46ec:	4298      	cmp	r0, r3
   b46ee:	dc18      	bgt.n	b4722 <loop+0x282>
				else state = SLEEPING_STATE;								// This is the normal behavioud
   b46f0:	2303      	movs	r3, #3
   b46f2:	e7c0      	b.n	b4676 <loop+0x1d6>
				Log.info("Time is up at %s with %li free memory", Time.format((Time.now()+wakeInSeconds), "%T").c_str(), System.freeMemory());
   b46f4:	f006 ffbb 	bl	bb66e <_ZN9TimeClass3nowEv>
   b46f8:	4b20      	ldr	r3, [pc, #128]	; (b477c <loop+0x2dc>)
   b46fa:	4921      	ldr	r1, [pc, #132]	; (b4780 <loop+0x2e0>)
   b46fc:	9300      	str	r3, [sp, #0]
   b46fe:	19c2      	adds	r2, r0, r7
   b4700:	17d3      	asrs	r3, r2, #31
   b4702:	a808      	add	r0, sp, #32
   b4704:	f006 ff54 	bl	bb5b0 <_ZN9TimeClass6formatExPKc>
   b4708:	9a08      	ldr	r2, [sp, #32]
   b470a:	9203      	str	r2, [sp, #12]
   b470c:	f006 fe30 	bl	bb370 <_ZN11SystemClass10freeMemoryEv>
   b4710:	9a03      	ldr	r2, [sp, #12]
   b4712:	492c      	ldr	r1, [pc, #176]	; (b47c4 <loop+0x324>)
   b4714:	4603      	mov	r3, r0
   b4716:	4818      	ldr	r0, [pc, #96]	; (b4778 <loop+0x2d8>)
   b4718:	f7ff fda4 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b471c:	a808      	add	r0, sp, #32
   b471e:	f006 fca3 	bl	bb068 <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b4722:	2302      	movs	r3, #2
   b4724:	e7a7      	b.n	b4676 <loop+0x1d6>
			if (state != oldState) {
   b4726:	4b12      	ldr	r3, [pc, #72]	; (b4770 <loop+0x2d0>)
   b4728:	781b      	ldrb	r3, [r3, #0]
   b472a:	2b04      	cmp	r3, #4
   b472c:	d0a8      	beq.n	b4680 <loop+0x1e0>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b472e:	f7ff fdb1 	bl	b4294 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b4732:	f000 fc3d 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b4736:	f000 fccf 	bl	b50d8 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b473a:	f001 fe61 	bl	b6400 <_Z16takeMeasurementsv>
				if (sysStatus.get_alertCodeNode() == 0) result = LoRA_Functions::instance().composeDataReportNode();
   b473e:	f001 f981 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4742:	f001 fa78 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4746:	2800      	cmp	r0, #0
   b4748:	d142      	bne.n	b47d0 <loop+0x330>
   b474a:	f000 fc31 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b474e:	f000 fd0d 	bl	b516c <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b4752:	4605      	mov	r5, r0
				if (!result) {
   b4754:	4b1c      	ldr	r3, [pc, #112]	; (b47c8 <loop+0x328>)
   b4756:	2d00      	cmp	r5, #0
   b4758:	d150      	bne.n	b47fc <loop+0x35c>
					retryState++;
   b475a:	681a      	ldr	r2, [r3, #0]
					Log.info("Failed in data send, retryState = %d",retryState);
   b475c:	491b      	ldr	r1, [pc, #108]	; (b47cc <loop+0x32c>)
   b475e:	4806      	ldr	r0, [pc, #24]	; (b4778 <loop+0x2d8>)
					retryState++;
   b4760:	3201      	adds	r2, #1
   b4762:	601a      	str	r2, [r3, #0]
					Log.info("Failed in data send, retryState = %d",retryState);
   b4764:	f7ff fd7e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					state = SLEEPING_STATE;
   b4768:	2303      	movs	r3, #3
   b476a:	e6ef      	b.n	b454c <loop+0xac>
   b476c:	2003dfcd 	.word	0x2003dfcd
   b4770:	2003dfc4 	.word	0x2003dfc4
   b4774:	000bdd3f 	.word	0x000bdd3f
   b4778:	2003e654 	.word	0x2003e654
   b477c:	000bdce9 	.word	0x000bdce9
   b4780:	2003e6a8 	.word	0x2003e6a8
   b4784:	000bdd3b 	.word	0x000bdd3b
   b4788:	000bdd38 	.word	0x000bdd38
   b478c:	000bdd95 	.word	0x000bdd95
   b4790:	000be62a 	.word	0x000be62a
   b4794:	2003df88 	.word	0x2003df88
   b4798:	000be626 	.word	0x000be626
   b479c:	000be628 	.word	0x000be628
   b47a0:	000bdc58 	.word	0x000bdc58
   b47a4:	000befcc 	.word	0x000befcc
   b47a8:	00030010 	.word	0x00030010
   b47ac:	2003df68 	.word	0x2003df68
   b47b0:	000bddd0 	.word	0x000bddd0
   b47b4:	2003dfcc 	.word	0x2003dfcc
   b47b8:	2003ddbc 	.word	0x2003ddbc
   b47bc:	000bdf1d 	.word	0x000bdf1d
   b47c0:	000bddf3 	.word	0x000bddf3
   b47c4:	000bde0e 	.word	0x000bde0e
   b47c8:	2003dfc8 	.word	0x2003dfc8
   b47cc:	000bde34 	.word	0x000bde34
				else if (sysStatus.get_alertCodeNode() == 1) {
   b47d0:	f001 f938 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b47d4:	f001 fa2f 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b47d8:	2801      	cmp	r0, #1
   b47da:	d10a      	bne.n	b47f2 <loop+0x352>
					result = LoRA_Functions::instance().composeJoinRequesttNode();
   b47dc:	f000 fbe8 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b47e0:	f000 feaa 	bl	b5538 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
					result = LoRA_Functions::instance().composeAlertReportNode();	// Sent the alert - clear the flag
   b47e4:	4605      	mov	r5, r0
					sysStatus.set_alertCodeNode(0);
   b47e6:	f001 f92d 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b47ea:	2100      	movs	r1, #0
   b47ec:	f001 fa71 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b47f0:	e7b0      	b.n	b4754 <loop+0x2b4>
					result = LoRA_Functions::instance().composeAlertReportNode();	// Sent the alert - clear the flag
   b47f2:	f000 fbdd 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b47f6:	f000 ff75 	bl	b56e4 <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b47fa:	e7f3      	b.n	b47e4 <loop+0x344>
					retryState = 0;
   b47fc:	2200      	movs	r2, #0
   b47fe:	601a      	str	r2, [r3, #0]
					state = LoRA_LISTENING_STATE;
   b4800:	2305      	movs	r3, #5
   b4802:	e6a3      	b.n	b454c <loop+0xac>
			if (state != oldState) {
   b4804:	4b8c      	ldr	r3, [pc, #560]	; (b4a38 <loop+0x598>)
   b4806:	4d8d      	ldr	r5, [pc, #564]	; (b4a3c <loop+0x59c>)
   b4808:	781b      	ldrb	r3, [r3, #0]
   b480a:	2b05      	cmp	r3, #5
   b480c:	d006      	beq.n	b481c <loop+0x37c>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b480e:	f7ff fd41 	bl	b4294 <_Z22publishStateTransitionv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4812:	f004 f839 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEPING_STATE;
   b4816:	2303      	movs	r3, #3
				startListening = millis();
   b4818:	6028      	str	r0, [r5, #0]
				state = SLEEPING_STATE;
   b481a:	7023      	strb	r3, [r4, #0]
			while (millis() - startListening < 5000) {
   b481c:	f241 3687 	movw	r6, #4999	; 0x1387
   b4820:	f004 f832 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
   b4824:	682b      	ldr	r3, [r5, #0]
   b4826:	1ac0      	subs	r0, r0, r3
   b4828:	42b0      	cmp	r0, r6
   b482a:	f63f af29 	bhi.w	b4680 <loop+0x1e0>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {// Listen for acknowledgement
   b482e:	f000 fbbf 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b4832:	f000 ffb1 	bl	b5798 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4836:	2800      	cmp	r0, #0
   b4838:	d0f2      	beq.n	b4820 <loop+0x380>
					sysStatus.set_lastConnection(Time.now());
   b483a:	f001 f903 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b483e:	4605      	mov	r5, r0
   b4840:	f006 ff15 	bl	bb66e <_ZN9TimeClass3nowEv>
   b4844:	4602      	mov	r2, r0
   b4846:	17c3      	asrs	r3, r0, #31
   b4848:	4628      	mov	r0, r5
   b484a:	f001 fb02 	bl	b5e52 <_ZN13sysStatusData18set_lastConnectionEx>
					randomSeed(sysStatus.get_lastConnection());				// Done so we can genrate rando numbers later
   b484e:	f001 f8f9 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4852:	f001 fad5 	bl	b5e00 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4856:	f006 fb38 	bl	baeca <_Z10randomSeedj>
					ab1805.setRtcFromTime(Time.now());
   b485a:	f006 ff08 	bl	bb66e <_ZN9TimeClass3nowEv>
   b485e:	2301      	movs	r3, #1
   b4860:	4602      	mov	r2, r0
   b4862:	9300      	str	r3, [sp, #0]
   b4864:	17c3      	asrs	r3, r0, #31
   b4866:	4876      	ldr	r0, [pc, #472]	; (b4a40 <loop+0x5a0>)
   b4868:	f002 fac4 	bl	b6df4 <_ZN6AB180514setRtcFromTimeExb>
					if (sysStatus.get_alertCodeNode() > 0) {				// If we are reporting an alert we will also report data
   b486c:	f001 f8ea 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4870:	f001 f9e1 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4874:	b130      	cbz	r0, b4884 <loop+0x3e4>
						state = IDLE_STATE;									// This is enable us to send the data now that alert is reported
   b4876:	2302      	movs	r3, #2
   b4878:	7023      	strb	r3, [r4, #0]
					LoRA_Functions::instance().sleepLoRaRadio();			// Done with LoRA - put radio to sleep
   b487a:	f000 fb99 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b487e:	f000 fc3b 	bl	b50f8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
					break;
   b4882:	e6fd      	b.n	b4680 <loop+0x1e0>
						static int lastReportingHour = Time.hour();
   b4884:	4d6f      	ldr	r5, [pc, #444]	; (b4a44 <loop+0x5a4>)
   b4886:	4c70      	ldr	r4, [pc, #448]	; (b4a48 <loop+0x5a8>)
   b4888:	782b      	ldrb	r3, [r5, #0]
   b488a:	f3bf 8f5b 	dmb	ish
   b488e:	f013 0f01 	tst.w	r3, #1
   b4892:	d109      	bne.n	b48a8 <loop+0x408>
   b4894:	4628      	mov	r0, r5
   b4896:	f7ff fc11 	bl	b40bc <__cxa_guard_acquire>
   b489a:	b128      	cbz	r0, b48a8 <loop+0x408>
   b489c:	f006 fef8 	bl	bb690 <_ZN9TimeClass4hourEv>
   b48a0:	6020      	str	r0, [r4, #0]
   b48a2:	4628      	mov	r0, r5
   b48a4:	f7ff fc0f 	bl	b40c6 <__cxa_guard_release>
						if (Time.hour() != lastReportingHour) {
   b48a8:	f006 fef2 	bl	bb690 <_ZN9TimeClass4hourEv>
   b48ac:	6823      	ldr	r3, [r4, #0]
   b48ae:	4298      	cmp	r0, r3
   b48b0:	d0e3      	beq.n	b487a <loop+0x3da>
							current.set_hourlyCount(0);					    // Zero the hourly count
   b48b2:	f001 f93b 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b48b6:	2100      	movs	r1, #0
   b48b8:	f001 fa7f 	bl	b5dba <_ZN17currentStatusData15set_hourlyCountEt>
							lastReportingHour = Time.hour();
   b48bc:	f006 fee8 	bl	bb690 <_ZN9TimeClass4hourEv>
   b48c0:	6020      	str	r0, [r4, #0]
   b48c2:	e7da      	b.n	b487a <loop+0x3da>
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b48c4:	4b5c      	ldr	r3, [pc, #368]	; (b4a38 <loop+0x598>)
   b48c6:	781b      	ldrb	r3, [r3, #0]
   b48c8:	2b01      	cmp	r3, #1
   b48ca:	d001      	beq.n	b48d0 <loop+0x430>
   b48cc:	f7ff fce2 	bl	b4294 <_Z22publishStateTransitionv>
			switch (sysStatus.get_alertCodeNode())
   b48d0:	f001 f8b8 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b48d4:	f001 f9af 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b48d8:	3801      	subs	r0, #1
   b48da:	2806      	cmp	r0, #6
   b48dc:	f200 809f 	bhi.w	b4a1e <loop+0x57e>
   b48e0:	a301      	add	r3, pc, #4	; (adr r3, b48e8 <loop+0x448>)
   b48e2:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   b48e6:	bf00      	nop
   b48e8:	000b4905 	.word	0x000b4905
   b48ec:	000b4911 	.word	0x000b4911
   b48f0:	000b4915 	.word	0x000b4915
   b48f4:	000b498f 	.word	0x000b498f
   b48f8:	000b49f3 	.word	0x000b49f3
   b48fc:	000b4a0b 	.word	0x000b4a0b
   b4900:	000b4681 	.word	0x000b4681
				Log.info("Alert 1 - Join Request Required");
   b4904:	4951      	ldr	r1, [pc, #324]	; (b4a4c <loop+0x5ac>)
   b4906:	4852      	ldr	r0, [pc, #328]	; (b4a50 <loop+0x5b0>)
   b4908:	f7ff fcac 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;							// Sends the alert and clears alert code
   b490c:	2304      	movs	r3, #4
   b490e:	e61d      	b.n	b454c <loop+0xac>
				Log.info("Alert 2- New Day Alert");
   b4910:	4950      	ldr	r1, [pc, #320]	; (b4a54 <loop+0x5b4>)
   b4912:	e7f8      	b.n	b4906 <loop+0x466>
				static system_tick_t enteredState = millis();
   b4914:	4c50      	ldr	r4, [pc, #320]	; (b4a58 <loop+0x5b8>)
   b4916:	4d51      	ldr	r5, [pc, #324]	; (b4a5c <loop+0x5bc>)
   b4918:	7823      	ldrb	r3, [r4, #0]
   b491a:	f3bf 8f5b 	dmb	ish
   b491e:	f013 0f01 	tst.w	r3, #1
   b4922:	d109      	bne.n	b4938 <loop+0x498>
   b4924:	4620      	mov	r0, r4
   b4926:	f7ff fbc9 	bl	b40bc <__cxa_guard_acquire>
   b492a:	b128      	cbz	r0, b4938 <loop+0x498>
   b492c:	f003 ffac 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
   b4930:	6028      	str	r0, [r5, #0]
   b4932:	4620      	mov	r0, r4
   b4934:	f7ff fbc7 	bl	b40c6 <__cxa_guard_release>
   b4938:	f003 ffa6 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b493c:	682b      	ldr	r3, [r5, #0]
   b493e:	1ac0      	subs	r0, r0, r3
   b4940:	f247 5330 	movw	r3, #30000	; 0x7530
   b4944:	4298      	cmp	r0, r3
   b4946:	f67f ae9b 	bls.w	b4680 <loop+0x1e0>
					Log.info("Alert 3 - Resetting device");
   b494a:	4945      	ldr	r1, [pc, #276]	; (b4a60 <loop+0x5c0>)
   b494c:	4840      	ldr	r0, [pc, #256]	; (b4a50 <loop+0x5b0>)
   b494e:	f7ff fc89 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(0);							// Need to clear so we don't get in a retry cycle
   b4952:	f001 f877 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4956:	2100      	movs	r1, #0
   b4958:	f001 f9bb 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());
   b495c:	f001 f872 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4960:	4604      	mov	r4, r0
   b4962:	f006 fe84 	bl	bb66e <_ZN9TimeClass3nowEv>
   b4966:	4602      	mov	r2, r0
   b4968:	17c3      	asrs	r3, r0, #31
   b496a:	4620      	mov	r0, r4
   b496c:	f001 fa76 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
					sysStatus.flush(false);									// All this is required as we are done trainsiting loop
   b4970:	f001 f868 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4974:	6803      	ldr	r3, [r0, #0]
   b4976:	2100      	movs	r1, #0
   b4978:	68db      	ldr	r3, [r3, #12]
   b497a:	4798      	blx	r3
					delay(2000);
   b497c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4980:	f004 fb14 	bl	b8fac <delay>
					ab1805.deepPowerDown();
   b4984:	211e      	movs	r1, #30
   b4986:	482e      	ldr	r0, [pc, #184]	; (b4a40 <loop+0x5a0>)
   b4988:	f001 fff2 	bl	b6970 <_ZN6AB180513deepPowerDownEi>
   b498c:	e678      	b.n	b4680 <loop+0x1e0>
				Log.info("Initialize LoRA radio");
   b498e:	4935      	ldr	r1, [pc, #212]	; (b4a64 <loop+0x5c4>)
   b4990:	482f      	ldr	r0, [pc, #188]	; (b4a50 <loop+0x5b0>)
   b4992:	f7ff fc67 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				if(LoRA_Functions::instance().initializeRadio()) {
   b4996:	f000 fb0b 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b499a:	f000 fbb3 	bl	b5104 <_ZN14LoRA_Functions15initializeRadioEv>
   b499e:	b198      	cbz	r0, b49c8 <loop+0x528>
					Log.info("Initialization successful");
   b49a0:	4931      	ldr	r1, [pc, #196]	; (b4a68 <loop+0x5c8>)
   b49a2:	482b      	ldr	r0, [pc, #172]	; (b4a50 <loop+0x5b0>)
   b49a4:	f7ff fc5e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(1);							// Send a join request as node is unconfigured
   b49a8:	f001 f84c 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b49ac:	2101      	movs	r1, #1
   b49ae:	f001 f990 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());	
   b49b2:	f001 f847 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b49b6:	4605      	mov	r5, r0
   b49b8:	f006 fe59 	bl	bb66e <_ZN9TimeClass3nowEv>
   b49bc:	4602      	mov	r2, r0
   b49be:	17c3      	asrs	r3, r0, #31
   b49c0:	4628      	mov	r0, r5
   b49c2:	f001 fa4b 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
					state = LoRA_TRANSMISSION_STATE;						// Sends the alert and clears alert code
   b49c6:	e7a1      	b.n	b490c <loop+0x46c>
					Log.info(("Initialization not successful - power cycle"));
   b49c8:	4928      	ldr	r1, [pc, #160]	; (b4a6c <loop+0x5cc>)
   b49ca:	4821      	ldr	r0, [pc, #132]	; (b4a50 <loop+0x5b0>)
   b49cc:	f7ff fc4a 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(3);							// Next time through - will transition to power cycle
   b49d0:	f001 f838 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b49d4:	2103      	movs	r1, #3
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b49d6:	f001 f97c 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());			
   b49da:	f001 f833 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b49de:	4605      	mov	r5, r0
   b49e0:	f006 fe45 	bl	bb66e <_ZN9TimeClass3nowEv>
   b49e4:	4602      	mov	r2, r0
   b49e6:	17c3      	asrs	r3, r0, #31
   b49e8:	4628      	mov	r0, r5
   b49ea:	f001 fa37 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
				state = IDLE_STATE;
   b49ee:	2302      	movs	r3, #2
   b49f0:	e5ac      	b.n	b454c <loop+0xac>
				sysStatus.loadSystemDefaults();								// Resets the sysStatus values to factory default
   b49f2:	f001 f827 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b49f6:	f001 fa37 	bl	b5e68 <_ZN13sysStatusData18loadSystemDefaultsEv>
				current.resetEverything();									// Resets the node counts
   b49fa:	f001 f897 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b49fe:	f001 faba 	bl	b5f76 <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b4a02:	f001 f81f 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4a06:	2101      	movs	r1, #1
   b4a08:	e7e5      	b.n	b49d6 <loop+0x536>
				current.resetEverything();
   b4a0a:	f001 f88f 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b4a0e:	f001 fab2 	bl	b5f76 <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(0);
   b4a12:	f001 f817 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4a16:	2100      	movs	r1, #0
   b4a18:	f001 f95b 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4a1c:	e7e7      	b.n	b49ee <loop+0x54e>
				Log.info("Undefined Error State");
   b4a1e:	4914      	ldr	r1, [pc, #80]	; (b4a70 <loop+0x5d0>)
   b4a20:	480b      	ldr	r0, [pc, #44]	; (b4a50 <loop+0x5b0>)
   b4a22:	f7ff fc1f 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4a26:	e7f4      	b.n	b4a12 <loop+0x572>
                valid_ = false;
   b4a28:	7530      	strb	r0, [r6, #20]
                return *this;
   b4a2a:	e605      	b.n	b4638 <loop+0x198>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4a2c:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4a30:	e602      	b.n	b4638 <loop+0x198>
}
   b4a32:	b00d      	add	sp, #52	; 0x34
   b4a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4a38:	2003dfc4 	.word	0x2003dfc4
   b4a3c:	2003df5c 	.word	0x2003df5c
   b4a40:	2003df68 	.word	0x2003df68
   b4a44:	2003df48 	.word	0x2003df48
   b4a48:	2003df60 	.word	0x2003df60
   b4a4c:	000bde59 	.word	0x000bde59
   b4a50:	2003e654 	.word	0x2003e654
   b4a54:	000bde79 	.word	0x000bde79
   b4a58:	2003df44 	.word	0x2003df44
   b4a5c:	2003df58 	.word	0x2003df58
   b4a60:	000bde90 	.word	0x000bde90
   b4a64:	000bdeab 	.word	0x000bdeab
   b4a68:	000bdec1 	.word	0x000bdec1
   b4a6c:	000bdedb 	.word	0x000bdedb
   b4a70:	000bdf07 	.word	0x000bdf07

000b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4a74:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4a76:	2300      	movs	r3, #0
   b4a78:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a7a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4a7c:	4604      	mov	r4, r0
   b4a7e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4a80:	b12b      	cbz	r3, b4a8e <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4a82:	2202      	movs	r2, #2
   b4a84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4a86:	68eb      	ldr	r3, [r5, #12]
   b4a88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4a8a:	68ab      	ldr	r3, [r5, #8]
   b4a8c:	60a3      	str	r3, [r4, #8]
    }
   b4a8e:	4620      	mov	r0, r4
   b4a90:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a94 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a98:	b095      	sub	sp, #84	; 0x54
   b4a9a:	4605      	mov	r5, r0
        };
   b4a9c:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4a9e:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4aa0:	4690      	mov	r8, r2
   b4aa2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4aa4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4aa6:	f7ff ffe5 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4aaa:	a904      	add	r1, sp, #16
   b4aac:	a808      	add	r0, sp, #32
   b4aae:	f7ff ffe1 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4ab2:	a908      	add	r1, sp, #32
   b4ab4:	4630      	mov	r0, r6
   b4ab6:	f7ff ffdd 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4aba:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4abe:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4ac0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ac4:	f7ff fae7 	bl	b4096 <_Znwj>
   b4ac8:	4604      	mov	r4, r0
   b4aca:	b1a0      	cbz	r0, b4af6 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4acc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4ad0:	ab01      	add	r3, sp, #4
   b4ad2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4ada:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4ade:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4ae4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ae6:	60a3      	str	r3, [r4, #8]
   b4ae8:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4aee:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4af2:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4af4:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4af6:	4b24      	ldr	r3, [pc, #144]	; (b4b88 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4af8:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4afa:	4b24      	ldr	r3, [pc, #144]	; (b4b8c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4afc:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4afe:	2200      	movs	r2, #0
   b4b00:	2300      	movs	r3, #0
   b4b02:	f04f 0900 	mov.w	r9, #0
   b4b06:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4b0a:	4b21      	ldr	r3, [pc, #132]	; (b4b90 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4b0c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4b10:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b12:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4b14:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4b18:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4b1c:	f7ff fabb 	bl	b4096 <_Znwj>
   b4b20:	4604      	mov	r4, r0
   b4b22:	b1d8      	cbz	r0, b4b5c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4b26:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4b2a:	b133      	cbz	r3, b4b3a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4b2c:	2202      	movs	r2, #2
   b4b2e:	a910      	add	r1, sp, #64	; 0x40
   b4b30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4b32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4b34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4b38:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4b3a:	4b16      	ldr	r3, [pc, #88]	; (b4b94 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4b3c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4b3e:	4a16      	ldr	r2, [pc, #88]	; (b4b98 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4b40:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4b42:	ab01      	add	r3, sp, #4
   b4b44:	4640      	mov	r0, r8
   b4b46:	4639      	mov	r1, r7
   b4b48:	f004 f8c2 	bl	b8cd0 <system_subscribe_event>
        if (r) {
   b4b4c:	b1b0      	cbz	r0, b4b7c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4b4e:	4620      	mov	r0, r4
   b4b50:	f7ff fb3e 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4b54:	2110      	movs	r1, #16
   b4b56:	4620      	mov	r0, r4
   b4b58:	f7ff faa1 	bl	b409e <_ZdlPvj>
   b4b5c:	a810      	add	r0, sp, #64	; 0x40
   b4b5e:	f7ff fb37 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b62:	4630      	mov	r0, r6
   b4b64:	f7ff fb34 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b68:	a808      	add	r0, sp, #32
   b4b6a:	f7ff fb31 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b6e:	a804      	add	r0, sp, #16
   b4b70:	f7ff fb2e 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
    }
   b4b74:	4628      	mov	r0, r5
   b4b76:	b015      	add	sp, #84	; 0x54
   b4b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4b7c:	9b02      	ldr	r3, [sp, #8]
   b4b7e:	60ab      	str	r3, [r5, #8]
   b4b80:	e9c5 8700 	strd	r8, r7, [r5]
   b4b84:	e7ea      	b.n	b4b5c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4b86:	bf00      	nop
   b4b88:	000b4145 	.word	0x000b4145
   b4b8c:	000b4d59 	.word	0x000b4d59
   b4b90:	000c0002 	.word	0x000c0002
   b4b94:	000b41e3 	.word	0x000b41e3
   b4b98:	000b40f1 	.word	0x000b40f1

000b4b9c <setup>:
void setup() {
   b4b9c:	b530      	push	{r4, r5, lr}
        return hal_timer_millis(nullptr);
   b4b9e:	2000      	movs	r0, #0
   b4ba0:	b08d      	sub	sp, #52	; 0x34
   b4ba2:	f003 fe81 	bl	b88a8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4ba6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4baa:	4604      	mov	r4, r0
   b4bac:	2000      	movs	r0, #0
   b4bae:	f003 fe7b 	bl	b88a8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4bb2:	1b00      	subs	r0, r0, r4
   b4bb4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4bb8:	42a8      	cmp	r0, r5
   b4bba:	f171 0300 	sbcs.w	r3, r1, #0
   b4bbe:	d207      	bcs.n	b4bd0 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4bc0:	f006 fe3c 	bl	bb83c <_Z16_fetch_usbserialv>
   b4bc4:	f006 fe2f 	bl	bb826 <_ZN9USBSerial11isConnectedEv>
   b4bc8:	b910      	cbnz	r0, b4bd0 <setup+0x34>
            spark_process();
   b4bca:	f004 f8db 	bl	b8d84 <spark_process>
        while (_while() && !_condition()) {
   b4bce:	e7ed      	b.n	b4bac <setup+0x10>
   b4bd0:	f006 fe34 	bl	bb83c <_Z16_fetch_usbserialv>
   b4bd4:	f006 fe27 	bl	bb826 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b4bd8:	f001 fa06 	bl	b5fe8 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4bdc:	f001 fa30 	bl	b6040 <_Z18initializePowerCfgv>
	current.setup();
   b4be0:	f000 ffa4 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b4be4:	6803      	ldr	r3, [r0, #0]
   b4be6:	681b      	ldr	r3, [r3, #0]
   b4be8:	4798      	blx	r3
	sysStatus.setup();								// Initialize persistent storage
   b4bea:	f000 ff2b 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4bee:	6803      	ldr	r3, [r0, #0]
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	4798      	blx	r3
	sysStatus.checkSystemValues();					// Make sure system values are in bounds for normal operation
   b4bf4:	f000 ff26 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4bf8:	f001 f96c 	bl	b5ed4 <_ZN13sysStatusData17checkSystemValuesEv>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4bfc:	4847      	ldr	r0, [pc, #284]	; (b4d1c <setup+0x180>)
   b4bfe:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// The carrier board has D8 connected to FOUT for wake interrupts
   b4c00:	2101      	movs	r1, #1
   b4c02:	8143      	strh	r3, [r0, #10]
   b4c04:	f002 f958 	bl	b6eb8 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b4c08:	217c      	movs	r1, #124	; 0x7c
   b4c0a:	4844      	ldr	r0, [pc, #272]	; (b4d1c <setup+0x180>)
   b4c0c:	f001 fd56 	bl	b66bc <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4c10:	4b43      	ldr	r3, [pc, #268]	; (b4d20 <setup+0x184>)
   b4c12:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b4c14:	4b43      	ldr	r3, [pc, #268]	; (b4d24 <setup+0x188>)
   b4c16:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4c18:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b4c1a:	4b43      	ldr	r3, [pc, #268]	; (b4d28 <setup+0x18c>)
   b4c1c:	930a      	str	r3, [sp, #40]	; 0x28
   b4c1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4c22:	2300      	movs	r3, #0
   b4c24:	a804      	add	r0, sp, #16
   b4c26:	9400      	str	r4, [sp, #0]
   b4c28:	f7ff ff34 	bl	b4a94 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	f7ff facf 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b4c32:	f000 f9bd 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b4c36:	2100      	movs	r1, #0
   b4c38:	f000 f9cc 	bl	b4fd4 <_ZN14LoRA_Functions5setupEb>
   b4c3c:	2800      	cmp	r0, #0
   b4c3e:	d14d      	bne.n	b4cdc <setup+0x140>
		sysStatus.set_alertCodeNode(3);										// Initialization failure
   b4c40:	f000 ff00 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4c44:	2103      	movs	r1, #3
   b4c46:	f001 f844 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b4c4a:	f000 fefb 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4c4e:	4604      	mov	r4, r0
   b4c50:	f006 fd0d 	bl	bb66e <_ZN9TimeClass3nowEv>
   b4c54:	4602      	mov	r2, r0
   b4c56:	17c3      	asrs	r3, r0, #31
   b4c58:	4620      	mov	r0, r4
   b4c5a:	f001 f8ff 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", sysStatus.get_alertCodeNode());
   b4c5e:	f000 fef1 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4c62:	f000 ffe8 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4c66:	4931      	ldr	r1, [pc, #196]	; (b4d2c <setup+0x190>)
   b4c68:	4602      	mov	r2, r0
   b4c6a:	4831      	ldr	r0, [pc, #196]	; (b4d30 <setup+0x194>)
   b4c6c:	f7ff fafa 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b4c70:	f001 fbc6 	bl	b6400 <_Z16takeMeasurementsv>
	if (!digitalRead(BUTTON_PIN)) {
   b4c74:	4b2f      	ldr	r3, [pc, #188]	; (b4d34 <setup+0x198>)
   b4c76:	881d      	ldrh	r5, [r3, #0]
   b4c78:	4628      	mov	r0, r5
   b4c7a:	f006 ff09 	bl	bba90 <digitalRead>
   b4c7e:	b928      	cbnz	r0, b4c8c <setup+0xf0>
		Log.info("User button pressed, will force connection to Particle");
   b4c80:	492d      	ldr	r1, [pc, #180]	; (b4d38 <setup+0x19c>)
   b4c82:	482b      	ldr	r0, [pc, #172]	; (b4d30 <setup+0x194>)
   b4c84:	f7ff faee 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4c88:	f004 f884 	bl	b8d94 <spark_cloud_flag_connect>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b4c8c:	482b      	ldr	r0, [pc, #172]	; (b4d3c <setup+0x1a0>)
   b4c8e:	492c      	ldr	r1, [pc, #176]	; (b4d40 <setup+0x1a4>)
   b4c90:	8800      	ldrh	r0, [r0, #0]
   b4c92:	2400      	movs	r4, #0
   b4c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4c98:	2201      	movs	r2, #1
   b4c9a:	9400      	str	r4, [sp, #0]
   b4c9c:	f004 fc24 	bl	b94e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b4ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4ca4:	4622      	mov	r2, r4
   b4ca6:	4927      	ldr	r1, [pc, #156]	; (b4d44 <setup+0x1a8>)
   b4ca8:	9400      	str	r4, [sp, #0]
   b4caa:	4628      	mov	r0, r5
   b4cac:	f004 fc1c 	bl	b94e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b4cb0:	4b25      	ldr	r3, [pc, #148]	; (b4d48 <setup+0x1ac>)
   b4cb2:	781a      	ldrb	r2, [r3, #0]
   b4cb4:	b90a      	cbnz	r2, b4cba <setup+0x11e>
   b4cb6:	2203      	movs	r2, #3
   b4cb8:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", sysStatus.get_alertCodeNode());
   b4cba:	f000 fec3 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4cbe:	f000 ffba 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4cc2:	4922      	ldr	r1, [pc, #136]	; (b4d4c <setup+0x1b0>)
   b4cc4:	4602      	mov	r2, r0
   b4cc6:	481a      	ldr	r0, [pc, #104]	; (b4d30 <setup+0x194>)
   b4cc8:	f7ff facc 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4ccc:	4b20      	ldr	r3, [pc, #128]	; (b4d50 <setup+0x1b4>)
   b4cce:	8818      	ldrh	r0, [r3, #0]
   b4cd0:	2100      	movs	r1, #0
}
   b4cd2:	b00d      	add	sp, #52	; 0x34
   b4cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4cd8:	f006 bec1 	b.w	bba5e <digitalWrite>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4cdc:	f000 feb2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4ce0:	f000 ff9f 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4ce4:	280a      	cmp	r0, #10
   b4ce6:	d914      	bls.n	b4d12 <setup+0x176>
		sysStatus.set_alertCodeNode(1); 									// Will initiate a join request
   b4ce8:	f000 feac 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4cec:	2101      	movs	r1, #1
   b4cee:	f000 fff0 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", sysStatus.get_nodeNumber(), sysStatus.get_alertCodeNode());
   b4cf2:	f000 fea7 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4cf6:	f000 ff94 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4cfa:	9003      	str	r0, [sp, #12]
   b4cfc:	f000 fea2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4d00:	f000 ff99 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4d04:	9a03      	ldr	r2, [sp, #12]
   b4d06:	4913      	ldr	r1, [pc, #76]	; (b4d54 <setup+0x1b8>)
   b4d08:	4603      	mov	r3, r0
   b4d0a:	4809      	ldr	r0, [pc, #36]	; (b4d30 <setup+0x194>)
   b4d0c:	f7ff faaa 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4d10:	e7ae      	b.n	b4c70 <setup+0xd4>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4d12:	f006 fc8f 	bl	bb634 <_ZN9TimeClass7isValidEv>
   b4d16:	2800      	cmp	r0, #0
   b4d18:	d0e6      	beq.n	b4ce8 <setup+0x14c>
   b4d1a:	e7a9      	b.n	b4c70 <setup+0xd4>
   b4d1c:	2003df68 	.word	0x2003df68
   b4d20:	000b40d9 	.word	0x000b40d9
   b4d24:	000b417f 	.word	0x000b417f
   b4d28:	000b416b 	.word	0x000b416b
   b4d2c:	000bdf39 	.word	0x000bdf39
   b4d30:	2003e654 	.word	0x2003e654
   b4d34:	000be626 	.word	0x000be626
   b4d38:	000bdfbe 	.word	0x000bdfbe
   b4d3c:	000be628 	.word	0x000be628
   b4d40:	000b4119 	.word	0x000b4119
   b4d44:	000b40e5 	.word	0x000b40e5
   b4d48:	2003dfcd 	.word	0x2003dfcd
   b4d4c:	000bdff5 	.word	0x000bdff5
   b4d50:	000be624 	.word	0x000be624
   b4d54:	000bdf77 	.word	0x000bdf77

000b4d58 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4d58:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4d5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d5c:	4604      	mov	r4, r0
	switch (__op)
   b4d5e:	d104      	bne.n	b4d6a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4d60:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4d62:	6003      	str	r3, [r0, #0]
      }
   b4d64:	2000      	movs	r0, #0
   b4d66:	b003      	add	sp, #12
   b4d68:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4d6a:	2a02      	cmp	r2, #2
   b4d6c:	d00c      	beq.n	b4d88 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4d6e:	2a03      	cmp	r2, #3
   b4d70:	d1f8      	bne.n	b4d64 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4d72:	6804      	ldr	r4, [r0, #0]
   b4d74:	2c00      	cmp	r4, #0
   b4d76:	d0f5      	beq.n	b4d64 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4d78:	4620      	mov	r0, r4
   b4d7a:	f7ff fa29 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4d7e:	2110      	movs	r1, #16
   b4d80:	4620      	mov	r0, r4
   b4d82:	f7ff f98c 	bl	b409e <_ZdlPvj>
   b4d86:	e7ed      	b.n	b4d64 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4d88:	6809      	ldr	r1, [r1, #0]
   b4d8a:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4d8c:	2010      	movs	r0, #16
   b4d8e:	f7ff f982 	bl	b4096 <_Znwj>
   b4d92:	4605      	mov	r5, r0
   b4d94:	b110      	cbz	r0, b4d9c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4d96:	9901      	ldr	r1, [sp, #4]
   b4d98:	f7ff fe6c 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4d9c:	6025      	str	r5, [r4, #0]
	}
   b4d9e:	e7e1      	b.n	b4d64 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4da0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4da2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4da6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4da8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4daa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4dae:	42ae      	cmp	r6, r5
   b4db0:	d004      	beq.n	b4dbc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4db2:	4628      	mov	r0, r5
   b4db4:	f006 f958 	bl	bb068 <_ZN6StringD1Ev>
   b4db8:	3514      	adds	r5, #20
   b4dba:	e7f8      	b.n	b4dae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4dbc:	6820      	ldr	r0, [r4, #0]
   b4dbe:	f004 f881 	bl	b8ec4 <free>
    AllocatorT::free(data_);
}
   b4dc2:	4620      	mov	r0, r4
   b4dc4:	bd70      	pop	{r4, r5, r6, pc}

000b4dc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4dc6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dca:	4604      	mov	r4, r0
   b4dcc:	460d      	mov	r5, r1
   b4dce:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4dd0:	d916      	bls.n	b4e00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4dd2:	4290      	cmp	r0, r2
   b4dd4:	d215      	bcs.n	b4e02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4dd6:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4dda:	1a75      	subs	r5, r6, r1
   b4ddc:	f1a1 0714 	sub.w	r7, r1, #20
   b4de0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4de2:	42b7      	cmp	r7, r6
   b4de4:	d01c      	beq.n	b4e20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4de6:	b12c      	cbz	r4, b4df4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4de8:	4631      	mov	r1, r6
   b4dea:	4620      	mov	r0, r4
   b4dec:	f006 f9b8 	bl	bb160 <_ZN6StringC1EOS_>
   b4df0:	7c33      	ldrb	r3, [r6, #16]
   b4df2:	7423      	strb	r3, [r4, #16]
   b4df4:	4630      	mov	r0, r6
   b4df6:	f006 f937 	bl	bb068 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4dfa:	3e14      	subs	r6, #20
   b4dfc:	3c14      	subs	r4, #20
   b4dfe:	e7f0      	b.n	b4de2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e00:	d00e      	beq.n	b4e20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e02:	42b5      	cmp	r5, r6
   b4e04:	d00c      	beq.n	b4e20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e06:	b12c      	cbz	r4, b4e14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e08:	4629      	mov	r1, r5
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	f006 f9a8 	bl	bb160 <_ZN6StringC1EOS_>
   b4e10:	7c2b      	ldrb	r3, [r5, #16]
   b4e12:	7423      	strb	r3, [r4, #16]
   b4e14:	4628      	mov	r0, r5
   b4e16:	f006 f927 	bl	bb068 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e1a:	3514      	adds	r5, #20
   b4e1c:	3414      	adds	r4, #20
   b4e1e:	e7f0      	b.n	b4e02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e26:	2300      	movs	r3, #0
   b4e28:	e9c0 3300 	strd	r3, r3, [r0]
   b4e2c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e2e:	684f      	ldr	r7, [r1, #4]
   b4e30:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e32:	4604      	mov	r4, r0
   b4e34:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e36:	dd23      	ble.n	b4e80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e38:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e3c:	fb08 f007 	mul.w	r0, r8, r7
   b4e40:	f004 f838 	bl	b8eb4 <malloc>
            if (!d) {
   b4e44:	4605      	mov	r5, r0
   b4e46:	b1d8      	cbz	r0, b4e80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e48:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e4c:	fb08 1202 	mla	r2, r8, r2, r1
   b4e50:	f7ff ffb9 	bl	b4dc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e54:	6820      	ldr	r0, [r4, #0]
   b4e56:	f004 f835 	bl	b8ec4 <free>
        data_ = d;
   b4e5a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4e5c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4e5e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4e62:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4e66:	45b8      	cmp	r8, r7
   b4e68:	d008      	beq.n	b4e7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4e6a:	4639      	mov	r1, r7
   b4e6c:	4628      	mov	r0, r5
   b4e6e:	f006 f991 	bl	bb194 <_ZN6StringC1ERKS_>
   b4e72:	7c3b      	ldrb	r3, [r7, #16]
   b4e74:	742b      	strb	r3, [r5, #16]
   b4e76:	3714      	adds	r7, #20
   b4e78:	3514      	adds	r5, #20
   b4e7a:	e7f4      	b.n	b4e66 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4e7c:	6873      	ldr	r3, [r6, #4]
   b4e7e:	6063      	str	r3, [r4, #4]
}
   b4e80:	4620      	mov	r0, r4
   b4e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4e88 <_GLOBAL__sub_I_SystemMode>:
   b4e88:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4e8a:	4b2f      	ldr	r3, [pc, #188]	; (b4f48 <_GLOBAL__sub_I_SystemMode+0xc0>)
    SleepResult() {}
   b4e8c:	4a2f      	ldr	r2, [pc, #188]	; (b4f4c <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4e8e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e90:	2400      	movs	r4, #0
   b4e92:	b08d      	sub	sp, #52	; 0x34
   b4e94:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4e98:	2003      	movs	r0, #3
   b4e9a:	f003 ff09 	bl	b8cb0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b4e9e:	4621      	mov	r1, r4
   b4ea0:	2001      	movs	r0, #1
   b4ea2:	f003 ff1d 	bl	b8ce0 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b4ea6:	2101      	movs	r1, #1
   b4ea8:	2004      	movs	r0, #4
   b4eaa:	f003 fcd5 	bl	b8858 <HAL_Feature_Set>
        capacity_(0) {
   b4eae:	e9cd 4400 	strd	r4, r4, [sp]
   b4eb2:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4eb4:	f006 fcc2 	bl	bb83c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4eb8:	4d25      	ldr	r5, [pc, #148]	; (b4f50 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b4eba:	4606      	mov	r6, r0
   b4ebc:	4669      	mov	r1, sp
   b4ebe:	a803      	add	r0, sp, #12
   b4ec0:	f7ff ffaf 	bl	b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4ec4:	462f      	mov	r7, r5
        stream_(&stream) {
   b4ec6:	a903      	add	r1, sp, #12
   b4ec8:	a806      	add	r0, sp, #24
   b4eca:	f7ff ffaa 	bl	b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4ece:	4b21      	ldr	r3, [pc, #132]	; (b4f54 <_GLOBAL__sub_I_SystemMode+0xcc>)
   b4ed0:	f847 3b04 	str.w	r3, [r7], #4
   b4ed4:	a906      	add	r1, sp, #24
   b4ed6:	a809      	add	r0, sp, #36	; 0x24
   b4ed8:	f7ff ffa3 	bl	b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4edc:	aa09      	add	r2, sp, #36	; 0x24
   b4ede:	211e      	movs	r1, #30
   b4ee0:	4638      	mov	r0, r7
   b4ee2:	f005 fa1d 	bl	ba320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4ee6:	a809      	add	r0, sp, #36	; 0x24
   b4ee8:	f7ff ff5a 	bl	b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4eec:	a806      	add	r0, sp, #24
   b4eee:	f7ff ff57 	bl	b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4ef2:	4b19      	ldr	r3, [pc, #100]	; (b4f58 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b4ef4:	602b      	str	r3, [r5, #0]
   b4ef6:	a803      	add	r0, sp, #12
   b4ef8:	622e      	str	r6, [r5, #32]
   b4efa:	f7ff ff51 	bl	b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4efe:	4b17      	ldr	r3, [pc, #92]	; (b4f5c <_GLOBAL__sub_I_SystemMode+0xd4>)
   b4f00:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4f02:	f006 fc9b 	bl	bb83c <_Z16_fetch_usbserialv>
   b4f06:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f0a:	f006 fc85 	bl	bb818 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4f0e:	f004 fee9 	bl	b9ce4 <_ZN5spark10LogManager8instanceEv>
   b4f12:	4629      	mov	r1, r5
   b4f14:	f005 f8da 	bl	ba0cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b4f18:	4668      	mov	r0, sp
   b4f1a:	f7ff ff41 	bl	b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   b4f1e:	4b10      	ldr	r3, [pc, #64]	; (b4f60 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b4f20:	1d1a      	adds	r2, r3, #4
   b4f22:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4f24:	4a0f      	ldr	r2, [pc, #60]	; (b4f64 <_GLOBAL__sub_I_SystemMode+0xdc>)
   b4f26:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4f28:	2201      	movs	r2, #1
   b4f2a:	751a      	strb	r2, [r3, #20]
   b4f2c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4f30:	611c      	str	r4, [r3, #16]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f32:	f006 fe0d 	bl	bbb50 <_Z19__fetch_global_Wirev>
   b4f36:	4601      	mov	r1, r0
   b4f38:	480b      	ldr	r0, [pc, #44]	; (b4f68 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b4f3a:	2269      	movs	r2, #105	; 0x69
   b4f3c:	b00d      	add	sp, #52	; 0x34
   b4f3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f42:	f001 babd 	b.w	b64c0 <_ZN6AB1805C1ER7TwoWireh>
   b4f46:	bf00      	nop
   b4f48:	2003df38 	.word	0x2003df38
   b4f4c:	ffff0000 	.word	0xffff0000
   b4f50:	2003dfa0 	.word	0x2003dfa0
   b4f54:	000be030 	.word	0x000be030
   b4f58:	000bee6c 	.word	0x000bee6c
   b4f5c:	000be048 	.word	0x000be048
   b4f60:	2003df88 	.word	0x2003df88
   b4f64:	00030010 	.word	0x00030010
   b4f68:	2003df68 	.word	0x2003df68

000b4f6c <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b4f6c:	4770      	bx	lr

000b4f6e <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4f6e:	4770      	bx	lr

000b4f70 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4f70:	b510      	push	{r4, lr}
}
   b4f72:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b4f74:	4604      	mov	r4, r0
}
   b4f76:	f7ff f892 	bl	b409e <_ZdlPvj>
   b4f7a:	4620      	mov	r0, r4
   b4f7c:	bd10      	pop	{r4, pc}
	...

000b4f80 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4f80:	b510      	push	{r4, lr}
   b4f82:	4b05      	ldr	r3, [pc, #20]	; (b4f98 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4f84:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4f86:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4f88:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4f8a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4f8e:	f003 fe73 	bl	b8c78 <led_set_status_active>
}
   b4f92:	4620      	mov	r0, r4
   b4f94:	bd10      	pop	{r4, pc}
   b4f96:	bf00      	nop
   b4f98:	000be518 	.word	0x000be518

000b4f9c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4f9c:	b510      	push	{r4, lr}
   b4f9e:	4604      	mov	r4, r0
}
   b4fa0:	f7ff ffee 	bl	b4f80 <_ZN8particle9LEDStatusD1Ev>
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	2120      	movs	r1, #32
   b4fa8:	f7ff f879 	bl	b409e <_ZdlPvj>
   b4fac:	4620      	mov	r0, r4
   b4fae:	bd10      	pop	{r4, pc}

000b4fb0 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4fb0:	b510      	push	{r4, lr}
    if (!_instance) {
   b4fb2:	4c06      	ldr	r4, [pc, #24]	; (b4fcc <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4fb4:	6823      	ldr	r3, [r4, #0]
   b4fb6:	b933      	cbnz	r3, b4fc6 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4fb8:	2004      	movs	r0, #4
   b4fba:	f7ff f86c 	bl	b4096 <_Znwj>
   b4fbe:	b108      	cbz	r0, b4fc4 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4fc0:	4b03      	ldr	r3, [pc, #12]	; (b4fd0 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4fc2:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4fc4:	6020      	str	r0, [r4, #0]
}
   b4fc6:	6820      	ldr	r0, [r4, #0]
   b4fc8:	bd10      	pop	{r4, pc}
   b4fca:	bf00      	nop
   b4fcc:	2003dfd0 	.word	0x2003dfd0
   b4fd0:	000be52c 	.word	0x000be52c

000b4fd4 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4fd4:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4fd6:	4836      	ldr	r0, [pc, #216]	; (b50b0 <_ZN14LoRA_Functions5setupEb+0xdc>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4fd8:	b087      	sub	sp, #28
   b4fda:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4fdc:	f002 fdcf 	bl	b7b7e <_ZN8RHRouter4initEv>
   b4fe0:	4604      	mov	r4, r0
   b4fe2:	b930      	cbnz	r0, b4ff2 <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4fe4:	4933      	ldr	r1, [pc, #204]	; (b50b4 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4fe6:	4834      	ldr	r0, [pc, #208]	; (b50b8 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b4fe8:	f7ff f93c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}

	return true;
}
   b4fec:	4620      	mov	r0, r4
   b4fee:	b007      	add	sp, #28
   b4ff0:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4ff2:	ed9f 0a32 	vldr	s0, [pc, #200]	; b50bc <_ZN14LoRA_Functions5setupEb+0xe8>
   b4ff6:	4832      	ldr	r0, [pc, #200]	; (b50c0 <_ZN14LoRA_Functions5setupEb+0xec>)
   b4ff8:	f003 f8ba 	bl	b8170 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4ffc:	2200      	movs	r2, #0
   b4ffe:	2117      	movs	r1, #23
   b5000:	482f      	ldr	r0, [pc, #188]	; (b50c0 <_ZN14LoRA_Functions5setupEb+0xec>)
   b5002:	f003 fa2f 	bl	b8464 <_ZN7RH_RF9510setTxPowerEab>
	Log.info("in LoRA setup - node number %d",sysStatus.get_nodeNumber());
   b5006:	f000 fd1d 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b500a:	f000 fe0a 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b500e:	492d      	ldr	r1, [pc, #180]	; (b50c4 <_ZN14LoRA_Functions5setupEb+0xf0>)
   b5010:	4602      	mov	r2, r0
   b5012:	4829      	ldr	r0, [pc, #164]	; (b50b8 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b5014:	f7ff f926 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	if (gatewayID == true) {
   b5018:	b18d      	cbz	r5, b503e <_ZN14LoRA_Functions5setupEb+0x6a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b501a:	f000 fd13 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b501e:	2100      	movs	r1, #0
   b5020:	f000 fe45 	bl	b5cae <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b5024:	a802      	add	r0, sp, #8
   b5026:	f003 fec5 	bl	b8db4 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b502a:	9a02      	ldr	r2, [sp, #8]
   b502c:	4926      	ldr	r1, [pc, #152]	; (b50c8 <_ZN14LoRA_Functions5setupEb+0xf4>)
   b502e:	4822      	ldr	r0, [pc, #136]	; (b50b8 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b5030:	f7ff f918 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5034:	a802      	add	r0, sp, #8
   b5036:	f006 f817 	bl	bb068 <_ZN6StringD1Ev>
   b503a:	462c      	mov	r4, r5
   b503c:	e7d6      	b.n	b4fec <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b503e:	f000 fd01 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5042:	f000 fdee 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5046:	b1f0      	cbz	r0, b5086 <_ZN14LoRA_Functions5setupEb+0xb2>
   b5048:	f000 fcfc 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b504c:	f000 fde9 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5050:	280a      	cmp	r0, #10
   b5052:	d818      	bhi.n	b5086 <_ZN14LoRA_Functions5setupEb+0xb2>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b5054:	f000 fcf6 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5058:	f000 fde3 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b505c:	4601      	mov	r1, r0
   b505e:	481b      	ldr	r0, [pc, #108]	; (b50cc <_ZN14LoRA_Functions5setupEb+0xf8>)
   b5060:	f002 f8b9 	bl	b71d6 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5064:	4819      	ldr	r0, [pc, #100]	; (b50cc <_ZN14LoRA_Functions5setupEb+0xf8>)
   b5066:	f002 f89c 	bl	b71a2 <_ZN10RHDatagram11thisAddressEv>
   b506a:	9001      	str	r0, [sp, #4]
   b506c:	a802      	add	r0, sp, #8
   b506e:	f003 fea1 	bl	b8db4 <spark_deviceID>
   b5072:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b5076:	4916      	ldr	r1, [pc, #88]	; (b50d0 <_ZN14LoRA_Functions5setupEb+0xfc>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5078:	480f      	ldr	r0, [pc, #60]	; (b50b8 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b507a:	f7ff f8f3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b507e:	a802      	add	r0, sp, #8
   b5080:	f005 fff2 	bl	bb068 <_ZN6StringD1Ev>
   b5084:	e7b2      	b.n	b4fec <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b5086:	f000 fcdd 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b508a:	210b      	movs	r1, #11
   b508c:	f000 fe0f 	bl	b5cae <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b5090:	210b      	movs	r1, #11
   b5092:	480e      	ldr	r0, [pc, #56]	; (b50cc <_ZN14LoRA_Functions5setupEb+0xf8>)
   b5094:	f002 f89f 	bl	b71d6 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5098:	480c      	ldr	r0, [pc, #48]	; (b50cc <_ZN14LoRA_Functions5setupEb+0xf8>)
   b509a:	f002 f882 	bl	b71a2 <_ZN10RHDatagram11thisAddressEv>
   b509e:	9001      	str	r0, [sp, #4]
   b50a0:	a802      	add	r0, sp, #8
   b50a2:	f003 fe87 	bl	b8db4 <spark_deviceID>
   b50a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b50aa:	490a      	ldr	r1, [pc, #40]	; (b50d4 <_ZN14LoRA_Functions5setupEb+0x100>)
   b50ac:	e7e4      	b.n	b5078 <_ZN14LoRA_Functions5setupEb+0xa4>
   b50ae:	bf00      	nop
   b50b0:	2003e200 	.word	0x2003e200
   b50b4:	000be058 	.word	0x000be058
   b50b8:	2003e654 	.word	0x2003e654
   b50bc:	4464c000 	.word	0x4464c000
   b50c0:	2003e0d0 	.word	0x2003e0d0
   b50c4:	000be064 	.word	0x000be064
   b50c8:	000be083 	.word	0x000be083
   b50cc:	2003e204 	.word	0x2003e204
   b50d0:	000be0bd 	.word	0x000be0bd
   b50d4:	000be0f4 	.word	0x000be0f4

000b50d8 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b50d8:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b50da:	4c06      	ldr	r4, [pc, #24]	; (b50f4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b50dc:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b50de:	f10d 0203 	add.w	r2, sp, #3
   b50e2:	a901      	add	r1, sp, #4
   b50e4:	4620      	mov	r0, r4
   b50e6:	f002 ffbf 	bl	b8068 <_ZN7RH_RF954recvEPhS0_>
   b50ea:	2800      	cmp	r0, #0
   b50ec:	d1f7      	bne.n	b50de <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b50ee:	b040      	add	sp, #256	; 0x100
   b50f0:	bd10      	pop	{r4, pc}
   b50f2:	bf00      	nop
   b50f4:	2003e0d0 	.word	0x2003e0d0

000b50f8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b50f8:	4801      	ldr	r0, [pc, #4]	; (b5100 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b50fa:	f002 bfa2 	b.w	b8042 <_ZN7RH_RF955sleepEv>
   b50fe:	bf00      	nop
   b5100:	2003e0d0 	.word	0x2003e0d0

000b5104 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b5104:	4b13      	ldr	r3, [pc, #76]	; (b5154 <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b5106:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b5108:	881c      	ldrh	r4, [r3, #0]
   b510a:	2100      	movs	r1, #0
   b510c:	4620      	mov	r0, r4
   b510e:	f006 fca6 	bl	bba5e <digitalWrite>
	delay(10);
   b5112:	200a      	movs	r0, #10
   b5114:	f003 ff4a 	bl	b8fac <delay>
	digitalWrite(RFM95_RST,HIGH);
   b5118:	2101      	movs	r1, #1
   b511a:	4620      	mov	r0, r4
   b511c:	f006 fc9f 	bl	bba5e <digitalWrite>
	delay(10);
   b5120:	200a      	movs	r0, #10
   b5122:	f003 ff43 	bl	b8fac <delay>

	if (!manager.init()) {
   b5126:	480c      	ldr	r0, [pc, #48]	; (b5158 <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b5128:	f002 fd29 	bl	b7b7e <_ZN8RHRouter4initEv>
   b512c:	4604      	mov	r4, r0
   b512e:	b928      	cbnz	r0, b513c <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b5130:	490a      	ldr	r1, [pc, #40]	; (b515c <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b5132:	480b      	ldr	r0, [pc, #44]	; (b5160 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b5134:	f7ff f896 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b5138:	4620      	mov	r0, r4
   b513a:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b513c:	ed9f 0a09 	vldr	s0, [pc, #36]	; b5164 <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b5140:	4809      	ldr	r0, [pc, #36]	; (b5168 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b5142:	f003 f815 	bl	b8170 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b5146:	4808      	ldr	r0, [pc, #32]	; (b5168 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b5148:	2200      	movs	r2, #0
   b514a:	2117      	movs	r1, #23
   b514c:	f003 f98a 	bl	b8464 <_ZN7RH_RF9510setTxPowerEab>
return true;
   b5150:	e7f2      	b.n	b5138 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b5152:	bf00      	nop
   b5154:	000be630 	.word	0x000be630
   b5158:	2003e200 	.word	0x2003e200
   b515c:	000be058 	.word	0x000be058
   b5160:	2003e654 	.word	0x2003e654
   b5164:	4464c000 	.word	0x4464c000
   b5168:	2003e0d0 	.word	0x2003e0d0

000b516c <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	}
	return false;
}


bool LoRA_Functions::composeDataReportNode() {
   b516c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5170:	b085      	sub	sp, #20

	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5172:	f000 fcdb 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5176:	f000 fd77 	bl	b5c68 <_ZNK17currentStatusData16get_successCountEv>
   b517a:	4604      	mov	r4, r0
   b517c:	f000 fcd6 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5180:	f000 fd6d 	bl	b5c5e <_ZNK17currentStatusData16get_messageCountEv>
   b5184:	4606      	mov	r6, r0
   b5186:	4620      	mov	r0, r4
   b5188:	f007 ff4a 	bl	bd020 <__aeabi_i2d>
   b518c:	4604      	mov	r4, r0
   b518e:	4630      	mov	r0, r6
   b5190:	460d      	mov	r5, r1
   b5192:	f007 ff45 	bl	bd020 <__aeabi_i2d>
   b5196:	4602      	mov	r2, r0
   b5198:	460b      	mov	r3, r1
   b519a:	4620      	mov	r0, r4
   b519c:	4629      	mov	r1, r5
   b519e:	f008 f8d3 	bl	bd348 <__aeabi_ddiv>
   b51a2:	2200      	movs	r2, #0
   b51a4:	4b7c      	ldr	r3, [pc, #496]	; (b5398 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b51a6:	f007 ffa5 	bl	bd0f4 <__aeabi_dmul>
   b51aa:	f008 fa9b 	bl	bd6e4 <__aeabi_d2f>

	digitalWrite(BLUE_LED,HIGH);
   b51ae:	4b7b      	ldr	r3, [pc, #492]	; (b539c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x230>)
   b51b0:	881f      	ldrh	r7, [r3, #0]
   b51b2:	2101      	movs	r1, #1
	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b51b4:	4606      	mov	r6, r0
	digitalWrite(BLUE_LED,HIGH);
   b51b6:	4638      	mov	r0, r7
   b51b8:	f006 fc51 	bl	bba5e <digitalWrite>
	if (current.get_messageCount() == 255) {		// This should not happen in a day unless we pick a very small reporting freq
   b51bc:	f000 fcb6 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b51c0:	f000 fd4d 	bl	b5c5e <_ZNK17currentStatusData16get_messageCountEv>
   b51c4:	28ff      	cmp	r0, #255	; 0xff
   b51c6:	f040 80a3 	bne.w	b5310 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1a4>
		current.set_messageCount(0);				// Prevent divide by zero
   b51ca:	f000 fcaf 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b51ce:	2100      	movs	r1, #0
   b51d0:	f000 fd97 	bl	b5d02 <_ZN17currentStatusData16set_messageCountEh>
		current.set_successCount(0);				// Zero as well
   b51d4:	f000 fcaa 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b51d8:	2100      	movs	r1, #0
   b51da:	f000 fd98 	bl	b5d0e <_ZN17currentStatusData16set_successCountEh>
	}
	else current.set_messageCount(current.get_messageCount()+1);
	Log.info("Sending data report number %d",current.get_messageCount());
   b51de:	f000 fca5 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b51e2:	f000 fd3c 	bl	b5c5e <_ZNK17currentStatusData16get_messageCountEv>
   b51e6:	496e      	ldr	r1, [pc, #440]	; (b53a0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x234>)

	buf[0] = highByte(sysStatus.get_magicNumber());
   b51e8:	4c6e      	ldr	r4, [pc, #440]	; (b53a4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x238>)
	Log.info("Sending data report number %d",current.get_messageCount());
   b51ea:	4602      	mov	r2, r0
   b51ec:	486e      	ldr	r0, [pc, #440]	; (b53a8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b51ee:	f7ff f839 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());
   b51f2:	f000 fc27 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b51f6:	f000 fda2 	bl	b5d3e <_ZNK13sysStatusData15get_magicNumberEv>
   b51fa:	0a00      	lsrs	r0, r0, #8
   b51fc:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b51fe:	f000 fc21 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5202:	f000 fd9c 	bl	b5d3e <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = 1;						// Set for code release - fix later
   b5206:	2501      	movs	r5, #1
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b5208:	7060      	strb	r0, [r4, #1]
	buf[2] = 1;						// Set for code release - fix later
   b520a:	70a5      	strb	r5, [r4, #2]
	buf[3] = highByte(current.get_hourlyCount());
   b520c:	f000 fc8e 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5210:	f000 fd9f 	bl	b5d52 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5214:	0a00      	lsrs	r0, r0, #8
   b5216:	70e0      	strb	r0, [r4, #3]
	buf[4] = lowByte(current.get_hourlyCount()); 
   b5218:	f000 fc88 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b521c:	f000 fd99 	bl	b5d52 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5220:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(current.get_dailyCount());
   b5222:	f000 fc83 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5226:	f000 fd99 	bl	b5d5c <_ZNK17currentStatusData14get_dailyCountEv>
   b522a:	0a00      	lsrs	r0, r0, #8
   b522c:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_dailyCount()); 
   b522e:	f000 fc7d 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5232:	f000 fd93 	bl	b5d5c <_ZNK17currentStatusData14get_dailyCountEv>
   b5236:	71a0      	strb	r0, [r4, #6]
	buf[7] = sysStatus.get_sensorType();
   b5238:	f000 fc04 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b523c:	f000 fd00 	bl	b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5240:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_internalTempC();
   b5242:	f000 fc73 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5246:	f000 fd00 	bl	b5c4a <_ZNK17currentStatusData17get_internalTempCEv>
   b524a:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_stateOfCharge();
   b524c:	f000 fc6e 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5250:	f000 fc92 	bl	b5b78 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5254:	ec51 0b10 	vmov	r0, r1, d0
   b5258:	f008 fa24 	bl	bd6a4 <__aeabi_d2uiz>
   b525c:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_batteryState();	
   b525e:	f000 fc65 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5262:	f000 fcf7 	bl	b5c54 <_ZNK17currentStatusData16get_batteryStateEv>
   b5266:	72a0      	strb	r0, [r4, #10]
	buf[11] = sysStatus.get_resetCount();
   b5268:	f000 fbec 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b526c:	f000 fcde 	bl	b5c2c <_ZNK13sysStatusData14get_resetCountEv>
   b5270:	72e0      	strb	r0, [r4, #11]
	buf[12] = current.get_messageCount();
   b5272:	f000 fc5b 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5276:	f000 fcf2 	bl	b5c5e <_ZNK17currentStatusData16get_messageCountEv>
   b527a:	7320      	strb	r0, [r4, #12]
	buf[13] = current.get_successCount();
   b527c:	f000 fc56 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5280:	f000 fcf2 	bl	b5c68 <_ZNK17currentStatusData16get_successCountEv>

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	unsigned char result = manager.sendtoWait(buf, 14, GATEWAY_ADDRESS, DATA_RPT);
   b5284:	2303      	movs	r3, #3
	buf[13] = current.get_successCount();
   b5286:	7360      	strb	r0, [r4, #13]
	unsigned char result = manager.sendtoWait(buf, 14, GATEWAY_ADDRESS, DATA_RPT);
   b5288:	4621      	mov	r1, r4
   b528a:	9300      	str	r3, [sp, #0]
   b528c:	4847      	ldr	r0, [pc, #284]	; (b53ac <_ZN14LoRA_Functions21composeDataReportNodeEv+0x240>)
   b528e:	2300      	movs	r3, #0
   b5290:	220e      	movs	r2, #14
   b5292:	f002 fa39 	bl	b7708 <_ZN6RHMesh10sendtoWaitEPhhhh>
	
	if ( result == RH_ROUTER_ERROR_NONE) {
   b5296:	4604      	mov	r4, r0
   b5298:	2800      	cmp	r0, #0
   b529a:	d146      	bne.n	b532a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1be>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		current.set_successCount(current.get_successCount()+1);
   b529c:	f000 fc46 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b52a0:	4606      	mov	r6, r0
   b52a2:	f000 fc43 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b52a6:	f000 fcdf 	bl	b5c68 <_ZNK17currentStatusData16get_successCountEv>
   b52aa:	4428      	add	r0, r5
   b52ac:	b2c1      	uxtb	r1, r0
   b52ae:	4630      	mov	r0, r6
   b52b0:	f000 fd2d 	bl	b5d0e <_ZN17currentStatusData16set_successCountEh>
		percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b52b4:	f000 fc3a 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b52b8:	f000 fcd6 	bl	b5c68 <_ZNK17currentStatusData16get_successCountEv>
   b52bc:	4680      	mov	r8, r0
   b52be:	f000 fc35 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b52c2:	f000 fccc 	bl	b5c5e <_ZNK17currentStatusData16get_messageCountEv>
   b52c6:	4606      	mov	r6, r0
   b52c8:	4640      	mov	r0, r8
   b52ca:	f007 fea9 	bl	bd020 <__aeabi_i2d>
   b52ce:	4680      	mov	r8, r0
   b52d0:	4630      	mov	r0, r6
   b52d2:	4689      	mov	r9, r1
   b52d4:	f007 fea4 	bl	bd020 <__aeabi_i2d>
   b52d8:	4602      	mov	r2, r0
   b52da:	460b      	mov	r3, r1
   b52dc:	4640      	mov	r0, r8
   b52de:	4649      	mov	r1, r9
   b52e0:	f008 f832 	bl	bd348 <__aeabi_ddiv>
   b52e4:	4b2c      	ldr	r3, [pc, #176]	; (b5398 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b52e6:	2200      	movs	r2, #0
   b52e8:	f007 ff04 	bl	bd0f4 <__aeabi_dmul>
   b52ec:	f008 f9fa 	bl	bd6e4 <__aeabi_d2f>
		Log.info("Data report delivered - success rate %4.2f",percentSuccess);
   b52f0:	f007 fea8 	bl	bd044 <__aeabi_f2d>
   b52f4:	4602      	mov	r2, r0
   b52f6:	460b      	mov	r3, r1
   b52f8:	482b      	ldr	r0, [pc, #172]	; (b53a8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b52fa:	492d      	ldr	r1, [pc, #180]	; (b53b0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x244>)
   b52fc:	f7fe ffb2 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5300:	4638      	mov	r0, r7
   b5302:	4621      	mov	r1, r4
   b5304:	f006 fbab 	bl	bba5e <digitalWrite>
		return true;
   b5308:	4628      	mov	r0, r5
	else  {
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}
   b530a:	b005      	add	sp, #20
   b530c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else current.set_messageCount(current.get_messageCount()+1);
   b5310:	f000 fc0c 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5314:	4604      	mov	r4, r0
   b5316:	f000 fc09 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b531a:	f000 fca0 	bl	b5c5e <_ZNK17currentStatusData16get_messageCountEv>
   b531e:	3001      	adds	r0, #1
   b5320:	b2c1      	uxtb	r1, r0
   b5322:	4620      	mov	r0, r4
   b5324:	f000 fced 	bl	b5d02 <_ZN17currentStatusData16set_messageCountEh>
   b5328:	e759      	b.n	b51de <_ZN14LoRA_Functions21composeDataReportNodeEv+0x72>
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b532a:	2802      	cmp	r0, #2
   b532c:	d115      	bne.n	b535a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ee>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, percentSuccess);
   b532e:	f000 fb89 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5332:	f000 fc76 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5336:	9003      	str	r0, [sp, #12]
   b5338:	4630      	mov	r0, r6
   b533a:	f007 fe83 	bl	bd044 <__aeabi_f2d>
   b533e:	9a03      	ldr	r2, [sp, #12]
   b5340:	e9cd 0100 	strd	r0, r1, [sp]
   b5344:	491b      	ldr	r1, [pc, #108]	; (b53b4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x248>)
   b5346:	2300      	movs	r3, #0
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5348:	4817      	ldr	r0, [pc, #92]	; (b53a8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b534a:	f7fe ff8b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b534e:	4638      	mov	r0, r7
   b5350:	2100      	movs	r1, #0
   b5352:	f006 fb84 	bl	bba5e <digitalWrite>
	return false;
   b5356:	2000      	movs	r0, #0
   b5358:	e7d7      	b.n	b530a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19e>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b535a:	2805      	cmp	r0, #5
   b535c:	d10d      	bne.n	b537a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x20e>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b535e:	f000 fb71 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5362:	f000 fc5e 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5366:	9003      	str	r0, [sp, #12]
   b5368:	4630      	mov	r0, r6
   b536a:	f007 fe6b 	bl	bd044 <__aeabi_f2d>
   b536e:	9a03      	ldr	r2, [sp, #12]
   b5370:	e9cd 0100 	strd	r0, r1, [sp]
   b5374:	2300      	movs	r3, #0
   b5376:	4910      	ldr	r1, [pc, #64]	; (b53b8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x24c>)
   b5378:	e7e6      	b.n	b5348 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1dc>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b537a:	f000 fb63 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b537e:	f000 fc50 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5382:	9003      	str	r0, [sp, #12]
   b5384:	4630      	mov	r0, r6
   b5386:	f007 fe5d 	bl	bd044 <__aeabi_f2d>
   b538a:	9a03      	ldr	r2, [sp, #12]
   b538c:	e9cd 0100 	strd	r0, r1, [sp]
   b5390:	2300      	movs	r3, #0
   b5392:	490a      	ldr	r1, [pc, #40]	; (b53bc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x250>)
   b5394:	e7d8      	b.n	b5348 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1dc>
   b5396:	bf00      	nop
   b5398:	40590000 	.word	0x40590000
   b539c:	000be624 	.word	0x000be624
   b53a0:	000be13b 	.word	0x000be13b
   b53a4:	2003dfd4 	.word	0x2003dfd4
   b53a8:	2003e654 	.word	0x2003e654
   b53ac:	2003e200 	.word	0x2003e200
   b53b0:	000be159 	.word	0x000be159
   b53b4:	000be184 	.word	0x000be184
   b53b8:	000be1d4 	.word	0x000be1d4
   b53bc:	000be22d 	.word	0x000be22d

000b53c0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b53c0:	b570      	push	{r4, r5, r6, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b53c2:	2200      	movs	r2, #0
   b53c4:	b090      	sub	sp, #64	; 0x40
   b53c6:	2114      	movs	r1, #20
   b53c8:	2002      	movs	r0, #2
   b53ca:	f003 fca1 	bl	b8d10 <led_pattern_period>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	// contents of response for 1-7 handled in common function above
	byte alertSetByGateway = buf[8];
   b53ce:	4d4e      	ldr	r5, [pc, #312]	; (b5508 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x148>)
   b53d0:	221e      	movs	r2, #30
   b53d2:	2101      	movs	r1, #1
   b53d4:	e9cd 2100 	strd	r2, r1, [sp]
   b53d8:	4603      	mov	r3, r0
   b53da:	2202      	movs	r2, #2
   b53dc:	21ff      	movs	r1, #255	; 0xff
   b53de:	a808      	add	r0, sp, #32
   b53e0:	f004 fb02 	bl	b99e8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b53e4:	7a2c      	ldrb	r4, [r5, #8]
	if (alertSetByGateway == 1) {								// Gateway did not recognize our node number, need to re-join
   b53e6:	2c01      	cmp	r4, #1
   b53e8:	d171      	bne.n	b54ce <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x10e>
		sysStatus.set_nodeNumber(11);
   b53ea:	f000 fb2b 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b53ee:	210b      	movs	r1, #11
   b53f0:	f000 fc5d 	bl	b5cae <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b53f4:	210b      	movs	r1, #11
   b53f6:	4845      	ldr	r0, [pc, #276]	; (b550c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x14c>)
   b53f8:	f001 feed 	bl	b71d6 <_ZN10RHDatagram14setThisAddressEh>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
   b53fc:	f000 fb22 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5400:	4621      	mov	r1, r4
   b5402:	f000 fc66 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());	
   b5406:	f000 fb1d 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b540a:	4606      	mov	r6, r0
   b540c:	f006 f92f 	bl	bb66e <_ZN9TimeClass3nowEv>
   b5410:	4602      	mov	r2, r0
   b5412:	17c3      	asrs	r3, r0, #31
   b5414:	4630      	mov	r0, r6
   b5416:	f000 fd21 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b541a:	483c      	ldr	r0, [pc, #240]	; (b550c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x14c>)
   b541c:	f001 fec1 	bl	b71a2 <_ZN10RHDatagram11thisAddressEv>
   b5420:	9002      	str	r0, [sp, #8]
   b5422:	a804      	add	r0, sp, #16
   b5424:	f003 fcc6 	bl	b8db4 <spark_deviceID>
   b5428:	4839      	ldr	r0, [pc, #228]	; (b5510 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x150>)
   b542a:	9b04      	ldr	r3, [sp, #16]
   b542c:	9a02      	ldr	r2, [sp, #8]
   b542e:	4939      	ldr	r1, [pc, #228]	; (b5514 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x154>)
   b5430:	f7fe ff18 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5434:	a804      	add	r0, sp, #16
   b5436:	f005 fe17 	bl	bb068 <_ZN6StringD1Ev>
	else if (buf[8] > 0) {							// the Gateway set an alert
		Log.info("The gateway set an alert %d", alertSetByGateway);
		sysStatus.set_alertCodeNode(alertSetByGateway);	
		sysStatus.set_alertTimestampNode(Time.now());			
	}
	sysStatus.set_sensorType(buf[9]); 				// In data response gateway overwrites node
   b543a:	f000 fb03 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b543e:	7a69      	ldrb	r1, [r5, #9]
   b5440:	f000 fc4d 	bl	b5cde <_ZN13sysStatusData14set_sensorTypeEh>

	if (buf[10] == 0) {								// Open Hours Processing
   b5444:	7aae      	ldrb	r6, [r5, #10]
   b5446:	2e00      	cmp	r6, #0
   b5448:	d158      	bne.n	b54fc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x13c>
		sysStatus.set_openHours(false);				// Open hours or not - impacts whether we power down the sensor for sleep
   b544a:	f000 fafb 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b544e:	4631      	mov	r1, r6
   b5450:	f000 fb2e 	bl	b5ab0 <_ZN13sysStatusData13set_openHoursEb>
		Log.info("Park is closed - reset everything");
   b5454:	4930      	ldr	r1, [pc, #192]	; (b5518 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x158>)
   b5456:	482e      	ldr	r0, [pc, #184]	; (b5510 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x150>)
   b5458:	f7fe ff04 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	}
	else sysStatus.set_openHours(true);

	Log.info("Data report acknowledged %s alert for message %d park is %s and alert code is %d", (alertSetByGateway > 0) ? "with":"without", buf[11], (buf[10] ==1) ? "open":"closed", sysStatus.get_alertCodeNode());
   b545c:	4b2f      	ldr	r3, [pc, #188]	; (b551c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x15c>)
   b545e:	4a30      	ldr	r2, [pc, #192]	; (b5520 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x160>)
   b5460:	4930      	ldr	r1, [pc, #192]	; (b5524 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x164>)
   b5462:	7aa8      	ldrb	r0, [r5, #10]
   b5464:	2c00      	cmp	r4, #0
   b5466:	bf08      	it	eq
   b5468:	461a      	moveq	r2, r3
   b546a:	4c2f      	ldr	r4, [pc, #188]	; (b5528 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x168>)
   b546c:	7aeb      	ldrb	r3, [r5, #11]
   b546e:	9203      	str	r2, [sp, #12]
   b5470:	2801      	cmp	r0, #1
   b5472:	bf18      	it	ne
   b5474:	460c      	movne	r4, r1
   b5476:	9302      	str	r3, [sp, #8]
   b5478:	f000 fae4 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b547c:	f000 fbdb 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5480:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5484:	e9cd 4000 	strd	r4, r0, [sp]
   b5488:	4928      	ldr	r1, [pc, #160]	; (b552c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x16c>)
   b548a:	4821      	ldr	r0, [pc, #132]	; (b5510 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x150>)
   b548c:	f7fe feea 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    led_set_status_active(&d_, active, nullptr);
   b5490:	2200      	movs	r2, #0
   b5492:	2101      	movs	r1, #1
   b5494:	a809      	add	r0, sp, #36	; 0x24
   b5496:	f003 fbef 	bl	b8c78 <led_set_status_active>
	
	blinkBlue.setActive(true);
	unsigned long strength = (unsigned long)(map(driver.lastRssi(),-30,-120,2000,0));
   b549a:	2400      	movs	r4, #0
   b549c:	4824      	ldr	r0, [pc, #144]	; (b5530 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x170>)
   b549e:	f001 ff18 	bl	b72d2 <_ZN15RHGenericDriver8lastRssiEv>
   b54a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b54a6:	f06f 0277 	mvn.w	r2, #119	; 0x77
   b54aa:	f06f 011d 	mvn.w	r1, #29
   b54ae:	9400      	str	r4, [sp, #0]
   b54b0:	f003 fd70 	bl	b8f94 <_Z3mapiiiii>
    delay(strength);
   b54b4:	f003 fd7a 	bl	b8fac <delay>
   b54b8:	4622      	mov	r2, r4
   b54ba:	4621      	mov	r1, r4
   b54bc:	a809      	add	r0, sp, #36	; 0x24
   b54be:	f003 fbdb 	bl	b8c78 <led_set_status_active>
	LEDStatus blinkBlue(RGB_COLOR_BLUE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b54c2:	a808      	add	r0, sp, #32
   b54c4:	f7ff fd5c 	bl	b4f80 <_ZN8particle9LEDStatusD1Ev>
    blinkBlue.setActive(false);

	return true;
}
   b54c8:	2001      	movs	r0, #1
   b54ca:	b010      	add	sp, #64	; 0x40
   b54cc:	bd70      	pop	{r4, r5, r6, pc}
	else if (buf[8] > 0) {							// the Gateway set an alert
   b54ce:	2c00      	cmp	r4, #0
   b54d0:	d0b3      	beq.n	b543a <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
		Log.info("The gateway set an alert %d", alertSetByGateway);
   b54d2:	4622      	mov	r2, r4
   b54d4:	4917      	ldr	r1, [pc, #92]	; (b5534 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x174>)
   b54d6:	480e      	ldr	r0, [pc, #56]	; (b5510 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x150>)
   b54d8:	f7fe fec4 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_alertCodeNode(alertSetByGateway);	
   b54dc:	f000 fab2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b54e0:	4621      	mov	r1, r4
   b54e2:	f000 fbf6 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());			
   b54e6:	f000 faad 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b54ea:	4606      	mov	r6, r0
   b54ec:	f006 f8bf 	bl	bb66e <_ZN9TimeClass3nowEv>
   b54f0:	4602      	mov	r2, r0
   b54f2:	17c3      	asrs	r3, r0, #31
   b54f4:	4630      	mov	r0, r6
   b54f6:	f000 fcb1 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
   b54fa:	e79e      	b.n	b543a <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7a>
	else sysStatus.set_openHours(true);
   b54fc:	f000 faa2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5500:	2101      	movs	r1, #1
   b5502:	f000 fad5 	bl	b5ab0 <_ZN13sysStatusData13set_openHoursEb>
   b5506:	e7a9      	b.n	b545c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x9c>
   b5508:	2003dfd4 	.word	0x2003dfd4
   b550c:	2003e204 	.word	0x2003e204
   b5510:	2003e654 	.word	0x2003e654
   b5514:	000be0f4 	.word	0x000be0f4
   b5518:	000be2b2 	.word	0x000be2b2
   b551c:	000be282 	.word	0x000be282
   b5520:	000be27d 	.word	0x000be27d
   b5524:	000be28f 	.word	0x000be28f
   b5528:	000be28a 	.word	0x000be28a
   b552c:	000be2d4 	.word	0x000be2d4
   b5530:	2003e0d0 	.word	0x2003e0d0
   b5534:	000be296 	.word	0x000be296

000b5538 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:

bool LoRA_Functions::composeJoinRequesttNode() {
   b5538:	b5f0      	push	{r4, r5, r6, r7, lr}

	digitalWrite(BLUE_LED,HIGH);
   b553a:	4b2f      	ldr	r3, [pc, #188]	; (b55f8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc0>)

	char deviceID[25];
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long

	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b553c:	4d2f      	ldr	r5, [pc, #188]	; (b55fc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
	digitalWrite(BLUE_LED,HIGH);
   b553e:	881e      	ldrh	r6, [r3, #0]
bool LoRA_Functions::composeJoinRequesttNode() {
   b5540:	b08f      	sub	sp, #60	; 0x3c
	digitalWrite(BLUE_LED,HIGH);
   b5542:	2101      	movs	r1, #1
   b5544:	4630      	mov	r0, r6
   b5546:	f006 fa8a 	bl	bba5e <digitalWrite>
   b554a:	a803      	add	r0, sp, #12
   b554c:	f003 fc32 	bl	b8db4 <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5550:	2300      	movs	r3, #0
   b5552:	2219      	movs	r2, #25
   b5554:	a907      	add	r1, sp, #28
   b5556:	a803      	add	r0, sp, #12
   b5558:	f005 fe27 	bl	bb1aa <_ZNK6String8getBytesEPhjj>
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long
   b555c:	a803      	add	r0, sp, #12
   b555e:	f005 fd83 	bl	bb068 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5562:	f000 fa6f 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5566:	f000 fbea 	bl	b5d3e <_ZNK13sysStatusData15get_magicNumberEv>
   b556a:	0a00      	lsrs	r0, r0, #8
   b556c:	7028      	strb	r0, [r5, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b556e:	f000 fa69 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5572:	f000 fbe4 	bl	b5d3e <_ZNK13sysStatusData15get_magicNumberEv>
	for (uint8_t i=0; i < sizeof(deviceID); i++) {
		buf[i+2] = deviceID[i];
   b5576:	af0d      	add	r7, sp, #52	; 0x34
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5578:	7068      	strb	r0, [r5, #1]
		buf[i+2] = deviceID[i];
   b557a:	ab07      	add	r3, sp, #28
   b557c:	1caa      	adds	r2, r5, #2
   b557e:	461c      	mov	r4, r3
   b5580:	cc03      	ldmia	r4!, {r0, r1}
   b5582:	42bc      	cmp	r4, r7
   b5584:	6010      	str	r0, [r2, #0]
   b5586:	6051      	str	r1, [r2, #4]
   b5588:	4623      	mov	r3, r4
   b558a:	f102 0208 	add.w	r2, r2, #8
   b558e:	d1f6      	bne.n	b557e <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x46>
   b5590:	7823      	ldrb	r3, [r4, #0]
   b5592:	7013      	strb	r3, [r2, #0]
	}
	buf[27] = sysStatus.get_sensorType();
   b5594:	f000 fa56 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5598:	f000 fb52 	bl	b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>
   b559c:	76e8      	strb	r0, [r5, #27]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b559e:	f000 fa51 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b55a2:	f000 fb3e 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b55a6:	4916      	ldr	r1, [pc, #88]	; (b5600 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b55a8:	4a16      	ldr	r2, [pc, #88]	; (b5604 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
	if (manager.sendtoWait(buf, 28, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b55aa:	2401      	movs	r4, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b55ac:	280a      	cmp	r0, #10
   b55ae:	bf88      	it	hi
   b55b0:	460a      	movhi	r2, r1
   b55b2:	4915      	ldr	r1, [pc, #84]	; (b5608 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
   b55b4:	4815      	ldr	r0, [pc, #84]	; (b560c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b55b6:	f7fe fe55 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 28, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b55ba:	4910      	ldr	r1, [pc, #64]	; (b55fc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b55bc:	4814      	ldr	r0, [pc, #80]	; (b5610 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd8>)
   b55be:	9400      	str	r4, [sp, #0]
   b55c0:	2300      	movs	r3, #0
   b55c2:	221c      	movs	r2, #28
   b55c4:	f002 f8a0 	bl	b7708 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b55c8:	4605      	mov	r5, r0
   b55ca:	b950      	cbnz	r0, b55e2 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xaa>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Join request sent to gateway successfully");
   b55cc:	4911      	ldr	r1, [pc, #68]	; (b5614 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xdc>)
   b55ce:	480f      	ldr	r0, [pc, #60]	; (b560c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b55d0:	f7fe fe48 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b55d4:	4630      	mov	r0, r6
   b55d6:	4629      	mov	r1, r5
   b55d8:	f006 fa41 	bl	bba5e <digitalWrite>
		return true;
   b55dc:	4620      	mov	r0, r4
	else {
		Log.info("Join request to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b55de:	b00f      	add	sp, #60	; 0x3c
   b55e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Join request to Gateway failed");
   b55e2:	490d      	ldr	r1, [pc, #52]	; (b5618 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe0>)
   b55e4:	4809      	ldr	r0, [pc, #36]	; (b560c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b55e6:	f7fe fe3d 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b55ea:	4630      	mov	r0, r6
   b55ec:	2100      	movs	r1, #0
   b55ee:	f006 fa36 	bl	bba5e <digitalWrite>
		return false;
   b55f2:	2000      	movs	r0, #0
   b55f4:	e7f3      	b.n	b55de <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xa6>
   b55f6:	bf00      	nop
   b55f8:	000be624 	.word	0x000be624
   b55fc:	2003dfd4 	.word	0x2003dfd4
   b5600:	000be325 	.word	0x000be325
   b5604:	000be33c 	.word	0x000be33c
   b5608:	000be351 	.word	0x000be351
   b560c:	2003e654 	.word	0x2003e654
   b5610:	2003e200 	.word	0x2003e200
   b5614:	000be371 	.word	0x000be371
   b5618:	000be39b 	.word	0x000be39b

000b561c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b561c:	b510      	push	{r4, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b561e:	2200      	movs	r2, #0
   b5620:	b08c      	sub	sp, #48	; 0x30
   b5622:	2114      	movs	r1, #20
   b5624:	2002      	movs	r0, #2
   b5626:	f003 fb73 	bl	b8d10 <led_pattern_period>
   b562a:	221e      	movs	r2, #30
   b562c:	2101      	movs	r1, #1
   b562e:	4603      	mov	r3, r0
   b5630:	e9cd 2100 	strd	r2, r1, [sp]
   b5634:	a804      	add	r0, sp, #16
   b5636:	4925      	ldr	r1, [pc, #148]	; (b56cc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xb0>)
   b5638:	4c25      	ldr	r4, [pc, #148]	; (b56d0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xb4>)
   b563a:	2202      	movs	r2, #2
   b563c:	f004 f9d4 	bl	b99e8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	if (sysStatus.get_nodeNumber() > 10) sysStatus.set_nodeNumber(buf[9]);
   b5640:	f000 fa00 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5644:	f000 faed 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5648:	280a      	cmp	r0, #10
   b564a:	d904      	bls.n	b5656 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x3a>
   b564c:	f000 f9fa 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5650:	7a61      	ldrb	r1, [r4, #9]
   b5652:	f000 fb2c 	bl	b5cae <_ZN13sysStatusData14set_nodeNumberEh>
	sysStatus.set_sensorType(buf[10]);
   b5656:	f000 f9f5 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b565a:	7aa1      	ldrb	r1, [r4, #10]
   b565c:	f000 fb3f 	bl	b5cde <_ZN13sysStatusData14set_sensorTypeEh>
	Log.info("Node %d Join request acknowledged and sensor set to %d", sysStatus.get_nodeNumber(), sysStatus.get_sensorType());
   b5660:	f000 f9f0 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5664:	f000 fadd 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5668:	9003      	str	r0, [sp, #12]
   b566a:	f000 f9eb 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b566e:	f000 fae7 	bl	b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5672:	9a03      	ldr	r2, [sp, #12]
   b5674:	4917      	ldr	r1, [pc, #92]	; (b56d4 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xb8>)
   b5676:	4603      	mov	r3, r0
   b5678:	4817      	ldr	r0, [pc, #92]	; (b56d8 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xbc>)
   b567a:	f7fe fdf3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());
   b567e:	f000 f9e1 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5682:	f000 face 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5686:	4601      	mov	r1, r0
   b5688:	4814      	ldr	r0, [pc, #80]	; (b56dc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc0>)
   b568a:	f001 fda4 	bl	b71d6 <_ZN10RHDatagram14setThisAddressEh>
    led_set_status_active(&d_, active, nullptr);
   b568e:	2200      	movs	r2, #0
   b5690:	2101      	movs	r1, #1
   b5692:	a805      	add	r0, sp, #20
   b5694:	f003 faf0 	bl	b8c78 <led_set_status_active>

    blinkOrange.setActive(true);
	unsigned long strength = (unsigned long)(map(driver.lastRssi(),-30,-120,2000,0));
   b5698:	2400      	movs	r4, #0
   b569a:	4811      	ldr	r0, [pc, #68]	; (b56e0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xc4>)
   b569c:	f001 fe19 	bl	b72d2 <_ZN15RHGenericDriver8lastRssiEv>
   b56a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b56a4:	f06f 0277 	mvn.w	r2, #119	; 0x77
   b56a8:	f06f 011d 	mvn.w	r1, #29
   b56ac:	9400      	str	r4, [sp, #0]
   b56ae:	f003 fc71 	bl	b8f94 <_Z3mapiiiii>
    delay(strength);
   b56b2:	f003 fc7b 	bl	b8fac <delay>
   b56b6:	4622      	mov	r2, r4
   b56b8:	4621      	mov	r1, r4
   b56ba:	a805      	add	r0, sp, #20
   b56bc:	f003 fadc 	bl	b8c78 <led_set_status_active>
	LEDStatus blinkOrange(RGB_COLOR_ORANGE, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b56c0:	a804      	add	r0, sp, #16
   b56c2:	f7ff fc5d 	bl	b4f80 <_ZN8particle9LEDStatusD1Ev>
    blinkOrange.setActive(false);

	return true;
}
   b56c6:	2001      	movs	r0, #1
   b56c8:	b00c      	add	sp, #48	; 0x30
   b56ca:	bd10      	pop	{r4, pc}
   b56cc:	00ff6000 	.word	0x00ff6000
   b56d0:	2003dfd4 	.word	0x2003dfd4
   b56d4:	000be3ba 	.word	0x000be3ba
   b56d8:	2003e654 	.word	0x2003e654
   b56dc:	2003e204 	.word	0x2003e204
   b56e0:	2003e0d0 	.word	0x2003e0d0

000b56e4 <_ZN14LoRA_Functions22composeAlertReportNodeEv>:

bool LoRA_Functions::composeAlertReportNode() {
	digitalWrite(BLUE_LED,HIGH);
   b56e4:	4b1e      	ldr	r3, [pc, #120]	; (b5760 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x7c>)
bool LoRA_Functions::composeAlertReportNode() {
   b56e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	digitalWrite(BLUE_LED,HIGH);
   b56e8:	881d      	ldrh	r5, [r3, #0]

	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b56ea:	4c1e      	ldr	r4, [pc, #120]	; (b5764 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x80>)
	digitalWrite(BLUE_LED,HIGH);
   b56ec:	2101      	movs	r1, #1
   b56ee:	4628      	mov	r0, r5
   b56f0:	f006 f9b5 	bl	bba5e <digitalWrite>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b56f4:	f000 f9a6 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b56f8:	f000 fb21 	bl	b5d3e <_ZNK13sysStatusData15get_magicNumberEv>
   b56fc:	0a00      	lsrs	r0, r0, #8
   b56fe:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					
   b5700:	f000 f9a0 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5704:	f000 fb1b 	bl	b5d3e <_ZNK13sysStatusData15get_magicNumberEv>
   b5708:	7060      	strb	r0, [r4, #1]
	buf[2] = sysStatus.get_alertCodeNode();   						// Node's Alert Code
   b570a:	f000 f99b 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b570e:	f000 fa92 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>


	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b5712:	2305      	movs	r3, #5
	buf[2] = sysStatus.get_alertCodeNode();   						// Node's Alert Code
   b5714:	70a0      	strb	r0, [r4, #2]
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b5716:	4621      	mov	r1, r4
   b5718:	9300      	str	r3, [sp, #0]
   b571a:	4813      	ldr	r0, [pc, #76]	; (b5768 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x84>)
   b571c:	2300      	movs	r3, #0
   b571e:	2203      	movs	r2, #3
   b5720:	f001 fff2 	bl	b7708 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5724:	4604      	mov	r4, r0
   b5726:	b980      	cbnz	r0, b574a <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x66>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Success sending Alert Report number %d to gateway at %d", sysStatus.get_alertCodeNode(), GATEWAY_ADDRESS);
   b5728:	f000 f98c 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b572c:	f000 fa83 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5730:	490e      	ldr	r1, [pc, #56]	; (b576c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x88>)
   b5732:	4602      	mov	r2, r0
   b5734:	4623      	mov	r3, r4
   b5736:	480e      	ldr	r0, [pc, #56]	; (b5770 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b5738:	f7fe fd94 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b573c:	4628      	mov	r0, r5
   b573e:	4621      	mov	r1, r4
   b5740:	f006 f98d 	bl	bba5e <digitalWrite>
		return true;
   b5744:	2001      	movs	r0, #1
	else {
		Log.info("Node - Alert Report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b5746:	b003      	add	sp, #12
   b5748:	bd30      	pop	{r4, r5, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b574a:	490a      	ldr	r1, [pc, #40]	; (b5774 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x90>)
   b574c:	4808      	ldr	r0, [pc, #32]	; (b5770 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b574e:	f7fe fd89 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5752:	4628      	mov	r0, r5
   b5754:	2100      	movs	r1, #0
   b5756:	f006 f982 	bl	bba5e <digitalWrite>
		return false;
   b575a:	2000      	movs	r0, #0
   b575c:	e7f3      	b.n	b5746 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x62>
   b575e:	bf00      	nop
   b5760:	000be624 	.word	0x000be624
   b5764:	2003dfd4 	.word	0x2003dfd4
   b5768:	2003e200 	.word	0x2003e200
   b576c:	000be3f1 	.word	0x000be3f1
   b5770:	2003e654 	.word	0x2003e654
   b5774:	000be429 	.word	0x000be429

000b5778 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b5778:	b508      	push	{r3, lr}

	Log.info("Alert report acknowledged with alert code %d", sysStatus.get_alertCodeNode());
   b577a:	f000 f963 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b577e:	f000 fa5a 	bl	b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5782:	4903      	ldr	r1, [pc, #12]	; (b5790 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x18>)
   b5784:	4602      	mov	r2, r0
   b5786:	4803      	ldr	r0, [pc, #12]	; (b5794 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x1c>)
   b5788:	f7fe fd6c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b578c:	2001      	movs	r0, #1
   b578e:	bd08      	pop	{r3, pc}
   b5790:	000be454 	.word	0x000be454
   b5794:	2003e654 	.word	0x2003e654

000b5798 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b5798:	b5f0      	push	{r4, r5, r6, r7, lr}
   b579a:	b08d      	sub	sp, #52	; 0x34
	uint8_t len = sizeof(buf);
   b579c:	23f9      	movs	r3, #249	; 0xf9
   b579e:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b57a2:	f10d 031f 	add.w	r3, sp, #31
   b57a6:	9303      	str	r3, [sp, #12]
   b57a8:	f10d 031e 	add.w	r3, sp, #30
   b57ac:	9302      	str	r3, [sp, #8]
   b57ae:	4d44      	ldr	r5, [pc, #272]	; (b58c0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x128>)
   b57b0:	4844      	ldr	r0, [pc, #272]	; (b58c4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x12c>)
   b57b2:	f10d 031d 	add.w	r3, sp, #29
   b57b6:	9301      	str	r3, [sp, #4]
   b57b8:	ab07      	add	r3, sp, #28
   b57ba:	9300      	str	r3, [sp, #0]
   b57bc:	f10d 021a 	add.w	r2, sp, #26
   b57c0:	f10d 031b 	add.w	r3, sp, #27
   b57c4:	4629      	mov	r1, r5
   b57c6:	f001 ffd3 	bl	b7770 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b57ca:	4604      	mov	r4, r0
   b57cc:	b918      	cbnz	r0, b57d6 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3e>
	return false;
   b57ce:	2400      	movs	r4, #0
}
   b57d0:	4620      	mov	r0, r4
   b57d2:	b00d      	add	sp, #52	; 0x34
   b57d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[len] = 0;
   b57d6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b57da:	2700      	movs	r7, #0
   b57dc:	54ef      	strb	r7, [r5, r3]
		if ((buf[0] << 8 | buf[1]) != sysStatus.get_magicNumber()) {
   b57de:	882e      	ldrh	r6, [r5, #0]
   b57e0:	f000 f930 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b57e4:	f000 faab 	bl	b5d3e <_ZNK13sysStatusData15get_magicNumberEv>
   b57e8:	ba76      	rev16	r6, r6
   b57ea:	b2b6      	uxth	r6, r6
   b57ec:	42b0      	cmp	r0, r6
   b57ee:	d004      	beq.n	b57fa <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x62>
			Log.info("Magic Number mismatch - ignoring message");
   b57f0:	4935      	ldr	r1, [pc, #212]	; (b58c8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x130>)
   b57f2:	4836      	ldr	r0, [pc, #216]	; (b58cc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
   b57f4:	f7fe fd36 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b57f8:	e7e9      	b.n	b57ce <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		lora_state = (LoRA_State)messageFlag;
   b57fa:	4e35      	ldr	r6, [pc, #212]	; (b58d0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b57fc:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5800:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b5804:	4833      	ldr	r0, [pc, #204]	; (b58d4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x13c>)
		lora_state = (LoRA_State)messageFlag;
   b5806:	7033      	strb	r3, [r6, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5808:	9205      	str	r2, [sp, #20]
   b580a:	f001 fd62 	bl	b72d2 <_ZN15RHGenericDriver8lastRssiEv>
   b580e:	4932      	ldr	r1, [pc, #200]	; (b58d8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x140>)
   b5810:	9a05      	ldr	r2, [sp, #20]
   b5812:	4603      	mov	r3, r0
   b5814:	7830      	ldrb	r0, [r6, #0]
   b5816:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b581a:	9100      	str	r1, [sp, #0]
   b581c:	482b      	ldr	r0, [pc, #172]	; (b58cc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
   b581e:	492f      	ldr	r1, [pc, #188]	; (b58dc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x144>)
   b5820:	f7fe fd20 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[2] << 24) | (buf[3] << 16) | (buf[4] << 8) | buf[5]));  // Set time based on response from gateway
   b5824:	f8d5 0002 	ldr.w	r0, [r5, #2]
   b5828:	ba00      	rev	r0, r0
   b582a:	17c1      	asrs	r1, r0, #31
   b582c:	f005 fe07 	bl	bb43e <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[6] << 8 | buf[7]));			// Frequency of reporting set by Gateway
   b5830:	f000 f908 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5834:	88e9      	ldrh	r1, [r5, #6]
   b5836:	ba49      	rev16	r1, r1
   b5838:	b289      	uxth	r1, r1
   b583a:	f000 fab8 	bl	b5dae <_ZN13sysStatusData20set_frequencyMinutesEt>
		sysStatus.set_alertCodeNode(buf[8]);
   b583e:	f000 f901 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5842:	7a29      	ldrb	r1, [r5, #8]
   b5844:	f000 fa45 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b5848:	f000 f8fc 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b584c:	4605      	mov	r5, r0
   b584e:	f005 ff0e 	bl	bb66e <_ZN9TimeClass3nowEv>
   b5852:	4602      	mov	r2, r0
   b5854:	17c3      	asrs	r3, r0, #31
   b5856:	4628      	mov	r0, r5
   b5858:	f000 fb00 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b585c:	f005 ff07 	bl	bb66e <_ZN9TimeClass3nowEv>
   b5860:	17c3      	asrs	r3, r0, #31
   b5862:	4602      	mov	r2, r0
   b5864:	a808      	add	r0, sp, #32
   b5866:	f005 fdfd 	bl	bb464 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b586a:	9a08      	ldr	r2, [sp, #32]
   b586c:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b586e:	f000 f8e9 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5872:	f000 fa69 	bl	b5d48 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5876:	9a05      	ldr	r2, [sp, #20]
   b5878:	4919      	ldr	r1, [pc, #100]	; (b58e0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x148>)
   b587a:	4603      	mov	r3, r0
   b587c:	4813      	ldr	r0, [pc, #76]	; (b58cc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
   b587e:	f7fe fcf1 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5882:	a808      	add	r0, sp, #32
   b5884:	f005 fbf0 	bl	bb068 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5888:	7833      	ldrb	r3, [r6, #0]
   b588a:	2b04      	cmp	r3, #4
   b588c:	d011      	beq.n	b58b2 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x11a>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b588e:	7833      	ldrb	r3, [r6, #0]
   b5890:	2b02      	cmp	r3, #2
   b5892:	d105      	bne.n	b58a0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x108>
   b5894:	f7ff fb8c 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b5898:	f7ff fec0 	bl	b561c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b589c:	2800      	cmp	r0, #0
   b589e:	d197      	bne.n	b57d0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b58a0:	7833      	ldrb	r3, [r6, #0]
   b58a2:	2b06      	cmp	r3, #6
   b58a4:	d193      	bne.n	b57ce <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b58a6:	f7ff fb83 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b58aa:	f7ff ff65 	bl	b5778 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>
   b58ae:	4604      	mov	r4, r0
   b58b0:	e78e      	b.n	b57d0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b58b2:	f7ff fb7d 	bl	b4fb0 <_ZN14LoRA_Functions8instanceEv>
   b58b6:	f7ff fd83 	bl	b53c0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
   b58ba:	2800      	cmp	r0, #0
   b58bc:	d0e7      	beq.n	b588e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf6>
   b58be:	e787      	b.n	b57d0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
   b58c0:	2003dfd4 	.word	0x2003dfd4
   b58c4:	2003e200 	.word	0x2003e200
   b58c8:	000be481 	.word	0x000be481
   b58cc:	2003e654 	.word	0x2003e654
   b58d0:	2003dfcf 	.word	0x2003dfcf
   b58d4:	2003e0d0 	.word	0x2003e0d0
   b58d8:	2003de50 	.word	0x2003de50
   b58dc:	000be4aa 	.word	0x000be4aa
   b58e0:	000be4dc 	.word	0x000be4dc

000b58e4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b58e4:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b58e6:	4a08      	ldr	r2, [pc, #32]	; (b5908 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b58e8:	4c08      	ldr	r4, [pc, #32]	; (b590c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b58ea:	4909      	ldr	r1, [pc, #36]	; (b5910 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b58ec:	7812      	ldrb	r2, [r2, #0]
   b58ee:	7809      	ldrb	r1, [r1, #0]
   b58f0:	4b08      	ldr	r3, [pc, #32]	; (b5914 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b58f2:	4620      	mov	r0, r4
   b58f4:	f002 fbfe 	bl	b80f4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b58f8:	4621      	mov	r1, r4
   b58fa:	4807      	ldr	r0, [pc, #28]	; (b5918 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b58fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5900:	2200      	movs	r2, #0
   b5902:	f001 bef7 	b.w	b76f4 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b5906:	bf00      	nop
   b5908:	000be62e 	.word	0x000be62e
   b590c:	2003e0d0 	.word	0x2003e0d0
   b5910:	000be62c 	.word	0x000be62c
   b5914:	2003e3ec 	.word	0x2003e3ec
   b5918:	2003e200 	.word	0x2003e200

000b591c <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b591c:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b591e:	4b04      	ldr	r3, [pc, #16]	; (b5930 <_ZN17currentStatusDataD1Ev+0x14>)
   b5920:	6003      	str	r3, [r0, #0]
   b5922:	4604      	mov	r4, r0
            if (handle_) {
   b5924:	6840      	ldr	r0, [r0, #4]
   b5926:	b108      	cbz	r0, b592c <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5928:	f002 ff76 	bl	b8818 <os_mutex_recursive_destroy>
}
   b592c:	4620      	mov	r0, r4
   b592e:	bd10      	pop	{r4, pc}
   b5930:	000beccc 	.word	0x000beccc

000b5934 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5934:	b510      	push	{r4, lr}
   b5936:	4604      	mov	r4, r0
}
   b5938:	f7ff fff0 	bl	b591c <_ZN17currentStatusDataD1Ev>
   b593c:	4620      	mov	r0, r4
   b593e:	2170      	movs	r1, #112	; 0x70
   b5940:	f7fe fbad 	bl	b409e <_ZdlPvj>
   b5944:	4620      	mov	r0, r4
   b5946:	bd10      	pop	{r4, pc}

000b5948 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5948:	b510      	push	{r4, lr}
   b594a:	4b03      	ldr	r3, [pc, #12]	; (b5958 <_ZN8MB85RC64D1Ev+0x10>)
   b594c:	6003      	str	r3, [r0, #0]
   b594e:	4604      	mov	r4, r0
   b5950:	f001 fb14 	bl	b6f7c <_ZN6MB85RCD1Ev>
   b5954:	4620      	mov	r0, r4
   b5956:	bd10      	pop	{r4, pc}
   b5958:	000be584 	.word	0x000be584

000b595c <_ZN8MB85RC64D0Ev>:
   b595c:	b510      	push	{r4, lr}
   b595e:	4604      	mov	r4, r0
   b5960:	f7ff fff2 	bl	b5948 <_ZN8MB85RC64D1Ev>
   b5964:	4620      	mov	r0, r4
   b5966:	2110      	movs	r1, #16
   b5968:	f7fe fb99 	bl	b409e <_ZdlPvj>
   b596c:	4620      	mov	r0, r4
   b596e:	bd10      	pop	{r4, pc}

000b5970 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b5970:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5972:	4b04      	ldr	r3, [pc, #16]	; (b5984 <_ZN13sysStatusDataD1Ev+0x14>)
   b5974:	6003      	str	r3, [r0, #0]
   b5976:	4604      	mov	r4, r0
            if (handle_) {
   b5978:	6840      	ldr	r0, [r0, #4]
   b597a:	b108      	cbz	r0, b5980 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b597c:	f002 ff4c 	bl	b8818 <os_mutex_recursive_destroy>
}
   b5980:	4620      	mov	r0, r4
   b5982:	bd10      	pop	{r4, pc}
   b5984:	000beccc 	.word	0x000beccc

000b5988 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5988:	b510      	push	{r4, lr}
   b598a:	4604      	mov	r4, r0
}
   b598c:	f7ff fff0 	bl	b5970 <_ZN13sysStatusDataD1Ev>
   b5990:	4620      	mov	r0, r4
   b5992:	2160      	movs	r1, #96	; 0x60
   b5994:	f7fe fb83 	bl	b409e <_ZdlPvj>
   b5998:	4620      	mov	r0, r4
   b599a:	bd10      	pop	{r4, pc}

000b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b599c:	b510      	push	{r4, lr}
            if (!handle_) {
   b599e:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b59a0:	4604      	mov	r4, r0
            if (!handle_) {
   b59a2:	b90b      	cbnz	r3, b59a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b59a4:	f002 ff30 	bl	b8808 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b59a8:	6820      	ldr	r0, [r4, #0]
        }
   b59aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b59ae:	f002 bf3b 	b.w	b8828 <os_mutex_recursive_lock>

000b59b2 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b59b2:	b538      	push	{r3, r4, r5, lr}
   b59b4:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b59b6:	3004      	adds	r0, #4
   b59b8:	f7ff fff0 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b59bc:	6a20      	ldr	r0, [r4, #32]
   b59be:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b59c0:	6803      	ldr	r3, [r0, #0]
   b59c2:	68dd      	ldr	r5, [r3, #12]
   b59c4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b59c8:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b59ca:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b59cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b59d0:	f002 bf32 	b.w	b8838 <os_mutex_recursive_unlock>

000b59d4 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b59d4:	b538      	push	{r3, r4, r5, lr}
   b59d6:	4604      	mov	r4, r0
   b59d8:	3004      	adds	r0, #4
   b59da:	f7ff ffdf 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b59de:	6a20      	ldr	r0, [r4, #32]
   b59e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b59e2:	6803      	ldr	r3, [r0, #0]
   b59e4:	689d      	ldr	r5, [r3, #8]
   b59e6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b59ea:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b59ec:	68a2      	ldr	r2, [r4, #8]
   b59ee:	6823      	ldr	r3, [r4, #0]
   b59f0:	88d1      	ldrh	r1, [r2, #6]
   b59f2:	695b      	ldr	r3, [r3, #20]
   b59f4:	4620      	mov	r0, r4
   b59f6:	4798      	blx	r3
   b59f8:	b918      	cbnz	r0, b5a02 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b59fa:	6823      	ldr	r3, [r4, #0]
   b59fc:	4620      	mov	r0, r4
   b59fe:	699b      	ldr	r3, [r3, #24]
   b5a00:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5a02:	6860      	ldr	r0, [r4, #4]
   b5a04:	f002 ff18 	bl	b8838 <os_mutex_recursive_unlock>
        }
   b5a08:	2001      	movs	r0, #1
   b5a0a:	bd38      	pop	{r3, r4, r5, pc}

000b5a0c <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5a0c:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a10:	6081      	str	r1, [r0, #8]
   b5a12:	4909      	ldr	r1, [pc, #36]	; (b5a38 <_ZN13sysStatusDataC1Ev+0x2c>)
   b5a14:	f04f 0c38 	mov.w	ip, #56	; 0x38
   b5a18:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5a1c:	2102      	movs	r1, #2
   b5a1e:	8281      	strh	r1, [r0, #20]
   b5a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5a24:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a26:	4905      	ldr	r1, [pc, #20]	; (b5a3c <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5a28:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a2a:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5a2e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a30:	6182      	str	r2, [r0, #24]
   b5a32:	4a03      	ldr	r2, [pc, #12]	; (b5a40 <_ZN13sysStatusDataC1Ev+0x34>)
   b5a34:	6002      	str	r2, [r0, #0]
};
   b5a36:	4770      	bx	lr
   b5a38:	20a99e75 	.word	0x20a99e75
   b5a3c:	2003e3b8 	.word	0x2003e3b8
   b5a40:	000be5a0 	.word	0x000be5a0

000b5a44 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5a44:	b510      	push	{r4, lr}
    if (!_instance) {
   b5a46:	4c06      	ldr	r4, [pc, #24]	; (b5a60 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5a48:	6823      	ldr	r3, [r4, #0]
   b5a4a:	b93b      	cbnz	r3, b5a5c <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5a4c:	2060      	movs	r0, #96	; 0x60
   b5a4e:	f7fe fb22 	bl	b4096 <_Znwj>
   b5a52:	4603      	mov	r3, r0
   b5a54:	b108      	cbz	r0, b5a5a <_ZN13sysStatusData8instanceEv+0x16>
   b5a56:	f7ff ffd9 	bl	b5a0c <_ZN13sysStatusDataC1Ev>
   b5a5a:	6023      	str	r3, [r4, #0]
}
   b5a5c:	6820      	ldr	r0, [r4, #0]
   b5a5e:	bd10      	pop	{r4, pc}
   b5a60:	2003e3b0 	.word	0x2003e3b0

000b5a64 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5a64:	b510      	push	{r4, lr}
    fram.begin();
   b5a66:	6a00      	ldr	r0, [r0, #32]
   b5a68:	f001 fa9e 	bl	b6fa8 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5a6c:	f7ff ffea 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5a70:	6803      	ldr	r3, [r0, #0]
}
   b5a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5a76:	685b      	ldr	r3, [r3, #4]
   b5a78:	4718      	bx	r3

000b5a7a <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5a7a:	b510      	push	{r4, lr}
    sysStatus.flush(true);
   b5a7c:	f7ff ffe2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5a80:	6803      	ldr	r3, [r0, #0]
}
   b5a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(true);
   b5a86:	68db      	ldr	r3, [r3, #12]
   b5a88:	2101      	movs	r1, #1
   b5a8a:	4718      	bx	r3

000b5a8c <_ZNK13sysStatusData13get_openHoursEv>:
bool sysStatusData::get_openHours() const {
   b5a8c:	b538      	push	{r3, r4, r5, lr}
   b5a8e:	4604      	mov	r4, r0
   b5a90:	3004      	adds	r0, #4
   b5a92:	f7ff ff83 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a96:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5a98:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a9a:	3b01      	subs	r3, #1
   b5a9c:	2b30      	cmp	r3, #48	; 0x30
                    result = *(const T *)p;
   b5a9e:	bf86      	itte	hi
   b5aa0:	68a3      	ldrhi	r3, [r4, #8]
   b5aa2:	f893 5031 	ldrbhi.w	r5, [r3, #49]	; 0x31
            T result = 0;
   b5aa6:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5aa8:	f002 fec6 	bl	b8838 <os_mutex_recursive_unlock>
}
   b5aac:	4628      	mov	r0, r5
   b5aae:	bd38      	pop	{r3, r4, r5, pc}

000b5ab0 <_ZN13sysStatusData13set_openHoursEb>:
void sysStatusData::set_openHours(bool value) {
   b5ab0:	b538      	push	{r3, r4, r5, lr}
   b5ab2:	4604      	mov	r4, r0
   b5ab4:	3004      	adds	r0, #4
   b5ab6:	460d      	mov	r5, r1
   b5ab8:	f7ff ff70 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5abc:	68e3      	ldr	r3, [r4, #12]
   b5abe:	3b01      	subs	r3, #1
   b5ac0:	2b30      	cmp	r3, #48	; 0x30
   b5ac2:	d90f      	bls.n	b5ae4 <_ZN13sysStatusData13set_openHoursEb+0x34>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5ac4:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5ac6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
   b5aca:	42aa      	cmp	r2, r5
   b5acc:	d00a      	beq.n	b5ae4 <_ZN13sysStatusData13set_openHoursEb+0x34>
                        *(T *)p = value;
   b5ace:	f883 5031 	strb.w	r5, [r3, #49]	; 0x31
                        savedDataHeader->hash = getHash();
   b5ad2:	4620      	mov	r0, r4
   b5ad4:	68a5      	ldr	r5, [r4, #8]
   b5ad6:	f002 fe15 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5ada:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5adc:	6823      	ldr	r3, [r4, #0]
   b5ade:	4620      	mov	r0, r4
   b5ae0:	691b      	ldr	r3, [r3, #16]
   b5ae2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5ae4:	6860      	ldr	r0, [r4, #4]
}
   b5ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5aea:	f002 bea5 	b.w	b8838 <os_mutex_recursive_unlock>
	...

000b5af0 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5af0:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5af2:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5af6:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5af8:	6182      	str	r2, [r0, #24]
   b5afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5afe:	6081      	str	r1, [r0, #8]
   b5b00:	61c2      	str	r2, [r0, #28]
   b5b02:	4907      	ldr	r1, [pc, #28]	; (b5b20 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b04:	4a07      	ldr	r2, [pc, #28]	; (b5b24 <_ZN17currentStatusDataC1Ev+0x34>)
   b5b06:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b08:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b0c:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b0e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5b12:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5b14:	2102      	movs	r1, #2
   b5b16:	4a04      	ldr	r2, [pc, #16]	; (b5b28 <_ZN17currentStatusDataC1Ev+0x38>)
   b5b18:	8281      	strh	r1, [r0, #20]
   b5b1a:	6002      	str	r2, [r0, #0]
};
   b5b1c:	4770      	bx	lr
   b5b1e:	bf00      	nop
   b5b20:	20a99e74 	.word	0x20a99e74
   b5b24:	2003e3b8 	.word	0x2003e3b8
   b5b28:	000be5cc 	.word	0x000be5cc

000b5b2c <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5b2c:	b510      	push	{r4, lr}
    if (!_instance) {
   b5b2e:	4c06      	ldr	r4, [pc, #24]	; (b5b48 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5b30:	6823      	ldr	r3, [r4, #0]
   b5b32:	b93b      	cbnz	r3, b5b44 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5b34:	2070      	movs	r0, #112	; 0x70
   b5b36:	f7fe faae 	bl	b4096 <_Znwj>
   b5b3a:	4603      	mov	r3, r0
   b5b3c:	b108      	cbz	r0, b5b42 <_ZN17currentStatusData8instanceEv+0x16>
   b5b3e:	f7ff ffd7 	bl	b5af0 <_ZN17currentStatusDataC1Ev>
   b5b42:	6023      	str	r3, [r4, #0]
}
   b5b44:	6820      	ldr	r0, [r4, #0]
   b5b46:	bd10      	pop	{r4, pc}
   b5b48:	2003e3b4 	.word	0x2003e3b4

000b5b4c <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5b4c:	b510      	push	{r4, lr}
    fram.begin();
   b5b4e:	6a00      	ldr	r0, [r0, #32]
   b5b50:	f001 fa2a 	bl	b6fa8 <_ZN6MB85RC5beginEv>
    current.load();
   b5b54:	f7ff ffea 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5b58:	6803      	ldr	r3, [r0, #0]
}
   b5b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.load();
   b5b5e:	685b      	ldr	r3, [r3, #4]
   b5b60:	4718      	bx	r3

000b5b62 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5b62:	b510      	push	{r4, lr}
    current.flush(true);
   b5b64:	f7ff ffe2 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5b68:	6803      	ldr	r3, [r0, #0]
}
   b5b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(true);
   b5b6e:	68db      	ldr	r3, [r3, #12]
   b5b70:	2101      	movs	r1, #1
   b5b72:	4718      	bx	r3
   b5b74:	0000      	movs	r0, r0
	...

000b5b78 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5b78:	b510      	push	{r4, lr}
   b5b7a:	4604      	mov	r4, r0
   b5b7c:	ed2d 8b02 	vpush	{d8}
   b5b80:	3004      	adds	r0, #4
   b5b82:	f7ff ff0b 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b86:	68e3      	ldr	r3, [r4, #12]
   b5b88:	3b08      	subs	r3, #8
   b5b8a:	2b17      	cmp	r3, #23
   b5b8c:	d90c      	bls.n	b5ba8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5b8e:	68a3      	ldr	r3, [r4, #8]
   b5b90:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5b94:	6860      	ldr	r0, [r4, #4]
   b5b96:	f002 fe4f 	bl	b8838 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5b9a:	eeb0 0a48 	vmov.f32	s0, s16
   b5b9e:	eef0 0a68 	vmov.f32	s1, s17
   b5ba2:	ecbd 8b02 	vpop	{d8}
   b5ba6:	bd10      	pop	{r4, pc}
            T result = 0;
   b5ba8:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5bb0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5bac:	e7f2      	b.n	b5b94 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5bae:	bf00      	nop
	...

000b5bb8 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bba:	4604      	mov	r4, r0
   b5bbc:	3004      	adds	r0, #4
   b5bbe:	ec57 6b10 	vmov	r6, r7, d0
   b5bc2:	f7ff feeb 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5bc6:	68e3      	ldr	r3, [r4, #12]
   b5bc8:	3b08      	subs	r3, #8
   b5bca:	2b17      	cmp	r3, #23
   b5bcc:	d912      	bls.n	b5bf4 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5bce:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5bd0:	4630      	mov	r0, r6
   b5bd2:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5bd6:	4639      	mov	r1, r7
   b5bd8:	f007 fcf4 	bl	bd5c4 <__aeabi_dcmpeq>
   b5bdc:	b950      	cbnz	r0, b5bf4 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5bde:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5be2:	4620      	mov	r0, r4
   b5be4:	68a5      	ldr	r5, [r4, #8]
   b5be6:	f002 fd8d 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5bea:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5bec:	6823      	ldr	r3, [r4, #0]
   b5bee:	4620      	mov	r0, r4
   b5bf0:	691b      	ldr	r3, [r3, #16]
   b5bf2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5bf4:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5bf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5bfa:	f002 be1d 	b.w	b8838 <os_mutex_recursive_unlock>

000b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5bfe:	b538      	push	{r3, r4, r5, lr}
   b5c00:	4604      	mov	r4, r0
   b5c02:	3004      	adds	r0, #4
   b5c04:	460d      	mov	r5, r1
   b5c06:	f7ff fec9 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c0a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5c0c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c0e:	3b01      	subs	r3, #1
   b5c10:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5c12:	bf26      	itte	cs
   b5c14:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5c16:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5c18:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5c1a:	f002 fe0d 	bl	b8838 <os_mutex_recursive_unlock>
        }
   b5c1e:	4628      	mov	r0, r5
   b5c20:	bd38      	pop	{r3, r4, r5, pc}

000b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5c22:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5c24:	2110      	movs	r1, #16
   b5c26:	f7ff ffea 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c2a:	bd08      	pop	{r3, pc}

000b5c2c <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5c2c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5c2e:	2117      	movs	r1, #23
   b5c30:	f7ff ffe5 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c34:	bd08      	pop	{r3, pc}

000b5c36 <_ZNK13sysStatusData17get_alertCodeNodeEv>:
uint8_t sysStatusData::get_alertCodeNode() const {
   b5c36:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeNode));
   b5c38:	2122      	movs	r1, #34	; 0x22
   b5c3a:	f7ff ffe0 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c3e:	bd08      	pop	{r3, pc}

000b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5c40:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b5c42:	2130      	movs	r1, #48	; 0x30
   b5c44:	f7ff ffdb 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c48:	bd08      	pop	{r3, pc}

000b5c4a <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5c4a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5c4c:	2110      	movs	r1, #16
   b5c4e:	f7ff ffd6 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c52:	bd08      	pop	{r3, pc}

000b5c54 <_ZNK17currentStatusData16get_batteryStateEv>:

uint8_t currentStatusData::get_batteryState() const {
   b5c54:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5c56:	2120      	movs	r1, #32
   b5c58:	f7ff ffd1 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c5c:	bd08      	pop	{r3, pc}

000b5c5e <_ZNK17currentStatusData16get_messageCountEv>:

void currentStatusData::set_RSSI(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
}

uint8_t currentStatusData::get_messageCount() const {
   b5c5e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b5c60:	2132      	movs	r1, #50	; 0x32
   b5c62:	f7ff ffcc 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c66:	bd08      	pop	{r3, pc}

000b5c68 <_ZNK17currentStatusData16get_successCountEv>:

void currentStatusData::set_messageCount(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
}

uint8_t currentStatusData::get_successCount() const {
   b5c68:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b5c6a:	2133      	movs	r1, #51	; 0x33
   b5c6c:	f7ff ffc7 	bl	b5bfe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c70:	bd08      	pop	{r3, pc}

000b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5c72:	b570      	push	{r4, r5, r6, lr}
   b5c74:	4604      	mov	r4, r0
   b5c76:	3004      	adds	r0, #4
   b5c78:	460d      	mov	r5, r1
   b5c7a:	4616      	mov	r6, r2
   b5c7c:	f7ff fe8e 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c80:	68e3      	ldr	r3, [r4, #12]
   b5c82:	3b01      	subs	r3, #1
   b5c84:	42ab      	cmp	r3, r5
   b5c86:	d30d      	bcc.n	b5ca4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5c88:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5c8a:	5d5a      	ldrb	r2, [r3, r5]
   b5c8c:	42b2      	cmp	r2, r6
   b5c8e:	d009      	beq.n	b5ca4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5c90:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5c92:	4620      	mov	r0, r4
   b5c94:	68a5      	ldr	r5, [r4, #8]
   b5c96:	f002 fd35 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5c9a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5c9c:	6823      	ldr	r3, [r4, #0]
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	691b      	ldr	r3, [r3, #16]
   b5ca2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5ca4:	6860      	ldr	r0, [r4, #4]
        }
   b5ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5caa:	f002 bdc5 	b.w	b8838 <os_mutex_recursive_unlock>

000b5cae <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5cae:	b508      	push	{r3, lr}
   b5cb0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5cb2:	2110      	movs	r1, #16
   b5cb4:	f7ff ffdd 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5cb8:	bd08      	pop	{r3, pc}

000b5cba <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5cba:	b508      	push	{r3, lr}
   b5cbc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b5cbe:	2112      	movs	r1, #18
   b5cc0:	f7ff ffd7 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5cc4:	bd08      	pop	{r3, pc}

000b5cc6 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5cc6:	b508      	push	{r3, lr}
   b5cc8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5cca:	2117      	movs	r1, #23
   b5ccc:	f7ff ffd1 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5cd0:	bd08      	pop	{r3, pc}

000b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>:
void sysStatusData::set_alertCodeNode(uint8_t value) {
   b5cd2:	b508      	push	{r3, lr}
   b5cd4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeNode), value);
   b5cd6:	2122      	movs	r1, #34	; 0x22
   b5cd8:	f7ff ffcb 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5cdc:	bd08      	pop	{r3, pc}

000b5cde <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b5cde:	b508      	push	{r3, lr}
   b5ce0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b5ce2:	2130      	movs	r1, #48	; 0x30
   b5ce4:	f7ff ffc5 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ce8:	bd08      	pop	{r3, pc}

000b5cea <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5cea:	b508      	push	{r3, lr}
   b5cec:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5cee:	2110      	movs	r1, #16
   b5cf0:	f7ff ffbf 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5cf4:	bd08      	pop	{r3, pc}

000b5cf6 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5cf6:	b508      	push	{r3, lr}
   b5cf8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5cfa:	2120      	movs	r1, #32
   b5cfc:	f7ff ffb9 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d00:	bd08      	pop	{r3, pc}

000b5d02 <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b5d02:	b508      	push	{r3, lr}
   b5d04:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b5d06:	2132      	movs	r1, #50	; 0x32
   b5d08:	f7ff ffb3 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d0c:	bd08      	pop	{r3, pc}

000b5d0e <_ZN17currentStatusData16set_successCountEh>:

void currentStatusData::set_successCount(uint8_t value) {
   b5d0e:	b508      	push	{r3, lr}
   b5d10:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b5d12:	2133      	movs	r1, #51	; 0x33
   b5d14:	f7ff ffad 	bl	b5c72 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d18:	bd08      	pop	{r3, pc}

000b5d1a <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5d1a:	b538      	push	{r3, r4, r5, lr}
   b5d1c:	4604      	mov	r4, r0
   b5d1e:	3004      	adds	r0, #4
   b5d20:	460d      	mov	r5, r1
   b5d22:	f7ff fe3b 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d26:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5d28:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d2a:	3b02      	subs	r3, #2
   b5d2c:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5d2e:	bf26      	itte	cs
   b5d30:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5d32:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5d34:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5d36:	f002 fd7f 	bl	b8838 <os_mutex_recursive_unlock>
        }
   b5d3a:	4628      	mov	r0, r5
   b5d3c:	bd38      	pop	{r3, r4, r5, pc}

000b5d3e <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5d3e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5d40:	2114      	movs	r1, #20
   b5d42:	f7ff ffea 	bl	b5d1a <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5d46:	bd08      	pop	{r3, pc}

000b5d48 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5d48:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5d4a:	2120      	movs	r1, #32
   b5d4c:	f7ff ffe5 	bl	b5d1a <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5d50:	bd08      	pop	{r3, pc}

000b5d52 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5d52:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5d54:	2140      	movs	r1, #64	; 0x40
   b5d56:	f7ff ffe0 	bl	b5d1a <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5d5a:	bd08      	pop	{r3, pc}

000b5d5c <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b5d5c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5d5e:	2142      	movs	r1, #66	; 0x42
   b5d60:	f7ff ffdb 	bl	b5d1a <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5d64:	bd08      	pop	{r3, pc}

000b5d66 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5d66:	b570      	push	{r4, r5, r6, lr}
   b5d68:	4604      	mov	r4, r0
   b5d6a:	3004      	adds	r0, #4
   b5d6c:	460d      	mov	r5, r1
   b5d6e:	4616      	mov	r6, r2
   b5d70:	f7ff fe14 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d74:	68e3      	ldr	r3, [r4, #12]
   b5d76:	3b02      	subs	r3, #2
   b5d78:	42ab      	cmp	r3, r5
   b5d7a:	d30d      	bcc.n	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5d7c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5d7e:	5b5a      	ldrh	r2, [r3, r5]
   b5d80:	42b2      	cmp	r2, r6
   b5d82:	d009      	beq.n	b5d98 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5d84:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5d86:	4620      	mov	r0, r4
   b5d88:	68a5      	ldr	r5, [r4, #8]
   b5d8a:	f002 fcbb 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5d8e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5d90:	6823      	ldr	r3, [r4, #0]
   b5d92:	4620      	mov	r0, r4
   b5d94:	691b      	ldr	r3, [r3, #16]
   b5d96:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5d98:	6860      	ldr	r0, [r4, #4]
        }
   b5d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5d9e:	f002 bd4b 	b.w	b8838 <os_mutex_recursive_unlock>

000b5da2 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b5da2:	b508      	push	{r3, lr}
   b5da4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b5da6:	2114      	movs	r1, #20
   b5da8:	f7ff ffdd 	bl	b5d66 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5dac:	bd08      	pop	{r3, pc}

000b5dae <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b5dae:	b508      	push	{r3, lr}
   b5db0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5db2:	2120      	movs	r1, #32
   b5db4:	f7ff ffd7 	bl	b5d66 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5db8:	bd08      	pop	{r3, pc}

000b5dba <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5dba:	b508      	push	{r3, lr}
   b5dbc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b5dbe:	2140      	movs	r1, #64	; 0x40
   b5dc0:	f7ff ffd1 	bl	b5d66 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5dc4:	bd08      	pop	{r3, pc}

000b5dc6 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b5dc6:	b508      	push	{r3, lr}
   b5dc8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5dca:	2142      	movs	r1, #66	; 0x42
   b5dcc:	f7ff ffcb 	bl	b5d66 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5dd0:	bd08      	pop	{r3, pc}

000b5dd2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5dd4:	4604      	mov	r4, r0
   b5dd6:	3004      	adds	r0, #4
   b5dd8:	460d      	mov	r5, r1
   b5dda:	f7ff fddf 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5dde:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5de0:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5de2:	3b08      	subs	r3, #8
   b5de4:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5de6:	bf23      	ittte	cs
   b5de8:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5dea:	1949      	addcs	r1, r1, r5
   b5dec:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5df0:	2600      	movcc	r6, #0
   b5df2:	bf38      	it	cc
   b5df4:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5df6:	f002 fd1f 	bl	b8838 <os_mutex_recursive_unlock>
        }
   b5dfa:	4630      	mov	r0, r6
   b5dfc:	4639      	mov	r1, r7
   b5dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e00 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b5e00:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b5e02:	2118      	movs	r1, #24
   b5e04:	f7ff ffe5 	bl	b5dd2 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5e08:	bd08      	pop	{r3, pc}

000b5e0a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e0c:	4604      	mov	r4, r0
   b5e0e:	3004      	adds	r0, #4
   b5e10:	460d      	mov	r5, r1
   b5e12:	461e      	mov	r6, r3
   b5e14:	4617      	mov	r7, r2
   b5e16:	f7ff fdc1 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e1a:	68e3      	ldr	r3, [r4, #12]
   b5e1c:	3b08      	subs	r3, #8
   b5e1e:	42ab      	cmp	r3, r5
   b5e20:	d312      	bcc.n	b5e48 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5e22:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5e24:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5e26:	5958      	ldr	r0, [r3, r5]
   b5e28:	6851      	ldr	r1, [r2, #4]
   b5e2a:	42b1      	cmp	r1, r6
   b5e2c:	bf08      	it	eq
   b5e2e:	42b8      	cmpeq	r0, r7
   b5e30:	d00a      	beq.n	b5e48 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5e32:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5e34:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5e36:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5e38:	68a5      	ldr	r5, [r4, #8]
   b5e3a:	f002 fc63 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5e3e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5e40:	6823      	ldr	r3, [r4, #0]
   b5e42:	4620      	mov	r0, r4
   b5e44:	691b      	ldr	r3, [r3, #16]
   b5e46:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5e48:	6860      	ldr	r0, [r4, #4]
        }
   b5e4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5e4e:	f002 bcf3 	b.w	b8838 <os_mutex_recursive_unlock>

000b5e52 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5e52:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5e54:	2118      	movs	r1, #24
   b5e56:	f7ff ffd8 	bl	b5e0a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5e5a:	bd08      	pop	{r3, pc}

000b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>:
void sysStatusData::set_alertTimestampNode(time_t value) {
   b5e5c:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampNode), value);
   b5e5e:	2128      	movs	r1, #40	; 0x28
   b5e60:	f7ff ffd3 	bl	b5e0a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5e64:	bd08      	pop	{r3, pc}
	...

000b5e68 <_ZN13sysStatusData18loadSystemDefaultsEv>:
void sysStatusData::loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b5e68:	b508      	push	{r3, lr}
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b5e6a:	4918      	ldr	r1, [pc, #96]	; (b5ecc <_ZN13sysStatusData18loadSystemDefaultsEv+0x64>)
   b5e6c:	4818      	ldr	r0, [pc, #96]	; (b5ed0 <_ZN13sysStatusData18loadSystemDefaultsEv+0x68>)
   b5e6e:	f7fe f9f9 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_nodeNumber(11);
   b5e72:	f7ff fde7 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5e76:	210b      	movs	r1, #11
   b5e78:	f7ff ff19 	bl	b5cae <_ZN13sysStatusData14set_nodeNumberEh>
  sysStatus.set_structuresVersion(1);
   b5e7c:	f7ff fde2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5e80:	2101      	movs	r1, #1
   b5e82:	f7ff ff1a 	bl	b5cba <_ZN13sysStatusData21set_structuresVersionEh>
  sysStatus.set_magicNumber(27617);
   b5e86:	f7ff fddd 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5e8a:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b5e8e:	f7ff ff88 	bl	b5da2 <_ZN13sysStatusData15set_magicNumberEt>
  sysStatus.set_resetCount(0);
   b5e92:	f7ff fdd7 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5e96:	2100      	movs	r1, #0
   b5e98:	f7ff ff15 	bl	b5cc6 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_frequencyMinutes(5);
   b5e9c:	f7ff fdd2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5ea0:	2105      	movs	r1, #5
   b5ea2:	f7ff ff84 	bl	b5dae <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_alertCodeNode(1);
   b5ea6:	f7ff fdcd 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5eaa:	2101      	movs	r1, #1
   b5eac:	f7ff ff11 	bl	b5cd2 <_ZN13sysStatusData17set_alertCodeNodeEh>
  sysStatus.set_alertTimestampNode(0);
   b5eb0:	f7ff fdc8 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5eb4:	2300      	movs	r3, #0
   b5eb6:	2200      	movs	r2, #0
   b5eb8:	f7ff ffd0 	bl	b5e5c <_ZN13sysStatusData22set_alertTimestampNodeEx>
  sysStatus.set_openHours(true);
   b5ebc:	f7ff fdc2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
}
   b5ec0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_openHours(true);
   b5ec4:	2101      	movs	r1, #1
   b5ec6:	f7ff bdf3 	b.w	b5ab0 <_ZN13sysStatusData13set_openHoursEb>
   b5eca:	bf00      	nop
   b5ecc:	000be534 	.word	0x000be534
   b5ed0:	2003e654 	.word	0x2003e654

000b5ed4 <_ZN13sysStatusData17checkSystemValuesEv>:
void sysStatusData::checkSystemValues() {               // Values out of bounds indicates an initialization error - will reload defaults
   b5ed4:	b530      	push	{r4, r5, lr}
   b5ed6:	b087      	sub	sp, #28
   b5ed8:	4605      	mov	r5, r0
    Log.info("freq = %d, type = %d, node = %d, current %4.2f",sysStatus.get_frequencyMinutes(), sysStatus.get_sensorType(),sysStatus.get_nodeNumber(), current.get_stateOfCharge() );
   b5eda:	f7ff fdb3 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5ede:	f7ff ff33 	bl	b5d48 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5ee2:	9005      	str	r0, [sp, #20]
   b5ee4:	f7ff fdae 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5ee8:	f7ff feaa 	bl	b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5eec:	9004      	str	r0, [sp, #16]
   b5eee:	f7ff fda9 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5ef2:	f7ff fe96 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5ef6:	4604      	mov	r4, r0
   b5ef8:	f7ff fe18 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5efc:	f7ff fe3c 	bl	b5b78 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5f00:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b5f04:	ed8d 0b02 	vstr	d0, [sp, #8]
   b5f08:	4916      	ldr	r1, [pc, #88]	; (b5f64 <_ZN13sysStatusData17checkSystemValuesEv+0x90>)
   b5f0a:	4817      	ldr	r0, [pc, #92]	; (b5f68 <_ZN13sysStatusData17checkSystemValuesEv+0x94>)
   b5f0c:	9400      	str	r4, [sp, #0]
   b5f0e:	f7fe f9a9 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b5f12:	f7ff fd97 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5f16:	f7ff ff17 	bl	b5d48 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5f1a:	b1f8      	cbz	r0, b5f5c <_ZN13sysStatusData17checkSystemValuesEv+0x88>
   b5f1c:	f7ff fd92 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5f20:	f7ff ff12 	bl	b5d48 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5f24:	283c      	cmp	r0, #60	; 0x3c
   b5f26:	bf94      	ite	ls
   b5f28:	2400      	movls	r4, #0
   b5f2a:	2401      	movhi	r4, #1
    if (sysStatus.get_sensorType() < 0 || sysStatus.get_sensorType() >2) reset = true;
   b5f2c:	f7ff fd8a 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5f30:	f7ff fe86 	bl	b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5f34:	f7ff fd86 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5f38:	f7ff fe82 	bl	b5c40 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5f3c:	2802      	cmp	r0, #2
   b5f3e:	bf88      	it	hi
   b5f40:	2401      	movhi	r4, #1
    if (sysStatus.get_nodeNumber() > 11) reset = true;
   b5f42:	f7ff fd7f 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5f46:	f7ff fe6c 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5f4a:	280b      	cmp	r0, #11
   b5f4c:	d800      	bhi.n	b5f50 <_ZN13sysStatusData17checkSystemValuesEv+0x7c>
    if (reset) sysStatusData::loadSystemDefaults();
   b5f4e:	b13c      	cbz	r4, b5f60 <_ZN13sysStatusData17checkSystemValuesEv+0x8c>
   b5f50:	4628      	mov	r0, r5
}
   b5f52:	b007      	add	sp, #28
   b5f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if (reset) sysStatusData::loadSystemDefaults();
   b5f58:	f7ff bf86 	b.w	b5e68 <_ZN13sysStatusData18loadSystemDefaultsEv>
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b5f5c:	2401      	movs	r4, #1
   b5f5e:	e7e5      	b.n	b5f2c <_ZN13sysStatusData17checkSystemValuesEv+0x58>
}
   b5f60:	b007      	add	sp, #28
   b5f62:	bd30      	pop	{r4, r5, pc}
   b5f64:	000be54c 	.word	0x000be54c
   b5f68:	2003e654 	.word	0x2003e654

000b5f6c <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5f6c:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5f6e:	2138      	movs	r1, #56	; 0x38
   b5f70:	f7ff ff4b 	bl	b5e0a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5f74:	bd08      	pop	{r3, pc}

000b5f76 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b5f76:	b510      	push	{r4, lr}
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b5f78:	f7ff fdd8 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5f7c:	2100      	movs	r1, #0
   b5f7e:	f7ff ff22 	bl	b5dc6 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5f82:	f7ff fdd3 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5f86:	2100      	movs	r1, #0
   b5f88:	f7ff ff17 	bl	b5dba <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5f8c:	f7ff fdce 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5f90:	4604      	mov	r4, r0
   b5f92:	f005 fb6c 	bl	bb66e <_ZN9TimeClass3nowEv>
   b5f96:	4602      	mov	r2, r0
   b5f98:	17c3      	asrs	r3, r0, #31
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	f7ff ffe6 	bl	b5f6c <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b5fa0:	f7ff fd50 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5fa4:	2100      	movs	r1, #0
   b5fa6:	f7ff fe8e 	bl	b5cc6 <_ZN13sysStatusData14set_resetCountEh>
  current.set_messageCount(0);
   b5faa:	f7ff fdbf 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b5fae:	2100      	movs	r1, #0
   b5fb0:	f7ff fea7 	bl	b5d02 <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b5fb4:	f7ff fdba 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
}
   b5fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  current.set_successCount(0);
   b5fbc:	2100      	movs	r1, #0
   b5fbe:	f7ff bea6 	b.w	b5d0e <_ZN17currentStatusData16set_successCountEh>
	...

000b5fc4 <_GLOBAL__sub_I_fram>:
}
   b5fc4:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);  
   b5fc6:	f005 fdc3 	bl	bbb50 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5fca:	4c05      	ldr	r4, [pc, #20]	; (b5fe0 <_GLOBAL__sub_I_fram+0x1c>)
   b5fcc:	4601      	mov	r1, r0
   b5fce:	2300      	movs	r3, #0
   b5fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5fd4:	4620      	mov	r0, r4
   b5fd6:	f000 ffdd 	bl	b6f94 <_ZN6MB85RCC1ER7TwoWireji>
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <_GLOBAL__sub_I_fram+0x20>)
   b5fdc:	6023      	str	r3, [r4, #0]
}
   b5fde:	bd10      	pop	{r4, pc}
   b5fe0:	2003e3b8 	.word	0x2003e3b8
   b5fe4:	000be584 	.word	0x000be584

000b5fe8 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b5fe8:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b5fea:	4913      	ldr	r1, [pc, #76]	; (b6038 <_Z18initializePinModesv+0x50>)
   b5fec:	4813      	ldr	r0, [pc, #76]	; (b603c <_Z18initializePinModesv+0x54>)
   b5fee:	f7fe f939 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5ff2:	2102      	movs	r1, #2
   b5ff4:	2004      	movs	r0, #4
   b5ff6:	f005 fd21 	bl	bba3c <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5ffa:	2100      	movs	r1, #0
   b5ffc:	2008      	movs	r0, #8
   b5ffe:	f005 fd1d 	bl	bba3c <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b6002:	2101      	movs	r1, #1
   b6004:	2007      	movs	r0, #7
   b6006:	f005 fd19 	bl	bba3c <pinMode>
    pinMode(INT_PIN, INPUT);
   b600a:	2100      	movs	r1, #0
   b600c:	2012      	movs	r0, #18
   b600e:	f005 fd15 	bl	bba3c <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b6012:	2101      	movs	r1, #1
   b6014:	2011      	movs	r0, #17
   b6016:	f005 fd11 	bl	bba3c <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b601a:	2101      	movs	r1, #1
   b601c:	2010      	movs	r0, #16
   b601e:	f005 fd0d 	bl	bba3c <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b6022:	2100      	movs	r1, #0
   b6024:	2010      	movs	r0, #16
   b6026:	f005 fd1a 	bl	bba5e <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b602a:	2100      	movs	r1, #0
   b602c:	2011      	movs	r0, #17
   b602e:	f005 fd16 	bl	bba5e <digitalWrite>
    return true;
}
   b6032:	2001      	movs	r0, #1
   b6034:	bd08      	pop	{r3, pc}
   b6036:	bf00      	nop
   b6038:	000be5f0 	.word	0x000be5f0
   b603c:	2003e654 	.word	0x2003e654

000b6040 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b6040:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b6042:	4918      	ldr	r1, [pc, #96]	; (b60a4 <_Z18initializePowerCfgv+0x64>)
   b6044:	4818      	ldr	r0, [pc, #96]	; (b60a8 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b6046:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b6048:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b604a:	f7fe f90b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b604e:	4622      	mov	r2, r4
   b6050:	2100      	movs	r1, #0
   b6052:	4668      	mov	r0, sp
   b6054:	f007 fc10 	bl	bd878 <memset>
   b6058:	4622      	mov	r2, r4
   b605a:	2100      	movs	r1, #0
   b605c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6060:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b6064:	f007 fc08 	bl	bd878 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b6068:	2100      	movs	r1, #0
   b606a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b606e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b6072:	f002 fe69 	bl	b8d48 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b6076:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b607a:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b607e:	4b0b      	ldr	r3, [pc, #44]	; (b60ac <_Z18initializePowerCfgv+0x6c>)
   b6080:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b6082:	f241 0370 	movw	r3, #4208	; 0x1070
   b6086:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b608a:	9b00      	ldr	r3, [sp, #0]
   b608c:	2100      	movs	r1, #0
   b608e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b6092:	4668      	mov	r0, sp
   b6094:	9300      	str	r3, [sp, #0]
   b6096:	f002 fe57 	bl	b8d48 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b609a:	3800      	subs	r0, #0
   b609c:	bf18      	it	ne
   b609e:	2001      	movne	r0, #1
   b60a0:	b010      	add	sp, #64	; 0x40
   b60a2:	bd10      	pop	{r4, pc}
   b60a4:	000be609 	.word	0x000be609
   b60a8:	2003e654 	.word	0x2003e654
   b60ac:	03840384 	.word	0x03840384

000b60b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b60b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b60b2:	6803      	ldr	r3, [r0, #0]
   b60b4:	2b2f      	cmp	r3, #47	; 0x2f
{
   b60b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b60b8:	d904      	bls.n	b60c4 <nrf_gpio_pin_port_decode+0x14>
   b60ba:	4a07      	ldr	r2, [pc, #28]	; (b60d8 <nrf_gpio_pin_port_decode+0x28>)
   b60bc:	4907      	ldr	r1, [pc, #28]	; (b60dc <nrf_gpio_pin_port_decode+0x2c>)
   b60be:	200a      	movs	r0, #10
   b60c0:	f002 fdb2 	bl	b8c28 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b60c4:	6823      	ldr	r3, [r4, #0]
   b60c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b60c8:	bf83      	ittte	hi
   b60ca:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b60ce:	4804      	ldrhi	r0, [pc, #16]	; (b60e0 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b60d0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b60d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b60d6:	bd10      	pop	{r4, pc}
   b60d8:	000b8879 	.word	0x000b8879
   b60dc:	000be6ad 	.word	0x000be6ad
   b60e0:	50000300 	.word	0x50000300

000b60e4 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b60e4:	ee07 0a90 	vmov	s15, r0
   b60e8:	ed9f 7a09 	vldr	s14, [pc, #36]	; b6110 <_Z17tmp36TemperatureCi+0x2c>
   b60ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b60f0:	ee67 7a87 	vmul.f32	s15, s15, s14
   b60f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; b6114 <_Z17tmp36TemperatureCi+0x30>
   b60f8:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b60fc:	eddf 7a06 	vldr	s15, [pc, #24]	; b6118 <_Z17tmp36TemperatureCi+0x34>
   b6100:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6104:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6108:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b610c:	4770      	bx	lr
   b610e:	bf00      	nop
   b6110:	454e4000 	.word	0x454e4000
   b6114:	457ff000 	.word	0x457ff000
   b6118:	43fa0000 	.word	0x43fa0000

000b611c <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b611c:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b611e:	2101      	movs	r1, #1
   b6120:	a801      	add	r0, sp, #4
   b6122:	f004 fcb0 	bl	baa86 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6126:	f7ff fd01 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b612a:	f7ff fd8e 	bl	b5c4a <_ZNK17currentStatusData17get_internalTempCEv>
   b612e:	f7ff fcfd 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6132:	f7ff fd8a 	bl	b5c4a <_ZNK17currentStatusData17get_internalTempCEv>
   b6136:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6138:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b613a:	d90d      	bls.n	b6158 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b613c:	f004 fd36 	bl	babac <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6140:	f7ff fcf4 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6144:	2101      	movs	r1, #1
   b6146:	f7ff fdd6 	bl	b5cf6 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b614a:	2400      	movs	r4, #0
  PMIC pmic(true);
   b614c:	a801      	add	r0, sp, #4
   b614e:	f004 fca9 	bl	baaa4 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b6152:	4620      	mov	r0, r4
   b6154:	b002      	add	sp, #8
   b6156:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6158:	f004 fd0d 	bl	bab76 <_ZN4PMIC14enableChargingEv>
    return true;
   b615c:	2401      	movs	r4, #1
   b615e:	e7f5      	b.n	b614c <_Z16isItSafeToChargev+0x30>

000b6160 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b6160:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6162:	4d1b      	ldr	r5, [pc, #108]	; (b61d0 <_Z17getSignalStrengthv+0x70>)
   b6164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b6166:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b6168:	ac10      	add	r4, sp, #64	; 0x40
   b616a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b616c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b616e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6170:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6174:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6178:	4916      	ldr	r1, [pc, #88]	; (b61d4 <_Z17getSignalStrengthv+0x74>)
   b617a:	a808      	add	r0, sp, #32
   b617c:	f002 ff84 	bl	b9088 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6180:	a808      	add	r0, sp, #32
   b6182:	f002 ffc4 	bl	b910e <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6186:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6188:	a808      	add	r0, sp, #32
   b618a:	f002 fff9 	bl	b9180 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b618e:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b6190:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6194:	f003 f824 	bl	b91e0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6198:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b619a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b619e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b61a2:	f006 ff4f 	bl	bd044 <__aeabi_f2d>
   b61a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b61aa:	4628      	mov	r0, r5
   b61ac:	f006 ff4a 	bl	bd044 <__aeabi_f2d>
   b61b0:	e9cd 0100 	strd	r0, r1, [sp]
   b61b4:	2110      	movs	r1, #16
   b61b6:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b61ba:	4a07      	ldr	r2, [pc, #28]	; (b61d8 <_Z17getSignalStrengthv+0x78>)
   b61bc:	eb0d 0001 	add.w	r0, sp, r1
   b61c0:	f002 fe98 	bl	b8ef4 <snprintf>
  Log.info(signalStr);
   b61c4:	4805      	ldr	r0, [pc, #20]	; (b61dc <_Z17getSignalStrengthv+0x7c>)
   b61c6:	a904      	add	r1, sp, #16
   b61c8:	f7fe f84c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b61cc:	b01b      	add	sp, #108	; 0x6c
   b61ce:	bd30      	pop	{r4, r5, pc}
   b61d0:	000be730 	.word	0x000be730
   b61d4:	2003e610 	.word	0x2003e610
   b61d8:	000be6d1 	.word	0x000be6d1
   b61dc:	2003e654 	.word	0x2003e654

000b61e0 <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b61e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b61e2:	4e4f      	ldr	r6, [pc, #316]	; (b6320 <_Z11recordCountv+0x140>)
   b61e4:	4c4f      	ldr	r4, [pc, #316]	; (b6324 <_Z11recordCountv+0x144>)
   b61e6:	7833      	ldrb	r3, [r6, #0]
   b61e8:	f3bf 8f5b 	dmb	ish
   b61ec:	f013 0f01 	tst.w	r3, #1
   b61f0:	b085      	sub	sp, #20
   b61f2:	d109      	bne.n	b6208 <_Z11recordCountv+0x28>
   b61f4:	4630      	mov	r0, r6
   b61f6:	f7fd ff61 	bl	b40bc <__cxa_guard_acquire>
   b61fa:	b128      	cbz	r0, b6208 <_Z11recordCountv+0x28>
   b61fc:	f002 fb6c 	bl	b88d8 <HAL_Pin_Map>
   b6200:	6020      	str	r0, [r4, #0]
   b6202:	4630      	mov	r0, r6
   b6204:	f7fd ff5f 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6208:	4b47      	ldr	r3, [pc, #284]	; (b6328 <_Z11recordCountv+0x148>)
   b620a:	881d      	ldrh	r5, [r3, #0]
   b620c:	6823      	ldr	r3, [r4, #0]
   b620e:	012d      	lsls	r5, r5, #4
   b6210:	5d5b      	ldrb	r3, [r3, r5]
   b6212:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b6214:	7833      	ldrb	r3, [r6, #0]
   b6216:	f3bf 8f5b 	dmb	ish
   b621a:	07d9      	lsls	r1, r3, #31
   b621c:	d409      	bmi.n	b6232 <_Z11recordCountv+0x52>
   b621e:	4840      	ldr	r0, [pc, #256]	; (b6320 <_Z11recordCountv+0x140>)
   b6220:	f7fd ff4c 	bl	b40bc <__cxa_guard_acquire>
   b6224:	b128      	cbz	r0, b6232 <_Z11recordCountv+0x52>
   b6226:	f002 fb57 	bl	b88d8 <HAL_Pin_Map>
   b622a:	6020      	str	r0, [r4, #0]
   b622c:	483c      	ldr	r0, [pc, #240]	; (b6320 <_Z11recordCountv+0x140>)
   b622e:	f7fd ff4a 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6232:	6823      	ldr	r3, [r4, #0]
   b6234:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b6236:	a803      	add	r0, sp, #12
   b6238:	785b      	ldrb	r3, [r3, #1]
   b623a:	f003 031f 	and.w	r3, r3, #31
   b623e:	433b      	orrs	r3, r7
   b6240:	9303      	str	r3, [sp, #12]
   b6242:	f7ff ff35 	bl	b60b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b6246:	9a03      	ldr	r2, [sp, #12]
   b6248:	2301      	movs	r3, #1
   b624a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b624c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b6250:	f7ff fc6c 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6254:	4607      	mov	r7, r0
   b6256:	f005 fa0a 	bl	bb66e <_ZN9TimeClass3nowEv>
   b625a:	4602      	mov	r2, r0
   b625c:	17c3      	asrs	r3, r0, #31
   b625e:	4638      	mov	r0, r7
   b6260:	f7ff fe84 	bl	b5f6c <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b6264:	f7ff fc62 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6268:	4607      	mov	r7, r0
   b626a:	f7ff fc5f 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b626e:	f7ff fd70 	bl	b5d52 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6272:	3001      	adds	r0, #1
   b6274:	b281      	uxth	r1, r0
   b6276:	4638      	mov	r0, r7
   b6278:	f7ff fd9f 	bl	b5dba <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b627c:	f7ff fc56 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6280:	4607      	mov	r7, r0
   b6282:	f7ff fc53 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6286:	f7ff fd69 	bl	b5d5c <_ZNK17currentStatusData14get_dailyCountEv>
   b628a:	3001      	adds	r0, #1
   b628c:	b281      	uxth	r1, r0
   b628e:	4638      	mov	r0, r7
   b6290:	f7ff fd99 	bl	b5dc6 <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b6294:	f7ff fc4a 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6298:	f7ff fd5b 	bl	b5d52 <_ZNK17currentStatusData15get_hourlyCountEv>
   b629c:	9001      	str	r0, [sp, #4]
   b629e:	f7ff fc45 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b62a2:	f7ff fd5b 	bl	b5d5c <_ZNK17currentStatusData14get_dailyCountEv>
   b62a6:	9a01      	ldr	r2, [sp, #4]
   b62a8:	4920      	ldr	r1, [pc, #128]	; (b632c <_Z11recordCountv+0x14c>)
   b62aa:	4603      	mov	r3, r0
   b62ac:	4820      	ldr	r0, [pc, #128]	; (b6330 <_Z11recordCountv+0x150>)
   b62ae:	f7fd ffd9 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b62b2:	20c8      	movs	r0, #200	; 0xc8
   b62b4:	f002 fe7a 	bl	b8fac <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b62b8:	7833      	ldrb	r3, [r6, #0]
   b62ba:	f3bf 8f5b 	dmb	ish
   b62be:	07da      	lsls	r2, r3, #31
   b62c0:	d409      	bmi.n	b62d6 <_Z11recordCountv+0xf6>
   b62c2:	4817      	ldr	r0, [pc, #92]	; (b6320 <_Z11recordCountv+0x140>)
   b62c4:	f7fd fefa 	bl	b40bc <__cxa_guard_acquire>
   b62c8:	b128      	cbz	r0, b62d6 <_Z11recordCountv+0xf6>
   b62ca:	f002 fb05 	bl	b88d8 <HAL_Pin_Map>
   b62ce:	6020      	str	r0, [r4, #0]
   b62d0:	4813      	ldr	r0, [pc, #76]	; (b6320 <_Z11recordCountv+0x140>)
   b62d2:	f7fd fef8 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b62d6:	6823      	ldr	r3, [r4, #0]
   b62d8:	5d5b      	ldrb	r3, [r3, r5]
   b62da:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b62dc:	7833      	ldrb	r3, [r6, #0]
   b62de:	f3bf 8f5b 	dmb	ish
   b62e2:	07db      	lsls	r3, r3, #31
   b62e4:	d409      	bmi.n	b62fa <_Z11recordCountv+0x11a>
   b62e6:	480e      	ldr	r0, [pc, #56]	; (b6320 <_Z11recordCountv+0x140>)
   b62e8:	f7fd fee8 	bl	b40bc <__cxa_guard_acquire>
   b62ec:	b128      	cbz	r0, b62fa <_Z11recordCountv+0x11a>
   b62ee:	f002 faf3 	bl	b88d8 <HAL_Pin_Map>
   b62f2:	6020      	str	r0, [r4, #0]
   b62f4:	480a      	ldr	r0, [pc, #40]	; (b6320 <_Z11recordCountv+0x140>)
   b62f6:	f7fd fee6 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b62fa:	6823      	ldr	r3, [r4, #0]
   b62fc:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b62fe:	a803      	add	r0, sp, #12
   b6300:	786b      	ldrb	r3, [r5, #1]
   b6302:	f003 031f 	and.w	r3, r3, #31
   b6306:	433b      	orrs	r3, r7
   b6308:	9303      	str	r3, [sp, #12]
   b630a:	f7ff fed1 	bl	b60b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b630e:	9b03      	ldr	r3, [sp, #12]
   b6310:	2201      	movs	r2, #1
   b6312:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b6316:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
   b631a:	4610      	mov	r0, r2
   b631c:	b005      	add	sp, #20
   b631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6320:	2003e3c8 	.word	0x2003e3c8
   b6324:	2003e3cc 	.word	0x2003e3cc
   b6328:	000be624 	.word	0x000be624
   b632c:	000be6ea 	.word	0x000be6ea
   b6330:	2003e654 	.word	0x2003e654

000b6334 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6334:	b530      	push	{r4, r5, lr}
   b6336:	b085      	sub	sp, #20
   b6338:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b633a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b633c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b633e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6340:	f002 fca4 	bl	b8c8c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6344:	b990      	cbnz	r0, b636c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6346:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6348:	b10c      	cbz	r4, b634e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b634a:	6923      	ldr	r3, [r4, #16]
   b634c:	b923      	cbnz	r3, b6358 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b634e:	4a08      	ldr	r2, [pc, #32]	; (b6370 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6350:	4908      	ldr	r1, [pc, #32]	; (b6374 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6352:	200a      	movs	r0, #10
   b6354:	f002 fc68 	bl	b8c28 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6358:	230c      	movs	r3, #12
   b635a:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b635e:	2304      	movs	r3, #4
   b6360:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6362:	aa01      	add	r2, sp, #4
   b6364:	6923      	ldr	r3, [r4, #16]
   b6366:	2101      	movs	r1, #1
   b6368:	4620      	mov	r0, r4
   b636a:	4798      	blx	r3
}
   b636c:	b005      	add	sp, #20
   b636e:	bd30      	pop	{r4, r5, pc}
   b6370:	000b8879 	.word	0x000b8879
   b6374:	000be707 	.word	0x000be707

000b6378 <_Z12batteryStatev>:
bool batteryState() {
   b6378:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b637a:	f7ff fbd7 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b637e:	a901      	add	r1, sp, #4
   b6380:	4604      	mov	r4, r0
   b6382:	2007      	movs	r0, #7
   b6384:	f7ff ffd6 	bl	b6334 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6388:	1e01      	subs	r1, r0, #0
        return val;
   b638a:	bfa8      	it	ge
   b638c:	9901      	ldrge	r1, [sp, #4]
   b638e:	4620      	mov	r0, r4
   b6390:	b2c9      	uxtb	r1, r1
   b6392:	f7ff fcb0 	bl	b5cf6 <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b6396:	4818      	ldr	r0, [pc, #96]	; (b63f8 <_Z12batteryStatev+0x80>)
   b6398:	f002 ffec 	bl	b9374 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b639c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b63a0:	f002 fe04 	bl	b8fac <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b63a4:	f7ff fbc2 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b63a8:	a901      	add	r1, sp, #4
   b63aa:	4604      	mov	r4, r0
   b63ac:	2003      	movs	r0, #3
   b63ae:	f7ff ffc1 	bl	b6334 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b63b2:	b9e8      	cbnz	r0, b63f0 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b63b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b63b8:	ee07 3a90 	vmov	s15, r3
   b63bc:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b63c0:	ee17 0a90 	vmov	r0, s15
   b63c4:	f006 fe3e 	bl	bd044 <__aeabi_f2d>
   b63c8:	ec41 0b10 	vmov	d0, r0, r1
   b63cc:	4620      	mov	r0, r4
   b63ce:	f7ff fbf3 	bl	b5bb8 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b63d2:	f7ff fbab 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b63d6:	f7ff fbcf 	bl	b5b78 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b63da:	4b08      	ldr	r3, [pc, #32]	; (b63fc <_Z12batteryStatev+0x84>)
   b63dc:	ec51 0b10 	vmov	r0, r1, d0
   b63e0:	2200      	movs	r2, #0
   b63e2:	f007 f917 	bl	bd614 <__aeabi_dcmpgt>
}
   b63e6:	3800      	subs	r0, #0
   b63e8:	bf18      	it	ne
   b63ea:	2001      	movne	r0, #1
   b63ec:	b002      	add	sp, #8
   b63ee:	bd10      	pop	{r4, pc}
            return -1.0f;
   b63f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b63f4:	e7e4      	b.n	b63c0 <_Z12batteryStatev+0x48>
   b63f6:	bf00      	nop
   b63f8:	2003e3d0 	.word	0x2003e3d0
   b63fc:	404e0000 	.word	0x404e0000

000b6400 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6400:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6402:	f7ff fb93 	bl	b5b2c <_ZN17currentStatusData8instanceEv>
   b6406:	4b0f      	ldr	r3, [pc, #60]	; (b6444 <_Z16takeMeasurementsv+0x44>)
   b6408:	4604      	mov	r4, r0
   b640a:	8818      	ldrh	r0, [r3, #0]
   b640c:	f005 fb53 	bl	bbab6 <analogRead>
   b6410:	f7ff fe68 	bl	b60e4 <_Z17tmp36TemperatureCi>
   b6414:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6418:	4620      	mov	r0, r4
   b641a:	edcd 7a01 	vstr	s15, [sp, #4]
   b641e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6422:	f7ff fc62 	bl	b5cea <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b6426:	f7ff ffa7 	bl	b6378 <_Z12batteryStatev>
    isItSafeToCharge();
   b642a:	f7ff fe77 	bl	b611c <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b642e:	f7ff fb09 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6432:	f7ff fbf6 	bl	b5c22 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6436:	b908      	cbnz	r0, b643c <_Z16takeMeasurementsv+0x3c>
   b6438:	f7ff fe92 	bl	b6160 <_Z17getSignalStrengthv>
}
   b643c:	2001      	movs	r0, #1
   b643e:	b002      	add	sp, #8
   b6440:	bd10      	pop	{r4, pc}
   b6442:	bf00      	nop
   b6444:	000be632 	.word	0x000be632

000b6448 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6448:	4801      	ldr	r0, [pc, #4]	; (b6450 <_GLOBAL__sub_I_batteryContext+0x8>)
   b644a:	2100      	movs	r1, #0
   b644c:	f002 bf4e 	b.w	b92ec <_ZN9FuelGaugeC1Eb>
   b6450:	2003e3d0 	.word	0x2003e3d0

000b6454 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6454:	4770      	bx	lr

000b6456 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6456:	b510      	push	{r4, lr}
}
   b6458:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b645a:	4604      	mov	r4, r0
}
   b645c:	f7fd fe1f 	bl	b409e <_ZdlPvj>
   b6460:	4620      	mov	r0, r4
   b6462:	bd10      	pop	{r4, pc}

000b6464 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6464:	b510      	push	{r4, lr}
   b6466:	4604      	mov	r4, r0
   b6468:	b08a      	sub	sp, #40	; 0x28
   b646a:	4608      	mov	r0, r1
    attr.flags = 0;
   b646c:	f04f 0c20 	mov.w	ip, #32
   b6470:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6472:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6476:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b647a:	460b      	mov	r3, r1
   b647c:	aa02      	add	r2, sp, #8
   b647e:	6821      	ldr	r1, [r4, #0]
   b6480:	f002 fbe2 	bl	b8c48 <log_message_v>
}
   b6484:	b00a      	add	sp, #40	; 0x28
   b6486:	bd10      	pop	{r4, pc}

000b6488 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6488:	b40e      	push	{r1, r2, r3}
   b648a:	b503      	push	{r0, r1, lr}
   b648c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b648e:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6490:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6494:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6496:	f7ff ffe5 	bl	b6464 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b649a:	b002      	add	sp, #8
   b649c:	f85d eb04 	ldr.w	lr, [sp], #4
   b64a0:	b003      	add	sp, #12
   b64a2:	4770      	bx	lr

000b64a4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b64a4:	b40e      	push	{r1, r2, r3}
   b64a6:	b503      	push	{r0, r1, lr}
   b64a8:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b64aa:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b64ac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b64b0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b64b2:	f7ff ffd7 	bl	b6464 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b64b6:	b002      	add	sp, #8
   b64b8:	f85d eb04 	ldr.w	lr, [sp], #4
   b64bc:	b003      	add	sp, #12
   b64be:	4770      	bx	lr

000b64c0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b64c0:	b510      	push	{r4, lr}
   b64c2:	7202      	strb	r2, [r0, #8]
   b64c4:	22ff      	movs	r2, #255	; 0xff
   b64c6:	8142      	strh	r2, [r0, #10]
   b64c8:	2200      	movs	r2, #0
   b64ca:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b64ce:	6142      	str	r2, [r0, #20]
   b64d0:	7602      	strb	r2, [r0, #24]
   b64d2:	61c2      	str	r2, [r0, #28]
    instance = this;
   b64d4:	4a02      	ldr	r2, [pc, #8]	; (b64e0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b64d6:	4c03      	ldr	r4, [pc, #12]	; (b64e4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b64d8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b64da:	e9c0 4100 	strd	r4, r1, [r0]
}
   b64de:	bd10      	pop	{r4, pc}
   b64e0:	2003e3dc 	.word	0x2003e3dc
   b64e4:	000be9a8 	.word	0x000be9a8

000b64e8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b64e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b64ec:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b64f0:	4604      	mov	r4, r0
   b64f2:	4689      	mov	r9, r1
   b64f4:	4616      	mov	r6, r2
   b64f6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b64f8:	f1b8 0f00 	cmp.w	r8, #0
   b64fc:	d002      	beq.n	b6504 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b64fe:	6840      	ldr	r0, [r0, #4]
   b6500:	f002 ffde 	bl	b94c0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6504:	7a21      	ldrb	r1, [r4, #8]
   b6506:	6860      	ldr	r0, [r4, #4]
   b6508:	f002 ffb7 	bl	b947a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b650c:	6860      	ldr	r0, [r4, #4]
   b650e:	6803      	ldr	r3, [r0, #0]
   b6510:	4649      	mov	r1, r9
   b6512:	689b      	ldr	r3, [r3, #8]
   b6514:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6516:	6860      	ldr	r0, [r4, #4]
   b6518:	2100      	movs	r1, #0
   b651a:	f002 ffcd 	bl	b94b8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b651e:	4605      	mov	r5, r0
   b6520:	bb00      	cbnz	r0, b6564 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6522:	2301      	movs	r3, #1
   b6524:	7a21      	ldrb	r1, [r4, #8]
   b6526:	6860      	ldr	r0, [r4, #4]
   b6528:	463a      	mov	r2, r7
   b652a:	f002 ff94 	bl	b9456 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b652e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6530:	4603      	mov	r3, r0
        if (count == num) {
   b6532:	d109      	bne.n	b6548 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6534:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6536:	42be      	cmp	r6, r7
   b6538:	d01c      	beq.n	b6574 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b653a:	6860      	ldr	r0, [r4, #4]
   b653c:	6803      	ldr	r3, [r0, #0]
   b653e:	695b      	ldr	r3, [r3, #20]
   b6540:	4798      	blx	r3
   b6542:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6546:	e7f6      	b.n	b6536 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6548:	490b      	ldr	r1, [pc, #44]	; (b6578 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b654a:	480c      	ldr	r0, [pc, #48]	; (b657c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b654c:	464a      	mov	r2, r9
   b654e:	f7ff ff9b 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6552:	f1b8 0f00 	cmp.w	r8, #0
   b6556:	d002      	beq.n	b655e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6558:	6860      	ldr	r0, [r4, #4]
   b655a:	f002 ffba 	bl	b94d2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b655e:	4628      	mov	r0, r5
   b6560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6564:	4603      	mov	r3, r0
   b6566:	4906      	ldr	r1, [pc, #24]	; (b6580 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6568:	4804      	ldr	r0, [pc, #16]	; (b657c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b656a:	464a      	mov	r2, r9
   b656c:	f7ff ff8c 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6570:	2500      	movs	r5, #0
   b6572:	e7ee      	b.n	b6552 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6574:	2501      	movs	r5, #1
   b6576:	e7ec      	b.n	b6552 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6578:	000be758 	.word	0x000be758
   b657c:	2003e3d8 	.word	0x2003e3d8
   b6580:	000be77d 	.word	0x000be77d

000b6584 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6584:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6586:	9300      	str	r3, [sp, #0]
   b6588:	2301      	movs	r3, #1
   b658a:	f7ff ffad 	bl	b64e8 <_ZN6AB180513readRegistersEhPhjb>
}
   b658e:	b003      	add	sp, #12
   b6590:	f85d fb04 	ldr.w	pc, [sp], #4

000b6594 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6594:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6596:	8943      	ldrh	r3, [r0, #10]
   b6598:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b659a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b659c:	d010      	beq.n	b65c0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b659e:	4e19      	ldr	r6, [pc, #100]	; (b6604 <_ZN6AB180510detectChipEv+0x70>)
   b65a0:	4d19      	ldr	r5, [pc, #100]	; (b6608 <_ZN6AB180510detectChipEv+0x74>)
   b65a2:	f002 f971 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b65a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b65aa:	d209      	bcs.n	b65c0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b65ac:	8960      	ldrh	r0, [r4, #10]
   b65ae:	f005 fa6f 	bl	bba90 <digitalRead>
   b65b2:	2801      	cmp	r0, #1
   b65b4:	d004      	beq.n	b65c0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b65b6:	4631      	mov	r1, r6
   b65b8:	4628      	mov	r0, r5
   b65ba:	f7fd fe53 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b65be:	e7f0      	b.n	b65a2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b65c0:	2301      	movs	r3, #1
   b65c2:	f10d 0207 	add.w	r2, sp, #7
   b65c6:	2128      	movs	r1, #40	; 0x28
   b65c8:	4620      	mov	r0, r4
   b65ca:	f7ff ffdb 	bl	b6584 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b65ce:	b930      	cbnz	r0, b65de <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b65d0:	480d      	ldr	r0, [pc, #52]	; (b6608 <_ZN6AB180510detectChipEv+0x74>)
   b65d2:	490e      	ldr	r1, [pc, #56]	; (b660c <_ZN6AB180510detectChipEv+0x78>)
   b65d4:	f7fd fe46 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b65d8:	2000      	movs	r0, #0
}
   b65da:	b002      	add	sp, #8
   b65dc:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b65de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b65e2:	2b18      	cmp	r3, #24
   b65e4:	d1f4      	bne.n	b65d0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b65e6:	2301      	movs	r3, #1
   b65e8:	f10d 0207 	add.w	r2, sp, #7
   b65ec:	2129      	movs	r1, #41	; 0x29
   b65ee:	4620      	mov	r0, r4
   b65f0:	f7ff ffc8 	bl	b6584 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b65f4:	2800      	cmp	r0, #0
   b65f6:	d0eb      	beq.n	b65d0 <_ZN6AB180510detectChipEv+0x3c>
   b65f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b65fc:	2b05      	cmp	r3, #5
   b65fe:	d1e7      	bne.n	b65d0 <_ZN6AB180510detectChipEv+0x3c>
   b6600:	e7eb      	b.n	b65da <_ZN6AB180510detectChipEv+0x46>
   b6602:	bf00      	nop
   b6604:	000be7a1 	.word	0x000be7a1
   b6608:	2003e3d8 	.word	0x2003e3d8
   b660c:	000be7b6 	.word	0x000be7b6

000b6610 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6610:	b507      	push	{r0, r1, r2, lr}
   b6612:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6614:	2200      	movs	r2, #0
   b6616:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b661a:	f10d 0207 	add.w	r2, sp, #7
   b661e:	f7ff ffb1 	bl	b6584 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6622:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6626:	b003      	add	sp, #12
   b6628:	f85d fb04 	ldr.w	pc, [sp], #4

000b662c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6630:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6634:	4604      	mov	r4, r0
   b6636:	460f      	mov	r7, r1
   b6638:	4615      	mov	r5, r2
   b663a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b663c:	f1b8 0f00 	cmp.w	r8, #0
   b6640:	d002      	beq.n	b6648 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6642:	6840      	ldr	r0, [r0, #4]
   b6644:	f002 ff3c 	bl	b94c0 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6648:	7a21      	ldrb	r1, [r4, #8]
   b664a:	6860      	ldr	r0, [r4, #4]
   b664c:	f002 ff15 	bl	b947a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6650:	6860      	ldr	r0, [r4, #4]
   b6652:	6803      	ldr	r3, [r0, #0]
   b6654:	4639      	mov	r1, r7
   b6656:	689b      	ldr	r3, [r3, #8]
   b6658:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b665a:	442e      	add	r6, r5
   b665c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b665e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6660:	d005      	beq.n	b666e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6662:	6803      	ldr	r3, [r0, #0]
   b6664:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6668:	689b      	ldr	r3, [r3, #8]
   b666a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b666c:	e7f6      	b.n	b665c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b666e:	2101      	movs	r1, #1
   b6670:	f002 ff22 	bl	b94b8 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6674:	4603      	mov	r3, r0
   b6676:	b170      	cbz	r0, b6696 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6678:	4908      	ldr	r1, [pc, #32]	; (b669c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b667a:	4809      	ldr	r0, [pc, #36]	; (b66a0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b667c:	463a      	mov	r2, r7
   b667e:	f7ff ff03 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6682:	2500      	movs	r5, #0
    }

    if (lock) {
   b6684:	f1b8 0f00 	cmp.w	r8, #0
   b6688:	d002      	beq.n	b6690 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b668a:	6860      	ldr	r0, [r4, #4]
   b668c:	f002 ff21 	bl	b94d2 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6690:	4628      	mov	r0, r5
   b6692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6696:	2501      	movs	r5, #1
   b6698:	e7f4      	b.n	b6684 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b669a:	bf00      	nop
   b669c:	000be7c3 	.word	0x000be7c3
   b66a0:	2003e3d8 	.word	0x2003e3d8

000b66a4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b66a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b66a6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b66aa:	9300      	str	r3, [sp, #0]
   b66ac:	f10d 020f 	add.w	r2, sp, #15
   b66b0:	2301      	movs	r3, #1
   b66b2:	f7ff ffbb 	bl	b662c <_ZN6AB180514writeRegistersEhPKhjb>
}
   b66b6:	b005      	add	sp, #20
   b66b8:	f85d fb04 	ldr.w	pc, [sp], #4

000b66bc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b66bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b66be:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b66c0:	460c      	mov	r4, r1
   b66c2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b66c4:	491a      	ldr	r1, [pc, #104]	; (b6730 <_ZN6AB18056setWDTEi+0x74>)
   b66c6:	481b      	ldr	r0, [pc, #108]	; (b6734 <_ZN6AB18056setWDTEi+0x78>)
   b66c8:	f7fd fdcc 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b66cc:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b66ce:	bfb8      	it	lt
   b66d0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b66d2:	b97c      	cbnz	r4, b66f4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b66d4:	2301      	movs	r3, #1
   b66d6:	4622      	mov	r2, r4
   b66d8:	211b      	movs	r1, #27
   b66da:	4628      	mov	r0, r5
   b66dc:	f7ff ffe2 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b66e0:	4915      	ldr	r1, [pc, #84]	; (b6738 <_ZN6AB18056setWDTEi+0x7c>)
   b66e2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b66e4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b66e6:	4813      	ldr	r0, [pc, #76]	; (b6734 <_ZN6AB18056setWDTEi+0x78>)
   b66e8:	f7ff fedc 	bl	b64a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b66ec:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b66ee:	616c      	str	r4, [r5, #20]
}
   b66f0:	4630      	mov	r0, r6
   b66f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b66f4:	2c03      	cmp	r4, #3
   b66f6:	dd19      	ble.n	b672c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b66f8:	10a7      	asrs	r7, r4, #2
   b66fa:	2f1f      	cmp	r7, #31
   b66fc:	bfa8      	it	ge
   b66fe:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6700:	00ba      	lsls	r2, r7, #2
   b6702:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6706:	2301      	movs	r3, #1
   b6708:	b2d2      	uxtb	r2, r2
   b670a:	211b      	movs	r1, #27
   b670c:	4628      	mov	r0, r5
   b670e:	f7ff ffc9 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6712:	463a      	mov	r2, r7
   b6714:	4603      	mov	r3, r0
   b6716:	4909      	ldr	r1, [pc, #36]	; (b673c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6718:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b671a:	4806      	ldr	r0, [pc, #24]	; (b6734 <_ZN6AB18056setWDTEi+0x78>)
   b671c:	f7ff fec2 	bl	b64a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6720:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6724:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6726:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6728:	616f      	str	r7, [r5, #20]
   b672a:	e7e1      	b.n	b66f0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b672c:	2701      	movs	r7, #1
   b672e:	e7e7      	b.n	b6700 <_ZN6AB18056setWDTEi+0x44>
   b6730:	000be7e8 	.word	0x000be7e8
   b6734:	2003e3d8 	.word	0x2003e3d8
   b6738:	000be7f2 	.word	0x000be7f2
   b673c:	000be80e 	.word	0x000be80e

000b6740 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6740:	4b06      	ldr	r3, [pc, #24]	; (b675c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6742:	681a      	ldr	r2, [r3, #0]
   b6744:	b14a      	cbz	r2, b675a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6746:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b674a:	430b      	orrs	r3, r1
   b674c:	d105      	bne.n	b675a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b674e:	68d3      	ldr	r3, [r2, #12]
   b6750:	b11b      	cbz	r3, b675a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6752:	2100      	movs	r1, #0
   b6754:	4610      	mov	r0, r2
   b6756:	f7ff bfb1 	b.w	b66bc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b675a:	4770      	bx	lr
   b675c:	2003e3dc 	.word	0x2003e3dc

000b6760 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6764:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6768:	4605      	mov	r5, r0
   b676a:	4616      	mov	r6, r2
   b676c:	461f      	mov	r7, r3
    if (lock) {
   b676e:	f1b8 0f00 	cmp.w	r8, #0
   b6772:	d004      	beq.n	b677e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6774:	6840      	ldr	r0, [r0, #4]
   b6776:	9101      	str	r1, [sp, #4]
   b6778:	f002 fea2 	bl	b94c0 <_ZN7TwoWire4lockEv>
   b677c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b677e:	9101      	str	r1, [sp, #4]
   b6780:	2300      	movs	r3, #0
   b6782:	f10d 020f 	add.w	r2, sp, #15
   b6786:	4628      	mov	r0, r5
   b6788:	f7ff fefc 	bl	b6584 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b678c:	4604      	mov	r4, r0
   b678e:	b160      	cbz	r0, b67aa <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6790:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6794:	ea03 0206 	and.w	r2, r3, r6
   b6798:	433a      	orrs	r2, r7
        if (newValue != value) {
   b679a:	4293      	cmp	r3, r2
   b679c:	d005      	beq.n	b67aa <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b679e:	9901      	ldr	r1, [sp, #4]
   b67a0:	2300      	movs	r3, #0
   b67a2:	4628      	mov	r0, r5
   b67a4:	f7ff ff7e 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
   b67a8:	4604      	mov	r4, r0
    if (lock) {
   b67aa:	f1b8 0f00 	cmp.w	r8, #0
   b67ae:	d002      	beq.n	b67b6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b67b0:	6868      	ldr	r0, [r5, #4]
   b67b2:	f002 fe8e 	bl	b94d2 <_ZN7TwoWire6unlockEv>
}
   b67b6:	4620      	mov	r0, r4
   b67b8:	b004      	add	sp, #16
   b67ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b67be <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b67be:	b513      	push	{r0, r1, r4, lr}
   b67c0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b67c2:	f10d 0207 	add.w	r2, sp, #7
   b67c6:	f7ff fedd 	bl	b6584 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b67ca:	b128      	cbz	r0, b67d8 <_ZN6AB180510isBitClearEhhb+0x1a>
   b67cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b67d0:	421c      	tst	r4, r3
   b67d2:	bf0c      	ite	eq
   b67d4:	2001      	moveq	r0, #1
   b67d6:	2000      	movne	r0, #0
}
   b67d8:	b002      	add	sp, #8
   b67da:	bd10      	pop	{r4, pc}

000b67dc <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b67dc:	b513      	push	{r0, r1, r4, lr}
   b67de:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b67e0:	f10d 0207 	add.w	r2, sp, #7
   b67e4:	f7ff fece 	bl	b6584 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b67e8:	b128      	cbz	r0, b67f6 <_ZN6AB18058isBitSetEhhb+0x1a>
   b67ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b67ee:	421c      	tst	r4, r3
   b67f0:	bf14      	ite	ne
   b67f2:	2001      	movne	r0, #1
   b67f4:	2000      	moveq	r0, #0
}
   b67f6:	b002      	add	sp, #8
   b67f8:	bd10      	pop	{r4, pc}

000b67fa <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b67fa:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b67fc:	43d2      	mvns	r2, r2
   b67fe:	9300      	str	r3, [sp, #0]
   b6800:	b2d2      	uxtb	r2, r2
   b6802:	2300      	movs	r3, #0
   b6804:	f7ff ffac 	bl	b6760 <_ZN6AB180512maskRegisterEhhhb>
}
   b6808:	b003      	add	sp, #12
   b680a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6810 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6810:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6812:	2301      	movs	r3, #1
   b6814:	f10d 0207 	add.w	r2, sp, #7
   b6818:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b681a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b681c:	f7ff feb2 	bl	b6584 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6820:	4605      	mov	r5, r0
   b6822:	b938      	cbnz	r0, b6834 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6824:	491e      	ldr	r1, [pc, #120]	; (b68a0 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6826:	481f      	ldr	r0, [pc, #124]	; (b68a4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6828:	22ad      	movs	r2, #173	; 0xad
   b682a:	f7ff fe2d 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
}
   b682e:	4628      	mov	r0, r5
   b6830:	b003      	add	sp, #12
   b6832:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6834:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6838:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b683c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6840:	d00b      	beq.n	b685a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6842:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6844:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6846:	210f      	movs	r1, #15
   b6848:	4620      	mov	r0, r4
   b684a:	f7ff ffd6 	bl	b67fa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b684e:	4a16      	ldr	r2, [pc, #88]	; (b68a8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6850:	4916      	ldr	r1, [pc, #88]	; (b68ac <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6852:	4814      	ldr	r0, [pc, #80]	; (b68a4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6854:	f7fd fd06 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6858:	e7e9      	b.n	b682e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b685a:	2208      	movs	r2, #8
   b685c:	2117      	movs	r1, #23
   b685e:	4620      	mov	r0, r4
   b6860:	f7ff ffbc 	bl	b67dc <_ZN6AB18058isBitSetEhhb>
   b6864:	b118      	cbz	r0, b686e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6866:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6868:	4a11      	ldr	r2, [pc, #68]	; (b68b0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b686a:	61e3      	str	r3, [r4, #28]
   b686c:	e7f0      	b.n	b6850 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b686e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6872:	071a      	lsls	r2, r3, #28
   b6874:	d509      	bpl.n	b688a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6876:	2303      	movs	r3, #3
   b6878:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b687a:	2208      	movs	r2, #8
   b687c:	2301      	movs	r3, #1
   b687e:	210f      	movs	r1, #15
   b6880:	4620      	mov	r0, r4
   b6882:	f7ff ffba 	bl	b67fa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6886:	4a0b      	ldr	r2, [pc, #44]	; (b68b4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6888:	e7e2      	b.n	b6850 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b688a:	075b      	lsls	r3, r3, #29
   b688c:	d5cf      	bpl.n	b682e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b688e:	2204      	movs	r2, #4
   b6890:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6892:	2301      	movs	r3, #1
   b6894:	210f      	movs	r1, #15
   b6896:	4620      	mov	r0, r4
   b6898:	f7ff ffaf 	bl	b67fa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b689c:	4a06      	ldr	r2, [pc, #24]	; (b68b8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b689e:	e7d7      	b.n	b6850 <_ZN6AB180516updateWakeReasonEv+0x40>
   b68a0:	000be861 	.word	0x000be861
   b68a4:	2003e3d8 	.word	0x2003e3d8
   b68a8:	000be832 	.word	0x000be832
   b68ac:	000be880 	.word	0x000be880
   b68b0:	000be83b 	.word	0x000be83b
   b68b4:	000be84b 	.word	0x000be84b
   b68b8:	000be85b 	.word	0x000be85b

000b68bc <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b68bc:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b68be:	9300      	str	r3, [sp, #0]
   b68c0:	4613      	mov	r3, r2
   b68c2:	22ff      	movs	r2, #255	; 0xff
   b68c4:	f7ff ff4c 	bl	b6760 <_ZN6AB180512maskRegisterEhhhb>
}
   b68c8:	b003      	add	sp, #12
   b68ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b68d0 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b68d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68d2:	460f      	mov	r7, r1
   b68d4:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b68d6:	2301      	movs	r3, #1
   b68d8:	2200      	movs	r2, #0
   b68da:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b68dc:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b68de:	f7ff fee1 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b68e2:	4604      	mov	r4, r0
   b68e4:	b938      	cbnz	r0, b68f6 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b68e6:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b68ea:	491f      	ldr	r1, [pc, #124]	; (b6968 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b68ec:	481f      	ldr	r0, [pc, #124]	; (b696c <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b68ee:	f7ff fdcb 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
}
   b68f2:	4620      	mov	r0, r4
   b68f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b68f6:	2301      	movs	r3, #1
   b68f8:	2223      	movs	r2, #35	; 0x23
   b68fa:	2118      	movs	r1, #24
   b68fc:	4628      	mov	r0, r5
   b68fe:	f7ff fed1 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6902:	4604      	mov	r4, r0
   b6904:	b910      	cbnz	r0, b690c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6906:	f240 229b 	movw	r2, #667	; 0x29b
   b690a:	e7ee      	b.n	b68ea <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b690c:	2fff      	cmp	r7, #255	; 0xff
   b690e:	bfa8      	it	ge
   b6910:	27ff      	movge	r7, #255	; 0xff
   b6912:	2f01      	cmp	r7, #1
   b6914:	bfb8      	it	lt
   b6916:	2701      	movlt	r7, #1
   b6918:	2301      	movs	r3, #1
   b691a:	b2fa      	uxtb	r2, r7
   b691c:	2119      	movs	r1, #25
   b691e:	4628      	mov	r0, r5
   b6920:	f7ff fec0 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6924:	4604      	mov	r4, r0
   b6926:	b910      	cbnz	r0, b692e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6928:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b692c:	e7dd      	b.n	b68ea <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b692e:	2301      	movs	r3, #1
   b6930:	2208      	movs	r2, #8
   b6932:	2112      	movs	r1, #18
   b6934:	4628      	mov	r0, r5
   b6936:	f7ff ffc1 	bl	b68bc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b693a:	4604      	mov	r4, r0
   b693c:	b910      	cbnz	r0, b6944 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b693e:	f240 22af 	movw	r2, #687	; 0x2af
   b6942:	e7d2      	b.n	b68ea <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6944:	2e00      	cmp	r6, #0
   b6946:	bf14      	ite	ne
   b6948:	2203      	movne	r2, #3
   b694a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b694c:	2301      	movs	r3, #1
   b694e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6952:	2118      	movs	r1, #24
   b6954:	4628      	mov	r0, r5
   b6956:	f7ff fea5 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b695a:	4604      	mov	r4, r0
   b695c:	2800      	cmp	r0, #0
   b695e:	d1c8      	bne.n	b68f2 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6960:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6964:	e7c1      	b.n	b68ea <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6966:	bf00      	nop
   b6968:	000be891 	.word	0x000be891
   b696c:	2003e3d8 	.word	0x2003e3d8

000b6970 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6974:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6976:	4605      	mov	r5, r0
   b6978:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b697a:	484f      	ldr	r0, [pc, #316]	; (b6ab8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b697c:	494f      	ldr	r1, [pc, #316]	; (b6abc <_ZN6AB180513deepPowerDownEi+0x14c>)
   b697e:	f7fd fc71 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b6982:	2100      	movs	r1, #0
   b6984:	4628      	mov	r0, r5
   b6986:	f7ff fe99 	bl	b66bc <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b698a:	4604      	mov	r4, r0
   b698c:	b948      	cbnz	r0, b69a2 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b698e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6992:	494b      	ldr	r1, [pc, #300]	; (b6ac0 <_ZN6AB180513deepPowerDownEi+0x150>)
   b6994:	4848      	ldr	r0, [pc, #288]	; (b6ab8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6996:	f7ff fd77 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
}
   b699a:	4620      	mov	r0, r4
   b699c:	b003      	add	sp, #12
   b699e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b69a2:	2301      	movs	r3, #1
   b69a4:	461a      	mov	r2, r3
   b69a6:	2130      	movs	r1, #48	; 0x30
   b69a8:	4628      	mov	r0, r5
   b69aa:	f7ff ff87 	bl	b68bc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b69ae:	4604      	mov	r4, r0
   b69b0:	b910      	cbnz	r0, b69b8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b69b2:	f240 2205 	movw	r2, #517	; 0x205
   b69b6:	e7ec      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b69b8:	2210      	movs	r2, #16
   b69ba:	2301      	movs	r3, #1
   b69bc:	4611      	mov	r1, r2
   b69be:	4628      	mov	r0, r5
   b69c0:	f7ff ff1b 	bl	b67fa <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b69c4:	4604      	mov	r4, r0
   b69c6:	b910      	cbnz	r0, b69ce <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b69c8:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b69cc:	e7e1      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b69ce:	2301      	movs	r3, #1
   b69d0:	2226      	movs	r2, #38	; 0x26
   b69d2:	2113      	movs	r1, #19
   b69d4:	4628      	mov	r0, r5
   b69d6:	f7ff fe65 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b69da:	4604      	mov	r4, r0
   b69dc:	b910      	cbnz	r0, b69e4 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b69de:	f240 2213 	movw	r2, #531	; 0x213
   b69e2:	e7d6      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b69e4:	2601      	movs	r6, #1
   b69e6:	9600      	str	r6, [sp, #0]
   b69e8:	4633      	mov	r3, r6
   b69ea:	22fc      	movs	r2, #252	; 0xfc
   b69ec:	2111      	movs	r1, #17
   b69ee:	4628      	mov	r0, r5
   b69f0:	f7ff feb6 	bl	b6760 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b69f4:	4604      	mov	r4, r0
   b69f6:	b910      	cbnz	r0, b69fe <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b69f8:	f240 221b 	movw	r2, #539	; 0x21b
   b69fc:	e7c9      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b69fe:	2200      	movs	r2, #0
   b6a00:	4639      	mov	r1, r7
   b6a02:	4628      	mov	r0, r5
   b6a04:	f7ff ff64 	bl	b68d0 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6a08:	4604      	mov	r4, r0
   b6a0a:	b910      	cbnz	r0, b6a12 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6a0c:	f240 2222 	movw	r2, #546	; 0x222
   b6a10:	e7bf      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6a12:	9600      	str	r6, [sp, #0]
   b6a14:	2302      	movs	r3, #2
   b6a16:	2277      	movs	r2, #119	; 0x77
   b6a18:	2110      	movs	r1, #16
   b6a1a:	4628      	mov	r0, r5
   b6a1c:	f7ff fea0 	bl	b6760 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6a20:	4604      	mov	r4, r0
   b6a22:	b910      	cbnz	r0, b6a2a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6a24:	f240 222b 	movw	r2, #555	; 0x22b
   b6a28:	e7b3      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6a2a:	4633      	mov	r3, r6
   b6a2c:	2204      	movs	r2, #4
   b6a2e:	211c      	movs	r1, #28
   b6a30:	4628      	mov	r0, r5
   b6a32:	f7ff ff43 	bl	b68bc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6a36:	4604      	mov	r4, r0
   b6a38:	b910      	cbnz	r0, b6a40 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6a3a:	f240 2232 	movw	r2, #562	; 0x232
   b6a3e:	e7a8      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6a40:	9600      	str	r6, [sp, #0]
   b6a42:	2318      	movs	r3, #24
   b6a44:	22e3      	movs	r2, #227	; 0xe3
   b6a46:	2111      	movs	r1, #17
   b6a48:	4628      	mov	r0, r5
   b6a4a:	f7ff fe89 	bl	b6760 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6a4e:	4604      	mov	r4, r0
   b6a50:	b910      	cbnz	r0, b6a58 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6a52:	f240 2239 	movw	r2, #569	; 0x239
   b6a56:	e79c      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6a58:	4633      	mov	r3, r6
   b6a5a:	22c0      	movs	r2, #192	; 0xc0
   b6a5c:	2117      	movs	r1, #23
   b6a5e:	4628      	mov	r0, r5
   b6a60:	f7ff fe20 	bl	b66a4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6a64:	4604      	mov	r4, r0
   b6a66:	b910      	cbnz	r0, b6a6e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6a68:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6a6c:	e791      	b.n	b6992 <_ZN6AB180513deepPowerDownEi+0x22>
   b6a6e:	f001 ff0b 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6a72:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6ac8 <_ZN6AB180513deepPowerDownEi+0x158>
   b6a76:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6ab8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6a7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6a7e:	4606      	mov	r6, r0
   b6a80:	434f      	muls	r7, r1
   b6a82:	f001 ff01 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
   b6a86:	1b80      	subs	r0, r0, r6
   b6a88:	42b8      	cmp	r0, r7
   b6a8a:	d20e      	bcs.n	b6aaa <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6a8c:	2201      	movs	r2, #1
   b6a8e:	2117      	movs	r1, #23
   b6a90:	4628      	mov	r0, r5
   b6a92:	f7ff fdbd 	bl	b6610 <_ZN6AB180512readRegisterEhb>
   b6a96:	4649      	mov	r1, r9
   b6a98:	4602      	mov	r2, r0
   b6a9a:	4640      	mov	r0, r8
   b6a9c:	f7fd fbe2 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6aa4:	f002 fa82 	bl	b8fac <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6aa8:	e7eb      	b.n	b6a82 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6aaa:	4906      	ldr	r1, [pc, #24]	; (b6ac4 <_ZN6AB180513deepPowerDownEi+0x154>)
   b6aac:	4802      	ldr	r0, [pc, #8]	; (b6ab8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6aae:	f7ff fceb 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6ab2:	f004 fbfa 	bl	bb2aa <_ZN11SystemClass5resetEv>
    return true;
   b6ab6:	e770      	b.n	b699a <_ZN6AB180513deepPowerDownEi+0x2a>
   b6ab8:	2003e3d8 	.word	0x2003e3d8
   b6abc:	000be8bc 	.word	0x000be8bc
   b6ac0:	000be8b1 	.word	0x000be8b1
   b6ac4:	000be8e2 	.word	0x000be8e2
   b6ac8:	000be8cd 	.word	0x000be8cd

000b6acc <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6acc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ad0:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6ad4:	4605      	mov	r5, r0
   b6ad6:	460c      	mov	r4, r1
   b6ad8:	4691      	mov	r9, r2
   b6ada:	461f      	mov	r7, r3
    if (lock) {
   b6adc:	f1ba 0f00 	cmp.w	sl, #0
   b6ae0:	d002      	beq.n	b6ae8 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6ae2:	6840      	ldr	r0, [r0, #4]
   b6ae4:	f002 fcec 	bl	b94c0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6ae8:	b307      	cbz	r7, b6b2c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6aea:	2f20      	cmp	r7, #32
   b6aec:	463e      	mov	r6, r7
   b6aee:	bf28      	it	cs
   b6af0:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6af2:	2c7f      	cmp	r4, #127	; 0x7f
   b6af4:	d826      	bhi.n	b6b44 <_ZN6AB18057readRamEjPhjb+0x78>
   b6af6:	1933      	adds	r3, r6, r4
   b6af8:	2b80      	cmp	r3, #128	; 0x80
   b6afa:	d901      	bls.n	b6b00 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6afc:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6b00:	2301      	movs	r3, #1
   b6b02:	2204      	movs	r2, #4
   b6b04:	213f      	movs	r1, #63	; 0x3f
   b6b06:	4628      	mov	r0, r5
   b6b08:	f7ff fe77 	bl	b67fa <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6b0c:	2300      	movs	r3, #0
   b6b0e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6b12:	9300      	str	r3, [sp, #0]
   b6b14:	464a      	mov	r2, r9
   b6b16:	4633      	mov	r3, r6
   b6b18:	b2c9      	uxtb	r1, r1
   b6b1a:	4628      	mov	r0, r5
   b6b1c:	f7ff fce4 	bl	b64e8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6b20:	4680      	mov	r8, r0
   b6b22:	b128      	cbz	r0, b6b30 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6b24:	4434      	add	r4, r6
        dataLen -= count;
   b6b26:	1bbf      	subs	r7, r7, r6
        data += count;
   b6b28:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6b2a:	e7dd      	b.n	b6ae8 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6b2c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6b30:	f1ba 0f00 	cmp.w	sl, #0
   b6b34:	d002      	beq.n	b6b3c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6b36:	6868      	ldr	r0, [r5, #4]
   b6b38:	f002 fccb 	bl	b94d2 <_ZN7TwoWire6unlockEv>
}
   b6b3c:	4640      	mov	r0, r8
   b6b3e:	b002      	add	sp, #8
   b6b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6b44:	2301      	movs	r3, #1
   b6b46:	2204      	movs	r2, #4
   b6b48:	213f      	movs	r1, #63	; 0x3f
   b6b4a:	4628      	mov	r0, r5
   b6b4c:	f7ff feb6 	bl	b68bc <_ZN6AB180514setRegisterBitEhhb>
   b6b50:	e7dc      	b.n	b6b0c <_ZN6AB18057readRamEjPhjb+0x40>

000b6b52 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6b52:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6b56:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6b5a:	4605      	mov	r5, r0
   b6b5c:	460c      	mov	r4, r1
   b6b5e:	4691      	mov	r9, r2
   b6b60:	461f      	mov	r7, r3
    if (lock) {
   b6b62:	f1ba 0f00 	cmp.w	sl, #0
   b6b66:	d002      	beq.n	b6b6e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6b68:	6840      	ldr	r0, [r0, #4]
   b6b6a:	f002 fca9 	bl	b94c0 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6b6e:	b307      	cbz	r7, b6bb2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6b70:	2f1f      	cmp	r7, #31
   b6b72:	463e      	mov	r6, r7
   b6b74:	bf28      	it	cs
   b6b76:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6b78:	2c7f      	cmp	r4, #127	; 0x7f
   b6b7a:	d826      	bhi.n	b6bca <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6b7c:	1933      	adds	r3, r6, r4
   b6b7e:	2b80      	cmp	r3, #128	; 0x80
   b6b80:	d901      	bls.n	b6b86 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6b82:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6b86:	2301      	movs	r3, #1
   b6b88:	2204      	movs	r2, #4
   b6b8a:	213f      	movs	r1, #63	; 0x3f
   b6b8c:	4628      	mov	r0, r5
   b6b8e:	f7ff fe34 	bl	b67fa <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6b92:	2300      	movs	r3, #0
   b6b94:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6b98:	9300      	str	r3, [sp, #0]
   b6b9a:	464a      	mov	r2, r9
   b6b9c:	4633      	mov	r3, r6
   b6b9e:	b2c9      	uxtb	r1, r1
   b6ba0:	4628      	mov	r0, r5
   b6ba2:	f7ff fd43 	bl	b662c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6ba6:	4680      	mov	r8, r0
   b6ba8:	b128      	cbz	r0, b6bb6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6baa:	4434      	add	r4, r6
        dataLen -= count;
   b6bac:	1bbf      	subs	r7, r7, r6
        data += count;
   b6bae:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6bb0:	e7dd      	b.n	b6b6e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6bb2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6bb6:	f1ba 0f00 	cmp.w	sl, #0
   b6bba:	d002      	beq.n	b6bc2 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6bbc:	6868      	ldr	r0, [r5, #4]
   b6bbe:	f002 fc88 	bl	b94d2 <_ZN7TwoWire6unlockEv>
}
   b6bc2:	4640      	mov	r0, r8
   b6bc4:	b002      	add	sp, #8
   b6bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6bca:	2301      	movs	r3, #1
   b6bcc:	2204      	movs	r2, #4
   b6bce:	213f      	movs	r1, #63	; 0x3f
   b6bd0:	4628      	mov	r0, r5
   b6bd2:	f7ff fe73 	bl	b68bc <_ZN6AB180514setRegisterBitEhhb>
   b6bd6:	e7dc      	b.n	b6b92 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6bd8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6bd8:	b530      	push	{r4, r5, lr}
   b6bda:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6bdc:	680d      	ldr	r5, [r1, #0]
   b6bde:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6be2:	9503      	str	r5, [sp, #12]
   b6be4:	684d      	ldr	r5, [r1, #4]
   b6be6:	9502      	str	r5, [sp, #8]
   b6be8:	688d      	ldr	r5, [r1, #8]
   b6bea:	9501      	str	r5, [sp, #4]
   b6bec:	68c9      	ldr	r1, [r1, #12]
   b6bee:	9100      	str	r1, [sp, #0]
   b6bf0:	3301      	adds	r3, #1
   b6bf2:	4904      	ldr	r1, [pc, #16]	; (b6c04 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6bf4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6bf8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6bfa:	f004 faef 	bl	bb1dc <_ZN6String6formatEPKcz>
}
   b6bfe:	4620      	mov	r0, r4
   b6c00:	b005      	add	sp, #20
   b6c02:	bd30      	pop	{r4, r5, pc}
   b6c04:	000be8f4 	.word	0x000be8f4

000b6c08 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6c08:	0903      	lsrs	r3, r0, #4
}
   b6c0a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6c0c:	f000 000f 	and.w	r0, r0, #15
}
   b6c10:	fb02 0003 	mla	r0, r2, r3, r0
   b6c14:	4770      	bx	lr

000b6c16 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6c16:	b538      	push	{r3, r4, r5, lr}
   b6c18:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6c1a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6c1c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b6c1e:	f7ff fff3 	bl	b6c08 <_ZN6AB180510bcdToValueEh>
   b6c22:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6c24:	7860      	ldrb	r0, [r4, #1]
   b6c26:	f7ff ffef 	bl	b6c08 <_ZN6AB180510bcdToValueEh>
   b6c2a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6c2c:	78a0      	ldrb	r0, [r4, #2]
   b6c2e:	f7ff ffeb 	bl	b6c08 <_ZN6AB180510bcdToValueEh>
   b6c32:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6c34:	78e0      	ldrb	r0, [r4, #3]
   b6c36:	f7ff ffe7 	bl	b6c08 <_ZN6AB180510bcdToValueEh>
   b6c3a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6c3c:	7920      	ldrb	r0, [r4, #4]
   b6c3e:	f7ff ffe3 	bl	b6c08 <_ZN6AB180510bcdToValueEh>
   b6c42:	3801      	subs	r0, #1
   b6c44:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6c46:	b92d      	cbnz	r5, b6c54 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6c48:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6c4a:	7828      	ldrb	r0, [r5, #0]
   b6c4c:	f7ff ffdc 	bl	b6c08 <_ZN6AB180510bcdToValueEh>
   b6c50:	6188      	str	r0, [r1, #24]
}
   b6c52:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6c54:	7960      	ldrb	r0, [r4, #5]
   b6c56:	f7ff ffd7 	bl	b6c08 <_ZN6AB180510bcdToValueEh>
   b6c5a:	3064      	adds	r0, #100	; 0x64
   b6c5c:	1da5      	adds	r5, r4, #6
   b6c5e:	6148      	str	r0, [r1, #20]
   b6c60:	e7f3      	b.n	b6c4a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6c64 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6c64:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6c66:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6c68:	b088      	sub	sp, #32
   b6c6a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6c6c:	461a      	mov	r2, r3
   b6c6e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6c70:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6c72:	f7ff fda4 	bl	b67be <_ZN6AB180510isBitClearEhhb>
   b6c76:	b1f0      	cbz	r0, b6cb6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6c78:	2308      	movs	r3, #8
   b6c7a:	2601      	movs	r6, #1
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	9600      	str	r6, [sp, #0]
   b6c80:	eb0d 0203 	add.w	r2, sp, r3
   b6c84:	2100      	movs	r1, #0
   b6c86:	f7ff fc2f 	bl	b64e8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6c8a:	4604      	mov	r4, r0
   b6c8c:	b198      	cbz	r0, b6cb6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b6c8e:	4632      	mov	r2, r6
   b6c90:	4629      	mov	r1, r5
   b6c92:	f10d 0009 	add.w	r0, sp, #9
   b6c96:	f7ff ffbe 	bl	b6c16 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6c9a:	a804      	add	r0, sp, #16
   b6c9c:	f7ff ff9c 	bl	b6bd8 <_ZN6AB180510tmToStringEPK2tm>
   b6ca0:	4808      	ldr	r0, [pc, #32]	; (b6cc4 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b6ca2:	9a04      	ldr	r2, [sp, #16]
   b6ca4:	4908      	ldr	r1, [pc, #32]	; (b6cc8 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6ca6:	f7fd fadd 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6caa:	a804      	add	r0, sp, #16
   b6cac:	f004 f9dc 	bl	bb068 <_ZN6StringD1Ev>
}
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	b008      	add	sp, #32
   b6cb4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b6cb6:	2224      	movs	r2, #36	; 0x24
   b6cb8:	2100      	movs	r1, #0
   b6cba:	4628      	mov	r0, r5
   b6cbc:	f006 fddc 	bl	bd878 <memset>
   b6cc0:	2400      	movs	r4, #0
   b6cc2:	e7f5      	b.n	b6cb0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b6cc4:	2003e3d8 	.word	0x2003e3d8
   b6cc8:	000be912 	.word	0x000be912

000b6ccc <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b6ccc:	b530      	push	{r4, r5, lr}
   b6cce:	b08b      	sub	sp, #44	; 0x2c
   b6cd0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6cd2:	a901      	add	r1, sp, #4
   b6cd4:	f7ff ffc6 	bl	b6c64 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6cd8:	4604      	mov	r4, r0
   b6cda:	b120      	cbz	r0, b6ce6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b6cdc:	a801      	add	r0, sp, #4
   b6cde:	f002 f951 	bl	b8f84 <mktime>
   b6ce2:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	b00b      	add	sp, #44	; 0x2c
   b6cea:	bd30      	pop	{r4, r5, pc}

000b6cec <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b6cec:	230a      	movs	r3, #10
   b6cee:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6cf2:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6cf6:	fb91 f2f3 	sdiv	r2, r1, r3
   b6cfa:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b6cfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6d02:	b2c0      	uxtb	r0, r0
   b6d04:	4770      	bx	lr

000b6d06 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6d06:	b570      	push	{r4, r5, r6, lr}
   b6d08:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6d0a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6d0c:	460c      	mov	r4, r1
   b6d0e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6d10:	f7ff ffec 	bl	b6cec <_ZN6AB180510valueToBcdEi>
   b6d14:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6d16:	6868      	ldr	r0, [r5, #4]
   b6d18:	f7ff ffe8 	bl	b6cec <_ZN6AB180510valueToBcdEi>
   b6d1c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b6d1e:	68a8      	ldr	r0, [r5, #8]
   b6d20:	f7ff ffe4 	bl	b6cec <_ZN6AB180510valueToBcdEi>
   b6d24:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6d26:	68e8      	ldr	r0, [r5, #12]
   b6d28:	f7ff ffe0 	bl	b6cec <_ZN6AB180510valueToBcdEi>
   b6d2c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6d2e:	6928      	ldr	r0, [r5, #16]
   b6d30:	3001      	adds	r0, #1
   b6d32:	f7ff ffdb 	bl	b6cec <_ZN6AB180510valueToBcdEi>
   b6d36:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6d38:	b92e      	cbnz	r6, b6d46 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6d3a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6d3c:	69a8      	ldr	r0, [r5, #24]
   b6d3e:	f7ff ffd5 	bl	b6cec <_ZN6AB180510valueToBcdEi>
   b6d42:	7030      	strb	r0, [r6, #0]
}
   b6d44:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6d46:	696a      	ldr	r2, [r5, #20]
   b6d48:	2364      	movs	r3, #100	; 0x64
   b6d4a:	fb92 f0f3 	sdiv	r0, r2, r3
   b6d4e:	fb03 2010 	mls	r0, r3, r0, r2
   b6d52:	f7ff ffcb 	bl	b6cec <_ZN6AB180510valueToBcdEi>
   b6d56:	1da6      	adds	r6, r4, #6
   b6d58:	7160      	strb	r0, [r4, #5]
   b6d5a:	e7ef      	b.n	b6d3c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6d5c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d5e:	b087      	sub	sp, #28
   b6d60:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6d62:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6d64:	4616      	mov	r6, r2
   b6d66:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6d68:	f7ff ff36 	bl	b6bd8 <_ZN6AB180510tmToStringEPK2tm>
   b6d6c:	481e      	ldr	r0, [pc, #120]	; (b6de8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6d6e:	9a02      	ldr	r2, [sp, #8]
   b6d70:	491e      	ldr	r1, [pc, #120]	; (b6dec <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b6d72:	f7fd fa77 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6d76:	a802      	add	r0, sp, #8
   b6d78:	f004 f976 	bl	bb068 <_ZN6StringD1Ev>
    if (lock) {
   b6d7c:	b116      	cbz	r6, b6d84 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6d7e:	6868      	ldr	r0, [r5, #4]
   b6d80:	f002 fb9e 	bl	b94c0 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6d84:	4620      	mov	r0, r4
   b6d86:	2201      	movs	r2, #1
   b6d88:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6d8c:	2700      	movs	r7, #0
   b6d8e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b6d92:	f7ff ffb8 	bl	b6d06 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6d96:	2301      	movs	r3, #1
   b6d98:	461a      	mov	r2, r3
   b6d9a:	2110      	movs	r1, #16
   b6d9c:	4628      	mov	r0, r5
   b6d9e:	f7ff fd8d 	bl	b68bc <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b6da2:	4604      	mov	r4, r0
   b6da4:	b1e8      	cbz	r0, b6de2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6da6:	2308      	movs	r3, #8
   b6da8:	9700      	str	r7, [sp, #0]
   b6daa:	eb0d 0203 	add.w	r2, sp, r3
   b6dae:	4639      	mov	r1, r7
   b6db0:	4628      	mov	r0, r5
   b6db2:	f7ff fc3b 	bl	b662c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b6db6:	4604      	mov	r4, r0
   b6db8:	b160      	cbz	r0, b6dd4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6dba:	2301      	movs	r3, #1
   b6dbc:	461a      	mov	r2, r3
   b6dbe:	2110      	movs	r1, #16
   b6dc0:	4628      	mov	r0, r5
   b6dc2:	f7ff fd1a 	bl	b67fa <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b6dc6:	b116      	cbz	r6, b6dce <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b6dc8:	6868      	ldr	r0, [r5, #4]
   b6dca:	f002 fb82 	bl	b94d2 <_ZN7TwoWire6unlockEv>
}
   b6dce:	4620      	mov	r0, r4
   b6dd0:	b007      	add	sp, #28
   b6dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6dd4:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6dd8:	4905      	ldr	r1, [pc, #20]	; (b6df0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b6dda:	4803      	ldr	r0, [pc, #12]	; (b6de8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6ddc:	f7ff fb54 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
   b6de0:	e7f1      	b.n	b6dc6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6de2:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6de6:	e7f7      	b.n	b6dd8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6de8:	2003e3d8 	.word	0x2003e3d8
   b6dec:	000be920 	.word	0x000be920
   b6df0:	000be92e 	.word	0x000be92e

000b6df4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6df4:	b513      	push	{r0, r1, r4, lr}
   b6df6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6df8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6dfa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b6dfe:	f006 fced 	bl	bd7dc <gmtime>
    return setRtcFromTm(tm, lock);
   b6e02:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6e06:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6e08:	4620      	mov	r0, r4
   b6e0a:	f7ff ffa7 	bl	b6d5c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6e0e:	b002      	add	sp, #8
   b6e10:	bd10      	pop	{r4, pc}
	...

000b6e14 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6e16:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6e18:	b089      	sub	sp, #36	; 0x24
   b6e1a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6e1c:	bb75      	cbnz	r5, b6e7c <_ZN6AB18054loopEv+0x68>
   b6e1e:	f004 fc09 	bl	bb634 <_ZN9TimeClass7isValidEv>
   b6e22:	b358      	cbz	r0, b6e7c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b6e24:	2600      	movs	r6, #0
   b6e26:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6e28:	a904      	add	r1, sp, #16
   b6e2a:	4628      	mov	r0, r5
        tm = 0;
   b6e2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6e30:	f001 ffd0 	bl	b8dd4 <spark_sync_time_last>
   b6e34:	b310      	cbz	r0, b6e7c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6e36:	2501      	movs	r5, #1
   b6e38:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6e3a:	f004 fc18 	bl	bb66e <_ZN9TimeClass3nowEv>
   b6e3e:	17c3      	asrs	r3, r0, #31
   b6e40:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6e44:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6e46:	9500      	str	r5, [sp, #0]
   b6e48:	4620      	mov	r0, r4
   b6e4a:	f7ff ffd3 	bl	b6df4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6e4e:	a902      	add	r1, sp, #8
   b6e50:	4620      	mov	r0, r4
        time = 0;
   b6e52:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6e56:	f7ff ff39 	bl	b6ccc <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6e5a:	4b13      	ldr	r3, [pc, #76]	; (b6ea8 <_ZN6AB18054loopEv+0x94>)
   b6e5c:	4913      	ldr	r1, [pc, #76]	; (b6eac <_ZN6AB18054loopEv+0x98>)
   b6e5e:	681b      	ldr	r3, [r3, #0]
   b6e60:	9300      	str	r3, [sp, #0]
   b6e62:	a804      	add	r0, sp, #16
   b6e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6e68:	f004 fba2 	bl	bb5b0 <_ZN9TimeClass6formatExPKc>
   b6e6c:	4810      	ldr	r0, [pc, #64]	; (b6eb0 <_ZN6AB18054loopEv+0x9c>)
   b6e6e:	9a04      	ldr	r2, [sp, #16]
   b6e70:	4910      	ldr	r1, [pc, #64]	; (b6eb4 <_ZN6AB18054loopEv+0xa0>)
   b6e72:	f7fd f9f7 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6e76:	a804      	add	r0, sp, #16
   b6e78:	f004 f8f6 	bl	bb068 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6e7c:	6963      	ldr	r3, [r4, #20]
   b6e7e:	b18b      	cbz	r3, b6ea4 <_ZN6AB18054loopEv+0x90>
   b6e80:	f001 fd02 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6e84:	6923      	ldr	r3, [r4, #16]
   b6e86:	1ac0      	subs	r0, r0, r3
   b6e88:	6963      	ldr	r3, [r4, #20]
   b6e8a:	4298      	cmp	r0, r3
   b6e8c:	d30a      	bcc.n	b6ea4 <_ZN6AB18054loopEv+0x90>
   b6e8e:	f001 fcfb 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6e92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6e96:	6120      	str	r0, [r4, #16]
            setWDT();
   b6e98:	4620      	mov	r0, r4
}
   b6e9a:	b009      	add	sp, #36	; 0x24
   b6e9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6ea0:	f7ff bc0c 	b.w	b66bc <_ZN6AB18056setWDTEi>
}
   b6ea4:	b009      	add	sp, #36	; 0x24
   b6ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6ea8:	2003dec8 	.word	0x2003dec8
   b6eac:	2003e6a8 	.word	0x2003e6a8
   b6eb0:	2003e3d8 	.word	0x2003e3d8
   b6eb4:	000be949 	.word	0x000be949

000b6eb8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6eb8:	b530      	push	{r4, r5, lr}
   b6eba:	4604      	mov	r4, r0
   b6ebc:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6ebe:	b111      	cbz	r1, b6ec6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6ec0:	6840      	ldr	r0, [r0, #4]
   b6ec2:	f002 faab 	bl	b941c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6ec6:	4620      	mov	r0, r4
   b6ec8:	f7ff fb64 	bl	b6594 <_ZN6AB180510detectChipEv>
   b6ecc:	ad06      	add	r5, sp, #24
   b6ece:	2800      	cmp	r0, #0
   b6ed0:	d037      	beq.n	b6f42 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6ed2:	4620      	mov	r0, r4
   b6ed4:	f7ff fc9c 	bl	b6810 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6ed8:	2301      	movs	r3, #1
   b6eda:	461a      	mov	r2, r3
   b6edc:	2110      	movs	r1, #16
   b6ede:	4620      	mov	r0, r4
   b6ee0:	f7ff fc6d 	bl	b67be <_ZN6AB180510isBitClearEhhb>
   b6ee4:	b1d8      	cbz	r0, b6f1e <_ZN6AB18055setupEb+0x66>
   b6ee6:	f004 fba5 	bl	bb634 <_ZN9TimeClass7isValidEv>
   b6eea:	b9c0      	cbnz	r0, b6f1e <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6eec:	a902      	add	r1, sp, #8
   b6eee:	4620      	mov	r0, r4
   b6ef0:	f7ff feec 	bl	b6ccc <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6ef8:	f004 faa1 	bl	bb43e <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6efc:	4b13      	ldr	r3, [pc, #76]	; (b6f4c <_ZN6AB18055setupEb+0x94>)
   b6efe:	4914      	ldr	r1, [pc, #80]	; (b6f50 <_ZN6AB18055setupEb+0x98>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	9300      	str	r3, [sp, #0]
   b6f04:	4628      	mov	r0, r5
   b6f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6f0a:	f004 fb51 	bl	bb5b0 <_ZN9TimeClass6formatExPKc>
   b6f0e:	4811      	ldr	r0, [pc, #68]	; (b6f54 <_ZN6AB18055setupEb+0x9c>)
   b6f10:	9a06      	ldr	r2, [sp, #24]
   b6f12:	4911      	ldr	r1, [pc, #68]	; (b6f58 <_ZN6AB18055setupEb+0xa0>)
   b6f14:	f7fd f9a6 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6f18:	4628      	mov	r0, r5
   b6f1a:	f004 f8a5 	bl	bb068 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6f1e:	4b0f      	ldr	r3, [pc, #60]	; (b6f5c <_ZN6AB18055setupEb+0xa4>)
   b6f20:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f22:	4b0f      	ldr	r3, [pc, #60]	; (b6f60 <_ZN6AB18055setupEb+0xa8>)
   b6f24:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6f26:	4b0f      	ldr	r3, [pc, #60]	; (b6f64 <_ZN6AB18055setupEb+0xac>)
   b6f28:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6f2e:	2300      	movs	r3, #0
   b6f30:	a802      	add	r0, sp, #8
   b6f32:	9500      	str	r5, [sp, #0]
   b6f34:	f7fd fdae 	bl	b4a94 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6f38:	4628      	mov	r0, r5
   b6f3a:	f7fd f949 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
}
   b6f3e:	b00b      	add	sp, #44	; 0x2c
   b6f40:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6f42:	4909      	ldr	r1, [pc, #36]	; (b6f68 <_ZN6AB18055setupEb+0xb0>)
   b6f44:	4803      	ldr	r0, [pc, #12]	; (b6f54 <_ZN6AB18055setupEb+0x9c>)
   b6f46:	f7ff fa9f 	bl	b6488 <_ZNK5spark6Logger5errorEPKcz>
   b6f4a:	e7e8      	b.n	b6f1e <_ZN6AB18055setupEb+0x66>
   b6f4c:	2003dec8 	.word	0x2003dec8
   b6f50:	2003e6a8 	.word	0x2003e6a8
   b6f54:	2003e3d8 	.word	0x2003e3d8
   b6f58:	000be95f 	.word	0x000be95f
   b6f5c:	000b6741 	.word	0x000b6741
   b6f60:	000b417f 	.word	0x000b417f
   b6f64:	000b416b 	.word	0x000b416b
   b6f68:	000be97c 	.word	0x000be97c

000b6f6c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6f6c:	4b01      	ldr	r3, [pc, #4]	; (b6f74 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6f6e:	4a02      	ldr	r2, [pc, #8]	; (b6f78 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6f70:	601a      	str	r2, [r3, #0]
}
   b6f72:	4770      	bx	lr
   b6f74:	2003e3d8 	.word	0x2003e3d8
   b6f78:	000be994 	.word	0x000be994

000b6f7c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b6f7c:	4770      	bx	lr

000b6f7e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b6f7e:	b510      	push	{r4, lr}
}
   b6f80:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b6f82:	4604      	mov	r4, r0
}
   b6f84:	f7fd f88b 	bl	b409e <_ZdlPvj>
   b6f88:	4620      	mov	r0, r4
   b6f8a:	bd10      	pop	{r4, pc}

000b6f8c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b6f8c:	6803      	ldr	r3, [r0, #0]
   b6f8e:	b2c9      	uxtb	r1, r1
   b6f90:	689b      	ldr	r3, [r3, #8]
   b6f92:	4718      	bx	r3

000b6f94 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b6f94:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b6f96:	4d03      	ldr	r5, [pc, #12]	; (b6fa4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6f98:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b6f9c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6fa0:	bd30      	pop	{r4, r5, pc}
   b6fa2:	bf00      	nop
   b6fa4:	000be9c0 	.word	0x000be9c0

000b6fa8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6fa8:	6840      	ldr	r0, [r0, #4]
   b6faa:	f002 ba37 	b.w	b941c <_ZN7TwoWire5beginEv>

000b6fae <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6fae:	b510      	push	{r4, lr}
   b6fb0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b6fb2:	6800      	ldr	r0, [r0, #0]
   b6fb4:	f002 fa8d 	bl	b94d2 <_ZN7TwoWire6unlockEv>
   b6fb8:	4620      	mov	r0, r4
   b6fba:	bd10      	pop	{r4, pc}

000b6fbc <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6fc0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6fc2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6fc4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6fc6:	460d      	mov	r5, r1
   b6fc8:	4616      	mov	r6, r2
   b6fca:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b6fcc:	f002 fa78 	bl	b94c0 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6fd0:	b1a7      	cbz	r7, b6ffc <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6fd2:	68e1      	ldr	r1, [r4, #12]
   b6fd4:	6860      	ldr	r0, [r4, #4]
   b6fd6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6fda:	f002 fa52 	bl	b9482 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6fde:	0a29      	lsrs	r1, r5, #8
   b6fe0:	6860      	ldr	r0, [r4, #4]
   b6fe2:	f7ff ffd3 	bl	b6f8c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6fe6:	4629      	mov	r1, r5
   b6fe8:	6860      	ldr	r0, [r4, #4]
   b6fea:	f7ff ffcf 	bl	b6f8c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b6fee:	6860      	ldr	r0, [r4, #4]
   b6ff0:	2100      	movs	r1, #0
   b6ff2:	f002 fa61 	bl	b94b8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6ff6:	b148      	cbz	r0, b700c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6ff8:	2400      	movs	r4, #0
   b6ffa:	e000      	b.n	b6ffe <_ZN6MB85RC8readDataEjPhj+0x42>
   b6ffc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6ffe:	a801      	add	r0, sp, #4
   b7000:	f7ff ffd5 	bl	b6fae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b7004:	4620      	mov	r0, r4
   b7006:	b003      	add	sp, #12
   b7008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b700c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b700e:	7b21      	ldrb	r1, [r4, #12]
   b7010:	6860      	ldr	r0, [r4, #4]
   b7012:	46b8      	mov	r8, r7
   b7014:	bf28      	it	cs
   b7016:	f04f 0820 	movcs.w	r8, #32
   b701a:	2301      	movs	r3, #1
   b701c:	4642      	mov	r2, r8
   b701e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7022:	f002 fa18 	bl	b9456 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b7026:	f004 fd93 	bl	bbb50 <_Z19__fetch_global_Wirev>
   b702a:	6803      	ldr	r3, [r0, #0]
   b702c:	691b      	ldr	r3, [r3, #16]
   b702e:	4798      	blx	r3
   b7030:	4540      	cmp	r0, r8
   b7032:	dbe1      	blt.n	b6ff8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b7034:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b7038:	f004 fd8a 	bl	bbb50 <_Z19__fetch_global_Wirev>
   b703c:	6803      	ldr	r3, [r0, #0]
   b703e:	695b      	ldr	r3, [r3, #20]
   b7040:	4798      	blx	r3
   b7042:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b7046:	454e      	cmp	r6, r9
   b7048:	d1f6      	bne.n	b7038 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b704a:	4445      	add	r5, r8
				dataLen--;
   b704c:	eba7 0708 	sub.w	r7, r7, r8
   b7050:	e7be      	b.n	b6fd0 <_ZN6MB85RC8readDataEjPhj+0x14>

000b7052 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b7052:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7056:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b7058:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b705a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b705c:	460e      	mov	r6, r1
   b705e:	4690      	mov	r8, r2
   b7060:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b7062:	f002 fa2d 	bl	b94c0 <_ZN7TwoWire4lockEv>
   b7066:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b706a:	f1b9 0f00 	cmp.w	r9, #0
   b706e:	d02a      	beq.n	b70c6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b7070:	b34d      	cbz	r5, b70c6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b7072:	68e1      	ldr	r1, [r4, #12]
   b7074:	6860      	ldr	r0, [r4, #4]
   b7076:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b707a:	f002 fa02 	bl	b9482 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b707e:	0a31      	lsrs	r1, r6, #8
   b7080:	6860      	ldr	r0, [r4, #4]
   b7082:	f7ff ff83 	bl	b6f8c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b7086:	6860      	ldr	r0, [r4, #4]
   b7088:	4631      	mov	r1, r6
   b708a:	f7ff ff7f 	bl	b6f8c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b708e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b7092:	4647      	mov	r7, r8
   b7094:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b7098:	6860      	ldr	r0, [r4, #4]
   b709a:	f817 1b01 	ldrb.w	r1, [r7], #1
   b709e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b70a0:	3d01      	subs	r5, #1
				wire.write(*data);
   b70a2:	689b      	ldr	r3, [r3, #8]
   b70a4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b70a6:	4555      	cmp	r5, sl
   b70a8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b70ac:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b70ae:	d001      	beq.n	b70b4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b70b0:	2d00      	cmp	r5, #0
   b70b2:	d1f1      	bne.n	b7098 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b70b4:	6860      	ldr	r0, [r4, #4]
   b70b6:	2101      	movs	r1, #1
   b70b8:	f002 f9fe 	bl	b94b8 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b70bc:	2800      	cmp	r0, #0
   b70be:	d0d7      	beq.n	b7070 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b70c0:	f04f 0900 	mov.w	r9, #0
   b70c4:	e7d1      	b.n	b706a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b70c6:	a801      	add	r0, sp, #4
   b70c8:	f7ff ff71 	bl	b6fae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b70cc:	4648      	mov	r0, r9
   b70ce:	b003      	add	sp, #12
   b70d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b70d4 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b70d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b70d8:	b08b      	sub	sp, #44	; 0x2c
   b70da:	460e      	mov	r6, r1
   b70dc:	4615      	mov	r5, r2
   b70de:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b70e0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b70e2:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b70e4:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b70e6:	f002 f9eb 	bl	b94c0 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b70ea:	42ae      	cmp	r6, r5
   b70ec:	d229      	bcs.n	b7142 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b70ee:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b70f0:	4425      	add	r5, r4
			while(numBytes > 0) {
   b70f2:	b18c      	cbz	r4, b7118 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b70f4:	2c1e      	cmp	r4, #30
   b70f6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b70f8:	f8d8 3000 	ldr.w	r3, [r8]
   b70fc:	bf28      	it	cs
   b70fe:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b7100:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b7102:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7106:	aa02      	add	r2, sp, #8
   b7108:	463b      	mov	r3, r7
   b710a:	4631      	mov	r1, r6
   b710c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b710e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b7110:	47c8      	blx	r9
				if (!result) {
   b7112:	b948      	cbnz	r0, b7128 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b7114:	2400      	movs	r4, #0
   b7116:	e000      	b.n	b711a <_ZN6MB85RC8moveDataEjjj+0x46>
   b7118:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b711a:	a801      	add	r0, sp, #4
   b711c:	f7ff ff47 	bl	b6fae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b7120:	4620      	mov	r0, r4
   b7122:	b00b      	add	sp, #44	; 0x2c
   b7124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b7128:	f8d8 3000 	ldr.w	r3, [r8]
   b712c:	aa02      	add	r2, sp, #8
   b712e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7132:	4629      	mov	r1, r5
   b7134:	463b      	mov	r3, r7
   b7136:	4640      	mov	r0, r8
   b7138:	47c8      	blx	r9
				if (!result) {
   b713a:	2800      	cmp	r0, #0
   b713c:	d0ea      	beq.n	b7114 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b713e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7140:	e7d7      	b.n	b70f2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b7142:	d9e9      	bls.n	b7118 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b7144:	2c00      	cmp	r4, #0
   b7146:	d0e7      	beq.n	b7118 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b7148:	f8d8 3000 	ldr.w	r3, [r8]
   b714c:	2c1e      	cmp	r4, #30
   b714e:	4627      	mov	r7, r4
   b7150:	bf28      	it	cs
   b7152:	271e      	movcs	r7, #30
   b7154:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b7158:	aa02      	add	r2, sp, #8
   b715a:	463b      	mov	r3, r7
   b715c:	4631      	mov	r1, r6
   b715e:	4640      	mov	r0, r8
   b7160:	47c8      	blx	r9
				if (!result) {
   b7162:	2800      	cmp	r0, #0
   b7164:	d0d6      	beq.n	b7114 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b7166:	f8d8 3000 	ldr.w	r3, [r8]
   b716a:	aa02      	add	r2, sp, #8
   b716c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7170:	4629      	mov	r1, r5
   b7172:	463b      	mov	r3, r7
   b7174:	4640      	mov	r0, r8
   b7176:	47c8      	blx	r9
				if (!result) {
   b7178:	2800      	cmp	r0, #0
   b717a:	d0cb      	beq.n	b7114 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b717c:	443e      	add	r6, r7
				framAddrTo += count;
   b717e:	443d      	add	r5, r7
				numBytes -= count;
   b7180:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b7182:	e7df      	b.n	b7144 <_ZN6MB85RC8moveDataEjjj+0x70>

000b7184 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b7184:	6001      	str	r1, [r0, #0]
   b7186:	7102      	strb	r2, [r0, #4]
{
}
   b7188:	4770      	bx	lr

000b718a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b718a:	6800      	ldr	r0, [r0, #0]
   b718c:	6803      	ldr	r3, [r0, #0]
   b718e:	68db      	ldr	r3, [r3, #12]
   b7190:	4718      	bx	r3

000b7192 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b7192:	6800      	ldr	r0, [r0, #0]
   b7194:	6803      	ldr	r3, [r0, #0]
   b7196:	6a1b      	ldr	r3, [r3, #32]
   b7198:	4718      	bx	r3

000b719a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b719a:	6800      	ldr	r0, [r0, #0]
   b719c:	6803      	ldr	r3, [r0, #0]
   b719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b71a0:	4718      	bx	r3

000b71a2 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b71a2:	7900      	ldrb	r0, [r0, #4]
   b71a4:	4770      	bx	lr

000b71a6 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b71a6:	6800      	ldr	r0, [r0, #0]
   b71a8:	6803      	ldr	r3, [r0, #0]
   b71aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b71ac:	4718      	bx	r3

000b71ae <_ZN10RHDatagram6sendtoEPhhh>:
{
   b71ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b71b0:	4605      	mov	r5, r0
   b71b2:	460c      	mov	r4, r1
    setHeaderTo(address);
   b71b4:	4619      	mov	r1, r3
{
   b71b6:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b71b8:	f7ff fff5 	bl	b71a6 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b71bc:	6828      	ldr	r0, [r5, #0]
   b71be:	9a01      	ldr	r2, [sp, #4]
   b71c0:	6803      	ldr	r3, [r0, #0]
   b71c2:	695b      	ldr	r3, [r3, #20]
   b71c4:	4621      	mov	r1, r4
}
   b71c6:	b003      	add	sp, #12
   b71c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b71cc:	4718      	bx	r3

000b71ce <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b71ce:	6800      	ldr	r0, [r0, #0]
   b71d0:	6803      	ldr	r3, [r0, #0]
   b71d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71d4:	4718      	bx	r3

000b71d6 <_ZN10RHDatagram14setThisAddressEh>:
{
   b71d6:	b538      	push	{r3, r4, r5, lr}
   b71d8:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b71da:	6800      	ldr	r0, [r0, #0]
   b71dc:	6803      	ldr	r3, [r0, #0]
{
   b71de:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b71e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b71e2:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b71e4:	4629      	mov	r1, r5
   b71e6:	4620      	mov	r0, r4
   b71e8:	f7ff fff1 	bl	b71ce <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b71ec:	7125      	strb	r5, [r4, #4]
}
   b71ee:	bd38      	pop	{r3, r4, r5, pc}

000b71f0 <_ZN10RHDatagram4initEv>:
{
   b71f0:	b538      	push	{r3, r4, r5, lr}
   b71f2:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b71f4:	6800      	ldr	r0, [r0, #0]
   b71f6:	6803      	ldr	r3, [r0, #0]
   b71f8:	689b      	ldr	r3, [r3, #8]
   b71fa:	4798      	blx	r3
    if (ret)
   b71fc:	4605      	mov	r5, r0
   b71fe:	b118      	cbz	r0, b7208 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b7200:	7921      	ldrb	r1, [r4, #4]
   b7202:	4620      	mov	r0, r4
   b7204:	f7ff ffe7 	bl	b71d6 <_ZN10RHDatagram14setThisAddressEh>
}
   b7208:	4628      	mov	r0, r5
   b720a:	bd38      	pop	{r3, r4, r5, pc}

000b720c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b720c:	6800      	ldr	r0, [r0, #0]
   b720e:	6803      	ldr	r3, [r0, #0]
   b7210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7212:	4718      	bx	r3

000b7214 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b7214:	6800      	ldr	r0, [r0, #0]
   b7216:	6803      	ldr	r3, [r0, #0]
   b7218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b721a:	4718      	bx	r3

000b721c <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b721c:	6800      	ldr	r0, [r0, #0]
   b721e:	6803      	ldr	r3, [r0, #0]
   b7220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7222:	4718      	bx	r3

000b7224 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b7224:	6800      	ldr	r0, [r0, #0]
   b7226:	6803      	ldr	r3, [r0, #0]
   b7228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b722a:	4718      	bx	r3

000b722c <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b722c:	6800      	ldr	r0, [r0, #0]
   b722e:	6803      	ldr	r3, [r0, #0]
   b7230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7232:	4718      	bx	r3

000b7234 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b7234:	6800      	ldr	r0, [r0, #0]
   b7236:	6803      	ldr	r3, [r0, #0]
   b7238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b723a:	4718      	bx	r3

000b723c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7240:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b7242:	6800      	ldr	r0, [r0, #0]
{
   b7244:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b7246:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b7248:	6803      	ldr	r3, [r0, #0]
   b724a:	691b      	ldr	r3, [r3, #16]
{
   b724c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b7250:	4798      	blx	r3
   b7252:	4605      	mov	r5, r0
   b7254:	b1c8      	cbz	r0, b728a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b7256:	b11e      	cbz	r6, b7260 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b7258:	4620      	mov	r0, r4
   b725a:	f7ff ffe3 	bl	b7224 <_ZN10RHDatagram10headerFromEv>
   b725e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b7260:	f1b9 0f00 	cmp.w	r9, #0
   b7264:	d004      	beq.n	b7270 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff ffd8 	bl	b721c <_ZN10RHDatagram8headerToEv>
   b726c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b7270:	f1b8 0f00 	cmp.w	r8, #0
   b7274:	d004      	beq.n	b7280 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b7276:	4620      	mov	r0, r4
   b7278:	f7ff ffd8 	bl	b722c <_ZN10RHDatagram8headerIdEv>
   b727c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b7280:	b11f      	cbz	r7, b728a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b7282:	4620      	mov	r0, r4
   b7284:	f7ff ffd6 	bl	b7234 <_ZN10RHDatagram11headerFlagsEv>
   b7288:	7038      	strb	r0, [r7, #0]
}
   b728a:	4628      	mov	r0, r5
   b728c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7290 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b7290:	2001      	movs	r0, #1
   b7292:	4770      	bx	lr

000b7294 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b7294:	7903      	ldrb	r3, [r0, #4]
   b7296:	2b03      	cmp	r3, #3
   b7298:	d0fc      	beq.n	b7294 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b729a:	2001      	movs	r0, #1
   b729c:	4770      	bx	lr

000b729e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b729e:	2000      	movs	r0, #0
   b72a0:	4770      	bx	lr

000b72a2 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b72a2:	7181      	strb	r1, [r0, #6]
}
   b72a4:	4770      	bx	lr

000b72a6 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b72a6:	7141      	strb	r1, [r0, #5]
}
   b72a8:	4770      	bx	lr

000b72aa <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b72aa:	72c1      	strb	r1, [r0, #11]
}
   b72ac:	4770      	bx	lr

000b72ae <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b72ae:	7301      	strb	r1, [r0, #12]
}
   b72b0:	4770      	bx	lr

000b72b2 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b72b2:	7341      	strb	r1, [r0, #13]
}
   b72b4:	4770      	bx	lr

000b72b6 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b72b6:	7b83      	ldrb	r3, [r0, #14]
   b72b8:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b72bc:	4311      	orrs	r1, r2
   b72be:	7381      	strb	r1, [r0, #14]
}
   b72c0:	4770      	bx	lr

000b72c2 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b72c2:	79c0      	ldrb	r0, [r0, #7]
}
   b72c4:	4770      	bx	lr

000b72c6 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b72c6:	7a00      	ldrb	r0, [r0, #8]
}
   b72c8:	4770      	bx	lr

000b72ca <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b72ca:	7a40      	ldrb	r0, [r0, #9]
}
   b72cc:	4770      	bx	lr

000b72ce <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b72ce:	7a80      	ldrb	r0, [r0, #10]
}
   b72d0:	4770      	bx	lr

000b72d2 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b72d2:	8a00      	ldrh	r0, [r0, #16]
}
   b72d4:	b200      	sxth	r0, r0
   b72d6:	4770      	bx	lr

000b72d8 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b72d8:	7900      	ldrb	r0, [r0, #4]
}
   b72da:	4770      	bx	lr

000b72dc <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b72dc:	7101      	strb	r1, [r0, #4]
}
   b72de:	4770      	bx	lr

000b72e0 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b72e0:	8a40      	ldrh	r0, [r0, #18]
}
   b72e2:	b280      	uxth	r0, r0
   b72e4:	4770      	bx	lr

000b72e6 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b72e6:	8a80      	ldrh	r0, [r0, #20]
}
   b72e8:	b280      	uxth	r0, r0
   b72ea:	4770      	bx	lr

000b72ec <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b72ec:	8ac0      	ldrh	r0, [r0, #22]
}
   b72ee:	b280      	uxth	r0, r0
   b72f0:	4770      	bx	lr

000b72f2 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b72f2:	b538      	push	{r3, r4, r5, lr}
   b72f4:	4605      	mov	r5, r0
   b72f6:	460c      	mov	r4, r1
    while (!available())
   b72f8:	682b      	ldr	r3, [r5, #0]
   b72fa:	4628      	mov	r0, r5
   b72fc:	68db      	ldr	r3, [r3, #12]
   b72fe:	4798      	blx	r3
   b7300:	b928      	cbnz	r0, b730e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b7302:	2c00      	cmp	r4, #0
   b7304:	d0f8      	beq.n	b72f8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b7306:	4620      	mov	r0, r4
   b7308:	f001 fe50 	bl	b8fac <delay>
   b730c:	e7f4      	b.n	b72f8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b730e:	bd38      	pop	{r3, r4, r5, pc}

000b7310 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b7310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7312:	4605      	mov	r5, r0
   b7314:	460f      	mov	r7, r1
   b7316:	4614      	mov	r4, r2
   b7318:	f001 fab6 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
   b731c:	4606      	mov	r6, r0
   b731e:	f001 fab3 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b7322:	1b80      	subs	r0, r0, r6
   b7324:	42b8      	cmp	r0, r7
   b7326:	d20a      	bcs.n	b733e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b7328:	682b      	ldr	r3, [r5, #0]
   b732a:	4628      	mov	r0, r5
   b732c:	68db      	ldr	r3, [r3, #12]
   b732e:	4798      	blx	r3
   b7330:	b930      	cbnz	r0, b7340 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b7332:	2c00      	cmp	r4, #0
   b7334:	d0f3      	beq.n	b731e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b7336:	4620      	mov	r0, r4
   b7338:	f001 fe38 	bl	b8fac <delay>
   b733c:	e7ef      	b.n	b731e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b733e:	2000      	movs	r0, #0
}
   b7340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7342 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b7342:	b570      	push	{r4, r5, r6, lr}
   b7344:	4604      	mov	r4, r0
   b7346:	460e      	mov	r6, r1
   b7348:	f001 fa9e 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
   b734c:	4605      	mov	r5, r0
   b734e:	f001 fa9b 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b7352:	1b40      	subs	r0, r0, r5
   b7354:	42b0      	cmp	r0, r6
   b7356:	d204      	bcs.n	b7362 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b7358:	7923      	ldrb	r3, [r4, #4]
   b735a:	2b03      	cmp	r3, #3
   b735c:	d0f7      	beq.n	b734e <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b735e:	2001      	movs	r0, #1
}
   b7360:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b7362:	2000      	movs	r0, #0
   b7364:	e7fc      	b.n	b7360 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b7366 <_ZN15RHGenericDriver7waitCADEv>:
{
   b7366:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b7368:	69c3      	ldr	r3, [r0, #28]
{
   b736a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b736c:	b1b3      	cbz	r3, b739c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b736e:	f001 fa8b 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b7372:	2664      	movs	r6, #100	; 0x64
   b7374:	4605      	mov	r5, r0
    while (isChannelActive())
   b7376:	6823      	ldr	r3, [r4, #0]
   b7378:	4620      	mov	r0, r4
   b737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b737c:	4798      	blx	r3
   b737e:	b168      	cbz	r0, b739c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b7380:	f001 fa82 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b7384:	69e3      	ldr	r3, [r4, #28]
   b7386:	1b40      	subs	r0, r0, r5
   b7388:	4298      	cmp	r0, r3
   b738a:	d809      	bhi.n	b73a0 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b738c:	210a      	movs	r1, #10
   b738e:	2001      	movs	r0, #1
   b7390:	f003 fd91 	bl	baeb6 <_Z6randomii>
   b7394:	4370      	muls	r0, r6
   b7396:	f001 fe09 	bl	b8fac <delay>
    while (isChannelActive())
   b739a:	e7ec      	b.n	b7376 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b739c:	2001      	movs	r0, #1
}
   b739e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b73a0:	2000      	movs	r0, #0
   b73a2:	e7fc      	b.n	b739e <_ZN15RHGenericDriver7waitCADEv+0x38>

000b73a4 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b73a4:	4a06      	ldr	r2, [pc, #24]	; (b73c0 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b73a6:	6002      	str	r2, [r0, #0]
   b73a8:	21ff      	movs	r1, #255	; 0xff
   b73aa:	2200      	movs	r2, #0
   b73ac:	7102      	strb	r2, [r0, #4]
   b73ae:	7141      	strb	r1, [r0, #5]
   b73b0:	8242      	strh	r2, [r0, #18]
   b73b2:	72c1      	strb	r1, [r0, #11]
   b73b4:	8282      	strh	r2, [r0, #20]
   b73b6:	8181      	strh	r1, [r0, #12]
   b73b8:	7382      	strb	r2, [r0, #14]
   b73ba:	82c2      	strh	r2, [r0, #22]
   b73bc:	61c2      	str	r2, [r0, #28]
}
   b73be:	4770      	bx	lr
   b73c0:	000be9dc 	.word	0x000be9dc

000b73c4 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b73c4:	4770      	bx	lr

000b73c6 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b73c6:	4770      	bx	lr

000b73c8 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b73c8:	4770      	bx	lr

000b73ca <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b73ca:	4770      	bx	lr

000b73cc <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b73cc:	4770      	bx	lr

000b73ce <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b73ce:	7141      	strb	r1, [r0, #5]
}
   b73d0:	4770      	bx	lr

000b73d2 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b73d2:	7181      	strb	r1, [r0, #6]
}
   b73d4:	4770      	bx	lr

000b73d6 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b73d6:	7101      	strb	r1, [r0, #4]
}
   b73d8:	4770      	bx	lr
	...

000b73dc <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b73dc:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b73de:	4d03      	ldr	r5, [pc, #12]	; (b73ec <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b73e0:	6005      	str	r5, [r0, #0]
   b73e2:	7101      	strb	r1, [r0, #4]
   b73e4:	7142      	strb	r2, [r0, #5]
   b73e6:	7183      	strb	r3, [r0, #6]
}
   b73e8:	bd30      	pop	{r4, r5, pc}
   b73ea:	bf00      	nop
   b73ec:	000bea5c 	.word	0x000bea5c

000b73f0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b73f0:	4770      	bx	lr

000b73f2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b73f2:	b510      	push	{r4, lr}
  }
   b73f4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b73f6:	4604      	mov	r4, r0
  }
   b73f8:	f7fc fe51 	bl	b409e <_ZdlPvj>
   b73fc:	4620      	mov	r0, r4
   b73fe:	bd10      	pop	{r4, pc}

000b7400 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7400:	b40e      	push	{r1, r2, r3}
   b7402:	b503      	push	{r0, r1, lr}
   b7404:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b7406:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7408:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b740c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b740e:	f003 fd16 	bl	bae3e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b7412:	b002      	add	sp, #8
   b7414:	f85d eb04 	ldr.w	lr, [sp], #4
   b7418:	b003      	add	sp, #12
   b741a:	4770      	bx	lr

000b741c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b741c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b741e:	4604      	mov	r4, r0
   b7420:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b7422:	7922      	ldrb	r2, [r4, #4]
   b7424:	68a3      	ldr	r3, [r4, #8]
   b7426:	b132      	cbz	r2, b7436 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b7428:	b9a3      	cbnz	r3, b7454 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b742a:	490b      	ldr	r1, [pc, #44]	; (b7458 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b742c:	b002      	add	sp, #8
   b742e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b7432:	f003 bbfb 	b.w	bac2c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7436:	4a09      	ldr	r2, [pc, #36]	; (b745c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b7438:	7b26      	ldrb	r6, [r4, #12]
   b743a:	4d09      	ldr	r5, [pc, #36]	; (b7460 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b743c:	4909      	ldr	r1, [pc, #36]	; (b7464 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b743e:	7b64      	ldrb	r4, [r4, #13]
   b7440:	2e01      	cmp	r6, #1
   b7442:	bf18      	it	ne
   b7444:	4629      	movne	r1, r5
   b7446:	e9cd 1400 	strd	r1, r4, [sp]
   b744a:	4907      	ldr	r1, [pc, #28]	; (b7468 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b744c:	f7ff ffd8 	bl	b7400 <_ZN5Print6printfEPKcz>
  }
   b7450:	b002      	add	sp, #8
   b7452:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7454:	4a05      	ldr	r2, [pc, #20]	; (b746c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b7456:	e7ef      	b.n	b7438 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b7458:	000bea99 	.word	0x000bea99
   b745c:	000bee35 	.word	0x000bee35
   b7460:	000bea95 	.word	0x000bea95
   b7464:	000bea91 	.word	0x000bea91
   b7468:	000beaaf 	.word	0x000beaaf
   b746c:	000bea88 	.word	0x000bea88

000b7470 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b7470:	b510      	push	{r4, lr}
   b7472:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b7474:	f7ff ffb2 	bl	b73dc <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b7478:	4b05      	ldr	r3, [pc, #20]	; (b7490 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b747a:	6023      	str	r3, [r4, #0]
  {
   b747c:	4b05      	ldr	r3, [pc, #20]	; (b7494 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b747e:	60a3      	str	r3, [r4, #8]
   b7480:	2301      	movs	r3, #1
   b7482:	7323      	strb	r3, [r4, #12]
   b7484:	2300      	movs	r3, #0
   b7486:	6123      	str	r3, [r4, #16]
   b7488:	82a3      	strh	r3, [r4, #20]
{
}
   b748a:	4620      	mov	r0, r4
   b748c:	bd10      	pop	{r4, pc}
   b748e:	bf00      	nop
   b7490:	000beae8 	.word	0x000beae8
   b7494:	000bead4 	.word	0x000bead4

000b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b7498:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b749a:	4c0b      	ldr	r4, [pc, #44]	; (b74c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b749c:	7821      	ldrb	r1, [r4, #0]
   b749e:	f3bf 8f5b 	dmb	ish
   b74a2:	f011 0101 	ands.w	r1, r1, #1
   b74a6:	d10b      	bne.n	b74c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b74a8:	4620      	mov	r0, r4
   b74aa:	9101      	str	r1, [sp, #4]
   b74ac:	f7fc fe06 	bl	b40bc <__cxa_guard_acquire>
   b74b0:	9901      	ldr	r1, [sp, #4]
   b74b2:	b128      	cbz	r0, b74c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b74b4:	4805      	ldr	r0, [pc, #20]	; (b74cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b74b6:	f003 fd17 	bl	baee8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b74ba:	4620      	mov	r0, r4
   b74bc:	f7fc fe03 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b74c0:	4802      	ldr	r0, [pc, #8]	; (b74cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b74c2:	b002      	add	sp, #8
   b74c4:	bd10      	pop	{r4, pc}
   b74c6:	bf00      	nop
   b74c8:	2003e3e0 	.word	0x2003e3e0
   b74cc:	2003e3e4 	.word	0x2003e3e4

000b74d0 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b74d0:	b507      	push	{r0, r1, r2, lr}
   b74d2:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b74d4:	f7ff ffe0 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b74d8:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b74da:	b003      	add	sp, #12
   b74dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b74e0:	f003 bdba 	b.w	bb058 <_ZN8SPIClass8transferEh>

000b74e4 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b74e4:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b74e6:	f7ff ffd7 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b74ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b74ee:	f003 bdb9 	b.w	bb064 <_ZN8SPIClass15attachInterruptEv>

000b74f2 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b74f2:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b74f4:	f7ff ffd0 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b74f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b74fc:	f003 bdb3 	b.w	bb066 <_ZN8SPIClass15detachInterruptEv>

000b7500 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b7500:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b7502:	7903      	ldrb	r3, [r0, #4]
   b7504:	2b04      	cmp	r3, #4
   b7506:	d020      	beq.n	b754a <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b7508:	2b03      	cmp	r3, #3
   b750a:	d020      	beq.n	b754e <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b750c:	2b02      	cmp	r3, #2
   b750e:	d020      	beq.n	b7552 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b7510:	4a11      	ldr	r2, [pc, #68]	; (b7558 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b7512:	4912      	ldr	r1, [pc, #72]	; (b755c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b7514:	2b01      	cmp	r3, #1
   b7516:	bf18      	it	ne
   b7518:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b751a:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b751c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b751e:	3901      	subs	r1, #1
   b7520:	bf18      	it	ne
   b7522:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b7524:	b133      	cbz	r3, b7534 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b7526:	2b01      	cmp	r3, #1
   b7528:	d004      	beq.n	b7534 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b752a:	2b02      	cmp	r3, #2
   b752c:	d002      	beq.n	b7534 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b752e:	2b03      	cmp	r3, #3
   b7530:	bf18      	it	ne
   b7532:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b7534:	2400      	movs	r4, #0
   b7536:	7304      	strb	r4, [r0, #12]
   b7538:	6102      	str	r2, [r0, #16]
   b753a:	7501      	strb	r1, [r0, #20]
   b753c:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b753e:	f7ff ffab 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b7542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7546:	f003 bcd9 	b.w	baefc <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b754a:	4a05      	ldr	r2, [pc, #20]	; (b7560 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b754c:	e7e5      	b.n	b751a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b754e:	4a05      	ldr	r2, [pc, #20]	; (b7564 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b7550:	e7e3      	b.n	b751a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b7552:	4a05      	ldr	r2, [pc, #20]	; (b7568 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b7554:	e7e1      	b.n	b751a <_ZN13RHHardwareSPI5beginEv+0x1a>
   b7556:	bf00      	nop
   b7558:	001e8480 	.word	0x001e8480
   b755c:	000f4240 	.word	0x000f4240
   b7560:	00f42400 	.word	0x00f42400
   b7564:	007a1200 	.word	0x007a1200
   b7568:	003d0900 	.word	0x003d0900

000b756c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b756c:	b508      	push	{r3, lr}
        instance().end();
   b756e:	f7ff ff93 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b7572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7576:	f003 bcd5 	b.w	baf24 <_ZN8SPIClass3endEv>

000b757a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b757a:	b510      	push	{r4, lr}
   b757c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b757e:	f7ff ff8b 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7582:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b7586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b758a:	f003 bcf7 	b.w	baf7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b758e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b758e:	b508      	push	{r3, lr}
        instance().endTransaction();
   b7590:	f7ff ff82 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b7594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7598:	f003 bcd6 	b.w	baf48 <_ZN8SPIClass14endTransactionEv>

000b759c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b759c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b759e:	f7ff ff7b 	bl	b7498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b75a2:	bd08      	pop	{r3, pc}

000b75a4 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b75a4:	2300      	movs	r3, #0
   b75a6:	4802      	ldr	r0, [pc, #8]	; (b75b0 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b75a8:	461a      	mov	r2, r3
   b75aa:	4619      	mov	r1, r3
   b75ac:	f7ff bf60 	b.w	b7470 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b75b0:	2003e3ec 	.word	0x2003e3ec

000b75b4 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b75b4:	2a01      	cmp	r2, #1
   b75b6:	d105      	bne.n	b75c4 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b75b8:	7a00      	ldrb	r0, [r0, #8]
   b75ba:	780b      	ldrb	r3, [r1, #0]
   b75bc:	1a1b      	subs	r3, r3, r0
   b75be:	4258      	negs	r0, r3
   b75c0:	4158      	adcs	r0, r3
   b75c2:	4770      	bx	lr
   b75c4:	2000      	movs	r0, #0
}
   b75c6:	4770      	bx	lr

000b75c8 <_ZN6RHMesh5doArpEh>:
{
   b75c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b75cc:	4c25      	ldr	r4, [pc, #148]	; (b7664 <_ZN6RHMesh5doArpEh+0x9c>)
   b75ce:	2301      	movs	r3, #1
{
   b75d0:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b75d2:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b75d4:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b75d6:	2300      	movs	r3, #0
{
   b75d8:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b75da:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b75dc:	9300      	str	r3, [sp, #0]
   b75de:	2203      	movs	r2, #3
   b75e0:	23ff      	movs	r3, #255	; 0xff
   b75e2:	4621      	mov	r1, r4
{
   b75e4:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b75e6:	f000 fbb7 	bl	b7d58 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b75ea:	b120      	cbz	r0, b75f6 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b75ec:	2500      	movs	r5, #0
}
   b75ee:	4628      	mov	r0, r5
   b75f0:	b006      	add	sp, #24
   b75f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b75f6:	23fa      	movs	r3, #250	; 0xfa
   b75f8:	f88d 3017 	strb.w	r3, [sp, #23]
   b75fc:	f001 f944 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b7600:	f106 0904 	add.w	r9, r6, #4
   b7604:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b7606:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b760a:	f001 f93d 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
   b760e:	1a29      	subs	r1, r5, r0
   b7610:	2900      	cmp	r1, #0
   b7612:	ddeb      	ble.n	b75ec <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b7614:	2200      	movs	r2, #0
   b7616:	b289      	uxth	r1, r1
   b7618:	4648      	mov	r0, r9
   b761a:	f7ff fdbe 	bl	b719a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b761e:	2800      	cmp	r0, #0
   b7620:	d0f3      	beq.n	b760a <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b7622:	2300      	movs	r3, #0
   b7624:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7628:	e9cd 3300 	strd	r3, r3, [sp]
   b762c:	f10d 0217 	add.w	r2, sp, #23
   b7630:	4621      	mov	r1, r4
   b7632:	4630      	mov	r0, r6
   b7634:	f000 fb9a 	bl	b7d6c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7638:	4605      	mov	r5, r0
   b763a:	2800      	cmp	r0, #0
   b763c:	d0e3      	beq.n	b7606 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b763e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b7642:	2b01      	cmp	r3, #1
   b7644:	d9df      	bls.n	b7606 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7646:	f894 a000 	ldrb.w	sl, [r4]
   b764a:	f1ba 0f02 	cmp.w	sl, #2
   b764e:	d1da      	bne.n	b7606 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b7650:	4648      	mov	r0, r9
   b7652:	f7ff fde7 	bl	b7224 <_ZN10RHDatagram10headerFromEv>
   b7656:	4653      	mov	r3, sl
   b7658:	4602      	mov	r2, r0
   b765a:	4639      	mov	r1, r7
   b765c:	4630      	mov	r0, r6
   b765e:	f000 faf3 	bl	b7c48 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b7662:	e7c4      	b.n	b75ee <_ZN6RHMesh5doArpEh+0x26>
   b7664:	2003e404 	.word	0x2003e404

000b7668 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7668:	2a01      	cmp	r2, #1
{
   b766a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b766e:	4607      	mov	r7, r0
   b7670:	460e      	mov	r6, r1
   b7672:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b7674:	d93b      	bls.n	b76ee <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7676:	794d      	ldrb	r5, [r1, #5]
   b7678:	2d02      	cmp	r5, #2
   b767a:	d130      	bne.n	b76de <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b767c:	f100 0804 	add.w	r8, r0, #4
   b7680:	79c9      	ldrb	r1, [r1, #7]
   b7682:	9101      	str	r1, [sp, #4]
   b7684:	4640      	mov	r0, r8
   b7686:	f7ff fdcd 	bl	b7224 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b768a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b768c:	462b      	mov	r3, r5
   b768e:	4602      	mov	r2, r0
   b7690:	9901      	ldr	r1, [sp, #4]
   b7692:	4638      	mov	r0, r7
   b7694:	f000 fad8 	bl	b7c48 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7698:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b769a:	f106 0308 	add.w	r3, r6, #8
   b769e:	2400      	movs	r4, #0
   b76a0:	4622      	mov	r2, r4
   b76a2:	4295      	cmp	r5, r2
   b76a4:	f104 0401 	add.w	r4, r4, #1
   b76a8:	b2e4      	uxtb	r4, r4
   b76aa:	d904      	bls.n	b76b6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b76ac:	f813 2b01 	ldrb.w	r2, [r3], #1
   b76b0:	7a39      	ldrb	r1, [r7, #8]
   b76b2:	4291      	cmp	r1, r2
   b76b4:	d1f4      	bne.n	b76a0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b76b6:	f104 0108 	add.w	r1, r4, #8
   b76ba:	440e      	add	r6, r1
	while (i < numRoutes)
   b76bc:	42a5      	cmp	r5, r4
   b76be:	d916      	bls.n	b76ee <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b76c0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b76c4:	9101      	str	r1, [sp, #4]
   b76c6:	4640      	mov	r0, r8
   b76c8:	f7ff fdac 	bl	b7224 <_ZN10RHDatagram10headerFromEv>
   b76cc:	3401      	adds	r4, #1
   b76ce:	4602      	mov	r2, r0
   b76d0:	9901      	ldr	r1, [sp, #4]
   b76d2:	2302      	movs	r3, #2
   b76d4:	4638      	mov	r0, r7
   b76d6:	b2e4      	uxtb	r4, r4
   b76d8:	f000 fab6 	bl	b7c48 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b76dc:	e7ee      	b.n	b76bc <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b76de:	2d03      	cmp	r5, #3
   b76e0:	d105      	bne.n	b76ee <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b76e2:	7989      	ldrb	r1, [r1, #6]
}
   b76e4:	b002      	add	sp, #8
   b76e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b76ea:	f000 ba96 	b.w	b7c1a <_ZN8RHRouter13deleteRouteToEh>
}
   b76ee:	b002      	add	sp, #8
   b76f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b76f4 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b76f4:	b510      	push	{r4, lr}
   b76f6:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b76f8:	f000 fae6 	bl	b7cc8 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b76fc:	4b01      	ldr	r3, [pc, #4]	; (b7704 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b76fe:	6023      	str	r3, [r4, #0]
}
   b7700:	4620      	mov	r0, r4
   b7702:	bd10      	pop	{r4, pc}
   b7704:	000beb1c 	.word	0x000beb1c

000b7708 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b770c:	2af9      	cmp	r2, #249	; 0xf9
{
   b770e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b7712:	4606      	mov	r6, r0
   b7714:	460f      	mov	r7, r1
   b7716:	4614      	mov	r4, r2
   b7718:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b771a:	d825      	bhi.n	b7768 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b771c:	2bff      	cmp	r3, #255	; 0xff
   b771e:	d114      	bne.n	b774a <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7720:	f8df 8048 	ldr.w	r8, [pc, #72]	; b776c <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b7724:	4640      	mov	r0, r8
   b7726:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7728:	4622      	mov	r2, r4
   b772a:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b772c:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b7730:	f006 f87a 	bl	bd828 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7734:	1c62      	adds	r2, r4, #1
   b7736:	f8cd 9020 	str.w	r9, [sp, #32]
   b773a:	462b      	mov	r3, r5
   b773c:	4641      	mov	r1, r8
   b773e:	4630      	mov	r0, r6
   b7740:	b2d2      	uxtb	r2, r2
}
   b7742:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7746:	f000 bb07 	b.w	b7d58 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b774a:	4619      	mov	r1, r3
   b774c:	f000 fa21 	bl	b7b92 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b7750:	2800      	cmp	r0, #0
   b7752:	d1e5      	bne.n	b7720 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b7754:	6833      	ldr	r3, [r6, #0]
   b7756:	4629      	mov	r1, r5
   b7758:	689b      	ldr	r3, [r3, #8]
   b775a:	4630      	mov	r0, r6
   b775c:	4798      	blx	r3
   b775e:	2800      	cmp	r0, #0
   b7760:	d1de      	bne.n	b7720 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7762:	2002      	movs	r0, #2
}
   b7764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7768:	2001      	movs	r0, #1
   b776a:	e7fb      	b.n	b7764 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b776c:	2003e404 	.word	0x2003e404

000b7770 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b7770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7774:	b089      	sub	sp, #36	; 0x24
   b7776:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7778:	23fa      	movs	r3, #250	; 0xfa
   b777a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b777e:	f10d 031f 	add.w	r3, sp, #31
   b7782:	9303      	str	r3, [sp, #12]
   b7784:	f10d 031e 	add.w	r3, sp, #30
   b7788:	9302      	str	r3, [sp, #8]
   b778a:	4e5d      	ldr	r6, [pc, #372]	; (b7900 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b778c:	f10d 031d 	add.w	r3, sp, #29
   b7790:	9301      	str	r3, [sp, #4]
   b7792:	ab07      	add	r3, sp, #28
   b7794:	9300      	str	r3, [sp, #0]
{     
   b7796:	4689      	mov	r9, r1
   b7798:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b779a:	f10d 031b 	add.w	r3, sp, #27
   b779e:	f10d 021a 	add.w	r2, sp, #26
   b77a2:	4631      	mov	r1, r6
{     
   b77a4:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b77a8:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b77aa:	f000 fadf 	bl	b7d6c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b77ae:	4604      	mov	r4, r0
   b77b0:	b920      	cbnz	r0, b77bc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b77b2:	2400      	movs	r4, #0
}
   b77b4:	4620      	mov	r0, r4
   b77b6:	b009      	add	sp, #36	; 0x24
   b77b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b77bc:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b77c0:	b373      	cbz	r3, b7820 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b77c2:	7832      	ldrb	r2, [r6, #0]
   b77c4:	bb62      	cbnz	r2, b7820 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b77c6:	f1b8 0f00 	cmp.w	r8, #0
   b77ca:	d003      	beq.n	b77d4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b77cc:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b77d0:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b77d4:	f1bb 0f00 	cmp.w	fp, #0
   b77d8:	d003      	beq.n	b77e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b77da:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b77de:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b77e2:	f1ba 0f00 	cmp.w	sl, #0
   b77e6:	d003      	beq.n	b77f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b77e8:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b77ec:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b77f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b77f2:	b11a      	cbz	r2, b77fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b77f4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b77f6:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b77fa:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b77fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b77fe:	b11a      	cbz	r2, b7808 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b7800:	9915      	ldr	r1, [sp, #84]	; 0x54
   b7802:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7806:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7808:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b780a:	493e      	ldr	r1, [pc, #248]	; (b7904 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b780c:	3b01      	subs	r3, #1
   b780e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7810:	429a      	cmp	r2, r3
		*len = msgLen;
   b7812:	bf88      	it	hi
   b7814:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7816:	783a      	ldrb	r2, [r7, #0]
   b7818:	4648      	mov	r0, r9
   b781a:	f006 f805 	bl	bd828 <memcpy>
	    return true;
   b781e:	e7c9      	b.n	b77b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b7820:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7824:	2aff      	cmp	r2, #255	; 0xff
   b7826:	d1c4      	bne.n	b77b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7828:	2b01      	cmp	r3, #1
   b782a:	d9c2      	bls.n	b77b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b782c:	7832      	ldrb	r2, [r6, #0]
   b782e:	2a01      	cmp	r2, #1
   b7830:	d1bf      	bne.n	b77b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b7832:	7a2a      	ldrb	r2, [r5, #8]
   b7834:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7838:	42a2      	cmp	r2, r4
   b783a:	d0ba      	beq.n	b77b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b783c:	1edf      	subs	r7, r3, #3
   b783e:	4932      	ldr	r1, [pc, #200]	; (b7908 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b7840:	b2ff      	uxtb	r7, r7
   b7842:	2300      	movs	r3, #0
   b7844:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7848:	4547      	cmp	r7, r8
   b784a:	d906      	bls.n	b785a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b784c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7850:	4282      	cmp	r2, r0
   b7852:	f103 0301 	add.w	r3, r3, #1
   b7856:	d1f5      	bne.n	b7844 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7858:	e7ab      	b.n	b77b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b785a:	f105 0904 	add.w	r9, r5, #4
   b785e:	4648      	mov	r0, r9
   b7860:	f7ff fce0 	bl	b7224 <_ZN10RHDatagram10headerFromEv>
   b7864:	2302      	movs	r3, #2
   b7866:	4602      	mov	r2, r0
   b7868:	4621      	mov	r1, r4
   b786a:	4628      	mov	r0, r5
   b786c:	f000 f9ec 	bl	b7c48 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b7870:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7874:	b193      	cbz	r3, b789c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b7876:	4c22      	ldr	r4, [pc, #136]	; (b7900 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7878:	1ba3      	subs	r3, r4, r6
   b787a:	b2db      	uxtb	r3, r3
   b787c:	429f      	cmp	r7, r3
   b787e:	d90c      	bls.n	b789a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b7880:	78e1      	ldrb	r1, [r4, #3]
   b7882:	9105      	str	r1, [sp, #20]
   b7884:	4648      	mov	r0, r9
   b7886:	f7ff fccd 	bl	b7224 <_ZN10RHDatagram10headerFromEv>
   b788a:	9905      	ldr	r1, [sp, #20]
   b788c:	4602      	mov	r2, r0
   b788e:	2302      	movs	r3, #2
   b7890:	4628      	mov	r0, r5
   b7892:	f000 f9d9 	bl	b7c48 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b7896:	3401      	adds	r4, #1
   b7898:	e7ee      	b.n	b7878 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b789a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b789c:	682b      	ldr	r3, [r5, #0]
   b789e:	7872      	ldrb	r2, [r6, #1]
   b78a0:	68db      	ldr	r3, [r3, #12]
   b78a2:	491a      	ldr	r1, [pc, #104]	; (b790c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b78a4:	4628      	mov	r0, r5
   b78a6:	4798      	blx	r3
   b78a8:	4604      	mov	r4, r0
   b78aa:	b160      	cbz	r0, b78c6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b78ac:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b78ae:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b78b0:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b78b2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b78b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b78ba:	4911      	ldr	r1, [pc, #68]	; (b7900 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b78bc:	9400      	str	r4, [sp, #0]
   b78be:	4628      	mov	r0, r5
   b78c0:	f000 fa4a 	bl	b7d58 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b78c4:	e776      	b.n	b77b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b78c6:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b78ca:	4543      	cmp	r3, r8
   b78cc:	f67f af71 	bls.w	b77b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b78d0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b78d4:	2b00      	cmp	r3, #0
   b78d6:	f43f af6c 	beq.w	b77b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b78da:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b78de:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b78e0:	4907      	ldr	r1, [pc, #28]	; (b7900 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b78e2:	443e      	add	r6, r7
		tmpMessageLen++;
   b78e4:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b78e6:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b78e8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b78ec:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b78ee:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b78f0:	9300      	str	r3, [sp, #0]
   b78f2:	4628      	mov	r0, r5
   b78f4:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b78f6:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b78fa:	f000 f9f7 	bl	b7cec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b78fe:	e759      	b.n	b77b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b7900:	2003e404 	.word	0x2003e404
   b7904:	2003e405 	.word	0x2003e405
   b7908:	2003e407 	.word	0x2003e407
   b790c:	2003e406 	.word	0x2003e406

000b7910 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b7910:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7912:	b085      	sub	sp, #20
   b7914:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7916:	3004      	adds	r0, #4
{
   b7918:	460e      	mov	r6, r1
   b791a:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b791c:	f7ff fc82 	bl	b7224 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b7920:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7922:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b7924:	4631      	mov	r1, r6
   b7926:	4628      	mov	r0, r5
   b7928:	f000 f94a 	bl	b7bc0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b792c:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b792e:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7930:	d001      	beq.n	b7936 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b7932:	2805      	cmp	r0, #5
   b7934:	d11b      	bne.n	b796e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b7936:	7831      	ldrb	r1, [r6, #0]
   b7938:	4628      	mov	r0, r5
   b793a:	f000 f96e 	bl	b7c1a <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b793e:	7872      	ldrb	r2, [r6, #1]
   b7940:	7a2b      	ldrb	r3, [r5, #8]
   b7942:	429a      	cmp	r2, r3
   b7944:	d013      	beq.n	b796e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b7946:	4c0b      	ldr	r4, [pc, #44]	; (b7974 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7948:	2303      	movs	r3, #3
   b794a:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b794c:	7833      	ldrb	r3, [r6, #0]
   b794e:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7950:	7871      	ldrb	r1, [r6, #1]
   b7952:	2302      	movs	r3, #2
   b7954:	463a      	mov	r2, r7
   b7956:	4628      	mov	r0, r5
   b7958:	f000 f976 	bl	b7c48 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b795c:	2300      	movs	r3, #0
   b795e:	9300      	str	r3, [sp, #0]
   b7960:	4621      	mov	r1, r4
   b7962:	7873      	ldrb	r3, [r6, #1]
   b7964:	2202      	movs	r2, #2
   b7966:	4628      	mov	r0, r5
   b7968:	f000 f9f6 	bl	b7d58 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b796c:	4604      	mov	r4, r0
}
   b796e:	4620      	mov	r0, r4
   b7970:	b005      	add	sp, #20
   b7972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7974:	2003e404 	.word	0x2003e404

000b7978 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7978:	b510      	push	{r4, lr}
   b797a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b797c:	f7ff fc02 	bl	b7184 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7980:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b7982:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b7984:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b7986:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7988:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b798a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b798c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b798e:	f44f 7280 	mov.w	r2, #256	; 0x100
   b7992:	f104 0011 	add.w	r0, r4, #17
   b7996:	f005 ff6f 	bl	bd878 <memset>
}
   b799a:	4620      	mov	r0, r4
   b799c:	bd10      	pop	{r4, pc}

000b799e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b799e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b79a0:	4604      	mov	r4, r0
   b79a2:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b79a4:	f7ff fc32 	bl	b720c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b79a8:	4620      	mov	r0, r4
   b79aa:	2200      	movs	r2, #0
   b79ac:	2180      	movs	r1, #128	; 0x80
   b79ae:	f7ff fc31 	bl	b7214 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b79b2:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b79b4:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b79b6:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b79ba:	f10d 010f 	add.w	r1, sp, #15
   b79be:	2201      	movs	r2, #1
   b79c0:	4620      	mov	r0, r4
   b79c2:	f7ff fbf4 	bl	b71ae <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b79c6:	4620      	mov	r0, r4
   b79c8:	f7ff fbe3 	bl	b7192 <_ZN10RHDatagram14waitPacketSentEv>
}
   b79cc:	b004      	add	sp, #16
   b79ce:	bd10      	pop	{r4, pc}

000b79d0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b79d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b79d4:	7b05      	ldrb	r5, [r0, #12]
   b79d6:	3501      	adds	r5, #1
   b79d8:	b2ed      	uxtb	r5, r5
{
   b79da:	b087      	sub	sp, #28
   b79dc:	4604      	mov	r4, r0
   b79de:	4689      	mov	r9, r1
   b79e0:	4692      	mov	sl, r2
   b79e2:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b79e4:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b79e6:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b79e8:	7c22      	ldrb	r2, [r4, #16]
   b79ea:	463b      	mov	r3, r7
   b79ec:	429a      	cmp	r2, r3
   b79ee:	f107 0701 	add.w	r7, r7, #1
   b79f2:	b2ff      	uxtb	r7, r7
   b79f4:	d36b      	bcc.n	b7ace <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b79f6:	4629      	mov	r1, r5
   b79f8:	4620      	mov	r0, r4
   b79fa:	f7ff fc07 	bl	b720c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b79fe:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b7a00:	bf0d      	iteet	eq
   b7a02:	22c0      	moveq	r2, #192	; 0xc0
   b7a04:	2280      	movne	r2, #128	; 0x80
   b7a06:	2140      	movne	r1, #64	; 0x40
   b7a08:	2100      	moveq	r1, #0
   b7a0a:	4620      	mov	r0, r4
   b7a0c:	f7ff fc02 	bl	b7214 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b7a10:	4643      	mov	r3, r8
   b7a12:	4652      	mov	r2, sl
   b7a14:	4649      	mov	r1, r9
   b7a16:	4620      	mov	r0, r4
   b7a18:	f7ff fbc9 	bl	b71ae <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b7a1c:	4620      	mov	r0, r4
   b7a1e:	f7ff fbb8 	bl	b7192 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b7a22:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7a26:	d054      	beq.n	b7ad2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b7a28:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b7a2a:	bf82      	ittt	hi
   b7a2c:	68a3      	ldrhi	r3, [r4, #8]
   b7a2e:	3301      	addhi	r3, #1
   b7a30:	60a3      	strhi	r3, [r4, #8]
   b7a32:	f000 ff29 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b7a36:	f44f 7180 	mov.w	r1, #256	; 0x100
   b7a3a:	4683      	mov	fp, r0
   b7a3c:	2000      	movs	r0, #0
   b7a3e:	89e6      	ldrh	r6, [r4, #14]
   b7a40:	f003 fa39 	bl	baeb6 <_Z6randomii>
   b7a44:	4370      	muls	r0, r6
   b7a46:	bf48      	it	mi
   b7a48:	30ff      	addmi	r0, #255	; 0xff
   b7a4a:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b7a4e:	fa1b f686 	uxtah	r6, fp, r6
   b7a52:	f000 ff19 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
   b7a56:	1a30      	subs	r0, r6, r0
   b7a58:	2800      	cmp	r0, #0
   b7a5a:	ddc5      	ble.n	b79e8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7a5c:	b281      	uxth	r1, r0
   b7a5e:	2200      	movs	r2, #0
   b7a60:	4620      	mov	r0, r4
   b7a62:	f7ff fb9a 	bl	b719a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7a66:	2800      	cmp	r0, #0
   b7a68:	d0f3      	beq.n	b7a52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7a6a:	f10d 0317 	add.w	r3, sp, #23
   b7a6e:	9302      	str	r3, [sp, #8]
   b7a70:	f10d 0316 	add.w	r3, sp, #22
   b7a74:	9301      	str	r3, [sp, #4]
   b7a76:	2200      	movs	r2, #0
   b7a78:	f10d 0315 	add.w	r3, sp, #21
   b7a7c:	9300      	str	r3, [sp, #0]
   b7a7e:	4611      	mov	r1, r2
   b7a80:	ab05      	add	r3, sp, #20
   b7a82:	4620      	mov	r0, r4
   b7a84:	f7ff fbda 	bl	b723c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7a88:	2800      	cmp	r0, #0
   b7a8a:	d0e2      	beq.n	b7a52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7a8c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7a90:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b7a94:	4542      	cmp	r2, r8
   b7a96:	d10e      	bne.n	b7ab6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7a98:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7a9c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7aa0:	458c      	cmp	ip, r1
   b7aa2:	d108      	bne.n	b7ab6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b7aa4:	2b00      	cmp	r3, #0
   b7aa6:	da08      	bge.n	b7aba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b7aa8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7aac:	42ab      	cmp	r3, r5
   b7aae:	d1d0      	bne.n	b7a52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7ab0:	b007      	add	sp, #28
   b7ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b7ab6:	2b00      	cmp	r3, #0
   b7ab8:	dbcb      	blt.n	b7a52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b7aba:	18a1      	adds	r1, r4, r2
   b7abc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7ac0:	7c49      	ldrb	r1, [r1, #17]
   b7ac2:	4299      	cmp	r1, r3
   b7ac4:	d1c5      	bne.n	b7a52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b7ac6:	4620      	mov	r0, r4
   b7ac8:	f7ff ff69 	bl	b799e <_ZN18RHReliableDatagram11acknowledgeEhh>
   b7acc:	e7c1      	b.n	b7a52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b7ace:	2000      	movs	r0, #0
   b7ad0:	e7ee      	b.n	b7ab0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7ad2:	2001      	movs	r0, #1
   b7ad4:	e7ec      	b.n	b7ab0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b7ad6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b7ad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ada:	b089      	sub	sp, #36	; 0x24
   b7adc:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7ae0:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7ae4:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7ae6:	4604      	mov	r4, r0
   b7ae8:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7aea:	f7ff fb4e 	bl	b718a <_ZN10RHDatagram9availableEv>
   b7aee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b7af2:	b920      	cbnz	r0, b7afe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7af4:	2500      	movs	r5, #0
}
   b7af6:	4628      	mov	r0, r5
   b7af8:	b009      	add	sp, #36	; 0x24
   b7afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7afe:	f10d 031f 	add.w	r3, sp, #31
   b7b02:	9302      	str	r3, [sp, #8]
   b7b04:	f10d 031e 	add.w	r3, sp, #30
   b7b08:	9301      	str	r3, [sp, #4]
   b7b0a:	f10d 031d 	add.w	r3, sp, #29
   b7b0e:	9300      	str	r3, [sp, #0]
   b7b10:	4620      	mov	r0, r4
   b7b12:	ab07      	add	r3, sp, #28
   b7b14:	f7ff fb92 	bl	b723c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7b18:	4605      	mov	r5, r0
   b7b1a:	2800      	cmp	r0, #0
   b7b1c:	d0ea      	beq.n	b7af4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b7b1e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b7b22:	2b00      	cmp	r3, #0
   b7b24:	dbe6      	blt.n	b7af4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b7b26:	7922      	ldrb	r2, [r4, #4]
   b7b28:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7b2c:	429a      	cmp	r2, r3
   b7b2e:	d106      	bne.n	b7b3e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b7b30:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7b34:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b7b38:	4620      	mov	r0, r4
   b7b3a:	f7ff ff30 	bl	b799e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b7b3e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7b42:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b7b46:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7b4a:	f012 0f40 	tst.w	r2, #64	; 0x40
   b7b4e:	440c      	add	r4, r1
   b7b50:	d002      	beq.n	b7b58 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b7b52:	7c60      	ldrb	r0, [r4, #17]
   b7b54:	4298      	cmp	r0, r3
   b7b56:	d0cd      	beq.n	b7af4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7b58:	b106      	cbz	r6, b7b5c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b7b5a:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7b5c:	f1b9 0f00 	cmp.w	r9, #0
   b7b60:	d003      	beq.n	b7b6a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b7b62:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b7b66:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b7b6a:	f1b8 0f00 	cmp.w	r8, #0
   b7b6e:	d001      	beq.n	b7b74 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7b70:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b7b74:	b107      	cbz	r7, b7b78 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b7b76:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7b78:	7463      	strb	r3, [r4, #17]
		return true;
   b7b7a:	e7bc      	b.n	b7af6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7b7c <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7b7c:	4770      	bx	lr

000b7b7e <_ZN8RHRouter4initEv>:
{
   b7b7e:	b510      	push	{r4, lr}
   b7b80:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b7b82:	3004      	adds	r0, #4
   b7b84:	f7ff fb34 	bl	b71f0 <_ZN10RHDatagram4initEv>
    if (ret)
   b7b88:	b110      	cbz	r0, b7b90 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b7b8a:	231e      	movs	r3, #30
   b7b8c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7b90:	bd10      	pop	{r4, pc}

000b7b92 <_ZN8RHRouter10getRouteToEh>:
{
   b7b92:	b510      	push	{r4, lr}
   b7b94:	4602      	mov	r2, r0
   b7b96:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b7b98:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b7b9c:	428c      	cmp	r4, r1
   b7b9e:	d108      	bne.n	b7bb2 <_ZN8RHRouter10getRouteToEh+0x20>
   b7ba0:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b7ba4:	b12c      	cbz	r4, b7bb2 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b7ba6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7baa:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b7bae:	4418      	add	r0, r3
}
   b7bb0:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7bb2:	3301      	adds	r3, #1
   b7bb4:	2b32      	cmp	r3, #50	; 0x32
   b7bb6:	f102 0203 	add.w	r2, r2, #3
   b7bba:	d1ed      	bne.n	b7b98 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b7bbc:	2000      	movs	r0, #0
   b7bbe:	e7f7      	b.n	b7bb0 <_ZN8RHRouter10getRouteToEh+0x1e>

000b7bc0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b7bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7bc2:	780b      	ldrb	r3, [r1, #0]
   b7bc4:	2bff      	cmp	r3, #255	; 0xff
{
   b7bc6:	4605      	mov	r5, r0
   b7bc8:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7bca:	d006      	beq.n	b7bda <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b7bcc:	4619      	mov	r1, r3
   b7bce:	9201      	str	r2, [sp, #4]
   b7bd0:	f7ff ffdf 	bl	b7b92 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b7bd4:	b158      	cbz	r0, b7bee <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b7bd6:	7843      	ldrb	r3, [r0, #1]
   b7bd8:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b7bda:	4621      	mov	r1, r4
   b7bdc:	1d28      	adds	r0, r5, #4
   b7bde:	f7ff fef7 	bl	b79d0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b7be2:	2800      	cmp	r0, #0
   b7be4:	bf14      	ite	ne
   b7be6:	2000      	movne	r0, #0
   b7be8:	2005      	moveq	r0, #5
}
   b7bea:	b003      	add	sp, #12
   b7bec:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7bee:	2002      	movs	r0, #2
   b7bf0:	e7fb      	b.n	b7bea <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b7bf2 <_ZN8RHRouter11deleteRouteEh>:
{
   b7bf2:	b510      	push	{r4, lr}
   b7bf4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b7bf8:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b7bfa:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b7bfe:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b7c02:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b7c06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7c0a:	4421      	add	r1, r4
   b7c0c:	4420      	add	r0, r4
   b7c0e:	f005 fe0b 	bl	bd828 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b7c12:	2300      	movs	r3, #0
   b7c14:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b7c18:	bd10      	pop	{r4, pc}

000b7c1a <_ZN8RHRouter13deleteRouteToEh>:
{
   b7c1a:	b538      	push	{r3, r4, r5, lr}
   b7c1c:	460a      	mov	r2, r1
   b7c1e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7c20:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b7c24:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b7c28:	b2d9      	uxtb	r1, r3
   b7c2a:	5d65      	ldrb	r5, [r4, r5]
   b7c2c:	4295      	cmp	r5, r2
   b7c2e:	d103      	bne.n	b7c38 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b7c30:	f7ff ffdf 	bl	b7bf2 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b7c34:	2001      	movs	r0, #1
}
   b7c36:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c38:	3301      	adds	r3, #1
   b7c3a:	2b32      	cmp	r3, #50	; 0x32
   b7c3c:	d1f2      	bne.n	b7c24 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b7c3e:	2000      	movs	r0, #0
   b7c40:	e7f9      	b.n	b7c36 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b7c42 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b7c42:	2100      	movs	r1, #0
   b7c44:	f7ff bfd5 	b.w	b7bf2 <_ZN8RHRouter11deleteRouteEh>

000b7c48 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c4a:	4616      	mov	r6, r2
   b7c4c:	461f      	mov	r7, r3
   b7c4e:	4604      	mov	r4, r0
   b7c50:	460d      	mov	r5, r1
   b7c52:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7c54:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7c58:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7c5c:	5c11      	ldrb	r1, [r2, r0]
   b7c5e:	42a9      	cmp	r1, r5
   b7c60:	d105      	bne.n	b7c6e <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7c62:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7c64:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7c68:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c6e:	3301      	adds	r3, #1
   b7c70:	2b32      	cmp	r3, #50	; 0x32
   b7c72:	d1f1      	bne.n	b7c58 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b7c74:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b7c76:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b7c7a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7c7e:	5c11      	ldrb	r1, [r2, r0]
   b7c80:	b919      	cbnz	r1, b7c8a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b7c82:	4420      	add	r0, r4
   b7c84:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b7c88:	e7ec      	b.n	b7c64 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c8a:	3301      	adds	r3, #1
   b7c8c:	2b32      	cmp	r3, #50	; 0x32
   b7c8e:	d1f4      	bne.n	b7c7a <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7c90:	4620      	mov	r0, r4
   b7c92:	f7ff ffd6 	bl	b7c42 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c96:	4620      	mov	r0, r4
   b7c98:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b7c9c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7ca0:	b92a      	cbnz	r2, b7cae <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b7ca2:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b7ca6:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7caa:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7cae:	3003      	adds	r0, #3
   b7cb0:	4298      	cmp	r0, r3
   b7cb2:	d1f3      	bne.n	b7c9c <_ZN8RHRouter10addRouteToEhhh+0x54>
   b7cb4:	e7da      	b.n	b7c6c <_ZN8RHRouter10addRouteToEhhh+0x24>

000b7cb6 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7cb6:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b7cba:	2200      	movs	r2, #0
   b7cbc:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7cc0:	3003      	adds	r0, #3
   b7cc2:	4298      	cmp	r0, r3
   b7cc4:	d1fa      	bne.n	b7cbc <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b7cc6:	4770      	bx	lr

000b7cc8 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b7cc8:	b510      	push	{r4, lr}
   b7cca:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b7ccc:	3004      	adds	r0, #4
   b7cce:	f7ff fe53 	bl	b7978 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b7cd2:	4b05      	ldr	r3, [pc, #20]	; (b7ce8 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b7cd4:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7cd6:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b7cda:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7cdc:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7ce0:	f7ff ffe9 	bl	b7cb6 <_ZN8RHRouter17clearRoutingTableEv>
}
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	bd10      	pop	{r4, pc}
   b7ce8:	000beb34 	.word	0x000beb34

000b7cec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b7cec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7cf0:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7cf2:	6840      	ldr	r0, [r0, #4]
{
   b7cf4:	9101      	str	r1, [sp, #4]
   b7cf6:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7cf8:	6803      	ldr	r3, [r0, #0]
{
   b7cfa:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7cfe:	699b      	ldr	r3, [r3, #24]
{
   b7d00:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b7d04:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7d06:	4798      	blx	r3
   b7d08:	f106 0805 	add.w	r8, r6, #5
   b7d0c:	4580      	cmp	r8, r0
   b7d0e:	d81c      	bhi.n	b7d4a <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b7d10:	4d10      	ldr	r5, [pc, #64]	; (b7d54 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b7d12:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b7d14:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b7d18:	2300      	movs	r3, #0
   b7d1a:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b7d1c:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b7d20:	70eb      	strb	r3, [r5, #3]
   b7d22:	1c5a      	adds	r2, r3, #1
   b7d24:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b7d28:	1d68      	adds	r0, r5, #5
   b7d2a:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b7d2c:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b7d2e:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b7d32:	f005 fd79 	bl	bd828 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7d36:	6823      	ldr	r3, [r4, #0]
   b7d38:	685b      	ldr	r3, [r3, #4]
   b7d3a:	fa5f f288 	uxtb.w	r2, r8
   b7d3e:	4629      	mov	r1, r5
   b7d40:	4620      	mov	r0, r4
}
   b7d42:	b002      	add	sp, #8
   b7d44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7d48:	4718      	bx	r3
}
   b7d4a:	2001      	movs	r0, #1
   b7d4c:	b002      	add	sp, #8
   b7d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7d52:	bf00      	nop
   b7d54:	2003e4fe 	.word	0x2003e4fe

000b7d58 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7d58:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b7d5a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7d5e:	9401      	str	r4, [sp, #4]
   b7d60:	7a04      	ldrb	r4, [r0, #8]
   b7d62:	9400      	str	r4, [sp, #0]
   b7d64:	f7ff ffc2 	bl	b7cec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7d68:	b002      	add	sp, #8
   b7d6a:	bd10      	pop	{r4, pc}

000b7d6c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d70:	b087      	sub	sp, #28
   b7d72:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7d74:	23ff      	movs	r3, #255	; 0xff
   b7d76:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7d7a:	f10d 0317 	add.w	r3, sp, #23
   b7d7e:	9302      	str	r3, [sp, #8]
   b7d80:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7e54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b7d84:	f10d 0316 	add.w	r3, sp, #22
   b7d88:	9301      	str	r3, [sp, #4]
   b7d8a:	f10d 0315 	add.w	r3, sp, #21
   b7d8e:	9300      	str	r3, [sp, #0]
{  
   b7d90:	4604      	mov	r4, r0
   b7d92:	4688      	mov	r8, r1
   b7d94:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7d96:	ab05      	add	r3, sp, #20
   b7d98:	f10d 0213 	add.w	r2, sp, #19
   b7d9c:	4649      	mov	r1, r9
   b7d9e:	3004      	adds	r0, #4
{  
   b7da0:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7da4:	f7ff fe97 	bl	b7ad6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b7da8:	4605      	mov	r5, r0
   b7daa:	b908      	cbnz	r0, b7db0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b7dac:	2500      	movs	r5, #0
   b7dae:	e038      	b.n	b7e22 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b7db0:	6823      	ldr	r3, [r4, #0]
   b7db2:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7db6:	681b      	ldr	r3, [r3, #0]
   b7db8:	4649      	mov	r1, r9
   b7dba:	4620      	mov	r0, r4
   b7dbc:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b7dbe:	f899 3000 	ldrb.w	r3, [r9]
   b7dc2:	7a22      	ldrb	r2, [r4, #8]
   b7dc4:	429a      	cmp	r2, r3
   b7dc6:	d001      	beq.n	b7dcc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b7dc8:	2bff      	cmp	r3, #255	; 0xff
   b7dca:	d12e      	bne.n	b7e2a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b7dcc:	b117      	cbz	r7, b7dd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b7dce:	4b21      	ldr	r3, [pc, #132]	; (b7e54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7dd0:	785b      	ldrb	r3, [r3, #1]
   b7dd2:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b7dd4:	f1bb 0f00 	cmp.w	fp, #0
   b7dd8:	d003      	beq.n	b7de2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b7dda:	4b1e      	ldr	r3, [pc, #120]	; (b7e54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7ddc:	781b      	ldrb	r3, [r3, #0]
   b7dde:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b7de2:	f1ba 0f00 	cmp.w	sl, #0
   b7de6:	d003      	beq.n	b7df0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b7de8:	4b1a      	ldr	r3, [pc, #104]	; (b7e54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7dea:	78db      	ldrb	r3, [r3, #3]
   b7dec:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b7df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b7df2:	b11b      	cbz	r3, b7dfc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b7df4:	4b17      	ldr	r3, [pc, #92]	; (b7e54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7df6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b7df8:	791b      	ldrb	r3, [r3, #4]
   b7dfa:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b7dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7dfe:	b11b      	cbz	r3, b7e08 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b7e00:	4b14      	ldr	r3, [pc, #80]	; (b7e54 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7e02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7e04:	789b      	ldrb	r3, [r3, #2]
   b7e06:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7e08:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b7e0c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7e0e:	4912      	ldr	r1, [pc, #72]	; (b7e58 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7e10:	3b05      	subs	r3, #5
   b7e12:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7e14:	429a      	cmp	r2, r3
		*len = msgLen;
   b7e16:	bf88      	it	hi
   b7e18:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7e1a:	7832      	ldrb	r2, [r6, #0]
   b7e1c:	4640      	mov	r0, r8
   b7e1e:	f005 fd03 	bl	bd828 <memcpy>
}
   b7e22:	4628      	mov	r0, r5
   b7e24:	b007      	add	sp, #28
   b7e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b7e2a:	f899 3002 	ldrb.w	r3, [r9, #2]
   b7e2e:	1c5a      	adds	r2, r3, #1
   b7e30:	f889 2002 	strb.w	r2, [r9, #2]
   b7e34:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b7e38:	429a      	cmp	r2, r3
   b7e3a:	d9b7      	bls.n	b7dac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b7e3c:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b7e40:	2b00      	cmp	r3, #0
   b7e42:	d0b3      	beq.n	b7dac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b7e44:	6823      	ldr	r3, [r4, #0]
   b7e46:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7e4a:	685b      	ldr	r3, [r3, #4]
   b7e4c:	4649      	mov	r1, r9
   b7e4e:	4620      	mov	r0, r4
   b7e50:	4798      	blx	r3
   b7e52:	e7ab      	b.n	b7dac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b7e54:	2003e4fe 	.word	0x2003e4fe
   b7e58:	2003e503 	.word	0x2003e503

000b7e5c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7e5c:	b510      	push	{r4, lr}
   b7e5e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7e60:	6a00      	ldr	r0, [r0, #32]
   b7e62:	6803      	ldr	r3, [r0, #0]
   b7e64:	68db      	ldr	r3, [r3, #12]
   b7e66:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7e68:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7e6c:	28ff      	cmp	r0, #255	; 0xff
   b7e6e:	d002      	beq.n	b7e76 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7e70:	2101      	movs	r1, #1
   b7e72:	f003 fde3 	bl	bba3c <pinMode>

    deselectSlave();
   b7e76:	6823      	ldr	r3, [r4, #0]
   b7e78:	4620      	mov	r0, r4
   b7e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7e7c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7e7e:	2064      	movs	r0, #100	; 0x64
   b7e80:	f001 f894 	bl	b8fac <delay>
#endif
    
    return true;
}
   b7e84:	2001      	movs	r0, #1
   b7e86:	bd10      	pop	{r4, pc}

000b7e88 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7e88:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7e8c:	2100      	movs	r1, #0
   b7e8e:	f003 bde6 	b.w	bba5e <digitalWrite>

000b7e92 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7e92:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7e96:	2101      	movs	r1, #1
   b7e98:	f003 bde1 	b.w	bba5e <digitalWrite>

000b7e9c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7e9c:	b570      	push	{r4, r5, r6, lr}
   b7e9e:	4604      	mov	r4, r0
   b7ea0:	460d      	mov	r5, r1
   b7ea2:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7ea4:	f7ff fa7e 	bl	b73a4 <_ZN15RHGenericDriverC1Ev>
   b7ea8:	4b03      	ldr	r3, [pc, #12]	; (b7eb8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b7eaa:	6023      	str	r3, [r4, #0]
   b7eac:	6226      	str	r6, [r4, #32]
   b7eae:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7eb2:	4620      	mov	r0, r4
   b7eb4:	bd70      	pop	{r4, r5, r6, pc}
   b7eb6:	bf00      	nop
   b7eb8:	000beb44 	.word	0x000beb44

000b7ebc <_ZN11RHSPIDriver7spiReadEh>:
{
   b7ebc:	b538      	push	{r3, r4, r5, lr}
   b7ebe:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7ec0:	6a00      	ldr	r0, [r0, #32]
   b7ec2:	6803      	ldr	r3, [r0, #0]
   b7ec4:	6a1b      	ldr	r3, [r3, #32]
{
   b7ec6:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7ec8:	4798      	blx	r3
    selectSlave();
   b7eca:	6823      	ldr	r3, [r4, #0]
   b7ecc:	4620      	mov	r0, r4
   b7ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7ed0:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7ed2:	6a20      	ldr	r0, [r4, #32]
   b7ed4:	6803      	ldr	r3, [r0, #0]
   b7ed6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b7eda:	681b      	ldr	r3, [r3, #0]
   b7edc:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7ede:	6a20      	ldr	r0, [r4, #32]
   b7ee0:	6803      	ldr	r3, [r0, #0]
   b7ee2:	2100      	movs	r1, #0
   b7ee4:	681b      	ldr	r3, [r3, #0]
   b7ee6:	4798      	blx	r3
    deselectSlave();
   b7ee8:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7eea:	4605      	mov	r5, r0
    deselectSlave();
   b7eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7eee:	4620      	mov	r0, r4
   b7ef0:	4798      	blx	r3
    _spi.endTransaction();
   b7ef2:	6a20      	ldr	r0, [r4, #32]
   b7ef4:	6803      	ldr	r3, [r0, #0]
   b7ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7ef8:	4798      	blx	r3
}
   b7efa:	4628      	mov	r0, r5
   b7efc:	bd38      	pop	{r3, r4, r5, pc}

000b7efe <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b7efe:	b570      	push	{r4, r5, r6, lr}
   b7f00:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7f02:	6a00      	ldr	r0, [r0, #32]
   b7f04:	6803      	ldr	r3, [r0, #0]
   b7f06:	6a1b      	ldr	r3, [r3, #32]
{
   b7f08:	4616      	mov	r6, r2
   b7f0a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7f0c:	4798      	blx	r3
    selectSlave();
   b7f0e:	6823      	ldr	r3, [r4, #0]
   b7f10:	4620      	mov	r0, r4
   b7f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7f14:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b7f16:	6a20      	ldr	r0, [r4, #32]
   b7f18:	6803      	ldr	r3, [r0, #0]
   b7f1a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b7f1e:	681b      	ldr	r3, [r3, #0]
   b7f20:	4798      	blx	r3
   b7f22:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b7f24:	6a20      	ldr	r0, [r4, #32]
   b7f26:	6803      	ldr	r3, [r0, #0]
   b7f28:	4631      	mov	r1, r6
   b7f2a:	681b      	ldr	r3, [r3, #0]
   b7f2c:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7f2e:	2001      	movs	r0, #1
   b7f30:	f000 fca2 	bl	b8878 <HAL_Delay_Microseconds>
    deselectSlave();
   b7f34:	6823      	ldr	r3, [r4, #0]
   b7f36:	4620      	mov	r0, r4
   b7f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7f3a:	4798      	blx	r3
    _spi.endTransaction();
   b7f3c:	6a20      	ldr	r0, [r4, #32]
   b7f3e:	6803      	ldr	r3, [r0, #0]
   b7f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f42:	4798      	blx	r3
}
   b7f44:	4628      	mov	r0, r5
   b7f46:	bd70      	pop	{r4, r5, r6, pc}

000b7f48 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b7f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f4a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7f4c:	6a00      	ldr	r0, [r0, #32]
{
   b7f4e:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7f50:	6803      	ldr	r3, [r0, #0]
   b7f52:	6a1b      	ldr	r3, [r3, #32]
{
   b7f54:	460f      	mov	r7, r1
   b7f56:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7f58:	4798      	blx	r3
    selectSlave();
   b7f5a:	6823      	ldr	r3, [r4, #0]
   b7f5c:	4620      	mov	r0, r4
   b7f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7f60:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b7f62:	6a20      	ldr	r0, [r4, #32]
   b7f64:	6803      	ldr	r3, [r0, #0]
   b7f66:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b7f6a:	681b      	ldr	r3, [r3, #0]
   b7f6c:	4798      	blx	r3
   b7f6e:	442e      	add	r6, r5
   b7f70:	4607      	mov	r7, r0
    while (len--)
   b7f72:	42b5      	cmp	r5, r6
   b7f74:	d007      	beq.n	b7f86 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b7f76:	6a20      	ldr	r0, [r4, #32]
   b7f78:	6803      	ldr	r3, [r0, #0]
   b7f7a:	2100      	movs	r1, #0
   b7f7c:	681b      	ldr	r3, [r3, #0]
   b7f7e:	4798      	blx	r3
   b7f80:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7f84:	e7f5      	b.n	b7f72 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b7f86:	6823      	ldr	r3, [r4, #0]
   b7f88:	4620      	mov	r0, r4
   b7f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7f8c:	4798      	blx	r3
    _spi.endTransaction();
   b7f8e:	6a20      	ldr	r0, [r4, #32]
   b7f90:	6803      	ldr	r3, [r0, #0]
   b7f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f94:	4798      	blx	r3
}
   b7f96:	4638      	mov	r0, r7
   b7f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f9a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b7f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f9c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7f9e:	6a00      	ldr	r0, [r0, #32]
{
   b7fa0:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7fa2:	6803      	ldr	r3, [r0, #0]
   b7fa4:	6a1b      	ldr	r3, [r3, #32]
{
   b7fa6:	460f      	mov	r7, r1
   b7fa8:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7faa:	4798      	blx	r3
    selectSlave();
   b7fac:	6823      	ldr	r3, [r4, #0]
   b7fae:	4620      	mov	r0, r4
   b7fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7fb2:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b7fb4:	6a20      	ldr	r0, [r4, #32]
   b7fb6:	6803      	ldr	r3, [r0, #0]
   b7fb8:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b7fbc:	681b      	ldr	r3, [r3, #0]
   b7fbe:	4798      	blx	r3
   b7fc0:	442e      	add	r6, r5
   b7fc2:	4607      	mov	r7, r0
    while (len--)
   b7fc4:	42b5      	cmp	r5, r6
   b7fc6:	d006      	beq.n	b7fd6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b7fc8:	6a20      	ldr	r0, [r4, #32]
   b7fca:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7fce:	6803      	ldr	r3, [r0, #0]
   b7fd0:	681b      	ldr	r3, [r3, #0]
   b7fd2:	4798      	blx	r3
    while (len--)
   b7fd4:	e7f6      	b.n	b7fc4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b7fd6:	6823      	ldr	r3, [r4, #0]
   b7fd8:	4620      	mov	r0, r4
   b7fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7fdc:	4798      	blx	r3
    _spi.endTransaction();
   b7fde:	6a20      	ldr	r0, [r4, #32]
   b7fe0:	6803      	ldr	r3, [r0, #0]
   b7fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7fe4:	4798      	blx	r3
}
   b7fe6:	4638      	mov	r0, r7
   b7fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7fea <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b7fea:	6a00      	ldr	r0, [r0, #32]
   b7fec:	6803      	ldr	r3, [r0, #0]
   b7fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7ff0:	4718      	bx	r3

000b7ff2 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b7ff2:	2001      	movs	r0, #1
   b7ff4:	4770      	bx	lr

000b7ff6 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b7ff6:	20fb      	movs	r0, #251	; 0xfb
   b7ff8:	4770      	bx	lr

000b7ffa <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b7ffa:	4770      	bx	lr

000b7ffc <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b7ffc:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b7ffe:	7903      	ldrb	r3, [r0, #4]
   b8000:	2b05      	cmp	r3, #5
{
   b8002:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b8004:	d010      	beq.n	b8028 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b8006:	6803      	ldr	r3, [r0, #0]
   b8008:	2105      	movs	r1, #5
   b800a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b800e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b8010:	2207      	movs	r2, #7
   b8012:	2101      	movs	r1, #1
   b8014:	4620      	mov	r0, r4
   b8016:	f7ff ff72 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b801a:	2280      	movs	r2, #128	; 0x80
   b801c:	2140      	movs	r1, #64	; 0x40
   b801e:	4620      	mov	r0, r4
   b8020:	f7ff ff6d 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b8024:	2305      	movs	r3, #5
   b8026:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b8028:	7923      	ldrb	r3, [r4, #4]
   b802a:	2b05      	cmp	r3, #5
   b802c:	d0fc      	beq.n	b8028 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b802e:	7e20      	ldrb	r0, [r4, #24]
}
   b8030:	bd10      	pop	{r4, pc}

000b8032 <_ZN7RH_RF95D0Ev>:
   b8032:	b510      	push	{r4, lr}
   b8034:	f44f 7198 	mov.w	r1, #304	; 0x130
   b8038:	4604      	mov	r4, r0
   b803a:	f7fc f830 	bl	b409e <_ZdlPvj>
   b803e:	4620      	mov	r0, r4
   b8040:	bd10      	pop	{r4, pc}

000b8042 <_ZN7RH_RF955sleepEv>:
{
   b8042:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b8044:	7903      	ldrb	r3, [r0, #4]
   b8046:	2b01      	cmp	r3, #1
{
   b8048:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b804a:	d00b      	beq.n	b8064 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b804c:	6803      	ldr	r3, [r0, #0]
   b804e:	2101      	movs	r1, #1
   b8050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8054:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b8056:	2200      	movs	r2, #0
   b8058:	2101      	movs	r1, #1
   b805a:	4620      	mov	r0, r4
   b805c:	f7ff ff4f 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b8060:	2301      	movs	r3, #1
   b8062:	7123      	strb	r3, [r4, #4]
}
   b8064:	2001      	movs	r0, #1
   b8066:	bd10      	pop	{r4, pc}

000b8068 <_ZN7RH_RF954recvEPhS0_>:
{
   b8068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b806a:	6803      	ldr	r3, [r0, #0]
   b806c:	68db      	ldr	r3, [r3, #12]
{
   b806e:	4604      	mov	r4, r0
   b8070:	460f      	mov	r7, r1
   b8072:	4615      	mov	r5, r2
    if (!available())
   b8074:	4798      	blx	r3
   b8076:	4606      	mov	r6, r0
   b8078:	b1b0      	cbz	r0, b80a8 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b807a:	b187      	cbz	r7, b809e <_ZN7RH_RF954recvEPhS0_+0x36>
   b807c:	b17d      	cbz	r5, b809e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b807e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b8082:	782a      	ldrb	r2, [r5, #0]
   b8084:	3b03      	subs	r3, #3
   b8086:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b8088:	bfde      	ittt	le
   b808a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b808e:	3b04      	suble	r3, #4
   b8090:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b8092:	782a      	ldrb	r2, [r5, #0]
   b8094:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b8098:	4638      	mov	r0, r7
   b809a:	f005 fbc5 	bl	bd828 <memcpy>
    _rxBufValid = false;
   b809e:	2300      	movs	r3, #0
   b80a0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b80a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b80a8:	4630      	mov	r0, r6
   b80aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80ac <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b80ac:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b80ae:	b538      	push	{r3, r4, r5, lr}
   b80b0:	4605      	mov	r5, r0
   b80b2:	460c      	mov	r4, r1
	if (power > 20)
   b80b4:	dc14      	bgt.n	b80e0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b80b6:	2901      	cmp	r1, #1
   b80b8:	dd14      	ble.n	b80e4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b80ba:	2911      	cmp	r1, #17
   b80bc:	dd13      	ble.n	b80e6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b80be:	2207      	movs	r2, #7
   b80c0:	214d      	movs	r1, #77	; 0x4d
   b80c2:	4628      	mov	r0, r5
   b80c4:	f7ff ff1b 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b80c8:	3c03      	subs	r4, #3
   b80ca:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b80cc:	1ea2      	subs	r2, r4, #2
   b80ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b80d2:	4628      	mov	r0, r5
   b80d4:	b2d2      	uxtb	r2, r2
}
   b80d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b80da:	2109      	movs	r1, #9
   b80dc:	f7ff bf0f 	b.w	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b80e0:	2414      	movs	r4, #20
   b80e2:	e7ec      	b.n	b80be <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b80e4:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b80e6:	2204      	movs	r2, #4
   b80e8:	214d      	movs	r1, #77	; 0x4d
   b80ea:	4628      	mov	r0, r5
   b80ec:	f7ff ff07 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
   b80f0:	e7ec      	b.n	b80cc <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b80f4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b80f4:	b538      	push	{r3, r4, r5, lr}
   b80f6:	4604      	mov	r4, r0
   b80f8:	4615      	mov	r5, r2
    _rxBufValid(0)
   b80fa:	461a      	mov	r2, r3
   b80fc:	f7ff fece 	bl	b7e9c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b8100:	4b09      	ldr	r3, [pc, #36]	; (b8128 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b8102:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b8104:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b8106:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b8108:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b810c:	2201      	movs	r2, #1
    _rxBufValid(0)
   b810e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b8112:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b8116:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b811a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b811e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b8122:	4620      	mov	r0, r4
   b8124:	bd38      	pop	{r3, r4, r5, pc}
   b8126:	bf00      	nop
   b8128:	000bebdc 	.word	0x000bebdc

000b812c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b812c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b8130:	2b03      	cmp	r3, #3
   b8132:	d91b      	bls.n	b816c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b8134:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b8138:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b813a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b813e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b8140:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b8144:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b8146:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b814a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b814c:	7983      	ldrb	r3, [r0, #6]
   b814e:	b933      	cbnz	r3, b815e <_ZN7RH_RF9513validateRxBufEv+0x32>
   b8150:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b8152:	7942      	ldrb	r2, [r0, #5]
   b8154:	429a      	cmp	r2, r3
   b8156:	d002      	beq.n	b815e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b8158:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b815a:	2bff      	cmp	r3, #255	; 0xff
   b815c:	d106      	bne.n	b816c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b815e:	8a83      	ldrh	r3, [r0, #20]
   b8160:	3301      	adds	r3, #1
   b8162:	b29b      	uxth	r3, r3
   b8164:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b8166:	2301      	movs	r3, #1
   b8168:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b816c:	4770      	bx	lr
	...

000b8170 <_ZN7RH_RF9512setFrequencyEf>:
{
   b8170:	b538      	push	{r3, r4, r5, lr}
   b8172:	4604      	mov	r4, r0
   b8174:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8178:	ee10 0a10 	vmov	r0, s0
{
   b817c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8180:	f004 ff60 	bl	bd044 <__aeabi_f2d>
   b8184:	a317      	add	r3, pc, #92	; (adr r3, b81e4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b8186:	e9d3 2300 	ldrd	r2, r3, [r3]
   b818a:	f004 ffb3 	bl	bd0f4 <__aeabi_dmul>
   b818e:	a317      	add	r3, pc, #92	; (adr r3, b81ec <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b8190:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8194:	f005 f8d8 	bl	bd348 <__aeabi_ddiv>
   b8198:	f005 fa84 	bl	bd6a4 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b819c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b819e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b81a0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b81a4:	4620      	mov	r0, r4
   b81a6:	f7ff feaa 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b81aa:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b81ae:	2107      	movs	r1, #7
   b81b0:	4620      	mov	r0, r4
   b81b2:	f7ff fea4 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b81b6:	b2ea      	uxtb	r2, r5
   b81b8:	2108      	movs	r1, #8
   b81ba:	4620      	mov	r0, r4
   b81bc:	f7ff fe9f 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b81c0:	eddf 7a07 	vldr	s15, [pc, #28]	; b81e0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b81c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b81c8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b81cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b81d0:	bfac      	ite	ge
   b81d2:	2301      	movge	r3, #1
   b81d4:	2300      	movlt	r3, #0
}
   b81d6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b81d8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b81dc:	bd38      	pop	{r3, r4, r5, pc}
   b81de:	bf00      	nop
   b81e0:	4442c000 	.word	0x4442c000
   b81e4:	00000000 	.word	0x00000000
   b81e8:	412e8480 	.word	0x412e8480
   b81ec:	00000000 	.word	0x00000000
   b81f0:	404e8480 	.word	0x404e8480

000b81f4 <_ZN7RH_RF9511setModeIdleEv>:
{
   b81f4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b81f6:	7903      	ldrb	r3, [r0, #4]
   b81f8:	2b02      	cmp	r3, #2
{
   b81fa:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b81fc:	d00b      	beq.n	b8216 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b81fe:	6803      	ldr	r3, [r0, #0]
   b8200:	2102      	movs	r1, #2
   b8202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8206:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b8208:	2201      	movs	r2, #1
   b820a:	4611      	mov	r1, r2
   b820c:	4620      	mov	r0, r4
   b820e:	f7ff fe76 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b8212:	2302      	movs	r3, #2
   b8214:	7123      	strb	r3, [r4, #4]
}
   b8216:	bd10      	pop	{r4, pc}

000b8218 <_ZN7RH_RF9515handleInterruptEv>:
{
   b8218:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b821a:	2112      	movs	r1, #18
{
   b821c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b821e:	f7ff fe4d 	bl	b7ebc <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b8222:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b8224:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b8226:	4620      	mov	r0, r4
   b8228:	f7ff fe48 	bl	b7ebc <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b822c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b822e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8230:	2112      	movs	r1, #18
   b8232:	4620      	mov	r0, r4
   b8234:	f7ff fe63 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b8238:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b823a:	2b04      	cmp	r3, #4
   b823c:	d107      	bne.n	b824e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b823e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b8242:	d117      	bne.n	b8274 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b8244:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b8248:	b10b      	cbz	r3, b824e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b824a:	0670      	lsls	r0, r6, #25
   b824c:	d512      	bpl.n	b8274 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b824e:	7923      	ldrb	r3, [r4, #4]
   b8250:	2b04      	cmp	r3, #4
   b8252:	d101      	bne.n	b8258 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b8254:	0669      	lsls	r1, r5, #25
   b8256:	d422      	bmi.n	b829e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b8258:	7923      	ldrb	r3, [r4, #4]
   b825a:	2b03      	cmp	r3, #3
   b825c:	d101      	bne.n	b8262 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b825e:	072a      	lsls	r2, r5, #28
   b8260:	d468      	bmi.n	b8334 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b8262:	7923      	ldrb	r3, [r4, #4]
   b8264:	2b05      	cmp	r3, #5
   b8266:	d10e      	bne.n	b8286 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b8268:	076b      	lsls	r3, r5, #29
   b826a:	d50c      	bpl.n	b8286 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b826c:	f005 0501 	and.w	r5, r5, #1
   b8270:	7625      	strb	r5, [r4, #24]
   b8272:	e063      	b.n	b833c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b8274:	8a63      	ldrh	r3, [r4, #18]
   b8276:	3301      	adds	r3, #1
   b8278:	b29b      	uxth	r3, r3
   b827a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b827c:	2300      	movs	r3, #0
   b827e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b8282:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8286:	22ff      	movs	r2, #255	; 0xff
   b8288:	2112      	movs	r1, #18
   b828a:	4620      	mov	r0, r4
   b828c:	f7ff fe37 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8290:	4620      	mov	r0, r4
   b8292:	22ff      	movs	r2, #255	; 0xff
}
   b8294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8298:	2112      	movs	r1, #18
   b829a:	f7ff be30 	b.w	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b829e:	2113      	movs	r1, #19
   b82a0:	4620      	mov	r0, r4
   b82a2:	f7ff fe0b 	bl	b7ebc <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b82a6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b82a8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b82aa:	4620      	mov	r0, r4
   b82ac:	f7ff fe06 	bl	b7ebc <_ZN11RHSPIDriver7spiReadEh>
   b82b0:	210d      	movs	r1, #13
   b82b2:	4602      	mov	r2, r0
   b82b4:	4620      	mov	r0, r4
   b82b6:	f7ff fe22 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b82ba:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b82be:	462b      	mov	r3, r5
   b82c0:	2100      	movs	r1, #0
   b82c2:	4620      	mov	r0, r4
   b82c4:	f7ff fe40 	bl	b7f48 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b82c8:	2119      	movs	r1, #25
	_bufLen = len;
   b82ca:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b82ce:	4620      	mov	r0, r4
   b82d0:	f7ff fdf4 	bl	b7ebc <_ZN11RHSPIDriver7spiReadEh>
   b82d4:	b240      	sxtb	r0, r0
   b82d6:	2800      	cmp	r0, #0
   b82d8:	bfb8      	it	lt
   b82da:	3003      	addlt	r0, #3
   b82dc:	1080      	asrs	r0, r0, #2
   b82de:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b82e2:	211a      	movs	r1, #26
   b82e4:	4620      	mov	r0, r4
   b82e6:	f7ff fde9 	bl	b7ebc <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b82ea:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b82ee:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b82f0:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b82f2:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b82f4:	bfa9      	itett	ge
   b82f6:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b82f8:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b82fa:	b21b      	sxthge	r3, r3
   b82fc:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b82fe:	bfb2      	itee	lt
   b8300:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b8302:	220f      	movge	r2, #15
   b8304:	fb93 f3f2 	sdivge	r3, r3, r2
   b8308:	b21b      	sxth	r3, r3
   b830a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b830c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b8310:	b16b      	cbz	r3, b832e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b8312:	8a23      	ldrh	r3, [r4, #16]
   b8314:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b8316:	b21b      	sxth	r3, r3
   b8318:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b831a:	4620      	mov	r0, r4
   b831c:	f7ff ff06 	bl	b812c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b8320:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b8324:	2b00      	cmp	r3, #0
   b8326:	d0ae      	beq.n	b8286 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b8328:	f7ff ff64 	bl	b81f4 <_ZN7RH_RF9511setModeIdleEv>
   b832c:	e7ab      	b.n	b8286 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b832e:	8a23      	ldrh	r3, [r4, #16]
   b8330:	3ba4      	subs	r3, #164	; 0xa4
   b8332:	e7f0      	b.n	b8316 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b8334:	8ae3      	ldrh	r3, [r4, #22]
   b8336:	3301      	adds	r3, #1
   b8338:	b29b      	uxth	r3, r3
   b833a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b833c:	4620      	mov	r0, r4
   b833e:	e7f3      	b.n	b8328 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b8340 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b8340:	4b02      	ldr	r3, [pc, #8]	; (b834c <_ZN7RH_RF954isr0Ev+0xc>)
   b8342:	6818      	ldr	r0, [r3, #0]
   b8344:	b108      	cbz	r0, b834a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b8346:	f7ff bf67 	b.w	b8218 <_ZN7RH_RF9515handleInterruptEv>
}
   b834a:	4770      	bx	lr
   b834c:	2003e600 	.word	0x2003e600

000b8350 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b8350:	4b02      	ldr	r3, [pc, #8]	; (b835c <_ZN7RH_RF954isr1Ev+0xc>)
   b8352:	6858      	ldr	r0, [r3, #4]
   b8354:	b108      	cbz	r0, b835a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b8356:	f7ff bf5f 	b.w	b8218 <_ZN7RH_RF9515handleInterruptEv>
}
   b835a:	4770      	bx	lr
   b835c:	2003e600 	.word	0x2003e600

000b8360 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b8360:	4b02      	ldr	r3, [pc, #8]	; (b836c <_ZN7RH_RF954isr2Ev+0xc>)
   b8362:	6898      	ldr	r0, [r3, #8]
   b8364:	b108      	cbz	r0, b836a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b8366:	f7ff bf57 	b.w	b8218 <_ZN7RH_RF9515handleInterruptEv>
}
   b836a:	4770      	bx	lr
   b836c:	2003e600 	.word	0x2003e600

000b8370 <_ZN7RH_RF959setModeRxEv>:
{
   b8370:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b8372:	7903      	ldrb	r3, [r0, #4]
   b8374:	2b04      	cmp	r3, #4
{
   b8376:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b8378:	d010      	beq.n	b839c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b837a:	6803      	ldr	r3, [r0, #0]
   b837c:	2104      	movs	r1, #4
   b837e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8382:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b8384:	2205      	movs	r2, #5
   b8386:	2101      	movs	r1, #1
   b8388:	4620      	mov	r0, r4
   b838a:	f7ff fdb8 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b838e:	2200      	movs	r2, #0
   b8390:	2140      	movs	r1, #64	; 0x40
   b8392:	4620      	mov	r0, r4
   b8394:	f7ff fdb3 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b8398:	2304      	movs	r3, #4
   b839a:	7123      	strb	r3, [r4, #4]
}
   b839c:	bd10      	pop	{r4, pc}

000b839e <_ZN7RH_RF959availableEv>:
{
   b839e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b83a0:	7903      	ldrb	r3, [r0, #4]
   b83a2:	2b03      	cmp	r3, #3
{
   b83a4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b83a6:	d005      	beq.n	b83b4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b83a8:	f7ff ffe2 	bl	b8370 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b83ac:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b83b0:	b2c0      	uxtb	r0, r0
}
   b83b2:	bd10      	pop	{r4, pc}
	return false;
   b83b4:	2000      	movs	r0, #0
   b83b6:	e7fc      	b.n	b83b2 <_ZN7RH_RF959availableEv+0x14>

000b83b8 <_ZN7RH_RF959setModeTxEv>:
{
   b83b8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b83ba:	7903      	ldrb	r3, [r0, #4]
   b83bc:	2b03      	cmp	r3, #3
{
   b83be:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b83c0:	d010      	beq.n	b83e4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b83c2:	6803      	ldr	r3, [r0, #0]
   b83c4:	2103      	movs	r1, #3
   b83c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b83ca:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b83cc:	2203      	movs	r2, #3
   b83ce:	2101      	movs	r1, #1
   b83d0:	4620      	mov	r0, r4
   b83d2:	f7ff fd94 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b83d6:	2240      	movs	r2, #64	; 0x40
   b83d8:	4611      	mov	r1, r2
   b83da:	4620      	mov	r0, r4
   b83dc:	f7ff fd8f 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b83e0:	2303      	movs	r3, #3
   b83e2:	7123      	strb	r3, [r4, #4]
}
   b83e4:	bd10      	pop	{r4, pc}

000b83e6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b83e6:	2afb      	cmp	r2, #251	; 0xfb
{
   b83e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b83ea:	4604      	mov	r4, r0
   b83ec:	460f      	mov	r7, r1
   b83ee:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b83f0:	d902      	bls.n	b83f8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b83f2:	2600      	movs	r6, #0
}
   b83f4:	4630      	mov	r0, r6
   b83f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b83f8:	6803      	ldr	r3, [r0, #0]
   b83fa:	6a1b      	ldr	r3, [r3, #32]
   b83fc:	4798      	blx	r3
    setModeIdle();
   b83fe:	4620      	mov	r0, r4
   b8400:	f7ff fef8 	bl	b81f4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b8404:	6823      	ldr	r3, [r4, #0]
   b8406:	4620      	mov	r0, r4
   b8408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b840a:	4798      	blx	r3
   b840c:	4606      	mov	r6, r0
   b840e:	2800      	cmp	r0, #0
   b8410:	d0ef      	beq.n	b83f2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b8412:	2200      	movs	r2, #0
   b8414:	210d      	movs	r1, #13
   b8416:	4620      	mov	r0, r4
   b8418:	f7ff fd71 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b841c:	7ae2      	ldrb	r2, [r4, #11]
   b841e:	2100      	movs	r1, #0
   b8420:	4620      	mov	r0, r4
   b8422:	f7ff fd6c 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b8426:	7b22      	ldrb	r2, [r4, #12]
   b8428:	2100      	movs	r1, #0
   b842a:	4620      	mov	r0, r4
   b842c:	f7ff fd67 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b8430:	7b62      	ldrb	r2, [r4, #13]
   b8432:	2100      	movs	r1, #0
   b8434:	4620      	mov	r0, r4
   b8436:	f7ff fd62 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b843a:	7ba2      	ldrb	r2, [r4, #14]
   b843c:	2100      	movs	r1, #0
   b843e:	4620      	mov	r0, r4
   b8440:	f7ff fd5d 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b8444:	462b      	mov	r3, r5
   b8446:	463a      	mov	r2, r7
   b8448:	2100      	movs	r1, #0
   b844a:	4620      	mov	r0, r4
   b844c:	f7ff fda5 	bl	b7f9a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b8450:	1d2a      	adds	r2, r5, #4
   b8452:	b2d2      	uxtb	r2, r2
   b8454:	2122      	movs	r1, #34	; 0x22
   b8456:	4620      	mov	r0, r4
   b8458:	f7ff fd51 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b845c:	4620      	mov	r0, r4
   b845e:	f7ff ffab 	bl	b83b8 <_ZN7RH_RF959setModeTxEv>
    return true;
   b8462:	e7c7      	b.n	b83f4 <_ZN7RH_RF954sendEPKhh+0xe>

000b8464 <_ZN7RH_RF9510setTxPowerEab>:
{
   b8464:	b510      	push	{r4, lr}
   b8466:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b8468:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b846c:	b172      	cbz	r2, b848c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b846e:	f381 0204 	usat	r2, #4, r1
   b8472:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b8476:	b2d2      	uxtb	r2, r2
   b8478:	2109      	movs	r1, #9
   b847a:	f7ff fd40 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b847e:	4620      	mov	r0, r4
   b8480:	2204      	movs	r2, #4
}
   b8482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b8486:	214d      	movs	r1, #77	; 0x4d
   b8488:	f7ff bd39 	b.w	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
}
   b848c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8490:	f7ff be0c 	b.w	b80ac <_ZN7RH_RF9510setTxPowerEab.part.0>

000b8494 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b8494:	b538      	push	{r3, r4, r5, lr}
   b8496:	460c      	mov	r4, r1
   b8498:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b849a:	780a      	ldrb	r2, [r1, #0]
   b849c:	211d      	movs	r1, #29
   b849e:	f7ff fd2e 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b84a2:	7862      	ldrb	r2, [r4, #1]
   b84a4:	211e      	movs	r1, #30
   b84a6:	4628      	mov	r0, r5
   b84a8:	f7ff fd29 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b84ac:	78a2      	ldrb	r2, [r4, #2]
   b84ae:	4628      	mov	r0, r5
   b84b0:	2126      	movs	r1, #38	; 0x26
}
   b84b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b84b6:	f7ff bd22 	b.w	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b84bc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b84bc:	2905      	cmp	r1, #5
{
   b84be:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b84c0:	d80f      	bhi.n	b84e2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b84c2:	4b09      	ldr	r3, [pc, #36]	; (b84e8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b84c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b84c8:	185c      	adds	r4, r3, r1
   b84ca:	5a5a      	ldrh	r2, [r3, r1]
   b84cc:	78a3      	ldrb	r3, [r4, #2]
   b84ce:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b84d2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b84d4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b84d8:	f7ff ffdc 	bl	b8494 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b84dc:	2001      	movs	r0, #1
}
   b84de:	b002      	add	sp, #8
   b84e0:	bd10      	pop	{r4, pc}
        return false;
   b84e2:	2000      	movs	r0, #0
   b84e4:	e7fb      	b.n	b84de <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b84e6:	bf00      	nop
   b84e8:	000bebc4 	.word	0x000bebc4

000b84ec <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b84ec:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b84ee:	0a0a      	lsrs	r2, r1, #8
{
   b84f0:	4605      	mov	r5, r0
   b84f2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b84f4:	2120      	movs	r1, #32
   b84f6:	f7ff fd02 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b84fa:	b2e2      	uxtb	r2, r4
   b84fc:	4628      	mov	r0, r5
   b84fe:	2121      	movs	r1, #33	; 0x21
}
   b8500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b8504:	f7ff bcfb 	b.w	b7efe <_ZN11RHSPIDriver8spiWriteEhh>

000b8508 <_ZN7RH_RF954initEv>:
{
   b8508:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b850a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b850c:	f7ff fca6 	bl	b7e5c <_ZN11RHSPIDriver4initEv>
   b8510:	4606      	mov	r6, r0
   b8512:	b918      	cbnz	r0, b851c <_ZN7RH_RF954initEv+0x14>
	return false;
   b8514:	2600      	movs	r6, #0
}
   b8516:	4630      	mov	r0, r6
   b8518:	b002      	add	sp, #8
   b851a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b851c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b8520:	2dff      	cmp	r5, #255	; 0xff
   b8522:	d054      	beq.n	b85ce <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b8524:	4629      	mov	r1, r5
   b8526:	4620      	mov	r0, r4
   b8528:	f7ff fd5f 	bl	b7fea <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b852c:	2280      	movs	r2, #128	; 0x80
   b852e:	2101      	movs	r1, #1
   b8530:	4620      	mov	r0, r4
   b8532:	f7ff fce4 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b8536:	200a      	movs	r0, #10
   b8538:	f000 fd38 	bl	b8fac <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b853c:	2101      	movs	r1, #1
   b853e:	4620      	mov	r0, r4
   b8540:	f7ff fcbc 	bl	b7ebc <_ZN11RHSPIDriver7spiReadEh>
   b8544:	2880      	cmp	r0, #128	; 0x80
   b8546:	d1e5      	bne.n	b8514 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b8548:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b854c:	28ff      	cmp	r0, #255	; 0xff
   b854e:	d01c      	beq.n	b858a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b8550:	2100      	movs	r1, #0
   b8552:	f003 fa73 	bl	bba3c <pinMode>
	if (_myInterruptIndex == 0xff)
   b8556:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b855a:	2bff      	cmp	r3, #255	; 0xff
   b855c:	d107      	bne.n	b856e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b855e:	4a26      	ldr	r2, [pc, #152]	; (b85f8 <_ZN7RH_RF954initEv+0xf0>)
   b8560:	7813      	ldrb	r3, [r2, #0]
   b8562:	2b03      	cmp	r3, #3
   b8564:	d8d6      	bhi.n	b8514 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b8566:	1c59      	adds	r1, r3, #1
   b8568:	7011      	strb	r1, [r2, #0]
   b856a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b856e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b8572:	4b22      	ldr	r3, [pc, #136]	; (b85fc <_ZN7RH_RF954initEv+0xf4>)
   b8574:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b8578:	bb62      	cbnz	r2, b85d4 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b857a:	4921      	ldr	r1, [pc, #132]	; (b8600 <_ZN7RH_RF954initEv+0xf8>)
   b857c:	9200      	str	r2, [sp, #0]
   b857e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8582:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b8584:	b2a8      	uxth	r0, r5
   b8586:	f000 ffaf 	bl	b94e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b858a:	2200      	movs	r2, #0
   b858c:	210e      	movs	r1, #14
   b858e:	4620      	mov	r0, r4
   b8590:	f7ff fcb5 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b8594:	2200      	movs	r2, #0
   b8596:	210f      	movs	r1, #15
   b8598:	4620      	mov	r0, r4
   b859a:	f7ff fcb0 	bl	b7efe <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b859e:	4620      	mov	r0, r4
   b85a0:	f7ff fe28 	bl	b81f4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b85a4:	2100      	movs	r1, #0
   b85a6:	4620      	mov	r0, r4
   b85a8:	f7ff ff88 	bl	b84bc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b85ac:	2108      	movs	r1, #8
   b85ae:	4620      	mov	r0, r4
   b85b0:	f7ff ff9c 	bl	b84ec <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b85b4:	ed9f 0a13 	vldr	s0, [pc, #76]	; b8604 <_ZN7RH_RF954initEv+0xfc>
   b85b8:	4620      	mov	r0, r4
   b85ba:	f7ff fdd9 	bl	b8170 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b85be:	2300      	movs	r3, #0
   b85c0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b85c4:	210d      	movs	r1, #13
   b85c6:	4620      	mov	r0, r4
   b85c8:	f7ff fd70 	bl	b80ac <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b85cc:	e7a3      	b.n	b8516 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b85ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b85d2:	e7ab      	b.n	b852c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b85d4:	2a01      	cmp	r2, #1
   b85d6:	f04f 0300 	mov.w	r3, #0
   b85da:	d104      	bne.n	b85e6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b85dc:	9300      	str	r3, [sp, #0]
   b85de:	490a      	ldr	r1, [pc, #40]	; (b8608 <_ZN7RH_RF954initEv+0x100>)
   b85e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b85e4:	e7ce      	b.n	b8584 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b85e6:	2a02      	cmp	r2, #2
   b85e8:	d194      	bne.n	b8514 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b85ea:	9300      	str	r3, [sp, #0]
   b85ec:	4907      	ldr	r1, [pc, #28]	; (b860c <_ZN7RH_RF954initEv+0x104>)
   b85ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b85f2:	2201      	movs	r2, #1
   b85f4:	e7c6      	b.n	b8584 <_ZN7RH_RF954initEv+0x7c>
   b85f6:	bf00      	nop
   b85f8:	2003e5fd 	.word	0x2003e5fd
   b85fc:	2003e600 	.word	0x2003e600
   b8600:	000b8341 	.word	0x000b8341
   b8604:	43d90000 	.word	0x43d90000
   b8608:	000b8351 	.word	0x000b8351
   b860c:	000b8361 	.word	0x000b8361

000b8610 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b8610:	4770      	bx	lr

000b8612 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b8612:	6803      	ldr	r3, [r0, #0]
   b8614:	685b      	ldr	r3, [r3, #4]
   b8616:	4718      	bx	r3

000b8618 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8618:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b861a:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b861c:	4604      	mov	r4, r0
    if (lastUpdate) {
   b861e:	b133      	cbz	r3, b862e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8620:	b131      	cbz	r1, b8630 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b8622:	6823      	ldr	r3, [r4, #0]
   b8624:	4620      	mov	r0, r4
   b8626:	689b      	ldr	r3, [r3, #8]
   b8628:	4798      	blx	r3
            lastUpdate = 0;
   b862a:	2300      	movs	r3, #0
   b862c:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b862e:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8630:	f000 f92a 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8634:	69a3      	ldr	r3, [r4, #24]
   b8636:	1ac0      	subs	r0, r0, r3
   b8638:	69e3      	ldr	r3, [r4, #28]
   b863a:	4298      	cmp	r0, r3
   b863c:	d2f1      	bcs.n	b8622 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b863e:	e7f6      	b.n	b862e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b8640 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8640:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b8642:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8644:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b8646:	b11b      	cbz	r3, b8650 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8648:	f000 f91e 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b864c:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b864e:	bd10      	pop	{r4, pc}
        save();
   b8650:	6803      	ldr	r3, [r0, #0]
}
   b8652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b8656:	689b      	ldr	r3, [r3, #8]
   b8658:	4718      	bx	r3

000b865a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b865a:	f000 b8ed 	b.w	b8838 <os_mutex_recursive_unlock>

000b865e <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b865e:	b510      	push	{r4, lr}
   b8660:	4604      	mov	r4, r0
   b8662:	3004      	adds	r0, #4
   b8664:	f7fd f99a 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8668:	6823      	ldr	r3, [r4, #0]
   b866a:	68e1      	ldr	r1, [r4, #12]
   b866c:	695b      	ldr	r3, [r3, #20]
   b866e:	4620      	mov	r0, r4
   b8670:	4798      	blx	r3
   b8672:	b918      	cbnz	r0, b867c <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b8674:	6823      	ldr	r3, [r4, #0]
   b8676:	4620      	mov	r0, r4
   b8678:	699b      	ldr	r3, [r3, #24]
   b867a:	4798      	blx	r3
      { _M_device.unlock(); }
   b867c:	6860      	ldr	r0, [r4, #4]
   b867e:	f7ff ffec 	bl	b865a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8682:	2001      	movs	r0, #1
   b8684:	bd10      	pop	{r4, pc}
	...

000b8688 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8688:	b5f0      	push	{r4, r5, r6, r7, lr}
   b868a:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b868e:	4f18      	ldr	r7, [pc, #96]	; (b86f0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8690:	4e18      	ldr	r6, [pc, #96]	; (b86f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b8692:	4d19      	ldr	r5, [pc, #100]	; (b86f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b8694:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b8696:	42a0      	cmp	r0, r4
   b8698:	d00c      	beq.n	b86b4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b869a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b869e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b86a0:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b86a4:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b86a6:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b86a8:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b86ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b86b0:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b86b2:	e7f0      	b.n	b8696 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b86b4:	f001 0403 	and.w	r4, r1, #3
   b86b8:	4404      	add	r4, r0
    k = 0;
   b86ba:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b86bc:	42a0      	cmp	r0, r4
   b86be:	d004      	beq.n	b86ca <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b86c0:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b86c4:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b86c8:	e7f8      	b.n	b86bc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b86ca:	4809      	ldr	r0, [pc, #36]	; (b86f0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b86cc:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b86ce:	4809      	ldr	r0, [pc, #36]	; (b86f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b86d0:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b86d4:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b86d6:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b86d8:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b86da:	4b08      	ldr	r3, [pc, #32]	; (b86fc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b86dc:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b86e0:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b86e2:	4b07      	ldr	r3, [pc, #28]	; (b8700 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b86e4:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b86e8:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b86ea:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b86ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b86f0:	cc9e2d51 	.word	0xcc9e2d51
   b86f4:	1b873593 	.word	0x1b873593
   b86f8:	e6546b64 	.word	0xe6546b64
   b86fc:	85ebca6b 	.word	0x85ebca6b
   b8700:	c2b2ae35 	.word	0xc2b2ae35

000b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b8704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8706:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8708:	3004      	adds	r0, #4
   b870a:	f7fd f947 	bl	b599c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b870e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b8710:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b8712:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b8714:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8716:	68a6      	ldr	r6, [r4, #8]
   b8718:	4a05      	ldr	r2, [pc, #20]	; (b8730 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b871a:	88f1      	ldrh	r1, [r6, #6]
   b871c:	4630      	mov	r0, r6
   b871e:	f7ff ffb3 	bl	b8688 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b8722:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8724:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b8726:	6860      	ldr	r0, [r4, #4]
   b8728:	f7ff ff97 	bl	b865a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b872c:	4628      	mov	r0, r5
   b872e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8730:	851c2a3f 	.word	0x851c2a3f

000b8734 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b8734:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8736:	460d      	mov	r5, r1
   b8738:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b873a:	f7ff ffe3 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b873e:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b8740:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b8742:	d923      	bls.n	b878c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b8744:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b8746:	6922      	ldr	r2, [r4, #16]
   b8748:	6819      	ldr	r1, [r3, #0]
   b874a:	4291      	cmp	r1, r2
   b874c:	d11f      	bne.n	b878e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b874e:	8899      	ldrh	r1, [r3, #4]
   b8750:	8aa2      	ldrh	r2, [r4, #20]
   b8752:	4291      	cmp	r1, r2
   b8754:	d11b      	bne.n	b878e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b8756:	88d9      	ldrh	r1, [r3, #6]
   b8758:	b2aa      	uxth	r2, r5
   b875a:	4291      	cmp	r1, r2
   b875c:	d817      	bhi.n	b878e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b875e:	689a      	ldr	r2, [r3, #8]
   b8760:	4282      	cmp	r2, r0
   b8762:	d114      	bne.n	b878e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b8764:	68e2      	ldr	r2, [r4, #12]
   b8766:	42aa      	cmp	r2, r5
   b8768:	d905      	bls.n	b8776 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b876a:	2100      	movs	r1, #0
   b876c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b876e:	68e2      	ldr	r2, [r4, #12]
   b8770:	3501      	adds	r5, #1
   b8772:	42aa      	cmp	r2, r5
   b8774:	d8fa      	bhi.n	b876c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8776:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b877a:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b877c:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b877e:	68a5      	ldr	r5, [r4, #8]
   b8780:	f7ff ffc0 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8784:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b8786:	2001      	movs	r0, #1
}
   b8788:	b002      	add	sp, #8
   b878a:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b878c:	b19d      	cbz	r5, b87b6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b878e:	68a1      	ldr	r1, [r4, #8]
   b8790:	680a      	ldr	r2, [r1, #0]
   b8792:	b192      	cbz	r2, b87ba <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b8794:	6888      	ldr	r0, [r1, #8]
   b8796:	888b      	ldrh	r3, [r1, #4]
   b8798:	9001      	str	r0, [sp, #4]
   b879a:	88c9      	ldrh	r1, [r1, #6]
   b879c:	4808      	ldr	r0, [pc, #32]	; (b87c0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b879e:	9100      	str	r1, [sp, #0]
   b87a0:	4908      	ldr	r1, [pc, #32]	; (b87c4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b87a2:	f7fd fe7f 	bl	b64a4 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b87a6:	e9cd 5600 	strd	r5, r6, [sp]
   b87aa:	8aa3      	ldrh	r3, [r4, #20]
   b87ac:	6922      	ldr	r2, [r4, #16]
   b87ae:	4906      	ldr	r1, [pc, #24]	; (b87c8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b87b0:	4803      	ldr	r0, [pc, #12]	; (b87c0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b87b2:	f7fd fe77 	bl	b64a4 <_ZNK5spark6Logger5traceEPKcz>
   b87b6:	2000      	movs	r0, #0
   b87b8:	e7e6      	b.n	b8788 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b87ba:	4610      	mov	r0, r2
   b87bc:	e7e4      	b.n	b8788 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b87be:	bf00      	nop
   b87c0:	2003e654 	.word	0x2003e654
   b87c4:	000bec60 	.word	0x000bec60
   b87c8:	000bec91 	.word	0x000bec91

000b87cc <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b87cc:	b538      	push	{r3, r4, r5, lr}
   b87ce:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b87d0:	68c2      	ldr	r2, [r0, #12]
   b87d2:	6880      	ldr	r0, [r0, #8]
   b87d4:	2100      	movs	r1, #0
   b87d6:	f005 f84f 	bl	bd878 <memset>
    savedDataHeader->magic = savedDataMagic;
   b87da:	68a3      	ldr	r3, [r4, #8]
   b87dc:	6922      	ldr	r2, [r4, #16]
   b87de:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b87e0:	68a3      	ldr	r3, [r4, #8]
   b87e2:	8aa2      	ldrh	r2, [r4, #20]
   b87e4:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b87e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b87ea:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b87ec:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b87ee:	68a5      	ldr	r5, [r4, #8]
   b87f0:	f7ff ff88 	bl	b8704 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b87f4:	60a8      	str	r0, [r5, #8]
}
   b87f6:	bd38      	pop	{r3, r4, r5, pc}

000b87f8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b87f8:	b508      	push	{r3, lr}
   b87fa:	4b02      	ldr	r3, [pc, #8]	; (b8804 <cellular_signal+0xc>)
   b87fc:	681b      	ldr	r3, [r3, #0]
   b87fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8800:	9301      	str	r3, [sp, #4]
   b8802:	bd08      	pop	{r3, pc}
   b8804:	00030274 	.word	0x00030274

000b8808 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8808:	b508      	push	{r3, lr}
   b880a:	4b02      	ldr	r3, [pc, #8]	; (b8814 <os_mutex_recursive_create+0xc>)
   b880c:	681b      	ldr	r3, [r3, #0]
   b880e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8810:	9301      	str	r3, [sp, #4]
   b8812:	bd08      	pop	{r3, pc}
   b8814:	00030248 	.word	0x00030248

000b8818 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b8818:	b508      	push	{r3, lr}
   b881a:	4b02      	ldr	r3, [pc, #8]	; (b8824 <os_mutex_recursive_destroy+0xc>)
   b881c:	681b      	ldr	r3, [r3, #0]
   b881e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8820:	9301      	str	r3, [sp, #4]
   b8822:	bd08      	pop	{r3, pc}
   b8824:	00030248 	.word	0x00030248

000b8828 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8828:	b508      	push	{r3, lr}
   b882a:	4b02      	ldr	r3, [pc, #8]	; (b8834 <os_mutex_recursive_lock+0xc>)
   b882c:	681b      	ldr	r3, [r3, #0]
   b882e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8830:	9301      	str	r3, [sp, #4]
   b8832:	bd08      	pop	{r3, pc}
   b8834:	00030248 	.word	0x00030248

000b8838 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8838:	b508      	push	{r3, lr}
   b883a:	4b02      	ldr	r3, [pc, #8]	; (b8844 <os_mutex_recursive_unlock+0xc>)
   b883c:	681b      	ldr	r3, [r3, #0]
   b883e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8840:	9301      	str	r3, [sp, #4]
   b8842:	bd08      	pop	{r3, pc}
   b8844:	00030248 	.word	0x00030248

000b8848 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8848:	b508      	push	{r3, lr}
   b884a:	4b02      	ldr	r3, [pc, #8]	; (b8854 <HAL_Core_Runtime_Info+0xc>)
   b884c:	681b      	ldr	r3, [r3, #0]
   b884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8850:	9301      	str	r3, [sp, #4]
   b8852:	bd08      	pop	{r3, pc}
   b8854:	00030234 	.word	0x00030234

000b8858 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8858:	b508      	push	{r3, lr}
   b885a:	4b02      	ldr	r3, [pc, #8]	; (b8864 <HAL_Feature_Set+0xc>)
   b885c:	681b      	ldr	r3, [r3, #0]
   b885e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8860:	9301      	str	r3, [sp, #4]
   b8862:	bd08      	pop	{r3, pc}
   b8864:	00030234 	.word	0x00030234

000b8868 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8868:	b508      	push	{r3, lr}
   b886a:	4b02      	ldr	r3, [pc, #8]	; (b8874 <HAL_RNG_GetRandomNumber+0xc>)
   b886c:	681b      	ldr	r3, [r3, #0]
   b886e:	685b      	ldr	r3, [r3, #4]
   b8870:	9301      	str	r3, [sp, #4]
   b8872:	bd08      	pop	{r3, pc}
   b8874:	00030218 	.word	0x00030218

000b8878 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8878:	b508      	push	{r3, lr}
   b887a:	4b02      	ldr	r3, [pc, #8]	; (b8884 <HAL_Delay_Microseconds+0xc>)
   b887c:	681b      	ldr	r3, [r3, #0]
   b887e:	68db      	ldr	r3, [r3, #12]
   b8880:	9301      	str	r3, [sp, #4]
   b8882:	bd08      	pop	{r3, pc}
   b8884:	00030218 	.word	0x00030218

000b8888 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8888:	b508      	push	{r3, lr}
   b888a:	4b02      	ldr	r3, [pc, #8]	; (b8894 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b888c:	681b      	ldr	r3, [r3, #0]
   b888e:	695b      	ldr	r3, [r3, #20]
   b8890:	9301      	str	r3, [sp, #4]
   b8892:	bd08      	pop	{r3, pc}
   b8894:	00030218 	.word	0x00030218

000b8898 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8898:	b508      	push	{r3, lr}
   b889a:	4b02      	ldr	r3, [pc, #8]	; (b88a4 <hal_rtc_time_is_valid+0xc>)
   b889c:	681b      	ldr	r3, [r3, #0]
   b889e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b88a0:	9301      	str	r3, [sp, #4]
   b88a2:	bd08      	pop	{r3, pc}
   b88a4:	00030218 	.word	0x00030218

000b88a8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b88a8:	b508      	push	{r3, lr}
   b88aa:	4b02      	ldr	r3, [pc, #8]	; (b88b4 <hal_timer_millis+0xc>)
   b88ac:	681b      	ldr	r3, [r3, #0]
   b88ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b88b0:	9301      	str	r3, [sp, #4]
   b88b2:	bd08      	pop	{r3, pc}
   b88b4:	00030218 	.word	0x00030218

000b88b8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b88b8:	b508      	push	{r3, lr}
   b88ba:	4b02      	ldr	r3, [pc, #8]	; (b88c4 <hal_rtc_get_time+0xc>)
   b88bc:	681b      	ldr	r3, [r3, #0]
   b88be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b88c0:	9301      	str	r3, [sp, #4]
   b88c2:	bd08      	pop	{r3, pc}
   b88c4:	00030218 	.word	0x00030218

000b88c8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b88c8:	b508      	push	{r3, lr}
   b88ca:	4b02      	ldr	r3, [pc, #8]	; (b88d4 <hal_rtc_set_time+0xc>)
   b88cc:	681b      	ldr	r3, [r3, #0]
   b88ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b88d0:	9301      	str	r3, [sp, #4]
   b88d2:	bd08      	pop	{r3, pc}
   b88d4:	00030218 	.word	0x00030218

000b88d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b88d8:	b508      	push	{r3, lr}
   b88da:	4b02      	ldr	r3, [pc, #8]	; (b88e4 <HAL_Pin_Map+0xc>)
   b88dc:	681b      	ldr	r3, [r3, #0]
   b88de:	681b      	ldr	r3, [r3, #0]
   b88e0:	9301      	str	r3, [sp, #4]
   b88e2:	bd08      	pop	{r3, pc}
   b88e4:	0003022c 	.word	0x0003022c

000b88e8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b88e8:	b508      	push	{r3, lr}
   b88ea:	4b02      	ldr	r3, [pc, #8]	; (b88f4 <HAL_Validate_Pin_Function+0xc>)
   b88ec:	681b      	ldr	r3, [r3, #0]
   b88ee:	685b      	ldr	r3, [r3, #4]
   b88f0:	9301      	str	r3, [sp, #4]
   b88f2:	bd08      	pop	{r3, pc}
   b88f4:	0003022c 	.word	0x0003022c

000b88f8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b88f8:	b508      	push	{r3, lr}
   b88fa:	4b02      	ldr	r3, [pc, #8]	; (b8904 <HAL_Pin_Mode+0xc>)
   b88fc:	681b      	ldr	r3, [r3, #0]
   b88fe:	689b      	ldr	r3, [r3, #8]
   b8900:	9301      	str	r3, [sp, #4]
   b8902:	bd08      	pop	{r3, pc}
   b8904:	0003022c 	.word	0x0003022c

000b8908 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8908:	b508      	push	{r3, lr}
   b890a:	4b02      	ldr	r3, [pc, #8]	; (b8914 <HAL_Get_Pin_Mode+0xc>)
   b890c:	681b      	ldr	r3, [r3, #0]
   b890e:	68db      	ldr	r3, [r3, #12]
   b8910:	9301      	str	r3, [sp, #4]
   b8912:	bd08      	pop	{r3, pc}
   b8914:	0003022c 	.word	0x0003022c

000b8918 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8918:	b508      	push	{r3, lr}
   b891a:	4b02      	ldr	r3, [pc, #8]	; (b8924 <HAL_GPIO_Write+0xc>)
   b891c:	681b      	ldr	r3, [r3, #0]
   b891e:	691b      	ldr	r3, [r3, #16]
   b8920:	9301      	str	r3, [sp, #4]
   b8922:	bd08      	pop	{r3, pc}
   b8924:	0003022c 	.word	0x0003022c

000b8928 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8928:	b508      	push	{r3, lr}
   b892a:	4b02      	ldr	r3, [pc, #8]	; (b8934 <HAL_GPIO_Read+0xc>)
   b892c:	681b      	ldr	r3, [r3, #0]
   b892e:	695b      	ldr	r3, [r3, #20]
   b8930:	9301      	str	r3, [sp, #4]
   b8932:	bd08      	pop	{r3, pc}
   b8934:	0003022c 	.word	0x0003022c

000b8938 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8938:	b508      	push	{r3, lr}
   b893a:	4b02      	ldr	r3, [pc, #8]	; (b8944 <HAL_Interrupts_Attach+0xc>)
   b893c:	681b      	ldr	r3, [r3, #0]
   b893e:	699b      	ldr	r3, [r3, #24]
   b8940:	9301      	str	r3, [sp, #4]
   b8942:	bd08      	pop	{r3, pc}
   b8944:	0003022c 	.word	0x0003022c

000b8948 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8948:	b508      	push	{r3, lr}
   b894a:	4b02      	ldr	r3, [pc, #8]	; (b8954 <HAL_Interrupts_Detach+0xc>)
   b894c:	681b      	ldr	r3, [r3, #0]
   b894e:	69db      	ldr	r3, [r3, #28]
   b8950:	9301      	str	r3, [sp, #4]
   b8952:	bd08      	pop	{r3, pc}
   b8954:	0003022c 	.word	0x0003022c

000b8958 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8958:	b508      	push	{r3, lr}
   b895a:	4b02      	ldr	r3, [pc, #8]	; (b8964 <hal_adc_read+0xc>)
   b895c:	681b      	ldr	r3, [r3, #0]
   b895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8960:	9301      	str	r3, [sp, #4]
   b8962:	bd08      	pop	{r3, pc}
   b8964:	0003022c 	.word	0x0003022c

000b8968 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8968:	b508      	push	{r3, lr}
   b896a:	4b02      	ldr	r3, [pc, #8]	; (b8974 <hal_i2c_begin+0xc>)
   b896c:	681b      	ldr	r3, [r3, #0]
   b896e:	68db      	ldr	r3, [r3, #12]
   b8970:	9301      	str	r3, [sp, #4]
   b8972:	bd08      	pop	{r3, pc}
   b8974:	00030228 	.word	0x00030228

000b8978 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8978:	b508      	push	{r3, lr}
   b897a:	4b02      	ldr	r3, [pc, #8]	; (b8984 <hal_i2c_begin_transmission+0xc>)
   b897c:	681b      	ldr	r3, [r3, #0]
   b897e:	699b      	ldr	r3, [r3, #24]
   b8980:	9301      	str	r3, [sp, #4]
   b8982:	bd08      	pop	{r3, pc}
   b8984:	00030228 	.word	0x00030228

000b8988 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8988:	b508      	push	{r3, lr}
   b898a:	4b02      	ldr	r3, [pc, #8]	; (b8994 <hal_i2c_end_transmission+0xc>)
   b898c:	681b      	ldr	r3, [r3, #0]
   b898e:	69db      	ldr	r3, [r3, #28]
   b8990:	9301      	str	r3, [sp, #4]
   b8992:	bd08      	pop	{r3, pc}
   b8994:	00030228 	.word	0x00030228

000b8998 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8998:	b508      	push	{r3, lr}
   b899a:	4b02      	ldr	r3, [pc, #8]	; (b89a4 <hal_i2c_write+0xc>)
   b899c:	681b      	ldr	r3, [r3, #0]
   b899e:	6a1b      	ldr	r3, [r3, #32]
   b89a0:	9301      	str	r3, [sp, #4]
   b89a2:	bd08      	pop	{r3, pc}
   b89a4:	00030228 	.word	0x00030228

000b89a8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b89a8:	b508      	push	{r3, lr}
   b89aa:	4b02      	ldr	r3, [pc, #8]	; (b89b4 <hal_i2c_available+0xc>)
   b89ac:	681b      	ldr	r3, [r3, #0]
   b89ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b89b0:	9301      	str	r3, [sp, #4]
   b89b2:	bd08      	pop	{r3, pc}
   b89b4:	00030228 	.word	0x00030228

000b89b8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b89b8:	b508      	push	{r3, lr}
   b89ba:	4b02      	ldr	r3, [pc, #8]	; (b89c4 <hal_i2c_read+0xc>)
   b89bc:	681b      	ldr	r3, [r3, #0]
   b89be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b89c0:	9301      	str	r3, [sp, #4]
   b89c2:	bd08      	pop	{r3, pc}
   b89c4:	00030228 	.word	0x00030228

000b89c8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b89c8:	b508      	push	{r3, lr}
   b89ca:	4b02      	ldr	r3, [pc, #8]	; (b89d4 <hal_i2c_peek+0xc>)
   b89cc:	681b      	ldr	r3, [r3, #0]
   b89ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b89d0:	9301      	str	r3, [sp, #4]
   b89d2:	bd08      	pop	{r3, pc}
   b89d4:	00030228 	.word	0x00030228

000b89d8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b89d8:	b508      	push	{r3, lr}
   b89da:	4b02      	ldr	r3, [pc, #8]	; (b89e4 <hal_i2c_flush+0xc>)
   b89dc:	681b      	ldr	r3, [r3, #0]
   b89de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b89e0:	9301      	str	r3, [sp, #4]
   b89e2:	bd08      	pop	{r3, pc}
   b89e4:	00030228 	.word	0x00030228

000b89e8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b89e8:	b508      	push	{r3, lr}
   b89ea:	4b02      	ldr	r3, [pc, #8]	; (b89f4 <hal_i2c_is_enabled+0xc>)
   b89ec:	681b      	ldr	r3, [r3, #0]
   b89ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b89f0:	9301      	str	r3, [sp, #4]
   b89f2:	bd08      	pop	{r3, pc}
   b89f4:	00030228 	.word	0x00030228

000b89f8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b89f8:	b508      	push	{r3, lr}
   b89fa:	4b02      	ldr	r3, [pc, #8]	; (b8a04 <hal_i2c_init+0xc>)
   b89fc:	681b      	ldr	r3, [r3, #0]
   b89fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a00:	9301      	str	r3, [sp, #4]
   b8a02:	bd08      	pop	{r3, pc}
   b8a04:	00030228 	.word	0x00030228

000b8a08 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b8a08:	b508      	push	{r3, lr}
   b8a0a:	4b02      	ldr	r3, [pc, #8]	; (b8a14 <hal_i2c_lock+0xc>)
   b8a0c:	681b      	ldr	r3, [r3, #0]
   b8a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8a10:	9301      	str	r3, [sp, #4]
   b8a12:	bd08      	pop	{r3, pc}
   b8a14:	00030228 	.word	0x00030228

000b8a18 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b8a18:	b508      	push	{r3, lr}
   b8a1a:	4b02      	ldr	r3, [pc, #8]	; (b8a24 <hal_i2c_unlock+0xc>)
   b8a1c:	681b      	ldr	r3, [r3, #0]
   b8a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8a20:	9301      	str	r3, [sp, #4]
   b8a22:	bd08      	pop	{r3, pc}
   b8a24:	00030228 	.word	0x00030228

000b8a28 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8a28:	b508      	push	{r3, lr}
   b8a2a:	4b02      	ldr	r3, [pc, #8]	; (b8a34 <hal_i2c_request_ex+0xc>)
   b8a2c:	681b      	ldr	r3, [r3, #0]
   b8a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8a30:	9301      	str	r3, [sp, #4]
   b8a32:	bd08      	pop	{r3, pc}
   b8a34:	00030228 	.word	0x00030228

000b8a38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8a38:	b508      	push	{r3, lr}
   b8a3a:	4b02      	ldr	r3, [pc, #8]	; (b8a44 <inet_inet_ntop+0xc>)
   b8a3c:	681b      	ldr	r3, [r3, #0]
   b8a3e:	695b      	ldr	r3, [r3, #20]
   b8a40:	9301      	str	r3, [sp, #4]
   b8a42:	bd08      	pop	{r3, pc}
   b8a44:	00030264 	.word	0x00030264

000b8a48 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8a48:	b508      	push	{r3, lr}
   b8a4a:	4b02      	ldr	r3, [pc, #8]	; (b8a54 <netdb_freeaddrinfo+0xc>)
   b8a4c:	681b      	ldr	r3, [r3, #0]
   b8a4e:	689b      	ldr	r3, [r3, #8]
   b8a50:	9301      	str	r3, [sp, #4]
   b8a52:	bd08      	pop	{r3, pc}
   b8a54:	00030268 	.word	0x00030268

000b8a58 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8a58:	b508      	push	{r3, lr}
   b8a5a:	4b02      	ldr	r3, [pc, #8]	; (b8a64 <netdb_getaddrinfo+0xc>)
   b8a5c:	681b      	ldr	r3, [r3, #0]
   b8a5e:	68db      	ldr	r3, [r3, #12]
   b8a60:	9301      	str	r3, [sp, #4]
   b8a62:	bd08      	pop	{r3, pc}
   b8a64:	00030268 	.word	0x00030268

000b8a68 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8a68:	b508      	push	{r3, lr}
   b8a6a:	4b02      	ldr	r3, [pc, #8]	; (b8a74 <hal_spi_begin+0xc>)
   b8a6c:	681b      	ldr	r3, [r3, #0]
   b8a6e:	681b      	ldr	r3, [r3, #0]
   b8a70:	9301      	str	r3, [sp, #4]
   b8a72:	bd08      	pop	{r3, pc}
   b8a74:	00030230 	.word	0x00030230

000b8a78 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8a78:	b508      	push	{r3, lr}
   b8a7a:	4b02      	ldr	r3, [pc, #8]	; (b8a84 <hal_spi_end+0xc>)
   b8a7c:	681b      	ldr	r3, [r3, #0]
   b8a7e:	685b      	ldr	r3, [r3, #4]
   b8a80:	9301      	str	r3, [sp, #4]
   b8a82:	bd08      	pop	{r3, pc}
   b8a84:	00030230 	.word	0x00030230

000b8a88 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8a88:	b508      	push	{r3, lr}
   b8a8a:	4b02      	ldr	r3, [pc, #8]	; (b8a94 <hal_spi_transfer+0xc>)
   b8a8c:	681b      	ldr	r3, [r3, #0]
   b8a8e:	695b      	ldr	r3, [r3, #20]
   b8a90:	9301      	str	r3, [sp, #4]
   b8a92:	bd08      	pop	{r3, pc}
   b8a94:	00030230 	.word	0x00030230

000b8a98 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8a98:	b508      	push	{r3, lr}
   b8a9a:	4b02      	ldr	r3, [pc, #8]	; (b8aa4 <hal_spi_init+0xc>)
   b8a9c:	681b      	ldr	r3, [r3, #0]
   b8a9e:	69db      	ldr	r3, [r3, #28]
   b8aa0:	9301      	str	r3, [sp, #4]
   b8aa2:	bd08      	pop	{r3, pc}
   b8aa4:	00030230 	.word	0x00030230

000b8aa8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8aa8:	b508      	push	{r3, lr}
   b8aaa:	4b02      	ldr	r3, [pc, #8]	; (b8ab4 <hal_spi_is_enabled+0xc>)
   b8aac:	681b      	ldr	r3, [r3, #0]
   b8aae:	6a1b      	ldr	r3, [r3, #32]
   b8ab0:	9301      	str	r3, [sp, #4]
   b8ab2:	bd08      	pop	{r3, pc}
   b8ab4:	00030230 	.word	0x00030230

000b8ab8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8ab8:	b508      	push	{r3, lr}
   b8aba:	4b02      	ldr	r3, [pc, #8]	; (b8ac4 <hal_spi_info+0xc>)
   b8abc:	681b      	ldr	r3, [r3, #0]
   b8abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8ac0:	9301      	str	r3, [sp, #4]
   b8ac2:	bd08      	pop	{r3, pc}
   b8ac4:	00030230 	.word	0x00030230

000b8ac8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8ac8:	b508      	push	{r3, lr}
   b8aca:	4b02      	ldr	r3, [pc, #8]	; (b8ad4 <hal_spi_set_settings+0xc>)
   b8acc:	681b      	ldr	r3, [r3, #0]
   b8ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8ad0:	9301      	str	r3, [sp, #4]
   b8ad2:	bd08      	pop	{r3, pc}
   b8ad4:	00030230 	.word	0x00030230

000b8ad8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8ad8:	b508      	push	{r3, lr}
   b8ada:	4b02      	ldr	r3, [pc, #8]	; (b8ae4 <hal_spi_acquire+0xc>)
   b8adc:	681b      	ldr	r3, [r3, #0]
   b8ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8ae0:	9301      	str	r3, [sp, #4]
   b8ae2:	bd08      	pop	{r3, pc}
   b8ae4:	00030230 	.word	0x00030230

000b8ae8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8ae8:	b508      	push	{r3, lr}
   b8aea:	4b02      	ldr	r3, [pc, #8]	; (b8af4 <hal_spi_release+0xc>)
   b8aec:	681b      	ldr	r3, [r3, #0]
   b8aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8af0:	9301      	str	r3, [sp, #4]
   b8af2:	bd08      	pop	{r3, pc}
   b8af4:	00030230 	.word	0x00030230

000b8af8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b8af8:	b508      	push	{r3, lr}
   b8afa:	4b02      	ldr	r3, [pc, #8]	; (b8b04 <hal_usart_end+0xc>)
   b8afc:	681b      	ldr	r3, [r3, #0]
   b8afe:	689b      	ldr	r3, [r3, #8]
   b8b00:	9301      	str	r3, [sp, #4]
   b8b02:	bd08      	pop	{r3, pc}
   b8b04:	0003023c 	.word	0x0003023c

000b8b08 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8b08:	b508      	push	{r3, lr}
   b8b0a:	4b02      	ldr	r3, [pc, #8]	; (b8b14 <hal_usart_write+0xc>)
   b8b0c:	681b      	ldr	r3, [r3, #0]
   b8b0e:	68db      	ldr	r3, [r3, #12]
   b8b10:	9301      	str	r3, [sp, #4]
   b8b12:	bd08      	pop	{r3, pc}
   b8b14:	0003023c 	.word	0x0003023c

000b8b18 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8b18:	b508      	push	{r3, lr}
   b8b1a:	4b02      	ldr	r3, [pc, #8]	; (b8b24 <hal_usart_available+0xc>)
   b8b1c:	681b      	ldr	r3, [r3, #0]
   b8b1e:	691b      	ldr	r3, [r3, #16]
   b8b20:	9301      	str	r3, [sp, #4]
   b8b22:	bd08      	pop	{r3, pc}
   b8b24:	0003023c 	.word	0x0003023c

000b8b28 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8b28:	b508      	push	{r3, lr}
   b8b2a:	4b02      	ldr	r3, [pc, #8]	; (b8b34 <hal_usart_read+0xc>)
   b8b2c:	681b      	ldr	r3, [r3, #0]
   b8b2e:	695b      	ldr	r3, [r3, #20]
   b8b30:	9301      	str	r3, [sp, #4]
   b8b32:	bd08      	pop	{r3, pc}
   b8b34:	0003023c 	.word	0x0003023c

000b8b38 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8b38:	b508      	push	{r3, lr}
   b8b3a:	4b02      	ldr	r3, [pc, #8]	; (b8b44 <hal_usart_peek+0xc>)
   b8b3c:	681b      	ldr	r3, [r3, #0]
   b8b3e:	699b      	ldr	r3, [r3, #24]
   b8b40:	9301      	str	r3, [sp, #4]
   b8b42:	bd08      	pop	{r3, pc}
   b8b44:	0003023c 	.word	0x0003023c

000b8b48 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8b48:	b508      	push	{r3, lr}
   b8b4a:	4b02      	ldr	r3, [pc, #8]	; (b8b54 <hal_usart_flush+0xc>)
   b8b4c:	681b      	ldr	r3, [r3, #0]
   b8b4e:	69db      	ldr	r3, [r3, #28]
   b8b50:	9301      	str	r3, [sp, #4]
   b8b52:	bd08      	pop	{r3, pc}
   b8b54:	0003023c 	.word	0x0003023c

000b8b58 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8b58:	b508      	push	{r3, lr}
   b8b5a:	4b02      	ldr	r3, [pc, #8]	; (b8b64 <hal_usart_is_enabled+0xc>)
   b8b5c:	681b      	ldr	r3, [r3, #0]
   b8b5e:	6a1b      	ldr	r3, [r3, #32]
   b8b60:	9301      	str	r3, [sp, #4]
   b8b62:	bd08      	pop	{r3, pc}
   b8b64:	0003023c 	.word	0x0003023c

000b8b68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8b68:	b508      	push	{r3, lr}
   b8b6a:	4b02      	ldr	r3, [pc, #8]	; (b8b74 <hal_usart_available_data_for_write+0xc>)
   b8b6c:	681b      	ldr	r3, [r3, #0]
   b8b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8b70:	9301      	str	r3, [sp, #4]
   b8b72:	bd08      	pop	{r3, pc}
   b8b74:	0003023c 	.word	0x0003023c

000b8b78 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8b78:	b508      	push	{r3, lr}
   b8b7a:	4b02      	ldr	r3, [pc, #8]	; (b8b84 <hal_usart_begin_config+0xc>)
   b8b7c:	681b      	ldr	r3, [r3, #0]
   b8b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b80:	9301      	str	r3, [sp, #4]
   b8b82:	bd08      	pop	{r3, pc}
   b8b84:	0003023c 	.word	0x0003023c

000b8b88 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8b88:	b508      	push	{r3, lr}
   b8b8a:	4b02      	ldr	r3, [pc, #8]	; (b8b94 <hal_usart_init_ex+0xc>)
   b8b8c:	681b      	ldr	r3, [r3, #0]
   b8b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b90:	9301      	str	r3, [sp, #4]
   b8b92:	bd08      	pop	{r3, pc}
   b8b94:	0003023c 	.word	0x0003023c

000b8b98 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8b98:	b508      	push	{r3, lr}
   b8b9a:	4b02      	ldr	r3, [pc, #8]	; (b8ba4 <HAL_USB_USART_Init+0xc>)
   b8b9c:	681b      	ldr	r3, [r3, #0]
   b8b9e:	681b      	ldr	r3, [r3, #0]
   b8ba0:	9301      	str	r3, [sp, #4]
   b8ba2:	bd08      	pop	{r3, pc}
   b8ba4:	0003024c 	.word	0x0003024c

000b8ba8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8ba8:	b508      	push	{r3, lr}
   b8baa:	4b02      	ldr	r3, [pc, #8]	; (b8bb4 <HAL_USB_USART_Begin+0xc>)
   b8bac:	681b      	ldr	r3, [r3, #0]
   b8bae:	685b      	ldr	r3, [r3, #4]
   b8bb0:	9301      	str	r3, [sp, #4]
   b8bb2:	bd08      	pop	{r3, pc}
   b8bb4:	0003024c 	.word	0x0003024c

000b8bb8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b8bb8:	b508      	push	{r3, lr}
   b8bba:	4b02      	ldr	r3, [pc, #8]	; (b8bc4 <HAL_USB_USART_End+0xc>)
   b8bbc:	681b      	ldr	r3, [r3, #0]
   b8bbe:	689b      	ldr	r3, [r3, #8]
   b8bc0:	9301      	str	r3, [sp, #4]
   b8bc2:	bd08      	pop	{r3, pc}
   b8bc4:	0003024c 	.word	0x0003024c

000b8bc8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8bc8:	b508      	push	{r3, lr}
   b8bca:	4b02      	ldr	r3, [pc, #8]	; (b8bd4 <HAL_USB_USART_Available_Data+0xc>)
   b8bcc:	681b      	ldr	r3, [r3, #0]
   b8bce:	691b      	ldr	r3, [r3, #16]
   b8bd0:	9301      	str	r3, [sp, #4]
   b8bd2:	bd08      	pop	{r3, pc}
   b8bd4:	0003024c 	.word	0x0003024c

000b8bd8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8bd8:	b508      	push	{r3, lr}
   b8bda:	4b02      	ldr	r3, [pc, #8]	; (b8be4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8bdc:	681b      	ldr	r3, [r3, #0]
   b8bde:	695b      	ldr	r3, [r3, #20]
   b8be0:	9301      	str	r3, [sp, #4]
   b8be2:	bd08      	pop	{r3, pc}
   b8be4:	0003024c 	.word	0x0003024c

000b8be8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8be8:	b508      	push	{r3, lr}
   b8bea:	4b02      	ldr	r3, [pc, #8]	; (b8bf4 <HAL_USB_USART_Receive_Data+0xc>)
   b8bec:	681b      	ldr	r3, [r3, #0]
   b8bee:	699b      	ldr	r3, [r3, #24]
   b8bf0:	9301      	str	r3, [sp, #4]
   b8bf2:	bd08      	pop	{r3, pc}
   b8bf4:	0003024c 	.word	0x0003024c

000b8bf8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8bf8:	b508      	push	{r3, lr}
   b8bfa:	4b02      	ldr	r3, [pc, #8]	; (b8c04 <HAL_USB_USART_Send_Data+0xc>)
   b8bfc:	681b      	ldr	r3, [r3, #0]
   b8bfe:	69db      	ldr	r3, [r3, #28]
   b8c00:	9301      	str	r3, [sp, #4]
   b8c02:	bd08      	pop	{r3, pc}
   b8c04:	0003024c 	.word	0x0003024c

000b8c08 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8c08:	b508      	push	{r3, lr}
   b8c0a:	4b02      	ldr	r3, [pc, #8]	; (b8c14 <HAL_USB_USART_Flush_Data+0xc>)
   b8c0c:	681b      	ldr	r3, [r3, #0]
   b8c0e:	6a1b      	ldr	r3, [r3, #32]
   b8c10:	9301      	str	r3, [sp, #4]
   b8c12:	bd08      	pop	{r3, pc}
   b8c14:	0003024c 	.word	0x0003024c

000b8c18 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b8c18:	b508      	push	{r3, lr}
   b8c1a:	4b02      	ldr	r3, [pc, #8]	; (b8c24 <HAL_USB_USART_Is_Connected+0xc>)
   b8c1c:	681b      	ldr	r3, [r3, #0]
   b8c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8c20:	9301      	str	r3, [sp, #4]
   b8c22:	bd08      	pop	{r3, pc}
   b8c24:	0003024c 	.word	0x0003024c

000b8c28 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8c28:	b508      	push	{r3, lr}
   b8c2a:	4b02      	ldr	r3, [pc, #8]	; (b8c34 <panic_+0xc>)
   b8c2c:	681b      	ldr	r3, [r3, #0]
   b8c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8c30:	9301      	str	r3, [sp, #4]
   b8c32:	bd08      	pop	{r3, pc}
   b8c34:	00030260 	.word	0x00030260

000b8c38 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8c38:	b508      	push	{r3, lr}
   b8c3a:	4b02      	ldr	r3, [pc, #8]	; (b8c44 <log_message+0xc>)
   b8c3c:	681b      	ldr	r3, [r3, #0]
   b8c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8c40:	9301      	str	r3, [sp, #4]
   b8c42:	bd08      	pop	{r3, pc}
   b8c44:	00030260 	.word	0x00030260

000b8c48 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8c48:	b508      	push	{r3, lr}
   b8c4a:	4b02      	ldr	r3, [pc, #8]	; (b8c54 <log_message_v+0xc>)
   b8c4c:	681b      	ldr	r3, [r3, #0]
   b8c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8c50:	9301      	str	r3, [sp, #4]
   b8c52:	bd08      	pop	{r3, pc}
   b8c54:	00030260 	.word	0x00030260

000b8c58 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8c58:	b508      	push	{r3, lr}
   b8c5a:	4b02      	ldr	r3, [pc, #8]	; (b8c64 <log_level_name+0xc>)
   b8c5c:	681b      	ldr	r3, [r3, #0]
   b8c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8c60:	9301      	str	r3, [sp, #4]
   b8c62:	bd08      	pop	{r3, pc}
   b8c64:	00030260 	.word	0x00030260

000b8c68 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8c68:	b508      	push	{r3, lr}
   b8c6a:	4b02      	ldr	r3, [pc, #8]	; (b8c74 <log_set_callbacks+0xc>)
   b8c6c:	681b      	ldr	r3, [r3, #0]
   b8c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8c70:	9301      	str	r3, [sp, #4]
   b8c72:	bd08      	pop	{r3, pc}
   b8c74:	00030260 	.word	0x00030260

000b8c78 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b8c78:	b508      	push	{r3, lr}
   b8c7a:	4b03      	ldr	r3, [pc, #12]	; (b8c88 <led_set_status_active+0x10>)
   b8c7c:	681b      	ldr	r3, [r3, #0]
   b8c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8c82:	9301      	str	r3, [sp, #4]
   b8c84:	bd08      	pop	{r3, pc}
   b8c86:	0000      	.short	0x0000
   b8c88:	00030260 	.word	0x00030260

000b8c8c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8c8c:	b508      	push	{r3, lr}
   b8c8e:	4b03      	ldr	r3, [pc, #12]	; (b8c9c <diag_get_source+0x10>)
   b8c90:	681b      	ldr	r3, [r3, #0]
   b8c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8c96:	9301      	str	r3, [sp, #4]
   b8c98:	bd08      	pop	{r3, pc}
   b8c9a:	0000      	.short	0x0000
   b8c9c:	00030260 	.word	0x00030260

000b8ca0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8ca0:	b508      	push	{r3, lr}
   b8ca2:	4b02      	ldr	r3, [pc, #8]	; (b8cac <system_mode+0xc>)
   b8ca4:	681b      	ldr	r3, [r3, #0]
   b8ca6:	681b      	ldr	r3, [r3, #0]
   b8ca8:	9301      	str	r3, [sp, #4]
   b8caa:	bd08      	pop	{r3, pc}
   b8cac:	00030220 	.word	0x00030220

000b8cb0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8cb0:	b508      	push	{r3, lr}
   b8cb2:	4b02      	ldr	r3, [pc, #8]	; (b8cbc <set_system_mode+0xc>)
   b8cb4:	681b      	ldr	r3, [r3, #0]
   b8cb6:	685b      	ldr	r3, [r3, #4]
   b8cb8:	9301      	str	r3, [sp, #4]
   b8cba:	bd08      	pop	{r3, pc}
   b8cbc:	00030220 	.word	0x00030220

000b8cc0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8cc0:	b508      	push	{r3, lr}
   b8cc2:	4b02      	ldr	r3, [pc, #8]	; (b8ccc <system_delay_ms+0xc>)
   b8cc4:	681b      	ldr	r3, [r3, #0]
   b8cc6:	695b      	ldr	r3, [r3, #20]
   b8cc8:	9301      	str	r3, [sp, #4]
   b8cca:	bd08      	pop	{r3, pc}
   b8ccc:	00030220 	.word	0x00030220

000b8cd0 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b8cd0:	b508      	push	{r3, lr}
   b8cd2:	4b02      	ldr	r3, [pc, #8]	; (b8cdc <system_subscribe_event+0xc>)
   b8cd4:	681b      	ldr	r3, [r3, #0]
   b8cd6:	6a1b      	ldr	r3, [r3, #32]
   b8cd8:	9301      	str	r3, [sp, #4]
   b8cda:	bd08      	pop	{r3, pc}
   b8cdc:	00030220 	.word	0x00030220

000b8ce0 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b8ce0:	b508      	push	{r3, lr}
   b8ce2:	4b02      	ldr	r3, [pc, #8]	; (b8cec <system_thread_set_state+0xc>)
   b8ce4:	681b      	ldr	r3, [r3, #0]
   b8ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8ce8:	9301      	str	r3, [sp, #4]
   b8cea:	bd08      	pop	{r3, pc}
   b8cec:	00030220 	.word	0x00030220

000b8cf0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8cf0:	b508      	push	{r3, lr}
   b8cf2:	4b02      	ldr	r3, [pc, #8]	; (b8cfc <system_thread_get_state+0xc>)
   b8cf4:	681b      	ldr	r3, [r3, #0]
   b8cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8cf8:	9301      	str	r3, [sp, #4]
   b8cfa:	bd08      	pop	{r3, pc}
   b8cfc:	00030220 	.word	0x00030220

000b8d00 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b8d00:	b508      	push	{r3, lr}
   b8d02:	4b02      	ldr	r3, [pc, #8]	; (b8d0c <system_notify_time_changed+0xc>)
   b8d04:	681b      	ldr	r3, [r3, #0]
   b8d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8d08:	9301      	str	r3, [sp, #4]
   b8d0a:	bd08      	pop	{r3, pc}
   b8d0c:	00030220 	.word	0x00030220

000b8d10 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b8d10:	b508      	push	{r3, lr}
   b8d12:	4b02      	ldr	r3, [pc, #8]	; (b8d1c <led_pattern_period+0xc>)
   b8d14:	681b      	ldr	r3, [r3, #0]
   b8d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8d18:	9301      	str	r3, [sp, #4]
   b8d1a:	bd08      	pop	{r3, pc}
   b8d1c:	00030220 	.word	0x00030220

000b8d20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8d20:	b508      	push	{r3, lr}
   b8d22:	4b03      	ldr	r3, [pc, #12]	; (b8d30 <system_ctrl_set_app_request_handler+0x10>)
   b8d24:	681b      	ldr	r3, [r3, #0]
   b8d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8d2a:	9301      	str	r3, [sp, #4]
   b8d2c:	bd08      	pop	{r3, pc}
   b8d2e:	0000      	.short	0x0000
   b8d30:	00030220 	.word	0x00030220

000b8d34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8d34:	b508      	push	{r3, lr}
   b8d36:	4b03      	ldr	r3, [pc, #12]	; (b8d44 <system_ctrl_set_result+0x10>)
   b8d38:	681b      	ldr	r3, [r3, #0]
   b8d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8d3e:	9301      	str	r3, [sp, #4]
   b8d40:	bd08      	pop	{r3, pc}
   b8d42:	0000      	.short	0x0000
   b8d44:	00030220 	.word	0x00030220

000b8d48 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b8d48:	b508      	push	{r3, lr}
   b8d4a:	4b03      	ldr	r3, [pc, #12]	; (b8d58 <system_power_management_set_config+0x10>)
   b8d4c:	681b      	ldr	r3, [r3, #0]
   b8d4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8d52:	9301      	str	r3, [sp, #4]
   b8d54:	bd08      	pop	{r3, pc}
   b8d56:	0000      	.short	0x0000
   b8d58:	00030220 	.word	0x00030220

000b8d5c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8d5c:	b508      	push	{r3, lr}
   b8d5e:	4b03      	ldr	r3, [pc, #12]	; (b8d6c <system_sleep_ext+0x10>)
   b8d60:	681b      	ldr	r3, [r3, #0]
   b8d62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8d66:	9301      	str	r3, [sp, #4]
   b8d68:	bd08      	pop	{r3, pc}
   b8d6a:	0000      	.short	0x0000
   b8d6c:	00030220 	.word	0x00030220

000b8d70 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b8d70:	b508      	push	{r3, lr}
   b8d72:	4b03      	ldr	r3, [pc, #12]	; (b8d80 <system_reset+0x10>)
   b8d74:	681b      	ldr	r3, [r3, #0]
   b8d76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8d7a:	9301      	str	r3, [sp, #4]
   b8d7c:	bd08      	pop	{r3, pc}
   b8d7e:	0000      	.short	0x0000
   b8d80:	00030220 	.word	0x00030220

000b8d84 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8d84:	b508      	push	{r3, lr}
   b8d86:	4b02      	ldr	r3, [pc, #8]	; (b8d90 <spark_process+0xc>)
   b8d88:	681b      	ldr	r3, [r3, #0]
   b8d8a:	689b      	ldr	r3, [r3, #8]
   b8d8c:	9301      	str	r3, [sp, #4]
   b8d8e:	bd08      	pop	{r3, pc}
   b8d90:	00030244 	.word	0x00030244

000b8d94 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b8d94:	b508      	push	{r3, lr}
   b8d96:	4b02      	ldr	r3, [pc, #8]	; (b8da0 <spark_cloud_flag_connect+0xc>)
   b8d98:	681b      	ldr	r3, [r3, #0]
   b8d9a:	68db      	ldr	r3, [r3, #12]
   b8d9c:	9301      	str	r3, [sp, #4]
   b8d9e:	bd08      	pop	{r3, pc}
   b8da0:	00030244 	.word	0x00030244

000b8da4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8da4:	b508      	push	{r3, lr}
   b8da6:	4b02      	ldr	r3, [pc, #8]	; (b8db0 <spark_cloud_flag_connected+0xc>)
   b8da8:	681b      	ldr	r3, [r3, #0]
   b8daa:	695b      	ldr	r3, [r3, #20]
   b8dac:	9301      	str	r3, [sp, #4]
   b8dae:	bd08      	pop	{r3, pc}
   b8db0:	00030244 	.word	0x00030244

000b8db4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8db4:	b508      	push	{r3, lr}
   b8db6:	4b02      	ldr	r3, [pc, #8]	; (b8dc0 <spark_deviceID+0xc>)
   b8db8:	681b      	ldr	r3, [r3, #0]
   b8dba:	69db      	ldr	r3, [r3, #28]
   b8dbc:	9301      	str	r3, [sp, #4]
   b8dbe:	bd08      	pop	{r3, pc}
   b8dc0:	00030244 	.word	0x00030244

000b8dc4 <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8dc4:	b508      	push	{r3, lr}
   b8dc6:	4b02      	ldr	r3, [pc, #8]	; (b8dd0 <spark_sync_time_pending+0xc>)
   b8dc8:	681b      	ldr	r3, [r3, #0]
   b8dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8dcc:	9301      	str	r3, [sp, #4]
   b8dce:	bd08      	pop	{r3, pc}
   b8dd0:	00030244 	.word	0x00030244

000b8dd4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8dd4:	b508      	push	{r3, lr}
   b8dd6:	4b02      	ldr	r3, [pc, #8]	; (b8de0 <spark_sync_time_last+0xc>)
   b8dd8:	681b      	ldr	r3, [r3, #0]
   b8dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8ddc:	9301      	str	r3, [sp, #4]
   b8dde:	bd08      	pop	{r3, pc}
   b8de0:	00030244 	.word	0x00030244

000b8de4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8de4:	b508      	push	{r3, lr}
   b8de6:	4b02      	ldr	r3, [pc, #8]	; (b8df0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8de8:	681b      	ldr	r3, [r3, #0]
   b8dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8dec:	9301      	str	r3, [sp, #4]
   b8dee:	bd08      	pop	{r3, pc}
   b8df0:	00030244 	.word	0x00030244

000b8df4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8df4:	b508      	push	{r3, lr}
   b8df6:	4b02      	ldr	r3, [pc, #8]	; (b8e00 <network_connect+0xc>)
   b8df8:	681b      	ldr	r3, [r3, #0]
   b8dfa:	685b      	ldr	r3, [r3, #4]
   b8dfc:	9301      	str	r3, [sp, #4]
   b8dfe:	bd08      	pop	{r3, pc}
   b8e00:	00030240 	.word	0x00030240

000b8e04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8e04:	b508      	push	{r3, lr}
   b8e06:	4b02      	ldr	r3, [pc, #8]	; (b8e10 <network_connecting+0xc>)
   b8e08:	681b      	ldr	r3, [r3, #0]
   b8e0a:	689b      	ldr	r3, [r3, #8]
   b8e0c:	9301      	str	r3, [sp, #4]
   b8e0e:	bd08      	pop	{r3, pc}
   b8e10:	00030240 	.word	0x00030240

000b8e14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8e14:	b508      	push	{r3, lr}
   b8e16:	4b02      	ldr	r3, [pc, #8]	; (b8e20 <network_disconnect+0xc>)
   b8e18:	681b      	ldr	r3, [r3, #0]
   b8e1a:	68db      	ldr	r3, [r3, #12]
   b8e1c:	9301      	str	r3, [sp, #4]
   b8e1e:	bd08      	pop	{r3, pc}
   b8e20:	00030240 	.word	0x00030240

000b8e24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8e24:	b508      	push	{r3, lr}
   b8e26:	4b02      	ldr	r3, [pc, #8]	; (b8e30 <network_ready+0xc>)
   b8e28:	681b      	ldr	r3, [r3, #0]
   b8e2a:	691b      	ldr	r3, [r3, #16]
   b8e2c:	9301      	str	r3, [sp, #4]
   b8e2e:	bd08      	pop	{r3, pc}
   b8e30:	00030240 	.word	0x00030240

000b8e34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8e34:	b508      	push	{r3, lr}
   b8e36:	4b02      	ldr	r3, [pc, #8]	; (b8e40 <network_on+0xc>)
   b8e38:	681b      	ldr	r3, [r3, #0]
   b8e3a:	695b      	ldr	r3, [r3, #20]
   b8e3c:	9301      	str	r3, [sp, #4]
   b8e3e:	bd08      	pop	{r3, pc}
   b8e40:	00030240 	.word	0x00030240

000b8e44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8e44:	b508      	push	{r3, lr}
   b8e46:	4b02      	ldr	r3, [pc, #8]	; (b8e50 <network_off+0xc>)
   b8e48:	681b      	ldr	r3, [r3, #0]
   b8e4a:	699b      	ldr	r3, [r3, #24]
   b8e4c:	9301      	str	r3, [sp, #4]
   b8e4e:	bd08      	pop	{r3, pc}
   b8e50:	00030240 	.word	0x00030240

000b8e54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8e54:	b508      	push	{r3, lr}
   b8e56:	4b02      	ldr	r3, [pc, #8]	; (b8e60 <network_listen+0xc>)
   b8e58:	681b      	ldr	r3, [r3, #0]
   b8e5a:	69db      	ldr	r3, [r3, #28]
   b8e5c:	9301      	str	r3, [sp, #4]
   b8e5e:	bd08      	pop	{r3, pc}
   b8e60:	00030240 	.word	0x00030240

000b8e64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8e64:	b508      	push	{r3, lr}
   b8e66:	4b02      	ldr	r3, [pc, #8]	; (b8e70 <network_listening+0xc>)
   b8e68:	681b      	ldr	r3, [r3, #0]
   b8e6a:	6a1b      	ldr	r3, [r3, #32]
   b8e6c:	9301      	str	r3, [sp, #4]
   b8e6e:	bd08      	pop	{r3, pc}
   b8e70:	00030240 	.word	0x00030240

000b8e74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8e74:	b508      	push	{r3, lr}
   b8e76:	4b02      	ldr	r3, [pc, #8]	; (b8e80 <network_set_listen_timeout+0xc>)
   b8e78:	681b      	ldr	r3, [r3, #0]
   b8e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8e7c:	9301      	str	r3, [sp, #4]
   b8e7e:	bd08      	pop	{r3, pc}
   b8e80:	00030240 	.word	0x00030240

000b8e84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8e84:	b508      	push	{r3, lr}
   b8e86:	4b02      	ldr	r3, [pc, #8]	; (b8e90 <network_get_listen_timeout+0xc>)
   b8e88:	681b      	ldr	r3, [r3, #0]
   b8e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8e8c:	9301      	str	r3, [sp, #4]
   b8e8e:	bd08      	pop	{r3, pc}
   b8e90:	00030240 	.word	0x00030240

000b8e94 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8e94:	b508      	push	{r3, lr}
   b8e96:	4b02      	ldr	r3, [pc, #8]	; (b8ea0 <network_is_on+0xc>)
   b8e98:	681b      	ldr	r3, [r3, #0]
   b8e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8e9c:	9301      	str	r3, [sp, #4]
   b8e9e:	bd08      	pop	{r3, pc}
   b8ea0:	00030240 	.word	0x00030240

000b8ea4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8ea4:	b508      	push	{r3, lr}
   b8ea6:	4b02      	ldr	r3, [pc, #8]	; (b8eb0 <network_is_off+0xc>)
   b8ea8:	681b      	ldr	r3, [r3, #0]
   b8eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8eac:	9301      	str	r3, [sp, #4]
   b8eae:	bd08      	pop	{r3, pc}
   b8eb0:	00030240 	.word	0x00030240

000b8eb4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8eb4:	b508      	push	{r3, lr}
   b8eb6:	4b02      	ldr	r3, [pc, #8]	; (b8ec0 <malloc+0xc>)
   b8eb8:	681b      	ldr	r3, [r3, #0]
   b8eba:	681b      	ldr	r3, [r3, #0]
   b8ebc:	9301      	str	r3, [sp, #4]
   b8ebe:	bd08      	pop	{r3, pc}
   b8ec0:	0003021c 	.word	0x0003021c

000b8ec4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8ec4:	b508      	push	{r3, lr}
   b8ec6:	4b02      	ldr	r3, [pc, #8]	; (b8ed0 <free+0xc>)
   b8ec8:	681b      	ldr	r3, [r3, #0]
   b8eca:	685b      	ldr	r3, [r3, #4]
   b8ecc:	9301      	str	r3, [sp, #4]
   b8ece:	bd08      	pop	{r3, pc}
   b8ed0:	0003021c 	.word	0x0003021c

000b8ed4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8ed4:	b508      	push	{r3, lr}
   b8ed6:	4b02      	ldr	r3, [pc, #8]	; (b8ee0 <realloc+0xc>)
   b8ed8:	681b      	ldr	r3, [r3, #0]
   b8eda:	689b      	ldr	r3, [r3, #8]
   b8edc:	9301      	str	r3, [sp, #4]
   b8ede:	bd08      	pop	{r3, pc}
   b8ee0:	0003021c 	.word	0x0003021c

000b8ee4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8ee4:	b508      	push	{r3, lr}
   b8ee6:	4b02      	ldr	r3, [pc, #8]	; (b8ef0 <siprintf+0xc>)
   b8ee8:	681b      	ldr	r3, [r3, #0]
   b8eea:	691b      	ldr	r3, [r3, #16]
   b8eec:	9301      	str	r3, [sp, #4]
   b8eee:	bd08      	pop	{r3, pc}
   b8ef0:	0003021c 	.word	0x0003021c

000b8ef4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8ef4:	b508      	push	{r3, lr}
   b8ef6:	4b02      	ldr	r3, [pc, #8]	; (b8f00 <snprintf+0xc>)
   b8ef8:	681b      	ldr	r3, [r3, #0]
   b8efa:	69db      	ldr	r3, [r3, #28]
   b8efc:	9301      	str	r3, [sp, #4]
   b8efe:	bd08      	pop	{r3, pc}
   b8f00:	0003021c 	.word	0x0003021c

000b8f04 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8f04:	b508      	push	{r3, lr}
   b8f06:	4b02      	ldr	r3, [pc, #8]	; (b8f10 <vsnprintf+0xc>)
   b8f08:	681b      	ldr	r3, [r3, #0]
   b8f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8f0c:	9301      	str	r3, [sp, #4]
   b8f0e:	bd08      	pop	{r3, pc}
   b8f10:	0003021c 	.word	0x0003021c

000b8f14 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8f14:	b508      	push	{r3, lr}
   b8f16:	4b02      	ldr	r3, [pc, #8]	; (b8f20 <abort+0xc>)
   b8f18:	681b      	ldr	r3, [r3, #0]
   b8f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8f1c:	9301      	str	r3, [sp, #4]
   b8f1e:	bd08      	pop	{r3, pc}
   b8f20:	0003021c 	.word	0x0003021c

000b8f24 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8f24:	b508      	push	{r3, lr}
   b8f26:	4b02      	ldr	r3, [pc, #8]	; (b8f30 <__errno+0xc>)
   b8f28:	681b      	ldr	r3, [r3, #0]
   b8f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8f2c:	9301      	str	r3, [sp, #4]
   b8f2e:	bd08      	pop	{r3, pc}
   b8f30:	0003021c 	.word	0x0003021c

000b8f34 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8f34:	b508      	push	{r3, lr}
   b8f36:	4b02      	ldr	r3, [pc, #8]	; (b8f40 <__assert_func+0xc>)
   b8f38:	681b      	ldr	r3, [r3, #0]
   b8f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8f3c:	9301      	str	r3, [sp, #4]
   b8f3e:	bd08      	pop	{r3, pc}
   b8f40:	0003021c 	.word	0x0003021c

000b8f44 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8f44:	b508      	push	{r3, lr}
   b8f46:	4b02      	ldr	r3, [pc, #8]	; (b8f50 <newlib_impure_ptr_callback+0xc>)
   b8f48:	681b      	ldr	r3, [r3, #0]
   b8f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8f4c:	9301      	str	r3, [sp, #4]
   b8f4e:	bd08      	pop	{r3, pc}
   b8f50:	0003021c 	.word	0x0003021c

000b8f54 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b8f54:	b508      	push	{r3, lr}
   b8f56:	4b02      	ldr	r3, [pc, #8]	; (b8f60 <strftime+0xc>)
   b8f58:	681b      	ldr	r3, [r3, #0]
   b8f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8f5c:	9301      	str	r3, [sp, #4]
   b8f5e:	bd08      	pop	{r3, pc}
   b8f60:	0003021c 	.word	0x0003021c

000b8f64 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8f64:	b508      	push	{r3, lr}
   b8f66:	4b02      	ldr	r3, [pc, #8]	; (b8f70 <localtime_r+0xc>)
   b8f68:	681b      	ldr	r3, [r3, #0]
   b8f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8f6c:	9301      	str	r3, [sp, #4]
   b8f6e:	bd08      	pop	{r3, pc}
   b8f70:	0003021c 	.word	0x0003021c

000b8f74 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8f74:	b508      	push	{r3, lr}
   b8f76:	4b02      	ldr	r3, [pc, #8]	; (b8f80 <gmtime_r+0xc>)
   b8f78:	681b      	ldr	r3, [r3, #0]
   b8f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8f7c:	9301      	str	r3, [sp, #4]
   b8f7e:	bd08      	pop	{r3, pc}
   b8f80:	0003021c 	.word	0x0003021c

000b8f84 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8f84:	b508      	push	{r3, lr}
   b8f86:	4b02      	ldr	r3, [pc, #8]	; (b8f90 <mktime+0xc>)
   b8f88:	681b      	ldr	r3, [r3, #0]
   b8f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8f8c:	9301      	str	r3, [sp, #4]
   b8f8e:	bd08      	pop	{r3, pc}
   b8f90:	0003021c 	.word	0x0003021c

000b8f94 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b8f94:	428a      	cmp	r2, r1
{
   b8f96:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b8f98:	d007      	beq.n	b8faa <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b8f9a:	1a44      	subs	r4, r0, r1
   b8f9c:	9802      	ldr	r0, [sp, #8]
   b8f9e:	1ac0      	subs	r0, r0, r3
   b8fa0:	4344      	muls	r4, r0
   b8fa2:	1a50      	subs	r0, r2, r1
   b8fa4:	fb94 f0f0 	sdiv	r0, r4, r0
   b8fa8:	4418      	add	r0, r3
}
   b8faa:	bd10      	pop	{r4, pc}

000b8fac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8fac:	2100      	movs	r1, #0
   b8fae:	f7ff be87 	b.w	b8cc0 <system_delay_ms>

000b8fb2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b8fb2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8fb4:	6843      	ldr	r3, [r0, #4]
   b8fb6:	3b01      	subs	r3, #1
    {
   b8fb8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8fba:	6043      	str	r3, [r0, #4]
   b8fbc:	b963      	cbnz	r3, b8fd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b8fbe:	6803      	ldr	r3, [r0, #0]
   b8fc0:	689b      	ldr	r3, [r3, #8]
   b8fc2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8fc4:	68a3      	ldr	r3, [r4, #8]
   b8fc6:	3b01      	subs	r3, #1
   b8fc8:	60a3      	str	r3, [r4, #8]
   b8fca:	b92b      	cbnz	r3, b8fd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8fcc:	6823      	ldr	r3, [r4, #0]
   b8fce:	4620      	mov	r0, r4
   b8fd0:	68db      	ldr	r3, [r3, #12]
        }
    }
   b8fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8fd6:	4718      	bx	r3
    }
   b8fd8:	bd10      	pop	{r4, pc}

000b8fda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8fda:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8fdc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8fe0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8fe2:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8fe6:	42ae      	cmp	r6, r5
   b8fe8:	d004      	beq.n	b8ff4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8fea:	4628      	mov	r0, r5
   b8fec:	f002 f83c 	bl	bb068 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8ff0:	3510      	adds	r5, #16
   b8ff2:	e7f8      	b.n	b8fe6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8ff4:	6820      	ldr	r0, [r4, #0]
   b8ff6:	f7ff ff65 	bl	b8ec4 <free>
    AllocatorT::free(data_);
}
   b8ffa:	4620      	mov	r0, r4
   b8ffc:	bd70      	pop	{r4, r5, r6, pc}

000b8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b8ffe:	b510      	push	{r4, lr}
   b9000:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b9002:	6800      	ldr	r0, [r0, #0]
   b9004:	b108      	cbz	r0, b900a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b9006:	f7ff ffd4 	bl	b8fb2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b900a:	4620      	mov	r0, r4
   b900c:	bd10      	pop	{r4, pc}
	...

000b9010 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b9010:	4802      	ldr	r0, [pc, #8]	; (b901c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9012:	2300      	movs	r3, #0
   b9014:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b9016:	f7ff bbf7 	b.w	b8808 <os_mutex_recursive_create>
   b901a:	bf00      	nop
   b901c:	2003e60c 	.word	0x2003e60c

000b9020 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b9020:	2200      	movs	r2, #0
   b9022:	6840      	ldr	r0, [r0, #4]
   b9024:	4611      	mov	r1, r2
   b9026:	f7ff befd 	b.w	b8e24 <network_ready>

000b902a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b902a:	2200      	movs	r2, #0
   b902c:	6840      	ldr	r0, [r0, #4]
   b902e:	4611      	mov	r1, r2
   b9030:	f7ff bf18 	b.w	b8e64 <network_listening>

000b9034 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9034:	2200      	movs	r2, #0
   b9036:	6840      	ldr	r0, [r0, #4]
   b9038:	4611      	mov	r1, r2
   b903a:	f7ff bf23 	b.w	b8e84 <network_get_listen_timeout>

000b903e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b903e:	6840      	ldr	r0, [r0, #4]
   b9040:	2200      	movs	r2, #0
   b9042:	f7ff bf17 	b.w	b8e74 <network_set_listen_timeout>

000b9046 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9046:	6840      	ldr	r0, [r0, #4]
   b9048:	2200      	movs	r2, #0
   b904a:	f081 0101 	eor.w	r1, r1, #1
   b904e:	f7ff bf01 	b.w	b8e54 <network_listen>

000b9052 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9052:	2300      	movs	r3, #0
   b9054:	6840      	ldr	r0, [r0, #4]
   b9056:	461a      	mov	r2, r3
   b9058:	4619      	mov	r1, r3
   b905a:	f7ff bef3 	b.w	b8e44 <network_off>

000b905e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b905e:	2300      	movs	r3, #0
   b9060:	6840      	ldr	r0, [r0, #4]
   b9062:	461a      	mov	r2, r3
   b9064:	4619      	mov	r1, r3
   b9066:	f7ff bee5 	b.w	b8e34 <network_on>

000b906a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b906a:	2200      	movs	r2, #0
   b906c:	6840      	ldr	r0, [r0, #4]
   b906e:	4611      	mov	r1, r2
   b9070:	f7ff bec8 	b.w	b8e04 <network_connecting>

000b9074 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9074:	6840      	ldr	r0, [r0, #4]
   b9076:	2200      	movs	r2, #0
   b9078:	2102      	movs	r1, #2
   b907a:	f7ff becb 	b.w	b8e14 <network_disconnect>

000b907e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b907e:	2300      	movs	r3, #0
   b9080:	6840      	ldr	r0, [r0, #4]
   b9082:	461a      	mov	r2, r3
   b9084:	f7ff beb6 	b.w	b8df4 <network_connect>

000b9088 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b9088:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b908a:	4b13      	ldr	r3, [pc, #76]	; (b90d8 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b908c:	6003      	str	r3, [r0, #0]
   b908e:	2518      	movs	r5, #24
   b9090:	3330      	adds	r3, #48	; 0x30
   b9092:	b086      	sub	sp, #24
   b9094:	460e      	mov	r6, r1
   b9096:	6043      	str	r3, [r0, #4]
   b9098:	462a      	mov	r2, r5
   b909a:	2100      	movs	r1, #0
   b909c:	4604      	mov	r4, r0
   b909e:	3008      	adds	r0, #8
   b90a0:	f004 fbea 	bl	bd878 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b90a4:	2200      	movs	r2, #0
   b90a6:	6870      	ldr	r0, [r6, #4]
   b90a8:	4611      	mov	r1, r2
   b90aa:	f7ff febb 	bl	b8e24 <network_ready>
   b90ae:	b178      	cbz	r0, b90d0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b90b0:	2100      	movs	r1, #0
   b90b2:	462a      	mov	r2, r5
   b90b4:	4668      	mov	r0, sp
   b90b6:	f004 fbdf 	bl	bd878 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b90ba:	4669      	mov	r1, sp
   b90bc:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b90be:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b90c2:	f7ff fb99 	bl	b87f8 <cellular_signal>
   b90c6:	b918      	cbnz	r0, b90d0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b90c8:	4669      	mov	r1, sp
   b90ca:	4620      	mov	r0, r4
   b90cc:	f000 f8b8 	bl	b9240 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b90d0:	4620      	mov	r0, r4
   b90d2:	b006      	add	sp, #24
   b90d4:	bd70      	pop	{r4, r5, r6, pc}
   b90d6:	bf00      	nop
   b90d8:	000bed2c 	.word	0x000bed2c

000b90dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b90dc:	4b08      	ldr	r3, [pc, #32]	; (b9100 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b90de:	b510      	push	{r4, lr}
   b90e0:	2428      	movs	r4, #40	; 0x28
   b90e2:	4622      	mov	r2, r4
   b90e4:	4618      	mov	r0, r3
   b90e6:	2100      	movs	r1, #0
   b90e8:	f004 fbc6 	bl	bd878 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b90ec:	4b05      	ldr	r3, [pc, #20]	; (b9104 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b90ee:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b90f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b90f4:	6042      	str	r2, [r0, #4]
   b90f6:	2204      	movs	r2, #4
   b90f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b90fa:	4a03      	ldr	r2, [pc, #12]	; (b9108 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b90fc:	601a      	str	r2, [r3, #0]
   b90fe:	bd10      	pop	{r4, pc}
   b9100:	2003e618 	.word	0x2003e618
   b9104:	2003e610 	.word	0x2003e610
   b9108:	000becf0 	.word	0x000becf0

000b910c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b910c:	4770      	bx	lr

000b910e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b910e:	7b00      	ldrb	r0, [r0, #12]
   b9110:	4770      	bx	lr

000b9112 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b9112:	7b03      	ldrb	r3, [r0, #12]
   b9114:	b14b      	cbz	r3, b912a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b9116:	6903      	ldr	r3, [r0, #16]
   b9118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b911c:	d005      	beq.n	b912a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b911e:	6980      	ldr	r0, [r0, #24]
   b9120:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b9124:	bf18      	it	ne
   b9126:	2001      	movne	r0, #1
   b9128:	4770      	bx	lr
   b912a:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b912c:	4770      	bx	lr

000b912e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b912e:	6803      	ldr	r3, [r0, #0]
   b9130:	6a1b      	ldr	r3, [r3, #32]
   b9132:	4718      	bx	r3

000b9134 <_ZNK14CellularSignal7printToER5Print>:
{
   b9134:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b9136:	6803      	ldr	r3, [r0, #0]
{
   b9138:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b913a:	691b      	ldr	r3, [r3, #16]
{
   b913c:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b913e:	4798      	blx	r3
   b9140:	2102      	movs	r1, #2
   b9142:	4628      	mov	r0, r5
   b9144:	f001 fe6c 	bl	bae20 <_ZN5Print5printEfi>
    n += p.print(',');
   b9148:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b914a:	4604      	mov	r4, r0
    n += p.print(',');
   b914c:	4628      	mov	r0, r5
   b914e:	f001 fd71 	bl	bac34 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b9152:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b9154:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b9156:	699b      	ldr	r3, [r3, #24]
   b9158:	4630      	mov	r0, r6
   b915a:	4798      	blx	r3
   b915c:	2102      	movs	r1, #2
   b915e:	4628      	mov	r0, r5
   b9160:	f001 fe5e 	bl	bae20 <_ZN5Print5printEfi>
}
   b9164:	4420      	add	r0, r4
   b9166:	bd70      	pop	{r4, r5, r6, pc}

000b9168 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b9168:	f1a0 0004 	sub.w	r0, r0, #4
   b916c:	f7ff bfe2 	b.w	b9134 <_ZNK14CellularSignal7printToER5Print>

000b9170 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b9170:	b510      	push	{r4, lr}
   b9172:	2120      	movs	r1, #32
   b9174:	4604      	mov	r4, r0
   b9176:	f7fa ff92 	bl	b409e <_ZdlPvj>
   b917a:	4620      	mov	r0, r4
   b917c:	bd10      	pop	{r4, pc}
	...

000b9180 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b9180:	7b03      	ldrb	r3, [r0, #12]
   b9182:	b17b      	cbz	r3, b91a4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b9184:	6943      	ldr	r3, [r0, #20]
   b9186:	2b00      	cmp	r3, #0
   b9188:	db0c      	blt.n	b91a4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b918a:	ee07 3a90 	vmov	s15, r3
   b918e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b91ac <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b9192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9196:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b919a:	eddf 7a05 	vldr	s15, [pc, #20]	; b91b0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b919e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b91a2:	4770      	bx	lr
    return -1.0f;
   b91a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b91a8:	4770      	bx	lr
   b91aa:	bf00      	nop
   b91ac:	477fff00 	.word	0x477fff00
   b91b0:	42c80000 	.word	0x42c80000

000b91b4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b91b4:	7b03      	ldrb	r3, [r0, #12]
   b91b6:	b163      	cbz	r3, b91d2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b91b8:	6903      	ldr	r3, [r0, #16]
   b91ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b91be:	d008      	beq.n	b91d2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b91c0:	ee07 3a90 	vmov	s15, r3
   b91c4:	ed9f 7a04 	vldr	s14, [pc, #16]	; b91d8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b91c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b91cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b91d0:	4770      	bx	lr
    return 0.0f;
   b91d2:	ed9f 0a02 	vldr	s0, [pc, #8]	; b91dc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b91d6:	4770      	bx	lr
   b91d8:	42c80000 	.word	0x42c80000
   b91dc:	00000000 	.word	0x00000000

000b91e0 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b91e0:	7b03      	ldrb	r3, [r0, #12]
   b91e2:	b17b      	cbz	r3, b9204 <_ZNK14CellularSignal10getQualityEv+0x24>
   b91e4:	69c3      	ldr	r3, [r0, #28]
   b91e6:	2b00      	cmp	r3, #0
   b91e8:	db0c      	blt.n	b9204 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b91ea:	ee07 3a90 	vmov	s15, r3
   b91ee:	ed9f 7a07 	vldr	s14, [pc, #28]	; b920c <_ZNK14CellularSignal10getQualityEv+0x2c>
   b91f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b91f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b91fa:	eddf 7a05 	vldr	s15, [pc, #20]	; b9210 <_ZNK14CellularSignal10getQualityEv+0x30>
   b91fe:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9202:	4770      	bx	lr
    return -1.0f;
   b9204:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9208:	4770      	bx	lr
   b920a:	bf00      	nop
   b920c:	477fff00 	.word	0x477fff00
   b9210:	42c80000 	.word	0x42c80000

000b9214 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b9214:	7b03      	ldrb	r3, [r0, #12]
   b9216:	b163      	cbz	r3, b9232 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b9218:	6983      	ldr	r3, [r0, #24]
   b921a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b921e:	d008      	beq.n	b9232 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b9220:	ee07 3a90 	vmov	s15, r3
   b9224:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9238 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b9228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b922c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9230:	4770      	bx	lr
    return 0.0f;
   b9232:	ed9f 0a02 	vldr	s0, [pc, #8]	; b923c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b9236:	4770      	bx	lr
   b9238:	42c80000 	.word	0x42c80000
   b923c:	00000000 	.word	0x00000000

000b9240 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b9240:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b9242:	460d      	mov	r5, r1
   b9244:	f100 0408 	add.w	r4, r0, #8
   b9248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b924a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b924c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9250:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b9254:	2001      	movs	r0, #1
   b9256:	bd30      	pop	{r4, r5, pc}

000b9258 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9258:	2200      	movs	r2, #0
   b925a:	6840      	ldr	r0, [r0, #4]
   b925c:	4611      	mov	r1, r2
   b925e:	f7ff be01 	b.w	b8e64 <network_listening>

000b9262 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9262:	2200      	movs	r2, #0
   b9264:	6840      	ldr	r0, [r0, #4]
   b9266:	4611      	mov	r1, r2
   b9268:	f7ff be0c 	b.w	b8e84 <network_get_listen_timeout>

000b926c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b926c:	6840      	ldr	r0, [r0, #4]
   b926e:	2200      	movs	r2, #0
   b9270:	f7ff be00 	b.w	b8e74 <network_set_listen_timeout>

000b9274 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9274:	6840      	ldr	r0, [r0, #4]
   b9276:	2200      	movs	r2, #0
   b9278:	f081 0101 	eor.w	r1, r1, #1
   b927c:	f7ff bdea 	b.w	b8e54 <network_listen>

000b9280 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9280:	2300      	movs	r3, #0
   b9282:	6840      	ldr	r0, [r0, #4]
   b9284:	461a      	mov	r2, r3
   b9286:	4619      	mov	r1, r3
   b9288:	f7ff bddc 	b.w	b8e44 <network_off>

000b928c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b928c:	2300      	movs	r3, #0
   b928e:	6840      	ldr	r0, [r0, #4]
   b9290:	461a      	mov	r2, r3
   b9292:	4619      	mov	r1, r3
   b9294:	f7ff bdce 	b.w	b8e34 <network_on>

000b9298 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9298:	2200      	movs	r2, #0
   b929a:	6840      	ldr	r0, [r0, #4]
   b929c:	4611      	mov	r1, r2
   b929e:	f7ff bdc1 	b.w	b8e24 <network_ready>

000b92a2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b92a2:	2200      	movs	r2, #0
   b92a4:	6840      	ldr	r0, [r0, #4]
   b92a6:	4611      	mov	r1, r2
   b92a8:	f7ff bdac 	b.w	b8e04 <network_connecting>

000b92ac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b92ac:	6840      	ldr	r0, [r0, #4]
   b92ae:	2200      	movs	r2, #0
   b92b0:	2102      	movs	r1, #2
   b92b2:	f7ff bdaf 	b.w	b8e14 <network_disconnect>

000b92b6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b92b6:	2300      	movs	r3, #0
   b92b8:	6840      	ldr	r0, [r0, #4]
   b92ba:	461a      	mov	r2, r3
   b92bc:	f7ff bd9a 	b.w	b8df4 <network_connect>

000b92c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b92c0:	4b02      	ldr	r3, [pc, #8]	; (b92cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b92c2:	2203      	movs	r2, #3
   b92c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b92c6:	4a02      	ldr	r2, [pc, #8]	; (b92d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b92c8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b92ca:	4770      	bx	lr
   b92cc:	2003e640 	.word	0x2003e640
   b92d0:	000bed68 	.word	0x000bed68

000b92d4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b92d4:	6800      	ldr	r0, [r0, #0]
   b92d6:	f000 b8f3 	b.w	b94c0 <_ZN7TwoWire4lockEv>

000b92da <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b92da:	b510      	push	{r4, lr}
   b92dc:	4604      	mov	r4, r0
      lock_(_lock) {
   b92de:	6001      	str	r1, [r0, #0]
   b92e0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b92e2:	b10a      	cbz	r2, b92e8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b92e4:	f7ff fff6 	bl	b92d4 <_ZN9FuelGauge4lockEv>
}
   b92e8:	4620      	mov	r0, r4
   b92ea:	bd10      	pop	{r4, pc}

000b92ec <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b92ec:	b513      	push	{r0, r1, r4, lr}
   b92ee:	4604      	mov	r4, r0
   b92f0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b92f2:	f002 fc51 	bl	bbb98 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b92f6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b92f8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b92fa:	4620      	mov	r0, r4
   b92fc:	f7ff ffed 	bl	b92da <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b9300:	4620      	mov	r0, r4
   b9302:	b002      	add	sp, #8
   b9304:	bd10      	pop	{r4, pc}

000b9306 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b9306:	6800      	ldr	r0, [r0, #0]
   b9308:	f000 b8e3 	b.w	b94d2 <_ZN7TwoWire6unlockEv>

000b930c <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b930c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9310:	4604      	mov	r4, r0
   b9312:	461d      	mov	r5, r3
   b9314:	460f      	mov	r7, r1
   b9316:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b9318:	f7ff ffdc 	bl	b92d4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b931c:	2236      	movs	r2, #54	; 0x36
   b931e:	2300      	movs	r3, #0
   b9320:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b9324:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b9326:	f04f 0801 	mov.w	r8, #1
   b932a:	230a      	movs	r3, #10
   b932c:	4669      	mov	r1, sp
   b932e:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b9332:	f000 f8a9 	bl	b9488 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b9336:	6820      	ldr	r0, [r4, #0]
   b9338:	6803      	ldr	r3, [r0, #0]
   b933a:	4639      	mov	r1, r7
   b933c:	689b      	ldr	r3, [r3, #8]
   b933e:	4798      	blx	r3
    i2c_.write(MSB);
   b9340:	6820      	ldr	r0, [r4, #0]
   b9342:	6803      	ldr	r3, [r0, #0]
   b9344:	4631      	mov	r1, r6
   b9346:	689b      	ldr	r3, [r3, #8]
   b9348:	4798      	blx	r3
    i2c_.write(LSB);
   b934a:	6820      	ldr	r0, [r4, #0]
   b934c:	6803      	ldr	r3, [r0, #0]
   b934e:	4629      	mov	r1, r5
   b9350:	689b      	ldr	r3, [r3, #8]
   b9352:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b9354:	4641      	mov	r1, r8
   b9356:	6820      	ldr	r0, [r4, #0]
   b9358:	f000 f8ae 	bl	b94b8 <_ZN7TwoWire15endTransmissionEh>
   b935c:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b935e:	4620      	mov	r0, r4
   b9360:	bf0c      	ite	eq
   b9362:	2500      	moveq	r5, #0
   b9364:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b9368:	f7ff ffcd 	bl	b9306 <_ZN9FuelGauge6unlockEv>
}
   b936c:	4628      	mov	r0, r5
   b936e:	b004      	add	sp, #16
   b9370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9374 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b9374:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b9376:	2240      	movs	r2, #64	; 0x40
   b9378:	2300      	movs	r3, #0
   b937a:	2106      	movs	r1, #6
   b937c:	f7ff ffc6 	bl	b930c <_ZN9FuelGauge13writeRegisterEhhh>
}
   b9380:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9384:	bd08      	pop	{r3, pc}

000b9386 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9386:	4770      	bx	lr

000b9388 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b938a:	4606      	mov	r6, r0
   b938c:	4615      	mov	r5, r2
   b938e:	460c      	mov	r4, r1
   b9390:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9392:	42bc      	cmp	r4, r7
   b9394:	d006      	beq.n	b93a4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9396:	6833      	ldr	r3, [r6, #0]
   b9398:	f814 1b01 	ldrb.w	r1, [r4], #1
   b939c:	689b      	ldr	r3, [r3, #8]
   b939e:	4630      	mov	r0, r6
   b93a0:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b93a2:	e7f6      	b.n	b9392 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b93a4:	4628      	mov	r0, r5
   b93a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b93a8 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b93a8:	7c00      	ldrb	r0, [r0, #16]
   b93aa:	2200      	movs	r2, #0
   b93ac:	f7ff baf4 	b.w	b8998 <hal_i2c_write>

000b93b0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b93b0:	7c00      	ldrb	r0, [r0, #16]
   b93b2:	2100      	movs	r1, #0
   b93b4:	f7ff baf8 	b.w	b89a8 <hal_i2c_available>

000b93b8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b93b8:	7c00      	ldrb	r0, [r0, #16]
   b93ba:	2100      	movs	r1, #0
   b93bc:	f7ff bafc 	b.w	b89b8 <hal_i2c_read>

000b93c0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b93c0:	7c00      	ldrb	r0, [r0, #16]
   b93c2:	2100      	movs	r1, #0
   b93c4:	f7ff bb00 	b.w	b89c8 <hal_i2c_peek>

000b93c8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b93c8:	7c00      	ldrb	r0, [r0, #16]
   b93ca:	2100      	movs	r1, #0
   b93cc:	f7ff bb04 	b.w	b89d8 <hal_i2c_flush>

000b93d0 <_ZN7TwoWireD0Ev>:
   b93d0:	b510      	push	{r4, lr}
   b93d2:	2114      	movs	r1, #20
   b93d4:	4604      	mov	r4, r0
   b93d6:	f7fa fe62 	bl	b409e <_ZdlPvj>
   b93da:	4620      	mov	r0, r4
   b93dc:	bd10      	pop	{r4, pc}
	...

000b93e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b93e0:	b538      	push	{r3, r4, r5, lr}
   b93e2:	4604      	mov	r4, r0
   b93e4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b93e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b93ea:	2200      	movs	r2, #0
   b93ec:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b93f0:	4b09      	ldr	r3, [pc, #36]	; (b9418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b93f2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b93f4:	4608      	mov	r0, r1
   b93f6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b93f8:	4629      	mov	r1, r5
   b93fa:	f7ff fafd 	bl	b89f8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b93fe:	30bf      	adds	r0, #191	; 0xbf
   b9400:	d108      	bne.n	b9414 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b9402:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9404:	07db      	lsls	r3, r3, #31
   b9406:	d505      	bpl.n	b9414 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b9408:	6868      	ldr	r0, [r5, #4]
   b940a:	f7ff fd5b 	bl	b8ec4 <free>
    free(conf.tx_buffer);
   b940e:	68e8      	ldr	r0, [r5, #12]
   b9410:	f7ff fd58 	bl	b8ec4 <free>
}
   b9414:	4620      	mov	r0, r4
   b9416:	bd38      	pop	{r3, r4, r5, pc}
   b9418:	000beda4 	.word	0x000beda4

000b941c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b941c:	2300      	movs	r3, #0
   b941e:	7c00      	ldrb	r0, [r0, #16]
   b9420:	461a      	mov	r2, r3
   b9422:	4619      	mov	r1, r3
   b9424:	f7ff baa0 	b.w	b8968 <hal_i2c_begin>

000b9428 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b942a:	2200      	movs	r2, #0
   b942c:	2314      	movs	r3, #20
   b942e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9432:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9436:	780b      	ldrb	r3, [r1, #0]
   b9438:	f88d 3008 	strb.w	r3, [sp, #8]
   b943c:	684b      	ldr	r3, [r1, #4]
   b943e:	9303      	str	r3, [sp, #12]
   b9440:	68cb      	ldr	r3, [r1, #12]
   b9442:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9444:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9446:	7a0b      	ldrb	r3, [r1, #8]
   b9448:	9305      	str	r3, [sp, #20]
   b944a:	a901      	add	r1, sp, #4
   b944c:	f7ff faec 	bl	b8a28 <hal_i2c_request_ex>
}
   b9450:	b007      	add	sp, #28
   b9452:	f85d fb04 	ldr.w	pc, [sp], #4

000b9456 <_ZN7TwoWire11requestFromEhjh>:
{
   b9456:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9458:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b945a:	f88d 1000 	strb.w	r1, [sp]
   b945e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9462:	9103      	str	r1, [sp, #12]
   b9464:	bf18      	it	ne
   b9466:	2301      	movne	r3, #1
   b9468:	4669      	mov	r1, sp
    size_ = size;
   b946a:	9201      	str	r2, [sp, #4]
   b946c:	f88d 3008 	strb.w	r3, [sp, #8]
   b9470:	f7ff ffda 	bl	b9428 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9474:	b005      	add	sp, #20
   b9476:	f85d fb04 	ldr.w	pc, [sp], #4

000b947a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b947a:	7c00      	ldrb	r0, [r0, #16]
   b947c:	2200      	movs	r2, #0
   b947e:	f7ff ba7b 	b.w	b8978 <hal_i2c_begin_transmission>

000b9482 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9482:	b2c9      	uxtb	r1, r1
   b9484:	f7ff bff9 	b.w	b947a <_ZN7TwoWire17beginTransmissionEh>

000b9488 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b9488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b948a:	2300      	movs	r3, #0
   b948c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b9490:	684a      	ldr	r2, [r1, #4]
   b9492:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b9494:	2314      	movs	r3, #20
    };
   b9496:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9498:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b949c:	780b      	ldrb	r3, [r1, #0]
    };
   b949e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b94a0:	7a0a      	ldrb	r2, [r1, #8]
   b94a2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b94a4:	7c00      	ldrb	r0, [r0, #16]
    };
   b94a6:	f88d 3008 	strb.w	r3, [sp, #8]
   b94aa:	aa01      	add	r2, sp, #4
   b94ac:	4619      	mov	r1, r3
   b94ae:	f7ff fa63 	bl	b8978 <hal_i2c_begin_transmission>
}
   b94b2:	b007      	add	sp, #28
   b94b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b94b8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b94b8:	7c00      	ldrb	r0, [r0, #16]
   b94ba:	2200      	movs	r2, #0
   b94bc:	f7ff ba64 	b.w	b8988 <hal_i2c_end_transmission>

000b94c0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b94c0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b94c2:	2100      	movs	r1, #0
   b94c4:	7c00      	ldrb	r0, [r0, #16]
   b94c6:	f7ff fa9f 	bl	b8a08 <hal_i2c_lock>
}
   b94ca:	fab0 f080 	clz	r0, r0
   b94ce:	0940      	lsrs	r0, r0, #5
   b94d0:	bd08      	pop	{r3, pc}

000b94d2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b94d2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b94d4:	2100      	movs	r1, #0
   b94d6:	7c00      	ldrb	r0, [r0, #16]
   b94d8:	f7ff fa9e 	bl	b8a18 <hal_i2c_unlock>
}
   b94dc:	fab0 f080 	clz	r0, r0
   b94e0:	0940      	lsrs	r0, r0, #5
   b94e2:	bd08      	pop	{r3, pc}

000b94e4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b94e4:	4700      	bx	r0
	...

000b94e8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b94e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b94ec:	2400      	movs	r4, #0
{
   b94ee:	461d      	mov	r5, r3
   b94f0:	460f      	mov	r7, r1
   b94f2:	4690      	mov	r8, r2
   b94f4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b94f6:	f7ff fa27 	bl	b8948 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b94fa:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b94fc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9500:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9504:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9508:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b950c:	bfa2      	ittt	ge
   b950e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9512:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9516:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9518:	4907      	ldr	r1, [pc, #28]	; (b9538 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b951a:	9400      	str	r4, [sp, #0]
   b951c:	4643      	mov	r3, r8
   b951e:	463a      	mov	r2, r7
   b9520:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9522:	bfa8      	it	ge
   b9524:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9528:	f7ff fa06 	bl	b8938 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b952c:	fab0 f080 	clz	r0, r0
   b9530:	0940      	lsrs	r0, r0, #5
   b9532:	b004      	add	sp, #16
   b9534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9538:	000b94e5 	.word	0x000b94e5

000b953c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b953c:	4770      	bx	lr

000b953e <_ZN9IPAddressD0Ev>:
   b953e:	b510      	push	{r4, lr}
   b9540:	2118      	movs	r1, #24
   b9542:	4604      	mov	r4, r0
   b9544:	f7fa fdab 	bl	b409e <_ZdlPvj>
   b9548:	4620      	mov	r0, r4
   b954a:	bd10      	pop	{r4, pc}

000b954c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b954c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b954e:	7d03      	ldrb	r3, [r0, #20]
   b9550:	2b06      	cmp	r3, #6
{
   b9552:	b08d      	sub	sp, #52	; 0x34
   b9554:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9556:	f100 0704 	add.w	r7, r0, #4
   b955a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b955e:	d012      	beq.n	b9586 <_ZNK9IPAddress7printToER5Print+0x3a>
   b9560:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9564:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9568:	220a      	movs	r2, #10
   b956a:	4630      	mov	r0, r6
   b956c:	f001 fb71 	bl	bac52 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9570:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9572:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9574:	d019      	beq.n	b95aa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9576:	2c00      	cmp	r4, #0
   b9578:	d0f4      	beq.n	b9564 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b957a:	212e      	movs	r1, #46	; 0x2e
   b957c:	4630      	mov	r0, r6
   b957e:	f001 fb59 	bl	bac34 <_ZN5Print5printEc>
   b9582:	4404      	add	r4, r0
   b9584:	e7ee      	b.n	b9564 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9586:	232f      	movs	r3, #47	; 0x2f
   b9588:	466a      	mov	r2, sp
   b958a:	4639      	mov	r1, r7
   b958c:	200a      	movs	r0, #10
		buf[0] = 0;
   b958e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9592:	f7ff fa51 	bl	b8a38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9596:	4668      	mov	r0, sp
   b9598:	f004 fa0b 	bl	bd9b2 <strlen>
   b959c:	6833      	ldr	r3, [r6, #0]
   b959e:	4602      	mov	r2, r0
   b95a0:	68db      	ldr	r3, [r3, #12]
   b95a2:	4669      	mov	r1, sp
   b95a4:	4630      	mov	r0, r6
   b95a6:	4798      	blx	r3
   b95a8:	4604      	mov	r4, r0
    }
    return n;
}
   b95aa:	4620      	mov	r0, r4
   b95ac:	b00d      	add	sp, #52	; 0x34
   b95ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b95b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b95b0:	b510      	push	{r4, lr}
   b95b2:	4b05      	ldr	r3, [pc, #20]	; (b95c8 <_ZN9IPAddressC1Ev+0x18>)
   b95b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b95b6:	2211      	movs	r2, #17
   b95b8:	f840 3b04 	str.w	r3, [r0], #4
   b95bc:	2100      	movs	r1, #0
   b95be:	f004 f95b 	bl	bd878 <memset>
}
   b95c2:	4620      	mov	r0, r4
   b95c4:	bd10      	pop	{r4, pc}
   b95c6:	bf00      	nop
   b95c8:	000bedcc 	.word	0x000bedcc

000b95cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b95cc:	4603      	mov	r3, r0
   b95ce:	4a07      	ldr	r2, [pc, #28]	; (b95ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b95d0:	b510      	push	{r4, lr}
   b95d2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b95d6:	f101 0210 	add.w	r2, r1, #16
   b95da:	f851 4b04 	ldr.w	r4, [r1], #4
   b95de:	f843 4b04 	str.w	r4, [r3], #4
   b95e2:	4291      	cmp	r1, r2
   b95e4:	d1f9      	bne.n	b95da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b95e6:	780a      	ldrb	r2, [r1, #0]
   b95e8:	701a      	strb	r2, [r3, #0]
}
   b95ea:	bd10      	pop	{r4, pc}
   b95ec:	000bedcc 	.word	0x000bedcc

000b95f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b95f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b95f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b95f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b95fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b95fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9602:	2304      	movs	r3, #4
   b9604:	6041      	str	r1, [r0, #4]
   b9606:	7503      	strb	r3, [r0, #20]
}
   b9608:	bd10      	pop	{r4, pc}
	...

000b960c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b960c:	b507      	push	{r0, r1, r2, lr}
   b960e:	4b06      	ldr	r3, [pc, #24]	; (b9628 <_ZN9IPAddressC1EPKh+0x1c>)
   b9610:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9612:	78cb      	ldrb	r3, [r1, #3]
   b9614:	9300      	str	r3, [sp, #0]
   b9616:	788b      	ldrb	r3, [r1, #2]
   b9618:	784a      	ldrb	r2, [r1, #1]
   b961a:	7809      	ldrb	r1, [r1, #0]
   b961c:	f7ff ffe8 	bl	b95f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9620:	b003      	add	sp, #12
   b9622:	f85d fb04 	ldr.w	pc, [sp], #4
   b9626:	bf00      	nop
   b9628:	000bedcc 	.word	0x000bedcc

000b962c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b962c:	f100 0310 	add.w	r3, r0, #16
   b9630:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b9632:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b9636:	2901      	cmp	r1, #1
   b9638:	4618      	mov	r0, r3
   b963a:	d108      	bne.n	b964e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b963c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b9640:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b9644:	3a01      	subs	r2, #1
   b9646:	f103 0310 	add.w	r3, r3, #16
   b964a:	d1f2      	bne.n	b9632 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b964c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b964e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b9650:	bf04      	itt	eq
   b9652:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b9656:	1852      	addeq	r2, r2, r1
   b9658:	e7f4      	b.n	b9644 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b965a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b965a:	b40e      	push	{r1, r2, r3}
   b965c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b965e:	b088      	sub	sp, #32
   b9660:	af00      	add	r7, sp, #0
   b9662:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9666:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9668:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b966c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b966e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9670:	462b      	mov	r3, r5
   b9672:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9674:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9676:	f7ff fc45 	bl	b8f04 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b967a:	280f      	cmp	r0, #15
   b967c:	687a      	ldr	r2, [r7, #4]
   b967e:	d91a      	bls.n	b96b6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b9680:	f100 0308 	add.w	r3, r0, #8
   b9684:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9688:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b968a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b968e:	1c41      	adds	r1, r0, #1
   b9690:	462b      	mov	r3, r5
   b9692:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9694:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9696:	f7ff fc35 	bl	b8f04 <vsnprintf>
        if (n > 0) {
   b969a:	1e02      	subs	r2, r0, #0
   b969c:	dd04      	ble.n	b96a8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b969e:	6823      	ldr	r3, [r4, #0]
   b96a0:	4669      	mov	r1, sp
   b96a2:	689b      	ldr	r3, [r3, #8]
   b96a4:	4620      	mov	r0, r4
   b96a6:	4798      	blx	r3
   b96a8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b96aa:	3720      	adds	r7, #32
   b96ac:	46bd      	mov	sp, r7
   b96ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b96b2:	b003      	add	sp, #12
   b96b4:	4770      	bx	lr
    } else if (n > 0) {
   b96b6:	2800      	cmp	r0, #0
   b96b8:	d0f7      	beq.n	b96aa <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b96ba:	6823      	ldr	r3, [r4, #0]
   b96bc:	4602      	mov	r2, r0
   b96be:	689b      	ldr	r3, [r3, #8]
   b96c0:	f107 0110 	add.w	r1, r7, #16
   b96c4:	4620      	mov	r0, r4
   b96c6:	4798      	blx	r3
}
   b96c8:	e7ef      	b.n	b96aa <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b96ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b96ca:	b538      	push	{r3, r4, r5, lr}
   b96cc:	680b      	ldr	r3, [r1, #0]
   b96ce:	6003      	str	r3, [r0, #0]
   b96d0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b96d2:	6843      	ldr	r3, [r0, #4]
   b96d4:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b96d6:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b96d8:	d008      	beq.n	b96ec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b96da:	b115      	cbz	r5, b96e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b96dc:	686b      	ldr	r3, [r5, #4]
   b96de:	3301      	adds	r3, #1
   b96e0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b96e2:	6860      	ldr	r0, [r4, #4]
   b96e4:	b108      	cbz	r0, b96ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b96e6:	f7ff fc64 	bl	b8fb2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b96ea:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b96ec:	bd38      	pop	{r3, r4, r5, pc}

000b96ee <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b96ee:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b96f0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b96f2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b96f6:	689b      	ldr	r3, [r3, #8]
   b96f8:	2201      	movs	r2, #1
   b96fa:	f10d 0107 	add.w	r1, sp, #7
   b96fe:	4798      	blx	r3
}
   b9700:	b003      	add	sp, #12
   b9702:	f85d fb04 	ldr.w	pc, [sp], #4

000b9706 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9706:	460b      	mov	r3, r1
   b9708:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b970a:	2200      	movs	r2, #0
   b970c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b970e:	e9c0 2200 	strd	r2, r2, [r0]
   b9712:	4604      	mov	r4, r0
        t_ = t;
   b9714:	6083      	str	r3, [r0, #8]
    if (t) {
   b9716:	b90b      	cbnz	r3, b971c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b9718:	4620      	mov	r0, r4
   b971a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b971c:	f7ff ffd5 	bl	b96ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b9720:	e7fa      	b.n	b9718 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b9722 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b9722:	6883      	ldr	r3, [r0, #8]
   b9724:	b1eb      	cbz	r3, b9762 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b9726:	781a      	ldrb	r2, [r3, #0]
   b9728:	2a03      	cmp	r2, #3
   b972a:	d81a      	bhi.n	b9762 <_ZNK5spark9JSONValue4typeEv+0x40>
   b972c:	e8df f002 	tbb	[pc, r2]
   b9730:	1b021704 	.word	0x1b021704
   b9734:	2005      	movs	r0, #5
   b9736:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9738:	6802      	ldr	r2, [r0, #0]
   b973a:	685b      	ldr	r3, [r3, #4]
   b973c:	6852      	ldr	r2, [r2, #4]
   b973e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b9740:	282d      	cmp	r0, #45	; 0x2d
   b9742:	d012      	beq.n	b976a <_ZNK5spark9JSONValue4typeEv+0x48>
   b9744:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9748:	2b09      	cmp	r3, #9
   b974a:	d90e      	bls.n	b976a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b974c:	2874      	cmp	r0, #116	; 0x74
   b974e:	d00e      	beq.n	b976e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b9750:	2866      	cmp	r0, #102	; 0x66
   b9752:	d00c      	beq.n	b976e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9754:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9758:	4258      	negs	r0, r3
   b975a:	4158      	adcs	r0, r3
   b975c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b975e:	2006      	movs	r0, #6
   b9760:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b9762:	2000      	movs	r0, #0
   b9764:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9766:	2004      	movs	r0, #4
   b9768:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b976a:	2003      	movs	r0, #3
   b976c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b976e:	2002      	movs	r0, #2
}
   b9770:	4770      	bx	lr

000b9772 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b9772:	b510      	push	{r4, lr}
   b9774:	4604      	mov	r4, r0
    switch (type()) {
   b9776:	f7ff ffd4 	bl	b9722 <_ZNK5spark9JSONValue4typeEv>
   b977a:	2802      	cmp	r0, #2
   b977c:	d00e      	beq.n	b979c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b977e:	1ec3      	subs	r3, r0, #3
   b9780:	b2db      	uxtb	r3, r3
   b9782:	2b01      	cmp	r3, #1
   b9784:	d814      	bhi.n	b97b0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9786:	6822      	ldr	r2, [r4, #0]
   b9788:	68a3      	ldr	r3, [r4, #8]
   b978a:	6850      	ldr	r0, [r2, #4]
   b978c:	685b      	ldr	r3, [r3, #4]
}
   b978e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b9792:	220a      	movs	r2, #10
   b9794:	2100      	movs	r1, #0
   b9796:	4418      	add	r0, r3
   b9798:	f004 b9d0 	b.w	bdb3c <strtol>
        const char* const s = d_->json + t_->start;
   b979c:	6822      	ldr	r2, [r4, #0]
   b979e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b97a0:	6852      	ldr	r2, [r2, #4]
   b97a2:	685b      	ldr	r3, [r3, #4]
   b97a4:	5cd0      	ldrb	r0, [r2, r3]
   b97a6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b97aa:	4258      	negs	r0, r3
   b97ac:	4158      	adcs	r0, r3
}
   b97ae:	bd10      	pop	{r4, pc}
    switch (type()) {
   b97b0:	2000      	movs	r0, #0
   b97b2:	e7fc      	b.n	b97ae <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b97b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b97b4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b97b6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b97b8:	e9c0 3300 	strd	r3, r3, [r0]
   b97bc:	4604      	mov	r4, r0
        n_(0) {
   b97be:	480e      	ldr	r0, [pc, #56]	; (b97f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b97c0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b97c4:	b1a9      	cbz	r1, b97f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b97c6:	780b      	ldrb	r3, [r1, #0]
   b97c8:	2b03      	cmp	r3, #3
   b97ca:	d006      	beq.n	b97da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b97cc:	b98b      	cbnz	r3, b97f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b97ce:	6813      	ldr	r3, [r2, #0]
   b97d0:	6858      	ldr	r0, [r3, #4]
   b97d2:	684b      	ldr	r3, [r1, #4]
   b97d4:	5cc3      	ldrb	r3, [r0, r3]
   b97d6:	2b6e      	cmp	r3, #110	; 0x6e
   b97d8:	d007      	beq.n	b97ea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b97da:	6813      	ldr	r3, [r2, #0]
   b97dc:	684d      	ldr	r5, [r1, #4]
   b97de:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b97e0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b97e2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b97e4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b97e6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b97e8:	60e3      	str	r3, [r4, #12]
   b97ea:	4611      	mov	r1, r2
   b97ec:	4620      	mov	r0, r4
   b97ee:	f7ff ff6c 	bl	b96ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b97f2:	4620      	mov	r0, r4
   b97f4:	bd38      	pop	{r3, r4, r5, pc}
   b97f6:	bf00      	nop
   b97f8:	000bee35 	.word	0x000bee35

000b97fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b97fc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b97fe:	2500      	movs	r5, #0
   b9800:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b9802:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b9806:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b980a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b980e:	4604      	mov	r4, r0
   b9810:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b9812:	b14b      	cbz	r3, b9828 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b9814:	781a      	ldrb	r2, [r3, #0]
   b9816:	2a01      	cmp	r2, #1
   b9818:	d106      	bne.n	b9828 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b981a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b981e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b9820:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b9822:	6143      	str	r3, [r0, #20]
   b9824:	f7ff ff51 	bl	b96ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9828:	4620      	mov	r0, r4
   b982a:	bd38      	pop	{r3, r4, r5, pc}

000b982c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b982c:	b510      	push	{r4, lr}
    if (!n_) {
   b982e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9830:	4604      	mov	r4, r0
    if (!n_) {
   b9832:	b163      	cbz	r3, b984e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9834:	6880      	ldr	r0, [r0, #8]
   b9836:	60e0      	str	r0, [r4, #12]
    --n_;
   b9838:	3b01      	subs	r3, #1
    ++t_;
   b983a:	3010      	adds	r0, #16
   b983c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b983e:	6120      	str	r0, [r4, #16]
    --n_;
   b9840:	6163      	str	r3, [r4, #20]
    if (n_) {
   b9842:	b113      	cbz	r3, b984a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9844:	f7ff fef2 	bl	b962c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9848:	60a0      	str	r0, [r4, #8]
    return true;
   b984a:	2001      	movs	r0, #1
   b984c:	e000      	b.n	b9850 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b984e:	4618      	mov	r0, r3
}
   b9850:	bd10      	pop	{r4, pc}

000b9852 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9852:	b510      	push	{r4, lr}
    write('}');
   b9854:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9856:	4604      	mov	r4, r0
    write('}');
   b9858:	f7ff ff49 	bl	b96ee <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b985c:	2301      	movs	r3, #1
   b985e:	7123      	strb	r3, [r4, #4]
}
   b9860:	4620      	mov	r0, r4
   b9862:	bd10      	pop	{r4, pc}

000b9864 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9864:	b508      	push	{r3, lr}
    switch (state_) {
   b9866:	7903      	ldrb	r3, [r0, #4]
   b9868:	2b01      	cmp	r3, #1
   b986a:	d002      	beq.n	b9872 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b986c:	2b02      	cmp	r3, #2
   b986e:	d004      	beq.n	b987a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b9870:	bd08      	pop	{r3, pc}
        write(',');
   b9872:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9874:	f7ff ff3b 	bl	b96ee <_ZN5spark10JSONWriter5writeEc>
}
   b9878:	e7fa      	b.n	b9870 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b987a:	213a      	movs	r1, #58	; 0x3a
   b987c:	e7fa      	b.n	b9874 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b987e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b987e:	b510      	push	{r4, lr}
   b9880:	4604      	mov	r4, r0
    writeSeparator();
   b9882:	f7ff ffef 	bl	b9864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9886:	4620      	mov	r0, r4
   b9888:	217b      	movs	r1, #123	; 0x7b
   b988a:	f7ff ff30 	bl	b96ee <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b988e:	2300      	movs	r3, #0
   b9890:	7123      	strb	r3, [r4, #4]
}
   b9892:	4620      	mov	r0, r4
   b9894:	bd10      	pop	{r4, pc}
	...

000b9898 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9898:	b513      	push	{r0, r1, r4, lr}
   b989a:	4604      	mov	r4, r0
   b989c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b989e:	f7ff ffe1 	bl	b9864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b98a2:	6823      	ldr	r3, [r4, #0]
   b98a4:	9a01      	ldr	r2, [sp, #4]
   b98a6:	68db      	ldr	r3, [r3, #12]
   b98a8:	4903      	ldr	r1, [pc, #12]	; (b98b8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b98aa:	4620      	mov	r0, r4
   b98ac:	4798      	blx	r3
    state_ = NEXT;
   b98ae:	2301      	movs	r3, #1
}
   b98b0:	4620      	mov	r0, r4
    state_ = NEXT;
   b98b2:	7123      	strb	r3, [r4, #4]
}
   b98b4:	b002      	add	sp, #8
   b98b6:	bd10      	pop	{r4, pc}
   b98b8:	000bde56 	.word	0x000bde56

000b98bc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b98bc:	b513      	push	{r0, r1, r4, lr}
   b98be:	4604      	mov	r4, r0
   b98c0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b98c2:	f7ff ffcf 	bl	b9864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b98c6:	6823      	ldr	r3, [r4, #0]
   b98c8:	9a01      	ldr	r2, [sp, #4]
   b98ca:	68db      	ldr	r3, [r3, #12]
   b98cc:	4903      	ldr	r1, [pc, #12]	; (b98dc <_ZN5spark10JSONWriter5valueEj+0x20>)
   b98ce:	4620      	mov	r0, r4
   b98d0:	4798      	blx	r3
    state_ = NEXT;
   b98d2:	2301      	movs	r3, #1
}
   b98d4:	4620      	mov	r0, r4
    state_ = NEXT;
   b98d6:	7123      	strb	r3, [r4, #4]
}
   b98d8:	b002      	add	sp, #8
   b98da:	bd10      	pop	{r4, pc}
   b98dc:	000be77a 	.word	0x000be77a

000b98e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b98e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b98e4:	460d      	mov	r5, r1
    write('"');
   b98e6:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b98e8:	4690      	mov	r8, r2
   b98ea:	4604      	mov	r4, r0
    write('"');
   b98ec:	f7ff feff 	bl	b96ee <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b98f0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9998 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b98f4:	44a8      	add	r8, r5
    const char *s = str;
   b98f6:	462f      	mov	r7, r5
    while (s != end) {
   b98f8:	4547      	cmp	r7, r8
   b98fa:	46ba      	mov	sl, r7
   b98fc:	d03d      	beq.n	b997a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b98fe:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b9902:	2e22      	cmp	r6, #34	; 0x22
   b9904:	d006      	beq.n	b9914 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9906:	2e5c      	cmp	r6, #92	; 0x5c
   b9908:	d004      	beq.n	b9914 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b990a:	4630      	mov	r0, r6
   b990c:	f003 ff84 	bl	bd818 <isprint>
   b9910:	2800      	cmp	r0, #0
   b9912:	d1f1      	bne.n	b98f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b9914:	6823      	ldr	r3, [r4, #0]
   b9916:	ebaa 0205 	sub.w	r2, sl, r5
   b991a:	689b      	ldr	r3, [r3, #8]
   b991c:	4629      	mov	r1, r5
   b991e:	4620      	mov	r0, r4
   b9920:	4798      	blx	r3
            write('\\');
   b9922:	215c      	movs	r1, #92	; 0x5c
   b9924:	4620      	mov	r0, r4
   b9926:	f7ff fee2 	bl	b96ee <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b992a:	2e0d      	cmp	r6, #13
   b992c:	d80a      	bhi.n	b9944 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b992e:	2e07      	cmp	r6, #7
   b9930:	d91c      	bls.n	b996c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9932:	f1a6 0308 	sub.w	r3, r6, #8
   b9936:	2b05      	cmp	r3, #5
   b9938:	d818      	bhi.n	b996c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b993a:	e8df f003 	tbb	[pc, r3]
   b993e:	0f0d      	.short	0x0f0d
   b9940:	15131711 	.word	0x15131711
   b9944:	2e22      	cmp	r6, #34	; 0x22
   b9946:	d001      	beq.n	b994c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b9948:	2e5c      	cmp	r6, #92	; 0x5c
   b994a:	d10f      	bne.n	b996c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b994c:	4631      	mov	r1, r6
                write('b');
   b994e:	4620      	mov	r0, r4
   b9950:	f7ff fecd 	bl	b96ee <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9954:	463d      	mov	r5, r7
    while (s != end) {
   b9956:	e7cf      	b.n	b98f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b9958:	2162      	movs	r1, #98	; 0x62
   b995a:	e7f8      	b.n	b994e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b995c:	2174      	movs	r1, #116	; 0x74
   b995e:	e7f6      	b.n	b994e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b9960:	216e      	movs	r1, #110	; 0x6e
   b9962:	e7f4      	b.n	b994e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9964:	2166      	movs	r1, #102	; 0x66
   b9966:	e7f2      	b.n	b994e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b9968:	2172      	movs	r1, #114	; 0x72
   b996a:	e7f0      	b.n	b994e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b996c:	6823      	ldr	r3, [r4, #0]
   b996e:	4632      	mov	r2, r6
   b9970:	68db      	ldr	r3, [r3, #12]
   b9972:	4649      	mov	r1, r9
   b9974:	4620      	mov	r0, r4
   b9976:	4798      	blx	r3
                break;
   b9978:	e7ec      	b.n	b9954 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b997a:	42bd      	cmp	r5, r7
   b997c:	d005      	beq.n	b998a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b997e:	6823      	ldr	r3, [r4, #0]
   b9980:	1b7a      	subs	r2, r7, r5
   b9982:	689b      	ldr	r3, [r3, #8]
   b9984:	4629      	mov	r1, r5
   b9986:	4620      	mov	r0, r4
   b9988:	4798      	blx	r3
    }
    write('"');
   b998a:	2122      	movs	r1, #34	; 0x22
   b998c:	4620      	mov	r0, r4
   b998e:	f7ff feae 	bl	b96ee <_ZN5spark10JSONWriter5writeEc>
}
   b9992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9996:	bf00      	nop
   b9998:	000bedd8 	.word	0x000bedd8

000b999c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b999c:	b513      	push	{r0, r1, r4, lr}
   b999e:	4604      	mov	r4, r0
   b99a0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b99a4:	f7ff ff5e 	bl	b9864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b99a8:	4620      	mov	r0, r4
   b99aa:	e9dd 2100 	ldrd	r2, r1, [sp]
   b99ae:	f7ff ff97 	bl	b98e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b99b2:	2302      	movs	r3, #2
}
   b99b4:	4620      	mov	r0, r4
    state_ = VALUE;
   b99b6:	7123      	strb	r3, [r4, #4]
}
   b99b8:	b002      	add	sp, #8
   b99ba:	bd10      	pop	{r4, pc}

000b99bc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b99bc:	b513      	push	{r0, r1, r4, lr}
   b99be:	4604      	mov	r4, r0
   b99c0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b99c4:	f7ff ff4e 	bl	b9864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b99c8:	4620      	mov	r0, r4
   b99ca:	e9dd 2100 	ldrd	r2, r1, [sp]
   b99ce:	f7ff ff87 	bl	b98e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b99d2:	2301      	movs	r3, #1
}
   b99d4:	4620      	mov	r0, r4
    state_ = NEXT;
   b99d6:	7123      	strb	r3, [r4, #4]
}
   b99d8:	b002      	add	sp, #8
   b99da:	bd10      	pop	{r4, pc}

000b99dc <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b99dc:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b99de:	460b      	mov	r3, r1
    s->update(ticks);
   b99e0:	6892      	ldr	r2, [r2, #8]
   b99e2:	4601      	mov	r1, r0
   b99e4:	4618      	mov	r0, r3
   b99e6:	4710      	bx	r2

000b99e8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b99e8:	b570      	push	{r4, r5, r6, lr}
   b99ea:	4c0e      	ldr	r4, [pc, #56]	; (b9a24 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b99ec:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b99ee:	2500      	movs	r5, #0
   b99f0:	241c      	movs	r4, #28
   b99f2:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b99f6:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b99fa:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b99fe:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b9a00:	f004 0403 	and.w	r4, r4, #3
   b9a04:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b9a08:	b2e4      	uxtb	r4, r4
   b9a0a:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b9a0c:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b9a0e:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b9a10:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b9a12:	7c42      	ldrb	r2, [r0, #17]
   b9a14:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b9a16:	bf0a      	itet	eq
   b9a18:	4b03      	ldreq	r3, [pc, #12]	; (b9a28 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b9a1a:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b9a1c:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b9a20:	bd70      	pop	{r4, r5, r6, pc}
   b9a22:	bf00      	nop
   b9a24:	000be518 	.word	0x000be518
   b9a28:	000b99dd 	.word	0x000b99dd

000b9a2c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9a2c:	6880      	ldr	r0, [r0, #8]
   b9a2e:	6803      	ldr	r3, [r0, #0]
   b9a30:	68db      	ldr	r3, [r3, #12]
   b9a32:	4718      	bx	r3

000b9a34 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9a34:	4770      	bx	lr

000b9a36 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b9a36:	4608      	mov	r0, r1
   b9a38:	b111      	cbz	r1, b9a40 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9a3a:	680b      	ldr	r3, [r1, #0]
   b9a3c:	685b      	ldr	r3, [r3, #4]
   b9a3e:	4718      	bx	r3
}
   b9a40:	4770      	bx	lr

000b9a42 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b9a42:	4770      	bx	lr

000b9a44 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9a44:	4770      	bx	lr

000b9a46 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b9a46:	4770      	bx	lr

000b9a48 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9a48:	4770      	bx	lr

000b9a4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9a4a:	b538      	push	{r3, r4, r5, lr}
   b9a4c:	4604      	mov	r4, r0
   b9a4e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9a50:	6800      	ldr	r0, [r0, #0]
   b9a52:	212e      	movs	r1, #46	; 0x2e
   b9a54:	f003 ff91 	bl	bd97a <strchrnul>
    size = s - category;
   b9a58:	6823      	ldr	r3, [r4, #0]
   b9a5a:	1ac3      	subs	r3, r0, r3
   b9a5c:	602b      	str	r3, [r5, #0]
    if (size) {
   b9a5e:	b123      	cbz	r3, b9a6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9a60:	7803      	ldrb	r3, [r0, #0]
   b9a62:	b103      	cbz	r3, b9a66 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9a64:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b9a66:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9a68:	6020      	str	r0, [r4, #0]
}
   b9a6a:	4618      	mov	r0, r3
   b9a6c:	bd38      	pop	{r3, r4, r5, pc}

000b9a6e <_ZN5spark16JSONStreamWriterD0Ev>:
   b9a6e:	b510      	push	{r4, lr}
   b9a70:	210c      	movs	r1, #12
   b9a72:	4604      	mov	r4, r0
   b9a74:	f7fa fb13 	bl	b409e <_ZdlPvj>
   b9a78:	4620      	mov	r0, r4
   b9a7a:	bd10      	pop	{r4, pc}

000b9a7c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9a7c:	b510      	push	{r4, lr}
   b9a7e:	2104      	movs	r1, #4
   b9a80:	4604      	mov	r4, r0
   b9a82:	f7fa fb0c 	bl	b409e <_ZdlPvj>
   b9a86:	4620      	mov	r0, r4
   b9a88:	bd10      	pop	{r4, pc}

000b9a8a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9a8a:	b510      	push	{r4, lr}
   b9a8c:	2104      	movs	r1, #4
   b9a8e:	4604      	mov	r4, r0
   b9a90:	f7fa fb05 	bl	b409e <_ZdlPvj>
   b9a94:	4620      	mov	r0, r4
   b9a96:	bd10      	pop	{r4, pc}

000b9a98 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9a98:	f7fe bec6 	b.w	b8828 <os_mutex_recursive_lock>

000b9a9c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9a9c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9a9e:	f003 ff76 	bl	bd98e <strcmp>
}
   b9aa2:	fab0 f080 	clz	r0, r0
   b9aa6:	0940      	lsrs	r0, r0, #5
   b9aa8:	bd08      	pop	{r3, pc}

000b9aaa <__tcf_1>:
   b9aaa:	4770      	bx	lr

000b9aac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9aac:	b510      	push	{r4, lr}
   b9aae:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9ab0:	f001 fec4 	bl	bb83c <_Z16_fetch_usbserialv>
   b9ab4:	4284      	cmp	r4, r0
   b9ab6:	d010      	beq.n	b9ada <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9ab8:	f002 f8ae 	bl	bbc18 <_Z22__fetch_global_Serial1v>
   b9abc:	4284      	cmp	r4, r0
   b9abe:	d105      	bne.n	b9acc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9ac0:	f002 f8aa 	bl	bbc18 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9ac8:	f001 be51 	b.w	bb76e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9acc:	b12c      	cbz	r4, b9ada <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b9ace:	6823      	ldr	r3, [r4, #0]
   b9ad0:	4620      	mov	r0, r4
   b9ad2:	685b      	ldr	r3, [r3, #4]
}
   b9ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9ad8:	4718      	bx	r3
   b9ada:	bd10      	pop	{r4, pc}

000b9adc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9adc:	680b      	ldr	r3, [r1, #0]
   b9ade:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9ae0:	684b      	ldr	r3, [r1, #4]
   b9ae2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9ae4:	b113      	cbz	r3, b9aec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9ae6:	685a      	ldr	r2, [r3, #4]
   b9ae8:	3201      	adds	r2, #1
   b9aea:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9aec:	4770      	bx	lr

000b9aee <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9aee:	b513      	push	{r0, r1, r4, lr}
   b9af0:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9af2:	4608      	mov	r0, r1
   b9af4:	9101      	str	r1, [sp, #4]
   b9af6:	f003 ff5c 	bl	bd9b2 <strlen>
   b9afa:	9901      	ldr	r1, [sp, #4]
   b9afc:	4602      	mov	r2, r0
   b9afe:	4620      	mov	r0, r4
}
   b9b00:	b002      	add	sp, #8
   b9b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9b06:	f7ff bf59 	b.w	b99bc <_ZN5spark10JSONWriter5valueEPKcj>

000b9b0a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9b0a:	b513      	push	{r0, r1, r4, lr}
   b9b0c:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9b0e:	4608      	mov	r0, r1
   b9b10:	9101      	str	r1, [sp, #4]
   b9b12:	f003 ff4e 	bl	bd9b2 <strlen>
   b9b16:	6823      	ldr	r3, [r4, #0]
   b9b18:	9901      	ldr	r1, [sp, #4]
   b9b1a:	68db      	ldr	r3, [r3, #12]
   b9b1c:	4602      	mov	r2, r0
   b9b1e:	4620      	mov	r0, r4
}
   b9b20:	b002      	add	sp, #8
   b9b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9b26:	4718      	bx	r3

000b9b28 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9b28:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9b2a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9b2c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9b30:	68db      	ldr	r3, [r3, #12]
   b9b32:	2201      	movs	r2, #1
   b9b34:	f10d 0107 	add.w	r1, sp, #7
   b9b38:	4798      	blx	r3
}
   b9b3a:	b003      	add	sp, #12
   b9b3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9b40 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9b40:	b40e      	push	{r1, r2, r3}
   b9b42:	b503      	push	{r0, r1, lr}
   b9b44:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b9b46:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9b48:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9b4c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b9b4e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b9b50:	f001 f975 	bl	bae3e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9b54:	b002      	add	sp, #8
   b9b56:	f85d eb04 	ldr.w	lr, [sp], #4
   b9b5a:	b003      	add	sp, #12
   b9b5c:	4770      	bx	lr

000b9b5e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9b5e:	680a      	ldr	r2, [r1, #0]
   b9b60:	6002      	str	r2, [r0, #0]
   b9b62:	684a      	ldr	r2, [r1, #4]
   b9b64:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b9b66:	2200      	movs	r2, #0
   b9b68:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9b6c:	b510      	push	{r4, lr}
   b9b6e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9b70:	688c      	ldr	r4, [r1, #8]
   b9b72:	6084      	str	r4, [r0, #8]
   b9b74:	68cc      	ldr	r4, [r1, #12]
   b9b76:	60c4      	str	r4, [r0, #12]
   b9b78:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9b7a:	608a      	str	r2, [r1, #8]
   b9b7c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9b7e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9b80:	610a      	str	r2, [r1, #16]
   b9b82:	bd10      	pop	{r4, pc}

000b9b84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9b88:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9b8c:	f04f 0a14 	mov.w	sl, #20
   b9b90:	9300      	str	r3, [sp, #0]
   b9b92:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9b96:	4b18      	ldr	r3, [pc, #96]	; (b9bf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9b98:	10a4      	asrs	r4, r4, #2
   b9b9a:	4617      	mov	r7, r2
   b9b9c:	435c      	muls	r4, r3
   b9b9e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9ba0:	2c00      	cmp	r4, #0
   b9ba2:	dd21      	ble.n	b9be8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9ba4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9ba6:	fb0a f006 	mul.w	r0, sl, r6
   b9baa:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9bae:	463a      	mov	r2, r7
   b9bb0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9bb4:	5828      	ldr	r0, [r5, r0]
   b9bb6:	9101      	str	r1, [sp, #4]
   b9bb8:	455f      	cmp	r7, fp
   b9bba:	bf28      	it	cs
   b9bbc:	465a      	movcs	r2, fp
   b9bbe:	f003 ff00 	bl	bd9c2 <strncmp>
                if (cmp == 0) {
   b9bc2:	2800      	cmp	r0, #0
   b9bc4:	9901      	ldr	r1, [sp, #4]
   b9bc6:	f04f 0301 	mov.w	r3, #1
   b9bca:	d10b      	bne.n	b9be4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9bcc:	455f      	cmp	r7, fp
   b9bce:	d103      	bne.n	b9bd8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b9bd0:	9a00      	ldr	r2, [sp, #0]
   b9bd2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9bd4:	4634      	mov	r4, r6
   b9bd6:	e7e3      	b.n	b9ba0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9bd8:	d9fc      	bls.n	b9bd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9bda:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9bdc:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9be0:	3e01      	subs	r6, #1
   b9be2:	e7f7      	b.n	b9bd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9be4:	dbf9      	blt.n	b9bda <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9be6:	e7f5      	b.n	b9bd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9be8:	eba5 0508 	sub.w	r5, r5, r8
}
   b9bec:	4802      	ldr	r0, [pc, #8]	; (b9bf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9bee:	10ad      	asrs	r5, r5, #2
   b9bf0:	4368      	muls	r0, r5
   b9bf2:	b003      	add	sp, #12
   b9bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9bf8:	cccccccd 	.word	0xcccccccd

000b9bfc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9bfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9bfe:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9c00:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9c02:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9c04:	b303      	cbz	r3, b9c48 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9c06:	b1f9      	cbz	r1, b9c48 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9c08:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9c0a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9c0e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9c10:	a903      	add	r1, sp, #12
   b9c12:	a801      	add	r0, sp, #4
   b9c14:	f7ff ff19 	bl	b9a4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9c18:	4601      	mov	r1, r0
   b9c1a:	b1a8      	cbz	r0, b9c48 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9c1c:	f10d 030b 	add.w	r3, sp, #11
   b9c20:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9c22:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9c26:	4620      	mov	r0, r4
   b9c28:	f7ff ffac 	bl	b9b84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9c2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9c30:	b153      	cbz	r3, b9c48 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9c32:	6823      	ldr	r3, [r4, #0]
   b9c34:	2414      	movs	r4, #20
   b9c36:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9c3a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9c3c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9c40:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9c42:	bfa8      	it	ge
   b9c44:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9c46:	e7e3      	b.n	b9c10 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9c48:	4628      	mov	r0, r5
   b9c4a:	b004      	add	sp, #16
   b9c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9c50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9c50:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9c52:	4c09      	ldr	r4, [pc, #36]	; (b9c78 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9c54:	7823      	ldrb	r3, [r4, #0]
   b9c56:	f3bf 8f5b 	dmb	ish
   b9c5a:	07db      	lsls	r3, r3, #31
   b9c5c:	d409      	bmi.n	b9c72 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9c5e:	4620      	mov	r0, r4
   b9c60:	f7fa fa2c 	bl	b40bc <__cxa_guard_acquire>
   b9c64:	b128      	cbz	r0, b9c72 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9c66:	4620      	mov	r0, r4
   b9c68:	f7fa fa2d 	bl	b40c6 <__cxa_guard_release>
   b9c6c:	4803      	ldr	r0, [pc, #12]	; (b9c7c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9c6e:	f003 fdaf 	bl	bd7d0 <atexit>
}
   b9c72:	4803      	ldr	r0, [pc, #12]	; (b9c80 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9c74:	bd10      	pop	{r4, pc}
   b9c76:	bf00      	nop
   b9c78:	2003e64c 	.word	0x2003e64c
   b9c7c:	000b9a43 	.word	0x000b9a43
   b9c80:	2003dec0 	.word	0x2003dec0

000b9c84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9c84:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9c86:	4c09      	ldr	r4, [pc, #36]	; (b9cac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9c88:	7823      	ldrb	r3, [r4, #0]
   b9c8a:	f3bf 8f5b 	dmb	ish
   b9c8e:	07db      	lsls	r3, r3, #31
   b9c90:	d409      	bmi.n	b9ca6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9c92:	4620      	mov	r0, r4
   b9c94:	f7fa fa12 	bl	b40bc <__cxa_guard_acquire>
   b9c98:	b128      	cbz	r0, b9ca6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9c9a:	4620      	mov	r0, r4
   b9c9c:	f7fa fa13 	bl	b40c6 <__cxa_guard_release>
   b9ca0:	4803      	ldr	r0, [pc, #12]	; (b9cb0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9ca2:	f003 fd95 	bl	bd7d0 <atexit>
    return &factory;
}
   b9ca6:	4803      	ldr	r0, [pc, #12]	; (b9cb4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9ca8:	bd10      	pop	{r4, pc}
   b9caa:	bf00      	nop
   b9cac:	2003e650 	.word	0x2003e650
   b9cb0:	000b9aab 	.word	0x000b9aab
   b9cb4:	2003dec4 	.word	0x2003dec4

000b9cb8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9cb8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9cba:	2500      	movs	r5, #0
   b9cbc:	4604      	mov	r4, r0
   b9cbe:	e9c0 5500 	strd	r5, r5, [r0]
   b9cc2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9cc6:	6085      	str	r5, [r0, #8]
   b9cc8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9cca:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b9cce:	f7fe fd9b 	bl	b8808 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b9cd2:	f7ff ffbd 	bl	b9c50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9cd6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9cd8:	f7ff ffd4 	bl	b9c84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9cdc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9cde:	6220      	str	r0, [r4, #32]
}
   b9ce0:	4620      	mov	r0, r4
   b9ce2:	bd38      	pop	{r3, r4, r5, pc}

000b9ce4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9ce4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9ce6:	4c0a      	ldr	r4, [pc, #40]	; (b9d10 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9ce8:	7823      	ldrb	r3, [r4, #0]
   b9cea:	f3bf 8f5b 	dmb	ish
   b9cee:	07db      	lsls	r3, r3, #31
   b9cf0:	d40c      	bmi.n	b9d0c <_ZN5spark10LogManager8instanceEv+0x28>
   b9cf2:	4620      	mov	r0, r4
   b9cf4:	f7fa f9e2 	bl	b40bc <__cxa_guard_acquire>
   b9cf8:	b140      	cbz	r0, b9d0c <_ZN5spark10LogManager8instanceEv+0x28>
   b9cfa:	4806      	ldr	r0, [pc, #24]	; (b9d14 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9cfc:	f7ff ffdc 	bl	b9cb8 <_ZN5spark10LogManagerC1Ev>
   b9d00:	4620      	mov	r0, r4
   b9d02:	f7fa f9e0 	bl	b40c6 <__cxa_guard_release>
   b9d06:	4804      	ldr	r0, [pc, #16]	; (b9d18 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9d08:	f003 fd62 	bl	bd7d0 <atexit>
    return &mgr;
}
   b9d0c:	4801      	ldr	r0, [pc, #4]	; (b9d14 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9d0e:	bd10      	pop	{r4, pc}
   b9d10:	2003e648 	.word	0x2003e648
   b9d14:	2003e658 	.word	0x2003e658
   b9d18:	000ba239 	.word	0x000ba239

000b9d1c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9d1c:	4a02      	ldr	r2, [pc, #8]	; (b9d28 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9d1e:	4903      	ldr	r1, [pc, #12]	; (b9d2c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9d20:	4803      	ldr	r0, [pc, #12]	; (b9d30 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9d22:	2300      	movs	r3, #0
   b9d24:	f7fe bfa0 	b.w	b8c68 <log_set_callbacks>
   b9d28:	000ba01d 	.word	0x000ba01d
   b9d2c:	000b9fa9 	.word	0x000b9fa9
   b9d30:	000b9f29 	.word	0x000b9f29

000b9d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9d34:	2300      	movs	r3, #0
   b9d36:	461a      	mov	r2, r3
   b9d38:	4619      	mov	r1, r3
   b9d3a:	4618      	mov	r0, r3
   b9d3c:	f7fe bf94 	b.w	b8c68 <log_set_callbacks>

000b9d40 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9d42:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9d44:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9d46:	4668      	mov	r0, sp
   b9d48:	f7ff fec8 	bl	b9adc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9d4c:	466a      	mov	r2, sp
   b9d4e:	4629      	mov	r1, r5
   b9d50:	4620      	mov	r0, r4
   b9d52:	f7ff fd53 	bl	b97fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9d56:	a801      	add	r0, sp, #4
   b9d58:	f7ff f951 	bl	b8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9d5c:	4620      	mov	r0, r4
   b9d5e:	b003      	add	sp, #12
   b9d60:	bd30      	pop	{r4, r5, pc}

000b9d62 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9d64:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9d66:	4604      	mov	r4, r0
   b9d68:	4668      	mov	r0, sp
   b9d6a:	f7ff feb7 	bl	b9adc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9d6e:	466a      	mov	r2, sp
   b9d70:	4629      	mov	r1, r5
   b9d72:	4620      	mov	r0, r4
   b9d74:	f7ff fd1e 	bl	b97b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9d78:	a801      	add	r0, sp, #4
   b9d7a:	f7ff f940 	bl	b8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9d7e:	4620      	mov	r0, r4
   b9d80:	b003      	add	sp, #12
   b9d82:	bd30      	pop	{r4, r5, pc}

000b9d84 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9d86:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9d88:	4604      	mov	r4, r0
   b9d8a:	4668      	mov	r0, sp
   b9d8c:	f7ff fea6 	bl	b9adc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9d90:	466a      	mov	r2, sp
   b9d92:	4629      	mov	r1, r5
   b9d94:	4620      	mov	r0, r4
   b9d96:	f7ff fcb6 	bl	b9706 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9d9a:	a801      	add	r0, sp, #4
   b9d9c:	f7ff f92f 	bl	b8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9da0:	4620      	mov	r0, r4
   b9da2:	b003      	add	sp, #12
   b9da4:	bd30      	pop	{r4, r5, pc}
	...

000b9da8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9da8:	b570      	push	{r4, r5, r6, lr}
   b9daa:	b08a      	sub	sp, #40	; 0x28
   b9dac:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9dae:	4601      	mov	r1, r0
   b9db0:	a804      	add	r0, sp, #16
   b9db2:	f7ff ffc5 	bl	b9d40 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9db6:	4e14      	ldr	r6, [pc, #80]	; (b9e08 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9db8:	a804      	add	r0, sp, #16
   b9dba:	f7ff fd37 	bl	b982c <_ZN5spark18JSONObjectIterator4nextEv>
   b9dbe:	b1e8      	cbz	r0, b9dfc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9dc0:	a904      	add	r1, sp, #16
   b9dc2:	4668      	mov	r0, sp
   b9dc4:	f7ff ffcd 	bl	b9d62 <_ZNK5spark18JSONObjectIterator4nameEv>
   b9dc8:	9802      	ldr	r0, [sp, #8]
   b9dca:	4631      	mov	r1, r6
   b9dcc:	f7ff fe66 	bl	b9a9c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9dd0:	4604      	mov	r4, r0
   b9dd2:	b110      	cbz	r0, b9dda <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9dd4:	1e2c      	subs	r4, r5, #0
   b9dd6:	bf18      	it	ne
   b9dd8:	2401      	movne	r4, #1
   b9dda:	a801      	add	r0, sp, #4
   b9ddc:	f7ff f90f 	bl	b8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9de0:	2c00      	cmp	r4, #0
   b9de2:	d0e9      	beq.n	b9db8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9de4:	a904      	add	r1, sp, #16
   b9de6:	4668      	mov	r0, sp
   b9de8:	f7ff ffcc 	bl	b9d84 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9dec:	4668      	mov	r0, sp
   b9dee:	f7ff fcc0 	bl	b9772 <_ZNK5spark9JSONValue5toIntEv>
   b9df2:	6028      	str	r0, [r5, #0]
   b9df4:	a801      	add	r0, sp, #4
   b9df6:	f7ff f902 	bl	b8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9dfa:	e7dd      	b.n	b9db8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9dfc:	a805      	add	r0, sp, #20
   b9dfe:	f7ff f8fe 	bl	b8ffe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e02:	b00a      	add	sp, #40	; 0x28
   b9e04:	bd70      	pop	{r4, r5, r6, pc}
   b9e06:	bf00      	nop
   b9e08:	000bedde 	.word	0x000bedde

000b9e0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9e0e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9e10:	4620      	mov	r0, r4
   b9e12:	4913      	ldr	r1, [pc, #76]	; (b9e60 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9e14:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9e16:	f003 fdba 	bl	bd98e <strcmp>
   b9e1a:	b950      	cbnz	r0, b9e32 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9e1c:	f001 fd0e 	bl	bb83c <_Z16_fetch_usbserialv>
   b9e20:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9e24:	f001 fcf8 	bl	bb818 <_ZN9USBSerial5beginEl>
}
   b9e28:	b003      	add	sp, #12
   b9e2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9e2e:	f001 bd05 	b.w	bb83c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9e32:	490c      	ldr	r1, [pc, #48]	; (b9e64 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9e34:	4620      	mov	r0, r4
   b9e36:	f003 fdaa 	bl	bd98e <strcmp>
   b9e3a:	b978      	cbnz	r0, b9e5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9e3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9e40:	a901      	add	r1, sp, #4
   b9e42:	4628      	mov	r0, r5
        int baud = 9600;
   b9e44:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9e46:	f7ff ffaf 	bl	b9da8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9e4a:	f001 fee5 	bl	bbc18 <_Z22__fetch_global_Serial1v>
   b9e4e:	9901      	ldr	r1, [sp, #4]
   b9e50:	f001 fc8a 	bl	bb768 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9e54:	f001 fee0 	bl	bbc18 <_Z22__fetch_global_Serial1v>
}
   b9e58:	b003      	add	sp, #12
   b9e5a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9e5c:	2000      	movs	r0, #0
   b9e5e:	e7fb      	b.n	b9e58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9e60:	000bede3 	.word	0x000bede3
   b9e64:	000bedea 	.word	0x000bedea

000b9e68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e68:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9e6a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9e6e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e70:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9e72:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9e76:	42ae      	cmp	r6, r5
   b9e78:	d005      	beq.n	b9e86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b9e7a:	f105 0008 	add.w	r0, r5, #8
   b9e7e:	f7ff fff3 	bl	b9e68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9e82:	3514      	adds	r5, #20
   b9e84:	e7f7      	b.n	b9e76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b9e86:	6820      	ldr	r0, [r4, #0]
   b9e88:	f7ff f81c 	bl	b8ec4 <free>
}
   b9e8c:	4620      	mov	r0, r4
   b9e8e:	bd70      	pop	{r4, r5, r6, pc}

000b9e90 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9e90:	b510      	push	{r4, lr}
   b9e92:	4604      	mov	r4, r0
   b9e94:	300c      	adds	r0, #12
   b9e96:	f7ff ffe7 	bl	b9e68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9e9a:	4620      	mov	r0, r4
   b9e9c:	f7ff f89d 	bl	b8fda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9ea0:	4620      	mov	r0, r4
   b9ea2:	bd10      	pop	{r4, pc}

000b9ea4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9ea4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b9ea6:	4b04      	ldr	r3, [pc, #16]	; (b9eb8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b9ea8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b9eaa:	f840 3b04 	str.w	r3, [r0], #4
   b9eae:	f7ff ffef 	bl	b9e90 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9eb2:	4620      	mov	r0, r4
   b9eb4:	bd10      	pop	{r4, pc}
   b9eb6:	bf00      	nop
   b9eb8:	000be030 	.word	0x000be030

000b9ebc <_ZN5spark16StreamLogHandlerD0Ev>:
   b9ebc:	b510      	push	{r4, lr}
   b9ebe:	4604      	mov	r4, r0
   b9ec0:	f7ff fff0 	bl	b9ea4 <_ZN5spark16StreamLogHandlerD1Ev>
   b9ec4:	4620      	mov	r0, r4
   b9ec6:	2124      	movs	r1, #36	; 0x24
   b9ec8:	f7fa f8e9 	bl	b409e <_ZdlPvj>
   b9ecc:	4620      	mov	r0, r4
   b9ece:	bd10      	pop	{r4, pc}

000b9ed0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b9ed0:	b510      	push	{r4, lr}
   b9ed2:	4b03      	ldr	r3, [pc, #12]	; (b9ee0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9ed4:	6003      	str	r3, [r0, #0]
   b9ed6:	4604      	mov	r4, r0
   b9ed8:	f7ff ffe4 	bl	b9ea4 <_ZN5spark16StreamLogHandlerD1Ev>
   b9edc:	4620      	mov	r0, r4
   b9ede:	bd10      	pop	{r4, pc}
   b9ee0:	000bee84 	.word	0x000bee84

000b9ee4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9ee4:	b510      	push	{r4, lr}
   b9ee6:	4604      	mov	r4, r0
   b9ee8:	f7ff fff2 	bl	b9ed0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9eec:	4620      	mov	r0, r4
   b9eee:	2124      	movs	r1, #36	; 0x24
   b9ef0:	f7fa f8d5 	bl	b409e <_ZdlPvj>
   b9ef4:	4620      	mov	r0, r4
   b9ef6:	bd10      	pop	{r4, pc}

000b9ef8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b9ef8:	2200      	movs	r2, #0
   b9efa:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9efe:	b510      	push	{r4, lr}
        capacity_(0) {
   b9f00:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9f02:	680c      	ldr	r4, [r1, #0]
   b9f04:	6004      	str	r4, [r0, #0]
   b9f06:	684c      	ldr	r4, [r1, #4]
   b9f08:	6044      	str	r4, [r0, #4]
   b9f0a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9f0c:	600a      	str	r2, [r1, #0]
   b9f0e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9f10:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9f12:	608a      	str	r2, [r1, #8]
}
   b9f14:	bd10      	pop	{r4, pc}

000b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b9f16:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9f18:	6803      	ldr	r3, [r0, #0]
   b9f1a:	4604      	mov	r4, r0
   b9f1c:	6818      	ldr	r0, [r3, #0]
   b9f1e:	f7fe fc8b 	bl	b8838 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9f22:	4620      	mov	r0, r4
   b9f24:	bd10      	pop	{r4, pc}
	...

000b9f28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f2c:	b087      	sub	sp, #28
   b9f2e:	4680      	mov	r8, r0
   b9f30:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9f32:	4b1c      	ldr	r3, [pc, #112]	; (b9fa4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9f34:	685b      	ldr	r3, [r3, #4]
   b9f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9f3a:	4689      	mov	r9, r1
   b9f3c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9f3e:	b96b      	cbnz	r3, b9f5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9f40:	f7ff fed0 	bl	b9ce4 <_ZN5spark10LogManager8instanceEv>
   b9f44:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9f46:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9f4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9f4c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9f4e:	f7ff fda3 	bl	b9a98 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9f52:	7b23      	ldrb	r3, [r4, #12]
   b9f54:	b12b      	cbz	r3, b9f62 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9f56:	a805      	add	r0, sp, #20
   b9f58:	f7ff ffdd 	bl	b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9f5c:	b007      	add	sp, #28
   b9f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9f62:	2301      	movs	r3, #1
   b9f64:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9f66:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9f6a:	fa5f f989 	uxtb.w	r9, r9
   b9f6e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9f72:	45aa      	cmp	sl, r5
   b9f74:	d012      	beq.n	b9f9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9f76:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9f7a:	4631      	mov	r1, r6
   b9f7c:	1d38      	adds	r0, r7, #4
   b9f7e:	f7ff fe3d 	bl	b9bfc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9f82:	4581      	cmp	r9, r0
   b9f84:	d3f5      	bcc.n	b9f72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9f86:	683b      	ldr	r3, [r7, #0]
   b9f88:	9a03      	ldr	r2, [sp, #12]
   b9f8a:	9200      	str	r2, [sp, #0]
   b9f8c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9f90:	464a      	mov	r2, r9
   b9f92:	4633      	mov	r3, r6
   b9f94:	4641      	mov	r1, r8
   b9f96:	4638      	mov	r0, r7
   b9f98:	47d8      	blx	fp
   b9f9a:	e7ea      	b.n	b9f72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9f9c:	2300      	movs	r3, #0
   b9f9e:	7323      	strb	r3, [r4, #12]
   b9fa0:	e7d9      	b.n	b9f56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9fa2:	bf00      	nop
   b9fa4:	e000ed00 	.word	0xe000ed00

000b9fa8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9fac:	469b      	mov	fp, r3
   b9fae:	4b1a      	ldr	r3, [pc, #104]	; (ba018 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9fb0:	685b      	ldr	r3, [r3, #4]
   b9fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9fb6:	4680      	mov	r8, r0
   b9fb8:	4689      	mov	r9, r1
   b9fba:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9fbc:	b96b      	cbnz	r3, b9fda <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9fbe:	f7ff fe91 	bl	b9ce4 <_ZN5spark10LogManager8instanceEv>
   b9fc2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9fc4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9fc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9fca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9fcc:	f7ff fd64 	bl	b9a98 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9fd0:	7b23      	ldrb	r3, [r4, #12]
   b9fd2:	b12b      	cbz	r3, b9fe0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9fd4:	a801      	add	r0, sp, #4
   b9fd6:	f7ff ff9e 	bl	b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9fda:	b003      	add	sp, #12
   b9fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9fe0:	2301      	movs	r3, #1
   b9fe2:	7323      	strb	r3, [r4, #12]
   b9fe4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9fe8:	b2f6      	uxtb	r6, r6
   b9fea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9fee:	4555      	cmp	r5, sl
   b9ff0:	d00e      	beq.n	ba010 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9ff2:	f855 7b04 	ldr.w	r7, [r5], #4
   b9ff6:	4659      	mov	r1, fp
   b9ff8:	1d38      	adds	r0, r7, #4
   b9ffa:	f7ff fdff 	bl	b9bfc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9ffe:	4286      	cmp	r6, r0
   ba000:	d3f5      	bcc.n	b9fee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ba002:	683b      	ldr	r3, [r7, #0]
   ba004:	464a      	mov	r2, r9
   ba006:	68db      	ldr	r3, [r3, #12]
   ba008:	4641      	mov	r1, r8
   ba00a:	4638      	mov	r0, r7
   ba00c:	4798      	blx	r3
   ba00e:	e7ee      	b.n	b9fee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ba010:	2300      	movs	r3, #0
   ba012:	7323      	strb	r3, [r4, #12]
   ba014:	e7de      	b.n	b9fd4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ba016:	bf00      	nop
   ba018:	e000ed00 	.word	0xe000ed00

000ba01c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ba01c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba020:	4b16      	ldr	r3, [pc, #88]	; (ba07c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ba022:	685b      	ldr	r3, [r3, #4]
   ba024:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba028:	4605      	mov	r5, r0
   ba02a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ba02c:	bb1b      	cbnz	r3, ba076 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ba02e:	f7ff fe59 	bl	b9ce4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ba032:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ba036:	4604      	mov	r4, r0
   ba038:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba03a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba03c:	f7ff fd2c 	bl	b9a98 <_ZN14RecursiveMutex4lockEv.isra.0>
   ba040:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ba044:	2446      	movs	r4, #70	; 0x46
   ba046:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba04a:	45b0      	cmp	r8, r6
   ba04c:	d109      	bne.n	ba062 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ba04e:	a801      	add	r0, sp, #4
   ba050:	f7ff ff61 	bl	b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ba054:	42a5      	cmp	r5, r4
   ba056:	bfb4      	ite	lt
   ba058:	2000      	movlt	r0, #0
   ba05a:	2001      	movge	r0, #1
}
   ba05c:	b002      	add	sp, #8
   ba05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ba062:	f856 0b04 	ldr.w	r0, [r6], #4
   ba066:	4639      	mov	r1, r7
   ba068:	3004      	adds	r0, #4
   ba06a:	f7ff fdc7 	bl	b9bfc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ba06e:	4284      	cmp	r4, r0
   ba070:	bfa8      	it	ge
   ba072:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ba074:	e7e9      	b.n	ba04a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ba076:	2000      	movs	r0, #0
   ba078:	e7f0      	b.n	ba05c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ba07a:	bf00      	nop
   ba07c:	e000ed00 	.word	0xe000ed00

000ba080 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba082:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   ba086:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba088:	4604      	mov	r4, r0
   ba08a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba08c:	db0d      	blt.n	ba0aa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   ba08e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   ba090:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba092:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba094:	dd04      	ble.n	ba0a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   ba096:	00b9      	lsls	r1, r7, #2
   ba098:	f7fe ff1c 	bl	b8ed4 <realloc>
            if (!d) {
   ba09c:	b918      	cbnz	r0, ba0a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   ba09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ba0a0:	f7fe ff10 	bl	b8ec4 <free>
        T* d = nullptr;
   ba0a4:	2000      	movs	r0, #0
        data_ = d;
   ba0a6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba0a8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba0aa:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba0ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba0ae:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   ba0b2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba0b4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   ba0b8:	1d08      	adds	r0, r1, #4
   ba0ba:	f003 fbc3 	bl	bd844 <memmove>
    new(p) T(std::move(value));
   ba0be:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   ba0c2:	6863      	ldr	r3, [r4, #4]
   ba0c4:	3301      	adds	r3, #1
   ba0c6:	6063      	str	r3, [r4, #4]
    return true;
   ba0c8:	2001      	movs	r0, #1
   ba0ca:	e7e8      	b.n	ba09e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000ba0cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ba0ce:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba0d2:	4604      	mov	r4, r0
   ba0d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba0d6:	9301      	str	r3, [sp, #4]
   ba0d8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   ba0da:	f7ff fcdd 	bl	b9a98 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   ba0de:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba0e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   ba0e6:	4293      	cmp	r3, r2
   ba0e8:	4619      	mov	r1, r3
   ba0ea:	d00b      	beq.n	ba104 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ba0ec:	6809      	ldr	r1, [r1, #0]
   ba0ee:	42a9      	cmp	r1, r5
   ba0f0:	f103 0304 	add.w	r3, r3, #4
   ba0f4:	d1f7      	bne.n	ba0e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   ba0f6:	a801      	add	r0, sp, #4
   ba0f8:	f7ff ff0d 	bl	b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba0fc:	2500      	movs	r5, #0
}
   ba0fe:	4628      	mov	r0, r5
   ba100:	b003      	add	sp, #12
   ba102:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ba104:	4629      	mov	r1, r5
   ba106:	4620      	mov	r0, r4
   ba108:	f7ff ffba 	bl	ba080 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   ba10c:	4605      	mov	r5, r0
   ba10e:	2800      	cmp	r0, #0
   ba110:	d0f1      	beq.n	ba0f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ba112:	6863      	ldr	r3, [r4, #4]
   ba114:	2b01      	cmp	r3, #1
   ba116:	d101      	bne.n	ba11c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ba118:	f7ff fe00 	bl	b9d1c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba11c:	a801      	add	r0, sp, #4
   ba11e:	f7ff fefa 	bl	b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba122:	e7ec      	b.n	ba0fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ba124 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba124:	b570      	push	{r4, r5, r6, lr}
   ba126:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ba128:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba12c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ba12e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ba132:	4282      	cmp	r2, r0
   ba134:	d00f      	beq.n	ba156 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   ba136:	4601      	mov	r1, r0
            if (*p == value) {
   ba138:	681d      	ldr	r5, [r3, #0]
   ba13a:	f851 6b04 	ldr.w	r6, [r1], #4
   ba13e:	42ae      	cmp	r6, r5
   ba140:	d107      	bne.n	ba152 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba142:	1a52      	subs	r2, r2, r1
   ba144:	f003 fb7e 	bl	bd844 <memmove>
    --size_;
   ba148:	6863      	ldr	r3, [r4, #4]
   ba14a:	3b01      	subs	r3, #1
   ba14c:	6063      	str	r3, [r4, #4]
    return true;
   ba14e:	2001      	movs	r0, #1
}
   ba150:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   ba152:	4608      	mov	r0, r1
   ba154:	e7ed      	b.n	ba132 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ba156:	2000      	movs	r0, #0
   ba158:	e7fa      	b.n	ba150 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000ba15a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba15a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ba15c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba160:	4604      	mov	r4, r0
   ba162:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba164:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba166:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   ba168:	f7ff fc96 	bl	b9a98 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ba16c:	a901      	add	r1, sp, #4
   ba16e:	4620      	mov	r0, r4
   ba170:	f7ff ffd8 	bl	ba124 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ba174:	b118      	cbz	r0, ba17e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ba176:	6863      	ldr	r3, [r4, #4]
   ba178:	b90b      	cbnz	r3, ba17e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ba17a:	f7ff fddb 	bl	b9d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba17e:	a803      	add	r0, sp, #12
   ba180:	f7ff fec9 	bl	b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba184:	b004      	add	sp, #16
   ba186:	bd10      	pop	{r4, pc}

000ba188 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba188:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba18a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba18e:	2318      	movs	r3, #24
   ba190:	4604      	mov	r4, r0
   ba192:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba196:	42ae      	cmp	r6, r5
   ba198:	d015      	beq.n	ba1c6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba19a:	f105 0110 	add.w	r1, r5, #16
   ba19e:	4620      	mov	r0, r4
   ba1a0:	f7ff ffc0 	bl	ba124 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba1a4:	6863      	ldr	r3, [r4, #4]
   ba1a6:	b90b      	cbnz	r3, ba1ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba1a8:	f7ff fdc4 	bl	b9d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba1ac:	69e0      	ldr	r0, [r4, #28]
   ba1ae:	6929      	ldr	r1, [r5, #16]
   ba1b0:	6803      	ldr	r3, [r0, #0]
   ba1b2:	68db      	ldr	r3, [r3, #12]
   ba1b4:	4798      	blx	r3
        if (h.stream) {
   ba1b6:	6969      	ldr	r1, [r5, #20]
   ba1b8:	b119      	cbz	r1, ba1c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba1ba:	6a20      	ldr	r0, [r4, #32]
   ba1bc:	6803      	ldr	r3, [r0, #0]
   ba1be:	68db      	ldr	r3, [r3, #12]
   ba1c0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba1c2:	3518      	adds	r5, #24
   ba1c4:	e7e7      	b.n	ba196 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba1c6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba1ca:	2618      	movs	r6, #24
   ba1cc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba1d0:	42ae      	cmp	r6, r5
   ba1d2:	d004      	beq.n	ba1de <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba1d4:	4628      	mov	r0, r5
   ba1d6:	f000 ff47 	bl	bb068 <_ZN6StringD1Ev>
   ba1da:	3518      	adds	r5, #24
   ba1dc:	e7f8      	b.n	ba1d0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba1de:	2300      	movs	r3, #0
   ba1e0:	6163      	str	r3, [r4, #20]
}
   ba1e2:	bd70      	pop	{r4, r5, r6, pc}

000ba1e4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba1e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba1e6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba1e8:	f7ff fda4 	bl	b9d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba1ec:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba1f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba1f2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba1f4:	f7ff fc50 	bl	b9a98 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba1f8:	4620      	mov	r0, r4
   ba1fa:	f7ff ffc5 	bl	ba188 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba1fe:	a801      	add	r0, sp, #4
   ba200:	f7ff fe89 	bl	b9f16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba204:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba206:	b108      	cbz	r0, ba20c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba208:	f7fe fb06 	bl	b8818 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba20c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba210:	2618      	movs	r6, #24
   ba212:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba216:	42ae      	cmp	r6, r5
   ba218:	d004      	beq.n	ba224 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba21a:	4628      	mov	r0, r5
   ba21c:	f000 ff24 	bl	bb068 <_ZN6StringD1Ev>
   ba220:	3518      	adds	r5, #24
   ba222:	e7f8      	b.n	ba216 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba224:	6920      	ldr	r0, [r4, #16]
   ba226:	f7fe fe4d 	bl	b8ec4 <free>
   ba22a:	6820      	ldr	r0, [r4, #0]
   ba22c:	f7fe fe4a 	bl	b8ec4 <free>
}
   ba230:	4620      	mov	r0, r4
   ba232:	b002      	add	sp, #8
   ba234:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba238 <__tcf_2>:
    static LogManager mgr;
   ba238:	4801      	ldr	r0, [pc, #4]	; (ba240 <__tcf_2+0x8>)
   ba23a:	f7ff bfd3 	b.w	ba1e4 <_ZN5spark10LogManagerD1Ev>
   ba23e:	bf00      	nop
   ba240:	2003e658 	.word	0x2003e658

000ba244 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba244:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba248:	4604      	mov	r4, r0
   ba24a:	460d      	mov	r5, r1
   ba24c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba24e:	d915      	bls.n	ba27c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba250:	4290      	cmp	r0, r2
   ba252:	d214      	bcs.n	ba27e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba254:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba258:	1a75      	subs	r5, r6, r1
   ba25a:	f1a1 0714 	sub.w	r7, r1, #20
   ba25e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba260:	42b7      	cmp	r7, r6
   ba262:	d01a      	beq.n	ba29a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba264:	b11c      	cbz	r4, ba26e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba266:	4631      	mov	r1, r6
   ba268:	4620      	mov	r0, r4
   ba26a:	f7ff fc78 	bl	b9b5e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba26e:	f106 0008 	add.w	r0, r6, #8
   ba272:	f7ff fdf9 	bl	b9e68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba276:	3e14      	subs	r6, #20
   ba278:	3c14      	subs	r4, #20
   ba27a:	e7f1      	b.n	ba260 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba27c:	d00d      	beq.n	ba29a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba27e:	42b5      	cmp	r5, r6
   ba280:	d00b      	beq.n	ba29a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba282:	b11c      	cbz	r4, ba28c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba284:	4629      	mov	r1, r5
   ba286:	4620      	mov	r0, r4
   ba288:	f7ff fc69 	bl	b9b5e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba28c:	f105 0008 	add.w	r0, r5, #8
   ba290:	f7ff fdea 	bl	b9e68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba294:	3514      	adds	r5, #20
   ba296:	3414      	adds	r4, #20
   ba298:	e7f1      	b.n	ba27e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba29c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba29c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba2a0:	4604      	mov	r4, r0
   ba2a2:	460d      	mov	r5, r1
   ba2a4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba2a6:	d914      	bls.n	ba2d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba2a8:	4290      	cmp	r0, r2
   ba2aa:	d213      	bcs.n	ba2d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba2ac:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba2b0:	1a75      	subs	r5, r6, r1
   ba2b2:	f1a1 0710 	sub.w	r7, r1, #16
   ba2b6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba2b8:	42b7      	cmp	r7, r6
   ba2ba:	d018      	beq.n	ba2ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba2bc:	b11c      	cbz	r4, ba2c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba2be:	4631      	mov	r1, r6
   ba2c0:	4620      	mov	r0, r4
   ba2c2:	f000 ff4d 	bl	bb160 <_ZN6StringC1EOS_>
                end->~T();
   ba2c6:	4630      	mov	r0, r6
   ba2c8:	f000 fece 	bl	bb068 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba2cc:	3e10      	subs	r6, #16
   ba2ce:	3c10      	subs	r4, #16
   ba2d0:	e7f2      	b.n	ba2b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ba2d2:	d00c      	beq.n	ba2ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ba2d4:	42b5      	cmp	r5, r6
   ba2d6:	d00a      	beq.n	ba2ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ba2d8:	b11c      	cbz	r4, ba2e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ba2da:	4629      	mov	r1, r5
   ba2dc:	4620      	mov	r0, r4
   ba2de:	f000 ff3f 	bl	bb160 <_ZN6StringC1EOS_>
                p->~T();
   ba2e2:	4628      	mov	r0, r5
   ba2e4:	f000 fec0 	bl	bb068 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba2e8:	3510      	adds	r5, #16
   ba2ea:	3410      	adds	r4, #16
   ba2ec:	e7f2      	b.n	ba2d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ba2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba2f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ba2f0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba2f2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba2f4:	4605      	mov	r5, r0
        if (n > 0) {
   ba2f6:	dd11      	ble.n	ba31c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba2f8:	0130      	lsls	r0, r6, #4
   ba2fa:	f7fe fddb 	bl	b8eb4 <malloc>
            if (!d) {
   ba2fe:	4604      	mov	r4, r0
   ba300:	b158      	cbz	r0, ba31a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba302:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba306:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ba30a:	f7ff ffc7 	bl	ba29c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ba30e:	6828      	ldr	r0, [r5, #0]
   ba310:	f7fe fdd8 	bl	b8ec4 <free>
        data_ = d;
   ba314:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba316:	60ae      	str	r6, [r5, #8]
        return true;
   ba318:	2001      	movs	r0, #1
    }
   ba31a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba31c:	2400      	movs	r4, #0
   ba31e:	e7f6      	b.n	ba30e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ba320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba324:	4690      	mov	r8, r2
   ba326:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba328:	2300      	movs	r3, #0
   ba32a:	9103      	str	r1, [sp, #12]
    return size_;
   ba32c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba330:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba332:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba334:	4299      	cmp	r1, r3
        capacity_(0) {
   ba336:	e9c0 3300 	strd	r3, r3, [r0]
   ba33a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba33e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba342:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba346:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba348:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba34a:	dc23      	bgt.n	ba394 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba34c:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba350:	2314      	movs	r3, #20
   ba352:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba356:	42af      	cmp	r7, r5
   ba358:	d03b      	beq.n	ba3d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba35a:	4629      	mov	r1, r5
   ba35c:	a80b      	add	r0, sp, #44	; 0x2c
   ba35e:	f000 feff 	bl	bb160 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba362:	a90b      	add	r1, sp, #44	; 0x2c
   ba364:	a80f      	add	r0, sp, #60	; 0x3c
   ba366:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba368:	f000 fefa 	bl	bb160 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba36c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba370:	4299      	cmp	r1, r3
   ba372:	da1b      	bge.n	ba3ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba374:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba376:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba378:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba37c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba380:	4631      	mov	r1, r6
   ba382:	f106 0010 	add.w	r0, r6, #16
   ba386:	f7ff ff89 	bl	ba29c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba38a:	b9ee      	cbnz	r6, ba3c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba38e:	3301      	adds	r3, #1
   ba390:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba392:	e011      	b.n	ba3b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba394:	a808      	add	r0, sp, #32
   ba396:	f7ff ffab 	bl	ba2f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba39a:	2800      	cmp	r0, #0
   ba39c:	d1d6      	bne.n	ba34c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba39e:	a808      	add	r0, sp, #32
   ba3a0:	f7fe fe1b 	bl	b8fda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba3a4:	4620      	mov	r0, r4
   ba3a6:	b015      	add	sp, #84	; 0x54
   ba3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba3ac:	3101      	adds	r1, #1
   ba3ae:	a808      	add	r0, sp, #32
   ba3b0:	f7ff ff9e 	bl	ba2f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba3b4:	2800      	cmp	r0, #0
   ba3b6:	d1dd      	bne.n	ba374 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba3b8:	a80f      	add	r0, sp, #60	; 0x3c
   ba3ba:	f000 fe55 	bl	bb068 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba3be:	a80b      	add	r0, sp, #44	; 0x2c
   ba3c0:	f000 fe52 	bl	bb068 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba3c4:	3514      	adds	r5, #20
   ba3c6:	e7c6      	b.n	ba356 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba3c8:	a90f      	add	r1, sp, #60	; 0x3c
   ba3ca:	4630      	mov	r0, r6
   ba3cc:	f000 fec8 	bl	bb160 <_ZN6StringC1EOS_>
   ba3d0:	e7dc      	b.n	ba38c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba3d2:	2600      	movs	r6, #0
   ba3d4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba3d8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba3da:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba3de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba3e2:	429e      	cmp	r6, r3
   ba3e4:	da7c      	bge.n	ba4e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba3e6:	0133      	lsls	r3, r6, #4
   ba3e8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba3ea:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba3ec:	b90b      	cbnz	r3, ba3f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba3ee:	3601      	adds	r6, #1
   ba3f0:	e7f5      	b.n	ba3de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba3f2:	2300      	movs	r3, #0
   ba3f4:	9307      	str	r3, [sp, #28]
   ba3f6:	fb09 f306 	mul.w	r3, r9, r6
   ba3fa:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba3fc:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba3fe:	a907      	add	r1, sp, #28
   ba400:	a806      	add	r0, sp, #24
   ba402:	f7ff fb22 	bl	b9a4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba406:	4682      	mov	sl, r0
   ba408:	2800      	cmp	r0, #0
   ba40a:	d0f0      	beq.n	ba3ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba40c:	f04f 0300 	mov.w	r3, #0
   ba410:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba414:	4601      	mov	r1, r0
   ba416:	9a07      	ldr	r2, [sp, #28]
   ba418:	f10d 0317 	add.w	r3, sp, #23
   ba41c:	4628      	mov	r0, r5
   ba41e:	f7ff fbb1 	bl	b9b84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba422:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba426:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba428:	2f00      	cmp	r7, #0
   ba42a:	d14a      	bne.n	ba4c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba42c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba430:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba434:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba438:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba43c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba440:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba444:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba446:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba44a:	4293      	cmp	r3, r2
   ba44c:	db17      	blt.n	ba47e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba44e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba452:	f1ba 0f00 	cmp.w	sl, #0
   ba456:	dd30      	ble.n	ba4ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba458:	fb09 f00a 	mul.w	r0, r9, sl
   ba45c:	f7fe fd2a 	bl	b8eb4 <malloc>
            if (!d) {
   ba460:	4683      	mov	fp, r0
   ba462:	b360      	cbz	r0, ba4be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba464:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba468:	fb09 1202 	mla	r2, r9, r2, r1
   ba46c:	f7ff feea 	bl	ba244 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba470:	6828      	ldr	r0, [r5, #0]
   ba472:	f7fe fd27 	bl	b8ec4 <free>
        data_ = d;
   ba476:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba47a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba47e:	682b      	ldr	r3, [r5, #0]
   ba480:	9a01      	ldr	r2, [sp, #4]
   ba482:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba486:	686a      	ldr	r2, [r5, #4]
   ba488:	4651      	mov	r1, sl
   ba48a:	fb09 3202 	mla	r2, r9, r2, r3
   ba48e:	f10a 0014 	add.w	r0, sl, #20
   ba492:	f7ff fed7 	bl	ba244 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba496:	f1ba 0f00 	cmp.w	sl, #0
   ba49a:	d003      	beq.n	ba4a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba49c:	a90f      	add	r1, sp, #60	; 0x3c
   ba49e:	4650      	mov	r0, sl
   ba4a0:	f7ff fb5d 	bl	b9b5e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba4a4:	686b      	ldr	r3, [r5, #4]
   ba4a6:	3301      	adds	r3, #1
   ba4a8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba4aa:	a811      	add	r0, sp, #68	; 0x44
   ba4ac:	f7ff fcdc 	bl	b9e68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba4b0:	b13f      	cbz	r7, ba4c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba4b2:	a80b      	add	r0, sp, #44	; 0x2c
   ba4b4:	f7ff fcd8 	bl	b9e68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba4b8:	e771      	b.n	ba39e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba4ba:	46bb      	mov	fp, r7
   ba4bc:	e7d8      	b.n	ba470 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba4be:	2701      	movs	r7, #1
   ba4c0:	e7f3      	b.n	ba4aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba4c2:	9b01      	ldr	r3, [sp, #4]
   ba4c4:	682d      	ldr	r5, [r5, #0]
   ba4c6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba4ca:	9b06      	ldr	r3, [sp, #24]
   ba4cc:	781b      	ldrb	r3, [r3, #0]
   ba4ce:	b92b      	cbnz	r3, ba4dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba4d0:	f8d8 3000 	ldr.w	r3, [r8]
   ba4d4:	9a02      	ldr	r2, [sp, #8]
   ba4d6:	4413      	add	r3, r2
   ba4d8:	7c1b      	ldrb	r3, [r3, #16]
   ba4da:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba4dc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba4de:	e78e      	b.n	ba3fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4e0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba4e2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4e4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba4e6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4e8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba4ea:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba4ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba4ee:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4f0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba4f2:	60a2      	str	r2, [r4, #8]
   ba4f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba4f6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4f8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba4fa:	60e2      	str	r2, [r4, #12]
   ba4fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba4fe:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba500:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba502:	6122      	str	r2, [r4, #16]
   ba504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba506:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba508:	9b03      	ldr	r3, [sp, #12]
   ba50a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba50c:	6162      	str	r2, [r4, #20]
   ba50e:	7623      	strb	r3, [r4, #24]
   ba510:	e7cf      	b.n	ba4b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba514 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba514:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba516:	4604      	mov	r4, r0
   ba518:	b087      	sub	sp, #28
   ba51a:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba51c:	4626      	mov	r6, r4
        stream_(&stream) {
   ba51e:	4619      	mov	r1, r3
   ba520:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba522:	4617      	mov	r7, r2
        stream_(&stream) {
   ba524:	f7fa fc7d 	bl	b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba528:	4b0b      	ldr	r3, [pc, #44]	; (ba558 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba52a:	f846 3b04 	str.w	r3, [r6], #4
   ba52e:	4669      	mov	r1, sp
   ba530:	a803      	add	r0, sp, #12
   ba532:	f7fa fc76 	bl	b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba536:	aa03      	add	r2, sp, #12
   ba538:	4639      	mov	r1, r7
   ba53a:	4630      	mov	r0, r6
   ba53c:	f7ff fef0 	bl	ba320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba540:	a803      	add	r0, sp, #12
   ba542:	f7fa fc2d 	bl	b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba546:	4668      	mov	r0, sp
   ba548:	f7fa fc2a 	bl	b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba54c:	4b03      	ldr	r3, [pc, #12]	; (ba55c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba54e:	6023      	str	r3, [r4, #0]
}
   ba550:	4620      	mov	r0, r4
        stream_(&stream) {
   ba552:	6225      	str	r5, [r4, #32]
}
   ba554:	b007      	add	sp, #28
   ba556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba558:	000be030 	.word	0x000be030
   ba55c:	000bee6c 	.word	0x000bee6c

000ba560 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba560:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba562:	460f      	mov	r7, r1
   ba564:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba566:	491d      	ldr	r1, [pc, #116]	; (ba5dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba568:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba56a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba56c:	4616      	mov	r6, r2
   ba56e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba570:	f003 fa0d 	bl	bd98e <strcmp>
   ba574:	b9c0      	cbnz	r0, ba5a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba576:	b1a4      	cbz	r4, ba5a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba578:	4629      	mov	r1, r5
   ba57a:	a801      	add	r0, sp, #4
   ba57c:	f7ff fcbc 	bl	b9ef8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba580:	4917      	ldr	r1, [pc, #92]	; (ba5e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba582:	2024      	movs	r0, #36	; 0x24
   ba584:	f001 fb6c 	bl	bbc60 <_ZnwjRKSt9nothrow_t>
   ba588:	4605      	mov	r5, r0
   ba58a:	b130      	cbz	r0, ba59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba58c:	ab01      	add	r3, sp, #4
   ba58e:	4632      	mov	r2, r6
   ba590:	4621      	mov	r1, r4
   ba592:	f7ff ffbf 	bl	ba514 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba596:	4b13      	ldr	r3, [pc, #76]	; (ba5e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba598:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba59a:	a801      	add	r0, sp, #4
   ba59c:	f7fa fc00 	bl	b4da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba5a0:	462c      	mov	r4, r5
}
   ba5a2:	4620      	mov	r0, r4
   ba5a4:	b005      	add	sp, #20
   ba5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba5a8:	490f      	ldr	r1, [pc, #60]	; (ba5e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba5aa:	4638      	mov	r0, r7
   ba5ac:	f003 f9ef 	bl	bd98e <strcmp>
   ba5b0:	b990      	cbnz	r0, ba5d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba5b2:	2c00      	cmp	r4, #0
   ba5b4:	d0f5      	beq.n	ba5a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba5b6:	4629      	mov	r1, r5
   ba5b8:	a801      	add	r0, sp, #4
   ba5ba:	f7ff fc9d 	bl	b9ef8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba5be:	4908      	ldr	r1, [pc, #32]	; (ba5e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba5c0:	2024      	movs	r0, #36	; 0x24
   ba5c2:	f001 fb4d 	bl	bbc60 <_ZnwjRKSt9nothrow_t>
   ba5c6:	4605      	mov	r5, r0
   ba5c8:	2800      	cmp	r0, #0
   ba5ca:	d0e6      	beq.n	ba59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba5cc:	ab01      	add	r3, sp, #4
   ba5ce:	4632      	mov	r2, r6
   ba5d0:	4621      	mov	r1, r4
   ba5d2:	f7ff ff9f 	bl	ba514 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba5d6:	e7e0      	b.n	ba59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba5d8:	2400      	movs	r4, #0
   ba5da:	e7e2      	b.n	ba5a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba5dc:	000bedf2 	.word	0x000bedf2
   ba5e0:	000befcc 	.word	0x000befcc
   ba5e4:	000bee84 	.word	0x000bee84
   ba5e8:	000bedf6 	.word	0x000bedf6

000ba5ec <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba5ec:	4b01      	ldr	r3, [pc, #4]	; (ba5f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba5ee:	4a02      	ldr	r2, [pc, #8]	; (ba5f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba5f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba5f2:	4770      	bx	lr
   ba5f4:	2003e654 	.word	0x2003e654
   ba5f8:	000bee07 	.word	0x000bee07

000ba5fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba600:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba602:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba606:	4604      	mov	r4, r0
   ba608:	460e      	mov	r6, r1
   ba60a:	4617      	mov	r7, r2
   ba60c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba60e:	f001 f915 	bl	bb83c <_Z16_fetch_usbserialv>
   ba612:	4581      	cmp	r9, r0
   ba614:	d04c      	beq.n	ba6b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba616:	792b      	ldrb	r3, [r5, #4]
   ba618:	0719      	lsls	r1, r3, #28
   ba61a:	d504      	bpl.n	ba626 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba61c:	696a      	ldr	r2, [r5, #20]
   ba61e:	4954      	ldr	r1, [pc, #336]	; (ba770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba620:	4620      	mov	r0, r4
   ba622:	f7ff fa8d 	bl	b9b40 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba626:	f1b8 0f00 	cmp.w	r8, #0
   ba62a:	d00d      	beq.n	ba648 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba62c:	215b      	movs	r1, #91	; 0x5b
   ba62e:	4620      	mov	r0, r4
   ba630:	f7ff fa7a 	bl	b9b28 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba634:	4641      	mov	r1, r8
   ba636:	4620      	mov	r0, r4
   ba638:	f7ff fa67 	bl	b9b0a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba63c:	6823      	ldr	r3, [r4, #0]
   ba63e:	494d      	ldr	r1, [pc, #308]	; (ba774 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba640:	68db      	ldr	r3, [r3, #12]
   ba642:	2202      	movs	r2, #2
   ba644:	4620      	mov	r0, r4
   ba646:	4798      	blx	r3
    if (attr.has_file) {
   ba648:	792b      	ldrb	r3, [r5, #4]
   ba64a:	07da      	lsls	r2, r3, #31
   ba64c:	d523      	bpl.n	ba696 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba64e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba652:	212f      	movs	r1, #47	; 0x2f
   ba654:	4640      	mov	r0, r8
   ba656:	f003 f9db 	bl	bda10 <strrchr>
    if (s1) {
   ba65a:	b108      	cbz	r0, ba660 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba65c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba660:	4641      	mov	r1, r8
   ba662:	4620      	mov	r0, r4
   ba664:	f7ff fa51 	bl	b9b0a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba668:	792b      	ldrb	r3, [r5, #4]
   ba66a:	079b      	lsls	r3, r3, #30
   ba66c:	d508      	bpl.n	ba680 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba66e:	213a      	movs	r1, #58	; 0x3a
   ba670:	4620      	mov	r0, r4
   ba672:	f7ff fa59 	bl	b9b28 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba676:	68ea      	ldr	r2, [r5, #12]
   ba678:	493f      	ldr	r1, [pc, #252]	; (ba778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba67a:	4620      	mov	r0, r4
   ba67c:	f7ff fa60 	bl	b9b40 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba680:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba682:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba684:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba688:	68db      	ldr	r3, [r3, #12]
   ba68a:	bf14      	ite	ne
   ba68c:	493b      	ldrne	r1, [pc, #236]	; (ba77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba68e:	493c      	ldreq	r1, [pc, #240]	; (ba780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba690:	2202      	movs	r2, #2
            write(": ", 2);
   ba692:	4620      	mov	r0, r4
   ba694:	4798      	blx	r3
    if (attr.has_function) {
   ba696:	792b      	ldrb	r3, [r5, #4]
   ba698:	0758      	lsls	r0, r3, #29
   ba69a:	d51d      	bpl.n	ba6d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba69c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba69e:	460b      	mov	r3, r1
   ba6a0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba6a2:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba6a6:	b160      	cbz	r0, ba6c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba6a8:	2820      	cmp	r0, #32
   ba6aa:	d108      	bne.n	ba6be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba6ac:	4619      	mov	r1, r3
   ba6ae:	e7f7      	b.n	ba6a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba6b0:	4834      	ldr	r0, [pc, #208]	; (ba784 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba6b2:	f000 f966 	bl	ba982 <_ZN5spark12NetworkClass9listeningEv>
   ba6b6:	2800      	cmp	r0, #0
   ba6b8:	d0ad      	beq.n	ba616 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba6be:	2828      	cmp	r0, #40	; 0x28
   ba6c0:	d1ee      	bne.n	ba6a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba6c2:	6823      	ldr	r3, [r4, #0]
   ba6c4:	1a52      	subs	r2, r2, r1
   ba6c6:	68db      	ldr	r3, [r3, #12]
   ba6c8:	4620      	mov	r0, r4
   ba6ca:	4798      	blx	r3
        write("(): ", 4);
   ba6cc:	6823      	ldr	r3, [r4, #0]
   ba6ce:	492e      	ldr	r1, [pc, #184]	; (ba788 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba6d0:	68db      	ldr	r3, [r3, #12]
   ba6d2:	2204      	movs	r2, #4
   ba6d4:	4620      	mov	r0, r4
   ba6d6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba6d8:	2100      	movs	r1, #0
   ba6da:	4638      	mov	r0, r7
   ba6dc:	f7fe fabc 	bl	b8c58 <log_level_name>
   ba6e0:	4601      	mov	r1, r0
    write(s);
   ba6e2:	4620      	mov	r0, r4
   ba6e4:	f7ff fa11 	bl	b9b0a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba6e8:	6823      	ldr	r3, [r4, #0]
   ba6ea:	4925      	ldr	r1, [pc, #148]	; (ba780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba6ec:	68db      	ldr	r3, [r3, #12]
   ba6ee:	2202      	movs	r2, #2
   ba6f0:	4620      	mov	r0, r4
   ba6f2:	4798      	blx	r3
    if (msg) {
   ba6f4:	b11e      	cbz	r6, ba6fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba6f6:	4631      	mov	r1, r6
   ba6f8:	4620      	mov	r0, r4
   ba6fa:	f7ff fa06 	bl	b9b0a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba6fe:	792b      	ldrb	r3, [r5, #4]
   ba700:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba704:	d02c      	beq.n	ba760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba706:	6823      	ldr	r3, [r4, #0]
   ba708:	4920      	ldr	r1, [pc, #128]	; (ba78c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba70a:	68db      	ldr	r3, [r3, #12]
   ba70c:	2202      	movs	r2, #2
   ba70e:	4620      	mov	r0, r4
   ba710:	4798      	blx	r3
        if (attr.has_code) {
   ba712:	792b      	ldrb	r3, [r5, #4]
   ba714:	06d9      	lsls	r1, r3, #27
   ba716:	d50a      	bpl.n	ba72e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba718:	6823      	ldr	r3, [r4, #0]
   ba71a:	491d      	ldr	r1, [pc, #116]	; (ba790 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba71c:	68db      	ldr	r3, [r3, #12]
   ba71e:	2207      	movs	r2, #7
   ba720:	4620      	mov	r0, r4
   ba722:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba724:	69aa      	ldr	r2, [r5, #24]
   ba726:	491b      	ldr	r1, [pc, #108]	; (ba794 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba728:	4620      	mov	r0, r4
   ba72a:	f7ff fa09 	bl	b9b40 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba72e:	792b      	ldrb	r3, [r5, #4]
   ba730:	069a      	lsls	r2, r3, #26
   ba732:	d511      	bpl.n	ba758 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba734:	06db      	lsls	r3, r3, #27
   ba736:	d505      	bpl.n	ba744 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba738:	6823      	ldr	r3, [r4, #0]
   ba73a:	4910      	ldr	r1, [pc, #64]	; (ba77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba73c:	68db      	ldr	r3, [r3, #12]
   ba73e:	2202      	movs	r2, #2
   ba740:	4620      	mov	r0, r4
   ba742:	4798      	blx	r3
            write("details = ", 10);
   ba744:	6823      	ldr	r3, [r4, #0]
   ba746:	4914      	ldr	r1, [pc, #80]	; (ba798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba748:	68db      	ldr	r3, [r3, #12]
   ba74a:	4620      	mov	r0, r4
   ba74c:	220a      	movs	r2, #10
   ba74e:	4798      	blx	r3
            write(attr.details);
   ba750:	69e9      	ldr	r1, [r5, #28]
   ba752:	4620      	mov	r0, r4
   ba754:	f7ff f9d9 	bl	b9b0a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba758:	215d      	movs	r1, #93	; 0x5d
   ba75a:	4620      	mov	r0, r4
   ba75c:	f7ff f9e4 	bl	b9b28 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba760:	6823      	ldr	r3, [r4, #0]
   ba762:	490e      	ldr	r1, [pc, #56]	; (ba79c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba764:	68db      	ldr	r3, [r3, #12]
   ba766:	4620      	mov	r0, r4
   ba768:	2202      	movs	r2, #2
}
   ba76a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba76e:	4718      	bx	r3
   ba770:	000bee0b 	.word	0x000bee0b
   ba774:	000bee12 	.word	0x000bee12
   ba778:	000bde56 	.word	0x000bde56
   ba77c:	000bee15 	.word	0x000bee15
   ba780:	000bee1a 	.word	0x000bee1a
   ba784:	2003e680 	.word	0x2003e680
   ba788:	000bee18 	.word	0x000bee18
   ba78c:	000bee1d 	.word	0x000bee1d
   ba790:	000bee20 	.word	0x000bee20
   ba794:	000be704 	.word	0x000be704
   ba798:	000bee28 	.word	0x000bee28
   ba79c:	000bee33 	.word	0x000bee33

000ba7a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba7a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba7a4:	b085      	sub	sp, #20
    return stream_;
   ba7a6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba7aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba7ac:	4605      	mov	r5, r0
   ba7ae:	460f      	mov	r7, r1
   ba7b0:	4690      	mov	r8, r2
   ba7b2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba7b4:	f001 f842 	bl	bb83c <_Z16_fetch_usbserialv>
   ba7b8:	4581      	cmp	r9, r0
   ba7ba:	d105      	bne.n	ba7c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba7bc:	4849      	ldr	r0, [pc, #292]	; (ba8e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba7be:	f000 f8e0 	bl	ba982 <_ZN5spark12NetworkClass9listeningEv>
   ba7c2:	2800      	cmp	r0, #0
   ba7c4:	f040 808a 	bne.w	ba8dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba7c8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba7ca:	4a47      	ldr	r2, [pc, #284]	; (ba8e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba7cc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba7ce:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba7d2:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba7d4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba7d6:	f88d 9008 	strb.w	r9, [sp, #8]
   ba7da:	f7ff f850 	bl	b987e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba7de:	4649      	mov	r1, r9
   ba7e0:	4640      	mov	r0, r8
   ba7e2:	f7fe fa39 	bl	b8c58 <log_level_name>
    json.name("l", 1).value(s);
   ba7e6:	4941      	ldr	r1, [pc, #260]	; (ba8ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba7e8:	4680      	mov	r8, r0
   ba7ea:	2201      	movs	r2, #1
   ba7ec:	a801      	add	r0, sp, #4
   ba7ee:	f7ff f8d5 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba7f2:	4641      	mov	r1, r8
   ba7f4:	f7ff f97b 	bl	b9aee <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba7f8:	b13f      	cbz	r7, ba80a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba7fa:	493d      	ldr	r1, [pc, #244]	; (ba8f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba7fc:	2201      	movs	r2, #1
   ba7fe:	a801      	add	r0, sp, #4
   ba800:	f7ff f8cc 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba804:	4639      	mov	r1, r7
   ba806:	f7ff f972 	bl	b9aee <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba80a:	b13e      	cbz	r6, ba81c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba80c:	4939      	ldr	r1, [pc, #228]	; (ba8f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba80e:	2201      	movs	r2, #1
   ba810:	a801      	add	r0, sp, #4
   ba812:	f7ff f8c3 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba816:	4631      	mov	r1, r6
   ba818:	f7ff f969 	bl	b9aee <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba81c:	7923      	ldrb	r3, [r4, #4]
   ba81e:	07df      	lsls	r7, r3, #31
   ba820:	d50e      	bpl.n	ba840 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba822:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba824:	212f      	movs	r1, #47	; 0x2f
   ba826:	4630      	mov	r0, r6
   ba828:	f003 f8f2 	bl	bda10 <strrchr>
    if (s1) {
   ba82c:	b100      	cbz	r0, ba830 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba82e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba830:	4931      	ldr	r1, [pc, #196]	; (ba8f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba832:	2201      	movs	r2, #1
   ba834:	a801      	add	r0, sp, #4
   ba836:	f7ff f8b1 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba83a:	4631      	mov	r1, r6
   ba83c:	f7ff f957 	bl	b9aee <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba840:	7923      	ldrb	r3, [r4, #4]
   ba842:	079e      	lsls	r6, r3, #30
   ba844:	d507      	bpl.n	ba856 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba846:	492d      	ldr	r1, [pc, #180]	; (ba8fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba848:	2202      	movs	r2, #2
   ba84a:	a801      	add	r0, sp, #4
   ba84c:	f7ff f8a6 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba850:	68e1      	ldr	r1, [r4, #12]
   ba852:	f7ff f821 	bl	b9898 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba856:	7923      	ldrb	r3, [r4, #4]
   ba858:	0758      	lsls	r0, r3, #29
   ba85a:	d514      	bpl.n	ba886 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba85c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba85e:	4633      	mov	r3, r6
   ba860:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba862:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba866:	b12a      	cbz	r2, ba874 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba868:	2a20      	cmp	r2, #32
   ba86a:	d101      	bne.n	ba870 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba86c:	461e      	mov	r6, r3
   ba86e:	e7f7      	b.n	ba860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba870:	2a28      	cmp	r2, #40	; 0x28
   ba872:	d1f5      	bne.n	ba860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba874:	4922      	ldr	r1, [pc, #136]	; (ba900 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba876:	2202      	movs	r2, #2
   ba878:	a801      	add	r0, sp, #4
   ba87a:	f7ff f88f 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba87e:	1bba      	subs	r2, r7, r6
   ba880:	4631      	mov	r1, r6
   ba882:	f7ff f89b 	bl	b99bc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba886:	7923      	ldrb	r3, [r4, #4]
   ba888:	0719      	lsls	r1, r3, #28
   ba88a:	d507      	bpl.n	ba89c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba88c:	491d      	ldr	r1, [pc, #116]	; (ba904 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba88e:	2201      	movs	r2, #1
   ba890:	a801      	add	r0, sp, #4
   ba892:	f7ff f883 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba896:	6961      	ldr	r1, [r4, #20]
   ba898:	f7ff f810 	bl	b98bc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba89c:	7923      	ldrb	r3, [r4, #4]
   ba89e:	06da      	lsls	r2, r3, #27
   ba8a0:	d508      	bpl.n	ba8b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba8a2:	2204      	movs	r2, #4
   ba8a4:	4918      	ldr	r1, [pc, #96]	; (ba908 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba8a6:	eb0d 0002 	add.w	r0, sp, r2
   ba8aa:	f7ff f877 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba8ae:	69a1      	ldr	r1, [r4, #24]
   ba8b0:	f7fe fff2 	bl	b9898 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba8b4:	7923      	ldrb	r3, [r4, #4]
   ba8b6:	069b      	lsls	r3, r3, #26
   ba8b8:	d507      	bpl.n	ba8ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba8ba:	4914      	ldr	r1, [pc, #80]	; (ba90c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba8bc:	2206      	movs	r2, #6
   ba8be:	a801      	add	r0, sp, #4
   ba8c0:	f7ff f86c 	bl	b999c <_ZN5spark10JSONWriter4nameEPKcj>
   ba8c4:	69e1      	ldr	r1, [r4, #28]
   ba8c6:	f7ff f912 	bl	b9aee <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba8ca:	a801      	add	r0, sp, #4
   ba8cc:	f7fe ffc1 	bl	b9852 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba8d0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba8d2:	490f      	ldr	r1, [pc, #60]	; (ba910 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba8d4:	6803      	ldr	r3, [r0, #0]
   ba8d6:	2202      	movs	r2, #2
   ba8d8:	68db      	ldr	r3, [r3, #12]
   ba8da:	4798      	blx	r3
}
   ba8dc:	b005      	add	sp, #20
   ba8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba8e2:	bf00      	nop
   ba8e4:	2003e680 	.word	0x2003e680
   ba8e8:	000bee54 	.word	0x000bee54
   ba8ec:	000bede8 	.word	0x000bede8
   ba8f0:	000bee36 	.word	0x000bee36
   ba8f4:	000bf108 	.word	0x000bf108
   ba8f8:	000be182 	.word	0x000be182
   ba8fc:	000bee38 	.word	0x000bee38
   ba900:	000bee3b 	.word	0x000bee3b
   ba904:	000be34f 	.word	0x000be34f
   ba908:	000bee3e 	.word	0x000bee3e
   ba90c:	000bee43 	.word	0x000bee43
   ba910:	000bee33 	.word	0x000bee33

000ba914 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba914:	2300      	movs	r3, #0
   ba916:	6840      	ldr	r0, [r0, #4]
   ba918:	461a      	mov	r2, r3
   ba91a:	f7fe ba6b 	b.w	b8df4 <network_connect>

000ba91e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba91e:	6840      	ldr	r0, [r0, #4]
   ba920:	2200      	movs	r2, #0
   ba922:	2102      	movs	r1, #2
   ba924:	f7fe ba76 	b.w	b8e14 <network_disconnect>

000ba928 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba928:	2200      	movs	r2, #0
   ba92a:	6840      	ldr	r0, [r0, #4]
   ba92c:	4611      	mov	r1, r2
   ba92e:	f7fe ba69 	b.w	b8e04 <network_connecting>

000ba932 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba932:	2200      	movs	r2, #0
   ba934:	6840      	ldr	r0, [r0, #4]
   ba936:	4611      	mov	r1, r2
   ba938:	f7fe ba74 	b.w	b8e24 <network_ready>

000ba93c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba93c:	2300      	movs	r3, #0
   ba93e:	6840      	ldr	r0, [r0, #4]
   ba940:	461a      	mov	r2, r3
   ba942:	4619      	mov	r1, r3
   ba944:	f7fe ba76 	b.w	b8e34 <network_on>

000ba948 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba948:	2300      	movs	r3, #0
   ba94a:	6840      	ldr	r0, [r0, #4]
   ba94c:	461a      	mov	r2, r3
   ba94e:	4619      	mov	r1, r3
   ba950:	f7fe ba78 	b.w	b8e44 <network_off>

000ba954 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba954:	6840      	ldr	r0, [r0, #4]
   ba956:	2100      	movs	r1, #0
   ba958:	f7fe ba9c 	b.w	b8e94 <network_is_on>

000ba95c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba95c:	6840      	ldr	r0, [r0, #4]
   ba95e:	2100      	movs	r1, #0
   ba960:	f7fe baa0 	b.w	b8ea4 <network_is_off>

000ba964 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba964:	6840      	ldr	r0, [r0, #4]
   ba966:	2200      	movs	r2, #0
   ba968:	f081 0101 	eor.w	r1, r1, #1
   ba96c:	f7fe ba72 	b.w	b8e54 <network_listen>

000ba970 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba970:	6840      	ldr	r0, [r0, #4]
   ba972:	2200      	movs	r2, #0
   ba974:	f7fe ba7e 	b.w	b8e74 <network_set_listen_timeout>

000ba978 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba978:	2200      	movs	r2, #0
   ba97a:	6840      	ldr	r0, [r0, #4]
   ba97c:	4611      	mov	r1, r2
   ba97e:	f7fe ba81 	b.w	b8e84 <network_get_listen_timeout>

000ba982 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba982:	2200      	movs	r2, #0
   ba984:	6840      	ldr	r0, [r0, #4]
   ba986:	4611      	mov	r1, r2
   ba988:	f7fe ba6c 	b.w	b8e64 <network_listening>

000ba98c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba990:	b095      	sub	sp, #84	; 0x54
   ba992:	4614      	mov	r4, r2
   ba994:	460d      	mov	r5, r1
   ba996:	4607      	mov	r7, r0
    IPAddress addr;
   ba998:	f7fe fe0a 	bl	b95b0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba99c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba99e:	221c      	movs	r2, #28
   ba9a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba9a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba9a4:	f002 ff68 	bl	bd878 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba9a8:	2340      	movs	r3, #64	; 0x40
   ba9aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba9ac:	4620      	mov	r0, r4
   ba9ae:	466b      	mov	r3, sp
   ba9b0:	aa0c      	add	r2, sp, #48	; 0x30
   ba9b2:	2100      	movs	r1, #0
   ba9b4:	f7fe f850 	bl	b8a58 <netdb_getaddrinfo>
    if (!r) {
   ba9b8:	4604      	mov	r4, r0
   ba9ba:	2800      	cmp	r0, #0
   ba9bc:	d14b      	bne.n	baa56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba9be:	4602      	mov	r2, r0
   ba9c0:	2101      	movs	r1, #1
   ba9c2:	6868      	ldr	r0, [r5, #4]
   ba9c4:	f7fe fa2e 	bl	b8e24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba9c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba9ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba9cc:	4622      	mov	r2, r4
   ba9ce:	6868      	ldr	r0, [r5, #4]
   ba9d0:	f7fe fa28 	bl	b8e24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba9d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba9d6:	4681      	mov	r9, r0
        bool ok = false;
   ba9d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba9da:	2e00      	cmp	r6, #0
   ba9dc:	d03b      	beq.n	baa56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba9de:	2900      	cmp	r1, #0
   ba9e0:	d139      	bne.n	baa56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba9e2:	6873      	ldr	r3, [r6, #4]
   ba9e4:	2b02      	cmp	r3, #2
   ba9e6:	d003      	beq.n	ba9f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba9e8:	2b0a      	cmp	r3, #10
   ba9ea:	d011      	beq.n	baa10 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba9ec:	69f6      	ldr	r6, [r6, #28]
   ba9ee:	e7f4      	b.n	ba9da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba9f0:	f1b8 0f00 	cmp.w	r8, #0
   ba9f4:	d0fa      	beq.n	ba9ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba9f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba9f8:	a806      	add	r0, sp, #24
   ba9fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba9fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba9fe:	f7fe fe05 	bl	b960c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   baa02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baa04:	1d3c      	adds	r4, r7, #4
   baa06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baa08:	682b      	ldr	r3, [r5, #0]
   baa0a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   baa0c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   baa0e:	e7ed      	b.n	ba9ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   baa10:	f1b9 0f00 	cmp.w	r9, #0
   baa14:	d0ea      	beq.n	ba9ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   baa16:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   baa18:	2210      	movs	r2, #16
   baa1a:	a801      	add	r0, sp, #4
   baa1c:	f002 ff2c 	bl	bd878 <memset>
                    a.v = 6;
   baa20:	2306      	movs	r3, #6
   baa22:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   baa26:	ad01      	add	r5, sp, #4
   baa28:	f104 0308 	add.w	r3, r4, #8
   baa2c:	3418      	adds	r4, #24
   baa2e:	6818      	ldr	r0, [r3, #0]
   baa30:	6859      	ldr	r1, [r3, #4]
   baa32:	462a      	mov	r2, r5
   baa34:	c203      	stmia	r2!, {r0, r1}
   baa36:	3308      	adds	r3, #8
   baa38:	42a3      	cmp	r3, r4
   baa3a:	4615      	mov	r5, r2
   baa3c:	d1f7      	bne.n	baa2e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   baa3e:	a901      	add	r1, sp, #4
   baa40:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   baa42:	ad07      	add	r5, sp, #28
   baa44:	f7fe fdc2 	bl	b95cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   baa48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baa4a:	1d3c      	adds	r4, r7, #4
   baa4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baa4e:	682b      	ldr	r3, [r5, #0]
   baa50:	7023      	strb	r3, [r4, #0]
                    ok = true;
   baa52:	4649      	mov	r1, r9
   baa54:	e7ca      	b.n	ba9ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   baa56:	9800      	ldr	r0, [sp, #0]
   baa58:	f7fd fff6 	bl	b8a48 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   baa5c:	4638      	mov	r0, r7
   baa5e:	b015      	add	sp, #84	; 0x54
   baa60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000baa64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   baa64:	4b02      	ldr	r3, [pc, #8]	; (baa70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   baa66:	4a03      	ldr	r2, [pc, #12]	; (baa74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   baa68:	601a      	str	r2, [r3, #0]
   baa6a:	2200      	movs	r2, #0
   baa6c:	605a      	str	r2, [r3, #4]

} // spark
   baa6e:	4770      	bx	lr
   baa70:	2003e680 	.word	0x2003e680
   baa74:	000beecc 	.word	0x000beecc

000baa78 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   baa78:	b508      	push	{r3, lr}
            return &Wire1;
   baa7a:	f001 f88d 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   baa7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   baa82:	f7fe bd1d 	b.w	b94c0 <_ZN7TwoWire4lockEv>

000baa86 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   baa86:	b510      	push	{r4, lr}
   baa88:	4604      	mov	r4, r0
    lock_(_lock)
   baa8a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   baa8c:	b109      	cbz	r1, baa92 <_ZN4PMICC1Eb+0xc>
        lock();
   baa8e:	f7ff fff3 	bl	baa78 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   baa92:	4620      	mov	r0, r4
   baa94:	bd10      	pop	{r4, pc}

000baa96 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   baa96:	b508      	push	{r3, lr}
            return &Wire1;
   baa98:	f001 f87e 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   baa9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   baaa0:	f7fe bd17 	b.w	b94d2 <_ZN7TwoWire6unlockEv>

000baaa4 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   baaa4:	b510      	push	{r4, lr}
    if (lock_) {
   baaa6:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   baaa8:	4604      	mov	r4, r0
    if (lock_) {
   baaaa:	b10b      	cbz	r3, baab0 <_ZN4PMICD1Ev+0xc>
        unlock();
   baaac:	f7ff fff3 	bl	baa96 <_ZN4PMIC6unlockEv>
}
   baab0:	4620      	mov	r0, r4
   baab2:	bd10      	pop	{r4, pc}

000baab4 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   baab4:	b510      	push	{r4, lr}
   baab6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   baab8:	6800      	ldr	r0, [r0, #0]
   baaba:	f7ff ffec 	bl	baa96 <_ZN4PMIC6unlockEv>
   baabe:	4620      	mov	r0, r4
   baac0:	bd10      	pop	{r4, pc}

000baac2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   baac2:	b530      	push	{r4, r5, lr}
   baac4:	b087      	sub	sp, #28
   baac6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   baac8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   baaca:	f7ff ffd5 	bl	baa78 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   baace:	226b      	movs	r2, #107	; 0x6b
   baad0:	2300      	movs	r3, #0
   baad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   baad6:	2401      	movs	r4, #1
   baad8:	230a      	movs	r3, #10
   baada:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   baade:	f001 f85b 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   baae2:	a902      	add	r1, sp, #8
   baae4:	f7fe fcd0 	bl	b9488 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   baae8:	f001 f856 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   baaec:	6803      	ldr	r3, [r0, #0]
   baaee:	4629      	mov	r1, r5
   baaf0:	689b      	ldr	r3, [r3, #8]
   baaf2:	4798      	blx	r3
            return &Wire1;
   baaf4:	f001 f850 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   baaf8:	4621      	mov	r1, r4
   baafa:	f7fe fcdd 	bl	b94b8 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   baafe:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bab00:	f001 f84a 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bab04:	a902      	add	r1, sp, #8
   bab06:	f7fe fc8f 	bl	b9428 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bab0a:	f001 f845 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bab0e:	6803      	ldr	r3, [r0, #0]
   bab10:	695b      	ldr	r3, [r3, #20]
   bab12:	4798      	blx	r3
   bab14:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bab16:	a801      	add	r0, sp, #4
   bab18:	f7ff ffcc 	bl	baab4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bab1c:	b2e0      	uxtb	r0, r4
   bab1e:	b007      	add	sp, #28
   bab20:	bd30      	pop	{r4, r5, pc}

000bab22 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bab22:	b570      	push	{r4, r5, r6, lr}
   bab24:	b086      	sub	sp, #24
   bab26:	460d      	mov	r5, r1
   bab28:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bab2a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bab2c:	f7ff ffa4 	bl	baa78 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bab30:	226b      	movs	r2, #107	; 0x6b
   bab32:	2300      	movs	r3, #0
   bab34:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bab38:	2601      	movs	r6, #1
   bab3a:	230a      	movs	r3, #10
   bab3c:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bab40:	f001 f82a 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bab44:	a902      	add	r1, sp, #8
   bab46:	f7fe fc9f 	bl	b9488 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bab4a:	f001 f825 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bab4e:	6803      	ldr	r3, [r0, #0]
   bab50:	4629      	mov	r1, r5
   bab52:	689b      	ldr	r3, [r3, #8]
   bab54:	4798      	blx	r3
            return &Wire1;
   bab56:	f001 f81f 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bab5a:	6803      	ldr	r3, [r0, #0]
   bab5c:	4621      	mov	r1, r4
   bab5e:	689b      	ldr	r3, [r3, #8]
   bab60:	4798      	blx	r3
            return &Wire1;
   bab62:	f001 f819 	bl	bbb98 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bab66:	4631      	mov	r1, r6
   bab68:	f7fe fca6 	bl	b94b8 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bab6c:	a801      	add	r0, sp, #4
   bab6e:	f7ff ffa1 	bl	baab4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bab72:	b006      	add	sp, #24
   bab74:	bd70      	pop	{r4, r5, r6, pc}

000bab76 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bab76:	b513      	push	{r0, r1, r4, lr}
   bab78:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bab7a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bab7c:	f7ff ff7c 	bl	baa78 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bab80:	2101      	movs	r1, #1
   bab82:	4620      	mov	r0, r4
   bab84:	f7ff ff9d 	bl	baac2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bab88:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bab8c:	2b10      	cmp	r3, #16
   bab8e:	d007      	beq.n	baba0 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bab90:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bab94:	f042 0210 	orr.w	r2, r2, #16
   bab98:	2101      	movs	r1, #1
   bab9a:	4620      	mov	r0, r4
   bab9c:	f7ff ffc1 	bl	bab22 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   baba0:	a801      	add	r0, sp, #4
   baba2:	f7ff ff87 	bl	baab4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   baba6:	2001      	movs	r0, #1
   baba8:	b002      	add	sp, #8
   babaa:	bd10      	pop	{r4, pc}

000babac <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   babac:	b513      	push	{r0, r1, r4, lr}
   babae:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   babb0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   babb2:	f7ff ff61 	bl	baa78 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   babb6:	2101      	movs	r1, #1
   babb8:	4620      	mov	r0, r4
   babba:	f7ff ff82 	bl	baac2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   babbe:	f010 0f30 	tst.w	r0, #48	; 0x30
   babc2:	d005      	beq.n	babd0 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   babc4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   babc8:	2101      	movs	r1, #1
   babca:	4620      	mov	r0, r4
   babcc:	f7ff ffa9 	bl	bab22 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   babd0:	a801      	add	r0, sp, #4
   babd2:	f7ff ff6f 	bl	baab4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   babd6:	2001      	movs	r0, #1
   babd8:	b002      	add	sp, #8
   babda:	bd10      	pop	{r4, pc}

000babdc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   babdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   babde:	4606      	mov	r6, r0
   babe0:	460d      	mov	r5, r1
  size_t n = 0;
   babe2:	188f      	adds	r7, r1, r2
   babe4:	2400      	movs	r4, #0
  while (size--) {
   babe6:	42bd      	cmp	r5, r7
   babe8:	d00c      	beq.n	bac04 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   babea:	6833      	ldr	r3, [r6, #0]
   babec:	f815 1b01 	ldrb.w	r1, [r5], #1
   babf0:	689b      	ldr	r3, [r3, #8]
   babf2:	4630      	mov	r0, r6
   babf4:	4798      	blx	r3
     if (chunk>=0)
   babf6:	1e03      	subs	r3, r0, #0
   babf8:	db01      	blt.n	babfe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   babfa:	441c      	add	r4, r3
  while (size--) {
   babfc:	e7f3      	b.n	babe6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   babfe:	2c00      	cmp	r4, #0
   bac00:	bf08      	it	eq
   bac02:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bac04:	4620      	mov	r0, r4
   bac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bac08 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bac08:	b513      	push	{r0, r1, r4, lr}
   bac0a:	4604      	mov	r4, r0
    }
   bac0c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bac0e:	b159      	cbz	r1, bac28 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bac10:	9101      	str	r1, [sp, #4]
   bac12:	f002 fece 	bl	bd9b2 <strlen>
   bac16:	6823      	ldr	r3, [r4, #0]
   bac18:	9901      	ldr	r1, [sp, #4]
   bac1a:	68db      	ldr	r3, [r3, #12]
   bac1c:	4602      	mov	r2, r0
   bac1e:	4620      	mov	r0, r4
    }
   bac20:	b002      	add	sp, #8
   bac22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bac26:	4718      	bx	r3
    }
   bac28:	b002      	add	sp, #8
   bac2a:	bd10      	pop	{r4, pc}

000bac2c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bac2c:	b508      	push	{r3, lr}
  return write(str);
   bac2e:	f7ff ffeb 	bl	bac08 <_ZN5Print5writeEPKc>
}
   bac32:	bd08      	pop	{r3, pc}

000bac34 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bac34:	6803      	ldr	r3, [r0, #0]
   bac36:	689b      	ldr	r3, [r3, #8]
   bac38:	4718      	bx	r3

000bac3a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bac3a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bac3c:	210d      	movs	r1, #13
{
   bac3e:	4605      	mov	r5, r0
  size_t n = print('\r');
   bac40:	f7ff fff8 	bl	bac34 <_ZN5Print5printEc>
  n += print('\n');
   bac44:	210a      	movs	r1, #10
  size_t n = print('\r');
   bac46:	4604      	mov	r4, r0
  n += print('\n');
   bac48:	4628      	mov	r0, r5
   bac4a:	f7ff fff3 	bl	bac34 <_ZN5Print5printEc>
  return n;
}
   bac4e:	4420      	add	r0, r4
   bac50:	bd38      	pop	{r3, r4, r5, pc}

000bac52 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bac52:	b530      	push	{r4, r5, lr}
   bac54:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bac56:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bac58:	2a01      	cmp	r2, #1
  *str = '\0';
   bac5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bac5e:	bf98      	it	ls
   bac60:	220a      	movls	r2, #10
   bac62:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bac64:	460d      	mov	r5, r1
   bac66:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bac6a:	fb01 5312 	mls	r3, r1, r2, r5
   bac6e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bac72:	2b09      	cmp	r3, #9
   bac74:	bf94      	ite	ls
   bac76:	3330      	addls	r3, #48	; 0x30
   bac78:	3337      	addhi	r3, #55	; 0x37
   bac7a:	b2db      	uxtb	r3, r3
  } while(n);
   bac7c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bac7e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bac82:	d9ef      	bls.n	bac64 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bac84:	4621      	mov	r1, r4
   bac86:	f7ff ffbf 	bl	bac08 <_ZN5Print5writeEPKc>
}
   bac8a:	b00b      	add	sp, #44	; 0x2c
   bac8c:	bd30      	pop	{r4, r5, pc}
	...

000bac90 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bac90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac94:	ec55 4b10 	vmov	r4, r5, d0
   bac98:	4606      	mov	r6, r0
   bac9a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bac9c:	ee10 2a10 	vmov	r2, s0
   baca0:	ee10 0a10 	vmov	r0, s0
   baca4:	462b      	mov	r3, r5
   baca6:	4629      	mov	r1, r5
   baca8:	f002 fcbe 	bl	bd628 <__aeabi_dcmpun>
   bacac:	b140      	cbz	r0, bacc0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bacae:	4953      	ldr	r1, [pc, #332]	; (badfc <_ZN5Print10printFloatEdh+0x16c>)
   bacb0:	4630      	mov	r0, r6
   bacb2:	f7ff ffa9 	bl	bac08 <_ZN5Print5writeEPKc>
   bacb6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bacb8:	4650      	mov	r0, sl
   bacba:	b003      	add	sp, #12
   bacbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bacc0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bacc4:	4b4e      	ldr	r3, [pc, #312]	; (bae00 <_ZN5Print10printFloatEdh+0x170>)
   bacc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacca:	4620      	mov	r0, r4
   baccc:	4649      	mov	r1, r9
   bacce:	f002 fcab 	bl	bd628 <__aeabi_dcmpun>
   bacd2:	b948      	cbnz	r0, bace8 <_ZN5Print10printFloatEdh+0x58>
   bacd4:	4b4a      	ldr	r3, [pc, #296]	; (bae00 <_ZN5Print10printFloatEdh+0x170>)
   bacd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacda:	4620      	mov	r0, r4
   bacdc:	4649      	mov	r1, r9
   bacde:	f002 fc85 	bl	bd5ec <__aeabi_dcmple>
   bace2:	b908      	cbnz	r0, bace8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bace4:	4947      	ldr	r1, [pc, #284]	; (bae04 <_ZN5Print10printFloatEdh+0x174>)
   bace6:	e7e3      	b.n	bacb0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bace8:	4b47      	ldr	r3, [pc, #284]	; (bae08 <_ZN5Print10printFloatEdh+0x178>)
   bacea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bacee:	4620      	mov	r0, r4
   bacf0:	4629      	mov	r1, r5
   bacf2:	f002 fc8f 	bl	bd614 <__aeabi_dcmpgt>
   bacf6:	b108      	cbz	r0, bacfc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bacf8:	4944      	ldr	r1, [pc, #272]	; (bae0c <_ZN5Print10printFloatEdh+0x17c>)
   bacfa:	e7d9      	b.n	bacb0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bacfc:	4b44      	ldr	r3, [pc, #272]	; (bae10 <_ZN5Print10printFloatEdh+0x180>)
   bacfe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bad02:	4620      	mov	r0, r4
   bad04:	4629      	mov	r1, r5
   bad06:	f002 fc67 	bl	bd5d8 <__aeabi_dcmplt>
   bad0a:	2800      	cmp	r0, #0
   bad0c:	d1f4      	bne.n	bacf8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bad0e:	2200      	movs	r2, #0
   bad10:	2300      	movs	r3, #0
   bad12:	4620      	mov	r0, r4
   bad14:	4629      	mov	r1, r5
   bad16:	f002 fc5f 	bl	bd5d8 <__aeabi_dcmplt>
   bad1a:	b1d0      	cbz	r0, bad52 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bad1c:	212d      	movs	r1, #45	; 0x2d
   bad1e:	4630      	mov	r0, r6
   bad20:	f7ff ff88 	bl	bac34 <_ZN5Print5printEc>
     number = -number;
   bad24:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bad28:	4682      	mov	sl, r0
     number = -number;
   bad2a:	461d      	mov	r5, r3
  double rounding = 0.5;
   bad2c:	4939      	ldr	r1, [pc, #228]	; (bae14 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bad2e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bae1c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bad32:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bad36:	2000      	movs	r0, #0
    rounding /= 10.0;
   bad38:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bad3c:	fa5f f38b 	uxtb.w	r3, fp
   bad40:	429f      	cmp	r7, r3
   bad42:	d908      	bls.n	bad56 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bad44:	4642      	mov	r2, r8
   bad46:	464b      	mov	r3, r9
   bad48:	f002 fafe 	bl	bd348 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bad4c:	f10b 0b01 	add.w	fp, fp, #1
   bad50:	e7f4      	b.n	bad3c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bad52:	4682      	mov	sl, r0
   bad54:	e7ea      	b.n	bad2c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bad56:	4622      	mov	r2, r4
   bad58:	462b      	mov	r3, r5
   bad5a:	f002 f815 	bl	bcd88 <__adddf3>
   bad5e:	460d      	mov	r5, r1
   bad60:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bad62:	f002 fc9f 	bl	bd6a4 <__aeabi_d2uiz>
   bad66:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bad68:	f002 f94a 	bl	bd000 <__aeabi_ui2d>
   bad6c:	4602      	mov	r2, r0
   bad6e:	460b      	mov	r3, r1
   bad70:	4620      	mov	r0, r4
   bad72:	4629      	mov	r1, r5
   bad74:	f002 f806 	bl	bcd84 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bad78:	220a      	movs	r2, #10
   bad7a:	4604      	mov	r4, r0
   bad7c:	460d      	mov	r5, r1
   bad7e:	4630      	mov	r0, r6
   bad80:	4641      	mov	r1, r8
   bad82:	f7ff ff66 	bl	bac52 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bad86:	4482      	add	sl, r0
  if (digits > 0) {
   bad88:	2f00      	cmp	r7, #0
   bad8a:	d095      	beq.n	bacb8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bad8c:	4922      	ldr	r1, [pc, #136]	; (bae18 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bad8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; bae1c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bad92:	4630      	mov	r0, r6
   bad94:	f7ff ff38 	bl	bac08 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bad98:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bad9c:	4482      	add	sl, r0
  while (digits-- > 0)
   bad9e:	2f00      	cmp	r7, #0
   bada0:	d08a      	beq.n	bacb8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bada2:	4642      	mov	r2, r8
   bada4:	464b      	mov	r3, r9
   bada6:	4620      	mov	r0, r4
   bada8:	4629      	mov	r1, r5
   badaa:	f002 f9a3 	bl	bd0f4 <__aeabi_dmul>
   badae:	4604      	mov	r4, r0
   badb0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   badb2:	f002 fc4f 	bl	bd654 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   badb6:	f1b0 0b00 	subs.w	fp, r0, #0
   badba:	da1c      	bge.n	badf6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   badbc:	212d      	movs	r1, #45	; 0x2d
   badbe:	4630      	mov	r0, r6
   badc0:	f7ff ff38 	bl	bac34 <_ZN5Print5printEc>
            val = -n;
   badc4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   badc8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   badca:	220a      	movs	r2, #10
   badcc:	4630      	mov	r0, r6
   badce:	9301      	str	r3, [sp, #4]
   badd0:	f7ff ff3f 	bl	bac52 <_ZN5Print11printNumberEmh>
   badd4:	9b01      	ldr	r3, [sp, #4]
   badd6:	4418      	add	r0, r3
    n += print(toPrint);
   badd8:	4482      	add	sl, r0
    remainder -= toPrint;
   badda:	4658      	mov	r0, fp
   baddc:	f002 f920 	bl	bd020 <__aeabi_i2d>
   bade0:	4602      	mov	r2, r0
   bade2:	460b      	mov	r3, r1
   bade4:	4620      	mov	r0, r4
   bade6:	4629      	mov	r1, r5
   bade8:	f001 ffcc 	bl	bcd84 <__aeabi_dsub>
   badec:	3f01      	subs	r7, #1
   badee:	4604      	mov	r4, r0
   badf0:	460d      	mov	r5, r1
   badf2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   badf4:	e7d3      	b.n	bad9e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   badf6:	4659      	mov	r1, fp
        size_t t = 0;
   badf8:	2300      	movs	r3, #0
   badfa:	e7e6      	b.n	badca <_ZN5Print10printFloatEdh+0x13a>
   badfc:	000bef00 	.word	0x000bef00
   bae00:	7fefffff 	.word	0x7fefffff
   bae04:	000bef04 	.word	0x000bef04
   bae08:	41efffff 	.word	0x41efffff
   bae0c:	000bef08 	.word	0x000bef08
   bae10:	c1efffff 	.word	0xc1efffff
   bae14:	3fe00000 	.word	0x3fe00000
   bae18:	000bef40 	.word	0x000bef40
   bae1c:	40240000 	.word	0x40240000

000bae20 <_ZN5Print5printEfi>:
{
   bae20:	b538      	push	{r3, r4, r5, lr}
   bae22:	4604      	mov	r4, r0
   bae24:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bae28:	b2cd      	uxtb	r5, r1
   bae2a:	f002 f90b 	bl	bd044 <__aeabi_f2d>
   bae2e:	ec41 0b10 	vmov	d0, r0, r1
   bae32:	4629      	mov	r1, r5
   bae34:	4620      	mov	r0, r4
}
   bae36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bae3a:	f7ff bf29 	b.w	bac90 <_ZN5Print10printFloatEdh>

000bae3e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bae3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bae42:	b086      	sub	sp, #24
   bae44:	af00      	add	r7, sp, #0
   bae46:	4605      	mov	r5, r0
   bae48:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bae4a:	1d38      	adds	r0, r7, #4
   bae4c:	2114      	movs	r1, #20
{
   bae4e:	4614      	mov	r4, r2
    va_copy(args2, args);
   bae50:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bae52:	f7fe f857 	bl	b8f04 <vsnprintf>

    if (n<bufsize)
   bae56:	2813      	cmp	r0, #19
   bae58:	d80e      	bhi.n	bae78 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bae5a:	1d39      	adds	r1, r7, #4
   bae5c:	4628      	mov	r0, r5
   bae5e:	f7ff fed3 	bl	bac08 <_ZN5Print5writeEPKc>
   bae62:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bae64:	b11e      	cbz	r6, bae6e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bae66:	4628      	mov	r0, r5
   bae68:	f7ff fee7 	bl	bac3a <_ZN5Print7printlnEv>
   bae6c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bae6e:	4620      	mov	r0, r4
   bae70:	3718      	adds	r7, #24
   bae72:	46bd      	mov	sp, r7
   bae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bae78:	f100 0308 	add.w	r3, r0, #8
   bae7c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bae80:	46e8      	mov	r8, sp
        char bigger[n+1];
   bae82:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bae86:	4622      	mov	r2, r4
   bae88:	1c41      	adds	r1, r0, #1
   bae8a:	683b      	ldr	r3, [r7, #0]
   bae8c:	4668      	mov	r0, sp
   bae8e:	f7fe f839 	bl	b8f04 <vsnprintf>
  return write(str);
   bae92:	4669      	mov	r1, sp
   bae94:	4628      	mov	r0, r5
   bae96:	f7ff feb7 	bl	bac08 <_ZN5Print5writeEPKc>
   bae9a:	4604      	mov	r4, r0
   bae9c:	46c5      	mov	sp, r8
   bae9e:	e7e1      	b.n	bae64 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000baea0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   baea0:	b510      	push	{r4, lr}
  if (0 == max) {
   baea2:	4604      	mov	r4, r0
   baea4:	b128      	cbz	r0, baeb2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   baea6:	f002 fd1d 	bl	bd8e4 <rand>
   baeaa:	fb90 f3f4 	sdiv	r3, r0, r4
   baeae:	fb03 0414 	mls	r4, r3, r4, r0
}
   baeb2:	4620      	mov	r0, r4
   baeb4:	bd10      	pop	{r4, pc}

000baeb6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   baeb6:	4288      	cmp	r0, r1
{
   baeb8:	b510      	push	{r4, lr}
   baeba:	4604      	mov	r4, r0
  if (min >= max) {
   baebc:	da03      	bge.n	baec6 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   baebe:	1a08      	subs	r0, r1, r0
   baec0:	f7ff ffee 	bl	baea0 <_Z6randomi>
   baec4:	4404      	add	r4, r0
}
   baec6:	4620      	mov	r0, r4
   baec8:	bd10      	pop	{r4, pc}

000baeca <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   baeca:	f002 bcdd 	b.w	bd888 <srand>
	...

000baed0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   baed0:	4b01      	ldr	r3, [pc, #4]	; (baed8 <_GLOBAL__sub_I_RGB+0x8>)
   baed2:	2200      	movs	r2, #0
   baed4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   baed6:	4770      	bx	lr
   baed8:	2003e688 	.word	0x2003e688

000baedc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   baedc:	2100      	movs	r1, #0
   baede:	f7fd be03 	b.w	b8ae8 <hal_spi_release>

000baee2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   baee2:	2100      	movs	r1, #0
   baee4:	f7fd bdf8 	b.w	b8ad8 <hal_spi_acquire>

000baee8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   baee8:	b510      	push	{r4, lr}
   baeea:	4604      	mov	r4, r0
   baeec:	4608      	mov	r0, r1
{
    _spi = spi;
   baeee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   baef0:	f7fd fdd2 	bl	b8a98 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   baef4:	2300      	movs	r3, #0
   baef6:	6063      	str	r3, [r4, #4]
}
   baef8:	4620      	mov	r0, r4
   baefa:	bd10      	pop	{r4, pc}

000baefc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   baefc:	b513      	push	{r0, r1, r4, lr}
   baefe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   baf00:	7800      	ldrb	r0, [r0, #0]
   baf02:	f7ff ffee 	bl	baee2 <_ZN8SPIClass4lockEv.isra.0>
   baf06:	b958      	cbnz	r0, baf20 <_ZN8SPIClass5beginEv+0x24>
   baf08:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   baf0a:	9001      	str	r0, [sp, #4]
   baf0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   baf10:	f7fd fdaa 	bl	b8a68 <hal_spi_begin>
        unlock();
   baf14:	9801      	ldr	r0, [sp, #4]
    }
}
   baf16:	b002      	add	sp, #8
   baf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baf1c:	f7ff bfde 	b.w	baedc <_ZN8SPIClass6unlockEv.isra.0>
   baf20:	b002      	add	sp, #8
   baf22:	bd10      	pop	{r4, pc}

000baf24 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   baf24:	b513      	push	{r0, r1, r4, lr}
   baf26:	4604      	mov	r4, r0
    if (!lock())
   baf28:	7800      	ldrb	r0, [r0, #0]
   baf2a:	f7ff ffda 	bl	baee2 <_ZN8SPIClass4lockEv.isra.0>
   baf2e:	b948      	cbnz	r0, baf44 <_ZN8SPIClass3endEv+0x20>
   baf30:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   baf32:	9001      	str	r0, [sp, #4]
   baf34:	f7fd fda0 	bl	b8a78 <hal_spi_end>
        unlock();
   baf38:	9801      	ldr	r0, [sp, #4]
    }
}
   baf3a:	b002      	add	sp, #8
   baf3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baf40:	f7ff bfcc 	b.w	baedc <_ZN8SPIClass6unlockEv.isra.0>
   baf44:	b002      	add	sp, #8
   baf46:	bd10      	pop	{r4, pc}

000baf48 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   baf48:	7800      	ldrb	r0, [r0, #0]
   baf4a:	f7ff bfc7 	b.w	baedc <_ZN8SPIClass6unlockEv.isra.0>
	...

000baf50 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   baf50:	0840      	lsrs	r0, r0, #1
{
   baf52:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   baf54:	6018      	str	r0, [r3, #0]
   baf56:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   baf58:	6818      	ldr	r0, [r3, #0]
   baf5a:	4288      	cmp	r0, r1
   baf5c:	b2e5      	uxtb	r5, r4
   baf5e:	d906      	bls.n	baf6e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   baf60:	3401      	adds	r4, #1
   baf62:	2c08      	cmp	r4, #8
   baf64:	d002      	beq.n	baf6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   baf66:	0840      	lsrs	r0, r0, #1
   baf68:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   baf6a:	e7f5      	b.n	baf58 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   baf6c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   baf6e:	4b02      	ldr	r3, [pc, #8]	; (baf78 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   baf70:	5d5b      	ldrb	r3, [r3, r5]
   baf72:	7013      	strb	r3, [r2, #0]
}
   baf74:	bd30      	pop	{r4, r5, pc}
   baf76:	bf00      	nop
   baf78:	000bef0c 	.word	0x000bef0c

000baf7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   baf7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baf80:	4606      	mov	r6, r0
   baf82:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   baf84:	7800      	ldrb	r0, [r0, #0]
{
   baf86:	460c      	mov	r4, r1
    CHECK(lock());
   baf88:	f7ff ffab 	bl	baee2 <_ZN8SPIClass4lockEv.isra.0>
   baf8c:	2800      	cmp	r0, #0
   baf8e:	db1b      	blt.n	bafc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   baf90:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   baf92:	2214      	movs	r2, #20
   baf94:	2100      	movs	r1, #0
   baf96:	a809      	add	r0, sp, #36	; 0x24
   baf98:	f002 fc6e 	bl	bd878 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   baf9c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   baf9e:	2200      	movs	r2, #0
   bafa0:	a909      	add	r1, sp, #36	; 0x24
   bafa2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bafa4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bafa8:	f7fd fd86 	bl	b8ab8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bafac:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bafb0:	b113      	cbz	r3, bafb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bafb2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bafb6:	b155      	cbz	r5, bafce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bafb8:	2700      	movs	r7, #0
   bafba:	46b9      	mov	r9, r7
   bafbc:	46b8      	mov	r8, r7
   bafbe:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bafc0:	7923      	ldrb	r3, [r4, #4]
   bafc2:	b15d      	cbz	r5, bafdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bafc4:	b1c3      	cbz	r3, baff8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bafc6:	2000      	movs	r0, #0
}
   bafc8:	b00f      	add	sp, #60	; 0x3c
   bafca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bafce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bafd2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bafd6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bafda:	e7f1      	b.n	bafc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bafdc:	2b00      	cmp	r3, #0
   bafde:	d135      	bne.n	bb04c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bafe0:	68a3      	ldr	r3, [r4, #8]
   bafe2:	4543      	cmp	r3, r8
   bafe4:	d108      	bne.n	baff8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bafe6:	f88d 9020 	strb.w	r9, [sp, #32]
   bafea:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bafee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   baff2:	89a3      	ldrh	r3, [r4, #12]
   baff4:	429a      	cmp	r2, r3
   baff6:	d0e6      	beq.n	bafc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   baff8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   baffa:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   baffc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bb000:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb002:	ab04      	add	r3, sp, #16
   bb004:	f10d 020f 	add.w	r2, sp, #15
   bb008:	f7ff ffa2 	bl	baf50 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bb00c:	7921      	ldrb	r1, [r4, #4]
   bb00e:	b985      	cbnz	r5, bb032 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bb010:	b989      	cbnz	r1, bb036 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb012:	68a3      	ldr	r3, [r4, #8]
   bb014:	4543      	cmp	r3, r8
   bb016:	d30e      	bcc.n	bb036 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bb018:	f88d 9020 	strb.w	r9, [sp, #32]
   bb01c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bb020:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bb024:	89a3      	ldrh	r3, [r4, #12]
   bb026:	429a      	cmp	r2, r3
   bb028:	d105      	bne.n	bb036 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bb02a:	9b04      	ldr	r3, [sp, #16]
   bb02c:	4543      	cmp	r3, r8
   bb02e:	d102      	bne.n	bb036 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bb030:	e7c9      	b.n	bafc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bb032:	2900      	cmp	r1, #0
   bb034:	d1f9      	bne.n	bb02a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bb036:	2300      	movs	r3, #0
   bb038:	9301      	str	r3, [sp, #4]
   bb03a:	7b63      	ldrb	r3, [r4, #13]
   bb03c:	9300      	str	r3, [sp, #0]
   bb03e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb042:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bb044:	7830      	ldrb	r0, [r6, #0]
   bb046:	f7fd fd3f 	bl	b8ac8 <hal_spi_set_settings>
   bb04a:	e7bc      	b.n	bafc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bb04c:	e9cd 5500 	strd	r5, r5, [sp]
   bb050:	462b      	mov	r3, r5
   bb052:	462a      	mov	r2, r5
   bb054:	2101      	movs	r1, #1
   bb056:	e7f5      	b.n	bb044 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bb058 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bb058:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bb05a:	7800      	ldrb	r0, [r0, #0]
   bb05c:	f7fd fd14 	bl	b8a88 <hal_spi_transfer>
}
   bb060:	b2c0      	uxtb	r0, r0
   bb062:	bd08      	pop	{r3, pc}

000bb064 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bb064:	4770      	bx	lr

000bb066 <_ZN8SPIClass15detachInterruptEv>:
   bb066:	4770      	bx	lr

000bb068 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bb068:	b510      	push	{r4, lr}
   bb06a:	4604      	mov	r4, r0
{
	free(buffer);
   bb06c:	6800      	ldr	r0, [r0, #0]
   bb06e:	f7fd ff29 	bl	b8ec4 <free>
}
   bb072:	4620      	mov	r0, r4
   bb074:	bd10      	pop	{r4, pc}

000bb076 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bb076:	b510      	push	{r4, lr}
   bb078:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bb07a:	6800      	ldr	r0, [r0, #0]
   bb07c:	b108      	cbz	r0, bb082 <_ZN6String10invalidateEv+0xc>
   bb07e:	f7fd ff21 	bl	b8ec4 <free>
	buffer = NULL;
   bb082:	2300      	movs	r3, #0
	capacity = len = 0;
   bb084:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bb088:	6023      	str	r3, [r4, #0]
}
   bb08a:	bd10      	pop	{r4, pc}

000bb08c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bb08c:	b538      	push	{r3, r4, r5, lr}
   bb08e:	4604      	mov	r4, r0
   bb090:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bb092:	6800      	ldr	r0, [r0, #0]
   bb094:	3101      	adds	r1, #1
   bb096:	f7fd ff1d 	bl	b8ed4 <realloc>
	if (newbuffer) {
   bb09a:	b110      	cbz	r0, bb0a2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bb09c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bb0a0:	2001      	movs	r0, #1
	}
	return 0;
}
   bb0a2:	bd38      	pop	{r3, r4, r5, pc}

000bb0a4 <_ZN6String7reserveEj>:
{
   bb0a4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bb0a6:	6803      	ldr	r3, [r0, #0]
{
   bb0a8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bb0aa:	b123      	cbz	r3, bb0b6 <_ZN6String7reserveEj+0x12>
   bb0ac:	6843      	ldr	r3, [r0, #4]
   bb0ae:	428b      	cmp	r3, r1
   bb0b0:	d301      	bcc.n	bb0b6 <_ZN6String7reserveEj+0x12>
   bb0b2:	2001      	movs	r0, #1
}
   bb0b4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bb0b6:	4620      	mov	r0, r4
   bb0b8:	f7ff ffe8 	bl	bb08c <_ZN6String12changeBufferEj>
   bb0bc:	2800      	cmp	r0, #0
   bb0be:	d0f9      	beq.n	bb0b4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bb0c0:	68a3      	ldr	r3, [r4, #8]
   bb0c2:	2b00      	cmp	r3, #0
   bb0c4:	d1f5      	bne.n	bb0b2 <_ZN6String7reserveEj+0xe>
   bb0c6:	6822      	ldr	r2, [r4, #0]
   bb0c8:	7013      	strb	r3, [r2, #0]
   bb0ca:	e7f2      	b.n	bb0b2 <_ZN6String7reserveEj+0xe>

000bb0cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bb0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb0ce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bb0d0:	4611      	mov	r1, r2
   bb0d2:	9201      	str	r2, [sp, #4]
{
   bb0d4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bb0d6:	f7ff ffe5 	bl	bb0a4 <_ZN6String7reserveEj>
   bb0da:	9a01      	ldr	r2, [sp, #4]
   bb0dc:	b928      	cbnz	r0, bb0ea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bb0de:	4620      	mov	r0, r4
   bb0e0:	f7ff ffc9 	bl	bb076 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bb0e4:	4620      	mov	r0, r4
   bb0e6:	b003      	add	sp, #12
   bb0e8:	bd30      	pop	{r4, r5, pc}
	len = length;
   bb0ea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bb0ec:	4629      	mov	r1, r5
   bb0ee:	6820      	ldr	r0, [r4, #0]
   bb0f0:	f002 fb9a 	bl	bd828 <memcpy>
	buffer[len] = 0;
   bb0f4:	6822      	ldr	r2, [r4, #0]
   bb0f6:	68a3      	ldr	r3, [r4, #8]
   bb0f8:	2100      	movs	r1, #0
   bb0fa:	54d1      	strb	r1, [r2, r3]
	return *this;
   bb0fc:	e7f2      	b.n	bb0e4 <_ZN6String4copyEPKcj+0x18>

000bb0fe <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bb0fe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bb100:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bb102:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bb106:	4604      	mov	r4, r0
	len = 0;
   bb108:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb10a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bb10c:	b141      	cbz	r1, bb120 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bb10e:	4608      	mov	r0, r1
   bb110:	9101      	str	r1, [sp, #4]
   bb112:	f002 fc4e 	bl	bd9b2 <strlen>
   bb116:	9901      	ldr	r1, [sp, #4]
   bb118:	4602      	mov	r2, r0
   bb11a:	4620      	mov	r0, r4
   bb11c:	f7ff ffd6 	bl	bb0cc <_ZN6String4copyEPKcj>
}
   bb120:	4620      	mov	r0, r4
   bb122:	b002      	add	sp, #8
   bb124:	bd10      	pop	{r4, pc}

000bb126 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bb126:	b538      	push	{r3, r4, r5, lr}
   bb128:	4605      	mov	r5, r0
	if (buffer) {
   bb12a:	6800      	ldr	r0, [r0, #0]
{
   bb12c:	460c      	mov	r4, r1
	if (buffer) {
   bb12e:	b168      	cbz	r0, bb14c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bb130:	686a      	ldr	r2, [r5, #4]
   bb132:	688b      	ldr	r3, [r1, #8]
   bb134:	429a      	cmp	r2, r3
   bb136:	d307      	bcc.n	bb148 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bb138:	6809      	ldr	r1, [r1, #0]
   bb13a:	f002 fc32 	bl	bd9a2 <strcpy>
			len = rhs.len;
   bb13e:	68a3      	ldr	r3, [r4, #8]
   bb140:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bb142:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bb144:	60a3      	str	r3, [r4, #8]
}
   bb146:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bb148:	f7fd febc 	bl	b8ec4 <free>
	buffer = rhs.buffer;
   bb14c:	6823      	ldr	r3, [r4, #0]
   bb14e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bb150:	6863      	ldr	r3, [r4, #4]
   bb152:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bb154:	68a3      	ldr	r3, [r4, #8]
   bb156:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bb158:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bb15a:	e9c4 3300 	strd	r3, r3, [r4]
   bb15e:	e7f1      	b.n	bb144 <_ZN6String4moveERS_+0x1e>

000bb160 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bb160:	b510      	push	{r4, lr}
	buffer = NULL;
   bb162:	2300      	movs	r3, #0
	capacity = 0;
   bb164:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bb168:	4604      	mov	r4, r0
	len = 0;
   bb16a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb16c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bb16e:	f7ff ffda 	bl	bb126 <_ZN6String4moveERS_>
}
   bb172:	4620      	mov	r0, r4
   bb174:	bd10      	pop	{r4, pc}

000bb176 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bb176:	4288      	cmp	r0, r1
{
   bb178:	b510      	push	{r4, lr}
   bb17a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bb17c:	d005      	beq.n	bb18a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bb17e:	680b      	ldr	r3, [r1, #0]
   bb180:	b12b      	cbz	r3, bb18e <_ZN6StringaSERKS_+0x18>
   bb182:	688a      	ldr	r2, [r1, #8]
   bb184:	4619      	mov	r1, r3
   bb186:	f7ff ffa1 	bl	bb0cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb18a:	4620      	mov	r0, r4
   bb18c:	bd10      	pop	{r4, pc}
	else invalidate();
   bb18e:	f7ff ff72 	bl	bb076 <_ZN6String10invalidateEv>
   bb192:	e7fa      	b.n	bb18a <_ZN6StringaSERKS_+0x14>

000bb194 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bb194:	b510      	push	{r4, lr}
	buffer = NULL;
   bb196:	2300      	movs	r3, #0
String::String(const String &value)
   bb198:	4604      	mov	r4, r0
	capacity = 0;
   bb19a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bb19e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb1a0:	7303      	strb	r3, [r0, #12]
	*this = value;
   bb1a2:	f7ff ffe8 	bl	bb176 <_ZN6StringaSERKS_>
}
   bb1a6:	4620      	mov	r0, r4
   bb1a8:	bd10      	pop	{r4, pc}

000bb1aa <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bb1aa:	b558      	push	{r3, r4, r6, lr}
   bb1ac:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bb1ae:	b12a      	cbz	r2, bb1bc <_ZNK6String8getBytesEPhjj+0x12>
   bb1b0:	b121      	cbz	r1, bb1bc <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bb1b2:	6884      	ldr	r4, [r0, #8]
   bb1b4:	42a3      	cmp	r3, r4
   bb1b6:	d302      	bcc.n	bb1be <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bb1b8:	2300      	movs	r3, #0
   bb1ba:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bb1bc:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bb1be:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bb1c0:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bb1c2:	6801      	ldr	r1, [r0, #0]
   bb1c4:	4294      	cmp	r4, r2
   bb1c6:	bf28      	it	cs
   bb1c8:	4614      	movcs	r4, r2
   bb1ca:	4419      	add	r1, r3
   bb1cc:	4622      	mov	r2, r4
   bb1ce:	4630      	mov	r0, r6
   bb1d0:	f002 fc0b 	bl	bd9ea <strncpy>
	buf[n] = 0;
   bb1d4:	2300      	movs	r3, #0
   bb1d6:	5533      	strb	r3, [r6, r4]
   bb1d8:	e7f0      	b.n	bb1bc <_ZNK6String8getBytesEPhjj+0x12>
	...

000bb1dc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bb1dc:	b40e      	push	{r1, r2, r3}
   bb1de:	b570      	push	{r4, r5, r6, lr}
   bb1e0:	b087      	sub	sp, #28
   bb1e2:	ad0b      	add	r5, sp, #44	; 0x2c
   bb1e4:	4604      	mov	r4, r0
   bb1e6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb1ea:	9201      	str	r2, [sp, #4]
   bb1ec:	462b      	mov	r3, r5
   bb1ee:	2105      	movs	r1, #5
   bb1f0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bb1f2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb1f4:	f7fd fe86 	bl	b8f04 <vsnprintf>
    va_end(marker);

    String result;
   bb1f8:	490b      	ldr	r1, [pc, #44]	; (bb228 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb1fa:	4606      	mov	r6, r0
    String result;
   bb1fc:	4620      	mov	r0, r4
   bb1fe:	f7ff ff7e 	bl	bb0fe <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bb202:	4631      	mov	r1, r6
   bb204:	4620      	mov	r0, r4
   bb206:	f7ff ff4d 	bl	bb0a4 <_ZN6String7reserveEj>
    if (result.buffer) {
   bb20a:	6820      	ldr	r0, [r4, #0]
   bb20c:	b130      	cbz	r0, bb21c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb20e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bb210:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb212:	462b      	mov	r3, r5
   bb214:	1c71      	adds	r1, r6, #1
   bb216:	f7fd fe75 	bl	b8f04 <vsnprintf>
        va_end(marker);
        result.len = n;
   bb21a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bb21c:	4620      	mov	r0, r4
   bb21e:	b007      	add	sp, #28
   bb220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb224:	b003      	add	sp, #12
   bb226:	4770      	bx	lr
   bb228:	000bee35 	.word	0x000bee35

000bb22c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bb22c:	b510      	push	{r4, lr}
   bb22e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bb230:	6800      	ldr	r0, [r0, #0]
   bb232:	b118      	cbz	r0, bb23c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bb234:	f7fd fe46 	bl	b8ec4 <free>
            wakeupSource_ = nullptr;
   bb238:	2300      	movs	r3, #0
   bb23a:	6023      	str	r3, [r4, #0]
        }
    }
   bb23c:	bd10      	pop	{r4, pc}

000bb23e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bb23e:	b538      	push	{r3, r4, r5, lr}
   bb240:	460c      	mov	r4, r1
   bb242:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb244:	f7ff fff2 	bl	bb22c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bb248:	b154      	cbz	r4, bb260 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bb24a:	8820      	ldrh	r0, [r4, #0]
   bb24c:	f7fd fe32 	bl	b8eb4 <malloc>
   bb250:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bb252:	b128      	cbz	r0, bb260 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bb254:	8822      	ldrh	r2, [r4, #0]
   bb256:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bb258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bb25c:	f002 bae4 	b.w	bd828 <memcpy>
    }
   bb260:	bd38      	pop	{r3, r4, r5, pc}

000bb262 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb262:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bb264:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bb268:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bb26a:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bb26e:	f8c0 3006 	str.w	r3, [r0, #6]
   bb272:	894b      	ldrh	r3, [r1, #10]
   bb274:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb276:	460c      	mov	r4, r1
   bb278:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb27a:	f7ff ffd7 	bl	bb22c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bb27e:	6823      	ldr	r3, [r4, #0]
   bb280:	b113      	cbz	r3, bb288 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bb282:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bb284:	2300      	movs	r3, #0
   bb286:	6023      	str	r3, [r4, #0]
    }
   bb288:	bd38      	pop	{r3, r4, r5, pc}

000bb28a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bb28a:	b507      	push	{r0, r1, r2, lr}
   bb28c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb28e:	2100      	movs	r1, #0
{
   bb290:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb292:	9100      	str	r1, [sp, #0]
   bb294:	2001      	movs	r0, #1
   bb296:	218c      	movs	r1, #140	; 0x8c
   bb298:	f7fd fd6a 	bl	b8d70 <system_reset>
}
   bb29c:	b003      	add	sp, #12
   bb29e:	f85d fb04 	ldr.w	pc, [sp], #4

000bb2a2 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bb2a2:	4601      	mov	r1, r0
    reset(0, flags);
   bb2a4:	2000      	movs	r0, #0
   bb2a6:	f7ff bff0 	b.w	bb28a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bb2aa <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bb2aa:	2000      	movs	r0, #0
   bb2ac:	f7ff bff9 	b.w	bb2a2 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bb2b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bb2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb2b2:	4d2b      	ldr	r5, [pc, #172]	; (bb360 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bb2b4:	7d0b      	ldrb	r3, [r1, #20]
   bb2b6:	4604      	mov	r4, r0
   bb2b8:	b08b      	sub	sp, #44	; 0x2c
   bb2ba:	4608      	mov	r0, r1
   bb2bc:	1daf      	adds	r7, r5, #6
   bb2be:	2b00      	cmp	r3, #0
   bb2c0:	d036      	beq.n	bb330 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bb2c2:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bb2c4:	791b      	ldrb	r3, [r3, #4]
   bb2c6:	2b00      	cmp	r3, #0
   bb2c8:	d032      	beq.n	bb330 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bb2ca:	4b26      	ldr	r3, [pc, #152]	; (bb364 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bb2cc:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bb2ce:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bb2d0:	a902      	add	r1, sp, #8
   bb2d2:	3004      	adds	r0, #4
   bb2d4:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bb2d8:	f7fd fd40 	bl	b8d5c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bb2dc:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bb2e0:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bb2e4:	b200      	sxth	r0, r0
   bb2e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bb2ea:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bb2ee:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bb2f0:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bb2f2:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb2f4:	4628      	mov	r0, r5
   bb2f6:	f7ff ffa2 	bl	bb23e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bb2fa:	a802      	add	r0, sp, #8
   bb2fc:	f7ff ff96 	bl	bb22c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bb300:	2300      	movs	r3, #0
   bb302:	6023      	str	r3, [r4, #0]
   bb304:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bb306:	71a3      	strb	r3, [r4, #6]
   bb308:	8123      	strh	r3, [r4, #8]
   bb30a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bb30e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bb310:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bb314:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bb316:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bb31a:	f8c4 3006 	str.w	r3, [r4, #6]
   bb31e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb320:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bb322:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bb324:	4620      	mov	r0, r4
   bb326:	f7ff ff8a 	bl	bb23e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bb32a:	4620      	mov	r0, r4
   bb32c:	b00b      	add	sp, #44	; 0x2c
   bb32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bb330:	2600      	movs	r6, #0
   bb332:	2320      	movs	r3, #32
   bb334:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bb338:	4b0b      	ldr	r3, [pc, #44]	; (bb368 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bb33a:	9300      	str	r3, [sp, #0]
   bb33c:	aa02      	add	r2, sp, #8
   bb33e:	4633      	mov	r3, r6
   bb340:	490a      	ldr	r1, [pc, #40]	; (bb36c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bb342:	2032      	movs	r0, #50	; 0x32
   bb344:	f7fd fc78 	bl	b8c38 <log_message>
            : wakeupSource_(nullptr),
   bb348:	4b06      	ldr	r3, [pc, #24]	; (bb364 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bb34a:	4805      	ldr	r0, [pc, #20]	; (bb360 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bb34c:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bb34e:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bb352:	a902      	add	r1, sp, #8
   bb354:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bb358:	f7ff ff83 	bl	bb262 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bb35c:	e7cd      	b.n	bb2fa <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bb35e:	bf00      	nop
   bb360:	2003e698 	.word	0x2003e698
   bb364:	ffff0000 	.word	0xffff0000
   bb368:	000bef1b 	.word	0x000bef1b
   bb36c:	000bef14 	.word	0x000bef14

000bb370 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bb370:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bb372:	2420      	movs	r4, #32
{
   bb374:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bb376:	4622      	mov	r2, r4
   bb378:	2100      	movs	r1, #0
   bb37a:	4668      	mov	r0, sp
   bb37c:	f002 fa7c 	bl	bd878 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bb380:	2100      	movs	r1, #0
   bb382:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bb384:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bb388:	f7fd fa5e 	bl	b8848 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bb38c:	9801      	ldr	r0, [sp, #4]
   bb38e:	b008      	add	sp, #32
   bb390:	bd10      	pop	{r4, pc}
	...

000bb394 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb394:	4b05      	ldr	r3, [pc, #20]	; (bb3ac <_GLOBAL__sub_I_System+0x18>)
   bb396:	2202      	movs	r2, #2
   bb398:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bb39a:	4b05      	ldr	r3, [pc, #20]	; (bb3b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb39c:	4a05      	ldr	r2, [pc, #20]	; (bb3b4 <_GLOBAL__sub_I_System+0x20>)
   bb39e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb3a0:	2000      	movs	r0, #0
   bb3a2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb3a6:	f7fd bc83 	b.w	b8cb0 <set_system_mode>
   bb3aa:	bf00      	nop
   bb3ac:	2003e6a4 	.word	0x2003e6a4
   bb3b0:	2003e698 	.word	0x2003e698
   bb3b4:	ffff0000 	.word	0xffff0000

000bb3b8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb3bc:	4a15      	ldr	r2, [pc, #84]	; (bb414 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb3be:	f8df 8060 	ldr.w	r8, [pc, #96]	; bb420 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb3c2:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb3c6:	1980      	adds	r0, r0, r6
   bb3c8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb3cc:	4b12      	ldr	r3, [pc, #72]	; (bb418 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb3ce:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb3d2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb3d6:	1986      	adds	r6, r0, r6
   bb3d8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb3dc:	42bb      	cmp	r3, r7
   bb3de:	bf08      	it	eq
   bb3e0:	42b2      	cmpeq	r2, r6
{
   bb3e2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb3e4:	d013      	beq.n	bb40e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb3e6:	a903      	add	r1, sp, #12
   bb3e8:	4668      	mov	r0, sp
   bb3ea:	e9cd 6700 	strd	r6, r7, [sp]
   bb3ee:	f7fd fdb9 	bl	b8f64 <localtime_r>
	calendar_time.tm_year += 1900;
   bb3f2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb3f4:	4d09      	ldr	r5, [pc, #36]	; (bb41c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb3f6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb3fa:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb3fc:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb3fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb406:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb40a:	6823      	ldr	r3, [r4, #0]
   bb40c:	602b      	str	r3, [r5, #0]
    }
}
   bb40e:	b00c      	add	sp, #48	; 0x30
   bb410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb414:	2003e6e0 	.word	0x2003e6e0
   bb418:	2003e6d8 	.word	0x2003e6d8
   bb41c:	2003e6b0 	.word	0x2003e6b0
   bb420:	2003e6e8 	.word	0x2003e6e8

000bb424 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bb424:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb426:	2000      	movs	r0, #0
   bb428:	f7fd fccc 	bl	b8dc4 <spark_sync_time_pending>
   bb42c:	b128      	cbz	r0, bb43a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb42e:	f7fd fcb9 	bl	b8da4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb432:	f080 0001 	eor.w	r0, r0, #1
   bb436:	b2c0      	uxtb	r0, r0
    }
   bb438:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb43a:	2001      	movs	r0, #1
   bb43c:	e7fc      	b.n	bb438 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000bb43e <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bb43e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb440:	4602      	mov	r2, r0
   bb442:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb444:	4668      	mov	r0, sp
    struct timeval tv = {
   bb446:	2100      	movs	r1, #0
    };
   bb448:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bb44c:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb450:	f7fd fa3a 	bl	b88c8 <hal_rtc_set_time>
   bb454:	4602      	mov	r2, r0
   bb456:	b910      	cbnz	r0, bb45e <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bb458:	4601      	mov	r1, r0
   bb45a:	f7fd fc51 	bl	b8d00 <system_notify_time_changed>
    }
}
   bb45e:	b005      	add	sp, #20
   bb460:	f85d fb04 	ldr.w	pc, [sp], #4

000bb464 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bb464:	b530      	push	{r4, r5, lr}
   bb466:	b093      	sub	sp, #76	; 0x4c
   bb468:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bb46c:	4b19      	ldr	r3, [pc, #100]	; (bb4d4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bb46e:	4604      	mov	r4, r0
    t += time_zone_cache;
   bb470:	e9d3 1000 	ldrd	r1, r0, [r3]
   bb474:	9b01      	ldr	r3, [sp, #4]
   bb476:	1852      	adds	r2, r2, r1
   bb478:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bb47c:	4816      	ldr	r0, [pc, #88]	; (bb4d8 <_ZN9TimeClass7timeStrEx+0x74>)
   bb47e:	e9d0 1000 	ldrd	r1, r0, [r0]
   bb482:	1852      	adds	r2, r2, r1
   bb484:	eb43 0300 	adc.w	r3, r3, r0
   bb488:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bb48c:	2224      	movs	r2, #36	; 0x24
   bb48e:	eb0d 0002 	add.w	r0, sp, r2
   bb492:	2100      	movs	r1, #0
   bb494:	f002 f9f0 	bl	bd878 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bb498:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bb49a:	a909      	add	r1, sp, #36	; 0x24
   bb49c:	4668      	mov	r0, sp
   bb49e:	f7fd fd61 	bl	b8f64 <localtime_r>
    char ascstr[26] = {};
   bb4a2:	2216      	movs	r2, #22
   bb4a4:	4629      	mov	r1, r5
   bb4a6:	a803      	add	r0, sp, #12
   bb4a8:	9502      	str	r5, [sp, #8]
   bb4aa:	f002 f9e5 	bl	bd878 <memset>
    asctime_r(&calendar_time, ascstr);
   bb4ae:	a902      	add	r1, sp, #8
   bb4b0:	a809      	add	r0, sp, #36	; 0x24
   bb4b2:	f002 f967 	bl	bd784 <asctime_r>
    int len = strlen(ascstr);
   bb4b6:	a802      	add	r0, sp, #8
   bb4b8:	f002 fa7b 	bl	bd9b2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bb4bc:	ab12      	add	r3, sp, #72	; 0x48
   bb4be:	4418      	add	r0, r3
    return String(ascstr);
   bb4c0:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bb4c2:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bb4c6:	4620      	mov	r0, r4
   bb4c8:	f7ff fe19 	bl	bb0fe <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb4cc:	4620      	mov	r0, r4
   bb4ce:	b013      	add	sp, #76	; 0x4c
   bb4d0:	bd30      	pop	{r4, r5, pc}
   bb4d2:	bf00      	nop
   bb4d4:	2003e6e0 	.word	0x2003e6e0
   bb4d8:	2003e6d8 	.word	0x2003e6d8

000bb4dc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bb4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb4e0:	b0a4      	sub	sp, #144	; 0x90
   bb4e2:	4607      	mov	r7, r0
   bb4e4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb4e6:	a814      	add	r0, sp, #80	; 0x50
{
   bb4e8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb4ea:	223f      	movs	r2, #63	; 0x3f
{
   bb4ec:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb4ee:	f002 fa7c 	bl	bd9ea <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb4f2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb4f4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb4f6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb4fa:	f002 fa5a 	bl	bd9b2 <strlen>
   bb4fe:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bb500:	bb4c      	cbnz	r4, bb556 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bb502:	4929      	ldr	r1, [pc, #164]	; (bb5a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bb504:	a803      	add	r0, sp, #12
   bb506:	f002 fa4c 	bl	bd9a2 <strcpy>
   bb50a:	ac14      	add	r4, sp, #80	; 0x50
{
   bb50c:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bb50e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bb512:	45b1      	cmp	r9, r6
   bb514:	d934      	bls.n	bb580 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bb516:	7823      	ldrb	r3, [r4, #0]
   bb518:	2b25      	cmp	r3, #37	; 0x25
   bb51a:	f106 0a01 	add.w	sl, r6, #1
   bb51e:	d117      	bne.n	bb550 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bb520:	7863      	ldrb	r3, [r4, #1]
   bb522:	2b7a      	cmp	r3, #122	; 0x7a
   bb524:	d114      	bne.n	bb550 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bb526:	a803      	add	r0, sp, #12
   bb528:	f002 fa43 	bl	bd9b2 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb52c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bb52e:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb530:	1830      	adds	r0, r6, r0
   bb532:	4418      	add	r0, r3
   bb534:	eba9 0206 	sub.w	r2, r9, r6
   bb538:	1ca1      	adds	r1, r4, #2
   bb53a:	f002 f975 	bl	bd828 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb53e:	462a      	mov	r2, r5
   bb540:	a903      	add	r1, sp, #12
   bb542:	4620      	mov	r0, r4
   bb544:	f002 f970 	bl	bd828 <memcpy>
            len = strlen(format_str);
   bb548:	a814      	add	r0, sp, #80	; 0x50
   bb54a:	f002 fa32 	bl	bd9b2 <strlen>
   bb54e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bb550:	3401      	adds	r4, #1
   bb552:	4656      	mov	r6, sl
   bb554:	e7db      	b.n	bb50e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bb556:	233c      	movs	r3, #60	; 0x3c
   bb558:	fb94 f2f3 	sdiv	r2, r4, r3
   bb55c:	2a00      	cmp	r2, #0
   bb55e:	bfb8      	it	lt
   bb560:	4252      	neglt	r2, r2
   bb562:	fbb2 f1f3 	udiv	r1, r2, r3
   bb566:	fb03 2211 	mls	r2, r3, r1, r2
   bb56a:	9200      	str	r2, [sp, #0]
   bb56c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bb570:	4a0e      	ldr	r2, [pc, #56]	; (bb5ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bb572:	fb94 f3f3 	sdiv	r3, r4, r3
   bb576:	2110      	movs	r1, #16
   bb578:	a803      	add	r0, sp, #12
   bb57a:	f7fd fcbb 	bl	b8ef4 <snprintf>
   bb57e:	e7c4      	b.n	bb50a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bb580:	2100      	movs	r1, #0
   bb582:	222e      	movs	r2, #46	; 0x2e
   bb584:	a808      	add	r0, sp, #32
   bb586:	9107      	str	r1, [sp, #28]
   bb588:	f002 f976 	bl	bd878 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bb58c:	4643      	mov	r3, r8
   bb58e:	aa14      	add	r2, sp, #80	; 0x50
   bb590:	2132      	movs	r1, #50	; 0x32
   bb592:	a807      	add	r0, sp, #28
   bb594:	f7fd fcde 	bl	b8f54 <strftime>
    return String(buf);
   bb598:	a907      	add	r1, sp, #28
   bb59a:	4638      	mov	r0, r7
   bb59c:	f7ff fdaf 	bl	bb0fe <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb5a0:	4638      	mov	r0, r7
   bb5a2:	b024      	add	sp, #144	; 0x90
   bb5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb5a8:	000bef42 	.word	0x000bef42
   bb5ac:	000bef44 	.word	0x000bef44

000bb5b0 <_ZN9TimeClass6formatExPKc>:
{
   bb5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb5b2:	b08d      	sub	sp, #52	; 0x34
   bb5b4:	e9cd 2300 	strd	r2, r3, [sp]
   bb5b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bb5ba:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bb5bc:	b915      	cbnz	r5, bb5c4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bb5be:	4b19      	ldr	r3, [pc, #100]	; (bb624 <_ZN9TimeClass6formatExPKc+0x74>)
   bb5c0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bb5c2:	b12d      	cbz	r5, bb5d0 <_ZN9TimeClass6formatExPKc+0x20>
   bb5c4:	4b18      	ldr	r3, [pc, #96]	; (bb628 <_ZN9TimeClass6formatExPKc+0x78>)
   bb5c6:	4628      	mov	r0, r5
   bb5c8:	6819      	ldr	r1, [r3, #0]
   bb5ca:	f002 f9e0 	bl	bd98e <strcmp>
   bb5ce:	b938      	cbnz	r0, bb5e0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bb5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
   bb5d4:	4620      	mov	r0, r4
   bb5d6:	f7ff ff45 	bl	bb464 <_ZN9TimeClass7timeStrEx>
}
   bb5da:	4620      	mov	r0, r4
   bb5dc:	b00d      	add	sp, #52	; 0x34
   bb5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bb5e0:	4e12      	ldr	r6, [pc, #72]	; (bb62c <_ZN9TimeClass6formatExPKc+0x7c>)
   bb5e2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bb5e4:	4f12      	ldr	r7, [pc, #72]	; (bb630 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bb5e6:	e9d6 3200 	ldrd	r3, r2, [r6]
   bb5ea:	185b      	adds	r3, r3, r1
   bb5ec:	9901      	ldr	r1, [sp, #4]
   bb5ee:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bb5f2:	e9d7 0100 	ldrd	r0, r1, [r7]
   bb5f6:	181b      	adds	r3, r3, r0
   bb5f8:	eb42 0201 	adc.w	r2, r2, r1
   bb5fc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bb600:	2100      	movs	r1, #0
   bb602:	2224      	movs	r2, #36	; 0x24
   bb604:	a803      	add	r0, sp, #12
   bb606:	f002 f937 	bl	bd878 <memset>
    localtime_r(&t, &calendar_time);
   bb60a:	a903      	add	r1, sp, #12
   bb60c:	4668      	mov	r0, sp
   bb60e:	f7fd fca9 	bl	b8f64 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bb612:	6832      	ldr	r2, [r6, #0]
   bb614:	683b      	ldr	r3, [r7, #0]
   bb616:	a903      	add	r1, sp, #12
   bb618:	4413      	add	r3, r2
   bb61a:	4620      	mov	r0, r4
   bb61c:	462a      	mov	r2, r5
   bb61e:	f7ff ff5d 	bl	bb4dc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bb622:	e7da      	b.n	bb5da <_ZN9TimeClass6formatExPKc+0x2a>
   bb624:	2003e6ac 	.word	0x2003e6ac
   bb628:	2003dec8 	.word	0x2003dec8
   bb62c:	2003e6e0 	.word	0x2003e6e0
   bb630:	2003e6d8 	.word	0x2003e6d8

000bb634 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bb634:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bb636:	2000      	movs	r0, #0
   bb638:	f7fd f92e 	bl	b8898 <hal_rtc_time_is_valid>
    if (rtcstate)
   bb63c:	4604      	mov	r4, r0
   bb63e:	b9a0      	cbnz	r0, bb66a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bb640:	f7fd fb2e 	bl	b8ca0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bb644:	2801      	cmp	r0, #1
   bb646:	d110      	bne.n	bb66a <_ZN9TimeClass7isValidEv+0x36>
   bb648:	4620      	mov	r0, r4
   bb64a:	f7fd fb51 	bl	b8cf0 <system_thread_get_state>
   bb64e:	b960      	cbnz	r0, bb66a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bb650:	f7ff fee8 	bl	bb424 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bb654:	b910      	cbnz	r0, bb65c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bb656:	f7fd fb95 	bl	b8d84 <spark_process>
        while (_while() && !_condition()) {
   bb65a:	e7f9      	b.n	bb650 <_ZN9TimeClass7isValidEv+0x1c>
   bb65c:	f7ff fee2 	bl	bb424 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bb660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bb664:	2000      	movs	r0, #0
   bb666:	f7fd b917 	b.w	b8898 <hal_rtc_time_is_valid>
}
   bb66a:	4620      	mov	r0, r4
   bb66c:	bd10      	pop	{r4, pc}

000bb66e <_ZN9TimeClass3nowEv>:
{
   bb66e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bb670:	f7ff ffe0 	bl	bb634 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bb674:	2210      	movs	r2, #16
   bb676:	2100      	movs	r1, #0
   bb678:	4668      	mov	r0, sp
   bb67a:	f002 f8fd 	bl	bd878 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bb67e:	2100      	movs	r1, #0
   bb680:	4668      	mov	r0, sp
   bb682:	f7fd f919 	bl	b88b8 <hal_rtc_get_time>
}
   bb686:	9800      	ldr	r0, [sp, #0]
   bb688:	b005      	add	sp, #20
   bb68a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb690 <_ZN9TimeClass4hourEv>:
{
   bb690:	b508      	push	{r3, lr}
	return hour(now());
   bb692:	f7ff ffec 	bl	bb66e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bb696:	17c1      	asrs	r1, r0, #31
   bb698:	f7ff fe8e 	bl	bb3b8 <_ZL22Refresh_UnixTime_Cachex>
}
   bb69c:	4b01      	ldr	r3, [pc, #4]	; (bb6a4 <_ZN9TimeClass4hourEv+0x14>)
   bb69e:	6898      	ldr	r0, [r3, #8]
   bb6a0:	bd08      	pop	{r3, pc}
   bb6a2:	bf00      	nop
   bb6a4:	2003e6b0 	.word	0x2003e6b0

000bb6a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb6a8:	4b02      	ldr	r3, [pc, #8]	; (bb6b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb6aa:	681a      	ldr	r2, [r3, #0]
   bb6ac:	4b02      	ldr	r3, [pc, #8]	; (bb6b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb6ae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb6b0:	4770      	bx	lr
   bb6b2:	bf00      	nop
   bb6b4:	2003dec8 	.word	0x2003dec8
   bb6b8:	2003e6ac 	.word	0x2003e6ac

000bb6bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb6bc:	4770      	bx	lr

000bb6be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb6be:	7441      	strb	r1, [r0, #17]
}
   bb6c0:	4770      	bx	lr

000bb6c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb6c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb6c4:	7c00      	ldrb	r0, [r0, #16]
   bb6c6:	f7fd fa4f 	bl	b8b68 <hal_usart_available_data_for_write>
}
   bb6ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb6ce:	bd08      	pop	{r3, pc}

000bb6d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb6d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb6d2:	7c00      	ldrb	r0, [r0, #16]
   bb6d4:	f7fd fa20 	bl	b8b18 <hal_usart_available>
}
   bb6d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb6dc:	bd08      	pop	{r3, pc}

000bb6de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb6de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb6e0:	7c00      	ldrb	r0, [r0, #16]
   bb6e2:	f7fd fa29 	bl	b8b38 <hal_usart_peek>
}
   bb6e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb6ea:	bd08      	pop	{r3, pc}

000bb6ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb6ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb6ee:	7c00      	ldrb	r0, [r0, #16]
   bb6f0:	f7fd fa1a 	bl	b8b28 <hal_usart_read>
}
   bb6f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb6f8:	bd08      	pop	{r3, pc}

000bb6fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb6fa:	7c00      	ldrb	r0, [r0, #16]
   bb6fc:	f7fd ba24 	b.w	b8b48 <hal_usart_flush>

000bb700 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb700:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb702:	7c45      	ldrb	r5, [r0, #17]
{
   bb704:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb706:	b12d      	cbz	r5, bb714 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb708:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb70a:	b003      	add	sp, #12
   bb70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb710:	f7fd b9fa 	b.w	b8b08 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb714:	7c00      	ldrb	r0, [r0, #16]
   bb716:	9101      	str	r1, [sp, #4]
   bb718:	f7fd fa26 	bl	b8b68 <hal_usart_available_data_for_write>
   bb71c:	2800      	cmp	r0, #0
   bb71e:	9901      	ldr	r1, [sp, #4]
   bb720:	dcf2      	bgt.n	bb708 <_ZN11USARTSerial5writeEh+0x8>
}
   bb722:	4628      	mov	r0, r5
   bb724:	b003      	add	sp, #12
   bb726:	bd30      	pop	{r4, r5, pc}

000bb728 <_ZN11USARTSerialD0Ev>:
   bb728:	b510      	push	{r4, lr}
   bb72a:	2114      	movs	r1, #20
   bb72c:	4604      	mov	r4, r0
   bb72e:	f7f8 fcb6 	bl	b409e <_ZdlPvj>
   bb732:	4620      	mov	r0, r4
   bb734:	bd10      	pop	{r4, pc}
	...

000bb738 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb738:	b510      	push	{r4, lr}
   bb73a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb73e:	4604      	mov	r4, r0
   bb740:	4608      	mov	r0, r1
   bb742:	4611      	mov	r1, r2
   bb744:	2200      	movs	r2, #0
   bb746:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb74a:	4b04      	ldr	r3, [pc, #16]	; (bb75c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb74c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb74e:	2301      	movs	r3, #1
  _serial = serial;
   bb750:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb752:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb754:	f7fd fa18 	bl	b8b88 <hal_usart_init_ex>
}
   bb758:	4620      	mov	r0, r4
   bb75a:	bd10      	pop	{r4, pc}
   bb75c:	000bef74 	.word	0x000bef74

000bb760 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb760:	7c00      	ldrb	r0, [r0, #16]
   bb762:	2300      	movs	r3, #0
   bb764:	f7fd ba08 	b.w	b8b78 <hal_usart_begin_config>

000bb768 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb768:	2200      	movs	r2, #0
   bb76a:	f7ff bff9 	b.w	bb760 <_ZN11USARTSerial5beginEmm>

000bb76e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb76e:	7c00      	ldrb	r0, [r0, #16]
   bb770:	f7fd b9c2 	b.w	b8af8 <hal_usart_end>

000bb774 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb774:	7441      	strb	r1, [r0, #17]
}
   bb776:	4770      	bx	lr

000bb778 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb778:	4770      	bx	lr

000bb77a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb77a:	4770      	bx	lr

000bb77c <_ZN9USBSerial4readEv>:
{
   bb77c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb77e:	2100      	movs	r1, #0
   bb780:	7c00      	ldrb	r0, [r0, #16]
   bb782:	f7fd fa31 	bl	b8be8 <HAL_USB_USART_Receive_Data>
}
   bb786:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb78a:	bd08      	pop	{r3, pc}

000bb78c <_ZN9USBSerial4peekEv>:
{
   bb78c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb78e:	2101      	movs	r1, #1
   bb790:	7c00      	ldrb	r0, [r0, #16]
   bb792:	f7fd fa29 	bl	b8be8 <HAL_USB_USART_Receive_Data>
}
   bb796:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb79a:	bd08      	pop	{r3, pc}

000bb79c <_ZN9USBSerial17availableForWriteEv>:
{
   bb79c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb79e:	7c00      	ldrb	r0, [r0, #16]
   bb7a0:	f7fd fa1a 	bl	b8bd8 <HAL_USB_USART_Available_Data_For_Write>
}
   bb7a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb7a8:	bd08      	pop	{r3, pc}

000bb7aa <_ZN9USBSerial9availableEv>:
{
   bb7aa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb7ac:	7c00      	ldrb	r0, [r0, #16]
   bb7ae:	f7fd fa0b 	bl	b8bc8 <HAL_USB_USART_Available_Data>
}
   bb7b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb7b6:	bd08      	pop	{r3, pc}

000bb7b8 <_ZN9USBSerial5writeEh>:
{
   bb7b8:	b513      	push	{r0, r1, r4, lr}
   bb7ba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb7bc:	7c00      	ldrb	r0, [r0, #16]
{
   bb7be:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb7c0:	f7fd fa0a 	bl	b8bd8 <HAL_USB_USART_Available_Data_For_Write>
   bb7c4:	2800      	cmp	r0, #0
   bb7c6:	9901      	ldr	r1, [sp, #4]
   bb7c8:	dc01      	bgt.n	bb7ce <_ZN9USBSerial5writeEh+0x16>
   bb7ca:	7c60      	ldrb	r0, [r4, #17]
   bb7cc:	b120      	cbz	r0, bb7d8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb7ce:	7c20      	ldrb	r0, [r4, #16]
   bb7d0:	f7fd fa12 	bl	b8bf8 <HAL_USB_USART_Send_Data>
   bb7d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb7d8:	b002      	add	sp, #8
   bb7da:	bd10      	pop	{r4, pc}

000bb7dc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb7dc:	7c00      	ldrb	r0, [r0, #16]
   bb7de:	f7fd ba13 	b.w	b8c08 <HAL_USB_USART_Flush_Data>

000bb7e2 <_ZN9USBSerialD0Ev>:
   bb7e2:	b510      	push	{r4, lr}
   bb7e4:	2114      	movs	r1, #20
   bb7e6:	4604      	mov	r4, r0
   bb7e8:	f7f8 fc59 	bl	b409e <_ZdlPvj>
   bb7ec:	4620      	mov	r0, r4
   bb7ee:	bd10      	pop	{r4, pc}

000bb7f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb7f0:	b510      	push	{r4, lr}
   bb7f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb7f6:	4604      	mov	r4, r0
   bb7f8:	4608      	mov	r0, r1
   bb7fa:	2100      	movs	r1, #0
   bb7fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb800:	4b04      	ldr	r3, [pc, #16]	; (bb814 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb802:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb804:	2301      	movs	r3, #1
  _serial = serial;
   bb806:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb808:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb80a:	4611      	mov	r1, r2
   bb80c:	f7fd f9c4 	bl	b8b98 <HAL_USB_USART_Init>
}
   bb810:	4620      	mov	r0, r4
   bb812:	bd10      	pop	{r4, pc}
   bb814:	000befa4 	.word	0x000befa4

000bb818 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb818:	7c00      	ldrb	r0, [r0, #16]
   bb81a:	2200      	movs	r2, #0
   bb81c:	f7fd b9c4 	b.w	b8ba8 <HAL_USB_USART_Begin>

000bb820 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb820:	7c00      	ldrb	r0, [r0, #16]
   bb822:	f7fd b9c9 	b.w	b8bb8 <HAL_USB_USART_End>

000bb826 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb826:	7c00      	ldrb	r0, [r0, #16]
   bb828:	f7fd b9f6 	b.w	b8c18 <HAL_USB_USART_Is_Connected>

000bb82c <_Z19acquireSerialBufferv>:
{
   bb82c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb82e:	2214      	movs	r2, #20
{
   bb830:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb832:	2100      	movs	r1, #0
   bb834:	f002 f820 	bl	bd878 <memset>
}
   bb838:	4620      	mov	r0, r4
   bb83a:	bd10      	pop	{r4, pc}

000bb83c <_Z16_fetch_usbserialv>:
{
   bb83c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb83e:	4c0f      	ldr	r4, [pc, #60]	; (bb87c <_Z16_fetch_usbserialv+0x40>)
{
   bb840:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb842:	a803      	add	r0, sp, #12
   bb844:	f7ff fff2 	bl	bb82c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb848:	7821      	ldrb	r1, [r4, #0]
   bb84a:	f3bf 8f5b 	dmb	ish
   bb84e:	f011 0101 	ands.w	r1, r1, #1
   bb852:	d10f      	bne.n	bb874 <_Z16_fetch_usbserialv+0x38>
   bb854:	4620      	mov	r0, r4
   bb856:	9101      	str	r1, [sp, #4]
   bb858:	f7f8 fc30 	bl	b40bc <__cxa_guard_acquire>
   bb85c:	9901      	ldr	r1, [sp, #4]
   bb85e:	b148      	cbz	r0, bb874 <_Z16_fetch_usbserialv+0x38>
   bb860:	aa03      	add	r2, sp, #12
   bb862:	4807      	ldr	r0, [pc, #28]	; (bb880 <_Z16_fetch_usbserialv+0x44>)
   bb864:	f7ff ffc4 	bl	bb7f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb868:	4620      	mov	r0, r4
   bb86a:	f7f8 fc2c 	bl	b40c6 <__cxa_guard_release>
   bb86e:	4805      	ldr	r0, [pc, #20]	; (bb884 <_Z16_fetch_usbserialv+0x48>)
   bb870:	f001 ffae 	bl	bd7d0 <atexit>
	return _usbserial;
}
   bb874:	4802      	ldr	r0, [pc, #8]	; (bb880 <_Z16_fetch_usbserialv+0x44>)
   bb876:	b008      	add	sp, #32
   bb878:	bd10      	pop	{r4, pc}
   bb87a:	bf00      	nop
   bb87c:	2003e6f0 	.word	0x2003e6f0
   bb880:	2003e6f4 	.word	0x2003e6f4
   bb884:	000bb779 	.word	0x000bb779

000bb888 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb888:	4b01      	ldr	r3, [pc, #4]	; (bb890 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb88a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb88c:	4770      	bx	lr
   bb88e:	bf00      	nop
   bb890:	2003ded0 	.word	0x2003ded0

000bb894 <serialEventRun>:
{
   bb894:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb896:	4b0b      	ldr	r3, [pc, #44]	; (bb8c4 <serialEventRun+0x30>)
   bb898:	b143      	cbz	r3, bb8ac <serialEventRun+0x18>
   bb89a:	f7ff ffcf 	bl	bb83c <_Z16_fetch_usbserialv>
   bb89e:	6803      	ldr	r3, [r0, #0]
   bb8a0:	691b      	ldr	r3, [r3, #16]
   bb8a2:	4798      	blx	r3
   bb8a4:	2800      	cmp	r0, #0
   bb8a6:	dd01      	ble.n	bb8ac <serialEventRun+0x18>
        serialEvent();
   bb8a8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb8ac:	4b06      	ldr	r3, [pc, #24]	; (bb8c8 <serialEventRun+0x34>)
   bb8ae:	b143      	cbz	r3, bb8c2 <serialEventRun+0x2e>
   bb8b0:	f000 f9b2 	bl	bbc18 <_Z22__fetch_global_Serial1v>
   bb8b4:	6803      	ldr	r3, [r0, #0]
   bb8b6:	691b      	ldr	r3, [r3, #16]
   bb8b8:	4798      	blx	r3
   bb8ba:	2800      	cmp	r0, #0
   bb8bc:	dd01      	ble.n	bb8c2 <serialEventRun+0x2e>
        serialEvent1();
   bb8be:	f3af 8000 	nop.w
}
   bb8c2:	bd08      	pop	{r3, pc}
	...

000bb8cc <_post_loop>:
{
   bb8cc:	b508      	push	{r3, lr}
	serialEventRun();
   bb8ce:	f7ff ffe1 	bl	bb894 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb8d2:	f7fc ffd9 	bl	b8888 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb8d6:	4b01      	ldr	r3, [pc, #4]	; (bb8dc <_post_loop+0x10>)
   bb8d8:	6018      	str	r0, [r3, #0]
}
   bb8da:	bd08      	pop	{r3, pc}
   bb8dc:	2003e710 	.word	0x2003e710

000bb8e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb8e0:	4805      	ldr	r0, [pc, #20]	; (bb8f8 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb8e2:	4a06      	ldr	r2, [pc, #24]	; (bb8fc <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb8e4:	4906      	ldr	r1, [pc, #24]	; (bb900 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb8e6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb8e8:	1a12      	subs	r2, r2, r0
   bb8ea:	f001 ff9d 	bl	bd828 <memcpy>
    __backup_sram_signature = signature;
   bb8ee:	4b05      	ldr	r3, [pc, #20]	; (bb904 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb8f0:	4a05      	ldr	r2, [pc, #20]	; (bb908 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb8f2:	601a      	str	r2, [r3, #0]
}
   bb8f4:	bd08      	pop	{r3, pc}
   bb8f6:	bf00      	nop
   bb8f8:	2003f400 	.word	0x2003f400
   bb8fc:	2003f404 	.word	0x2003f404
   bb900:	000bf274 	.word	0x000bf274
   bb904:	2003f400 	.word	0x2003f400
   bb908:	9a271c1e 	.word	0x9a271c1e

000bb90c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb90c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb90e:	2300      	movs	r3, #0
   bb910:	9300      	str	r3, [sp, #0]
   bb912:	461a      	mov	r2, r3
   bb914:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb918:	f7fd fa0c 	bl	b8d34 <system_ctrl_set_result>
}
   bb91c:	b003      	add	sp, #12
   bb91e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb924 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb924:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb926:	8843      	ldrh	r3, [r0, #2]
   bb928:	2b0a      	cmp	r3, #10
   bb92a:	d008      	beq.n	bb93e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb92c:	2b50      	cmp	r3, #80	; 0x50
   bb92e:	d10b      	bne.n	bb948 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb930:	4b09      	ldr	r3, [pc, #36]	; (bb958 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb932:	681b      	ldr	r3, [r3, #0]
   bb934:	b14b      	cbz	r3, bb94a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb936:	b003      	add	sp, #12
   bb938:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb93c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb93e:	f7ff ffe5 	bl	bb90c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb942:	b003      	add	sp, #12
   bb944:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb948:	2300      	movs	r3, #0
   bb94a:	9300      	str	r3, [sp, #0]
   bb94c:	461a      	mov	r2, r3
   bb94e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb952:	f7fd f9ef 	bl	b8d34 <system_ctrl_set_result>
}
   bb956:	e7f4      	b.n	bb942 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb958:	2003e70c 	.word	0x2003e70c

000bb95c <module_user_init_hook>:
{
   bb95c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb95e:	4812      	ldr	r0, [pc, #72]	; (bb9a8 <module_user_init_hook+0x4c>)
   bb960:	2100      	movs	r1, #0
   bb962:	f7fd faef 	bl	b8f44 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb966:	4b11      	ldr	r3, [pc, #68]	; (bb9ac <module_user_init_hook+0x50>)
   bb968:	681a      	ldr	r2, [r3, #0]
   bb96a:	4b11      	ldr	r3, [pc, #68]	; (bb9b0 <module_user_init_hook+0x54>)
   bb96c:	429a      	cmp	r2, r3
   bb96e:	4b11      	ldr	r3, [pc, #68]	; (bb9b4 <module_user_init_hook+0x58>)
   bb970:	bf0c      	ite	eq
   bb972:	2201      	moveq	r2, #1
   bb974:	2200      	movne	r2, #0
   bb976:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb978:	d001      	beq.n	bb97e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb97a:	f7ff ffb1 	bl	bb8e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb97e:	f7fc ff73 	bl	b8868 <HAL_RNG_GetRandomNumber>
   bb982:	4604      	mov	r4, r0
    srand(seed);
   bb984:	f001 ff80 	bl	bd888 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb988:	4b0b      	ldr	r3, [pc, #44]	; (bb9b8 <module_user_init_hook+0x5c>)
   bb98a:	b113      	cbz	r3, bb992 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb98c:	4620      	mov	r0, r4
   bb98e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb992:	2100      	movs	r1, #0
   bb994:	4808      	ldr	r0, [pc, #32]	; (bb9b8 <module_user_init_hook+0x5c>)
   bb996:	f7fd fa25 	bl	b8de4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb99e:	4807      	ldr	r0, [pc, #28]	; (bb9bc <module_user_init_hook+0x60>)
   bb9a0:	2100      	movs	r1, #0
   bb9a2:	f7fd b9bd 	b.w	b8d20 <system_ctrl_set_app_request_handler>
   bb9a6:	bf00      	nop
   bb9a8:	000bb889 	.word	0x000bb889
   bb9ac:	2003f400 	.word	0x2003f400
   bb9b0:	9a271c1e 	.word	0x9a271c1e
   bb9b4:	2003e708 	.word	0x2003e708
   bb9b8:	00000000 	.word	0x00000000
   bb9bc:	000bb925 	.word	0x000bb925

000bb9c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb9c0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb9c2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb9c4:	d902      	bls.n	bb9cc <pinAvailable+0xc>
    return false;
   bb9c6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb9c8:	b002      	add	sp, #8
   bb9ca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb9cc:	f1a0 030b 	sub.w	r3, r0, #11
   bb9d0:	2b02      	cmp	r3, #2
   bb9d2:	d81a      	bhi.n	bba0a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb9d4:	4c17      	ldr	r4, [pc, #92]	; (bba34 <pinAvailable+0x74>)
   bb9d6:	7821      	ldrb	r1, [r4, #0]
   bb9d8:	f3bf 8f5b 	dmb	ish
   bb9dc:	f011 0101 	ands.w	r1, r1, #1
   bb9e0:	d10b      	bne.n	bb9fa <pinAvailable+0x3a>
   bb9e2:	4620      	mov	r0, r4
   bb9e4:	9101      	str	r1, [sp, #4]
   bb9e6:	f7f8 fb69 	bl	b40bc <__cxa_guard_acquire>
   bb9ea:	9901      	ldr	r1, [sp, #4]
   bb9ec:	b128      	cbz	r0, bb9fa <pinAvailable+0x3a>
   bb9ee:	4812      	ldr	r0, [pc, #72]	; (bba38 <pinAvailable+0x78>)
   bb9f0:	f7ff fa7a 	bl	baee8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb9f4:	4620      	mov	r0, r4
   bb9f6:	f7f8 fb66 	bl	b40c6 <__cxa_guard_release>
   bb9fa:	4b0f      	ldr	r3, [pc, #60]	; (bba38 <pinAvailable+0x78>)
   bb9fc:	7818      	ldrb	r0, [r3, #0]
   bb9fe:	f7fd f853 	bl	b8aa8 <hal_spi_is_enabled>
   bba02:	2800      	cmp	r0, #0
   bba04:	d1df      	bne.n	bb9c6 <pinAvailable+0x6>
  return true; // 'pin' is available
   bba06:	2001      	movs	r0, #1
   bba08:	e7de      	b.n	bb9c8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bba0a:	2801      	cmp	r0, #1
   bba0c:	d809      	bhi.n	bba22 <pinAvailable+0x62>
   bba0e:	f000 f89f 	bl	bbb50 <_Z19__fetch_global_Wirev>
   bba12:	2100      	movs	r1, #0
   bba14:	7c00      	ldrb	r0, [r0, #16]
   bba16:	f7fc ffe7 	bl	b89e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bba1a:	f080 0001 	eor.w	r0, r0, #1
   bba1e:	b2c0      	uxtb	r0, r0
   bba20:	e7d2      	b.n	bb9c8 <pinAvailable+0x8>
   bba22:	3809      	subs	r0, #9
   bba24:	2801      	cmp	r0, #1
   bba26:	d8ee      	bhi.n	bba06 <pinAvailable+0x46>
   bba28:	f000 f8f6 	bl	bbc18 <_Z22__fetch_global_Serial1v>
   bba2c:	7c00      	ldrb	r0, [r0, #16]
   bba2e:	f7fd f893 	bl	b8b58 <hal_usart_is_enabled>
   bba32:	e7f2      	b.n	bba1a <pinAvailable+0x5a>
   bba34:	2003e3e0 	.word	0x2003e3e0
   bba38:	2003e3e4 	.word	0x2003e3e4

000bba3c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bba3c:	2823      	cmp	r0, #35	; 0x23
{
   bba3e:	b538      	push	{r3, r4, r5, lr}
   bba40:	4604      	mov	r4, r0
   bba42:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bba44:	d80a      	bhi.n	bba5c <pinMode+0x20>
   bba46:	29ff      	cmp	r1, #255	; 0xff
   bba48:	d008      	beq.n	bba5c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bba4a:	f7ff ffb9 	bl	bb9c0 <pinAvailable>
   bba4e:	b128      	cbz	r0, bba5c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bba50:	4629      	mov	r1, r5
   bba52:	4620      	mov	r0, r4
}
   bba54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bba58:	f7fc bf4e 	b.w	b88f8 <HAL_Pin_Mode>
}
   bba5c:	bd38      	pop	{r3, r4, r5, pc}

000bba5e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bba5e:	b538      	push	{r3, r4, r5, lr}
   bba60:	4604      	mov	r4, r0
   bba62:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bba64:	f7fc ff50 	bl	b8908 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bba68:	28ff      	cmp	r0, #255	; 0xff
   bba6a:	d010      	beq.n	bba8e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bba6c:	2806      	cmp	r0, #6
   bba6e:	d804      	bhi.n	bba7a <digitalWrite+0x1c>
   bba70:	234d      	movs	r3, #77	; 0x4d
   bba72:	fa23 f000 	lsr.w	r0, r3, r0
   bba76:	07c3      	lsls	r3, r0, #31
   bba78:	d409      	bmi.n	bba8e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bba7a:	4620      	mov	r0, r4
   bba7c:	f7ff ffa0 	bl	bb9c0 <pinAvailable>
   bba80:	b128      	cbz	r0, bba8e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bba82:	4629      	mov	r1, r5
   bba84:	4620      	mov	r0, r4
}
   bba86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bba8a:	f7fc bf45 	b.w	b8918 <HAL_GPIO_Write>
}
   bba8e:	bd38      	pop	{r3, r4, r5, pc}

000bba90 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bba90:	b510      	push	{r4, lr}
   bba92:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bba94:	f7fc ff38 	bl	b8908 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bba98:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bba9a:	b2db      	uxtb	r3, r3
   bba9c:	2b01      	cmp	r3, #1
   bba9e:	d908      	bls.n	bbab2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bbaa0:	4620      	mov	r0, r4
   bbaa2:	f7ff ff8d 	bl	bb9c0 <pinAvailable>
   bbaa6:	b120      	cbz	r0, bbab2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bbaa8:	4620      	mov	r0, r4
}
   bbaaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bbaae:	f7fc bf3b 	b.w	b8928 <HAL_GPIO_Read>
}
   bbab2:	2000      	movs	r0, #0
   bbab4:	bd10      	pop	{r4, pc}

000bbab6 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bbab6:	280d      	cmp	r0, #13
{
   bbab8:	b510      	push	{r4, lr}
   bbaba:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bbabc:	bf9c      	itt	ls
   bbabe:	340e      	addls	r4, #14
   bbac0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bbac2:	4620      	mov	r0, r4
   bbac4:	f7ff ff7c 	bl	bb9c0 <pinAvailable>
   bbac8:	b150      	cbz	r0, bbae0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bbaca:	2103      	movs	r1, #3
   bbacc:	4620      	mov	r0, r4
   bbace:	f7fc ff0b 	bl	b88e8 <HAL_Validate_Pin_Function>
   bbad2:	2803      	cmp	r0, #3
   bbad4:	d104      	bne.n	bbae0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bbad6:	4620      	mov	r0, r4
}
   bbad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bbadc:	f7fc bf3c 	b.w	b8958 <hal_adc_read>
}
   bbae0:	2000      	movs	r0, #0
   bbae2:	bd10      	pop	{r4, pc}

000bbae4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbae4:	4770      	bx	lr

000bbae6 <__tcf_1>:
   bbae6:	4770      	bx	lr

000bbae8 <_Z17acquireWireBufferv>:
{
   bbae8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bbaea:	4b0a      	ldr	r3, [pc, #40]	; (bbb14 <_Z17acquireWireBufferv+0x2c>)
   bbaec:	6003      	str	r3, [r0, #0]
   bbaee:	2301      	movs	r3, #1
{
   bbaf0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bbaf2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbaf4:	4908      	ldr	r1, [pc, #32]	; (bbb18 <_Z17acquireWireBufferv+0x30>)
   bbaf6:	2020      	movs	r0, #32
   bbaf8:	f000 f8b4 	bl	bbc64 <_ZnajRKSt9nothrow_t>
	};
   bbafc:	2520      	movs	r5, #32
   bbafe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbb00:	4905      	ldr	r1, [pc, #20]	; (bbb18 <_Z17acquireWireBufferv+0x30>)
	};
   bbb02:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbb04:	4628      	mov	r0, r5
   bbb06:	f000 f8ad 	bl	bbc64 <_ZnajRKSt9nothrow_t>
	};
   bbb0a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bbb0e:	4620      	mov	r0, r4
   bbb10:	bd38      	pop	{r3, r4, r5, pc}
   bbb12:	bf00      	nop
   bbb14:	00010018 	.word	0x00010018
   bbb18:	000befcc 	.word	0x000befcc

000bbb1c <_Z18acquireWire1Bufferv>:
{
   bbb1c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bbb1e:	4b0a      	ldr	r3, [pc, #40]	; (bbb48 <_Z18acquireWire1Bufferv+0x2c>)
   bbb20:	6003      	str	r3, [r0, #0]
   bbb22:	2301      	movs	r3, #1
{
   bbb24:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bbb26:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbb28:	4908      	ldr	r1, [pc, #32]	; (bbb4c <_Z18acquireWire1Bufferv+0x30>)
   bbb2a:	2020      	movs	r0, #32
   bbb2c:	f000 f89a 	bl	bbc64 <_ZnajRKSt9nothrow_t>
	};
   bbb30:	2520      	movs	r5, #32
   bbb32:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbb34:	4905      	ldr	r1, [pc, #20]	; (bbb4c <_Z18acquireWire1Bufferv+0x30>)
	};
   bbb36:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbb38:	4628      	mov	r0, r5
   bbb3a:	f000 f893 	bl	bbc64 <_ZnajRKSt9nothrow_t>
	};
   bbb3e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bbb42:	4620      	mov	r0, r4
   bbb44:	bd38      	pop	{r3, r4, r5, pc}
   bbb46:	bf00      	nop
   bbb48:	00010018 	.word	0x00010018
   bbb4c:	000befcc 	.word	0x000befcc

000bbb50 <_Z19__fetch_global_Wirev>:
{
   bbb50:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbb52:	4d0e      	ldr	r5, [pc, #56]	; (bbb8c <_Z19__fetch_global_Wirev+0x3c>)
   bbb54:	7829      	ldrb	r1, [r5, #0]
   bbb56:	f3bf 8f5b 	dmb	ish
   bbb5a:	f011 0401 	ands.w	r4, r1, #1
{
   bbb5e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbb60:	d111      	bne.n	bbb86 <_Z19__fetch_global_Wirev+0x36>
   bbb62:	4628      	mov	r0, r5
   bbb64:	f7f8 faaa 	bl	b40bc <__cxa_guard_acquire>
   bbb68:	b168      	cbz	r0, bbb86 <_Z19__fetch_global_Wirev+0x36>
   bbb6a:	4668      	mov	r0, sp
   bbb6c:	f7ff ffbc 	bl	bbae8 <_Z17acquireWireBufferv>
   bbb70:	466a      	mov	r2, sp
   bbb72:	4621      	mov	r1, r4
   bbb74:	4806      	ldr	r0, [pc, #24]	; (bbb90 <_Z19__fetch_global_Wirev+0x40>)
   bbb76:	f7fd fc33 	bl	b93e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbb7a:	4628      	mov	r0, r5
   bbb7c:	f7f8 faa3 	bl	b40c6 <__cxa_guard_release>
   bbb80:	4804      	ldr	r0, [pc, #16]	; (bbb94 <_Z19__fetch_global_Wirev+0x44>)
   bbb82:	f001 fe25 	bl	bd7d0 <atexit>
	return wire;
}
   bbb86:	4802      	ldr	r0, [pc, #8]	; (bbb90 <_Z19__fetch_global_Wirev+0x40>)
   bbb88:	b007      	add	sp, #28
   bbb8a:	bd30      	pop	{r4, r5, pc}
   bbb8c:	2003e714 	.word	0x2003e714
   bbb90:	2003e71c 	.word	0x2003e71c
   bbb94:	000bbae5 	.word	0x000bbae5

000bbb98 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bbb98:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bbb9a:	4c0e      	ldr	r4, [pc, #56]	; (bbbd4 <_Z20__fetch_global_Wire1v+0x3c>)
   bbb9c:	7823      	ldrb	r3, [r4, #0]
   bbb9e:	f3bf 8f5b 	dmb	ish
   bbba2:	07db      	lsls	r3, r3, #31
{
   bbba4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bbba6:	d411      	bmi.n	bbbcc <_Z20__fetch_global_Wire1v+0x34>
   bbba8:	4620      	mov	r0, r4
   bbbaa:	f7f8 fa87 	bl	b40bc <__cxa_guard_acquire>
   bbbae:	b168      	cbz	r0, bbbcc <_Z20__fetch_global_Wire1v+0x34>
   bbbb0:	4668      	mov	r0, sp
   bbbb2:	f7ff ffb3 	bl	bbb1c <_Z18acquireWire1Bufferv>
   bbbb6:	466a      	mov	r2, sp
   bbbb8:	2101      	movs	r1, #1
   bbbba:	4807      	ldr	r0, [pc, #28]	; (bbbd8 <_Z20__fetch_global_Wire1v+0x40>)
   bbbbc:	f7fd fc10 	bl	b93e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbbc0:	4620      	mov	r0, r4
   bbbc2:	f7f8 fa80 	bl	b40c6 <__cxa_guard_release>
   bbbc6:	4805      	ldr	r0, [pc, #20]	; (bbbdc <_Z20__fetch_global_Wire1v+0x44>)
   bbbc8:	f001 fe02 	bl	bd7d0 <atexit>
	return wire;
}
   bbbcc:	4802      	ldr	r0, [pc, #8]	; (bbbd8 <_Z20__fetch_global_Wire1v+0x40>)
   bbbce:	b006      	add	sp, #24
   bbbd0:	bd10      	pop	{r4, pc}
   bbbd2:	bf00      	nop
   bbbd4:	2003e718 	.word	0x2003e718
   bbbd8:	2003e730 	.word	0x2003e730
   bbbdc:	000bbae7 	.word	0x000bbae7

000bbbe0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbbe0:	4770      	bx	lr
	...

000bbbe4 <_Z20acquireSerial1Bufferv>:
{
   bbbe4:	b538      	push	{r3, r4, r5, lr}
   bbbe6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bbbe8:	2514      	movs	r5, #20
   bbbea:	462a      	mov	r2, r5
   bbbec:	2100      	movs	r1, #0
   bbbee:	f001 fe43 	bl	bd878 <memset>
   bbbf2:	8025      	strh	r5, [r4, #0]
   bbbf4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbbf6:	4907      	ldr	r1, [pc, #28]	; (bbc14 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bbbf8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbbfa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bbbfc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbbfe:	f000 f831 	bl	bbc64 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbc02:	4904      	ldr	r1, [pc, #16]	; (bbc14 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bbc04:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbc06:	4628      	mov	r0, r5
   bbc08:	f000 f82c 	bl	bbc64 <_ZnajRKSt9nothrow_t>
    };
   bbc0c:	60e0      	str	r0, [r4, #12]
}
   bbc0e:	4620      	mov	r0, r4
   bbc10:	bd38      	pop	{r3, r4, r5, pc}
   bbc12:	bf00      	nop
   bbc14:	000befcc 	.word	0x000befcc

000bbc18 <_Z22__fetch_global_Serial1v>:
{
   bbc18:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbc1a:	4d0e      	ldr	r5, [pc, #56]	; (bbc54 <_Z22__fetch_global_Serial1v+0x3c>)
   bbc1c:	7829      	ldrb	r1, [r5, #0]
   bbc1e:	f3bf 8f5b 	dmb	ish
   bbc22:	f011 0401 	ands.w	r4, r1, #1
{
   bbc26:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbc28:	d111      	bne.n	bbc4e <_Z22__fetch_global_Serial1v+0x36>
   bbc2a:	4628      	mov	r0, r5
   bbc2c:	f7f8 fa46 	bl	b40bc <__cxa_guard_acquire>
   bbc30:	b168      	cbz	r0, bbc4e <_Z22__fetch_global_Serial1v+0x36>
   bbc32:	a801      	add	r0, sp, #4
   bbc34:	f7ff ffd6 	bl	bbbe4 <_Z20acquireSerial1Bufferv>
   bbc38:	aa01      	add	r2, sp, #4
   bbc3a:	4621      	mov	r1, r4
   bbc3c:	4806      	ldr	r0, [pc, #24]	; (bbc58 <_Z22__fetch_global_Serial1v+0x40>)
   bbc3e:	f7ff fd7b 	bl	bb738 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbc42:	4628      	mov	r0, r5
   bbc44:	f7f8 fa3f 	bl	b40c6 <__cxa_guard_release>
   bbc48:	4804      	ldr	r0, [pc, #16]	; (bbc5c <_Z22__fetch_global_Serial1v+0x44>)
   bbc4a:	f001 fdc1 	bl	bd7d0 <atexit>
    return serial1;
}
   bbc4e:	4802      	ldr	r0, [pc, #8]	; (bbc58 <_Z22__fetch_global_Serial1v+0x40>)
   bbc50:	b007      	add	sp, #28
   bbc52:	bd30      	pop	{r4, r5, pc}
   bbc54:	2003e744 	.word	0x2003e744
   bbc58:	2003e748 	.word	0x2003e748
   bbc5c:	000bbbe1 	.word	0x000bbbe1

000bbc60 <_ZnwjRKSt9nothrow_t>:
   bbc60:	f7f8 ba19 	b.w	b4096 <_Znwj>

000bbc64 <_ZnajRKSt9nothrow_t>:
   bbc64:	f7f8 ba19 	b.w	b409a <_Znaj>

000bbc68 <_ZSt25__throw_bad_function_callv>:
   bbc68:	b508      	push	{r3, lr}
   bbc6a:	f7fd f953 	bl	b8f14 <abort>
	...

000bbc70 <pow>:
   bbc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbc72:	ed2d 8b02 	vpush	{d8}
   bbc76:	ec57 6b10 	vmov	r6, r7, d0
   bbc7a:	ec55 4b11 	vmov	r4, r5, d1
   bbc7e:	f000 f8cb 	bl	bbe18 <__ieee754_pow>
   bbc82:	4b63      	ldr	r3, [pc, #396]	; (bbe10 <pow+0x1a0>)
   bbc84:	eeb0 8a40 	vmov.f32	s16, s0
   bbc88:	eef0 8a60 	vmov.f32	s17, s1
   bbc8c:	f993 3000 	ldrsb.w	r3, [r3]
   bbc90:	3301      	adds	r3, #1
   bbc92:	d02a      	beq.n	bbcea <pow+0x7a>
   bbc94:	4622      	mov	r2, r4
   bbc96:	462b      	mov	r3, r5
   bbc98:	4620      	mov	r0, r4
   bbc9a:	4629      	mov	r1, r5
   bbc9c:	f001 fcc4 	bl	bd628 <__aeabi_dcmpun>
   bbca0:	bb18      	cbnz	r0, bbcea <pow+0x7a>
   bbca2:	4632      	mov	r2, r6
   bbca4:	463b      	mov	r3, r7
   bbca6:	4630      	mov	r0, r6
   bbca8:	4639      	mov	r1, r7
   bbcaa:	f001 fcbd 	bl	bd628 <__aeabi_dcmpun>
   bbcae:	2800      	cmp	r0, #0
   bbcb0:	d144      	bne.n	bbd3c <pow+0xcc>
   bbcb2:	2200      	movs	r2, #0
   bbcb4:	2300      	movs	r3, #0
   bbcb6:	4630      	mov	r0, r6
   bbcb8:	4639      	mov	r1, r7
   bbcba:	f001 fc83 	bl	bd5c4 <__aeabi_dcmpeq>
   bbcbe:	b1d8      	cbz	r0, bbcf8 <pow+0x88>
   bbcc0:	2200      	movs	r2, #0
   bbcc2:	2300      	movs	r3, #0
   bbcc4:	4620      	mov	r0, r4
   bbcc6:	4629      	mov	r1, r5
   bbcc8:	f001 fc7c 	bl	bd5c4 <__aeabi_dcmpeq>
   bbccc:	2800      	cmp	r0, #0
   bbcce:	d13d      	bne.n	bbd4c <pow+0xdc>
   bbcd0:	ec45 4b10 	vmov	d0, r4, r5
   bbcd4:	f000 ff10 	bl	bcaf8 <finite>
   bbcd8:	b138      	cbz	r0, bbcea <pow+0x7a>
   bbcda:	4620      	mov	r0, r4
   bbcdc:	4629      	mov	r1, r5
   bbcde:	2200      	movs	r2, #0
   bbce0:	2300      	movs	r3, #0
   bbce2:	f001 fc79 	bl	bd5d8 <__aeabi_dcmplt>
   bbce6:	2800      	cmp	r0, #0
   bbce8:	d15c      	bne.n	bbda4 <pow+0x134>
   bbcea:	eeb0 0a48 	vmov.f32	s0, s16
   bbcee:	eef0 0a68 	vmov.f32	s1, s17
   bbcf2:	ecbd 8b02 	vpop	{d8}
   bbcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbcf8:	eeb0 0a48 	vmov.f32	s0, s16
   bbcfc:	eef0 0a68 	vmov.f32	s1, s17
   bbd00:	f000 fefa 	bl	bcaf8 <finite>
   bbd04:	b358      	cbz	r0, bbd5e <pow+0xee>
   bbd06:	ec51 0b18 	vmov	r0, r1, d8
   bbd0a:	2200      	movs	r2, #0
   bbd0c:	2300      	movs	r3, #0
   bbd0e:	f001 fc59 	bl	bd5c4 <__aeabi_dcmpeq>
   bbd12:	2800      	cmp	r0, #0
   bbd14:	d0e9      	beq.n	bbcea <pow+0x7a>
   bbd16:	ec47 6b10 	vmov	d0, r6, r7
   bbd1a:	f000 feed 	bl	bcaf8 <finite>
   bbd1e:	2800      	cmp	r0, #0
   bbd20:	d0e3      	beq.n	bbcea <pow+0x7a>
   bbd22:	ec45 4b10 	vmov	d0, r4, r5
   bbd26:	f000 fee7 	bl	bcaf8 <finite>
   bbd2a:	2800      	cmp	r0, #0
   bbd2c:	d0dd      	beq.n	bbcea <pow+0x7a>
   bbd2e:	f7fd f8f9 	bl	b8f24 <__errno>
   bbd32:	2322      	movs	r3, #34	; 0x22
   bbd34:	ed9f 8b2e 	vldr	d8, [pc, #184]	; bbdf0 <pow+0x180>
   bbd38:	6003      	str	r3, [r0, #0]
   bbd3a:	e7d6      	b.n	bbcea <pow+0x7a>
   bbd3c:	4620      	mov	r0, r4
   bbd3e:	4629      	mov	r1, r5
   bbd40:	2200      	movs	r2, #0
   bbd42:	2300      	movs	r3, #0
   bbd44:	f001 fc3e 	bl	bd5c4 <__aeabi_dcmpeq>
   bbd48:	2800      	cmp	r0, #0
   bbd4a:	d0ce      	beq.n	bbcea <pow+0x7a>
   bbd4c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; bbdf8 <pow+0x188>
   bbd50:	eeb0 0a48 	vmov.f32	s0, s16
   bbd54:	eef0 0a68 	vmov.f32	s1, s17
   bbd58:	ecbd 8b02 	vpop	{d8}
   bbd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbd5e:	ec47 6b10 	vmov	d0, r6, r7
   bbd62:	f000 fec9 	bl	bcaf8 <finite>
   bbd66:	2800      	cmp	r0, #0
   bbd68:	d0cd      	beq.n	bbd06 <pow+0x96>
   bbd6a:	ec45 4b10 	vmov	d0, r4, r5
   bbd6e:	f000 fec3 	bl	bcaf8 <finite>
   bbd72:	2800      	cmp	r0, #0
   bbd74:	d0c7      	beq.n	bbd06 <pow+0x96>
   bbd76:	ec53 2b18 	vmov	r2, r3, d8
   bbd7a:	ee18 0a10 	vmov	r0, s16
   bbd7e:	4619      	mov	r1, r3
   bbd80:	f001 fc52 	bl	bd628 <__aeabi_dcmpun>
   bbd84:	bb20      	cbnz	r0, bbdd0 <pow+0x160>
   bbd86:	f7fd f8cd 	bl	b8f24 <__errno>
   bbd8a:	4603      	mov	r3, r0
   bbd8c:	2222      	movs	r2, #34	; 0x22
   bbd8e:	601a      	str	r2, [r3, #0]
   bbd90:	4630      	mov	r0, r6
   bbd92:	4639      	mov	r1, r7
   bbd94:	2200      	movs	r2, #0
   bbd96:	2300      	movs	r3, #0
   bbd98:	f001 fc1e 	bl	bd5d8 <__aeabi_dcmplt>
   bbd9c:	b948      	cbnz	r0, bbdb2 <pow+0x142>
   bbd9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; bbe00 <pow+0x190>
   bbda2:	e7a2      	b.n	bbcea <pow+0x7a>
   bbda4:	f7fd f8be 	bl	b8f24 <__errno>
   bbda8:	2321      	movs	r3, #33	; 0x21
   bbdaa:	ed9f 8b17 	vldr	d8, [pc, #92]	; bbe08 <pow+0x198>
   bbdae:	6003      	str	r3, [r0, #0]
   bbdb0:	e79b      	b.n	bbcea <pow+0x7a>
   bbdb2:	ec45 4b10 	vmov	d0, r4, r5
   bbdb6:	f000 feb3 	bl	bcb20 <rint>
   bbdba:	4622      	mov	r2, r4
   bbdbc:	ec51 0b10 	vmov	r0, r1, d0
   bbdc0:	462b      	mov	r3, r5
   bbdc2:	f001 fbff 	bl	bd5c4 <__aeabi_dcmpeq>
   bbdc6:	2800      	cmp	r0, #0
   bbdc8:	d1e9      	bne.n	bbd9e <pow+0x12e>
   bbdca:	ed9f 8b0f 	vldr	d8, [pc, #60]	; bbe08 <pow+0x198>
   bbdce:	e78c      	b.n	bbcea <pow+0x7a>
   bbdd0:	f7fd f8a8 	bl	b8f24 <__errno>
   bbdd4:	2200      	movs	r2, #0
   bbdd6:	2300      	movs	r3, #0
   bbdd8:	2121      	movs	r1, #33	; 0x21
   bbdda:	6001      	str	r1, [r0, #0]
   bbddc:	4610      	mov	r0, r2
   bbdde:	4619      	mov	r1, r3
   bbde0:	f001 fab2 	bl	bd348 <__aeabi_ddiv>
   bbde4:	ec41 0b18 	vmov	d8, r0, r1
   bbde8:	e77f      	b.n	bbcea <pow+0x7a>
   bbdea:	bf00      	nop
   bbdec:	f3af 8000 	nop.w
	...
   bbdfc:	3ff00000 	.word	0x3ff00000
   bbe00:	00000000 	.word	0x00000000
   bbe04:	7ff00000 	.word	0x7ff00000
   bbe08:	00000000 	.word	0x00000000
   bbe0c:	fff00000 	.word	0xfff00000
   bbe10:	2003decc 	.word	0x2003decc
   bbe14:	00000000 	.word	0x00000000

000bbe18 <__ieee754_pow>:
   bbe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe1c:	ec57 6b11 	vmov	r6, r7, d1
   bbe20:	ed2d 8b0c 	vpush	{d8-d13}
   bbe24:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   bbe28:	ea5a 0206 	orrs.w	r2, sl, r6
   bbe2c:	b087      	sub	sp, #28
   bbe2e:	d03d      	beq.n	bbeac <__ieee754_pow+0x94>
   bbe30:	ec55 4b10 	vmov	r4, r5, d0
   bbe34:	4972      	ldr	r1, [pc, #456]	; (bc000 <__ieee754_pow+0x1e8>)
   bbe36:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   bbe3a:	4588      	cmp	r8, r1
   bbe3c:	ee10 2a10 	vmov	r2, s0
   bbe40:	46a9      	mov	r9, r5
   bbe42:	dc2c      	bgt.n	bbe9e <__ieee754_pow+0x86>
   bbe44:	ee11 3a10 	vmov	r3, s2
   bbe48:	46bb      	mov	fp, r7
   bbe4a:	d036      	beq.n	bbeba <__ieee754_pow+0xa2>
   bbe4c:	458a      	cmp	sl, r1
   bbe4e:	dc26      	bgt.n	bbe9e <__ieee754_pow+0x86>
   bbe50:	496b      	ldr	r1, [pc, #428]	; (bc000 <__ieee754_pow+0x1e8>)
   bbe52:	458a      	cmp	sl, r1
   bbe54:	d021      	beq.n	bbe9a <__ieee754_pow+0x82>
   bbe56:	f1b9 0f00 	cmp.w	r9, #0
   bbe5a:	db39      	blt.n	bbed0 <__ieee754_pow+0xb8>
   bbe5c:	2100      	movs	r1, #0
   bbe5e:	9100      	str	r1, [sp, #0]
   bbe60:	2b00      	cmp	r3, #0
   bbe62:	d151      	bne.n	bbf08 <__ieee754_pow+0xf0>
   bbe64:	4b66      	ldr	r3, [pc, #408]	; (bc000 <__ieee754_pow+0x1e8>)
   bbe66:	459a      	cmp	sl, r3
   bbe68:	f000 80a2 	beq.w	bbfb0 <__ieee754_pow+0x198>
   bbe6c:	4b65      	ldr	r3, [pc, #404]	; (bc004 <__ieee754_pow+0x1ec>)
   bbe6e:	459a      	cmp	sl, r3
   bbe70:	f000 80b0 	beq.w	bbfd4 <__ieee754_pow+0x1bc>
   bbe74:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   bbe78:	f000 84c0 	beq.w	bc7fc <__ieee754_pow+0x9e4>
   bbe7c:	4b62      	ldr	r3, [pc, #392]	; (bc008 <__ieee754_pow+0x1f0>)
   bbe7e:	459b      	cmp	fp, r3
   bbe80:	d142      	bne.n	bbf08 <__ieee754_pow+0xf0>
   bbe82:	f1b9 0f00 	cmp.w	r9, #0
   bbe86:	db3f      	blt.n	bbf08 <__ieee754_pow+0xf0>
   bbe88:	ec45 4b10 	vmov	d0, r4, r5
   bbe8c:	b007      	add	sp, #28
   bbe8e:	ecbd 8b0c 	vpop	{d8-d13}
   bbe92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe96:	f000 bd59 	b.w	bc94c <__ieee754_sqrt>
   bbe9a:	2b00      	cmp	r3, #0
   bbe9c:	d0db      	beq.n	bbe56 <__ieee754_pow+0x3e>
   bbe9e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bbea2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bbea6:	ea58 0302 	orrs.w	r3, r8, r2
   bbeaa:	d109      	bne.n	bbec0 <__ieee754_pow+0xa8>
   bbeac:	ed9f 0b50 	vldr	d0, [pc, #320]	; bbff0 <__ieee754_pow+0x1d8>
   bbeb0:	b007      	add	sp, #28
   bbeb2:	ecbd 8b0c 	vpop	{d8-d13}
   bbeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbeba:	b90c      	cbnz	r4, bbec0 <__ieee754_pow+0xa8>
   bbebc:	45c2      	cmp	sl, r8
   bbebe:	ddc7      	ble.n	bbe50 <__ieee754_pow+0x38>
   bbec0:	4852      	ldr	r0, [pc, #328]	; (bc00c <__ieee754_pow+0x1f4>)
   bbec2:	b007      	add	sp, #28
   bbec4:	ecbd 8b0c 	vpop	{d8-d13}
   bbec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbecc:	f000 be20 	b.w	bcb10 <nan>
   bbed0:	494f      	ldr	r1, [pc, #316]	; (bc010 <__ieee754_pow+0x1f8>)
   bbed2:	458a      	cmp	sl, r1
   bbed4:	f300 8085 	bgt.w	bbfe2 <__ieee754_pow+0x1ca>
   bbed8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   bbedc:	458a      	cmp	sl, r1
   bbede:	dd0f      	ble.n	bbf00 <__ieee754_pow+0xe8>
   bbee0:	ea4f 512a 	mov.w	r1, sl, asr #20
   bbee4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   bbee8:	2914      	cmp	r1, #20
   bbeea:	f340 849b 	ble.w	bc824 <__ieee754_pow+0xa0c>
   bbeee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   bbef2:	fa23 f001 	lsr.w	r0, r3, r1
   bbef6:	fa00 f101 	lsl.w	r1, r0, r1
   bbefa:	4299      	cmp	r1, r3
   bbefc:	f000 84ed 	beq.w	bc8da <__ieee754_pow+0xac2>
   bbf00:	2100      	movs	r1, #0
   bbf02:	9100      	str	r1, [sp, #0]
   bbf04:	2b00      	cmp	r3, #0
   bbf06:	d0b1      	beq.n	bbe6c <__ieee754_pow+0x54>
   bbf08:	ec45 4b10 	vmov	d0, r4, r5
   bbf0c:	9202      	str	r2, [sp, #8]
   bbf0e:	f000 fde9 	bl	bcae4 <fabs>
   bbf12:	9a02      	ldr	r2, [sp, #8]
   bbf14:	bb5a      	cbnz	r2, bbf6e <__ieee754_pow+0x156>
   bbf16:	f1b8 0f00 	cmp.w	r8, #0
   bbf1a:	d004      	beq.n	bbf26 <__ieee754_pow+0x10e>
   bbf1c:	4b39      	ldr	r3, [pc, #228]	; (bc004 <__ieee754_pow+0x1ec>)
   bbf1e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   bbf22:	429a      	cmp	r2, r3
   bbf24:	d123      	bne.n	bbf6e <__ieee754_pow+0x156>
   bbf26:	f1bb 0f00 	cmp.w	fp, #0
   bbf2a:	da07      	bge.n	bbf3c <__ieee754_pow+0x124>
   bbf2c:	ec53 2b10 	vmov	r2, r3, d0
   bbf30:	4934      	ldr	r1, [pc, #208]	; (bc004 <__ieee754_pow+0x1ec>)
   bbf32:	2000      	movs	r0, #0
   bbf34:	f001 fa08 	bl	bd348 <__aeabi_ddiv>
   bbf38:	ec41 0b10 	vmov	d0, r0, r1
   bbf3c:	f1b9 0f00 	cmp.w	r9, #0
   bbf40:	dab6      	bge.n	bbeb0 <__ieee754_pow+0x98>
   bbf42:	9b00      	ldr	r3, [sp, #0]
   bbf44:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bbf48:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bbf4c:	ea58 0303 	orrs.w	r3, r8, r3
   bbf50:	f040 848d 	bne.w	bc86e <__ieee754_pow+0xa56>
   bbf54:	ec53 2b10 	vmov	r2, r3, d0
   bbf58:	4610      	mov	r0, r2
   bbf5a:	4619      	mov	r1, r3
   bbf5c:	f000 ff12 	bl	bcd84 <__aeabi_dsub>
   bbf60:	4602      	mov	r2, r0
   bbf62:	460b      	mov	r3, r1
   bbf64:	f001 f9f0 	bl	bd348 <__aeabi_ddiv>
   bbf68:	ec41 0b10 	vmov	d0, r0, r1
   bbf6c:	e7a0      	b.n	bbeb0 <__ieee754_pow+0x98>
   bbf6e:	9a00      	ldr	r2, [sp, #0]
   bbf70:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   bbf74:	3b01      	subs	r3, #1
   bbf76:	9304      	str	r3, [sp, #16]
   bbf78:	4313      	orrs	r3, r2
   bbf7a:	d035      	beq.n	bbfe8 <__ieee754_pow+0x1d0>
   bbf7c:	4b25      	ldr	r3, [pc, #148]	; (bc014 <__ieee754_pow+0x1fc>)
   bbf7e:	459a      	cmp	sl, r3
   bbf80:	dd4c      	ble.n	bc01c <__ieee754_pow+0x204>
   bbf82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   bbf86:	459a      	cmp	sl, r3
   bbf88:	4b23      	ldr	r3, [pc, #140]	; (bc018 <__ieee754_pow+0x200>)
   bbf8a:	f340 83db 	ble.w	bc744 <__ieee754_pow+0x92c>
   bbf8e:	4598      	cmp	r8, r3
   bbf90:	f340 8360 	ble.w	bc654 <__ieee754_pow+0x83c>
   bbf94:	f1bb 0f00 	cmp.w	fp, #0
   bbf98:	f340 8360 	ble.w	bc65c <__ieee754_pow+0x844>
   bbf9c:	a316      	add	r3, pc, #88	; (adr r3, bbff8 <__ieee754_pow+0x1e0>)
   bbf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbfa2:	4610      	mov	r0, r2
   bbfa4:	4619      	mov	r1, r3
   bbfa6:	f001 f8a5 	bl	bd0f4 <__aeabi_dmul>
   bbfaa:	ec41 0b10 	vmov	d0, r0, r1
   bbfae:	e77f      	b.n	bbeb0 <__ieee754_pow+0x98>
   bbfb0:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   bbfb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   bbfb8:	4313      	orrs	r3, r2
   bbfba:	f43f af77 	beq.w	bbeac <__ieee754_pow+0x94>
   bbfbe:	4b16      	ldr	r3, [pc, #88]	; (bc018 <__ieee754_pow+0x200>)
   bbfc0:	4598      	cmp	r8, r3
   bbfc2:	f340 837a 	ble.w	bc6ba <__ieee754_pow+0x8a2>
   bbfc6:	f1bb 0f00 	cmp.w	fp, #0
   bbfca:	f2c0 8347 	blt.w	bc65c <__ieee754_pow+0x844>
   bbfce:	ec47 6b10 	vmov	d0, r6, r7
   bbfd2:	e76d      	b.n	bbeb0 <__ieee754_pow+0x98>
   bbfd4:	f1bb 0f00 	cmp.w	fp, #0
   bbfd8:	f2c0 841a 	blt.w	bc810 <__ieee754_pow+0x9f8>
   bbfdc:	ec45 4b10 	vmov	d0, r4, r5
   bbfe0:	e766      	b.n	bbeb0 <__ieee754_pow+0x98>
   bbfe2:	2102      	movs	r1, #2
   bbfe4:	9100      	str	r1, [sp, #0]
   bbfe6:	e73b      	b.n	bbe60 <__ieee754_pow+0x48>
   bbfe8:	4622      	mov	r2, r4
   bbfea:	462b      	mov	r3, r5
   bbfec:	e7b4      	b.n	bbf58 <__ieee754_pow+0x140>
   bbfee:	bf00      	nop
   bbff0:	00000000 	.word	0x00000000
   bbff4:	3ff00000 	.word	0x3ff00000
   bbff8:	8800759c 	.word	0x8800759c
   bbffc:	7e37e43c 	.word	0x7e37e43c
   bc000:	7ff00000 	.word	0x7ff00000
   bc004:	3ff00000 	.word	0x3ff00000
   bc008:	3fe00000 	.word	0x3fe00000
   bc00c:	000befd0 	.word	0x000befd0
   bc010:	433fffff 	.word	0x433fffff
   bc014:	41e00000 	.word	0x41e00000
   bc018:	3fefffff 	.word	0x3fefffff
   bc01c:	4be4      	ldr	r3, [pc, #912]	; (bc3b0 <__ieee754_pow+0x598>)
   bc01e:	ea09 0303 	and.w	r3, r9, r3
   bc022:	2200      	movs	r2, #0
   bc024:	b953      	cbnz	r3, bc03c <__ieee754_pow+0x224>
   bc026:	ec51 0b10 	vmov	r0, r1, d0
   bc02a:	4be2      	ldr	r3, [pc, #904]	; (bc3b4 <__ieee754_pow+0x59c>)
   bc02c:	f001 f862 	bl	bd0f4 <__aeabi_dmul>
   bc030:	ec41 0b10 	vmov	d0, r0, r1
   bc034:	ee10 8a90 	vmov	r8, s1
   bc038:	f06f 0234 	mvn.w	r2, #52	; 0x34
   bc03c:	ea4f 5328 	mov.w	r3, r8, asr #20
   bc040:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   bc044:	189a      	adds	r2, r3, r2
   bc046:	4bdc      	ldr	r3, [pc, #880]	; (bc3b8 <__ieee754_pow+0x5a0>)
   bc048:	9205      	str	r2, [sp, #20]
   bc04a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   bc04e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   bc052:	4598      	cmp	r8, r3
   bc054:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   bc058:	dd07      	ble.n	bc06a <__ieee754_pow+0x252>
   bc05a:	4bd8      	ldr	r3, [pc, #864]	; (bc3bc <__ieee754_pow+0x5a4>)
   bc05c:	4598      	cmp	r8, r3
   bc05e:	f340 8414 	ble.w	bc88a <__ieee754_pow+0xa72>
   bc062:	3201      	adds	r2, #1
   bc064:	9205      	str	r2, [sp, #20]
   bc066:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   bc06a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; bc350 <__ieee754_pow+0x538>
   bc06e:	ed9f 7bba 	vldr	d7, [pc, #744]	; bc358 <__ieee754_pow+0x540>
   bc072:	ec53 2b16 	vmov	r2, r3, d6
   bc076:	eeb0 ca47 	vmov.f32	s24, s14
   bc07a:	eef0 ca67 	vmov.f32	s25, s15
   bc07e:	2500      	movs	r5, #0
   bc080:	eeb0 da47 	vmov.f32	s26, s14
   bc084:	eef0 da67 	vmov.f32	s27, s15
   bc088:	ec5b ab10 	vmov	sl, fp, d0
   bc08c:	46a3      	mov	fp, r4
   bc08e:	4650      	mov	r0, sl
   bc090:	4659      	mov	r1, fp
   bc092:	ec43 2b1a 	vmov	d10, r2, r3
   bc096:	f000 fe75 	bl	bcd84 <__aeabi_dsub>
   bc09a:	ec53 2b1a 	vmov	r2, r3, d10
   bc09e:	4680      	mov	r8, r0
   bc0a0:	4689      	mov	r9, r1
   bc0a2:	4650      	mov	r0, sl
   bc0a4:	4659      	mov	r1, fp
   bc0a6:	f000 fe6f 	bl	bcd88 <__adddf3>
   bc0aa:	4602      	mov	r2, r0
   bc0ac:	460b      	mov	r3, r1
   bc0ae:	2000      	movs	r0, #0
   bc0b0:	49c3      	ldr	r1, [pc, #780]	; (bc3c0 <__ieee754_pow+0x5a8>)
   bc0b2:	f001 f949 	bl	bd348 <__aeabi_ddiv>
   bc0b6:	ec41 0b1b 	vmov	d11, r0, r1
   bc0ba:	4640      	mov	r0, r8
   bc0bc:	ec53 2b1b 	vmov	r2, r3, d11
   bc0c0:	4649      	mov	r1, r9
   bc0c2:	f001 f817 	bl	bd0f4 <__aeabi_dmul>
   bc0c6:	ec41 0b18 	vmov	d8, r0, r1
   bc0ca:	460a      	mov	r2, r1
   bc0cc:	4601      	mov	r1, r0
   bc0ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
   bc0d2:	2100      	movs	r1, #0
   bc0d4:	9102      	str	r1, [sp, #8]
   bc0d6:	1064      	asrs	r4, r4, #1
   bc0d8:	ec4b ab19 	vmov	d9, sl, fp
   bc0dc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   bc0e0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   bc0e4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   bc0e8:	2000      	movs	r0, #0
   bc0ea:	1959      	adds	r1, r3, r5
   bc0ec:	4604      	mov	r4, r0
   bc0ee:	460d      	mov	r5, r1
   bc0f0:	4602      	mov	r2, r0
   bc0f2:	460b      	mov	r3, r1
   bc0f4:	4650      	mov	r0, sl
   bc0f6:	4659      	mov	r1, fp
   bc0f8:	f000 fffc 	bl	bd0f4 <__aeabi_dmul>
   bc0fc:	4602      	mov	r2, r0
   bc0fe:	460b      	mov	r3, r1
   bc100:	4640      	mov	r0, r8
   bc102:	4649      	mov	r1, r9
   bc104:	f000 fe3e 	bl	bcd84 <__aeabi_dsub>
   bc108:	ec53 2b1a 	vmov	r2, r3, d10
   bc10c:	4680      	mov	r8, r0
   bc10e:	4689      	mov	r9, r1
   bc110:	4620      	mov	r0, r4
   bc112:	4629      	mov	r1, r5
   bc114:	f000 fe36 	bl	bcd84 <__aeabi_dsub>
   bc118:	4602      	mov	r2, r0
   bc11a:	460b      	mov	r3, r1
   bc11c:	ec51 0b19 	vmov	r0, r1, d9
   bc120:	f000 fe30 	bl	bcd84 <__aeabi_dsub>
   bc124:	4652      	mov	r2, sl
   bc126:	465b      	mov	r3, fp
   bc128:	f000 ffe4 	bl	bd0f4 <__aeabi_dmul>
   bc12c:	4602      	mov	r2, r0
   bc12e:	460b      	mov	r3, r1
   bc130:	4640      	mov	r0, r8
   bc132:	4649      	mov	r1, r9
   bc134:	f000 fe26 	bl	bcd84 <__aeabi_dsub>
   bc138:	ec53 2b1b 	vmov	r2, r3, d11
   bc13c:	f000 ffda 	bl	bd0f4 <__aeabi_dmul>
   bc140:	ec53 2b18 	vmov	r2, r3, d8
   bc144:	ec41 0b19 	vmov	d9, r0, r1
   bc148:	ec51 0b18 	vmov	r0, r1, d8
   bc14c:	f000 ffd2 	bl	bd0f4 <__aeabi_dmul>
   bc150:	a383      	add	r3, pc, #524	; (adr r3, bc360 <__ieee754_pow+0x548>)
   bc152:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc156:	4604      	mov	r4, r0
   bc158:	460d      	mov	r5, r1
   bc15a:	f000 ffcb 	bl	bd0f4 <__aeabi_dmul>
   bc15e:	a382      	add	r3, pc, #520	; (adr r3, bc368 <__ieee754_pow+0x550>)
   bc160:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc164:	f000 fe10 	bl	bcd88 <__adddf3>
   bc168:	4622      	mov	r2, r4
   bc16a:	462b      	mov	r3, r5
   bc16c:	f000 ffc2 	bl	bd0f4 <__aeabi_dmul>
   bc170:	a37f      	add	r3, pc, #508	; (adr r3, bc370 <__ieee754_pow+0x558>)
   bc172:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc176:	f000 fe07 	bl	bcd88 <__adddf3>
   bc17a:	4622      	mov	r2, r4
   bc17c:	462b      	mov	r3, r5
   bc17e:	f000 ffb9 	bl	bd0f4 <__aeabi_dmul>
   bc182:	a37d      	add	r3, pc, #500	; (adr r3, bc378 <__ieee754_pow+0x560>)
   bc184:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc188:	f000 fdfe 	bl	bcd88 <__adddf3>
   bc18c:	4622      	mov	r2, r4
   bc18e:	462b      	mov	r3, r5
   bc190:	f000 ffb0 	bl	bd0f4 <__aeabi_dmul>
   bc194:	a37a      	add	r3, pc, #488	; (adr r3, bc380 <__ieee754_pow+0x568>)
   bc196:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc19a:	f000 fdf5 	bl	bcd88 <__adddf3>
   bc19e:	4622      	mov	r2, r4
   bc1a0:	462b      	mov	r3, r5
   bc1a2:	f000 ffa7 	bl	bd0f4 <__aeabi_dmul>
   bc1a6:	a378      	add	r3, pc, #480	; (adr r3, bc388 <__ieee754_pow+0x570>)
   bc1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc1ac:	f000 fdec 	bl	bcd88 <__adddf3>
   bc1b0:	4622      	mov	r2, r4
   bc1b2:	4680      	mov	r8, r0
   bc1b4:	4689      	mov	r9, r1
   bc1b6:	462b      	mov	r3, r5
   bc1b8:	4620      	mov	r0, r4
   bc1ba:	4629      	mov	r1, r5
   bc1bc:	f000 ff9a 	bl	bd0f4 <__aeabi_dmul>
   bc1c0:	4602      	mov	r2, r0
   bc1c2:	460b      	mov	r3, r1
   bc1c4:	4640      	mov	r0, r8
   bc1c6:	4649      	mov	r1, r9
   bc1c8:	f000 ff94 	bl	bd0f4 <__aeabi_dmul>
   bc1cc:	4652      	mov	r2, sl
   bc1ce:	4604      	mov	r4, r0
   bc1d0:	460d      	mov	r5, r1
   bc1d2:	465b      	mov	r3, fp
   bc1d4:	ec51 0b18 	vmov	r0, r1, d8
   bc1d8:	f000 fdd6 	bl	bcd88 <__adddf3>
   bc1dc:	ec53 2b19 	vmov	r2, r3, d9
   bc1e0:	f000 ff88 	bl	bd0f4 <__aeabi_dmul>
   bc1e4:	4622      	mov	r2, r4
   bc1e6:	462b      	mov	r3, r5
   bc1e8:	f000 fdce 	bl	bcd88 <__adddf3>
   bc1ec:	4652      	mov	r2, sl
   bc1ee:	4680      	mov	r8, r0
   bc1f0:	4689      	mov	r9, r1
   bc1f2:	465b      	mov	r3, fp
   bc1f4:	4650      	mov	r0, sl
   bc1f6:	4659      	mov	r1, fp
   bc1f8:	f000 ff7c 	bl	bd0f4 <__aeabi_dmul>
   bc1fc:	4602      	mov	r2, r0
   bc1fe:	460b      	mov	r3, r1
   bc200:	ec43 2b1a 	vmov	d10, r2, r3
   bc204:	4b6f      	ldr	r3, [pc, #444]	; (bc3c4 <__ieee754_pow+0x5ac>)
   bc206:	2200      	movs	r2, #0
   bc208:	f000 fdbe 	bl	bcd88 <__adddf3>
   bc20c:	4642      	mov	r2, r8
   bc20e:	464b      	mov	r3, r9
   bc210:	f000 fdba 	bl	bcd88 <__adddf3>
   bc214:	2400      	movs	r4, #0
   bc216:	460d      	mov	r5, r1
   bc218:	4622      	mov	r2, r4
   bc21a:	462b      	mov	r3, r5
   bc21c:	4650      	mov	r0, sl
   bc21e:	4659      	mov	r1, fp
   bc220:	f000 ff68 	bl	bd0f4 <__aeabi_dmul>
   bc224:	4b67      	ldr	r3, [pc, #412]	; (bc3c4 <__ieee754_pow+0x5ac>)
   bc226:	4682      	mov	sl, r0
   bc228:	468b      	mov	fp, r1
   bc22a:	2200      	movs	r2, #0
   bc22c:	4620      	mov	r0, r4
   bc22e:	4629      	mov	r1, r5
   bc230:	f000 fda8 	bl	bcd84 <__aeabi_dsub>
   bc234:	ec53 2b1a 	vmov	r2, r3, d10
   bc238:	f000 fda4 	bl	bcd84 <__aeabi_dsub>
   bc23c:	4602      	mov	r2, r0
   bc23e:	460b      	mov	r3, r1
   bc240:	4640      	mov	r0, r8
   bc242:	4649      	mov	r1, r9
   bc244:	f000 fd9e 	bl	bcd84 <__aeabi_dsub>
   bc248:	ec53 2b18 	vmov	r2, r3, d8
   bc24c:	f000 ff52 	bl	bd0f4 <__aeabi_dmul>
   bc250:	4622      	mov	r2, r4
   bc252:	462b      	mov	r3, r5
   bc254:	4604      	mov	r4, r0
   bc256:	460d      	mov	r5, r1
   bc258:	ec51 0b19 	vmov	r0, r1, d9
   bc25c:	f000 ff4a 	bl	bd0f4 <__aeabi_dmul>
   bc260:	4602      	mov	r2, r0
   bc262:	460b      	mov	r3, r1
   bc264:	4620      	mov	r0, r4
   bc266:	4629      	mov	r1, r5
   bc268:	f000 fd8e 	bl	bcd88 <__adddf3>
   bc26c:	4680      	mov	r8, r0
   bc26e:	4689      	mov	r9, r1
   bc270:	4642      	mov	r2, r8
   bc272:	464b      	mov	r3, r9
   bc274:	4650      	mov	r0, sl
   bc276:	4659      	mov	r1, fp
   bc278:	f000 fd86 	bl	bcd88 <__adddf3>
   bc27c:	a344      	add	r3, pc, #272	; (adr r3, bc390 <__ieee754_pow+0x578>)
   bc27e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc282:	2000      	movs	r0, #0
   bc284:	4604      	mov	r4, r0
   bc286:	460d      	mov	r5, r1
   bc288:	f000 ff34 	bl	bd0f4 <__aeabi_dmul>
   bc28c:	4652      	mov	r2, sl
   bc28e:	ec41 0b19 	vmov	d9, r0, r1
   bc292:	465b      	mov	r3, fp
   bc294:	4620      	mov	r0, r4
   bc296:	4629      	mov	r1, r5
   bc298:	f000 fd74 	bl	bcd84 <__aeabi_dsub>
   bc29c:	4602      	mov	r2, r0
   bc29e:	460b      	mov	r3, r1
   bc2a0:	4640      	mov	r0, r8
   bc2a2:	4649      	mov	r1, r9
   bc2a4:	f000 fd6e 	bl	bcd84 <__aeabi_dsub>
   bc2a8:	a33b      	add	r3, pc, #236	; (adr r3, bc398 <__ieee754_pow+0x580>)
   bc2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2ae:	f000 ff21 	bl	bd0f4 <__aeabi_dmul>
   bc2b2:	4602      	mov	r2, r0
   bc2b4:	460b      	mov	r3, r1
   bc2b6:	4620      	mov	r0, r4
   bc2b8:	4629      	mov	r1, r5
   bc2ba:	4614      	mov	r4, r2
   bc2bc:	461d      	mov	r5, r3
   bc2be:	a338      	add	r3, pc, #224	; (adr r3, bc3a0 <__ieee754_pow+0x588>)
   bc2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2c4:	f000 ff16 	bl	bd0f4 <__aeabi_dmul>
   bc2c8:	4602      	mov	r2, r0
   bc2ca:	460b      	mov	r3, r1
   bc2cc:	4620      	mov	r0, r4
   bc2ce:	4629      	mov	r1, r5
   bc2d0:	f000 fd5a 	bl	bcd88 <__adddf3>
   bc2d4:	ec53 2b1d 	vmov	r2, r3, d13
   bc2d8:	f000 fd56 	bl	bcd88 <__adddf3>
   bc2dc:	4680      	mov	r8, r0
   bc2de:	9805      	ldr	r0, [sp, #20]
   bc2e0:	4689      	mov	r9, r1
   bc2e2:	f000 fe9d 	bl	bd020 <__aeabi_i2d>
   bc2e6:	4642      	mov	r2, r8
   bc2e8:	4682      	mov	sl, r0
   bc2ea:	468b      	mov	fp, r1
   bc2ec:	464b      	mov	r3, r9
   bc2ee:	ec51 0b19 	vmov	r0, r1, d9
   bc2f2:	f000 fd49 	bl	bcd88 <__adddf3>
   bc2f6:	ec53 2b1c 	vmov	r2, r3, d12
   bc2fa:	f000 fd45 	bl	bcd88 <__adddf3>
   bc2fe:	4652      	mov	r2, sl
   bc300:	465b      	mov	r3, fp
   bc302:	f000 fd41 	bl	bcd88 <__adddf3>
   bc306:	4652      	mov	r2, sl
   bc308:	465b      	mov	r3, fp
   bc30a:	2000      	movs	r0, #0
   bc30c:	4604      	mov	r4, r0
   bc30e:	460d      	mov	r5, r1
   bc310:	f000 fd38 	bl	bcd84 <__aeabi_dsub>
   bc314:	ec53 2b1c 	vmov	r2, r3, d12
   bc318:	f000 fd34 	bl	bcd84 <__aeabi_dsub>
   bc31c:	ec53 2b19 	vmov	r2, r3, d9
   bc320:	f000 fd30 	bl	bcd84 <__aeabi_dsub>
   bc324:	4602      	mov	r2, r0
   bc326:	460b      	mov	r3, r1
   bc328:	4640      	mov	r0, r8
   bc32a:	4649      	mov	r1, r9
   bc32c:	f000 fd2a 	bl	bcd84 <__aeabi_dsub>
   bc330:	9b00      	ldr	r3, [sp, #0]
   bc332:	9a04      	ldr	r2, [sp, #16]
   bc334:	3b01      	subs	r3, #1
   bc336:	4313      	orrs	r3, r2
   bc338:	4682      	mov	sl, r0
   bc33a:	468b      	mov	fp, r1
   bc33c:	f040 81b6 	bne.w	bc6ac <__ieee754_pow+0x894>
   bc340:	ed9f 7b19 	vldr	d7, [pc, #100]	; bc3a8 <__ieee754_pow+0x590>
   bc344:	eeb0 8a47 	vmov.f32	s16, s14
   bc348:	eef0 8a67 	vmov.f32	s17, s15
   bc34c:	e03c      	b.n	bc3c8 <__ieee754_pow+0x5b0>
   bc34e:	bf00      	nop
   bc350:	00000000 	.word	0x00000000
   bc354:	3ff00000 	.word	0x3ff00000
	...
   bc360:	4a454eef 	.word	0x4a454eef
   bc364:	3fca7e28 	.word	0x3fca7e28
   bc368:	93c9db65 	.word	0x93c9db65
   bc36c:	3fcd864a 	.word	0x3fcd864a
   bc370:	a91d4101 	.word	0xa91d4101
   bc374:	3fd17460 	.word	0x3fd17460
   bc378:	518f264d 	.word	0x518f264d
   bc37c:	3fd55555 	.word	0x3fd55555
   bc380:	db6fabff 	.word	0xdb6fabff
   bc384:	3fdb6db6 	.word	0x3fdb6db6
   bc388:	33333303 	.word	0x33333303
   bc38c:	3fe33333 	.word	0x3fe33333
   bc390:	e0000000 	.word	0xe0000000
   bc394:	3feec709 	.word	0x3feec709
   bc398:	dc3a03fd 	.word	0xdc3a03fd
   bc39c:	3feec709 	.word	0x3feec709
   bc3a0:	145b01f5 	.word	0x145b01f5
   bc3a4:	be3e2fe0 	.word	0xbe3e2fe0
   bc3a8:	00000000 	.word	0x00000000
   bc3ac:	bff00000 	.word	0xbff00000
   bc3b0:	7ff00000 	.word	0x7ff00000
   bc3b4:	43400000 	.word	0x43400000
   bc3b8:	0003988e 	.word	0x0003988e
   bc3bc:	000bb679 	.word	0x000bb679
   bc3c0:	3ff00000 	.word	0x3ff00000
   bc3c4:	40080000 	.word	0x40080000
   bc3c8:	2300      	movs	r3, #0
   bc3ca:	e9cd 6700 	strd	r6, r7, [sp]
   bc3ce:	9300      	str	r3, [sp, #0]
   bc3d0:	e9dd 8900 	ldrd	r8, r9, [sp]
   bc3d4:	4630      	mov	r0, r6
   bc3d6:	4642      	mov	r2, r8
   bc3d8:	464b      	mov	r3, r9
   bc3da:	4639      	mov	r1, r7
   bc3dc:	f000 fcd2 	bl	bcd84 <__aeabi_dsub>
   bc3e0:	4622      	mov	r2, r4
   bc3e2:	462b      	mov	r3, r5
   bc3e4:	f000 fe86 	bl	bd0f4 <__aeabi_dmul>
   bc3e8:	4632      	mov	r2, r6
   bc3ea:	463b      	mov	r3, r7
   bc3ec:	4606      	mov	r6, r0
   bc3ee:	460f      	mov	r7, r1
   bc3f0:	4650      	mov	r0, sl
   bc3f2:	4659      	mov	r1, fp
   bc3f4:	f000 fe7e 	bl	bd0f4 <__aeabi_dmul>
   bc3f8:	4602      	mov	r2, r0
   bc3fa:	460b      	mov	r3, r1
   bc3fc:	4630      	mov	r0, r6
   bc3fe:	4639      	mov	r1, r7
   bc400:	f000 fcc2 	bl	bcd88 <__adddf3>
   bc404:	4642      	mov	r2, r8
   bc406:	464b      	mov	r3, r9
   bc408:	4606      	mov	r6, r0
   bc40a:	460f      	mov	r7, r1
   bc40c:	4620      	mov	r0, r4
   bc40e:	4629      	mov	r1, r5
   bc410:	f000 fe70 	bl	bd0f4 <__aeabi_dmul>
   bc414:	4604      	mov	r4, r0
   bc416:	460d      	mov	r5, r1
   bc418:	462b      	mov	r3, r5
   bc41a:	4630      	mov	r0, r6
   bc41c:	4639      	mov	r1, r7
   bc41e:	4622      	mov	r2, r4
   bc420:	f000 fcb2 	bl	bcd88 <__adddf3>
   bc424:	4bc2      	ldr	r3, [pc, #776]	; (bc730 <__ieee754_pow+0x918>)
   bc426:	4299      	cmp	r1, r3
   bc428:	4680      	mov	r8, r0
   bc42a:	4689      	mov	r9, r1
   bc42c:	468a      	mov	sl, r1
   bc42e:	f340 8118 	ble.w	bc662 <__ieee754_pow+0x84a>
   bc432:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   bc436:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   bc43a:	4303      	orrs	r3, r0
   bc43c:	f040 8207 	bne.w	bc84e <__ieee754_pow+0xa36>
   bc440:	a3a3      	add	r3, pc, #652	; (adr r3, bc6d0 <__ieee754_pow+0x8b8>)
   bc442:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc446:	4630      	mov	r0, r6
   bc448:	4639      	mov	r1, r7
   bc44a:	f000 fc9d 	bl	bcd88 <__adddf3>
   bc44e:	4602      	mov	r2, r0
   bc450:	460b      	mov	r3, r1
   bc452:	4640      	mov	r0, r8
   bc454:	4649      	mov	r1, r9
   bc456:	4690      	mov	r8, r2
   bc458:	4699      	mov	r9, r3
   bc45a:	4622      	mov	r2, r4
   bc45c:	462b      	mov	r3, r5
   bc45e:	f000 fc91 	bl	bcd84 <__aeabi_dsub>
   bc462:	4602      	mov	r2, r0
   bc464:	460b      	mov	r3, r1
   bc466:	4640      	mov	r0, r8
   bc468:	4649      	mov	r1, r9
   bc46a:	f001 f8d3 	bl	bd614 <__aeabi_dcmpgt>
   bc46e:	2800      	cmp	r0, #0
   bc470:	f040 81ed 	bne.w	bc84e <__ieee754_pow+0xa36>
   bc474:	f3ca 530a 	ubfx	r3, sl, #20, #11
   bc478:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   bc47c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   bc480:	fa42 f303 	asr.w	r3, r2, r3
   bc484:	4453      	add	r3, sl
   bc486:	49ab      	ldr	r1, [pc, #684]	; (bc734 <__ieee754_pow+0x91c>)
   bc488:	f3c3 520a 	ubfx	r2, r3, #20, #11
   bc48c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   bc490:	fa41 fc02 	asr.w	ip, r1, r2
   bc494:	f3c3 0113 	ubfx	r1, r3, #0, #20
   bc498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc49c:	f1c2 0214 	rsb	r2, r2, #20
   bc4a0:	fa41 f202 	asr.w	r2, r1, r2
   bc4a4:	2000      	movs	r0, #0
   bc4a6:	ea23 010c 	bic.w	r1, r3, ip
   bc4aa:	f1ba 0f00 	cmp.w	sl, #0
   bc4ae:	9200      	str	r2, [sp, #0]
   bc4b0:	460b      	mov	r3, r1
   bc4b2:	4602      	mov	r2, r0
   bc4b4:	da02      	bge.n	bc4bc <__ieee754_pow+0x6a4>
   bc4b6:	9900      	ldr	r1, [sp, #0]
   bc4b8:	4249      	negs	r1, r1
   bc4ba:	9100      	str	r1, [sp, #0]
   bc4bc:	4620      	mov	r0, r4
   bc4be:	4629      	mov	r1, r5
   bc4c0:	f000 fc60 	bl	bcd84 <__aeabi_dsub>
   bc4c4:	9b00      	ldr	r3, [sp, #0]
   bc4c6:	051b      	lsls	r3, r3, #20
   bc4c8:	9302      	str	r3, [sp, #8]
   bc4ca:	4602      	mov	r2, r0
   bc4cc:	460b      	mov	r3, r1
   bc4ce:	4604      	mov	r4, r0
   bc4d0:	460d      	mov	r5, r1
   bc4d2:	4630      	mov	r0, r6
   bc4d4:	4639      	mov	r1, r7
   bc4d6:	f000 fc57 	bl	bcd88 <__adddf3>
   bc4da:	4689      	mov	r9, r1
   bc4dc:	f04f 0800 	mov.w	r8, #0
   bc4e0:	a37d      	add	r3, pc, #500	; (adr r3, bc6d8 <__ieee754_pow+0x8c0>)
   bc4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4e6:	4640      	mov	r0, r8
   bc4e8:	4649      	mov	r1, r9
   bc4ea:	f000 fe03 	bl	bd0f4 <__aeabi_dmul>
   bc4ee:	4622      	mov	r2, r4
   bc4f0:	462b      	mov	r3, r5
   bc4f2:	4682      	mov	sl, r0
   bc4f4:	468b      	mov	fp, r1
   bc4f6:	4640      	mov	r0, r8
   bc4f8:	4649      	mov	r1, r9
   bc4fa:	f000 fc43 	bl	bcd84 <__aeabi_dsub>
   bc4fe:	4602      	mov	r2, r0
   bc500:	460b      	mov	r3, r1
   bc502:	4630      	mov	r0, r6
   bc504:	4639      	mov	r1, r7
   bc506:	f000 fc3d 	bl	bcd84 <__aeabi_dsub>
   bc50a:	a375      	add	r3, pc, #468	; (adr r3, bc6e0 <__ieee754_pow+0x8c8>)
   bc50c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc510:	f000 fdf0 	bl	bd0f4 <__aeabi_dmul>
   bc514:	a374      	add	r3, pc, #464	; (adr r3, bc6e8 <__ieee754_pow+0x8d0>)
   bc516:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc51a:	4604      	mov	r4, r0
   bc51c:	460d      	mov	r5, r1
   bc51e:	4640      	mov	r0, r8
   bc520:	4649      	mov	r1, r9
   bc522:	f000 fde7 	bl	bd0f4 <__aeabi_dmul>
   bc526:	4602      	mov	r2, r0
   bc528:	460b      	mov	r3, r1
   bc52a:	4620      	mov	r0, r4
   bc52c:	4629      	mov	r1, r5
   bc52e:	f000 fc2b 	bl	bcd88 <__adddf3>
   bc532:	4606      	mov	r6, r0
   bc534:	460f      	mov	r7, r1
   bc536:	4632      	mov	r2, r6
   bc538:	463b      	mov	r3, r7
   bc53a:	4650      	mov	r0, sl
   bc53c:	4659      	mov	r1, fp
   bc53e:	f000 fc23 	bl	bcd88 <__adddf3>
   bc542:	4652      	mov	r2, sl
   bc544:	465b      	mov	r3, fp
   bc546:	4604      	mov	r4, r0
   bc548:	460d      	mov	r5, r1
   bc54a:	f000 fc1b 	bl	bcd84 <__aeabi_dsub>
   bc54e:	4602      	mov	r2, r0
   bc550:	460b      	mov	r3, r1
   bc552:	4630      	mov	r0, r6
   bc554:	4639      	mov	r1, r7
   bc556:	f000 fc15 	bl	bcd84 <__aeabi_dsub>
   bc55a:	4622      	mov	r2, r4
   bc55c:	4680      	mov	r8, r0
   bc55e:	4689      	mov	r9, r1
   bc560:	462b      	mov	r3, r5
   bc562:	4620      	mov	r0, r4
   bc564:	4629      	mov	r1, r5
   bc566:	f000 fdc5 	bl	bd0f4 <__aeabi_dmul>
   bc56a:	a361      	add	r3, pc, #388	; (adr r3, bc6f0 <__ieee754_pow+0x8d8>)
   bc56c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc570:	4606      	mov	r6, r0
   bc572:	460f      	mov	r7, r1
   bc574:	f000 fdbe 	bl	bd0f4 <__aeabi_dmul>
   bc578:	a35f      	add	r3, pc, #380	; (adr r3, bc6f8 <__ieee754_pow+0x8e0>)
   bc57a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc57e:	f000 fc01 	bl	bcd84 <__aeabi_dsub>
   bc582:	4632      	mov	r2, r6
   bc584:	463b      	mov	r3, r7
   bc586:	f000 fdb5 	bl	bd0f4 <__aeabi_dmul>
   bc58a:	a35d      	add	r3, pc, #372	; (adr r3, bc700 <__ieee754_pow+0x8e8>)
   bc58c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc590:	f000 fbfa 	bl	bcd88 <__adddf3>
   bc594:	4632      	mov	r2, r6
   bc596:	463b      	mov	r3, r7
   bc598:	f000 fdac 	bl	bd0f4 <__aeabi_dmul>
   bc59c:	a35a      	add	r3, pc, #360	; (adr r3, bc708 <__ieee754_pow+0x8f0>)
   bc59e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc5a2:	f000 fbef 	bl	bcd84 <__aeabi_dsub>
   bc5a6:	4632      	mov	r2, r6
   bc5a8:	463b      	mov	r3, r7
   bc5aa:	f000 fda3 	bl	bd0f4 <__aeabi_dmul>
   bc5ae:	a358      	add	r3, pc, #352	; (adr r3, bc710 <__ieee754_pow+0x8f8>)
   bc5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc5b4:	f000 fbe8 	bl	bcd88 <__adddf3>
   bc5b8:	4632      	mov	r2, r6
   bc5ba:	463b      	mov	r3, r7
   bc5bc:	f000 fd9a 	bl	bd0f4 <__aeabi_dmul>
   bc5c0:	4602      	mov	r2, r0
   bc5c2:	460b      	mov	r3, r1
   bc5c4:	4620      	mov	r0, r4
   bc5c6:	4629      	mov	r1, r5
   bc5c8:	f000 fbdc 	bl	bcd84 <__aeabi_dsub>
   bc5cc:	4606      	mov	r6, r0
   bc5ce:	460f      	mov	r7, r1
   bc5d0:	4632      	mov	r2, r6
   bc5d2:	463b      	mov	r3, r7
   bc5d4:	4620      	mov	r0, r4
   bc5d6:	4629      	mov	r1, r5
   bc5d8:	f000 fd8c 	bl	bd0f4 <__aeabi_dmul>
   bc5dc:	4602      	mov	r2, r0
   bc5de:	460b      	mov	r3, r1
   bc5e0:	4630      	mov	r0, r6
   bc5e2:	4639      	mov	r1, r7
   bc5e4:	4616      	mov	r6, r2
   bc5e6:	461f      	mov	r7, r3
   bc5e8:	2200      	movs	r2, #0
   bc5ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc5ee:	f000 fbc9 	bl	bcd84 <__aeabi_dsub>
   bc5f2:	4602      	mov	r2, r0
   bc5f4:	460b      	mov	r3, r1
   bc5f6:	4630      	mov	r0, r6
   bc5f8:	4639      	mov	r1, r7
   bc5fa:	f000 fea5 	bl	bd348 <__aeabi_ddiv>
   bc5fe:	4642      	mov	r2, r8
   bc600:	4606      	mov	r6, r0
   bc602:	460f      	mov	r7, r1
   bc604:	464b      	mov	r3, r9
   bc606:	4620      	mov	r0, r4
   bc608:	4629      	mov	r1, r5
   bc60a:	f000 fd73 	bl	bd0f4 <__aeabi_dmul>
   bc60e:	4642      	mov	r2, r8
   bc610:	464b      	mov	r3, r9
   bc612:	f000 fbb9 	bl	bcd88 <__adddf3>
   bc616:	4602      	mov	r2, r0
   bc618:	460b      	mov	r3, r1
   bc61a:	4630      	mov	r0, r6
   bc61c:	4639      	mov	r1, r7
   bc61e:	f000 fbb1 	bl	bcd84 <__aeabi_dsub>
   bc622:	4622      	mov	r2, r4
   bc624:	462b      	mov	r3, r5
   bc626:	f000 fbad 	bl	bcd84 <__aeabi_dsub>
   bc62a:	4602      	mov	r2, r0
   bc62c:	460b      	mov	r3, r1
   bc62e:	2000      	movs	r0, #0
   bc630:	4941      	ldr	r1, [pc, #260]	; (bc738 <__ieee754_pow+0x920>)
   bc632:	f000 fba7 	bl	bcd84 <__aeabi_dsub>
   bc636:	9a02      	ldr	r2, [sp, #8]
   bc638:	460b      	mov	r3, r1
   bc63a:	4413      	add	r3, r2
   bc63c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   bc640:	f2c0 8143 	blt.w	bc8ca <__ieee754_pow+0xab2>
   bc644:	4619      	mov	r1, r3
   bc646:	ec53 2b18 	vmov	r2, r3, d8
   bc64a:	f000 fd53 	bl	bd0f4 <__aeabi_dmul>
   bc64e:	ec41 0b10 	vmov	d0, r0, r1
   bc652:	e42d      	b.n	bbeb0 <__ieee754_pow+0x98>
   bc654:	f1bb 0f00 	cmp.w	fp, #0
   bc658:	f6ff aca0 	blt.w	bbf9c <__ieee754_pow+0x184>
   bc65c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; bc718 <__ieee754_pow+0x900>
   bc660:	e426      	b.n	bbeb0 <__ieee754_pow+0x98>
   bc662:	f8df c0dc 	ldr.w	ip, [pc, #220]	; bc740 <__ieee754_pow+0x928>
   bc666:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bc66a:	4563      	cmp	r3, ip
   bc66c:	f340 80e7 	ble.w	bc83e <__ieee754_pow+0xa26>
   bc670:	4b32      	ldr	r3, [pc, #200]	; (bc73c <__ieee754_pow+0x924>)
   bc672:	440b      	add	r3, r1
   bc674:	4303      	orrs	r3, r0
   bc676:	d10a      	bne.n	bc68e <__ieee754_pow+0x876>
   bc678:	4622      	mov	r2, r4
   bc67a:	462b      	mov	r3, r5
   bc67c:	f000 fb82 	bl	bcd84 <__aeabi_dsub>
   bc680:	4632      	mov	r2, r6
   bc682:	463b      	mov	r3, r7
   bc684:	f000 ffbc 	bl	bd600 <__aeabi_dcmpge>
   bc688:	2800      	cmp	r0, #0
   bc68a:	f43f aef3 	beq.w	bc474 <__ieee754_pow+0x65c>
   bc68e:	a324      	add	r3, pc, #144	; (adr r3, bc720 <__ieee754_pow+0x908>)
   bc690:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc694:	ec51 0b18 	vmov	r0, r1, d8
   bc698:	f000 fd2c 	bl	bd0f4 <__aeabi_dmul>
   bc69c:	a320      	add	r3, pc, #128	; (adr r3, bc720 <__ieee754_pow+0x908>)
   bc69e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc6a2:	f000 fd27 	bl	bd0f4 <__aeabi_dmul>
   bc6a6:	ec41 0b10 	vmov	d0, r0, r1
   bc6aa:	e401      	b.n	bbeb0 <__ieee754_pow+0x98>
   bc6ac:	ed9f 7b1e 	vldr	d7, [pc, #120]	; bc728 <__ieee754_pow+0x910>
   bc6b0:	eeb0 8a47 	vmov.f32	s16, s14
   bc6b4:	eef0 8a67 	vmov.f32	s17, s15
   bc6b8:	e686      	b.n	bc3c8 <__ieee754_pow+0x5b0>
   bc6ba:	f1bb 0f00 	cmp.w	fp, #0
   bc6be:	dacd      	bge.n	bc65c <__ieee754_pow+0x844>
   bc6c0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   bc6c4:	ee00 6a10 	vmov	s0, r6
   bc6c8:	ee00 3a90 	vmov	s1, r3
   bc6cc:	f7ff bbf0 	b.w	bbeb0 <__ieee754_pow+0x98>
   bc6d0:	652b82fe 	.word	0x652b82fe
   bc6d4:	3c971547 	.word	0x3c971547
   bc6d8:	00000000 	.word	0x00000000
   bc6dc:	3fe62e43 	.word	0x3fe62e43
   bc6e0:	fefa39ef 	.word	0xfefa39ef
   bc6e4:	3fe62e42 	.word	0x3fe62e42
   bc6e8:	0ca86c39 	.word	0x0ca86c39
   bc6ec:	be205c61 	.word	0xbe205c61
   bc6f0:	72bea4d0 	.word	0x72bea4d0
   bc6f4:	3e663769 	.word	0x3e663769
   bc6f8:	c5d26bf1 	.word	0xc5d26bf1
   bc6fc:	3ebbbd41 	.word	0x3ebbbd41
   bc700:	af25de2c 	.word	0xaf25de2c
   bc704:	3f11566a 	.word	0x3f11566a
   bc708:	16bebd93 	.word	0x16bebd93
   bc70c:	3f66c16c 	.word	0x3f66c16c
   bc710:	5555553e 	.word	0x5555553e
   bc714:	3fc55555 	.word	0x3fc55555
	...
   bc720:	c2f8f359 	.word	0xc2f8f359
   bc724:	01a56e1f 	.word	0x01a56e1f
   bc728:	00000000 	.word	0x00000000
   bc72c:	3ff00000 	.word	0x3ff00000
   bc730:	408fffff 	.word	0x408fffff
   bc734:	000fffff 	.word	0x000fffff
   bc738:	3ff00000 	.word	0x3ff00000
   bc73c:	3f6f3400 	.word	0x3f6f3400
   bc740:	4090cbff 	.word	0x4090cbff
   bc744:	4598      	cmp	r8, r3
   bc746:	db85      	blt.n	bc654 <__ieee754_pow+0x83c>
   bc748:	4b7d      	ldr	r3, [pc, #500]	; (bc940 <__ieee754_pow+0xb28>)
   bc74a:	4598      	cmp	r8, r3
   bc74c:	f73f ac22 	bgt.w	bbf94 <__ieee754_pow+0x17c>
   bc750:	ec51 0b10 	vmov	r0, r1, d0
   bc754:	4b7a      	ldr	r3, [pc, #488]	; (bc940 <__ieee754_pow+0xb28>)
   bc756:	2200      	movs	r2, #0
   bc758:	f000 fb14 	bl	bcd84 <__aeabi_dsub>
   bc75c:	a368      	add	r3, pc, #416	; (adr r3, bc900 <__ieee754_pow+0xae8>)
   bc75e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc762:	4604      	mov	r4, r0
   bc764:	460d      	mov	r5, r1
   bc766:	f000 fcc5 	bl	bd0f4 <__aeabi_dmul>
   bc76a:	a367      	add	r3, pc, #412	; (adr r3, bc908 <__ieee754_pow+0xaf0>)
   bc76c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc770:	4682      	mov	sl, r0
   bc772:	468b      	mov	fp, r1
   bc774:	4620      	mov	r0, r4
   bc776:	4629      	mov	r1, r5
   bc778:	f000 fcbc 	bl	bd0f4 <__aeabi_dmul>
   bc77c:	4b71      	ldr	r3, [pc, #452]	; (bc944 <__ieee754_pow+0xb2c>)
   bc77e:	ec41 0b18 	vmov	d8, r0, r1
   bc782:	2200      	movs	r2, #0
   bc784:	4620      	mov	r0, r4
   bc786:	4629      	mov	r1, r5
   bc788:	f000 fcb4 	bl	bd0f4 <__aeabi_dmul>
   bc78c:	4602      	mov	r2, r0
   bc78e:	460b      	mov	r3, r1
   bc790:	a15f      	add	r1, pc, #380	; (adr r1, bc910 <__ieee754_pow+0xaf8>)
   bc792:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc796:	f000 faf5 	bl	bcd84 <__aeabi_dsub>
   bc79a:	4622      	mov	r2, r4
   bc79c:	462b      	mov	r3, r5
   bc79e:	f000 fca9 	bl	bd0f4 <__aeabi_dmul>
   bc7a2:	4602      	mov	r2, r0
   bc7a4:	460b      	mov	r3, r1
   bc7a6:	2000      	movs	r0, #0
   bc7a8:	4967      	ldr	r1, [pc, #412]	; (bc948 <__ieee754_pow+0xb30>)
   bc7aa:	f000 faeb 	bl	bcd84 <__aeabi_dsub>
   bc7ae:	4622      	mov	r2, r4
   bc7b0:	4680      	mov	r8, r0
   bc7b2:	4689      	mov	r9, r1
   bc7b4:	462b      	mov	r3, r5
   bc7b6:	4620      	mov	r0, r4
   bc7b8:	4629      	mov	r1, r5
   bc7ba:	f000 fc9b 	bl	bd0f4 <__aeabi_dmul>
   bc7be:	4602      	mov	r2, r0
   bc7c0:	460b      	mov	r3, r1
   bc7c2:	4640      	mov	r0, r8
   bc7c4:	4649      	mov	r1, r9
   bc7c6:	f000 fc95 	bl	bd0f4 <__aeabi_dmul>
   bc7ca:	a353      	add	r3, pc, #332	; (adr r3, bc918 <__ieee754_pow+0xb00>)
   bc7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7d0:	f000 fc90 	bl	bd0f4 <__aeabi_dmul>
   bc7d4:	4602      	mov	r2, r0
   bc7d6:	460b      	mov	r3, r1
   bc7d8:	ec51 0b18 	vmov	r0, r1, d8
   bc7dc:	f000 fad2 	bl	bcd84 <__aeabi_dsub>
   bc7e0:	4680      	mov	r8, r0
   bc7e2:	4689      	mov	r9, r1
   bc7e4:	4642      	mov	r2, r8
   bc7e6:	464b      	mov	r3, r9
   bc7e8:	4650      	mov	r0, sl
   bc7ea:	4659      	mov	r1, fp
   bc7ec:	f000 facc 	bl	bcd88 <__adddf3>
   bc7f0:	2000      	movs	r0, #0
   bc7f2:	4652      	mov	r2, sl
   bc7f4:	465b      	mov	r3, fp
   bc7f6:	4604      	mov	r4, r0
   bc7f8:	460d      	mov	r5, r1
   bc7fa:	e591      	b.n	bc320 <__ieee754_pow+0x508>
   bc7fc:	4622      	mov	r2, r4
   bc7fe:	462b      	mov	r3, r5
   bc800:	4620      	mov	r0, r4
   bc802:	4629      	mov	r1, r5
   bc804:	f000 fc76 	bl	bd0f4 <__aeabi_dmul>
   bc808:	ec41 0b10 	vmov	d0, r0, r1
   bc80c:	f7ff bb50 	b.w	bbeb0 <__ieee754_pow+0x98>
   bc810:	494b      	ldr	r1, [pc, #300]	; (bc940 <__ieee754_pow+0xb28>)
   bc812:	2000      	movs	r0, #0
   bc814:	4622      	mov	r2, r4
   bc816:	462b      	mov	r3, r5
   bc818:	f000 fd96 	bl	bd348 <__aeabi_ddiv>
   bc81c:	ec41 0b10 	vmov	d0, r0, r1
   bc820:	f7ff bb46 	b.w	bbeb0 <__ieee754_pow+0x98>
   bc824:	2b00      	cmp	r3, #0
   bc826:	d144      	bne.n	bc8b2 <__ieee754_pow+0xa9a>
   bc828:	f1c1 0114 	rsb	r1, r1, #20
   bc82c:	fa4a f001 	asr.w	r0, sl, r1
   bc830:	fa00 f101 	lsl.w	r1, r0, r1
   bc834:	4551      	cmp	r1, sl
   bc836:	d05a      	beq.n	bc8ee <__ieee754_pow+0xad6>
   bc838:	9300      	str	r3, [sp, #0]
   bc83a:	f7ff bb17 	b.w	bbe6c <__ieee754_pow+0x54>
   bc83e:	4a42      	ldr	r2, [pc, #264]	; (bc948 <__ieee754_pow+0xb30>)
   bc840:	4293      	cmp	r3, r2
   bc842:	dc5b      	bgt.n	bc8fc <__ieee754_pow+0xae4>
   bc844:	e9dd 1200 	ldrd	r1, r2, [sp]
   bc848:	9102      	str	r1, [sp, #8]
   bc84a:	9100      	str	r1, [sp, #0]
   bc84c:	e646      	b.n	bc4dc <__ieee754_pow+0x6c4>
   bc84e:	a334      	add	r3, pc, #208	; (adr r3, bc920 <__ieee754_pow+0xb08>)
   bc850:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc854:	ec51 0b18 	vmov	r0, r1, d8
   bc858:	f000 fc4c 	bl	bd0f4 <__aeabi_dmul>
   bc85c:	a330      	add	r3, pc, #192	; (adr r3, bc920 <__ieee754_pow+0xb08>)
   bc85e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc862:	f000 fc47 	bl	bd0f4 <__aeabi_dmul>
   bc866:	ec41 0b10 	vmov	d0, r0, r1
   bc86a:	f7ff bb21 	b.w	bbeb0 <__ieee754_pow+0x98>
   bc86e:	9b00      	ldr	r3, [sp, #0]
   bc870:	2b01      	cmp	r3, #1
   bc872:	f47f ab1d 	bne.w	bbeb0 <__ieee754_pow+0x98>
   bc876:	ee10 1a90 	vmov	r1, s1
   bc87a:	ee10 2a10 	vmov	r2, s0
   bc87e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc882:	ec43 2b10 	vmov	d0, r2, r3
   bc886:	f7ff bb13 	b.w	bbeb0 <__ieee754_pow+0x98>
   bc88a:	ed9f 7b27 	vldr	d7, [pc, #156]	; bc928 <__ieee754_pow+0xb10>
   bc88e:	eeb0 ca47 	vmov.f32	s24, s14
   bc892:	eef0 ca67 	vmov.f32	s25, s15
   bc896:	ed9f 7b26 	vldr	d7, [pc, #152]	; bc930 <__ieee754_pow+0xb18>
   bc89a:	eeb0 da47 	vmov.f32	s26, s14
   bc89e:	eef0 da67 	vmov.f32	s27, s15
   bc8a2:	ed9f 7b25 	vldr	d7, [pc, #148]	; bc938 <__ieee754_pow+0xb20>
   bc8a6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   bc8aa:	ec53 2b17 	vmov	r2, r3, d7
   bc8ae:	f7ff bbeb 	b.w	bc088 <__ieee754_pow+0x270>
   bc8b2:	ec45 4b10 	vmov	d0, r4, r5
   bc8b6:	9200      	str	r2, [sp, #0]
   bc8b8:	f000 f914 	bl	bcae4 <fabs>
   bc8bc:	9a00      	ldr	r2, [sp, #0]
   bc8be:	2a00      	cmp	r2, #0
   bc8c0:	f47f ab92 	bne.w	bbfe8 <__ieee754_pow+0x1d0>
   bc8c4:	9200      	str	r2, [sp, #0]
   bc8c6:	f7ff bb26 	b.w	bbf16 <__ieee754_pow+0xfe>
   bc8ca:	ec41 0b10 	vmov	d0, r0, r1
   bc8ce:	9800      	ldr	r0, [sp, #0]
   bc8d0:	f000 f9c2 	bl	bcc58 <scalbn>
   bc8d4:	ec51 0b10 	vmov	r0, r1, d0
   bc8d8:	e6b5      	b.n	bc646 <__ieee754_pow+0x82e>
   bc8da:	f000 0001 	and.w	r0, r0, #1
   bc8de:	f1c0 0102 	rsb	r1, r0, #2
   bc8e2:	9100      	str	r1, [sp, #0]
   bc8e4:	2b00      	cmp	r3, #0
   bc8e6:	f43f aac1 	beq.w	bbe6c <__ieee754_pow+0x54>
   bc8ea:	f7ff bb0d 	b.w	bbf08 <__ieee754_pow+0xf0>
   bc8ee:	f000 0001 	and.w	r0, r0, #1
   bc8f2:	f1c0 0302 	rsb	r3, r0, #2
   bc8f6:	9300      	str	r3, [sp, #0]
   bc8f8:	f7ff bab8 	b.w	bbe6c <__ieee754_pow+0x54>
   bc8fc:	151b      	asrs	r3, r3, #20
   bc8fe:	e5bb      	b.n	bc478 <__ieee754_pow+0x660>
   bc900:	60000000 	.word	0x60000000
   bc904:	3ff71547 	.word	0x3ff71547
   bc908:	f85ddf44 	.word	0xf85ddf44
   bc90c:	3e54ae0b 	.word	0x3e54ae0b
   bc910:	55555555 	.word	0x55555555
   bc914:	3fd55555 	.word	0x3fd55555
   bc918:	652b82fe 	.word	0x652b82fe
   bc91c:	3ff71547 	.word	0x3ff71547
   bc920:	8800759c 	.word	0x8800759c
   bc924:	7e37e43c 	.word	0x7e37e43c
   bc928:	40000000 	.word	0x40000000
   bc92c:	3fe2b803 	.word	0x3fe2b803
   bc930:	43cfd006 	.word	0x43cfd006
   bc934:	3e4cfdeb 	.word	0x3e4cfdeb
   bc938:	00000000 	.word	0x00000000
   bc93c:	3ff80000 	.word	0x3ff80000
   bc940:	3ff00000 	.word	0x3ff00000
   bc944:	3fd00000 	.word	0x3fd00000
   bc948:	3fe00000 	.word	0x3fe00000

000bc94c <__ieee754_sqrt>:
   bc94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc950:	4a63      	ldr	r2, [pc, #396]	; (bcae0 <__ieee754_sqrt+0x194>)
   bc952:	ec55 4b10 	vmov	r4, r5, d0
   bc956:	43aa      	bics	r2, r5
   bc958:	f000 809f 	beq.w	bca9a <__ieee754_sqrt+0x14e>
   bc95c:	2d00      	cmp	r5, #0
   bc95e:	ee10 ca10 	vmov	ip, s0
   bc962:	462b      	mov	r3, r5
   bc964:	dd54      	ble.n	bca10 <__ieee754_sqrt+0xc4>
   bc966:	1529      	asrs	r1, r5, #20
   bc968:	d063      	beq.n	bca32 <__ieee754_sqrt+0xe6>
   bc96a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bc96e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bc972:	07c9      	lsls	r1, r1, #31
   bc974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc978:	d404      	bmi.n	bc984 <__ieee754_sqrt+0x38>
   bc97a:	005b      	lsls	r3, r3, #1
   bc97c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc980:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc984:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bc988:	2600      	movs	r6, #0
   bc98a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bc98e:	107f      	asrs	r7, r7, #1
   bc990:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc994:	f04f 0e16 	mov.w	lr, #22
   bc998:	4634      	mov	r4, r6
   bc99a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bc99e:	18a1      	adds	r1, r4, r2
   bc9a0:	4299      	cmp	r1, r3
   bc9a2:	dc02      	bgt.n	bc9aa <__ieee754_sqrt+0x5e>
   bc9a4:	1a5b      	subs	r3, r3, r1
   bc9a6:	188c      	adds	r4, r1, r2
   bc9a8:	4416      	add	r6, r2
   bc9aa:	005b      	lsls	r3, r3, #1
   bc9ac:	f1be 0e01 	subs.w	lr, lr, #1
   bc9b0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc9b4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc9b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc9bc:	d1ef      	bne.n	bc99e <__ieee754_sqrt+0x52>
   bc9be:	4675      	mov	r5, lr
   bc9c0:	2020      	movs	r0, #32
   bc9c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bc9c6:	e00a      	b.n	bc9de <__ieee754_sqrt+0x92>
   bc9c8:	d044      	beq.n	bca54 <__ieee754_sqrt+0x108>
   bc9ca:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bc9ce:	3801      	subs	r0, #1
   bc9d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bc9d4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc9d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc9dc:	d043      	beq.n	bca66 <__ieee754_sqrt+0x11a>
   bc9de:	42a3      	cmp	r3, r4
   bc9e0:	eb02 010e 	add.w	r1, r2, lr
   bc9e4:	ddf0      	ble.n	bc9c8 <__ieee754_sqrt+0x7c>
   bc9e6:	2900      	cmp	r1, #0
   bc9e8:	eb01 0e02 	add.w	lr, r1, r2
   bc9ec:	db0a      	blt.n	bca04 <__ieee754_sqrt+0xb8>
   bc9ee:	46a0      	mov	r8, r4
   bc9f0:	1b1b      	subs	r3, r3, r4
   bc9f2:	4561      	cmp	r1, ip
   bc9f4:	bf88      	it	hi
   bc9f6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bc9fa:	ebac 0c01 	sub.w	ip, ip, r1
   bc9fe:	4415      	add	r5, r2
   bca00:	4644      	mov	r4, r8
   bca02:	e7e2      	b.n	bc9ca <__ieee754_sqrt+0x7e>
   bca04:	f1be 0f00 	cmp.w	lr, #0
   bca08:	dbf1      	blt.n	bc9ee <__ieee754_sqrt+0xa2>
   bca0a:	f104 0801 	add.w	r8, r4, #1
   bca0e:	e7ef      	b.n	bc9f0 <__ieee754_sqrt+0xa4>
   bca10:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bca14:	4322      	orrs	r2, r4
   bca16:	d038      	beq.n	bca8a <__ieee754_sqrt+0x13e>
   bca18:	2d00      	cmp	r5, #0
   bca1a:	d14e      	bne.n	bcaba <__ieee754_sqrt+0x16e>
   bca1c:	4629      	mov	r1, r5
   bca1e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bca22:	3915      	subs	r1, #21
   bca24:	4613      	mov	r3, r2
   bca26:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bca2a:	2a00      	cmp	r2, #0
   bca2c:	d0f7      	beq.n	bca1e <__ieee754_sqrt+0xd2>
   bca2e:	02d6      	lsls	r6, r2, #11
   bca30:	d450      	bmi.n	bcad4 <__ieee754_sqrt+0x188>
   bca32:	2000      	movs	r0, #0
   bca34:	005b      	lsls	r3, r3, #1
   bca36:	02dd      	lsls	r5, r3, #11
   bca38:	4604      	mov	r4, r0
   bca3a:	f100 0001 	add.w	r0, r0, #1
   bca3e:	d5f9      	bpl.n	bca34 <__ieee754_sqrt+0xe8>
   bca40:	461a      	mov	r2, r3
   bca42:	4663      	mov	r3, ip
   bca44:	fa0c fc00 	lsl.w	ip, ip, r0
   bca48:	f1c0 0020 	rsb	r0, r0, #32
   bca4c:	40c3      	lsrs	r3, r0
   bca4e:	1b09      	subs	r1, r1, r4
   bca50:	4313      	orrs	r3, r2
   bca52:	e78a      	b.n	bc96a <__ieee754_sqrt+0x1e>
   bca54:	4561      	cmp	r1, ip
   bca56:	d8b8      	bhi.n	bc9ca <__ieee754_sqrt+0x7e>
   bca58:	2900      	cmp	r1, #0
   bca5a:	eb01 0e02 	add.w	lr, r1, r2
   bca5e:	dbd1      	blt.n	bca04 <__ieee754_sqrt+0xb8>
   bca60:	4698      	mov	r8, r3
   bca62:	2300      	movs	r3, #0
   bca64:	e7c9      	b.n	bc9fa <__ieee754_sqrt+0xae>
   bca66:	ea53 030c 	orrs.w	r3, r3, ip
   bca6a:	d110      	bne.n	bca8e <__ieee754_sqrt+0x142>
   bca6c:	0868      	lsrs	r0, r5, #1
   bca6e:	1071      	asrs	r1, r6, #1
   bca70:	07f3      	lsls	r3, r6, #31
   bca72:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bca76:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bca7a:	bf48      	it	mi
   bca7c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bca80:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bca84:	4602      	mov	r2, r0
   bca86:	ec43 2b10 	vmov	d0, r2, r3
   bca8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bca8e:	1c6a      	adds	r2, r5, #1
   bca90:	bf16      	itet	ne
   bca92:	1c68      	addne	r0, r5, #1
   bca94:	3601      	addeq	r6, #1
   bca96:	0840      	lsrne	r0, r0, #1
   bca98:	e7e9      	b.n	bca6e <__ieee754_sqrt+0x122>
   bca9a:	ee10 2a10 	vmov	r2, s0
   bca9e:	ee10 0a10 	vmov	r0, s0
   bcaa2:	462b      	mov	r3, r5
   bcaa4:	4629      	mov	r1, r5
   bcaa6:	f000 fb25 	bl	bd0f4 <__aeabi_dmul>
   bcaaa:	4622      	mov	r2, r4
   bcaac:	462b      	mov	r3, r5
   bcaae:	f000 f96b 	bl	bcd88 <__adddf3>
   bcab2:	ec41 0b10 	vmov	d0, r0, r1
   bcab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcaba:	ee10 2a10 	vmov	r2, s0
   bcabe:	4620      	mov	r0, r4
   bcac0:	4629      	mov	r1, r5
   bcac2:	f000 f95f 	bl	bcd84 <__aeabi_dsub>
   bcac6:	4602      	mov	r2, r0
   bcac8:	460b      	mov	r3, r1
   bcaca:	f000 fc3d 	bl	bd348 <__aeabi_ddiv>
   bcace:	ec41 0b10 	vmov	d0, r0, r1
   bcad2:	e7da      	b.n	bca8a <__ieee754_sqrt+0x13e>
   bcad4:	4663      	mov	r3, ip
   bcad6:	2020      	movs	r0, #32
   bcad8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bcadc:	e7b6      	b.n	bca4c <__ieee754_sqrt+0x100>
   bcade:	bf00      	nop
   bcae0:	7ff00000 	.word	0x7ff00000

000bcae4 <fabs>:
   bcae4:	ec51 0b10 	vmov	r0, r1, d0
   bcae8:	ee10 2a10 	vmov	r2, s0
   bcaec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bcaf0:	ec43 2b10 	vmov	d0, r2, r3
   bcaf4:	4770      	bx	lr
   bcaf6:	bf00      	nop

000bcaf8 <finite>:
   bcaf8:	b082      	sub	sp, #8
   bcafa:	ed8d 0b00 	vstr	d0, [sp]
   bcafe:	9801      	ldr	r0, [sp, #4]
   bcb00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bcb04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bcb08:	0fc0      	lsrs	r0, r0, #31
   bcb0a:	b002      	add	sp, #8
   bcb0c:	4770      	bx	lr
   bcb0e:	bf00      	nop

000bcb10 <nan>:
   bcb10:	ed9f 0b01 	vldr	d0, [pc, #4]	; bcb18 <nan+0x8>
   bcb14:	4770      	bx	lr
   bcb16:	bf00      	nop
   bcb18:	00000000 	.word	0x00000000
   bcb1c:	7ff80000 	.word	0x7ff80000

000bcb20 <rint>:
   bcb20:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcb22:	ec53 2b10 	vmov	r2, r3, d0
   bcb26:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bcb2a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bcb2e:	2913      	cmp	r1, #19
   bcb30:	ee10 0a10 	vmov	r0, s0
   bcb34:	b083      	sub	sp, #12
   bcb36:	461c      	mov	r4, r3
   bcb38:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   bcb3c:	dc3a      	bgt.n	bcbb4 <rint+0x94>
   bcb3e:	2900      	cmp	r1, #0
   bcb40:	db30      	blt.n	bcba4 <rint+0x84>
   bcb42:	4d42      	ldr	r5, [pc, #264]	; (bcc4c <rint+0x12c>)
   bcb44:	fa45 fc01 	asr.w	ip, r5, r1
   bcb48:	ea03 050c 	and.w	r5, r3, ip
   bcb4c:	4315      	orrs	r5, r2
   bcb4e:	d02d      	beq.n	bcbac <rint+0x8c>
   bcb50:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   bcb54:	4318      	orrs	r0, r3
   bcb56:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   bcb5a:	d00c      	beq.n	bcb76 <rint+0x56>
   bcb5c:	ea24 0c0c 	bic.w	ip, r4, ip
   bcb60:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bcb64:	2913      	cmp	r1, #19
   bcb66:	fa44 f101 	asr.w	r1, r4, r1
   bcb6a:	bf0c      	ite	eq
   bcb6c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bcb70:	2000      	movne	r0, #0
   bcb72:	ea4c 0401 	orr.w	r4, ip, r1
   bcb76:	4936      	ldr	r1, [pc, #216]	; (bcc50 <rint+0x130>)
   bcb78:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bcb7c:	4623      	mov	r3, r4
   bcb7e:	e9de 4500 	ldrd	r4, r5, [lr]
   bcb82:	4602      	mov	r2, r0
   bcb84:	4629      	mov	r1, r5
   bcb86:	4620      	mov	r0, r4
   bcb88:	f000 f8fe 	bl	bcd88 <__adddf3>
   bcb8c:	e9cd 0100 	strd	r0, r1, [sp]
   bcb90:	e9dd 0100 	ldrd	r0, r1, [sp]
   bcb94:	4622      	mov	r2, r4
   bcb96:	462b      	mov	r3, r5
   bcb98:	f000 f8f4 	bl	bcd84 <__aeabi_dsub>
   bcb9c:	ec41 0b10 	vmov	d0, r0, r1
   bcba0:	b003      	add	sp, #12
   bcba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcba4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bcba8:	4311      	orrs	r1, r2
   bcbaa:	d124      	bne.n	bcbf6 <rint+0xd6>
   bcbac:	ec43 2b10 	vmov	d0, r2, r3
   bcbb0:	b003      	add	sp, #12
   bcbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcbb4:	2933      	cmp	r1, #51	; 0x33
   bcbb6:	dd08      	ble.n	bcbca <rint+0xaa>
   bcbb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bcbbc:	d1f6      	bne.n	bcbac <rint+0x8c>
   bcbbe:	4619      	mov	r1, r3
   bcbc0:	f000 f8e2 	bl	bcd88 <__adddf3>
   bcbc4:	ec41 0b10 	vmov	d0, r0, r1
   bcbc8:	e7f2      	b.n	bcbb0 <rint+0x90>
   bcbca:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bcbce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bcbd2:	fa21 f10c 	lsr.w	r1, r1, ip
   bcbd6:	420a      	tst	r2, r1
   bcbd8:	d0e8      	beq.n	bcbac <rint+0x8c>
   bcbda:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bcbde:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bcbe2:	d0c8      	beq.n	bcb76 <rint+0x56>
   bcbe4:	ea20 0303 	bic.w	r3, r0, r3
   bcbe8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bcbec:	fa40 fc0c 	asr.w	ip, r0, ip
   bcbf0:	ea43 000c 	orr.w	r0, r3, ip
   bcbf4:	e7bf      	b.n	bcb76 <rint+0x56>
   bcbf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bcbfa:	4318      	orrs	r0, r3
   bcbfc:	4a14      	ldr	r2, [pc, #80]	; (bcc50 <rint+0x130>)
   bcbfe:	4243      	negs	r3, r0
   bcc00:	4303      	orrs	r3, r0
   bcc02:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   bcc06:	0b1b      	lsrs	r3, r3, #12
   bcc08:	0c62      	lsrs	r2, r4, #17
   bcc0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   bcc0e:	0452      	lsls	r2, r2, #17
   bcc10:	ea43 0702 	orr.w	r7, r3, r2
   bcc14:	463b      	mov	r3, r7
   bcc16:	e9de 6700 	ldrd	r6, r7, [lr]
   bcc1a:	ee10 2a10 	vmov	r2, s0
   bcc1e:	4630      	mov	r0, r6
   bcc20:	4639      	mov	r1, r7
   bcc22:	f000 f8b1 	bl	bcd88 <__adddf3>
   bcc26:	e9cd 0100 	strd	r0, r1, [sp]
   bcc2a:	4632      	mov	r2, r6
   bcc2c:	463b      	mov	r3, r7
   bcc2e:	e9dd 0100 	ldrd	r0, r1, [sp]
   bcc32:	f000 f8a7 	bl	bcd84 <__aeabi_dsub>
   bcc36:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   bcc3a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bcc3e:	4602      	mov	r2, r0
   bcc40:	ea41 0304 	orr.w	r3, r1, r4
   bcc44:	ec43 2b10 	vmov	d0, r2, r3
   bcc48:	b003      	add	sp, #12
   bcc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcc4c:	000fffff 	.word	0x000fffff
   bcc50:	000befd8 	.word	0x000befd8
   bcc54:	00000000 	.word	0x00000000

000bcc58 <scalbn>:
   bcc58:	b538      	push	{r3, r4, r5, lr}
   bcc5a:	ec53 2b10 	vmov	r2, r3, d0
   bcc5e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bcc62:	4604      	mov	r4, r0
   bcc64:	469c      	mov	ip, r3
   bcc66:	bb89      	cbnz	r1, bcccc <scalbn+0x74>
   bcc68:	ee10 1a10 	vmov	r1, s0
   bcc6c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bcc70:	ea5c 0101 	orrs.w	r1, ip, r1
   bcc74:	d029      	beq.n	bccca <scalbn+0x72>
   bcc76:	4619      	mov	r1, r3
   bcc78:	2200      	movs	r2, #0
   bcc7a:	4b3d      	ldr	r3, [pc, #244]	; (bcd70 <scalbn+0x118>)
   bcc7c:	4d3d      	ldr	r5, [pc, #244]	; (bcd74 <scalbn+0x11c>)
   bcc7e:	ee10 0a10 	vmov	r0, s0
   bcc82:	f000 fa37 	bl	bd0f4 <__aeabi_dmul>
   bcc86:	42ac      	cmp	r4, r5
   bcc88:	4602      	mov	r2, r0
   bcc8a:	460b      	mov	r3, r1
   bcc8c:	db16      	blt.n	bccbc <scalbn+0x64>
   bcc8e:	468c      	mov	ip, r1
   bcc90:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bcc94:	3936      	subs	r1, #54	; 0x36
   bcc96:	4421      	add	r1, r4
   bcc98:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bcc9c:	4281      	cmp	r1, r0
   bcc9e:	dc21      	bgt.n	bcce4 <scalbn+0x8c>
   bcca0:	2900      	cmp	r1, #0
   bcca2:	dc47      	bgt.n	bcd34 <scalbn+0xdc>
   bcca4:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bcca8:	da34      	bge.n	bcd14 <scalbn+0xbc>
   bccaa:	f24c 3150 	movw	r1, #50000	; 0xc350
   bccae:	428c      	cmp	r4, r1
   bccb0:	dc18      	bgt.n	bcce4 <scalbn+0x8c>
   bccb2:	2b00      	cmp	r3, #0
   bccb4:	a126      	add	r1, pc, #152	; (adr r1, bcd50 <scalbn+0xf8>)
   bccb6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bccba:	db44      	blt.n	bcd46 <scalbn+0xee>
   bccbc:	a324      	add	r3, pc, #144	; (adr r3, bcd50 <scalbn+0xf8>)
   bccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccc2:	f000 fa17 	bl	bd0f4 <__aeabi_dmul>
   bccc6:	ec41 0b10 	vmov	d0, r0, r1
   bccca:	bd38      	pop	{r3, r4, r5, pc}
   bcccc:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bccd0:	4281      	cmp	r1, r0
   bccd2:	d1e0      	bne.n	bcc96 <scalbn+0x3e>
   bccd4:	ee10 0a10 	vmov	r0, s0
   bccd8:	4619      	mov	r1, r3
   bccda:	f000 f855 	bl	bcd88 <__adddf3>
   bccde:	ec41 0b10 	vmov	d0, r0, r1
   bcce2:	bd38      	pop	{r3, r4, r5, pc}
   bcce4:	2b00      	cmp	r3, #0
   bcce6:	a11c      	add	r1, pc, #112	; (adr r1, bcd58 <scalbn+0x100>)
   bcce8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bccec:	db07      	blt.n	bccfe <scalbn+0xa6>
   bccee:	a31a      	add	r3, pc, #104	; (adr r3, bcd58 <scalbn+0x100>)
   bccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccf4:	f000 f9fe 	bl	bd0f4 <__aeabi_dmul>
   bccf8:	ec41 0b10 	vmov	d0, r0, r1
   bccfc:	bd38      	pop	{r3, r4, r5, pc}
   bccfe:	a118      	add	r1, pc, #96	; (adr r1, bcd60 <scalbn+0x108>)
   bcd00:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcd04:	a314      	add	r3, pc, #80	; (adr r3, bcd58 <scalbn+0x100>)
   bcd06:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd0a:	f000 f9f3 	bl	bd0f4 <__aeabi_dmul>
   bcd0e:	ec41 0b10 	vmov	d0, r0, r1
   bcd12:	e7f3      	b.n	bccfc <scalbn+0xa4>
   bcd14:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bcd18:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bcd1c:	3136      	adds	r1, #54	; 0x36
   bcd1e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bcd22:	4610      	mov	r0, r2
   bcd24:	4619      	mov	r1, r3
   bcd26:	2200      	movs	r2, #0
   bcd28:	4b13      	ldr	r3, [pc, #76]	; (bcd78 <scalbn+0x120>)
   bcd2a:	f000 f9e3 	bl	bd0f4 <__aeabi_dmul>
   bcd2e:	ec41 0b10 	vmov	d0, r0, r1
   bcd32:	bd38      	pop	{r3, r4, r5, pc}
   bcd34:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bcd38:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bcd3c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bcd40:	ec43 2b10 	vmov	d0, r2, r3
   bcd44:	bd38      	pop	{r3, r4, r5, pc}
   bcd46:	a108      	add	r1, pc, #32	; (adr r1, bcd68 <scalbn+0x110>)
   bcd48:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcd4c:	e7b6      	b.n	bccbc <scalbn+0x64>
   bcd4e:	bf00      	nop
   bcd50:	c2f8f359 	.word	0xc2f8f359
   bcd54:	01a56e1f 	.word	0x01a56e1f
   bcd58:	8800759c 	.word	0x8800759c
   bcd5c:	7e37e43c 	.word	0x7e37e43c
   bcd60:	8800759c 	.word	0x8800759c
   bcd64:	fe37e43c 	.word	0xfe37e43c
   bcd68:	c2f8f359 	.word	0xc2f8f359
   bcd6c:	81a56e1f 	.word	0x81a56e1f
   bcd70:	43500000 	.word	0x43500000
   bcd74:	ffff3cb0 	.word	0xffff3cb0
   bcd78:	3c900000 	.word	0x3c900000

000bcd7c <__aeabi_drsub>:
   bcd7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bcd80:	e002      	b.n	bcd88 <__adddf3>
   bcd82:	bf00      	nop

000bcd84 <__aeabi_dsub>:
   bcd84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bcd88 <__adddf3>:
   bcd88:	b530      	push	{r4, r5, lr}
   bcd8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bcd8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bcd92:	ea94 0f05 	teq	r4, r5
   bcd96:	bf08      	it	eq
   bcd98:	ea90 0f02 	teqeq	r0, r2
   bcd9c:	bf1f      	itttt	ne
   bcd9e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bcda2:	ea55 0c02 	orrsne.w	ip, r5, r2
   bcda6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bcdaa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcdae:	f000 80e2 	beq.w	bcf76 <__adddf3+0x1ee>
   bcdb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bcdb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bcdba:	bfb8      	it	lt
   bcdbc:	426d      	neglt	r5, r5
   bcdbe:	dd0c      	ble.n	bcdda <__adddf3+0x52>
   bcdc0:	442c      	add	r4, r5
   bcdc2:	ea80 0202 	eor.w	r2, r0, r2
   bcdc6:	ea81 0303 	eor.w	r3, r1, r3
   bcdca:	ea82 0000 	eor.w	r0, r2, r0
   bcdce:	ea83 0101 	eor.w	r1, r3, r1
   bcdd2:	ea80 0202 	eor.w	r2, r0, r2
   bcdd6:	ea81 0303 	eor.w	r3, r1, r3
   bcdda:	2d36      	cmp	r5, #54	; 0x36
   bcddc:	bf88      	it	hi
   bcdde:	bd30      	pophi	{r4, r5, pc}
   bcde0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bcde4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bcde8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bcdec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bcdf0:	d002      	beq.n	bcdf8 <__adddf3+0x70>
   bcdf2:	4240      	negs	r0, r0
   bcdf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcdf8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bcdfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bce00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bce04:	d002      	beq.n	bce0c <__adddf3+0x84>
   bce06:	4252      	negs	r2, r2
   bce08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bce0c:	ea94 0f05 	teq	r4, r5
   bce10:	f000 80a7 	beq.w	bcf62 <__adddf3+0x1da>
   bce14:	f1a4 0401 	sub.w	r4, r4, #1
   bce18:	f1d5 0e20 	rsbs	lr, r5, #32
   bce1c:	db0d      	blt.n	bce3a <__adddf3+0xb2>
   bce1e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bce22:	fa22 f205 	lsr.w	r2, r2, r5
   bce26:	1880      	adds	r0, r0, r2
   bce28:	f141 0100 	adc.w	r1, r1, #0
   bce2c:	fa03 f20e 	lsl.w	r2, r3, lr
   bce30:	1880      	adds	r0, r0, r2
   bce32:	fa43 f305 	asr.w	r3, r3, r5
   bce36:	4159      	adcs	r1, r3
   bce38:	e00e      	b.n	bce58 <__adddf3+0xd0>
   bce3a:	f1a5 0520 	sub.w	r5, r5, #32
   bce3e:	f10e 0e20 	add.w	lr, lr, #32
   bce42:	2a01      	cmp	r2, #1
   bce44:	fa03 fc0e 	lsl.w	ip, r3, lr
   bce48:	bf28      	it	cs
   bce4a:	f04c 0c02 	orrcs.w	ip, ip, #2
   bce4e:	fa43 f305 	asr.w	r3, r3, r5
   bce52:	18c0      	adds	r0, r0, r3
   bce54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bce58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bce5c:	d507      	bpl.n	bce6e <__adddf3+0xe6>
   bce5e:	f04f 0e00 	mov.w	lr, #0
   bce62:	f1dc 0c00 	rsbs	ip, ip, #0
   bce66:	eb7e 0000 	sbcs.w	r0, lr, r0
   bce6a:	eb6e 0101 	sbc.w	r1, lr, r1
   bce6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bce72:	d31b      	bcc.n	bceac <__adddf3+0x124>
   bce74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bce78:	d30c      	bcc.n	bce94 <__adddf3+0x10c>
   bce7a:	0849      	lsrs	r1, r1, #1
   bce7c:	ea5f 0030 	movs.w	r0, r0, rrx
   bce80:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bce84:	f104 0401 	add.w	r4, r4, #1
   bce88:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bce8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bce90:	f080 809a 	bcs.w	bcfc8 <__adddf3+0x240>
   bce94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bce98:	bf08      	it	eq
   bce9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bce9e:	f150 0000 	adcs.w	r0, r0, #0
   bcea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bcea6:	ea41 0105 	orr.w	r1, r1, r5
   bceaa:	bd30      	pop	{r4, r5, pc}
   bceac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bceb0:	4140      	adcs	r0, r0
   bceb2:	eb41 0101 	adc.w	r1, r1, r1
   bceb6:	3c01      	subs	r4, #1
   bceb8:	bf28      	it	cs
   bceba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bcebe:	d2e9      	bcs.n	bce94 <__adddf3+0x10c>
   bcec0:	f091 0f00 	teq	r1, #0
   bcec4:	bf04      	itt	eq
   bcec6:	4601      	moveq	r1, r0
   bcec8:	2000      	moveq	r0, #0
   bceca:	fab1 f381 	clz	r3, r1
   bcece:	bf08      	it	eq
   bced0:	3320      	addeq	r3, #32
   bced2:	f1a3 030b 	sub.w	r3, r3, #11
   bced6:	f1b3 0220 	subs.w	r2, r3, #32
   bceda:	da0c      	bge.n	bcef6 <__adddf3+0x16e>
   bcedc:	320c      	adds	r2, #12
   bcede:	dd08      	ble.n	bcef2 <__adddf3+0x16a>
   bcee0:	f102 0c14 	add.w	ip, r2, #20
   bcee4:	f1c2 020c 	rsb	r2, r2, #12
   bcee8:	fa01 f00c 	lsl.w	r0, r1, ip
   bceec:	fa21 f102 	lsr.w	r1, r1, r2
   bcef0:	e00c      	b.n	bcf0c <__adddf3+0x184>
   bcef2:	f102 0214 	add.w	r2, r2, #20
   bcef6:	bfd8      	it	le
   bcef8:	f1c2 0c20 	rsble	ip, r2, #32
   bcefc:	fa01 f102 	lsl.w	r1, r1, r2
   bcf00:	fa20 fc0c 	lsr.w	ip, r0, ip
   bcf04:	bfdc      	itt	le
   bcf06:	ea41 010c 	orrle.w	r1, r1, ip
   bcf0a:	4090      	lslle	r0, r2
   bcf0c:	1ae4      	subs	r4, r4, r3
   bcf0e:	bfa2      	ittt	ge
   bcf10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bcf14:	4329      	orrge	r1, r5
   bcf16:	bd30      	popge	{r4, r5, pc}
   bcf18:	ea6f 0404 	mvn.w	r4, r4
   bcf1c:	3c1f      	subs	r4, #31
   bcf1e:	da1c      	bge.n	bcf5a <__adddf3+0x1d2>
   bcf20:	340c      	adds	r4, #12
   bcf22:	dc0e      	bgt.n	bcf42 <__adddf3+0x1ba>
   bcf24:	f104 0414 	add.w	r4, r4, #20
   bcf28:	f1c4 0220 	rsb	r2, r4, #32
   bcf2c:	fa20 f004 	lsr.w	r0, r0, r4
   bcf30:	fa01 f302 	lsl.w	r3, r1, r2
   bcf34:	ea40 0003 	orr.w	r0, r0, r3
   bcf38:	fa21 f304 	lsr.w	r3, r1, r4
   bcf3c:	ea45 0103 	orr.w	r1, r5, r3
   bcf40:	bd30      	pop	{r4, r5, pc}
   bcf42:	f1c4 040c 	rsb	r4, r4, #12
   bcf46:	f1c4 0220 	rsb	r2, r4, #32
   bcf4a:	fa20 f002 	lsr.w	r0, r0, r2
   bcf4e:	fa01 f304 	lsl.w	r3, r1, r4
   bcf52:	ea40 0003 	orr.w	r0, r0, r3
   bcf56:	4629      	mov	r1, r5
   bcf58:	bd30      	pop	{r4, r5, pc}
   bcf5a:	fa21 f004 	lsr.w	r0, r1, r4
   bcf5e:	4629      	mov	r1, r5
   bcf60:	bd30      	pop	{r4, r5, pc}
   bcf62:	f094 0f00 	teq	r4, #0
   bcf66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bcf6a:	bf06      	itte	eq
   bcf6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bcf70:	3401      	addeq	r4, #1
   bcf72:	3d01      	subne	r5, #1
   bcf74:	e74e      	b.n	bce14 <__adddf3+0x8c>
   bcf76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bcf7a:	bf18      	it	ne
   bcf7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcf80:	d029      	beq.n	bcfd6 <__adddf3+0x24e>
   bcf82:	ea94 0f05 	teq	r4, r5
   bcf86:	bf08      	it	eq
   bcf88:	ea90 0f02 	teqeq	r0, r2
   bcf8c:	d005      	beq.n	bcf9a <__adddf3+0x212>
   bcf8e:	ea54 0c00 	orrs.w	ip, r4, r0
   bcf92:	bf04      	itt	eq
   bcf94:	4619      	moveq	r1, r3
   bcf96:	4610      	moveq	r0, r2
   bcf98:	bd30      	pop	{r4, r5, pc}
   bcf9a:	ea91 0f03 	teq	r1, r3
   bcf9e:	bf1e      	ittt	ne
   bcfa0:	2100      	movne	r1, #0
   bcfa2:	2000      	movne	r0, #0
   bcfa4:	bd30      	popne	{r4, r5, pc}
   bcfa6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bcfaa:	d105      	bne.n	bcfb8 <__adddf3+0x230>
   bcfac:	0040      	lsls	r0, r0, #1
   bcfae:	4149      	adcs	r1, r1
   bcfb0:	bf28      	it	cs
   bcfb2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bcfb6:	bd30      	pop	{r4, r5, pc}
   bcfb8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bcfbc:	bf3c      	itt	cc
   bcfbe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bcfc2:	bd30      	popcc	{r4, r5, pc}
   bcfc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcfc8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bcfcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bcfd0:	f04f 0000 	mov.w	r0, #0
   bcfd4:	bd30      	pop	{r4, r5, pc}
   bcfd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bcfda:	bf1a      	itte	ne
   bcfdc:	4619      	movne	r1, r3
   bcfde:	4610      	movne	r0, r2
   bcfe0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bcfe4:	bf1c      	itt	ne
   bcfe6:	460b      	movne	r3, r1
   bcfe8:	4602      	movne	r2, r0
   bcfea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bcfee:	bf06      	itte	eq
   bcff0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bcff4:	ea91 0f03 	teqeq	r1, r3
   bcff8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bcffc:	bd30      	pop	{r4, r5, pc}
   bcffe:	bf00      	nop

000bd000 <__aeabi_ui2d>:
   bd000:	f090 0f00 	teq	r0, #0
   bd004:	bf04      	itt	eq
   bd006:	2100      	moveq	r1, #0
   bd008:	4770      	bxeq	lr
   bd00a:	b530      	push	{r4, r5, lr}
   bd00c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd010:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd014:	f04f 0500 	mov.w	r5, #0
   bd018:	f04f 0100 	mov.w	r1, #0
   bd01c:	e750      	b.n	bcec0 <__adddf3+0x138>
   bd01e:	bf00      	nop

000bd020 <__aeabi_i2d>:
   bd020:	f090 0f00 	teq	r0, #0
   bd024:	bf04      	itt	eq
   bd026:	2100      	moveq	r1, #0
   bd028:	4770      	bxeq	lr
   bd02a:	b530      	push	{r4, r5, lr}
   bd02c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd030:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd034:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd038:	bf48      	it	mi
   bd03a:	4240      	negmi	r0, r0
   bd03c:	f04f 0100 	mov.w	r1, #0
   bd040:	e73e      	b.n	bcec0 <__adddf3+0x138>
   bd042:	bf00      	nop

000bd044 <__aeabi_f2d>:
   bd044:	0042      	lsls	r2, r0, #1
   bd046:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd04a:	ea4f 0131 	mov.w	r1, r1, rrx
   bd04e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd052:	bf1f      	itttt	ne
   bd054:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd058:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd05c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd060:	4770      	bxne	lr
   bd062:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd066:	bf08      	it	eq
   bd068:	4770      	bxeq	lr
   bd06a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd06e:	bf04      	itt	eq
   bd070:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd074:	4770      	bxeq	lr
   bd076:	b530      	push	{r4, r5, lr}
   bd078:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd07c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd084:	e71c      	b.n	bcec0 <__adddf3+0x138>
   bd086:	bf00      	nop

000bd088 <__aeabi_ul2d>:
   bd088:	ea50 0201 	orrs.w	r2, r0, r1
   bd08c:	bf08      	it	eq
   bd08e:	4770      	bxeq	lr
   bd090:	b530      	push	{r4, r5, lr}
   bd092:	f04f 0500 	mov.w	r5, #0
   bd096:	e00a      	b.n	bd0ae <__aeabi_l2d+0x16>

000bd098 <__aeabi_l2d>:
   bd098:	ea50 0201 	orrs.w	r2, r0, r1
   bd09c:	bf08      	it	eq
   bd09e:	4770      	bxeq	lr
   bd0a0:	b530      	push	{r4, r5, lr}
   bd0a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd0a6:	d502      	bpl.n	bd0ae <__aeabi_l2d+0x16>
   bd0a8:	4240      	negs	r0, r0
   bd0aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd0ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd0b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd0b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd0ba:	f43f aed8 	beq.w	bce6e <__adddf3+0xe6>
   bd0be:	f04f 0203 	mov.w	r2, #3
   bd0c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd0c6:	bf18      	it	ne
   bd0c8:	3203      	addne	r2, #3
   bd0ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd0ce:	bf18      	it	ne
   bd0d0:	3203      	addne	r2, #3
   bd0d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd0d6:	f1c2 0320 	rsb	r3, r2, #32
   bd0da:	fa00 fc03 	lsl.w	ip, r0, r3
   bd0de:	fa20 f002 	lsr.w	r0, r0, r2
   bd0e2:	fa01 fe03 	lsl.w	lr, r1, r3
   bd0e6:	ea40 000e 	orr.w	r0, r0, lr
   bd0ea:	fa21 f102 	lsr.w	r1, r1, r2
   bd0ee:	4414      	add	r4, r2
   bd0f0:	e6bd      	b.n	bce6e <__adddf3+0xe6>
   bd0f2:	bf00      	nop

000bd0f4 <__aeabi_dmul>:
   bd0f4:	b570      	push	{r4, r5, r6, lr}
   bd0f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd0fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd0fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd102:	bf1d      	ittte	ne
   bd104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd108:	ea94 0f0c 	teqne	r4, ip
   bd10c:	ea95 0f0c 	teqne	r5, ip
   bd110:	f000 f8de 	bleq	bd2d0 <__aeabi_dmul+0x1dc>
   bd114:	442c      	add	r4, r5
   bd116:	ea81 0603 	eor.w	r6, r1, r3
   bd11a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd11e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd122:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd126:	bf18      	it	ne
   bd128:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd12c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd134:	d038      	beq.n	bd1a8 <__aeabi_dmul+0xb4>
   bd136:	fba0 ce02 	umull	ip, lr, r0, r2
   bd13a:	f04f 0500 	mov.w	r5, #0
   bd13e:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd142:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd146:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd14a:	f04f 0600 	mov.w	r6, #0
   bd14e:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd152:	f09c 0f00 	teq	ip, #0
   bd156:	bf18      	it	ne
   bd158:	f04e 0e01 	orrne.w	lr, lr, #1
   bd15c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd160:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd164:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd168:	d204      	bcs.n	bd174 <__aeabi_dmul+0x80>
   bd16a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd16e:	416d      	adcs	r5, r5
   bd170:	eb46 0606 	adc.w	r6, r6, r6
   bd174:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd178:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd17c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd180:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd184:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd188:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd18c:	bf88      	it	hi
   bd18e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd192:	d81e      	bhi.n	bd1d2 <__aeabi_dmul+0xde>
   bd194:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd198:	bf08      	it	eq
   bd19a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd19e:	f150 0000 	adcs.w	r0, r0, #0
   bd1a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd1a6:	bd70      	pop	{r4, r5, r6, pc}
   bd1a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd1ac:	ea46 0101 	orr.w	r1, r6, r1
   bd1b0:	ea40 0002 	orr.w	r0, r0, r2
   bd1b4:	ea81 0103 	eor.w	r1, r1, r3
   bd1b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd1bc:	bfc2      	ittt	gt
   bd1be:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd1c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd1c6:	bd70      	popgt	{r4, r5, r6, pc}
   bd1c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd1cc:	f04f 0e00 	mov.w	lr, #0
   bd1d0:	3c01      	subs	r4, #1
   bd1d2:	f300 80ab 	bgt.w	bd32c <__aeabi_dmul+0x238>
   bd1d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bd1da:	bfde      	ittt	le
   bd1dc:	2000      	movle	r0, #0
   bd1de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bd1e2:	bd70      	pople	{r4, r5, r6, pc}
   bd1e4:	f1c4 0400 	rsb	r4, r4, #0
   bd1e8:	3c20      	subs	r4, #32
   bd1ea:	da35      	bge.n	bd258 <__aeabi_dmul+0x164>
   bd1ec:	340c      	adds	r4, #12
   bd1ee:	dc1b      	bgt.n	bd228 <__aeabi_dmul+0x134>
   bd1f0:	f104 0414 	add.w	r4, r4, #20
   bd1f4:	f1c4 0520 	rsb	r5, r4, #32
   bd1f8:	fa00 f305 	lsl.w	r3, r0, r5
   bd1fc:	fa20 f004 	lsr.w	r0, r0, r4
   bd200:	fa01 f205 	lsl.w	r2, r1, r5
   bd204:	ea40 0002 	orr.w	r0, r0, r2
   bd208:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bd20c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd210:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd214:	fa21 f604 	lsr.w	r6, r1, r4
   bd218:	eb42 0106 	adc.w	r1, r2, r6
   bd21c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd220:	bf08      	it	eq
   bd222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd226:	bd70      	pop	{r4, r5, r6, pc}
   bd228:	f1c4 040c 	rsb	r4, r4, #12
   bd22c:	f1c4 0520 	rsb	r5, r4, #32
   bd230:	fa00 f304 	lsl.w	r3, r0, r4
   bd234:	fa20 f005 	lsr.w	r0, r0, r5
   bd238:	fa01 f204 	lsl.w	r2, r1, r4
   bd23c:	ea40 0002 	orr.w	r0, r0, r2
   bd240:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd244:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd248:	f141 0100 	adc.w	r1, r1, #0
   bd24c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd250:	bf08      	it	eq
   bd252:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd256:	bd70      	pop	{r4, r5, r6, pc}
   bd258:	f1c4 0520 	rsb	r5, r4, #32
   bd25c:	fa00 f205 	lsl.w	r2, r0, r5
   bd260:	ea4e 0e02 	orr.w	lr, lr, r2
   bd264:	fa20 f304 	lsr.w	r3, r0, r4
   bd268:	fa01 f205 	lsl.w	r2, r1, r5
   bd26c:	ea43 0302 	orr.w	r3, r3, r2
   bd270:	fa21 f004 	lsr.w	r0, r1, r4
   bd274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd278:	fa21 f204 	lsr.w	r2, r1, r4
   bd27c:	ea20 0002 	bic.w	r0, r0, r2
   bd280:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd288:	bf08      	it	eq
   bd28a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd28e:	bd70      	pop	{r4, r5, r6, pc}
   bd290:	f094 0f00 	teq	r4, #0
   bd294:	d10f      	bne.n	bd2b6 <__aeabi_dmul+0x1c2>
   bd296:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd29a:	0040      	lsls	r0, r0, #1
   bd29c:	eb41 0101 	adc.w	r1, r1, r1
   bd2a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd2a4:	bf08      	it	eq
   bd2a6:	3c01      	subeq	r4, #1
   bd2a8:	d0f7      	beq.n	bd29a <__aeabi_dmul+0x1a6>
   bd2aa:	ea41 0106 	orr.w	r1, r1, r6
   bd2ae:	f095 0f00 	teq	r5, #0
   bd2b2:	bf18      	it	ne
   bd2b4:	4770      	bxne	lr
   bd2b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd2ba:	0052      	lsls	r2, r2, #1
   bd2bc:	eb43 0303 	adc.w	r3, r3, r3
   bd2c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd2c4:	bf08      	it	eq
   bd2c6:	3d01      	subeq	r5, #1
   bd2c8:	d0f7      	beq.n	bd2ba <__aeabi_dmul+0x1c6>
   bd2ca:	ea43 0306 	orr.w	r3, r3, r6
   bd2ce:	4770      	bx	lr
   bd2d0:	ea94 0f0c 	teq	r4, ip
   bd2d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd2d8:	bf18      	it	ne
   bd2da:	ea95 0f0c 	teqne	r5, ip
   bd2de:	d00c      	beq.n	bd2fa <__aeabi_dmul+0x206>
   bd2e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd2e4:	bf18      	it	ne
   bd2e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd2ea:	d1d1      	bne.n	bd290 <__aeabi_dmul+0x19c>
   bd2ec:	ea81 0103 	eor.w	r1, r1, r3
   bd2f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd2f4:	f04f 0000 	mov.w	r0, #0
   bd2f8:	bd70      	pop	{r4, r5, r6, pc}
   bd2fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd2fe:	bf06      	itte	eq
   bd300:	4610      	moveq	r0, r2
   bd302:	4619      	moveq	r1, r3
   bd304:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd308:	d019      	beq.n	bd33e <__aeabi_dmul+0x24a>
   bd30a:	ea94 0f0c 	teq	r4, ip
   bd30e:	d102      	bne.n	bd316 <__aeabi_dmul+0x222>
   bd310:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd314:	d113      	bne.n	bd33e <__aeabi_dmul+0x24a>
   bd316:	ea95 0f0c 	teq	r5, ip
   bd31a:	d105      	bne.n	bd328 <__aeabi_dmul+0x234>
   bd31c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd320:	bf1c      	itt	ne
   bd322:	4610      	movne	r0, r2
   bd324:	4619      	movne	r1, r3
   bd326:	d10a      	bne.n	bd33e <__aeabi_dmul+0x24a>
   bd328:	ea81 0103 	eor.w	r1, r1, r3
   bd32c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd330:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd334:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd338:	f04f 0000 	mov.w	r0, #0
   bd33c:	bd70      	pop	{r4, r5, r6, pc}
   bd33e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd342:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd346:	bd70      	pop	{r4, r5, r6, pc}

000bd348 <__aeabi_ddiv>:
   bd348:	b570      	push	{r4, r5, r6, lr}
   bd34a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd34e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd352:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd356:	bf1d      	ittte	ne
   bd358:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd35c:	ea94 0f0c 	teqne	r4, ip
   bd360:	ea95 0f0c 	teqne	r5, ip
   bd364:	f000 f8a7 	bleq	bd4b6 <__aeabi_ddiv+0x16e>
   bd368:	eba4 0405 	sub.w	r4, r4, r5
   bd36c:	ea81 0e03 	eor.w	lr, r1, r3
   bd370:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd374:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd378:	f000 8088 	beq.w	bd48c <__aeabi_ddiv+0x144>
   bd37c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd380:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd384:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd388:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd38c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd390:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd394:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd398:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd39c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd3a0:	429d      	cmp	r5, r3
   bd3a2:	bf08      	it	eq
   bd3a4:	4296      	cmpeq	r6, r2
   bd3a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd3aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd3ae:	d202      	bcs.n	bd3b6 <__aeabi_ddiv+0x6e>
   bd3b0:	085b      	lsrs	r3, r3, #1
   bd3b2:	ea4f 0232 	mov.w	r2, r2, rrx
   bd3b6:	1ab6      	subs	r6, r6, r2
   bd3b8:	eb65 0503 	sbc.w	r5, r5, r3
   bd3bc:	085b      	lsrs	r3, r3, #1
   bd3be:	ea4f 0232 	mov.w	r2, r2, rrx
   bd3c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd3c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd3ca:	ebb6 0e02 	subs.w	lr, r6, r2
   bd3ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd3d2:	bf22      	ittt	cs
   bd3d4:	1ab6      	subcs	r6, r6, r2
   bd3d6:	4675      	movcs	r5, lr
   bd3d8:	ea40 000c 	orrcs.w	r0, r0, ip
   bd3dc:	085b      	lsrs	r3, r3, #1
   bd3de:	ea4f 0232 	mov.w	r2, r2, rrx
   bd3e2:	ebb6 0e02 	subs.w	lr, r6, r2
   bd3e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd3ea:	bf22      	ittt	cs
   bd3ec:	1ab6      	subcs	r6, r6, r2
   bd3ee:	4675      	movcs	r5, lr
   bd3f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bd3f4:	085b      	lsrs	r3, r3, #1
   bd3f6:	ea4f 0232 	mov.w	r2, r2, rrx
   bd3fa:	ebb6 0e02 	subs.w	lr, r6, r2
   bd3fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd402:	bf22      	ittt	cs
   bd404:	1ab6      	subcs	r6, r6, r2
   bd406:	4675      	movcs	r5, lr
   bd408:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bd40c:	085b      	lsrs	r3, r3, #1
   bd40e:	ea4f 0232 	mov.w	r2, r2, rrx
   bd412:	ebb6 0e02 	subs.w	lr, r6, r2
   bd416:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd41a:	bf22      	ittt	cs
   bd41c:	1ab6      	subcs	r6, r6, r2
   bd41e:	4675      	movcs	r5, lr
   bd420:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bd424:	ea55 0e06 	orrs.w	lr, r5, r6
   bd428:	d018      	beq.n	bd45c <__aeabi_ddiv+0x114>
   bd42a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bd42e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bd432:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bd436:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bd43a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bd43e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bd442:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bd446:	d1c0      	bne.n	bd3ca <__aeabi_ddiv+0x82>
   bd448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd44c:	d10b      	bne.n	bd466 <__aeabi_ddiv+0x11e>
   bd44e:	ea41 0100 	orr.w	r1, r1, r0
   bd452:	f04f 0000 	mov.w	r0, #0
   bd456:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bd45a:	e7b6      	b.n	bd3ca <__aeabi_ddiv+0x82>
   bd45c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd460:	bf04      	itt	eq
   bd462:	4301      	orreq	r1, r0
   bd464:	2000      	moveq	r0, #0
   bd466:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd46a:	bf88      	it	hi
   bd46c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd470:	f63f aeaf 	bhi.w	bd1d2 <__aeabi_dmul+0xde>
   bd474:	ebb5 0c03 	subs.w	ip, r5, r3
   bd478:	bf04      	itt	eq
   bd47a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd47e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd482:	f150 0000 	adcs.w	r0, r0, #0
   bd486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd48a:	bd70      	pop	{r4, r5, r6, pc}
   bd48c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd490:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd494:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd498:	bfc2      	ittt	gt
   bd49a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd49e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd4a2:	bd70      	popgt	{r4, r5, r6, pc}
   bd4a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd4a8:	f04f 0e00 	mov.w	lr, #0
   bd4ac:	3c01      	subs	r4, #1
   bd4ae:	e690      	b.n	bd1d2 <__aeabi_dmul+0xde>
   bd4b0:	ea45 0e06 	orr.w	lr, r5, r6
   bd4b4:	e68d      	b.n	bd1d2 <__aeabi_dmul+0xde>
   bd4b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd4ba:	ea94 0f0c 	teq	r4, ip
   bd4be:	bf08      	it	eq
   bd4c0:	ea95 0f0c 	teqeq	r5, ip
   bd4c4:	f43f af3b 	beq.w	bd33e <__aeabi_dmul+0x24a>
   bd4c8:	ea94 0f0c 	teq	r4, ip
   bd4cc:	d10a      	bne.n	bd4e4 <__aeabi_ddiv+0x19c>
   bd4ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd4d2:	f47f af34 	bne.w	bd33e <__aeabi_dmul+0x24a>
   bd4d6:	ea95 0f0c 	teq	r5, ip
   bd4da:	f47f af25 	bne.w	bd328 <__aeabi_dmul+0x234>
   bd4de:	4610      	mov	r0, r2
   bd4e0:	4619      	mov	r1, r3
   bd4e2:	e72c      	b.n	bd33e <__aeabi_dmul+0x24a>
   bd4e4:	ea95 0f0c 	teq	r5, ip
   bd4e8:	d106      	bne.n	bd4f8 <__aeabi_ddiv+0x1b0>
   bd4ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd4ee:	f43f aefd 	beq.w	bd2ec <__aeabi_dmul+0x1f8>
   bd4f2:	4610      	mov	r0, r2
   bd4f4:	4619      	mov	r1, r3
   bd4f6:	e722      	b.n	bd33e <__aeabi_dmul+0x24a>
   bd4f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd4fc:	bf18      	it	ne
   bd4fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd502:	f47f aec5 	bne.w	bd290 <__aeabi_dmul+0x19c>
   bd506:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd50a:	f47f af0d 	bne.w	bd328 <__aeabi_dmul+0x234>
   bd50e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd512:	f47f aeeb 	bne.w	bd2ec <__aeabi_dmul+0x1f8>
   bd516:	e712      	b.n	bd33e <__aeabi_dmul+0x24a>

000bd518 <__gedf2>:
   bd518:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd51c:	e006      	b.n	bd52c <__cmpdf2+0x4>
   bd51e:	bf00      	nop

000bd520 <__ledf2>:
   bd520:	f04f 0c01 	mov.w	ip, #1
   bd524:	e002      	b.n	bd52c <__cmpdf2+0x4>
   bd526:	bf00      	nop

000bd528 <__cmpdf2>:
   bd528:	f04f 0c01 	mov.w	ip, #1
   bd52c:	f84d cd04 	str.w	ip, [sp, #-4]!
   bd530:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd53c:	bf18      	it	ne
   bd53e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bd542:	d01b      	beq.n	bd57c <__cmpdf2+0x54>
   bd544:	b001      	add	sp, #4
   bd546:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bd54a:	bf0c      	ite	eq
   bd54c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bd550:	ea91 0f03 	teqne	r1, r3
   bd554:	bf02      	ittt	eq
   bd556:	ea90 0f02 	teqeq	r0, r2
   bd55a:	2000      	moveq	r0, #0
   bd55c:	4770      	bxeq	lr
   bd55e:	f110 0f00 	cmn.w	r0, #0
   bd562:	ea91 0f03 	teq	r1, r3
   bd566:	bf58      	it	pl
   bd568:	4299      	cmppl	r1, r3
   bd56a:	bf08      	it	eq
   bd56c:	4290      	cmpeq	r0, r2
   bd56e:	bf2c      	ite	cs
   bd570:	17d8      	asrcs	r0, r3, #31
   bd572:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bd576:	f040 0001 	orr.w	r0, r0, #1
   bd57a:	4770      	bx	lr
   bd57c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd584:	d102      	bne.n	bd58c <__cmpdf2+0x64>
   bd586:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd58a:	d107      	bne.n	bd59c <__cmpdf2+0x74>
   bd58c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd594:	d1d6      	bne.n	bd544 <__cmpdf2+0x1c>
   bd596:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd59a:	d0d3      	beq.n	bd544 <__cmpdf2+0x1c>
   bd59c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bd5a0:	4770      	bx	lr
   bd5a2:	bf00      	nop

000bd5a4 <__aeabi_cdrcmple>:
   bd5a4:	4684      	mov	ip, r0
   bd5a6:	4610      	mov	r0, r2
   bd5a8:	4662      	mov	r2, ip
   bd5aa:	468c      	mov	ip, r1
   bd5ac:	4619      	mov	r1, r3
   bd5ae:	4663      	mov	r3, ip
   bd5b0:	e000      	b.n	bd5b4 <__aeabi_cdcmpeq>
   bd5b2:	bf00      	nop

000bd5b4 <__aeabi_cdcmpeq>:
   bd5b4:	b501      	push	{r0, lr}
   bd5b6:	f7ff ffb7 	bl	bd528 <__cmpdf2>
   bd5ba:	2800      	cmp	r0, #0
   bd5bc:	bf48      	it	mi
   bd5be:	f110 0f00 	cmnmi.w	r0, #0
   bd5c2:	bd01      	pop	{r0, pc}

000bd5c4 <__aeabi_dcmpeq>:
   bd5c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd5c8:	f7ff fff4 	bl	bd5b4 <__aeabi_cdcmpeq>
   bd5cc:	bf0c      	ite	eq
   bd5ce:	2001      	moveq	r0, #1
   bd5d0:	2000      	movne	r0, #0
   bd5d2:	f85d fb08 	ldr.w	pc, [sp], #8
   bd5d6:	bf00      	nop

000bd5d8 <__aeabi_dcmplt>:
   bd5d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd5dc:	f7ff ffea 	bl	bd5b4 <__aeabi_cdcmpeq>
   bd5e0:	bf34      	ite	cc
   bd5e2:	2001      	movcc	r0, #1
   bd5e4:	2000      	movcs	r0, #0
   bd5e6:	f85d fb08 	ldr.w	pc, [sp], #8
   bd5ea:	bf00      	nop

000bd5ec <__aeabi_dcmple>:
   bd5ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd5f0:	f7ff ffe0 	bl	bd5b4 <__aeabi_cdcmpeq>
   bd5f4:	bf94      	ite	ls
   bd5f6:	2001      	movls	r0, #1
   bd5f8:	2000      	movhi	r0, #0
   bd5fa:	f85d fb08 	ldr.w	pc, [sp], #8
   bd5fe:	bf00      	nop

000bd600 <__aeabi_dcmpge>:
   bd600:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd604:	f7ff ffce 	bl	bd5a4 <__aeabi_cdrcmple>
   bd608:	bf94      	ite	ls
   bd60a:	2001      	movls	r0, #1
   bd60c:	2000      	movhi	r0, #0
   bd60e:	f85d fb08 	ldr.w	pc, [sp], #8
   bd612:	bf00      	nop

000bd614 <__aeabi_dcmpgt>:
   bd614:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd618:	f7ff ffc4 	bl	bd5a4 <__aeabi_cdrcmple>
   bd61c:	bf34      	ite	cc
   bd61e:	2001      	movcc	r0, #1
   bd620:	2000      	movcs	r0, #0
   bd622:	f85d fb08 	ldr.w	pc, [sp], #8
   bd626:	bf00      	nop

000bd628 <__aeabi_dcmpun>:
   bd628:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd62c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd630:	d102      	bne.n	bd638 <__aeabi_dcmpun+0x10>
   bd632:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd636:	d10a      	bne.n	bd64e <__aeabi_dcmpun+0x26>
   bd638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd63c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd640:	d102      	bne.n	bd648 <__aeabi_dcmpun+0x20>
   bd642:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd646:	d102      	bne.n	bd64e <__aeabi_dcmpun+0x26>
   bd648:	f04f 0000 	mov.w	r0, #0
   bd64c:	4770      	bx	lr
   bd64e:	f04f 0001 	mov.w	r0, #1
   bd652:	4770      	bx	lr

000bd654 <__aeabi_d2iz>:
   bd654:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd65c:	d215      	bcs.n	bd68a <__aeabi_d2iz+0x36>
   bd65e:	d511      	bpl.n	bd684 <__aeabi_d2iz+0x30>
   bd660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd668:	d912      	bls.n	bd690 <__aeabi_d2iz+0x3c>
   bd66a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd66e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd67a:	fa23 f002 	lsr.w	r0, r3, r2
   bd67e:	bf18      	it	ne
   bd680:	4240      	negne	r0, r0
   bd682:	4770      	bx	lr
   bd684:	f04f 0000 	mov.w	r0, #0
   bd688:	4770      	bx	lr
   bd68a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd68e:	d105      	bne.n	bd69c <__aeabi_d2iz+0x48>
   bd690:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bd694:	bf08      	it	eq
   bd696:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bd69a:	4770      	bx	lr
   bd69c:	f04f 0000 	mov.w	r0, #0
   bd6a0:	4770      	bx	lr
   bd6a2:	bf00      	nop

000bd6a4 <__aeabi_d2uiz>:
   bd6a4:	004a      	lsls	r2, r1, #1
   bd6a6:	d211      	bcs.n	bd6cc <__aeabi_d2uiz+0x28>
   bd6a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd6ac:	d211      	bcs.n	bd6d2 <__aeabi_d2uiz+0x2e>
   bd6ae:	d50d      	bpl.n	bd6cc <__aeabi_d2uiz+0x28>
   bd6b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd6b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd6b8:	d40e      	bmi.n	bd6d8 <__aeabi_d2uiz+0x34>
   bd6ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd6be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd6c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd6c6:	fa23 f002 	lsr.w	r0, r3, r2
   bd6ca:	4770      	bx	lr
   bd6cc:	f04f 0000 	mov.w	r0, #0
   bd6d0:	4770      	bx	lr
   bd6d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd6d6:	d102      	bne.n	bd6de <__aeabi_d2uiz+0x3a>
   bd6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd6dc:	4770      	bx	lr
   bd6de:	f04f 0000 	mov.w	r0, #0
   bd6e2:	4770      	bx	lr

000bd6e4 <__aeabi_d2f>:
   bd6e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd6e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bd6ec:	bf24      	itt	cs
   bd6ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bd6f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bd6f6:	d90d      	bls.n	bd714 <__aeabi_d2f+0x30>
   bd6f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bd6fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bd700:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bd704:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bd708:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bd70c:	bf08      	it	eq
   bd70e:	f020 0001 	biceq.w	r0, r0, #1
   bd712:	4770      	bx	lr
   bd714:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bd718:	d121      	bne.n	bd75e <__aeabi_d2f+0x7a>
   bd71a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bd71e:	bfbc      	itt	lt
   bd720:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bd724:	4770      	bxlt	lr
   bd726:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd72a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bd72e:	f1c2 0218 	rsb	r2, r2, #24
   bd732:	f1c2 0c20 	rsb	ip, r2, #32
   bd736:	fa10 f30c 	lsls.w	r3, r0, ip
   bd73a:	fa20 f002 	lsr.w	r0, r0, r2
   bd73e:	bf18      	it	ne
   bd740:	f040 0001 	orrne.w	r0, r0, #1
   bd744:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd748:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bd74c:	fa03 fc0c 	lsl.w	ip, r3, ip
   bd750:	ea40 000c 	orr.w	r0, r0, ip
   bd754:	fa23 f302 	lsr.w	r3, r3, r2
   bd758:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bd75c:	e7cc      	b.n	bd6f8 <__aeabi_d2f+0x14>
   bd75e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bd762:	d107      	bne.n	bd774 <__aeabi_d2f+0x90>
   bd764:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bd768:	bf1e      	ittt	ne
   bd76a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bd76e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bd772:	4770      	bxne	lr
   bd774:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bd778:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bd77c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bd780:	4770      	bx	lr
   bd782:	bf00      	nop

000bd784 <asctime_r>:
   bd784:	b510      	push	{r4, lr}
   bd786:	460c      	mov	r4, r1
   bd788:	6941      	ldr	r1, [r0, #20]
   bd78a:	6903      	ldr	r3, [r0, #16]
   bd78c:	6982      	ldr	r2, [r0, #24]
   bd78e:	b086      	sub	sp, #24
   bd790:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bd794:	9104      	str	r1, [sp, #16]
   bd796:	6801      	ldr	r1, [r0, #0]
   bd798:	9103      	str	r1, [sp, #12]
   bd79a:	6841      	ldr	r1, [r0, #4]
   bd79c:	9102      	str	r1, [sp, #8]
   bd79e:	6881      	ldr	r1, [r0, #8]
   bd7a0:	9101      	str	r1, [sp, #4]
   bd7a2:	68c1      	ldr	r1, [r0, #12]
   bd7a4:	9100      	str	r1, [sp, #0]
   bd7a6:	4907      	ldr	r1, [pc, #28]	; (bd7c4 <asctime_r+0x40>)
   bd7a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bd7ac:	440b      	add	r3, r1
   bd7ae:	4906      	ldr	r1, [pc, #24]	; (bd7c8 <asctime_r+0x44>)
   bd7b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bd7b4:	440a      	add	r2, r1
   bd7b6:	4620      	mov	r0, r4
   bd7b8:	4904      	ldr	r1, [pc, #16]	; (bd7cc <asctime_r+0x48>)
   bd7ba:	f7fb fb93 	bl	b8ee4 <siprintf>
   bd7be:	4620      	mov	r0, r4
   bd7c0:	b006      	add	sp, #24
   bd7c2:	bd10      	pop	{r4, pc}
   bd7c4:	000bf01d 	.word	0x000bf01d
   bd7c8:	000bf008 	.word	0x000bf008
   bd7cc:	000befe8 	.word	0x000befe8

000bd7d0 <atexit>:
   bd7d0:	2300      	movs	r3, #0
   bd7d2:	4601      	mov	r1, r0
   bd7d4:	461a      	mov	r2, r3
   bd7d6:	4618      	mov	r0, r3
   bd7d8:	f000 b9ba 	b.w	bdb50 <__register_exitproc>

000bd7dc <gmtime>:
   bd7dc:	b538      	push	{r3, r4, r5, lr}
   bd7de:	4b0b      	ldr	r3, [pc, #44]	; (bd80c <gmtime+0x30>)
   bd7e0:	681d      	ldr	r5, [r3, #0]
   bd7e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bd7e4:	4604      	mov	r4, r0
   bd7e6:	b953      	cbnz	r3, bd7fe <gmtime+0x22>
   bd7e8:	2024      	movs	r0, #36	; 0x24
   bd7ea:	f7fb fb63 	bl	b8eb4 <malloc>
   bd7ee:	4602      	mov	r2, r0
   bd7f0:	63e8      	str	r0, [r5, #60]	; 0x3c
   bd7f2:	b920      	cbnz	r0, bd7fe <gmtime+0x22>
   bd7f4:	4b06      	ldr	r3, [pc, #24]	; (bd810 <gmtime+0x34>)
   bd7f6:	4807      	ldr	r0, [pc, #28]	; (bd814 <gmtime+0x38>)
   bd7f8:	2139      	movs	r1, #57	; 0x39
   bd7fa:	f7fb fb9b 	bl	b8f34 <__assert_func>
   bd7fe:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bd800:	4620      	mov	r0, r4
   bd802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd806:	f7fb bbb5 	b.w	b8f74 <gmtime_r>
   bd80a:	bf00      	nop
   bd80c:	2003ded0 	.word	0x2003ded0
   bd810:	000bf041 	.word	0x000bf041
   bd814:	000bf058 	.word	0x000bf058

000bd818 <isprint>:
   bd818:	4b02      	ldr	r3, [pc, #8]	; (bd824 <isprint+0xc>)
   bd81a:	4418      	add	r0, r3
   bd81c:	7840      	ldrb	r0, [r0, #1]
   bd81e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bd822:	4770      	bx	lr
   bd824:	000bf10a 	.word	0x000bf10a

000bd828 <memcpy>:
   bd828:	440a      	add	r2, r1
   bd82a:	4291      	cmp	r1, r2
   bd82c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bd830:	d100      	bne.n	bd834 <memcpy+0xc>
   bd832:	4770      	bx	lr
   bd834:	b510      	push	{r4, lr}
   bd836:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd83a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bd83e:	4291      	cmp	r1, r2
   bd840:	d1f9      	bne.n	bd836 <memcpy+0xe>
   bd842:	bd10      	pop	{r4, pc}

000bd844 <memmove>:
   bd844:	4288      	cmp	r0, r1
   bd846:	b510      	push	{r4, lr}
   bd848:	eb01 0402 	add.w	r4, r1, r2
   bd84c:	d902      	bls.n	bd854 <memmove+0x10>
   bd84e:	4284      	cmp	r4, r0
   bd850:	4623      	mov	r3, r4
   bd852:	d807      	bhi.n	bd864 <memmove+0x20>
   bd854:	1e43      	subs	r3, r0, #1
   bd856:	42a1      	cmp	r1, r4
   bd858:	d008      	beq.n	bd86c <memmove+0x28>
   bd85a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd85e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd862:	e7f8      	b.n	bd856 <memmove+0x12>
   bd864:	4402      	add	r2, r0
   bd866:	4601      	mov	r1, r0
   bd868:	428a      	cmp	r2, r1
   bd86a:	d100      	bne.n	bd86e <memmove+0x2a>
   bd86c:	bd10      	pop	{r4, pc}
   bd86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bd872:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bd876:	e7f7      	b.n	bd868 <memmove+0x24>

000bd878 <memset>:
   bd878:	4402      	add	r2, r0
   bd87a:	4603      	mov	r3, r0
   bd87c:	4293      	cmp	r3, r2
   bd87e:	d100      	bne.n	bd882 <memset+0xa>
   bd880:	4770      	bx	lr
   bd882:	f803 1b01 	strb.w	r1, [r3], #1
   bd886:	e7f9      	b.n	bd87c <memset+0x4>

000bd888 <srand>:
   bd888:	b538      	push	{r3, r4, r5, lr}
   bd88a:	4b10      	ldr	r3, [pc, #64]	; (bd8cc <srand+0x44>)
   bd88c:	681d      	ldr	r5, [r3, #0]
   bd88e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd890:	4604      	mov	r4, r0
   bd892:	b9b3      	cbnz	r3, bd8c2 <srand+0x3a>
   bd894:	2018      	movs	r0, #24
   bd896:	f7fb fb0d 	bl	b8eb4 <malloc>
   bd89a:	4602      	mov	r2, r0
   bd89c:	63a8      	str	r0, [r5, #56]	; 0x38
   bd89e:	b920      	cbnz	r0, bd8aa <srand+0x22>
   bd8a0:	4b0b      	ldr	r3, [pc, #44]	; (bd8d0 <srand+0x48>)
   bd8a2:	480c      	ldr	r0, [pc, #48]	; (bd8d4 <srand+0x4c>)
   bd8a4:	2142      	movs	r1, #66	; 0x42
   bd8a6:	f7fb fb45 	bl	b8f34 <__assert_func>
   bd8aa:	490b      	ldr	r1, [pc, #44]	; (bd8d8 <srand+0x50>)
   bd8ac:	4b0b      	ldr	r3, [pc, #44]	; (bd8dc <srand+0x54>)
   bd8ae:	e9c0 1300 	strd	r1, r3, [r0]
   bd8b2:	4b0b      	ldr	r3, [pc, #44]	; (bd8e0 <srand+0x58>)
   bd8b4:	6083      	str	r3, [r0, #8]
   bd8b6:	230b      	movs	r3, #11
   bd8b8:	8183      	strh	r3, [r0, #12]
   bd8ba:	2100      	movs	r1, #0
   bd8bc:	2001      	movs	r0, #1
   bd8be:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bd8c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd8c4:	2200      	movs	r2, #0
   bd8c6:	611c      	str	r4, [r3, #16]
   bd8c8:	615a      	str	r2, [r3, #20]
   bd8ca:	bd38      	pop	{r3, r4, r5, pc}
   bd8cc:	2003ded0 	.word	0x2003ded0
   bd8d0:	000bf041 	.word	0x000bf041
   bd8d4:	000bf0b1 	.word	0x000bf0b1
   bd8d8:	abcd330e 	.word	0xabcd330e
   bd8dc:	e66d1234 	.word	0xe66d1234
   bd8e0:	0005deec 	.word	0x0005deec

000bd8e4 <rand>:
   bd8e4:	4b16      	ldr	r3, [pc, #88]	; (bd940 <rand+0x5c>)
   bd8e6:	b510      	push	{r4, lr}
   bd8e8:	681c      	ldr	r4, [r3, #0]
   bd8ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bd8ec:	b9b3      	cbnz	r3, bd91c <rand+0x38>
   bd8ee:	2018      	movs	r0, #24
   bd8f0:	f7fb fae0 	bl	b8eb4 <malloc>
   bd8f4:	63a0      	str	r0, [r4, #56]	; 0x38
   bd8f6:	b928      	cbnz	r0, bd904 <rand+0x20>
   bd8f8:	4602      	mov	r2, r0
   bd8fa:	4b12      	ldr	r3, [pc, #72]	; (bd944 <rand+0x60>)
   bd8fc:	4812      	ldr	r0, [pc, #72]	; (bd948 <rand+0x64>)
   bd8fe:	214e      	movs	r1, #78	; 0x4e
   bd900:	f7fb fb18 	bl	b8f34 <__assert_func>
   bd904:	4a11      	ldr	r2, [pc, #68]	; (bd94c <rand+0x68>)
   bd906:	4b12      	ldr	r3, [pc, #72]	; (bd950 <rand+0x6c>)
   bd908:	e9c0 2300 	strd	r2, r3, [r0]
   bd90c:	4b11      	ldr	r3, [pc, #68]	; (bd954 <rand+0x70>)
   bd90e:	6083      	str	r3, [r0, #8]
   bd910:	230b      	movs	r3, #11
   bd912:	8183      	strh	r3, [r0, #12]
   bd914:	2201      	movs	r2, #1
   bd916:	2300      	movs	r3, #0
   bd918:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bd91c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bd91e:	4a0e      	ldr	r2, [pc, #56]	; (bd958 <rand+0x74>)
   bd920:	6920      	ldr	r0, [r4, #16]
   bd922:	6963      	ldr	r3, [r4, #20]
   bd924:	490d      	ldr	r1, [pc, #52]	; (bd95c <rand+0x78>)
   bd926:	4342      	muls	r2, r0
   bd928:	fb01 2203 	mla	r2, r1, r3, r2
   bd92c:	fba0 0101 	umull	r0, r1, r0, r1
   bd930:	1c43      	adds	r3, r0, #1
   bd932:	eb42 0001 	adc.w	r0, r2, r1
   bd936:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bd93a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bd93e:	bd10      	pop	{r4, pc}
   bd940:	2003ded0 	.word	0x2003ded0
   bd944:	000bf041 	.word	0x000bf041
   bd948:	000bf0b1 	.word	0x000bf0b1
   bd94c:	abcd330e 	.word	0xabcd330e
   bd950:	e66d1234 	.word	0xe66d1234
   bd954:	0005deec 	.word	0x0005deec
   bd958:	5851f42d 	.word	0x5851f42d
   bd95c:	4c957f2d 	.word	0x4c957f2d

000bd960 <strchr>:
   bd960:	b2c9      	uxtb	r1, r1
   bd962:	4603      	mov	r3, r0
   bd964:	f810 2b01 	ldrb.w	r2, [r0], #1
   bd968:	b11a      	cbz	r2, bd972 <strchr+0x12>
   bd96a:	428a      	cmp	r2, r1
   bd96c:	d1f9      	bne.n	bd962 <strchr+0x2>
   bd96e:	4618      	mov	r0, r3
   bd970:	4770      	bx	lr
   bd972:	2900      	cmp	r1, #0
   bd974:	bf18      	it	ne
   bd976:	2300      	movne	r3, #0
   bd978:	e7f9      	b.n	bd96e <strchr+0xe>

000bd97a <strchrnul>:
   bd97a:	b510      	push	{r4, lr}
   bd97c:	4604      	mov	r4, r0
   bd97e:	f7ff ffef 	bl	bd960 <strchr>
   bd982:	b918      	cbnz	r0, bd98c <strchrnul+0x12>
   bd984:	4620      	mov	r0, r4
   bd986:	f000 f814 	bl	bd9b2 <strlen>
   bd98a:	4420      	add	r0, r4
   bd98c:	bd10      	pop	{r4, pc}

000bd98e <strcmp>:
   bd98e:	f810 2b01 	ldrb.w	r2, [r0], #1
   bd992:	f811 3b01 	ldrb.w	r3, [r1], #1
   bd996:	2a01      	cmp	r2, #1
   bd998:	bf28      	it	cs
   bd99a:	429a      	cmpcs	r2, r3
   bd99c:	d0f7      	beq.n	bd98e <strcmp>
   bd99e:	1ad0      	subs	r0, r2, r3
   bd9a0:	4770      	bx	lr

000bd9a2 <strcpy>:
   bd9a2:	4603      	mov	r3, r0
   bd9a4:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd9a8:	f803 2b01 	strb.w	r2, [r3], #1
   bd9ac:	2a00      	cmp	r2, #0
   bd9ae:	d1f9      	bne.n	bd9a4 <strcpy+0x2>
   bd9b0:	4770      	bx	lr

000bd9b2 <strlen>:
   bd9b2:	4603      	mov	r3, r0
   bd9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd9b8:	2a00      	cmp	r2, #0
   bd9ba:	d1fb      	bne.n	bd9b4 <strlen+0x2>
   bd9bc:	1a18      	subs	r0, r3, r0
   bd9be:	3801      	subs	r0, #1
   bd9c0:	4770      	bx	lr

000bd9c2 <strncmp>:
   bd9c2:	b510      	push	{r4, lr}
   bd9c4:	b17a      	cbz	r2, bd9e6 <strncmp+0x24>
   bd9c6:	4603      	mov	r3, r0
   bd9c8:	3901      	subs	r1, #1
   bd9ca:	1884      	adds	r4, r0, r2
   bd9cc:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd9d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bd9d4:	4290      	cmp	r0, r2
   bd9d6:	d101      	bne.n	bd9dc <strncmp+0x1a>
   bd9d8:	42a3      	cmp	r3, r4
   bd9da:	d101      	bne.n	bd9e0 <strncmp+0x1e>
   bd9dc:	1a80      	subs	r0, r0, r2
   bd9de:	bd10      	pop	{r4, pc}
   bd9e0:	2800      	cmp	r0, #0
   bd9e2:	d1f3      	bne.n	bd9cc <strncmp+0xa>
   bd9e4:	e7fa      	b.n	bd9dc <strncmp+0x1a>
   bd9e6:	4610      	mov	r0, r2
   bd9e8:	e7f9      	b.n	bd9de <strncmp+0x1c>

000bd9ea <strncpy>:
   bd9ea:	b510      	push	{r4, lr}
   bd9ec:	3901      	subs	r1, #1
   bd9ee:	4603      	mov	r3, r0
   bd9f0:	b132      	cbz	r2, bda00 <strncpy+0x16>
   bd9f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd9f6:	f803 4b01 	strb.w	r4, [r3], #1
   bd9fa:	3a01      	subs	r2, #1
   bd9fc:	2c00      	cmp	r4, #0
   bd9fe:	d1f7      	bne.n	bd9f0 <strncpy+0x6>
   bda00:	441a      	add	r2, r3
   bda02:	2100      	movs	r1, #0
   bda04:	4293      	cmp	r3, r2
   bda06:	d100      	bne.n	bda0a <strncpy+0x20>
   bda08:	bd10      	pop	{r4, pc}
   bda0a:	f803 1b01 	strb.w	r1, [r3], #1
   bda0e:	e7f9      	b.n	bda04 <strncpy+0x1a>

000bda10 <strrchr>:
   bda10:	b538      	push	{r3, r4, r5, lr}
   bda12:	4603      	mov	r3, r0
   bda14:	460c      	mov	r4, r1
   bda16:	b969      	cbnz	r1, bda34 <strrchr+0x24>
   bda18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bda1c:	f7ff bfa0 	b.w	bd960 <strchr>
   bda20:	1c43      	adds	r3, r0, #1
   bda22:	4605      	mov	r5, r0
   bda24:	4621      	mov	r1, r4
   bda26:	4618      	mov	r0, r3
   bda28:	f7ff ff9a 	bl	bd960 <strchr>
   bda2c:	2800      	cmp	r0, #0
   bda2e:	d1f7      	bne.n	bda20 <strrchr+0x10>
   bda30:	4628      	mov	r0, r5
   bda32:	bd38      	pop	{r3, r4, r5, pc}
   bda34:	2500      	movs	r5, #0
   bda36:	e7f5      	b.n	bda24 <strrchr+0x14>

000bda38 <_strtol_l.constprop.0>:
   bda38:	2b01      	cmp	r3, #1
   bda3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bda3e:	d001      	beq.n	bda44 <_strtol_l.constprop.0+0xc>
   bda40:	2b24      	cmp	r3, #36	; 0x24
   bda42:	d906      	bls.n	bda52 <_strtol_l.constprop.0+0x1a>
   bda44:	f7fb fa6e 	bl	b8f24 <__errno>
   bda48:	2316      	movs	r3, #22
   bda4a:	6003      	str	r3, [r0, #0]
   bda4c:	2000      	movs	r0, #0
   bda4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bda52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bdb38 <_strtol_l.constprop.0+0x100>
   bda56:	460d      	mov	r5, r1
   bda58:	462e      	mov	r6, r5
   bda5a:	f815 4b01 	ldrb.w	r4, [r5], #1
   bda5e:	f814 700c 	ldrb.w	r7, [r4, ip]
   bda62:	f017 0708 	ands.w	r7, r7, #8
   bda66:	d1f7      	bne.n	bda58 <_strtol_l.constprop.0+0x20>
   bda68:	2c2d      	cmp	r4, #45	; 0x2d
   bda6a:	d132      	bne.n	bdad2 <_strtol_l.constprop.0+0x9a>
   bda6c:	782c      	ldrb	r4, [r5, #0]
   bda6e:	2701      	movs	r7, #1
   bda70:	1cb5      	adds	r5, r6, #2
   bda72:	2b00      	cmp	r3, #0
   bda74:	d05b      	beq.n	bdb2e <_strtol_l.constprop.0+0xf6>
   bda76:	2b10      	cmp	r3, #16
   bda78:	d109      	bne.n	bda8e <_strtol_l.constprop.0+0x56>
   bda7a:	2c30      	cmp	r4, #48	; 0x30
   bda7c:	d107      	bne.n	bda8e <_strtol_l.constprop.0+0x56>
   bda7e:	782c      	ldrb	r4, [r5, #0]
   bda80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bda84:	2c58      	cmp	r4, #88	; 0x58
   bda86:	d14d      	bne.n	bdb24 <_strtol_l.constprop.0+0xec>
   bda88:	786c      	ldrb	r4, [r5, #1]
   bda8a:	2310      	movs	r3, #16
   bda8c:	3502      	adds	r5, #2
   bda8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bda92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bda96:	f04f 0c00 	mov.w	ip, #0
   bda9a:	fbb8 f9f3 	udiv	r9, r8, r3
   bda9e:	4666      	mov	r6, ip
   bdaa0:	fb03 8a19 	mls	sl, r3, r9, r8
   bdaa4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bdaa8:	f1be 0f09 	cmp.w	lr, #9
   bdaac:	d816      	bhi.n	bdadc <_strtol_l.constprop.0+0xa4>
   bdaae:	4674      	mov	r4, lr
   bdab0:	42a3      	cmp	r3, r4
   bdab2:	dd24      	ble.n	bdafe <_strtol_l.constprop.0+0xc6>
   bdab4:	f1bc 0f00 	cmp.w	ip, #0
   bdab8:	db1e      	blt.n	bdaf8 <_strtol_l.constprop.0+0xc0>
   bdaba:	45b1      	cmp	r9, r6
   bdabc:	d31c      	bcc.n	bdaf8 <_strtol_l.constprop.0+0xc0>
   bdabe:	d101      	bne.n	bdac4 <_strtol_l.constprop.0+0x8c>
   bdac0:	45a2      	cmp	sl, r4
   bdac2:	db19      	blt.n	bdaf8 <_strtol_l.constprop.0+0xc0>
   bdac4:	fb06 4603 	mla	r6, r6, r3, r4
   bdac8:	f04f 0c01 	mov.w	ip, #1
   bdacc:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdad0:	e7e8      	b.n	bdaa4 <_strtol_l.constprop.0+0x6c>
   bdad2:	2c2b      	cmp	r4, #43	; 0x2b
   bdad4:	bf04      	itt	eq
   bdad6:	782c      	ldrbeq	r4, [r5, #0]
   bdad8:	1cb5      	addeq	r5, r6, #2
   bdada:	e7ca      	b.n	bda72 <_strtol_l.constprop.0+0x3a>
   bdadc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bdae0:	f1be 0f19 	cmp.w	lr, #25
   bdae4:	d801      	bhi.n	bdaea <_strtol_l.constprop.0+0xb2>
   bdae6:	3c37      	subs	r4, #55	; 0x37
   bdae8:	e7e2      	b.n	bdab0 <_strtol_l.constprop.0+0x78>
   bdaea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bdaee:	f1be 0f19 	cmp.w	lr, #25
   bdaf2:	d804      	bhi.n	bdafe <_strtol_l.constprop.0+0xc6>
   bdaf4:	3c57      	subs	r4, #87	; 0x57
   bdaf6:	e7db      	b.n	bdab0 <_strtol_l.constprop.0+0x78>
   bdaf8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdafc:	e7e6      	b.n	bdacc <_strtol_l.constprop.0+0x94>
   bdafe:	f1bc 0f00 	cmp.w	ip, #0
   bdb02:	da05      	bge.n	bdb10 <_strtol_l.constprop.0+0xd8>
   bdb04:	2322      	movs	r3, #34	; 0x22
   bdb06:	6003      	str	r3, [r0, #0]
   bdb08:	4646      	mov	r6, r8
   bdb0a:	b942      	cbnz	r2, bdb1e <_strtol_l.constprop.0+0xe6>
   bdb0c:	4630      	mov	r0, r6
   bdb0e:	e79e      	b.n	bda4e <_strtol_l.constprop.0+0x16>
   bdb10:	b107      	cbz	r7, bdb14 <_strtol_l.constprop.0+0xdc>
   bdb12:	4276      	negs	r6, r6
   bdb14:	2a00      	cmp	r2, #0
   bdb16:	d0f9      	beq.n	bdb0c <_strtol_l.constprop.0+0xd4>
   bdb18:	f1bc 0f00 	cmp.w	ip, #0
   bdb1c:	d000      	beq.n	bdb20 <_strtol_l.constprop.0+0xe8>
   bdb1e:	1e69      	subs	r1, r5, #1
   bdb20:	6011      	str	r1, [r2, #0]
   bdb22:	e7f3      	b.n	bdb0c <_strtol_l.constprop.0+0xd4>
   bdb24:	2430      	movs	r4, #48	; 0x30
   bdb26:	2b00      	cmp	r3, #0
   bdb28:	d1b1      	bne.n	bda8e <_strtol_l.constprop.0+0x56>
   bdb2a:	2308      	movs	r3, #8
   bdb2c:	e7af      	b.n	bda8e <_strtol_l.constprop.0+0x56>
   bdb2e:	2c30      	cmp	r4, #48	; 0x30
   bdb30:	d0a5      	beq.n	bda7e <_strtol_l.constprop.0+0x46>
   bdb32:	230a      	movs	r3, #10
   bdb34:	e7ab      	b.n	bda8e <_strtol_l.constprop.0+0x56>
   bdb36:	bf00      	nop
   bdb38:	000bf10b 	.word	0x000bf10b

000bdb3c <strtol>:
   bdb3c:	4613      	mov	r3, r2
   bdb3e:	460a      	mov	r2, r1
   bdb40:	4601      	mov	r1, r0
   bdb42:	4802      	ldr	r0, [pc, #8]	; (bdb4c <strtol+0x10>)
   bdb44:	6800      	ldr	r0, [r0, #0]
   bdb46:	f7ff bf77 	b.w	bda38 <_strtol_l.constprop.0>
   bdb4a:	bf00      	nop
   bdb4c:	2003ded0 	.word	0x2003ded0

000bdb50 <__register_exitproc>:
   bdb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdb54:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bdc10 <__register_exitproc+0xc0>
   bdb58:	4606      	mov	r6, r0
   bdb5a:	f8d8 0000 	ldr.w	r0, [r8]
   bdb5e:	461f      	mov	r7, r3
   bdb60:	460d      	mov	r5, r1
   bdb62:	4691      	mov	r9, r2
   bdb64:	f000 f856 	bl	bdc14 <__retarget_lock_acquire_recursive>
   bdb68:	4b25      	ldr	r3, [pc, #148]	; (bdc00 <__register_exitproc+0xb0>)
   bdb6a:	681c      	ldr	r4, [r3, #0]
   bdb6c:	b934      	cbnz	r4, bdb7c <__register_exitproc+0x2c>
   bdb6e:	4c25      	ldr	r4, [pc, #148]	; (bdc04 <__register_exitproc+0xb4>)
   bdb70:	601c      	str	r4, [r3, #0]
   bdb72:	4b25      	ldr	r3, [pc, #148]	; (bdc08 <__register_exitproc+0xb8>)
   bdb74:	b113      	cbz	r3, bdb7c <__register_exitproc+0x2c>
   bdb76:	681b      	ldr	r3, [r3, #0]
   bdb78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bdb7c:	6863      	ldr	r3, [r4, #4]
   bdb7e:	2b1f      	cmp	r3, #31
   bdb80:	dd07      	ble.n	bdb92 <__register_exitproc+0x42>
   bdb82:	f8d8 0000 	ldr.w	r0, [r8]
   bdb86:	f000 f847 	bl	bdc18 <__retarget_lock_release_recursive>
   bdb8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdb92:	b34e      	cbz	r6, bdbe8 <__register_exitproc+0x98>
   bdb94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bdb98:	b988      	cbnz	r0, bdbbe <__register_exitproc+0x6e>
   bdb9a:	4b1c      	ldr	r3, [pc, #112]	; (bdc0c <__register_exitproc+0xbc>)
   bdb9c:	b923      	cbnz	r3, bdba8 <__register_exitproc+0x58>
   bdb9e:	f8d8 0000 	ldr.w	r0, [r8]
   bdba2:	f000 f838 	bl	bdc16 <__retarget_lock_release>
   bdba6:	e7f0      	b.n	bdb8a <__register_exitproc+0x3a>
   bdba8:	f44f 7084 	mov.w	r0, #264	; 0x108
   bdbac:	f7fb f982 	bl	b8eb4 <malloc>
   bdbb0:	2800      	cmp	r0, #0
   bdbb2:	d0f4      	beq.n	bdb9e <__register_exitproc+0x4e>
   bdbb4:	2300      	movs	r3, #0
   bdbb6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bdbba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bdbbe:	6863      	ldr	r3, [r4, #4]
   bdbc0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bdbc4:	2201      	movs	r2, #1
   bdbc6:	409a      	lsls	r2, r3
   bdbc8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bdbcc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bdbd0:	4313      	orrs	r3, r2
   bdbd2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bdbd6:	2e02      	cmp	r6, #2
   bdbd8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bdbdc:	bf02      	ittt	eq
   bdbde:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bdbe2:	4313      	orreq	r3, r2
   bdbe4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bdbe8:	6863      	ldr	r3, [r4, #4]
   bdbea:	f8d8 0000 	ldr.w	r0, [r8]
   bdbee:	1c5a      	adds	r2, r3, #1
   bdbf0:	3302      	adds	r3, #2
   bdbf2:	6062      	str	r2, [r4, #4]
   bdbf4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bdbf8:	f000 f80e 	bl	bdc18 <__retarget_lock_release_recursive>
   bdbfc:	2000      	movs	r0, #0
   bdbfe:	e7c6      	b.n	bdb8e <__register_exitproc+0x3e>
   bdc00:	2003e7e8 	.word	0x2003e7e8
   bdc04:	2003e75c 	.word	0x2003e75c
   bdc08:	00000000 	.word	0x00000000
   bdc0c:	000b8eb5 	.word	0x000b8eb5
   bdc10:	2003df34 	.word	0x2003df34

000bdc14 <__retarget_lock_acquire_recursive>:
   bdc14:	4770      	bx	lr

000bdc16 <__retarget_lock_release>:
   bdc16:	4770      	bx	lr

000bdc18 <__retarget_lock_release_recursive>:
   bdc18:	4770      	bx	lr

000bdc1a <link_code_end>:
	...

000bdc1c <dynalib_user>:
   bdc1c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bdc2c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bdc3c:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   bdc4c:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   bdc5c:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   bdc6c:	7420 206f 7325 4e00 646f 2065 6425 7220      to %s.Node %d r
   bdc7c:	7465 7972 7320 6174 6574 2520 2064 6964     etry state %d di
   bdc8c:	6563 6f20 2066 6425 7220 7465 7972 6920     ce of %d retry i
   bdc9c:	206e 6c25 2075 6573 6f63 646e 0073 6e55     n %lu seconds.Un
   bdcac:	6f63 666e 6769 7275 6465 6e20 646f 2065     configured node 
   bdcbc:	202d 6f6e 6f20 6666 6573 2074 6e61 2064     - no offset and 
   bdccc:	6c25 2075 6573 6f63 646e 2073 6974 6c6c     %lu seconds till
   bdcdc:	6e20 7865 2074 6570 6972 646f 2500 0054      next period.%T.
   bdcec:	7453 7261 6974 676e 6120 6e20 7765 7020     Starting a new p
   bdcfc:	7265 6f69 2064 6c25 2075 6573 2063 6974     eriod %lu sec ti
   bdd0c:	6c6c 2520 0073 6e49 7420 7265 696d 616e     ll %s.In termina
   bdd1c:	206c 6870 7361 2065 6c25 2075 6573 6f63     l phase %lu seco
   bdd2c:	646e 2073 6974 6c6c 2520 0073 6e6f 6f00     nds till %s.on.o
   bdd3c:	6666 5000 7261 206b 7369 6f20 6570 206e     ff.Park is open 
   bdd4c:	7562 2074 6577 6820 7661 2065 6f6e 2074     but we have not 
   bdd5c:	6f63 6e6e 6365 6574 2064 6f66 2072 766f     connected for ov
   bdd6c:	7265 7420 6f77 7220 7065 726f 6974 676e     er two reporting
   bdd7c:	7020 7265 6f69 7364 2d20 6e20 6565 2064      periods - need 
   bdd8c:	6f74 7220 7365 7465 5300 656c 7065 6620     to reset.Sleep f
   bdd9c:	726f 2520 2069 6573 6f63 646e 2073 6e75     or %i seconds un
   bddac:	6974 206c 656e 7478 6520 6576 746e 6120     til next event a
   bddbc:	2074 7325 7720 7469 2068 6573 736e 726f     t %s with sensor
   bddcc:	2520 0073 6f57 656b 7720 7469 2068 7375      %s.Woke with us
   bdddc:	7265 6220 7475 6f74 206e 202d 6f4c 4152     er button - LoRA
   bddec:	5320 6174 6574 5700 6b6f 2065 6977 6874      State.Woke with
   bddfc:	7320 6e65 6f73 2072 6e69 6574 7272 7075      sensor interrup
   bde0c:	0074 6954 656d 6920 2073 7075 6120 2074     t.Time is up at 
   bde1c:	7325 7720 7469 2068 6c25 2069 7266 6565     %s with %li free
   bde2c:	6d20 6d65 726f 0079 6146 6c69 6465 6920      memory.Failed i
   bde3c:	206e 6164 6174 7320 6e65 2c64 7220 7465     n data send, ret
   bde4c:	7972 7453 7461 2065 203d 6425 4100 656c     ryState = %d.Ale
   bde5c:	7472 3120 2d20 4a20 696f 206e 6552 7571     rt 1 - Join Requ
   bde6c:	7365 2074 6552 7571 7269 6465 4100 656c     est Required.Ale
   bde7c:	7472 3220 202d 654e 2077 6144 2079 6c41     rt 2- New Day Al
   bde8c:	7265 0074 6c41 7265 2074 2033 202d 6552     ert.Alert 3 - Re
   bde9c:	6573 7474 6e69 2067 6564 6976 6563 4900     setting device.I
   bdeac:	696e 6974 6c61 7a69 2065 6f4c 4152 7220     nitialize LoRA r
   bdebc:	6461 6f69 4900 696e 6974 6c61 7a69 7461     adio.Initializat
   bdecc:	6f69 206e 7573 6363 7365 6673 6c75 4900     ion successful.I
   bdedc:	696e 6974 6c61 7a69 7461 6f69 206e 6f6e     nitialization no
   bdeec:	2074 7573 6363 7365 6673 6c75 2d20 7020     t successful - p
   bdefc:	776f 7265 6320 6379 656c 5500 646e 6665     ower cycle.Undef
   bdf0c:	6e69 6465 4520 7272 726f 5320 6174 6574     ined Error State
   bdf1c:	5200 7365 7465 6974 676e 6420 6575 7420     .Resetting due t
   bdf2c:	206f 6f6c 2077 656d 6f6d 7972 4c00 526f     o low memory.LoR
   bdf3c:	2041 6e49 7469 6169 696c 617a 6974 6e6f     A Initialization
   bdf4c:	6620 6961 756c 6572 6120 656c 7472 6320      failure alert c
   bdf5c:	646f 2065 6425 2d20 7020 776f 7265 6320     ode %d - power c
   bdf6c:	6379 656c 6920 206e 3033 4e00 646f 2065     ycle in 30.Node 
   bdf7c:	756e 626d 7265 6920 646e 6369 7461 6465     number indicated
   bdf8c:	7520 636e 6e6f 6966 7567 6572 2064 6f6e      unconfigured no
   bdf9c:	6564 6f20 2066 6425 7320 7465 6974 676e     de of %d setting
   bdfac:	6120 656c 7472 6320 646f 2065 6f74 2520      alert code to %
   bdfbc:	0064 7355 7265 6220 7475 6f74 206e 7270     d.User button pr
   bdfcc:	7365 6573 2c64 7720 6c69 206c 6f66 6372     essed, will forc
   bdfdc:	2065 6f63 6e6e 6365 6974 6e6f 7420 206f     e connection to 
   bdfec:	6150 7472 6369 656c 5300 6174 7472 7075     Particle.Startup
   bdffc:	6320 6d6f 6c70 7465 2065 6f66 2072 6874      complete for th
   be00c:	2065 6f4e 6564 7720 7469 2068 6c61 7265     e Node with aler
   be01c:	2074 6f63 6564 2520 0064 0000               t code %d...

000be028 <_ZTVN5spark10LogHandlerE>:
	...
   be038:	40a5 000b 40cd 000b                         .@...@..

000be040 <_ZTVN5spark16SerialLogHandlerE>:
	...
   be048:	4189 000b 41bd 000b a5fd 000b 40cf 000b     .A...A.......@..
   be058:	6e69 7469 6620 6961 656c 0064 6e69 4c20     init failed.in L
   be068:	526f 2041 6573 7574 2070 202d 6f6e 6564     oRA setup - node
   be078:	6e20 6d75 6562 2072 6425 4c00 526f 2041      number %d.LoRA 
   be088:	6152 6964 206f 6e69 7469 6169 696c 657a     Radio initialize
   be098:	2064 7361 6120 6720 7461 7765 7961 7720     d as a gateway w
   be0a8:	7469 2068 2061 6564 6976 6563 4449 6f20     ith a deviceID o
   be0b8:	2066 7325 4c00 526f 2041 6152 6964 206f     f %s.LoRA Radio 
   be0c8:	6e69 7469 6169 696c 657a 2064 7361 6e20     initialized as n
   be0d8:	646f 2065 6925 6120 646e 6120 6420 7665     ode %i and a dev
   be0e8:	6369 4965 2044 666f 2520 0073 6f4c 4152     iceID of %s.LoRA
   be0f8:	5220 6461 6f69 6920 696e 6974 6c61 7a69      Radio initializ
   be108:	6465 6120 2073 6e61 7520 636e 6e6f 6966     ed as an unconfi
   be118:	7567 6572 2064 6f6e 6564 2520 2069 6e61     gured node %i an
   be128:	2064 2061 6564 6976 6563 4449 6f20 2066     d a deviceID of 
   be138:	7325 5300 6e65 6964 676e 6420 7461 2061     %s.Sending data 
   be148:	6572 6f70 7472 6e20 6d75 6562 2072 6425     report number %d
   be158:	4400 7461 2061 6572 6f70 7472 6420 6c65     .Data report del
   be168:	7669 7265 6465 2d20 7320 6375 6563 7373     ivered - success
   be178:	7220 7461 2065 3425 322e 0066 6f4e 6564      rate %4.2f.Node
   be188:	2520 2064 202d 6144 6174 7220 7065 726f      %d - Data repor
   be198:	2074 6573 646e 7420 206f 6167 6574 6177     t send to gatewa
   be1a8:	2079 6425 6620 6961 656c 2064 202d 6f4e     y %d failed - No
   be1b8:	5220 756f 6574 2d20 7320 6375 6563 7373      Route - success
   be1c8:	7220 7461 2065 3425 322e 0066 6f4e 6564      rate %4.2f.Node
   be1d8:	2520 2064 202d 6144 6174 7220 7065 726f      %d - Data repor
   be1e8:	2074 6573 646e 7420 206f 6167 6574 6177     t send to gatewa
   be1f8:	2079 6425 6620 6961 656c 2064 202d 6e55     y %d failed - Un
   be208:	6261 656c 7420 206f 6544 696c 6576 2072     able to Deliver 
   be218:	202d 7573 6363 7365 2073 6172 6574 2520     - success rate %
   be228:	2e34 6632 4e00 646f 2065 6425 2d20 4420     4.2f.Node %d - D
   be238:	7461 2061 6572 6f70 7472 7320 6e65 2064     ata report send 
   be248:	6f74 6720 7461 7765 7961 2520 2064 6166     to gateway %d fa
   be258:	6c69 6465 2020 202d 6e55 6e6b 776f 206e     iled  - Unknown 
   be268:	202d 7573 6363 7365 2073 6172 6574 2520     - success rate %
   be278:	2e34 6632 7700 7469 0068 6977 6874 756f     4.2f.with.withou
   be288:	0074 706f 6e65 6300 6f6c 6573 0064 6854     t.open.closed.Th
   be298:	2065 6167 6574 6177 2079 6573 2074 6e61     e gateway set an
   be2a8:	6120 656c 7472 2520 0064 6150 6b72 6920      alert %d.Park i
   be2b8:	2073 6c63 736f 6465 2d20 7220 7365 7465     s closed - reset
   be2c8:	6520 6576 7972 6874 6e69 0067 6144 6174      everything.Data
   be2d8:	7220 7065 726f 2074 6361 6e6b 776f 656c      report acknowle
   be2e8:	6764 6465 2520 2073 6c61 7265 2074 6f66     dged %s alert fo
   be2f8:	2072 656d 7373 6761 2065 6425 7020 7261     r message %d par
   be308:	206b 7369 2520 2073 6e61 2064 6c61 7265     k is %s and aler
   be318:	2074 6f63 6564 6920 2073 6425 6100 4e20     t code is %d.a N
   be328:	646f 4e65 6d75 6562 2072 7369 6e20 6565     odeNumber is nee
   be338:	6564 0064 6874 2065 6c63 636f 206b 7369     ded.the clock is
   be348:	6e20 746f 7320 7465 5300 6e65 6964 676e      not set.Sending
   be358:	6a20 696f 206e 6572 7571 7365 2074 6562      join request be
   be368:	6163 7375 2065 7325 4a00 696f 206e 6572     cause %s.Join re
   be378:	7571 7365 2074 6573 746e 7420 206f 6167     quest sent to ga
   be388:	6574 6177 2079 7573 6363 7365 6673 6c75     teway successful
   be398:	796c 4a00 696f 206e 6572 7571 7365 2074     ly.Join request 
   be3a8:	6f74 4720 7461 7765 7961 6620 6961 656c     to Gateway faile
   be3b8:	0064 6f4e 6564 2520 2064 6f4a 6e69 7220     d.Node %d Join r
   be3c8:	7165 6575 7473 6120 6b63 6f6e 6c77 6465     equest acknowled
   be3d8:	6567 2064 6e61 2064 6573 736e 726f 7320     ged and sensor s
   be3e8:	7465 7420 206f 6425 5300 6375 6563 7373     et to %d.Success
   be3f8:	7320 6e65 6964 676e 4120 656c 7472 5220      sending Alert R
   be408:	7065 726f 2074 756e 626d 7265 2520 2064     eport number %d 
   be418:	6f74 6720 7461 7765 7961 6120 2074 6425     to gateway at %d
   be428:	4e00 646f 2065 202d 6c41 7265 2074 6552     .Node - Alert Re
   be438:	6f70 7472 7320 6e65 2064 6f74 4720 7461     port send to Gat
   be448:	7765 7961 6620 6961 656c 0064 6c41 7265     eway failed.Aler
   be458:	2074 6572 6f70 7472 6120 6b63 6f6e 6c77     t report acknowl
   be468:	6465 6567 2064 6977 6874 6120 656c 7472     edged with alert
   be478:	6320 646f 2065 6425 4d00 6761 6369 4e20      code %d.Magic N
   be488:	6d75 6562 2072 696d 6d73 7461 6863 2d20     umber mismatch -
   be498:	6920 6e67 726f 6e69 2067 656d 7373 6761      ignoring messag
   be4a8:	0065 6552 6563 7669 6465 6620 6f72 206d     e.Received from 
   be4b8:	6f6e 6564 2520 2064 6977 6874 7220 7373     node %d with rss
   be4c8:	3d69 6425 2d20 6120 2520 2073 656d 7373     i=%d - a %s mess
   be4d8:	6761 0065 6553 2074 6c63 636f 206b 6f74     age.Set clock to
   be4e8:	2520 2073 6e61 2064 6572 6f70 7472 6620      %s and report f
   be4f8:	6572 7571 6e65 7963 7420 206f 6425 6d20     requency to %d m
   be508:	6e69 7475 7365 0000                         inutes..

000be510 <_ZTVN8particle9LEDStatusE>:
	...
   be518:	4f81 000b 4f9d 000b 4f6d 000b               .O...O..mO..

000be524 <_ZTV14LoRA_Functions>:
	...
   be52c:	4f6f 000b 4f71 000b 6f4c 6461 6e69 2067     oO..qO..Loading 
   be53c:	7973 7473 6d65 6420 6665 7561 746c 0073     system defaults.
   be54c:	7266 7165 3d20 2520 2c64 7420 7079 2065     freq = %d, type 
   be55c:	203d 6425 202c 6f6e 6564 3d20 2520 2c64     = %d, node = %d,
   be56c:	6320 7275 6572 746e 2520 2e34 6632 0000      current %4.2f..

000be57c <_ZTV8MB85RC64>:
	...
   be584:	5949 000b 595d 000b 6fbd 000b 7053 000b     IY..]Y...o..Sp..
   be594:	70d5 000b                                   .p..

000be598 <_ZTV13sysStatusData>:
	...
   be5a0:	5a65 000b 59d5 000b 59b3 000b 8619 000b     eZ...Y...Y......
   be5b0:	8641 000b 8735 000b 87cd 000b 5971 000b     A...5.......qY..
   be5c0:	5989 000b                                   .Y..

000be5c4 <_ZTV17currentStatusData>:
	...
   be5cc:	5b4d 000b 59d5 000b 59b3 000b 8619 000b     M[...Y...Y......
   be5dc:	8641 000b 8735 000b 87cd 000b 591d 000b     A...5........Y..
   be5ec:	5935 000b 6e49 7469 6c61 7a69 6e69 2067     5Y..Initalizing 
   be5fc:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   be60c:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   be61c:	6f43 666e 6769 0000                         Config..

000be624 <BLUE_LED>:
   be624:	0007                                        ..

000be626 <BUTTON_PIN>:
   be626:	0004                                        ..

000be628 <INT_PIN>:
   be628:	0012                                        ..

000be62a <MODULE_POWER_PIN>:
   be62a:	0011                                        ..

000be62c <RFM95_CS>:
   be62c:	0005                                        ..

000be62e <RFM95_INT>:
   be62e:	0002                                        ..

000be630 <RFM95_RST>:
   be630:	0006                                        ..

000be632 <TMP36_SENSE_PIN>:
   be632:	000f 6e55 6e6b 776f 006e 6f4e 656e 5700     ..Unknown.None.W
   be642:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
   be652:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
   be662:	4c00 4554 435f 5441 4d5f 0031 544c 5f45     .LTE_CAT_M1.LTE_
   be672:	4143 5f54 424e 0031 6f4e 2074 6843 7261     CAT_NB1.Not Char
   be682:	6967 676e 4300 6168 6772 6465 4400 7369     ging.Charged.Dis
   be692:	6863 7261 6967 676e 4600 7561 746c 4400     charging.Fault.D
   be6a2:	6369 6e6f 656e 7463 6465 4100 7373 7265     iconnected.Asser
   be6b2:	6974 6e6f 6146 6c69 7275 2065 702a 705f     tionFailure *p_p
   be6c2:	6e69 3c20 2820 3233 2b20 3120 2936 2500     in < (32 + 16).%
   be6d2:	2073 3a53 3225 302e 2566 2c25 5120 253a     s S:%2.0f%%, Q:%
   be6e2:	2e32 6630 2525 0020 6f43 6e75 2c74 6820     2.0f%% .Count, h
   be6f2:	756f 6c72 3a79 2520 2e69 6420 6961 796c     ourly: %i. daily
   be702:	203a 6925 4100 7373 7265 6974 6e6f 6146     : %i.AssertionFa
   be712:	6c69 7275 2065 7273 2063 2626 7320 6372     ilure src && src
   be722:	3e2d 6163 6c6c 6162 6b63 0000 0000 e634     ->callback....4.
   be732:	000b e63c 000b e641 000b e646 000b e64a     ..<...A...F...J.
   be742:	000b e64f 000b e654 000b e658 000b e663     ..O...T...X...c.
   be752:	000b e66e 000b 6166 6c69 6465 7420 206f     ..n...failed to 
   be762:	6572 6461 7220 6765 6441 7264 253d 3230     read regAddr=%02
   be772:	2078 6f63 6e75 3d74 7525 6600 6961 656c     x count=%u.faile
   be782:	2064 6f74 7220 6165 2064 6572 4167 6464     d to read regAdd
   be792:	3d72 3025 7832 7320 6174 3d74 6425 4600     r=%02x stat=%d.F
   be7a2:	554f 2054 6964 2064 6f6e 2074 6f67 4820     OUT did not go H
   be7b2:	4749 0048 6f6e 2074 6564 6574 7463 6465     IGH.not detected
   be7c2:	6600 6961 656c 2064 6f74 7720 6972 6574     .failed to write
   be7d2:	7220 6765 6441 7264 253d 3230 2078 7473      regAddr=%02x st
   be7e2:	7461 253d 0064 6573 5774 5444 2520 0064     at=%d.setWDT %d.
   be7f2:	6177 6374 6468 676f 6320 656c 7261 6465     watchdog cleared
   be802:	6220 6552 7573 746c 253d 0064 6177 6374      bResult=%d.watc
   be812:	6468 676f 7320 7465 6620 756f 5372 6365     hdog set fourSec
   be822:	3d73 6425 6220 6552 7573 746c 253d 0064     s=%d bResult=%d.
   be832:	4157 4354 4448 474f 4400 4545 5f50 4f50     WATCHDOG.DEEP_PO
   be842:	4557 5f52 4f44 4e57 4300 554f 544e 4f44     WER_DOWN.COUNTDO
   be852:	4e57 545f 4d49 5245 4100 414c 4d52 6600     WN_TIMER.ALARM.f
   be862:	6961 756c 6572 6920 206e 7075 6164 6574     ailure in update
   be872:	6157 656b 6552 7361 6e6f 2520 0064 6177     WakeReason %d.wa
   be882:	656b 7220 6165 6f73 206e 203d 7325 6600     ke reason = %s.f
   be892:	6961 756c 6572 6920 206e 6573 4374 756f     ailure in setCou
   be8a2:	746e 6f64 6e77 6954 656d 2072 6425 6600     ntdownTimer %d.f
   be8b2:	6961 756c 6572 6920 206e 6564 7065 6f50     ailure in deepPo
   be8c2:	6577 4472 776f 206e 6425 5200 4745 535f     werDown %d.REG_S
   be8d2:	454c 5045 435f 5254 3d4c 7830 3225 0078     LEEP_CTRL=0x%2x.
   be8e2:	6964 6e64 7427 7020 776f 7265 6420 776f     didn't power dow
   be8f2:	006e 3025 6434 252d 3230 2d64 3025 6432     n.%04d-%02d-%02d
   be902:	2520 3230 3a64 3025 6432 253a 3230 0064      %02d:%02d:%02d.
   be912:	6567 5274 6374 7341 6d54 2520 0073 6573     getRtcAsTm %s.se
   be922:	5274 6374 7341 6d54 2520 0073 6166 6c69     tRtcAsTm %s.fail
   be932:	7275 2065 6e69 7320 7465 7452 4663 6f72     ure in setRtcFro
   be942:	546d 206d 6425 7300 7465 5220 4354 6620     mTm %d.set RTC f
   be952:	6f72 206d 6c63 756f 2064 7325 7300 7465     rom cloud %s.set
   be962:	7320 7379 6574 206d 6c63 636f 206b 7266      system clock fr
   be972:	6d6f 5220 4354 2520 0073 6166 6c69 6465     om RTC %s.failed
   be982:	7420 206f 6564 6574 7463 4120 3142 3038      to detect AB180
   be992:	0035 7061 2e70 6261 3831 3530 0000          5.app.ab1805..

000be9a0 <_ZTV6AB1805>:
	...
   be9a8:	6455 000b 6457 000b 6acd 000b 6b53 000b     Ud..Wd...j..Sk..

000be9b8 <_ZTV6MB85RC>:
	...
   be9c0:	6f7d 000b 6f7f 000b 6fbd 000b 7053 000b     }o...o...o..Sp..
   be9d0:	70d5 000b                                   .p..

000be9d4 <_ZTV15RHGenericDriver>:
	...
   be9e4:	7291 000b 40a5 000b 40a5 000b 40a5 000b     .r...@...@...@..
   be9f4:	40a5 000b 72f3 000b 7295 000b 7343 000b     .@...r...r..Cs..
   bea04:	7311 000b 7367 000b 729f 000b 72a7 000b     .s..gs...r...r..
   bea14:	72ab 000b 72af 000b 72b3 000b 72b7 000b     .r...r...r...r..
   bea24:	72a3 000b 72c3 000b 72c7 000b 72cb 000b     .r...r...r...r..
   bea34:	72cf 000b 72d3 000b 72d9 000b 72dd 000b     .r...r...r...r..
   bea44:	729f 000b 72e1 000b 72e7 000b 72ed 000b     .r...r...r...r..

000bea54 <_ZTV12RHGenericSPI>:
	...
   bea5c:	40a5 000b 73c5 000b 73c7 000b 40a5 000b     .@...s...s...@..
   bea6c:	40a5 000b 73cf 000b 73d3 000b 73d7 000b     .@...s...s...s..
   bea7c:	73c9 000b 73cb 000b 73cd 000b 6564 6166     .s...s...s..defa
   bea8c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bea9c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   beaac:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   beabc:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000beacc <_ZTVN8particle11SPISettingsE>:
	...
   bead4:	741d 000b 73f1 000b 73f3 000b               .t...s...s..

000beae0 <_ZTV13RHHardwareSPI>:
	...
   beae8:	74d1 000b 74e5 000b 74f3 000b 7501 000b     .t...t...t...u..
   beaf8:	756d 000b 73cf 000b 73d3 000b 73d7 000b     mu...s...s...s..
   beb08:	757b 000b 758f 000b 759d 000b               {u...u...u..

000beb14 <_ZTV6RHMesh>:
	...
   beb1c:	7669 000b 7911 000b 75c9 000b 75b5 000b     iv...y...u...u..

000beb2c <_ZTV8RHRouter>:
	...
   beb34:	7b7d 000b 7bc1 000b                         }{...{..

000beb3c <_ZTV11RHSPIDriver>:
	...
   beb4c:	7e5d 000b 40a5 000b 40a5 000b 40a5 000b     ]~...@...@...@..
   beb5c:	40a5 000b 72f3 000b 7295 000b 7343 000b     .@...r...r..Cs..
   beb6c:	7311 000b 7367 000b 729f 000b 72a7 000b     .s..gs...r...r..
   beb7c:	72ab 000b 72af 000b 72b3 000b 72b7 000b     .r...r...r...r..
   beb8c:	72a3 000b 72c3 000b 72c7 000b 72cb 000b     .r...r...r...r..
   beb9c:	72cf 000b 72d3 000b 72d9 000b 72dd 000b     .r...r...r...r..
   bebac:	729f 000b 72e1 000b 72e7 000b 72ed 000b     .r...r...r...r..
   bebbc:	7e89 000b 7e93 000b                         .~...~..

000bebc4 <_ZL18MODEM_CONFIG_TABLE>:
   bebc4:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bebd4 <_ZTV7RH_RF95>:
	...
   bebdc:	7ffb 000b 8033 000b 8509 000b 839f 000b     ....3...........
   bebec:	8069 000b 83e7 000b 7ff7 000b 72f3 000b     i............r..
   bebfc:	7295 000b 7343 000b 7311 000b 7367 000b     .r..Cs...s..gs..
   bec0c:	7ffd 000b 72a7 000b 72ab 000b 72af 000b     .....r...r...r..
   bec1c:	72b3 000b 72b7 000b 72a3 000b 72c3 000b     .r...r...r...r..
   bec2c:	72c7 000b 72cb 000b 72cf 000b 72d3 000b     .r...r...r...r..
   bec3c:	72d9 000b 72dd 000b 8043 000b 72e1 000b     .r...r..C....r..
   bec4c:	72e7 000b 72ed 000b 7e89 000b 7e93 000b     .r...r...~...~..
   bec5c:	7ff3 000b 6f67 3a74 6d20 6761 6369 253d     ....got: magic=%
   bec6c:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   bec7c:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   bec8c:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   bec9c:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   becac:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   becbc:	253d 3830 0078 0000                         =%08x...

000becc4 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   beccc:	8613 000b 865f 000b 8611 000b 8619 000b     ...._...........
   becdc:	8641 000b 8735 000b 87cd 000b               A...5.......

000bece8 <_ZTVN5spark13CellularClassE>:
	...
   becf0:	907f 000b 9075 000b 906b 000b 9021 000b     ....u...k...!...
   bed00:	905f 000b 9053 000b a955 000b a95d 000b     _...S...U...]...
   bed10:	9047 000b 903f 000b 9035 000b 902b 000b     G...?...5...+...
   bed20:	a98d 000b                                   ....

000bed24 <_ZTV14CellularSignal>:
	...
   bed2c:	910d 000b 9171 000b 910f 000b 9181 000b     ....q...........
   bed3c:	91b5 000b 91e1 000b 9215 000b 9135 000b     ............5...
   bed4c:	9113 000b 912f 000b fffc ffff 0000 0000     ..../...........
   bed5c:	9169 000b                                   i...

000bed60 <_ZTVN5spark13EthernetClassE>:
	...
   bed68:	92b7 000b 92ad 000b 92a3 000b 9299 000b     ................
   bed78:	928d 000b 9281 000b a955 000b a95d 000b     ........U...]...
   bed88:	9275 000b 926d 000b 9263 000b 9259 000b     u...m...c...Y...
   bed98:	a98d 000b                                   ....

000bed9c <_ZTV7TwoWire>:
	...
   beda4:	9387 000b 93d1 000b 93a9 000b 9389 000b     ................
   bedb4:	93b1 000b 93b9 000b 93c1 000b 93c9 000b     ................

000bedc4 <_ZTV9IPAddress>:
	...
   bedcc:	954d 000b 953d 000b 953f 000b 2575 3430     M...=...?...u%04
   beddc:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bedec:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bedfc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bee0c:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bee1c:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bee2c:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bee3c:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bee4c <_ZTVN5spark16JSONStreamWriterE>:
	...
   bee54:	9a49 000b 9a6f 000b 9a2d 000b 965b 000b     I...o...-...[...

000bee64 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bee6c:	9ea5 000b 9ebd 000b a5fd 000b 40cf 000b     .............@..

000bee7c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bee84:	9ed1 000b 9ee5 000b a7a1 000b 9a35 000b     ............5...

000bee94 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bee9c:	9a47 000b 9a7d 000b a561 000b 9a37 000b     G...}...a...7...

000beeac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   beeb4:	9a45 000b 9a8b 000b 9e0d 000b 9aad 000b     E...............

000beec4 <_ZTVN5spark12NetworkClassE>:
	...
   beecc:	a915 000b a91f 000b a929 000b a933 000b     ........)...3...
   beedc:	a93d 000b a949 000b a955 000b a95d 000b     =...I...U...]...
   beeec:	a965 000b a971 000b a979 000b a983 000b     e...q...y.......
   beefc:	a98d 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bef0c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bef0c:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bef1c:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bef2c:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bef3c:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bef4c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bef5c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bef6c <_ZTV11USARTSerial>:
	...
   bef74:	b6bd 000b b729 000b b701 000b abdd 000b     ....)...........
   bef84:	b6d1 000b b6ed 000b b6df 000b b6fb 000b     ................
   bef94:	b6bf 000b b6c3 000b                         ........

000bef9c <_ZTV9USBSerial>:
	...
   befa4:	b77b 000b b7e3 000b b7b9 000b abdd 000b     {...............
   befb4:	b7ab 000b b77d 000b b78d 000b b7dd 000b     ....}...........
   befc4:	b79d 000b b775 000b                         ....u...

000befcc <_ZSt7nothrow>:
	...

000befd8 <TWO52>:
   befd8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   befe8:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   beff8:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000bf008 <day_name.1>:
   bf008:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bf018:	6972 6153                                    riSat

000bf01d <mon_name.0>:
   bf01d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bf02d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bf03d:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bf04d:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bf05d:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bf06d:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bf07d:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bf08d:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bf09d:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bf0ad:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bf0bd:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf0cd:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf0dd:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf0ed:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf0fd:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bf10a <_ctype_>:
   bf10a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf11a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf12a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf13a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf14a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf15a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf16a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf17a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf18a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bf20b <link_const_variable_data_end>:
	...

000bf20c <link_constructors_location>:
   bf20c:	000b4e89 	.word	0x000b4e89
   bf210:	000b58e5 	.word	0x000b58e5
   bf214:	000b5fc5 	.word	0x000b5fc5
   bf218:	000b6449 	.word	0x000b6449
   bf21c:	000b6f6d 	.word	0x000b6f6d
   bf220:	000b75a5 	.word	0x000b75a5
   bf224:	000b9011 	.word	0x000b9011
   bf228:	000b90dd 	.word	0x000b90dd
   bf22c:	000b92c1 	.word	0x000b92c1
   bf230:	000ba5ed 	.word	0x000ba5ed
   bf234:	000baa65 	.word	0x000baa65
   bf238:	000baed1 	.word	0x000baed1
   bf23c:	000bb395 	.word	0x000bb395
   bf240:	000bb6a9 	.word	0x000bb6a9

000bf244 <link_constructors_end>:
	...
